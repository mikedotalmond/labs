package cmodule.Box2D {
// Start of file scope inline assembly
import flash.utils.*
import flash.display.*
import flash.text.*
import flash.events.*
import flash.net.*
import flash.system.*










public var gdomainClass:Class;
public var gshell:Boolean = false;

public function establishEnv():void
{
  try
  {
    var ns:Namespace = new Namespace("avmplus");
  
    gdomainClass = ns::["Domain"];
    gshell = true;
  }
  catch(e:*) {}
  if(!gdomainClass)
  {
    var ns:Namespace = new Namespace("flash.system");
  
    gdomainClass = ns::["ApplicationDomain"];
  }
}

establishEnv();

public var glogLvl:int = Alchemy::LogLevel;

public function log(lvl:int, msg:String):void
{
  if(lvl < glogLvl)
    trace(msg);
}

class LEByteArray extends ByteArray
{
  public function LEByteArray()
  {
    super.endian = "littleEndian";
  }

  public override function set endian(e:String):void
  {
    throw("LEByteArray endian set attempted");
  }
}

class GLEByteArrayProvider
{
  public static function get():ByteArray
  {
    var result:ByteArray;

    try
    {
      result = gdomainClass.currentDomain.domainMemory;
    }
    catch(e:*) {}

    if(!result)
    {
      result = new LEByteArray;
      try
      {
        result.length = gdomainClass.MIN_DOMAIN_MEMORY_LENGTH;
        gdomainClass.currentDomain.domainMemory = result;
      }
      catch(e:*)
      {
        log(3, "Not using domain memory");
      }
    }
    return result;
  }
}

public class MemUser
{
  public final function _mr32(addr:int):int { gstate.ds.position = addr; return gstate.ds.readInt(); }
  public final function _mru16(addr:int):int { gstate.ds.position = addr; return gstate.ds.readUnsignedShort(); }
  public final function _mrs16(addr:int):int { gstate.ds.position = addr; return gstate.ds.readShort(); }
  public final function _mru8(addr:int):int { gstate.ds.position = addr; return gstate.ds.readUnsignedByte(); }
  public final function _mrs8(addr:int):int { gstate.ds.position = addr; return gstate.ds.readByte(); }
  public final function _mrf(addr:int):Number { gstate.ds.position = addr; return gstate.ds.readFloat(); }
  public final function _mrd(addr:int):Number { gstate.ds.position = addr; return gstate.ds.readDouble(); }
  public final function _mw32(addr:int, val:int):void { gstate.ds.position = addr; gstate.ds.writeInt(val); }
  public final function _mw16(addr:int, val:int):void { gstate.ds.position = addr; gstate.ds.writeShort(val); }
  public final function _mw8(addr:int, val:int):void { gstate.ds.position = addr; gstate.ds.writeByte(val); }
  public final function _mwf(addr:int, val:Number):void { gstate.ds.position = addr; gstate.ds.writeFloat(val); }
  public final function _mwd(addr:int, val:Number):void { gstate.ds.position = addr; gstate.ds.writeDouble(val); }
}

public const gstackSize:int = 1024 * 1024;

public class MState extends MemUser
{
 
  public const ds:ByteArray = (gstate == null || gstate.ds == null) ? GLEByteArrayProvider.get() : gstate.ds;

 
Alchemy::NoVector {
  public const funcs:Array = (gstate == null) ? [null] : gstate.funcs;
}
Alchemy::Vector {
  public var funcs:Vector.<Object> = (gstate == null) ? new Vector.<Object>(1) : gstate.funcs;
}

 
  public const syms:Object = (gstate == null) ? {} : gstate.syms;
 
  public var system:CSystem = (gstate == null) ? null : gstate.system;

 
  public var esp:int;
  public var ebp:int;
  public var eax:int;
  public var edx:int;
  public var st0:Number;
  public var cf:uint;

 
  public var gworker:Machine;

  public function MState(machine:Machine)
  {
    if(machine)
    {
      gworker = machine;
      gworker.mstate = this;
    }
   
    if(gstate == null)
    {
      ds.length += gstackSize;
      esp = ds.length;
    }
  }

  public function push(v:int):void
  {
    esp -= 4;
    _mw32(esp, v);
  }
  
  public function pop():int
  {
    var v:int = _mr32(esp);
  
    esp += 4;
    return v;
  }

  public function copyTo(state:MState):void
  {
    state.esp = esp;
    state.ebp = ebp;
    state.eax = eax;
    state.edx = edx;
    state.st0 = st0;
    state.cf = cf;
    state.gworker = gworker;
  }
}

public var gpreStaticInits:Array;

public function regPreStaticInit(f:Function):void
{
  if(!gpreStaticInits)
    gpreStaticInits = [];

  gpreStaticInits.push(f);
}

public function modPreStaticInit():void
{
  if(gpreStaticInits)
    for(var i:int = 0; i < gpreStaticInits.length; i++)
      gpreStaticInits[i]();
}

public var gpostStaticInits:Array;

public function regPostStaticInit(f:Function):void
{
  if(!gpostStaticInits)
    gpostStaticInits = [];

  gpostStaticInits.push(f);
}

public function modPostStaticInit():void
{
  if(gpostStaticInits)
    for(var i:int = 0; i < gpostStaticInits.length; i++)
      gpostStaticInits[i]();
}

public function regFunc(fsm:Function):int
{
  return gstate.funcs.push(fsm) - 1;
}

public function unregFunc(n:int):void
{
 
  if(n+1 == gstate.funcs.length)
    gstate.funcs.pop();
}

public function importSym(s:String):int
{
  var res:int = gstate.syms[s];

  if(!res)
  {
    log(3, "Undefined sym: " + s);
   
   
    return exportSym(s, regFunc(function() {
      throw("Undefined sym: " + s);
    }));
  }
  return res;
}

public function exportSym(s:String, a:int):int
{
  gstate.syms[s] = a;
  return a;
}

public class StaticInitter
{
  var ptr:int = 0;
 
  public function alloc(size:int, align:int):int
  {
    if(!align)
      align = 1;
   
    ptr = ptr ? ptr : gstate.ds.length ? gstate.ds.length : 1024;
   
    ptr = (ptr + align - 1) & ~(align - 1);
   
    var result:int = ptr;
   
    ptr += size;
   
    gstate.ds.length = ptr;
    return result;
  }
 
  public function start(sym:int):void
  {
    ptr = sym;
  }

  private function ST8int(ptr:int, v:int):void
  {
    gstate.gworker.mstate._mw8(ptr, v);
  }

  private function ST16int(ptr:int, v:int):void
  {
    gstate.gworker.mstate._mw16(ptr, v);
  }

  private function ST32int(ptr:int, v:int):void
  {
    gstate.gworker.mstate._mw32(ptr, v);
  }

  public function set i8(v:uint):void
  {
    ST8int(ptr, v);
    ptr += 1;
  }
 
  public function set i16(v:uint):void
  {
    ST16int(ptr, v);
    ptr += 2;
  }
 
  public function set i32(v:uint):void
  {
    ST32int(ptr, v);
    ptr += 4;
  }
 
  public function set ascii(v:String):void
  {
    var len:int = v.length;
 
    for(var i:int = 0; i < len; i++)
      this.i8 = v.charCodeAt(i);
  }
 
  public function set asciz(v:String):void
  {
    this.ascii = v;
    this.i8 = 0;
  }
 
  public function set zero(n:int):void
  {
    while(n--)
      this.i8 = 0;
  }
}

class AlchemyLibInit
{
  public var rv:int;

  function AlchemyLibInit(_rv:int)
  {
    rv = _rv;
  }
};

class AlchemyExit
{
  public var rv:int;

  function AlchemyExit(_rv:int)
  {
    rv = _rv;
  }
};

class AlchemyYield
{
  public var ms:int;

  function AlchemyYield(_ms:int = 0)
  {
    ms = _ms;
  }
};

class AlchemyDispatch
{
};

class AlchemyBlock
{
};

class AlchemyBreakpoint
{
  public var bp:Object;

  function AlchemyBreakpoint(_bp:Object)
  {
    bp = _bp;
  }
};

class IO
{
  public function close():int { return -1; }

  public function read(buf:int, nbytes:int):int { return 0; }
  public function write(buf:int, nbytes:int):int { return 0; }
  public function set position(offs:int):void { }
  public function get position():int { return -1; }
  public function set size(n:int):void { }
  public function get size():int { return 0; }
}

class ByteArrayIO extends IO
{
  public var byteArray:ByteArray;

  public override function read(buf:int, nbytes:int):int
  {
    if(!byteArray)
      throw(new AlchemyBlock);

    var n:int = Math.min(nbytes, byteArray.bytesAvailable);

    if(n)
      byteArray.readBytes(gstate.ds, buf, n);
    return n;
  }

  public override function write(buf:int, nbytes:int):int
  {
    if(!byteArray)
      throw(new AlchemyBlock);

    if(nbytes)
      byteArray.writeBytes(gstate.ds, buf, nbytes);
    return nbytes;
  }

  public override function set position(offs:int):void
  {
    if(!byteArray)
      throw(new AlchemyBlock);

    byteArray.position = offs;
  }

  public override function get position():int
  {
    if(!byteArray)
      throw(new AlchemyBlock);

    return byteArray.position;
  }

  public override function set size(n:int):void
  {
    if(!byteArray)
      throw(new AlchemyBlock);

    byteArray.length = n;
  }

  public override function get size():int
  {
    if(!byteArray)
      throw(new AlchemyBlock);

    return byteArray.length;
  }
}

Alchemy::Shell
class ShellIO extends IO
{
  private var m_buf:String = "";
  private var m_trace:Boolean;
  private var m_closed:Boolean;

  public function ShellIO(_trace:Boolean = false)
  {
    m_trace = _trace;
  }

  public override function read(buf:int, nbytes:int):int
  {
    if(!m_buf)
    {
      var ns:Namespace = new Namespace("avmshell");
      var sys:Object = ns::["System"];

      m_buf = sys.readLine() + "\n";
      if(m_buf == "\x04\n")
        m_closed = true;
    }

    if(m_closed)
      return 0;

    var r:int = 0;

    while(m_buf && nbytes--)
    {
      r++;
      gstate._mw8(buf++, m_buf.charCodeAt(0));
      m_buf = m_buf.substr(1);
    }
    return r;
  }

  public override function write(buf:int, nbytes:int):int
  {
    var c:int = nbytes;
    var s:String = "";
    while(c--)
    {
      s += String.fromCharCode(gstate._mru8(buf));
      buf++;
    }
    if(m_trace)
      trace(s);
    else
    {
      var ns:Namespace = new Namespace("avmshell");
      var sys:Object = ns::["System"];

      sys.write(s);
    }
    return nbytes;
  }
}

Alchemy::NoShell {

class TextFieldI extends IO
{
  private var m_tf:TextField;
  private var m_start:int = -1;
  private var m_buf:String = "";
  private var m_closed:Boolean = false;

  public function TextFieldI(tf:TextField)
  {
    m_tf = tf;
    m_tf.addEventListener(KeyboardEvent.KEY_DOWN, function(event:KeyboardEvent)
    {
     
      if(String.fromCharCode(event.charCode).toLowerCase() == "d"
          && event.ctrlKey)
        m_closed = true;
     
      if(String.fromCharCode(event.charCode).toLowerCase() == "t"
          && event.ctrlKey)
        setTimeout(function():void {
          m_start = -1;
          m_tf.text = "";
        },1);
    });
   
   
   
   
   
    m_tf.addEventListener(TextEvent.TEXT_INPUT, function(event:TextEvent)
    {
      var len:int = m_tf.length;
      var selStart:int = m_tf.selectionBeginIndex;
      if(m_start < 0 || m_start > selStart)
        m_start = selStart;
      event.preventDefault();
      m_tf.replaceSelectedText(event.text);
      var selEnd:int = m_tf.selectionEndIndex;
      var fmt:TextFormat = m_tf.getTextFormat(selStart, selEnd);
      fmt.bold = false;
      m_tf.setTextFormat(fmt, selStart, selEnd);
      if(event.text.indexOf("\n") >= 0)
      {
        var ptext:String = m_tf.text;
        var nonBold:String = "";
        var len:int = m_tf.length;
        for(var i:int = m_start; i < len; i++)
        {
          var fmt:TextFormat = m_tf.getTextFormat(i, i+1);
          var bold:Boolean = fmt.bold;

          if(bold != null && !bold.valueOf())
            nonBold += ptext.charAt(i);
        }
        nonBold = nonBold.replace(/\r/g, "\n");
        var nl:int = nonBold.lastIndexOf("\n");
        var sel:int = len - (nonBold.length - nl - 1);
        m_tf.setSelection(sel, sel);
        nonBold = nonBold.substr(0, nl + 1);
        if(!m_closed)
          m_buf += nonBold;
        m_start = sel;
      }
    });
  }

  public override function read(buf:int, nbytes:int):int
  {
    if(!m_buf)
    {
      if(m_closed)
        return 0;
     
      throw new AlchemyBlock;
    }

    var r:int = 0;

    while(m_buf && nbytes--)
    {
      r++;
      gstate._mw8(buf++, m_buf.charCodeAt(0));
      m_buf = m_buf.substr(1);
    }
    return r;
  }

}

class TextFieldO extends IO
{
  private var m_tf:TextField;
  private var m_trace:Boolean;

  public function TextFieldO(tf:TextField, shouldTrace:Boolean = false)
  {
    m_tf = tf;
    m_trace = shouldTrace;
  }

  public override function write(buf:int, nbytes:int):int
  {
    var c:int = nbytes;
    var s:String = "";
    while(c--)
    {
      s += String.fromCharCode(gstate._mru8(buf));
      buf++;
    }
    if(m_trace)
      trace(s);
    var start:int = m_tf.length;
    m_tf.replaceText(start, start, s);
    var end:int = m_tf.length;
    var fmt:TextFormat = m_tf.getTextFormat(start, end);
    fmt.bold = true;
    m_tf.setTextFormat(fmt, start, end);
    m_tf.setSelection(end, end);
    return nbytes;
  }
}

}

public interface CSystem
{
 
  function setup(f:Function):void;

 
  function getargv():Array;
  function getenv():Object;
  function exit(val:int):void;

 
  function fsize(fd:int):int;
  function psize(p:int):int;
  function access(path:int, mode:int):int;
  function open(path:int, flags:int, mode:int):int;
  function ioctl(fd:int, req:int, va:int):int;
  function close(fd:int):int;
  function write(fd:int, buf:int, nbytes:int):int;
  function read(fd:int, buf:int, nbytes:int):int;
  function lseek(fd:int, offset:int, whence:int):int;
  function tell(fd:int):int;
} 


function shellExit(res:int):void
{
  Alchemy::NoShell {

  var ns:Namespace = new Namespace("flash.desktop");
  var nativeApp:Object;

  try
  {
    var nativeAppClass:Object = ns::["NativeApplication"];

    nativeApp = nativeAppClass.nativeApplication;
  }
  catch(e:*)
  {
    log(3, "No nativeApplication: " + e);
  }
  if(nativeApp)
  {
    nativeApp.exit(res);
    return;
  }

  }

  Alchemy::Shell {

  var ns:Namespace = new Namespace("avmshell");
  var sys:Object = ns::["System"];

  sys.exit(res);

  return;

  }

  throw new AlchemyExit(res);
}



var gfiles:Object = {};



Alchemy::NoShell
public class CSystemBridge implements CSystem
{
  private var sock:Socket;

  public function CSystemBridge(host:String, port:int)
  {
    sock = new Socket();
    sock.endian = "littleEndian";

    sock.addEventListener(flash.events.Event.CONNECT, sockConnect);
    sock.addEventListener(flash.events.ProgressEvent.SOCKET_DATA, sockData);
    sock.addEventListener(flash.events.IOErrorEvent.IO_ERROR, sockError);

    sock.connect(host, port);
  }

  private function sockConnect(e:Event):void
  {
log(2, "bridge connected");
  }

  private function sockError(e:IOErrorEvent):void
  {
log(2, "bridge error");
  }

 
  private var curPackBuf:ByteArray = new LEByteArray();
  private var curPackId:int;
  private var curPackLen:int;

  private function sockData(e:ProgressEvent):void
  {
    while(sock.bytesAvailable)
    {
      if(!curPackLen)
      {
        if(sock.bytesAvailable >= 8)
        {
          curPackId = sock.readInt();
          curPackLen = sock.readInt();
log(3, "bridge packet id: " + curPackId + " len: " + curPackLen);
          curPackBuf.length = curPackLen;
          curPackBuf.position = 0;
        }
        else break;
      }
      else
      {
        var len:int = sock.bytesAvailable;
  
        if(len > curPackLen)
          len = curPackLen;
        curPackLen -= len;
        while(len--)
          curPackBuf.writeByte(sock.readByte());
        if(!curPackLen)
          handlePacket();
      }
    }
  }

 
  private var handlers:Object = {};

  private function handlePacket():void
  {
    curPackBuf.position = 0;
    handlers[curPackId](curPackBuf);
    if(curPackId)
      delete handlers[curPackId];
  }

  private var sentPackId:int = 1;

  private function sendRequest(buf:ByteArray, handler:Function):void
  {
    if(handler)
      handlers[sentPackId] = handler;
    sock.writeInt(sentPackId);
    sock.writeInt(buf.length);
    sock.writeBytes(buf, 0);
    sock.flush();
    sentPackId++;
  }

 
  private var requests:Object = {};

  private function asyncReq(create:Function, handle:Function):*
  {
   
    var rid:String = String(gstate.esp);
    var req:Object = requests[rid];

    if(req)
    {
      if(req.pending)
        throw(new AlchemyBlock());
      else
      {
        delete requests[rid];
        return req.result;
      }
    }
    else
    {
      req = { pending: true };
      requests[rid] = req;

      var pack:ByteArray = new LEByteArray();

      create(pack);
      sendRequest(pack, function(buf:ByteArray):void {
        req.result = handle(buf);
        req.pending = false;
      });
      if(req.pending)
        throw(new AlchemyBlock());
    }
  }

 
  static const FSIZE:int = 1;
  static const PSIZE:int = 2;
  static const ACCESS:int = 3;
  static const OPEN:int = 4;
  static const CLOSE:int = 5;
  static const WRITE:int = 6;
  static const READ:int = 7;
  static const LSEEK:int = 8;
  static const TELL:int = 9;
  static const EXIT:int = 10;
  static const SETUP:int = 11;

  var argv:Array;
  var env:Object;

  public function setup(f:Function):void
  {
    var pack:ByteArray = new LEByteArray();

   
    pack.writeInt(SETUP);
    sendRequest(pack, function(buf:ByteArray):void {
     
     
      var argc:int = buf.readInt();

      argv = [];
      while(argc--)
        argv.push(buf.readUTF());

      var envc:int = buf.readInt();

      env = {};
      while(envc--)
      {
        var res:Array = (/([^\=]*)\=(.*)/).exec(buf.readUTF());

        if(res && res.length == 3)
          env[res[1]] = res[2];
      }
      f();
    });
  }

  public function getargv():Array
  {
    return argv;
  }

  public function getenv():Object
  {
    return env;
  }

  public function exit(val:int):void
  {
    var req:ByteArray = new LEByteArray();

    req.writeInt(EXIT);
    req.writeInt(val);
    sendRequest(req, null);
    shellExit(val);
  }

  public function fsize(fd:int):int
  {
    return asyncReq(
      function(req:ByteArray):void {
        req.writeInt(FSIZE);
        req.writeInt(fd);
      },
      function(resp:ByteArray):int {
        return resp.readInt();
      }
    );
  }

  public function psize(p:int):int
  {
    return asyncReq(
      function(req:ByteArray):void {
        req.writeInt(PSIZE);
        req.writeUTFBytes(gstate.gworker.stringFromPtr(p));
      },
      function(resp:ByteArray):int {
        return resp.readInt();
      }
    );
  }

  public function access(path:int, mode:int):int
  {
    return asyncReq(
      function(req:ByteArray):void {
        req.writeInt(ACCESS);
        req.writeInt(mode);
        req.writeUTFBytes(gstate.gworker.stringFromPtr(path));
      },
      function(resp:ByteArray):int {
        return resp.readInt();
      }
    );
  }

  public function ioctl(fd:int, req:int, va:int):int
  {
    return -1;
  }

  public function open(path:int, flags:int, mode:int):int
  {
    return asyncReq(
      function(req:ByteArray):void {
        req.writeInt(OPEN);
        req.writeInt(flags);
        req.writeInt(mode);
        req.writeUTFBytes(gstate.gworker.stringFromPtr(path));
      },
      function(resp:ByteArray):int {
        return resp.readInt();
      }
    );
  }

  public function close(fd:int):int
  {
    return asyncReq(
      function(req:ByteArray):void {
        req.writeInt(CLOSE);
        req.writeInt(fd);
      },
      function(resp:ByteArray):int {
        return resp.readInt();
      }
    );
  }

  public function write(fd:int, buf:int, nbytes:int):int
  {
    return asyncReq(
      function(req:ByteArray):void {
        req.writeInt(WRITE);
        req.writeInt(fd);
        if(nbytes > 4096)
          nbytes = 4096;
        req.writeBytes(gstate.ds, buf, nbytes);
      },
      function(resp:ByteArray):int {
        return resp.readInt();
      }
    );
  }

  public function read(fd:int, buf:int, nbytes:int):int
  {
    return asyncReq(
      function(req:ByteArray):void {
        req.writeInt(READ);
        req.writeInt(fd);
        req.writeInt(nbytes);
      },
      function(resp:ByteArray):int {
        var result:int = resp.readInt();
        var s:String = "";

        gstate.ds.position = buf; 
        while(resp.bytesAvailable)
        {
          var ch:int = resp.readByte();

          s += String.fromCharCode(ch);
          gstate.ds.writeByte(ch);
        }
log(4, "read from: " + fd + " : [" + s + "]");
        return result;
      }
    )
  }

  public function lseek(fd:int, offset:int, whence:int):int
  {
    return asyncReq(
      function(req:ByteArray):void {
        req.writeInt(LSEEK);
        req.writeInt(fd);
        req.writeInt(offset);
        req.writeInt(whence);
      },
      function(resp:ByteArray):int {
        return resp.readInt();
      }
    );
  }

  public function tell(fd:int):int
  {
    return asyncReq(
      function(req:ByteArray):void {
        req.writeInt(TELL);
        req.writeInt(fd);
      },
      function(resp:ByteArray):int {
        return resp.readInt();
      }
    );
  }

}



public class CSystemLocal implements CSystem
{
 
  private const fds:Array = [];
  private const statCache:Object = {};
  private var forceSync:Boolean;

  public function CSystemLocal(_forceSync:Boolean = false)
  {
    forceSync = _forceSync;

    Alchemy::Shell {

    fds[0] = new ShellIO();
    fds[1] = new ShellIO();
    fds[2] = new ShellIO(true);

    }

    Alchemy::NoShell {

    gtextField = new TextField();
    gtextField.width = gsprite ? gsprite.stage.stageWidth : 800;
    gtextField.height = gsprite ? gsprite.stage.stageHeight : 600;
    gtextField.multiline = true;
    gtextField.defaultTextFormat = new TextFormat("Courier New");
    gtextField.type = TextFieldType.INPUT;
    gtextField.doubleClickEnabled = true;

    fds[0] = new TextFieldI(gtextField);
    fds[1] = new TextFieldO(gtextField, gsprite == null);
    fds[2] = new TextFieldO(gtextField, true);

    if(gsprite && gtextField)
      gsprite.addChild(gtextField);
    else
      log(3, "local system w/o gsprite");
    }
  }

  public function setup(f:Function):void
  {
    f();
  }

  public function getargv():Array
  {
    return gargs;
  }

  public function getenv():Object
  {
    return genv;
  }

  public function exit(val:int):void
  {
    log(3, "exit: " + val);
    shellExit(val);
  }

 
  private function fetch(path:String):Object
  {
    var res:Object = statCache[path];

    if(!res)
    {
      var gf:ByteArray = gfiles[path];

      if(gf)
      {
        res = { pending:false, size:gf.length, data:gf };
        statCache[path] = res;

        return res;
      }
    }

    Alchemy::Shell {

      var ns:Namespace = new Namespace("avmshell");
      var file:Object = ns::["File"];

      if(!file.exists(path))
      {
        log(3, "Doesn't exist: " + path);
        return { size: -1, pending: false };
      }
      
      var ns1:Namespace = new Namespace("avmplus");
      var bac:Object = ns1::["ByteArray"];
      var bytes:ByteArray = new ByteArray;
      bytes.writeBytes(bac.readFile(path));

      bytes.position = 0;

      return { size: bytes.length, data: bytes, pending: false };

    }

    if(forceSync)
      return res || { size: -1, pending: false };

    Alchemy::NoShell {

    if(!res)
    {
      var request:URLRequest = new URLRequest(path);
      var loader:URLLoader = new URLLoader();
  
      loader.dataFormat = URLLoaderDataFormat.BINARY;
      loader.addEventListener(Event.COMPLETE, function(e:Event):void
      {
        statCache[path].data = loader.data;
        statCache[path].size = loader.data.length;
        statCache[path].pending = false;
      });
      loader.addEventListener(IOErrorEvent.IO_ERROR, function(e:Event):void
      {
        statCache[path].size = -1;
        statCache[path].pending = false;
      });

      statCache[path] = res = { pending: true };

      loader.load(request);
    }

    }

    return res;
  }

  public function access(path:int, mode:int):int
  {
    var spath:String = gstate.gworker.stringFromPtr(path);

    if(mode & ~4/*R_OK*/)
    {
log(3, "failed access(" + spath + ") mode(" + mode + ")");
      return -1;
    }

    var stat:Object = fetch(spath);

    if(stat.pending)
      throw(new AlchemyBlock);

log(3, "access(" + spath + "): " + (stat.size >= 0));

    if(stat.size < 0)
      return -1;

    return 0;
  }

  public function ioctl(fd:int, req:int, va:int):int
  {
    return -1;
  }

  public function open(path:int, flags:int, mode:int):int
  {
    var spath:String = gstate.gworker.stringFromPtr(path);

    if(flags != 0)
    {
log(3, "failed open(" + spath + ") flags(" + flags + ")");
      return -1;
    }

    var stat:Object = fetch(spath);

    if(stat.pending)
      throw(new AlchemyBlock);

    if(stat.size < 0)
    {
log(3, "failed open(" + spath + ") doesn't exist");
      return -1;
    }

    var n:int = 0;

    while(fds[n])
      n++;

    var io:ByteArrayIO = new ByteArrayIO();

    io.byteArray = new ByteArray();
    io.byteArray.writeBytes(stat.data);
    io.byteArray.position = 0;

    fds[n] = io;

log(4, "open(" + spath + "): " + io.size);
    return n;
  }

  public function close(fd:int):int
  {
    var r:int = fds[fd].close();
    fds[fd] = null;
    return r;
  }

  public function write(fd:int, buf:int, nbytes:int):int
  {
    return fds[fd].write(buf, nbytes);
  }

  public function read(fd:int, buf:int, nbytes:int):int
  {
    return fds[fd].read(buf, nbytes);
  }

  public function lseek(fd:int, offset:int, whence:int):int
  {
    var io:IO = fds[fd];

    if(whence == 0)
      io.position = offset;
    else if(whence == 1)
      io.position += offset;
    else if(whence == 2)
      io.position = io.size + offset;
    return io.position;
  }

  public function tell(fd:int):int
  {
    return fds[fd].position;
  }

  public function fsize(fd:int):int
  {
    return fds[fd].size;
  }

  public function psize(p:int):int
  {
    var path:String = gstate.gworker.stringFromPtr(p);
    var stat:Object = fetch(path);

    if(stat.pending)
      throw(new AlchemyBlock);

if(stat.size < 0)
  log(3, "psize(" + path + ") failed");
else
  log(3, "psize(" + path + "): " + stat.size);
    return stat.size;
  }
}


public const gstaticInitter:StaticInitter = new StaticInitter();

public function __addc(a:uint, b:uint):uint
{
  var s:uint = a + b;
  gstate.cf = uint(s < a);
  return s;
}

public function __subc(a:uint, b:uint):uint
{
  var s:uint = a - b;
  gstate.cf = uint(s > a);
  return s;
}

public function __adde(a:uint, b:uint):uint
{
  var s:uint = a + b + gstate.cf;
  gstate.cf = uint(s < a);
  return s;
}

public function __sube(a:uint, b:uint):uint
{
  var s:uint = a - b - gstate.cf;
  gstate.cf = uint(s > a);
  return s;
}


public function memcpy
  (dst:int, src:int, size:int):int
{
  if(size)
  {
    gstate.ds.position = dst;
    gstate.ds.writeBytes(gstate.ds, src, size);
  }
  return dst;
}

public function memmove
  (dst:int, src:int, size:int):int
{
 
 
  if(src > dst || (src + size) < dst)
    memcpy(dst, src, size);
  else
  {
    var cur:int = dst + size;
    src += size;
    while(size--)
      gstate.ds[--cur] = gstate.ds[--src];
  }
  return dst;
}

public function memset
  (dst:int, v:int, size:int):int
{
  var w:int = v | (v << 8) | (v << 16) | (v << 24);

 
  gstate.ds.position = dst;
  while(size >= 4)
  {
    gstate.ds.writeUnsignedInt(w);
    size -= 4;
  }
  while(size--)
    gstate.ds.writeByte(v);
  return dst;
}

public function _brk(addr:int):int
{
  var newLen:int = addr;

  gstate.ds.length = newLen;
  return 0;
}

public function _sbrk(incr:int):int
{
  var prior:int = gstate.ds.length;
  var newLen:int = prior + incr;

  gstate.ds.length = newLen;
  return prior;
}

const inf:Number = Number.POSITIVE_INFINITY;
const nan:Number = Number.NaN;

public function isinf(a:Number):int
{
  return int(a === Number.POSITIVE_INFINITY ||
  a === Number.NEGATIVE_INFINITY);
}
 
public function isnan(a:Number):int
{
   return int(a === Number.NaN);
}

public class Machine extends MemUser
{
 
 
  public static const dbgFileNames:Array = [];

 
 
  public static const dbgFuncs:Array = [];

 
 
  public static const dbgFuncNames:Array = [];

 
 
 
  public static const dbgLabels:Array = [];

 
 
 
  public static const dbgLocs:Array = [];

 
 
  public static const dbgScopes:Array = [];

 
 
  public static const dbgGlobals:Array = [];

 
  public static const dbgBreakpoints:Object = {};
 
  public static var dbgFrameBreakLow:int = 0;
  public static var dbgFrameBreakHigh:int = -1;

  public var state:int = 0;
  public var caller:Machine = gstate ? gstate.gworker : null;
  public var mstate:MState = caller ? caller.mstate : null;

  public function work():void
    { throw new AlchemyYield; }

  Alchemy::SetjmpAbuse
  public var freezeCache:int;
  Alchemy::SetjmpAbuse
  public static const intRegCount:int = 0;
  Alchemy::SetjmpAbuse
  public static const NumberRegCount:int = 0;

 
  public function get dbgFuncId():int { return -1; }
  public function get dbgFuncName():String { return dbgFuncNames[dbgFuncId]; }

 
  public var dbgLabel:int = 0;
  public var dbgLineNo:int = 0;
  public var dbgFileId:int = 0;
  public function get dbgFileName():String { return dbgFileNames[dbgFileId]; }
  public function get dbgLoc():Object
    { return { fileId: dbgFileId, lineNo: dbgLineNo }; }

 
  public function debugTraceMem(start:int, end:int):void
  {
    trace("");
    trace("*****");
    while(start <= end)
    {
      trace("* " + start + " : " + mstate._mr32(start));
      start += 4;
    }
    trace("");
  }

 
 
  public static function debugTraverseScope(scope:Object, label:int, f:Function):void
  {
    if(scope && label >= scope.startLabelId && label < scope.endLabelId)
    {
      f(scope);

      var scopes:Array = scope.scopes;

      for(var n:int = 0; n < scopes.length; n++)
        debugTraverseScope(scopes[n], label, f);
    }
  }

  public function debugTraverseCurrentScope(f:Function):void
  {
    debugTraverseScope(dbgScopes[dbgFuncId], dbgLabel, f);
  }

 
  public function debugLoc(fileId:int, lineNo:int):void
  {
   
   
    if(dbgFileId == fileId && dbgLineNo == lineNo)
      return;

    dbgFileId = fileId;
    dbgLineNo = lineNo;

    var locStr:String = fileId + ":" + lineNo;
    var bp:Object = dbgBreakpoints[locStr];

    if(bp && bp.enabled)
    {
      if(bp.temp)
        delete dbgBreakpoints[locStr];
      debugBreak(bp);
    }
    else if(dbgFrameBreakHigh >= dbgFrameBreakLow)
    {
      var curDepth:int = dbgDepth;

      if(curDepth >= dbgFrameBreakLow && curDepth <= dbgFrameBreakHigh)
        debugBreak(null);
    }
  }

  public function debugBreak(bp:Object):void
  {
    throw new AlchemyBreakpoint(bp);
  }
 
  public function debugLabel(label:int):void
  {
    dbgLabel = label;
  }

 
  public function get dbgDepth():int
  {
    var cur:Machine = this;
    var result:int;

    while(cur)
    {
      result++;
      cur = cur.caller;
    }
    return result;
  }

  public function get dbgTrace():String
  {
    return this.dbgFuncName + "(" + (this as Object).constructor + ") - " + this.dbgFileName + " : " + this.dbgLineNo + "(" + this.state + ")";
  }

  public static var sMS:uint;

  public function getSecsSetMS():uint
  {
    var time:Number = (new Date()).time;

    Machine.sMS = time % 1000;
    return time / 1000;
  }

 
  public function stringToPtr(addr:int, max:int, str:String):int
  {
    var w:int = str.length;

    if(max >= 0 && max < w)
      w = max;
    for(var i:int = 0; i < w; i++)
      mstate._mw8(addr++, str.charCodeAt(i));
    return w;
  }

  public function stringFromPtr(addr:int):String
  {
    var result:String = "";

    while(true)
    {
      var c:int = mstate._mru8(addr++);

      if(!c)
        break;
      result += String.fromCharCode(c);
    }
    return result;
  }

  public function backtrace():void
  {
    var cur:Machine = this;

    trace("");
    trace("*** backtrace");
    var framePtr:int = mstate.ebp;
    while(cur)
    {
      trace(cur.dbgTrace);

      cur.debugTraverseCurrentScope(
          function(scope:Object):void {
        trace("{{{");
        var vars:Array = scope.vars;
        for(var n:int = 0; n < vars.length; n += 2)
        {
         
          var descAddr:int = vars[n + 0];
         
          var nameAddr:int = mstate._mr32(descAddr + 8);
          var name:String = stringFromPtr(nameAddr);

          var frameOffset:int = vars[n + 1];

          trace("--- " + name + " (" + (frameOffset + framePtr) + ")");
        }
      });
      framePtr = mstate._mr32(framePtr);
      cur = cur.caller;
    }
    trace("");
  }

}





Alchemy::NoShell {

public var gtextField:TextField;
public var gsprite:Sprite;

}

Alchemy::Shell {

public var gsprite:Object;

}

public var grunner:Object;


public var genv:Object = {
  LANG: "en_US.UTF-8",
  TERM: "ansi"
};
public var gargs:Array = [
  "a.out"
];

public const gstate:MState


= new MState(new Machine);
const mstate:MState = gstate;





public const gsetjmpMachine2ESPMap:Dictionary = new Dictionary(true);

Alchemy::SetjmpAbuse
{

public const gsetjmpAbuseMap:Object = {};

public const gsetjmpFrozenMachineSet:Dictionary = new Dictionary(true);


public var gsetjmpFreezeIRCs:Object = {};
public var gsetjmpAbuseAlloc:Function;
public var gsetjmpAbuseFree:Function;
}

public const i__setjmp = exportSym("__setjmp", regFunc(FSM__setjmp.start));
public const i_setjmp = exportSym("_setjmp", i__setjmp);


function findMachineForESP(esp:int):Machine
{
  for (var mach:Object in gsetjmpMachine2ESPMap)
  {
    if(gsetjmpMachine2ESPMap[mach] == esp)
      return Machine(mach);
  }
  return null;
}

public class FSM__setjmp extends Machine
{
  public static function start():void
  {
    gstate.gworker = new FSM__setjmp;
    throw new AlchemyDispatch;
  }

  public override function work():void
  {
    mstate.pop();

    var buf:int = _mr32(mstate.esp);

    _mw32(buf + 0, 667788);
    _mw32(buf + 4, caller.state);
    _mw32(buf + 8, mstate.esp);
    _mw32(buf + 12, mstate.ebp);
    _mw32(buf + 16, 887766);

log(4, "setjmp: " + buf);
    var mach:Machine = findMachineForESP(mstate.esp);

    if(mach)
      delete gsetjmpMachine2ESPMap[mach];

    gsetjmpMachine2ESPMap[caller] = mstate.esp;

    Alchemy::SetjmpAbuse
    {
      var abuse:* = gsetjmpAbuseMap[buf];

      if(abuse)
        abuse.setjmp(buf);
    }

    mstate.gworker = caller;
    mstate.eax = 0;
  }
}

public const i__longjmp = exportSym("__longjmp", regFunc(FSM__longjmp.start));
public const i_longjmp = exportSym("_longjmp", i__longjmp);

public class FSM__longjmp extends Machine
{
  public static function start():void
  {
    gstate.gworker = new FSM__longjmp;
    throw new AlchemyDispatch;
  }

  public override function work():void
  {
    mstate.pop();
    var buf:int = _mr32(mstate.esp);
    var ret:int = _mr32(mstate.esp + 4);

log(4, "longjmp: " + buf);

    var istate:int = _mr32(buf + 4);
    var nesp:int = _mr32(buf + 8);
    var nebp:int = _mr32(buf + 12);
log(3, "longjmp -- buf: " + buf + " state: " + istate + " esp: " + nesp +
  " ebp: " + nebp);
    if(!buf || !nesp || !nebp)
      throw("longjmp -- bad jmp_buf");

    var mach:Machine = findMachineForESP(nesp);

    Alchemy::SetjmpAbuse
    {
      var abuse:* = gsetjmpAbuseMap[buf];

      if(abuse)
        mach = abuse.longjmp(buf, mach);
    }

    if(!mach)
    {
      debugTraceMem(buf - 24, buf + 24);
/*      for(var k:String in gsetjmpESP2MachineMap)
        log(3, k + " -> " + gsetjmpESP2MachineMap[k].dbgFuncName);
*/
      throw("longjmp -- bad esp");
    }

   
    delete gsetjmpMachine2ESPMap[mach];

    mstate.gworker = mach;
    mach.state = istate;
    mstate.esp = nesp;
    mstate.ebp = nebp;
    mstate.eax = ret;

    throw new AlchemyDispatch;
  }

}

public interface Debuggee
{
  function suspend():void;
  function resume():void;
  function get isRunning():Boolean;

  function cancelDebug():void;
}

Alchemy::NoShell
public class GDBMIDebugger
{
Alchemy::NoDebugger {
  public function GDBMIDEbugger(dbge:Debuggee) {}
}
Alchemy::Debugger {
  var sock:Socket;
  var debuggee:Debuggee;

  public function GDBMIDebugger(dbge:Debuggee)
  {
    sock = new Socket();
    debuggee = dbge;

    sock.addEventListener(flash.events.Event.CONNECT, sockConnect);
    sock.addEventListener(flash.events.ProgressEvent.SOCKET_DATA, sockData);
    sock.addEventListener(flash.events.IOErrorEvent.IO_ERROR, sockError);
    sock.addEventListener(flash.events.SecurityErrorEvent.SECURITY_ERROR,
      sockError);

    debuggee.suspend();
    try
    {
      sock.connect("localhost", 5678);
    }
    catch(e:*)
    {
      sockError(e);
    }
  }

  private function sockConnect(e:Event):void
  {
    log(2, "debugger connect");
    prompt();
  }

  private function sockError(e:*):void
  {
    log(2, "debugger socket error: " + e.toString());
    if(!debuggee.isRunning)
      debuggee.resume();
    debuggee.cancelDebug();
  }

  private var buffer:String = "";

  private function sockData(e:ProgressEvent):void
  {
    while(sock.bytesAvailable)
    {
      var ch:int = sock.readUnsignedByte();

      if(ch == 3)
      {
        if(debuggee.isRunning)
        {
          debuggee.suspend();
          broken(null);
        }
      }
      else
        buffer += String.fromCharCode(ch);
    }

    var cmds:Array = buffer.split(/\n/);

    for(var i:int = 0; i < cmds.length - 1; i++)
      command(cmds[i]);
    buffer = cmds[cmds.length - 1];
  }

  private function toMI(obj:*, outer:Boolean = true):String
  {
    if(typeof obj == "object")
    {
      var arr:Array = obj as Array;
      var first:Boolean = true;

      if(arr)
      {
        var result:String = outer ? "" : "[";

        for(var i:int = 0; i < arr.length; i++)
        {
          if(first)
            first = false;
          else
            result += ",";
          result += toMI(arr[i], false);
        }
        return outer ? result : (result + "]");
      }
      else
      {
        var result:String = "";
        var nkeys:int = 0;
        var keys:Array = (obj && obj.__order) ? obj.__order : null;

        if(!keys)
        {
          keys = [];
          for(var key:String in obj)
            keys.push(key);
        }
        for(var ki:int = 0; ki < keys.length; ki++)
        {
          if(first)
            first = false;
          else
            result += ",";
          var key:String = keys[ki];
          result += key + "=" + toMI(obj[key], false);
          nkeys++;
        }
        return (outer || nkeys == 1) ? result : ("{" + result + "}");
      }
    }
    else
      return toCString(obj.toString());
  }

  private function toCString(str:String):String
  {
     
      return "\"" + str.replace("\\", "\\\\")
        .replace("\"", "\\\"").replace("\r", "\\r").replace("\n", "\\n")
        + "\"";
  }

  private function respond(str:String, resp:String = "",
      rest:Object = null):void
  {
    var whole:String = str;

    if(resp)
    {
      whole += resp;
      if(rest)
        whole += "," + toMI(rest);
    }
    sock.writeUTFBytes(whole + "\n");
    sock.flush();
    log(2, "DBG> " + whole);
  }

  private var promptStr:String = "(gdb) ";

  private function prompt():void
  {
    respond(promptStr);
  }

  private function console(str:String):void
  {
    respond("~" + toCString(str));
  }

  private function done(id:String, rest:Object = null):void
  {
    respond(id, "^done", rest);
  }

  private function running(id:String, rest:Object = null):void
  {
    respond(id, "^running", rest);
  }

  private function stopped(id:String, rest:Object = null):void
  {
    respond(id, "*stopped", rest);
  }

  private function error(id:String, msg:String):void
  {
    respond(id, "^error", { msg: msg } );
  }

 
  private function findSymNum(sym:String):int
  {
    var symNames:Array = Machine.dbgFuncNames;

    for(var i:int = 1; i < symNames.length; i++)
      if(sym == symNames[i])
        return i;
    return 0;
  }

 
  private function findSymLoc(sym:String):Object
  {
    var num:int = findSymNum(sym);

    if(num)
    {
      var locs:Array = Machine.dbgLocs;

      for(var i:int = 0; i < locs.length; i += 4)
        if(locs[i + 2] == num)
          return { fileId: locs[i + 0], lineNo: locs[i + 1] };
    }
    return null;
  }

/* DEAD?
 
  private function findNextLoc(loc:Object):Object
  {
    var locs:Array = Machine.dbgLocs;

    for(var i:int = 0; i < locs.length - 4; i += 4)
      if(locs[i + 0] == loc.fileId && locs[i + 1] == loc.lineNo &&
          locs[i + 2] == locs[i + 6])
        return { fileId: locs[i + 4], lineNo: locs[i + 5] };
    return null;
  }
*/

  private var breakpointNum:int = 1;

  private function breakInsert(cmdId:String, paramStr:String):void
  {
    var params:Array = paramStr.split(/\s+/);
    var temp:Boolean = false;
    var sym:String = "";

    for(var i:int = 0; i < params.length; i++)
    {
     
      if(params[i] == "-t")
        temp = true;
      else
        sym = params[i];
    }

   
    var loc:Object = findSymLoc(sym);

    if(loc)
    {
      var bp:Object = { temp: temp, number: breakpointNum++, enabled: true };
      var locStr = loc.fileId + ":" + loc.lineNo;

      log(2, "debug break insert: " + locStr);
      Machine.dbgBreakpoints[locStr] = bp;
      done(cmdId, { bkpt:
        { number: bp.number, enabled: bp.enabled ? "y" : "n" }});
    }
    else
      error(cmdId, "Can't find: " + sym);
  }

  private function info(id:String, paramString:String):void
  {
    if(paramString == "sharedlibrary")
    {
      console("From        To          Syms Read    Shared Object Library\n");
      done(id);
    }
    else if(paramString == "threads")
    {
      console("* 1 thread 1\n");
      done(id);
    }
    else
      error(id, "No info for: " + paramString);
  }

 
  static const maxStack:int = 10000;

 
  private var selectedFrameNum:int = 0;

 
  private function getFrame(n:int):int
  {
    var ptr:int = gstate.ebp;

    for(var i:int = 0; i < n; i++)
      ptr = gstate.gworker._mr32(ptr);
    return ptr;
  }

 
 
  private function getFrameR(n:int):int
  {
    return getFrame(gstate.gworker.dbgDepth - n);
  }

 
  private function get selectedFrame():int
  {
    return getFrame(selectedFrameNum);
  }

 
  private function getMachine(n:int):Machine
  {
    var curMach:Machine = gstate.gworker;

    for(var i:int = 0; i < n; i++)
      curMach = curMach.caller;
    return curMach;
  }

 
 
  private function getMachineR(n:int):Machine
  {
    return getMachine(gstate.gworker.dbgDepth - n);
  }

 
  private function get selectedMachine():Machine
  {
    return getMachine(selectedFrameNum);
  }

  public function stackListLocals(id:String, paramString:String):void
  {
    var params:Array = paramString.split(/\s+/);
   
    var showValues:int = (params && params.length > 0) ? params[0] : 0;
    var curMach:Machine = selectedMachine;

    var locals:Array = [];

    curMach.debugTraverseCurrentScope(function(scope:Object):void {
        var vars:Array = scope.vars;
        for(var n:int = 0; n < vars.length; n += 2)
        {
         
          var descAddr:int = vars[n + 0];
         
          var nameAddr:int = curMach._mr32(descAddr + 8);
          var name:String = curMach.stringFromPtr(nameAddr);

          locals.push({ name: name });
        }
    });
    done(id, { locals: locals });
  }

  public function stackListArguments(id:String, paramString:String):void
  {
    var params:Array = paramString.split(/\s+/);
   
    var showValues:int = (params && params.length > 0) ? params[0] : 0;
    var lowFrame:int = (params && params.length > 1) ? params[1] : 0;
    var highFrame:int = (params && params.length > 2) ? params[2] : maxStack;
    var curFrame:int = lowFrame;
    var curMach:Machine = getMachine(lowFrame);

    var frames:Array = [];

    while(curMach && curFrame <= highFrame)
    {
     
      var frame:Object = {
        level: curFrame,
        args: []
      };
      frames.push({ frame: frame });
      curFrame++;
      curMach = curMach.caller;
    } 
    done(id, { "stack-args": frames });
  }

  public function stackListFrames(id:String, paramString:String):void
  {
    var params:Array = paramString.split(/\s+/);
    var lowFrame:int = (params && params.length > 0) ? params[0] : 0;
    var highFrame:int = (params && params.length > 1) ? params[1] : maxStack;
    var curFrame:int = lowFrame;
    var curMach:Machine = getMachine(lowFrame);

    var frames:Array = [];

    while(curMach && curFrame <= highFrame)
    {
     
      var frame:Object = {
        level: curFrame,
        addr: "0xffffffff",
        func: curMach.dbgFuncName,
        file: curMach.dbgFileName,
        line: curMach.dbgLineNo
      };
      frames.push({ frame: frame });
      curFrame++;
      curMach = curMach.caller;
    } 
    done(id, { stack: frames });
  }

  private function execStep(id:String, how:String):void
  {
    if(debuggee.isRunning)
      error(id, "Already running");
    else
    {
      var depth:int = gstate.gworker.dbgDepth;

      switch(how)
      {
      default:
      case "in":
        Machine.dbgFrameBreakLow = 0;
        Machine.dbgFrameBreakHigh = maxStack;
        break;
      case "over":
        Machine.dbgFrameBreakLow = 0;
        Machine.dbgFrameBreakHigh = depth;
        break;
      case "out":
        Machine.dbgFrameBreakLow = 0;
        Machine.dbgFrameBreakHigh = depth - 1;
        break;
      }
        
      debuggee.resume();
      running(id);
    }
  }

  private var vars:Object = {};

  private function varCreate(id:String, paramString:String):void
  {
   
    var params:Array = paramString.split(/\s+/);

   
    if(!params || params.length != 3 || params[0] != "-" || params[1] != "*")
      error(id, "Invalid var-create params: " + paramString);
    else
    {
      var vname:String = params[2];
      var curMach:Machine = selectedMachine;
     
      var rframe:int = curMach.dbgDepth
      var varDesc:Object;

      if(vname.charAt(0) == "$")
        varDesc = { name: vname }
      else
        curMach.debugTraverseCurrentScope(function(scope:Object):void{
          var vars:Array = scope.vars;
          for(var n:int = 0; n < vars.length; n += 2)
          {
           
            var descAddr:int = vars[n + 0];
           
            var nameAddr:int = curMach._mr32(descAddr + 8);
            var name:String = curMach.stringFromPtr(nameAddr);
  
            if(name == vname)
            {
              varDesc =
                { name: name, frameOffset: vars[n + 1], rframe: rframe };
            }
          }
      });

      if(varDesc)
      {
        var i:int = 0;
        var name:String;

        while(vars[(name = ("var" + i))])
          i++;

        vars[name] = varDesc;
       
        done(id, { name: name, numchild: 0, type: "int" });
      }
      else
        error(id, "var-create can't find: " + params[2]);
    }
  }

  private function varDelete(id:String, paramString:String):void
  {
    if(vars[paramString])
    {
      delete vars[paramString];
      done(id);
    }
    else
      error(id, "var-delete not tracking: " + paramString);
  }

  private function varUpdate(id:String, paramString:String):void
  {
    if(vars[paramString])
    {
      var varDesc:Object = vars[paramString];

     
     
      done(id, { changelist: [ {
        name: paramString,
        in_scope: true,
        type_changed: false,
        __order: ["name", "in_scope", "type_changed"]
      } ] });
    }
    else
      error(id, "var-update not tracking: " + paramString);
  }

  private function varEvaluateExpression(id:String, paramString:String):void
  {
    if(vars[paramString])
    {
      var varDesc:Object = vars[paramString];
      var value:String;

      if(varDesc.name.charAt(0) == "$")
      {
        var reg:String = varDesc.name.substr(1);
        var curMach:Machine = selectedMachine

        value = gstate.hasOwnProperty(reg) ? gstate[reg] :
          curMach.hasOwnProperty(reg) ? curMach[reg] : "-1";
      }
      else
        value = String(
          gstate.gworker._mr32(getFrameR(varDesc.rframe) + varDesc.frameOffset))
     
      done(id, {
        value: value
      });
    }
    else
      error(id, "var-evaluate-expression not tracking: " + paramString);
  }

  static const regNames:Array = [
    "state",
    "eax", "edx", "ebp", "esp", "st0", "cf",
    "i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7",
    "i8", "i9", "i10", "i11", "i12", "i13", "i14", "i15",
    "i16", "i17", "i18", "i19", "i20", "i21", "i22", "i23",
    "i24", "i25", "i26", "i27", "i28", "i29", "i30", "i31"/*,
    "f0", "f1", "f2", "f3", "f4", "f5", "f6", "f7",
    "f8", "f9", "f10", "f11", "f12", "f13", "f14", "f15",
    "f16", "f17", "f18", "f19", "f20", "f21", "f22", "f23",
    "f24", "f25", "f26", "f27", "f28", "f29", "f30", "f31"
*/
  ];

  public function command(cmd:String):void
  {
    log(2, "DBG< " + cmd);
    var parse1:Array = /^(\d*)[- ](\S+)\s*(.*)/.exec(cmd);

    if(!parse1)
      error("", "Couldn't parse command");
    else
    {
      var cmdId:String = parse1[1];
      var cmdName:String = parse1[2];
      var paramString:String = parse1[3];

      switch(cmdName)
      {
     
      case "environment-cd":
      case "environment-directory":
      case "gdb-set":
       
        done(cmdId);
        break;
      case "gdb-exit":
        done(cmdId);
        sock.close();
        return;
      case "gdb-show":
        if(paramString == "prompt")
          done(cmdId, { value: promptStr });
        else
          error(cmdId, "Can't show: " + paramString);
        break;
      case "data-list-register-names":
        done(cmdId, { "register-names": regNames });
        break;
      case "data-list-changed-registers":
        done(cmdId, { "changed-registers": regNames.map(
          function(i:*, n:int, a:Array):int { return n; }
        )});
        break;
      case "info":
        info(cmdId, paramString);
        break;
      case "stack-select-frame":
       
        selectedFrameNum = int(paramString);
        done(cmdId);
        break;
      case "stack-info-depth":
        done(cmdId, { depth: gstate.gworker.dbgDepth });
        break;
      case "stack-list-frames":
        stackListFrames(cmdId, paramString);
        break;
      case "stack-list-arguments":
        stackListArguments(cmdId, paramString);
        break;
      case "stack-list-locals":
        stackListLocals(cmdId, paramString);
        break;
      case "exec-continue":
      case "exec-run":
        if(debuggee.isRunning)
          error(cmdId, "Already running");
        else
        {
          debuggee.resume();
          running(cmdId);
        }
        break;
      case "exec-next":
        execStep(cmdId, "over");
        break;
      case "exec-step":
        execStep(cmdId, "in");
        break;
      case "exec-finish":
        execStep(cmdId, "out");
        break;
      case "break-insert":
        breakInsert(cmdId, paramString);
        break;
      case "var-create":
        varCreate(cmdId, paramString);
        break;
      case "var-delete":
        varDelete(cmdId, paramString);
        break;
      case "var-update":
        varUpdate(cmdId, paramString);
        break;
      case "var-evaluate-expression":
        varEvaluateExpression(cmdId, paramString);
        break;
      default:
        error(cmdId, "Undefined MI command: " + cmdName);
        break;
      }
    }
    prompt();
  }

  public function signal(sig:Object):void
  {
   
    broken(null);
  }

  public function broken(bp:Object):void
  {
    log(2, "debugger broken");
    selectedFrameNum = 0;
    Machine.dbgFrameBreakLow = 0;
    Machine.dbgFrameBreakHigh = -1;
    stopped("");
    prompt();
  }
}
}


public class CRunner implements Debuggee
{
  Alchemy::NoShell
  var debugger:GDBMIDebugger;

  Alchemy::Shell
  var debugger:Object;

  Alchemy::NoShell
  var timer:Timer;

  var suspended:int = 0;
  var forceSyncSystem:Boolean;

  public function CRunner(_forceSyncSystem:Boolean = false)
  {
    if(grunner)
      log(1, "More than one CRunner!");
    grunner = this;
    forceSyncSystem = _forceSyncSystem;
  }

  public function cancelDebug():void
  {
    debugger = null;
  }

  public function get isRunning():Boolean
  {
    return suspended <= 0;
  }

  public function suspend():void
  {
    suspended++;

    Alchemy::NoShell {

    if(timer && timer.running)
      timer.stop();

    }
  }

  public function resume():void
  {
    if(!--suspended)
      startWork();
  }

  private function startWork():void
  {
    Alchemy::NoShell {

    if(!timer.running)
    {
      timer.delay = 1;
      timer.start();
    }

    }
  }

  Alchemy::Debugger
  private function startDebugger():void
  {
    Alchemy::NoShell {

    debugger = new GDBMIDebugger(this);

    }

    Alchemy::Shell {

      throw("No debug support in shell...");

    }
  }

  public function work():void
  {
    if(!isRunning)
      return;

    try
    {
      var startTime:Number = (new Date).time;

      while(true)
      {
        var checkInterval:int = 1000;
      

        while(checkInterval > 0)
        {
          try
          {
            while(checkInterval-- > 0)
              gstate.gworker.work();
          } catch(e:AlchemyDispatch) {}
        }
        if(((new Date).time - startTime) >= 1000 * 10)
          throw(new AlchemyYield);
      }
    }
    catch(e:AlchemyExit)
    {
      Alchemy::NoShell {

      timer.stop();

      }

      gstate.system.exit(e.rv);
    }
    catch(e:AlchemyYield)
    {
      Alchemy::NoShell {

      var ms:int = e.ms;

      timer.delay = (ms > 0 ? ms : 1);

      }
    }
    catch(e:AlchemyBlock)
    {
      Alchemy::NoShell {

     
      timer.delay = 10;

      }
    }
    catch(e:AlchemyBreakpoint)
    {
      Alchemy::Debugger
      {
        if(debugger)
        {
          suspend();
          debugger.broken(e.bp);
        }
        else
          throw(e);
      }
      Alchemy::NoDebugger
      {
        throw(e);
      }
    }
/*
    catch(e:AlchemyLibInit)
      { throw(e); }
    catch(e:*)
    {
      log(1, e);
      if(debugger && gstate && gstate.gworker)
      {
        suspend();
        debugger.signal(e);
      }
      else
      {
        if(gstate && gstate.gworker)
        {
          try {
            gstate.gworker.backtrace();
          } catch(e:*) {}
        }
        gstate.system.exit(-1);
        throw(e);
      }
    }
*/
  }

  public function rawAllocString(str:String):int
  {
    var result:int = gstate.ds.length;

    gstate.ds.length += str.length + 1;
    gstate.ds.position = result;
    for(var i:int = 0; i < str.length; i++)
      gstate.ds.writeByte(str.charCodeAt(i));
    gstate.ds.writeByte(0);
    return result;
  }

  public function rawAllocIntArray(arr:Array):int
  {
    var result:int = gstate.ds.length;

    gstate.ds.length += (arr.length + 1) * 4;
    gstate.ds.position = result;
    for(var i:int = 0; i < arr.length; i++)
      gstate.ds.writeInt(arr[i]);
    return result;
  }

  public function rawAllocStringArray(arr:Array):Array
  {
    var ptrs:Array = [];

    for(var i:int = 0; i < arr.length; i++)
      ptrs.push(rawAllocString(arr[i]));
    return ptrs;
  }

  public function createEnv(obj:Object):Array
  {
    var kvps:Array = [];

    for(var key:String in obj)
      kvps.push(key + "=" + obj[key]);

    return rawAllocStringArray(kvps).concat(0);
  }

  public function createArgv(arr:Array):Array
  {
    return rawAllocStringArray(arr).concat(0);
  }

  public function startSystem():void
  {
    Alchemy::NoShell {

    if(!forceSyncSystem)
    {
      var request:URLRequest = new URLRequest(".swfbridge");
      var loader:URLLoader = new URLLoader();
  
      loader.dataFormat = URLLoaderDataFormat.TEXT;
      loader.addEventListener(Event.COMPLETE, function(e:Event):void
      {
        var xml:XML = new XML(loader.data);
  
        if(xml && xml.name() == "bridge" && xml.host && xml.port)
          startSystemBridge(xml.host, xml.port);
        else
          startSystemLocal();
      });
      loader.addEventListener(IOErrorEvent.IO_ERROR, function(e:Event):void
      {
        startSystemLocal();
      });
      loader.load(request);
      return;
    }

    }

    startSystemLocal(true);
  }

 
  Alchemy::NoShell
  public function startSystemBridge(host:String, port:int):void
  {
log(3, "bridge: " + host + " port: " + port);
    gstate.system = new CSystemBridge(host, port);
    gstate.system.setup(startInit);
  }

 
 
  public function startSystemLocal(forceSync:Boolean = false):void
  {
log(3, "local system");
    gstate.system = new CSystemLocal(forceSync);
    gstate.system.setup(startInit);
  }

  public function startInit():void
  {
    log(2, "Static init...");
   
    modStaticInit();

    var args:Array = gstate.system.getargv();
    var env:Object = gstate.system.getenv();
    var argv:Array = createArgv(args);
    var envp:Array = createEnv(env);
    var startArgs:Array = [args.length].concat(argv, envp);
    var ap:int = rawAllocIntArray(startArgs);

   
    gstate.ds.length = (gstate.ds.length + 4095) & ~4095;

    gstate.push(ap);
    gstate.push(0);

    log(2, "Starting work...");

    Alchemy::NoShell {

    timer = new Timer(1);
    timer.addEventListener(flash.events.TimerEvent.TIMER, 
      function(event:TimerEvent):void { work() });

    }

    try
    {
      FSM__start.start();
    }
    catch(e:AlchemyExit)
    {
      gstate.system.exit(e.rv);
      return;
    }
    catch(e:AlchemyYield) {}
    catch(e:AlchemyDispatch) {}
    catch(e:AlchemyBlock) {}

    Alchemy::NoShell {
    Alchemy::Debugger {
    if(!forceSyncSystem)
    {
      startDebugger();
      return;
    }

    }
    }

    startWork();
  }
}



interface ICAllocator
{
  function alloc(size:int):int;
  function free(ptr:int):void;
}


class CHeapAllocator implements ICAllocator
{
  private var pmalloc:Function;
  private var pfree:Function;
  
  public function alloc(n:int):int
  {
    if(pmalloc == null)
      pmalloc = (new CProcTypemap(CTypemap.PtrType,
        [CTypemap.IntType])).fromC([_malloc]);
    var result:int = pmalloc(n);
    return result;
  }
  
  public function free(ptr:int):void
  {
    if(pfree == null)
      pfree = (new CProcTypemap(CTypemap.VoidType,
        [CTypemap.PtrType])).fromC([_free]);
    pfree(ptr);
  }
}




class CTypemap
{
  public static var BufferType:CBufferTypemap;
  public static var SizedStrType:CSizedStrUTF8Typemap;
  public static var AS3ValType:CAS3ValTypemap;

  public static var VoidType:CVoidTypemap;
  public static var PtrType:CPtrTypemap;
  public static var IntType:CIntTypemap;
  public static var DoubleType:CDoubleTypemap;
  public static var StrType:CStrUTF8Typemap;

  public static var IntRefType:CRefTypemap;
  public static var DoubleRefType:CRefTypemap;
  public static var StrRefType:CRefTypemap;
  
  public static function getTypeByName(name:String):CTypemap
  {
    return CTypemap[name];
  }

  public static function getTypesByNameArray(names:Array):Array
  {
    var result:Array = [];
    if(names)
      for each(var name:* in names)
        result.push(CTypemap.getTypeByName(name));
    return result;
  }

  public static function getTypesByNames(names:String):Array
  {
    return CTypemap.getTypesByNameArray(names.split(/\s*,\s*/));
  }

 
 
 
 
  public function get ptrLevel():int { return 0; }

 
 
  public function get typeSize():int { return 4; }
  
 
 
  public function getValueSize(v:*):int { return typeSize; }
  
 
  public function fromC(v:Array):* { return undefined; }
  
 
 
 
  public function createC(v:*, ptr:int = 0):Array { return null; }

 
  public function destroyC(v:Array):void { }
  
 
  public function fromReturnRegs(regs:Object):*
  {
    var a:Array = [regs.eax];
    var result:* = fromC(a);

    destroyC(a);
    return result;
  }

 
  public function toReturnRegs(regs:Object, v:*, ptr:int = 0):void
    { regs.eax = createC(v, ptr)[0]; }
  
 
  public function readValue(ptr:int):*
  {
   
    var a:Array = [];
    mstate.ds.position = ptr;
    for(var n:int = 0; n < typeSize; n++)
      a.push(mstate.ds.readInt());
    return fromC(a);
  }
  
 
  public function writeValue(ptr:int, v:*):void
  {
   
    var a:Array = createC(v);
    mstate.ds.position = ptr;
    for(var n:int = 0; n < a.length; n++)
      mstate.ds.writeInt(a[n]);
  }
}


class CVoidTypemap extends CTypemap
{
  public override function get typeSize():int { return 0; }

  public override function fromReturnRegs(regs:Object):* { return undefined; }
  public override function toReturnRegs(regs:Object, v:*, ptr:int = 0):void { }
}



class CAllocedValueTypemap extends CTypemap
{
  private var allocator:ICAllocator;
  
  public function CAllocedValueTypemap(_allocator:ICAllocator)
  {
    allocator = _allocator;
  }
  
  public override function fromC(v:Array):* { return readValue(v[0]); }

  public override function createC(v:*, ptr:int = 0):Array
  {
    if(!ptr)
      ptr = alloc(v);
    writeValue(ptr, v);
    return [ptr];
  }
  
  public override function destroyC(v:Array):void
  {
    free(v[0]);  
  }
  
  protected function alloc(v:*):int { return allocator.alloc(getValueSize(v)); }
  protected function free(ptr:int):void { return allocator.free(ptr); }
}


class CStrUTF8Typemap extends CAllocedValueTypemap
{
  public function CStrUTF8Typemap(allocator:ICAllocator = null)
  {
    if(!allocator)
      allocator =  new CHeapAllocator;
    super(allocator);  
  }
  
  public override function get ptrLevel():int { return 1; }

 
  protected function ByteArrayForString(s:String):ByteArray
  {
    var result:ByteArray = new ByteArray;

    result.writeUTFBytes(s);
    result.writeByte(0);
    result.position = 0;
    
    return result;
  }
  
  public override function getValueSize(v:*):int
  {
    return ByteArrayForString(String(v)).length;
  }
  
  public override function readValue(ptr:int):*
  {
    mstate.ds.position = ptr;

    var len:int = 0;
    
    while(mstate.ds.readByte() != 0)
      len++;
    mstate.ds.position = ptr;
    return mstate.ds.readUTFBytes(len);
  }
  
  public override function writeValue(ptr:int, v:*):void
  {
    ByteArrayForString(String(v)).readBytes(mstate.ds, ptr);
  }
}


class CIntTypemap extends CTypemap
{
  public override function fromC(v:Array):* { return int(v[0]); }
  public override function createC(v:*, ptr:int = 0):Array { return [int(v)]; }
}


class CPtrTypemap extends CTypemap
{
  public override function fromC(v:Array):* { return int(v[0]); }
  public override function createC(v:*, ptr:int = 0):Array { return [int(v)]; }
}



class CRefTypemap extends CTypemap
{
  private var subtype:CTypemap;

  public function CRefTypemap(_subtype:CTypemap)
  {
    subtype = _subtype;
  }

  public override function fromC(v:Array):*
  {
    var p:int = v[0];

    for(var n:int = 0; n < subtype.ptrLevel; n++)
    {
      mstate.ds.position = p;
      p = mstate.ds.readInt();
    }
    return subtype.readValue(p);
  }

  public override function createC(v:*, ptr:int = 0):Array { return null; }
}


class CSizedStrUTF8Typemap extends CTypemap
{
  public override function get typeSize():int { return 8; }
  
  public override function fromC(v:Array):*
  {
    mstate.ds.position = v[0];
    return mstate.ds.readUTFBytes(v[1]);
  }
}


class CDoubleTypemap extends CTypemap
{
  private var scratch:ByteArray;
  
  public function CDoubleTypemap()
  {
    scratch = new ByteArray;
    scratch.length = 8;
    scratch.endian = "littleEndian";  
  }
  
  public override function get typeSize():int { return 8; }
  
  public override function fromC(v:Array):*
  {
    scratch.position = 0;
    scratch.writeInt(v[0]);
    scratch.writeInt(v[1]);
    scratch.position = 0;
    return scratch.readDouble();
  }
  
  public override function createC(v:*, ptr:int = 0):Array
  {
    scratch.position = 0;
    scratch.writeDouble(v);
    scratch.position = 0;
    return [ scratch.readInt(), scratch.readInt() ];
  }
  
  public override function fromReturnRegs(regs:Object):* { return regs.st0; }
  public override function toReturnRegs(regs:Object, v:*, ptr:int = 0):void { regs.st0 = v; }
}

class RCValue
{
  public var value:*;
  public var id:int;
  public var rc:int = 1;

  public function RCValue(_value:*, _id:int) { value = _value; id = _id; }
}


class ValueTracker
{
 
  private var val2rcv:Dictionary = new Dictionary;
 
  private var id2key:Object = {};
  private var snum:int = 1;

  public function acquireId(id:int):int
  {
    if(id)
    {
      var key:Object = id2key[id];

      val2rcv[key].rc++;
    }
    return id;
  }

  public function acquire(val:*):int
  {
    if(typeof(val) == "undefined")
      return 0;

    var ov:Object = Object(val);

   
   
    if(ov instanceof QName)
      ov = "*VT*QName*/" + ov.toString();

    var v:* = val2rcv[ov];
    var id:int;

    if(typeof(v) == "undefined")
    {
      while(!snum || typeof(id2key[snum]) != "undefined")
        snum++;
      id = snum;
      val2rcv[ov] = new RCValue(val, id);
      id2key[id] = ov;
    }
    else
    {
      id = v.id;
      val2rcv[ov].rc++;
    }
    return id;
  }

  public function get(id:int):*
  {
    if(id)
    {
      var key:Object = id2key[id];
      var rcv:RCValue = val2rcv[key];

      return rcv.value;
    }
    return undefined;
  }

  public function release(id:int):*
  {
    if(id)
    {
      var key:Object = id2key[id];
      var rcv:RCValue = val2rcv[key];

      if(rcv)
      {
        if(!--rcv.rc)
        {
          delete id2key[id];
          delete val2rcv[key];
        }
        return rcv.value;
      }
      else
        log(1, "ValueTracker extra release!: " + id);
    }
    return undefined;
  }
}


class CAS3ValTypemap extends CTypemap
{
  private var values:ValueTracker = new ValueTracker;

  public function get valueTracker():ValueTracker
  {
    return values;
  }

  public override function fromC(v:Array):*
  {
    return values.get(v[0]);
  }
  
  public override function createC(v:*, ptr:int = 0):Array
  {
    return [values.acquire(v)];
  }
  
  public override function destroyC(v:Array):void
  {
    values.release(v[0]);
  }
}


class NotifyMachine extends Machine
{
  private var proc:Function;

  public function NotifyMachine(_proc:Function)
  {
    proc = _proc;
   
   
    mstate.push(0);
    mstate.push(mstate.ebp);
    mstate.ebp = mstate.esp;
  }
  
  public override function work():void
  {
    var noClean:Boolean;

    try
    {
      noClean = proc() ? true : false;
    }
    catch(e:*) { log(1, "NotifyMachine: " + e); }
    if(!noClean)
    {
      mstate.gworker = caller;
      mstate.ebp = mstate.pop();
      mstate.pop();
    }
  }
}

class CProcTypemap extends CTypemap
{
  private var retTypemap:CTypemap;
  private var argTypemaps:Array;
  private var varargs:Boolean;
  private var async:Boolean;
  
  public function CProcTypemap(_retTypemap:CTypemap, _argTypemaps:Array, _varargs:Boolean = false, _async:Boolean = false)
  {
    retTypemap = _retTypemap;
    argTypemaps = _argTypemaps;
    varargs = _varargs;
    async = _async;
  }
  
  private function push(arg:*):void
  {
    if(arg is Array)
      for(var i:int = arg.length - 1; i >= 0; i--)
        mstate.push(arg[i]);
    else
        mstate.push(arg);
  }
  
  public override function fromC(v:Array):*
  {
    return function(...args):*
    {
      var sp:int = mstate.esp;
      var cargs:Array = [];
      var n:int;
      var asyncHandler:Function;
      var oldWorker:Machine = mstate.gworker;
      
      function cleanup():void
      {
        for(n = cargs.length - 1; n >= 0; n--)
          argTypemaps[n].destroyC(cargs[n]);
  
        mstate.esp = sp;
        mstate.gworker = oldWorker;
      };
            
      if(async)
      {
       
        asyncHandler = args.shift();
       
        mstate.gworker = new NotifyMachine(function():Boolean
        {
          var result:* = retTypemap.fromReturnRegs(mstate);
          cleanup();
          try
          {
            asyncHandler(result);
          } catch(e:*) { log(1, "asyncHandler: " + e.toString()); }
          return true;
        });
      }

      for(n = args.length - 1; n >= 0; n--)
      {
        var arg:* = args[n];
        
        if(n >= argTypemaps.length)
          push(arg);
        else
        {
          var carg:Array = argTypemaps[n].createC(arg);
          
          cargs[n] = carg;
          push(carg);
        }
      }
      mstate.push(0);

      if(!asyncHandler)
      {
        try
        {
          try
          {
           
            mstate.funcs[int(v[0])]();
          }
          catch(e:AlchemyYield) {}
          catch(e:AlchemyDispatch) {}

         
          while(mstate.gworker !== oldWorker)
          {
            try
            {
              while(mstate.gworker !== oldWorker)
                mstate.gworker.work();
            }
            catch(e:AlchemyYield) {}
            catch(e:AlchemyDispatch) {}
          }
  
          return retTypemap.fromReturnRegs(mstate);        
        }
        finally
        {
          cleanup();
        }
      }
      else
      {
        try
        {
         
          mstate.funcs[int(v[0])]();
        }
        catch(e:AlchemyYield) {}
        catch(e:AlchemyDispatch) {}
        catch(e:AlchemyBlock) {}
        catch(e:*)
        {
          cleanup();
          throw(e);
        }
      }
    }
  }
  
  public override function createC(v:*, ptr:int = 0):Array
  {
    var id:int = regFunc(function():void
    {
      var args:Array = [];

      mstate.pop();
      
      var sp:int = mstate.esp;

     
      for(var n:int = 0; n < argTypemaps.length ; n++)
      {
        var tm:CTypemap = argTypemaps[n];
        var aa:Array = [];
        var ts:int = tm.typeSize;
      
       
        mstate.ds.position = sp;
       
        sp += ts;
       
        for(; ts; ts -= 4)
          aa.push(mstate.ds.readInt());
       
        args.push(tm.fromC(aa));
      }
     
     
      if(varargs)
        args.push(sp);

      try
      {
       
       
       
       
        retTypemap.toReturnRegs(mstate, v.apply(null, args));
      }
      catch(e:*)
      {
       
       
       
       
        mstate.eax = 0;
        mstate.edx = 0;
        mstate.st0 = 0;
        log(2, "v.apply: " + e.toString());
      }
    });
    return [id];
  }
  
  public override function destroyC(v:Array):void
  {
    unregFunc(int(v[0]));
  }
}


class CBuffer
{
  private static var ptr2Buffer:Object = {};

  public static function free(ptr:int):void
  {
    ptr2Buffer[ptr].free();
  }

  private var allocator:ICAllocator;
  private var ptrVal:int;
  private var sizeVal:int;
  private var valCache:*;

  public function get ptr():int { return ptrVal; }
  public function get size():int { return sizeVal; }

  public function get value():*
  {
    return ptrVal ? computeValue() : valCache;
  }

  public function set value(v:*):void
  {
    if(ptrVal)
      setValue(v);
    else
      valCache = v;
  }

  protected function computeValue():* { return undefined; }
  protected function setValue(v:*):void { }

  public function CBuffer(_size:int, _alloc:ICAllocator = null)
  {
    if(!_alloc)
      _alloc = new CHeapAllocator;
    allocator = _alloc;
    sizeVal = _size;
    alloc();
  }

  private function alloc():void
  {
    if(!ptrVal)
    {
      ptrVal = allocator.alloc(sizeVal);
      ptr2Buffer[ptrVal] = this;
    }
  }

  public function reset():void
  {
    if(!ptrVal)
    {
      alloc();
      setValue(valCache);
    }
  }

  public function free():void
  {
    if(ptrVal)
    {
      valCache = computeValue();
      allocator.free(ptrVal);
      delete ptr2Buffer[ptrVal];
      ptrVal = 0;
    }
  }
}


class CBufferTypemap extends CTypemap
{
  public override function createC(v:*, ptr:int = 0):Array
  {
    var buffer:CBuffer = v;

   
   
    buffer.reset();
    return [buffer.ptr];
  }

  public override function destroyC(v:Array):void
  {
    CBuffer.free(v[0]);
  }
}

class CStrUTF8Buffer extends CBuffer
{
  private var nullTerm:Boolean;

  protected override function computeValue():*
  {
    var len:int = 0;
    var max:int = this.size;

    mstate.ds.position = this.ptr;
    while(max-- && mstate.ds.readByte() != 0)
      len++;
    mstate.ds.position = this.ptr;
    return mstate.ds.readUTFBytes(len);
  }

  protected override function setValue(v:*):void
  {
    var ba:ByteArray = new ByteArray;
   
    var max:int = nullTerm ? this.size - 1 : this.size;

    ba.writeUTFBytes(v);
   
    if(ba.length > max)
      ba.length = max;
   
    if(ba.length < this.size)
      ba.writeByte(0);
   
    ba.position = 0;
    ba.readBytes(mstate.ds, this.ptr);
  }

  public function CStrUTF8Buffer(_size:int, _nullTerm:Boolean = true,
    alloc:ICAllocator = null)
  {
    super(_size, alloc);
    nullTerm = _nullTerm;
  }
}

CTypemap.BufferType = new CBufferTypemap;
CTypemap.SizedStrType = new CSizedStrUTF8Typemap;
CTypemap.AS3ValType = new CAS3ValTypemap;
CTypemap.VoidType = new CVoidTypemap;
CTypemap.PtrType = new CPtrTypemap;
CTypemap.IntType = new CIntTypemap;
CTypemap.DoubleType = new CDoubleTypemap;
CTypemap.StrType = new CStrUTF8Typemap;
CTypemap.IntRefType = new CRefTypemap(CTypemap.IntType);
CTypemap.DoubleRefType = new CRefTypemap(CTypemap.DoubleType);
CTypemap.StrRefType = new CRefTypemap(CTypemap.StrType);

const i_AS3_Acquire:int = exportSym("_AS3_Acquire",
  (new CProcTypemap(CTypemap.VoidType, [CTypemap.PtrType]))
  .createC(CTypemap.AS3ValType.valueTracker.acquireId)[0]
);

const i_AS3_Release:int = exportSym("_AS3_Release",
  (new CProcTypemap(CTypemap.VoidType, [CTypemap.PtrType]))
  .createC(CTypemap.AS3ValType.valueTracker.release)[0]
);

function AS3_NSGet(ns:*, prop:*):*
{
  var tns:String = typeof(ns);

  if(tns == "undefined" || !(ns instanceof Namespace))
  {
    if(tns == "string")
      ns = new Namespace(ns);
    else
      ns = new Namespace;
  }
  return ns::[prop];
}

const i_AS3_NSGet:int = exportSym("_AS3_NSGet",
  (new CProcTypemap(CTypemap.AS3ValType,
  [CTypemap.AS3ValType, CTypemap.AS3ValType]))
  .createC(AS3_NSGet)[0]
);

const i_AS3_NSGetS:int = exportSym("_AS3_NSGetS",
  (new CProcTypemap(CTypemap.AS3ValType,
  [CTypemap.AS3ValType, CTypemap.StrType]))
  .createC(AS3_NSGet)[0]
);

function AS3_TypeOf(v:*):String
{
  return typeof(v);
}

const i_AS3_TypeOf:int = exportSym("_AS3_TypeOf",
  (new CProcTypemap(CTypemap.StrType,
  [CTypemap.AS3ValType]))
  .createC(AS3_TypeOf)[0]
);

function AS3_NOP(v:*):*
{
  return v;
}

const i_AS3_String:int = exportSym("_AS3_String",
  (new CProcTypemap(CTypemap.AS3ValType,
  [CTypemap.StrType]))
  .createC(AS3_NOP)[0]
);

const i_AS3_StringN:int = exportSym("_AS3_StringN",
  (new CProcTypemap(CTypemap.AS3ValType,
  [CTypemap.SizedStrType]))
  .createC(AS3_NOP)[0]
);

const i_AS3_Int:int = exportSym("_AS3_Int",
  (new CProcTypemap(CTypemap.AS3ValType,
  [CTypemap.IntType]))
  .createC(AS3_NOP)[0]
);

const i_AS3_Ptr:int = exportSym("_AS3_Ptr",
  (new CProcTypemap(CTypemap.AS3ValType,
  [CTypemap.PtrType]))
  .createC(AS3_NOP)[0]
);

const i_AS3_Number:int = exportSym("_AS3_Number",
  (new CProcTypemap(CTypemap.AS3ValType,
  [CTypemap.DoubleType]))
  .createC(AS3_NOP)[0]
);

const i_AS3_True:int = exportSym("_AS3_True",
  (new CProcTypemap(CTypemap.AS3ValType,
  []))
  .createC(function():Boolean { return true; })[0]
);

const i_AS3_False:int = exportSym("_AS3_False",
  (new CProcTypemap(CTypemap.AS3ValType,
  []))
  .createC(function():Boolean { return false; })[0]
);

const i_AS3_Null:int = exportSym("_AS3_Null",
  (new CProcTypemap(CTypemap.AS3ValType,
  []))
  .createC(function():* { return null; })[0]
);

const i_AS3_Undefined:int = exportSym("_AS3_Undefined",
  (new CProcTypemap(CTypemap.AS3ValType,
  []))
  .createC(function():* { return undefined; })[0]
);

const i_AS3_StringValue:int = exportSym("_AS3_StringValue",
  (new CProcTypemap(CTypemap.StrType,
  [CTypemap.AS3ValType]))
  .createC(AS3_NOP)[0]
);

const i_AS3_IntValue:int = exportSym("_AS3_IntValue",
  (new CProcTypemap(CTypemap.IntType,
  [CTypemap.AS3ValType]))
  .createC(AS3_NOP)[0]
);

const i_AS3_PtrValue:int = exportSym("_AS3_PtrValue",
  (new CProcTypemap(CTypemap.PtrType,
  [CTypemap.AS3ValType]))
  .createC(AS3_NOP)[0]
);

const i_AS3_NumberValue:int = exportSym("_AS3_NumberValue",
  (new CProcTypemap(CTypemap.DoubleType,
  [CTypemap.AS3ValType]))
  .createC(AS3_NOP)[0]
);

function AS3_Get(obj:*, prop:*):*
{
  return obj[prop];
}

const i_AS3_Get:int = exportSym("_AS3_Get",
  (new CProcTypemap(CTypemap.AS3ValType,
  [CTypemap.AS3ValType, CTypemap.AS3ValType]))
  .createC(AS3_Get)[0]
);

const i_AS3_GetS:int = exportSym("_AS3_GetS",
  (new CProcTypemap(CTypemap.AS3ValType,
  [CTypemap.AS3ValType, CTypemap.StrType]))
  .createC(AS3_Get)[0]
);

function AS3_Set(obj:*, prop:*, val:*):void
{
  obj[prop] = val
}

const i_AS3_Set:int = exportSym("_AS3_Set",
  (new CProcTypemap(CTypemap.VoidType,
  [CTypemap.AS3ValType, CTypemap.AS3ValType, CTypemap.AS3ValType]))
  .createC(AS3_Set)[0]
);

const i_AS3_SetS:int = exportSym("_AS3_SetS",
  (new CProcTypemap(CTypemap.VoidType,
  [CTypemap.AS3ValType, CTypemap.StrType, CTypemap.AS3ValType]))
  .createC(AS3_Set)[0]
);

function AS3_Array(tt:String, sp:int):*
{
  var result:Array = [];

  if(!tt || !tt.length)
    return result;

  var a:Array = CTypemap.getTypesByNames(tt);

  for(var n:int = 0; n < a.length; n++)
  {
    var tm:CTypemap = a[n];
    var ts:int = tm.typeSize;
    var aa:Array = [];

    mstate.ds.position = sp;
    sp += ts;
    for(; ts; ts -= 4)
      aa.push(mstate.ds.readInt());
    result.push(tm.fromC(aa));
  }
  return result;
}

const i_AS3_Array:int = exportSym("_AS3_Array",
  (new CProcTypemap(CTypemap.AS3ValType,
  [CTypemap.StrType], true /*varargs*/))
  .createC(AS3_Array)[0]
);

function AS3_Object(tt:String, sp:int):*
{
  var result:Object = {};

  if(!tt || !tt.length)
    return result;

  var a:Array = tt.split(/\s*[,\:]\s*/);

  for(var n:int = 0; n < a.length; n+=2)
  {
    var name:String = a[n];
    var tm:CTypemap = CTypemap.getTypeByName(a[n+1]);
    var ts:int = tm.typeSize;
    var aa:Array = [];

    mstate.ds.position = sp;
    sp += ts;
    for(; ts; ts -= 4)
      aa.push(mstate.ds.readInt());
    result[name] = tm.fromC(aa);
  }
  return result;
}

const i_AS3_Object:int = exportSym("_AS3_Object",
  (new CProcTypemap(CTypemap.AS3ValType,
  [CTypemap.StrType], true /*varargs*/))
  .createC(AS3_Object)[0]
);

function AS3_Call(func:*, thiz:Object, params:Array):*
{
  return func.apply(thiz, params);
}

const i_AS3_Call:int = exportSym("_AS3_Call",
  (new CProcTypemap(CTypemap.AS3ValType,
  [CTypemap.AS3ValType, CTypemap.AS3ValType, CTypemap.AS3ValType]))
  .createC(AS3_Call)[0]
);

function AS3_CallS(func:String, thiz:Object, params:Array):*
{
  return thiz[func].apply(thiz, params);
}

const i_AS3_CallS:int = exportSym("_AS3_CallS",
  (new CProcTypemap(CTypemap.AS3ValType,
  [CTypemap.StrType, CTypemap.AS3ValType, CTypemap.AS3ValType]))
  .createC(AS3_CallS)[0]
);

function AS3_CallT(func:*, thiz:Object, tt:String, sp:int):*
{
  return func.apply(thiz, AS3_Array(tt, sp));
}

const i_AS3_CallT:int = exportSym("_AS3_CallT",
  (new CProcTypemap(CTypemap.AS3ValType,
  [CTypemap.AS3ValType, CTypemap.AS3ValType, CTypemap.StrType], true))
  .createC(AS3_CallT)[0]
);

function AS3_CallTS(func:String, thiz:Object, tt:String, sp:int):*
{
  return thiz[func].apply(thiz, AS3_Array(tt, sp));
}

const i_AS3_CallTS:int = exportSym("_AS3_CallTS",
  (new CProcTypemap(CTypemap.AS3ValType,
  [CTypemap.StrType, CTypemap.AS3ValType, CTypemap.StrType], true))
  .createC(AS3_CallTS)[0]
);

function AS3_Shim(func:Function, thiz:Object, rt:String, tt:String,
  varargs:Boolean):int
{
  var retType:CTypemap = CTypemap.getTypeByName(rt);
  var argTypes:Array = CTypemap.getTypesByNames(tt);
  var tm:CTypemap = new CProcTypemap(retType, argTypes, varargs);

  var id:int = tm.createC(function(...rest):*
  {
    return func.apply(thiz, rest);
  })[0];
  return id;
}

const i_AS3_Shim:int = exportSym("_AS3_Shim",
  (new CProcTypemap(CTypemap.PtrType,
  [CTypemap.AS3ValType, CTypemap.AS3ValType, CTypemap.StrType, CTypemap.StrType,
   CTypemap.IntType]))
  .createC(AS3_Shim)[0]
);

function AS3_New(constr:*, params:Array):*
{
  switch(params.length)
  {
  case 0:
    return new constr;
  case 1:
    return new constr(params[0]);
  case 2:
    return new constr(params[0], params[1]);
  case 3:
    return new constr(params[0], params[1], params[2]);
  case 4:
    return new constr(params[0], params[1], params[2], params[3]);
  case 5:
    return new constr(params[0], params[1], params[2], params[3], params[4]);
  }

  log(1, "New with too many params! (" + params.length + ")");
  return undefined;
}

const i_AS3_New:int = exportSym("_AS3_New",
  (new CProcTypemap(CTypemap.AS3ValType,
  [CTypemap.AS3ValType, CTypemap.AS3ValType]))
  .createC(AS3_New)[0]
);

function AS3_Function(data:int, func:Function):Function
{
  return function(...args):*
  {
    return func(data, args);
  }
}

const i_AS3_Function:int = exportSym("_AS3_Function",
  (new CProcTypemap(CTypemap.AS3ValType,
  [CTypemap.PtrType, 
    new CProcTypemap(CTypemap.AS3ValType,
    [CTypemap.PtrType, CTypemap.AS3ValType])
  ]))
  .createC(AS3_Function)[0]
);

function AS3_FunctionAsync(data:int, func:Function):Function
{
  return function(...args):*
  {
    var asyncHandler:Function = args.shift();

    return func(asyncHandler, data, args);
  }
}

const i_AS3_FunctionAsync:int = exportSym("_AS3_FunctionAsync",
  (new CProcTypemap(CTypemap.AS3ValType,
  [CTypemap.PtrType, 
    new CProcTypemap(CTypemap.AS3ValType,
    [CTypemap.PtrType, CTypemap.AS3ValType], false /*varargs*/, true /*async*/)
  ]))
  .createC(AS3_FunctionAsync)[0]
);

function AS3_FunctionT(data:int, func:int, rt:String, tt:String,
  varargs:Boolean):Function
{
  var tm:CTypemap = new CProcTypemap(CTypemap.getTypeByName(rt),
    CTypemap.getTypesByNames(tt), varargs);

  return AS3_Function(data, tm.fromC([func]));
}

const i_AS3_FunctionT:int = exportSym("_AS3_FunctionT",
  (new CProcTypemap(CTypemap.AS3ValType,
  [CTypemap.PtrType, CTypemap.PtrType, CTypemap.StrType, CTypemap.StrType,
   CTypemap.IntType
  ]))
  .createC(AS3_FunctionT)[0]
);

function AS3_FunctionAsyncT(data:int, func:int, rt:String, tt:String,
  varargs:Boolean):Function
{
  var tm:CTypemap = new CProcTypemap(CTypemap.getTypeByName(rt),
    CTypemap.getTypesByNames(tt), varargs, true);

  return AS3_FunctionAsync(data, tm.fromC([func]));
}

const i_AS3_FunctionAsyncT:int = exportSym("_AS3_FunctionAsyncT",
  (new CProcTypemap(CTypemap.AS3ValType,
  [CTypemap.PtrType, CTypemap.PtrType, CTypemap.StrType, CTypemap.StrType,
   CTypemap.IntType
  ]))
  .createC(AS3_FunctionAsyncT)[0]
);

function AS3_InstanceOf(val:*, type:Class):Boolean
{
  return val instanceof type;
}

const i_AS3_InstanceOf:int = exportSym("_AS3_InstanceOf",
  (new CProcTypemap(CTypemap.IntType,
  [CTypemap.AS3ValType, CTypemap.AS3ValType]))
  .createC(AS3_InstanceOf)[0]
);

function AS3_Stage():Object
{
  return gsprite ? gsprite.stage : null;
}

const i_AS3_Stage:int = exportSym("_AS3_Stage",
  (new CProcTypemap(CTypemap.AS3ValType, []))
  .createC(AS3_Stage)[0]
);



function AS3_ArrayValue(array:Array, tt:String, sp:int):void
{
  if(!tt || !tt.length)
    return;

  var a:Array = tt.split(/\s*,\s*/);

 
 
  for(var n:int = 0; n < a.length && n < array.length; n++)
  {
    var tm:CTypemap = CTypemap.getTypeByName(a[n]);

    mstate.ds.position = sp;

    var addr:int = mstate.ds.readInt();

    sp += 4;

    var aa:Array = tm.createC(array[n]);

    mstate.ds.position = addr;
    for(var i:int = 0; i < aa.length; i++)
      mstate.ds.writeInt(aa[i]);
  }
}

const i_AS3_ArrayValue:int = exportSym("_AS3_ArrayValue",
  (new CProcTypemap(CTypemap.VoidType,
  [CTypemap.AS3ValType, CTypemap.StrType], true /*varargs*/))
  .createC(AS3_ArrayValue)[0]
);

function AS3_ObjectValue(object:Object, tt:String, sp:int):void
{
  if(!tt || !tt.length)
    return;

  var a:Array = tt.split(/\s*[,\:]\s*/);

  for(var n:int = 0; n < a.length; n+=2)
  {
    var name:String = a[n];
    var tm:CTypemap = CTypemap.getTypeByName(a[n+1]);

    mstate.ds.position = sp;

    var addr:int = mstate.ds.readInt();

    sp += 4;

    var aa:Array = tm.createC(object[name]);

    mstate.ds.position = addr;
    for(var i:int = 0; i < aa.length; i++)
      mstate.ds.writeInt(aa[i]);
  }
}

const i_AS3_ObjectValue:int = exportSym("_AS3_ObjectValue",
  (new CProcTypemap(CTypemap.VoidType,
  [CTypemap.AS3ValType, CTypemap.StrType], true /*varargs*/))
  .createC(AS3_ObjectValue)[0]
);

Alchemy::NoShell {

public namespace flash_delegate =
  "http://www.adobe.com/2008/actionscript/flash/delegate";


public dynamic class DynamicProxy extends Proxy
{
  flash_proxy override function callProperty(name:*, ...rest):*
  {
    return this.flash_delegate::callProperty(name, rest);
  }

  flash_proxy override function deleteProperty(name:*):Boolean
  {
    return this.flash_delegate::deleteProperty(name);
  }

  flash_proxy override function getDescendants(name:*):*
  {
    return this.flash_delegate::getDescendants(name);
  }

  flash_proxy override function getProperty(name:*):*
  {
    return this.flash_delegate::getProperty(name);
  }

  flash_proxy override function hasProperty(name:*):Boolean
  {
    return this.flash_delegate::hasProperty(name);
  }

  flash_proxy override function isAttribute(name:*):Boolean
  {
    return this.flash_delegate::isAttribute(name);
  }

  flash_proxy override function nextName(index:int):String
  {
    return this.flash_delegate::nextName(index);
  }

  flash_proxy override function nextNameIndex(index:int):int
  {
    return this.flash_delegate::nextNameIndex(index);
  }

  flash_proxy override function nextValue(index:int):*
  {
    return this.flash_delegate::nextValue(index);
  }

  flash_proxy override function setProperty(name:*, value:*):void
  {
    this.flash_delegate::setProperty(name, value);
  }

  flash_delegate var callProperty:Function;
  flash_delegate var deleteProperty:Function;
  flash_delegate var getDescendants:Function;
  flash_delegate var getProperty:Function;
  flash_delegate var hasProperty:Function;
  flash_delegate var isAttribute:Function;
  flash_delegate var nextName:Function;
  flash_delegate var nextNameIndex:Function;
  flash_delegate var nextValue:Function;
  flash_delegate var setProperty:Function;
}

function AS3_Proxy():*
{
  return new DynamicProxy();
}

}

Alchemy::Shell {

function AS3_Proxy():*
{
  return null;
}

}

const i_AS3_Proxy:int = exportSym("_AS3_Proxy",
  (new CProcTypemap(CTypemap.AS3ValType,
  [], false /*varargs*/))
  .createC(AS3_Proxy)[0]
);

function AS3_Ram():ByteArray
{
  return gstate.ds;
}

const i_AS3_Ram:int = exportSym("_AS3_Ram",
  (new CProcTypemap(CTypemap.AS3ValType,
  [], false /*varargs*/))
  .createC(AS3_Ram)[0]
);

function AS3_ByteArray_readBytes(ptr:int, ba:ByteArray, len:int):int
{
  if(len > 0)
  {
    if ( ba.bytesAvailable < len )
      len = ba.bytesAvailable
    ba.readBytes(gstate.ds, ptr, len);
    return len;
  }
  return 0;
}

const i_AS3_ByteArray_readBytes:int = exportSym("_AS3_ByteArray_readBytes",
  (new CProcTypemap(CTypemap.IntType,
  [CTypemap.IntType, CTypemap.AS3ValType, CTypemap.IntType],
  false /*varargs*/))
  .createC(AS3_ByteArray_readBytes)[0]
);

function AS3_ByteArray_writeBytes(ba:ByteArray, ptr:int, len:int):int
{
log(5, "--- wrteBytes: ba length = " + ba.length + " / " + len);
  if(len > 0)
  {
    ba.writeBytes(gstate.ds, ptr, len);
    return len;
  }
  return 0;
}

const i_AS3_ByteArray_writeBytes:int = exportSym("_AS3_ByteArray_writeBytes",
  (new CProcTypemap(CTypemap.IntType,
  [CTypemap.AS3ValType, CTypemap.IntType, CTypemap.IntType],
  false /*varargs*/))
  .createC(AS3_ByteArray_writeBytes)[0]
);

function AS3_ByteArray_seek(ba:ByteArray, offs:int, whence:int):int
{
  if(whence == 0)
    ba.position = offs;
  else if(whence == 1)
    ba.position += offs;
  else if(whence == 2)
    ba.position = ba.length + offs;
  else
    return -1;
  return ba.position;
}

const i_AS3_ByteArray_seek:int = exportSym("_AS3_ByteArray_seek",
  (new CProcTypemap(CTypemap.IntType,
  [CTypemap.AS3ValType, CTypemap.IntType, CTypemap.IntType],
  false /*varargs*/))
  .createC(AS3_ByteArray_seek)[0]
);

const i_AS3_Trace:int = exportSym("_AS3_Trace",
  (new CProcTypemap(CTypemap.VoidType,
  [CTypemap.AS3ValType],
  false /*varargs*/))
  .createC(trace)[0]
);

Alchemy::SetjmpAbuse
{

/* freeze/thaw support for generic machines and stacks of machines...

** a frozen machine is comprised of:
** [int] reference count
** [int] CTypemap.AS3ValType.valueTracker id for the machine's class
** [int[]] integral registers
** [double[]] double registers

** a frozen stack is a NULL-terminate array of pointers to frozen machines

*/

function acquireFreeze(ptr:int):void
{
log(4, "acquireFreeze(" + ptr + ")");
  mstate.ds.position = ptr;
  var rc:int = mstate.ds.readInt();
  mstate.ds.position = ptr;
  mstate.ds.writeInt(rc+1);
}

function releaseFreeze(ptr:int, free:Function):void
{
log(4, "releaseFreeze(" + ptr + ")");
  mstate.ds.position = ptr;
  var rc:int = mstate.ds.readInt();
  if(rc == 1)
  {
log(4, "releaseFreeze free");
    mstate.ds.position = ptr + 4;

    var classId:int = mstate.ds.readInt();

    free(ptr);
    CTypemap.AS3ValType.valueTracker.release(classId);
  }
  else
  {
    mstate.ds.position = ptr;
    mstate.ds.writeInt(rc-1);
  }
}

function sweepFreezes(free:Function):void
{

  var newFreezeSet:Object = {};
  var oldFreezeSet:Object = gsetjmpFreezeIRCs;

  for (var mach:Object in gsetjmpFrozenMachineSet)
  {
    var ptr:int = mach.freezeCache;

    if(ptr)
    {
      newFreezeSet[ptr] = oldFreezeSet[ptr];
      delete oldFreezeSet[ptr];
    }
  }
  for(var aptr:* in oldFreezeSet)
  {
    var count:int = oldFreezeSet[aptr];

    while(count--)
      releaseFreeze(aptr, free);
  }
  gsetjmpFreezeIRCs = newFreezeSet;
}

function freezeMachine(mach:Machine, alloc:Function):int
{
  try
  {
   
    var cache:int = mach.freezeCache;

    if(cache)
    {
      acquireFreeze(cache);

      return cache;
    }

   
    var clazz:Object = Object(mach).constructor;
    var size:int = 12 + clazz.intRegCount * 4 + clazz.NumberRegCount * 8;
    var ptr:int = alloc(size);

log(4, "freezeMachine 1: " + clazz);

    gsetjmpFreezeIRCs[ptr] += 1;
    gsetjmpFrozenMachineSet[mach] = 1;
   
   
    mach.freezeCache = ptr;
    mstate.ds.position = ptr;
    mstate.ds.writeInt(1);
    mstate.ds.writeInt(
      CTypemap.AS3ValType.valueTracker.acquire(clazz));
    mstate.ds.writeInt(mach.state);

   
    var i:int;

    for(i = clazz.intRegCount - 1; i >= 0; i--)
      mstate.ds.writeInt(mach["i" + i]);
    for(i = clazz.NumberRegCount - 1; i >= 0; i--)
      mstate.ds.writeDouble(mach["f" + i]);

log(4, "freezeMachine 2: " + clazz);

    return ptr;
  } catch(e:*) {}
  return 0;
}

function thawMachine(ptr:int):Machine
{
log(4, "thawMachine start (" + ptr + ")");
  mstate.ds.position = ptr + 4;

  var classId:int = mstate.ds.readInt();
log(4, "thawMachine cid: " + classId);
  var clazz:* = CTypemap.AS3ValType.valueTracker.get(classId);
  var mach:Machine = Machine(new clazz());
  
log(4, "thawMachine " + clazz);

  mach.state = mstate.ds.readInt();

log(4, "thawMachine state: " + mach.state);

 
  var i:int;

  for(i = clazz.intRegCount - 1; i >= 0; i--)
    mach["i" + i] = mstate.ds.readInt();
  for(i = clazz.NumberRegCount - 1; i >= 0; i--)
    mach["f" + i] = mstate.ds.readDouble();
log(4, "thawMachine regs");
  acquireFreeze(ptr);
  gsetjmpFreezeIRCs[ptr] += 1;
  gsetjmpFrozenMachineSet[mach] = 1;
  mach.freezeCache = ptr;
  return mach;
}

function freeStack(ptr:int, free:Function):void
{
  mstate.ds.position = ptr;

  var frame:int;

  while((frame = mstate.ds.readInt()) != 0)
  {
    releaseFreeze(frame, free);
    ptr += 4;
    mstate.ds.position = ptr;
  }
  free(ptr);
}

function freezeStack(alloc:Function):int
{
  var frames:Array = [];
  var mach:Machine = mstate.gworker.caller;
  var frame:int;

log(4, "freezeStack");

  while((frame = freezeMachine(mach, alloc)) != 0)
  {
log(4, "freezeStack: " + frame);
    acquireFreeze(frame);
    frames.push(frame);
    mach = mach.caller;
  }

  var ptr:int = alloc(4 + frames.length * 4);

  mstate.ds.position = ptr;
  for(var i:int = 0; i < frames.length; i++)
    mstate.ds.writeInt(frames[i]);
  mstate.ds.writeInt(0);
log(4, "freezeStack= " + ptr);
  return ptr;
}

function thawStack(ptr:int, curMach:Machine):Machine
{
  var mach:Machine = null;
  var firstMach:Machine = null;

  mstate.ds.position = ptr;

  var frame:int;

log(4, "thawStack(" + ptr + ")");
  while((frame = mstate.ds.readInt()) != 0)
  {
   
    var curMachOk:Boolean = (curMach && frame == curMach.freezeCache);
    var newMach:Machine;

    if(curMachOk)
      newMach = curMach;
    else
      newMach = thawMachine(frame);

log(4, "thawMachine(" + frame + ")");
    newMach.mstate = mstate;
    if(mach)
      mach.caller = newMach;
    if(!firstMach)
      firstMach = newMach;
   
/*    if(curMachOk)
      return firstMach;*/
    mach = newMach;
    ptr += 4;
    mstate.ds.position = ptr;
    if(curMach)
      curMach = curMach.caller;
  }
  if(mach)
    mach.caller = null;
  return firstMach;
}

}

function AS3_Reg_jmp_buf_AbuseHelpers(alloc:Function, free:Function):void
{
  Alchemy::SetjmpAbuse
  {
    gsetjmpAbuseAlloc = alloc;
    gsetjmpAbuseFree = free;
  }
}

function AS3_RegAbused_jmp_buf(ptr:int):void
{
log(4, "regAbused: " + ptr);
  Alchemy::SetjmpAbuse
  {
   
    gsetjmpAbuseMap[ptr] = {
      alloc: gsetjmpAbuseAlloc,
      free: gsetjmpAbuseFree,
     
      setjmp: function(ptr:int):void
      {
        var abuseObj:Object = gsetjmpAbuseMap[ptr];

        abuseObj.stack = freezeStack(abuseObj.alloc);
        sweepFreezes(abuseObj.free);
      },
     
      longjmp: function(ptr:int, mach:Machine):Machine
      {
        var abuseObj:Object = gsetjmpAbuseMap[ptr];

        return thawStack(abuseObj.stack, mach);
      },
      cleanup: function(ptr:int):void
      {
        var abuseObj:Object = gsetjmpAbuseMap[ptr];

        freeStack(abuseObj.stack, abuseObj.free);
      }
    };
    return;
  }
  log(1, "Can't RegAbused -- abuse support disabled");
}

function AS3_UnregAbused_jmp_buf(ptr:int):void
{
log(4, "unregAbused: " + ptr);
  Alchemy::SetjmpAbuse
  {
    gsetjmpAbuseMap[ptr].cleanup(ptr);
    delete gsetjmpAbuseMap[ptr];
    return;
  }
  log(1, "Can't UnregAbused -- abuse support disabled");
}

const i_AS3_Reg_jmp_buf_AbuseHelpers:int =
exportSym("_AS3_Reg_jmp_buf_AbuseHelpers",
  (new CProcTypemap(CTypemap.VoidType, [
    (new CProcTypemap(CTypemap.PtrType, [CTypemap.IntType])),
    (new CProcTypemap(CTypemap.VoidType, [CTypemap.PtrType]))
  ],
  false /*varargs*/))
  .createC(AS3_Reg_jmp_buf_AbuseHelpers)[0]
);


const i_AS3_RegAbused_jmp_buf:int = exportSym("_AS3_RegAbused_jmp_buf",
  (new CProcTypemap(CTypemap.VoidType,
  [CTypemap.PtrType],
  false /*varargs*/))
  .createC(AS3_RegAbused_jmp_buf)[0]
);

const i_AS3_UnregAbused_jmp_buf:int = exportSym("_AS3_UnregAbused_jmp_buf",
  (new CProcTypemap(CTypemap.VoidType,
  [CTypemap.PtrType],
  false /*varargs*/))
  .createC(AS3_UnregAbused_jmp_buf)[0]
);


Alchemy::NoShell
public class ConSprite extends Sprite
{
  private var runner:CRunner = new CRunner;

  public function ConSprite()
  {
    if(gsprite)
      log(1, "More than one sprite!");

    gsprite = this;

    runner.startSystem();
  }
}


Alchemy::NoShell
public class CLibDummySprite extends Sprite
{
}


Alchemy::Shell
public class ShellCon
{
  private var runner:CRunner = new CRunner;

  public function ShellCon()
  {
    runner.startSystem();
  }

  public function work():void
  {
    runner.work();
  }
}

Alchemy::NoShell
public class CLibInit
{
  public function supplyFile(path:String, data:ByteArray):void
  {
    gfiles[path] = data;
  }

  public function putEnv(key:String, value:String):void
  {
    genv[key] = value;
  }

  public function setSprite(sprite:Sprite):void
  {
    gsprite = sprite;
  }

  public function init():*
  {
    var runner:CRunner = new CRunner(true);
    var result:*;
    var saveState:MState = new MState(null);

   
    mstate.copyTo(saveState);

    var regged:Boolean;

    try
    {
     
      runner.startSystem();
      while(true)
      {
        try
        {
          while(true)
            runner.work();
        }
        catch(e:AlchemyDispatch) {}
        catch(e:AlchemyYield) {}
      }
    }
    catch(e:AlchemyLibInit)
    {
      log(3, "Caught AlchemyLibInit " + e.rv);
      regged = true;
      result = CTypemap.AS3ValType.valueTracker.release(e.rv);
    }
    finally
    {
     
      saveState.copyTo(mstate);
     
      if(!regged)
        log(1, "Lib didn't register");
    }
    return result;
  }
}

Alchemy::Shell {

public function modEnd():void
{
  var ns:Namespace = new Namespace("avmshell");
  var sys:Object = ns::["System"];

  gargs = gargs.concat(sys.argv);

  var shellCon:ShellCon = new ShellCon();



  while(true)
  {


    shellCon.work();
  }
}

}

Alchemy::NoShell {

public function modEnd():void
{
}

}


Alchemy::NoShell {

public var gvglbmd:BitmapData;
public var gvglbm:Bitmap;
public var gvglpixels:int;

} // Alchemy::NoShell

public function vgl_lock():void
{
  // nop
}

public function vgl_unlock():void
{
  Alchemy::NoShell {

  // blit!
  if(gvglbmd && gvglpixels)
  {
    gstate.ds.position = gvglpixels;
    gvglbmd.setPixels(gvglbmd.rect, gstate.ds);
  }

  } // Alchemy::NoShell
}

public function vgl_end(dummy:int):int
{
  Alchemy::NoShell {

  var pixels:int = gvglpixels;
  gvglpixels = 0;
  return pixels;

  } // Alchemy::NoShell
  return 0;
}

public var vglKeys:Array = [];
public var vglKeyFirst:Boolean = true;
public var vglKeyUEL:*;
// mode...
// 1: VGL_RAWKEYS
// 2: VGL_CODEKEYS
// 3: VGL_XLATEKEYS
public var vglKeyMode:int;

public function vgl_keyinit(mode:int):int
{
  trace("vgl_keymode: " + mode);
  vglKeyMode = mode;
  return 0;
}

public function vgl_keych():int
{
  if(vglKeys.length)
    return vglKeys.shift();
  return 0;
}

public function vgl_init(width:int, height:int, pixels:int):int
{
  Alchemy::NoShell {

  var stage:Stage = gsprite.stage;

trace("vgl_init: " + width + " / " + height + " : " + pixels);
  if(vglKeyFirst)
  {
    // windows VK_ (keyCode) => scan code
    var vk2scan:Array = [
      0, 0, 0, 70, 0, 0, 0, 0, 14, 15, 0, 0, 76, 28, 0, 0, 
      42, 29, 56, 0, 58, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
      57, 73, 81, 79, 71, 75, 72, 77, 80, 0, 0, 0, 84, 82, 83, 99, 
      11, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 0, 0, 0, 0, 0, 
      0, 30, 48, 46, 32, 18, 33, 34, 35, 23, 36, 37, 38, 50, 49, 24, 
      25, 16, 19, 31, 20, 22, 47, 17, 45, 21, 44, 91, 92, 93, 0, 95, 
      82, 79, 80, 81, 75, 76, 77, 71, 72, 73, 55, 78, 0, 74, 83, 53, 
      59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 87, 88, 100, 101, 102, 103, 
      104, 105, 106, 107, 108, 109, 110, 118, 0, 0, 0, 0, 0, 0, 0, 0, 
      69, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      42, 54, 29, 29, 56, 56, 106, 105, 103, 104, 101, 102, 50, 32, 46, 48, 
      25, 16, 36, 34, 108, 109, 107, 33, 0, 0, 39, 13, 51, 12, 52, 53, 
      41, 115, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 43, 27, 40, 0, 
      0, 0, 86, 0, 0, 0, 0, 0, 0, 113, 92, 123, 0, 111, 90, 0, 
      0, 91, 0, 95, 0, 94, 0, 0, 0, 93, 0, 98, 0, 0, 0, 0
    ];
    stage.addEventListener(KeyboardEvent.KEY_DOWN,
      function(event:KeyboardEvent)
      {
        var sc:int = (vglKeyMode == 2) ?
          vk2scan[event.keyCode & 0x7f] : event.charCode;

        vglKeys.push(sc);
      });
    stage.addEventListener(KeyboardEvent.KEY_UP,
      function(event:KeyboardEvent)
      {
        var sc:int = (vglKeyMode == 2) ?
          vk2scan[event.keyCode & 0x7f] : event.charCode;
  
        if(vglKeyMode == 2)
        {
          vglKeys.push(sc | 0x80);
        }
      });
    vglKeys.push(69); // push NUMLOCK so SDL thinks we're using the keypad...
    stage.focus = stage;
    vglKeyFirst = false;
  }
  gvglpixels = pixels;
  gvglbmd = new BitmapData(Math.abs(width), Math.abs(height), false);
  if(!gvglbm)
  {
    gvglbm = new Bitmap();
    gsprite.addChild(gvglbm);
  }
  gvglbm.bitmapData = gvglbmd;
  gvglbm.scaleX = gsprite.stage.stageWidth / width;
  gvglbm.scaleY = gsprite.stage.stageHeight / height;
trace("vgl_init done");

  } // Alchemy::NoShell

  return 0;
}

public var vglMouseFirst:Boolean = true;
public var vglMouseButtons:int;

function vgl_mouse_x():int
{
  Alchemy::NoShell {

  var stage:Stage = gsprite.stage;

  return stage.mouseX;

  } // Alchemy::NoShell

  return 0;
}

function vgl_mouse_y():int
{
  Alchemy::NoShell {

  var stage:Stage = gsprite.stage;

  return stage.mouseY;

  } // Alchemy::NoShell

  return 0;
}

function vgl_mouse_buttons():int
{
  Alchemy::NoShell {

  if(vglMouseFirst)
  {
    var stage:Stage = gsprite.stage;

    stage.addEventListener(MouseEvent.MOUSE_DOWN,
      function(event:MouseEvent)
      {
        vglMouseButtons = 1;
      });
    stage.addEventListener(MouseEvent.MOUSE_UP,
      function(event:MouseEvent)
      {
        vglMouseButtons = 0;
      });
    vglMouseFirst = false;
  }

  } // Alchemy::NoShell

  return vglMouseButtons;
}



public var vt:ValueTracker = CTypemap.AS3ValType.valueTracker;
public var arr:Array;
// End of file scope inline assembly


// Sync
public const __fini:int = regFunc(FSM__fini.start)

public final class FSM__fini extends Machine {

	public static function start():void {
		var i0:int, i1:int


		__asm(label, lbl("__fini_entry"))
	__asm(lbl("__fini__XprivateX__BB1_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__2E_str)
		i1 =  (4)
		//InlineAsmStart
	log(i1, mstate.gworker.stringFromPtr(i0))
	//InlineAsmEnd
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const ___error:int = regFunc(FSM___error.start)

public final class FSM___error extends Machine {

	public static function start():void {
		var i0:int


		__asm(label, lbl("___error_entry"))
	__asm(lbl("___error__XprivateX__BB2_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (_val_2E_1440)
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Async
public const _ioctl:int = regFunc(FSM_ioctl.start)

public final class FSM_ioctl extends Machine {

	public static function start():void {
			var result:FSM_ioctl = new FSM_ioctl
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int

	public static const intRegCount:int = 5

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("_ioctl_entry"))
		__asm(push(state), switchjump(
			"_ioctl_errState",
			"_ioctl_state0",
			"_ioctl_state1",
			"_ioctl_state2",
			"_ioctl_state3",
			"_ioctl_state4",
			"_ioctl_state5",
			"_ioctl_state6"))
	__asm(lbl("_ioctl_state0"))
	__asm(lbl("_ioctl__XprivateX__BB3_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 4
		i2 =  (mstate.ebp + 16)
		__asm(push(i2), push((mstate.ebp+-4)), op(0x3c))
		i0 =  ((mstate.ebp+-4))
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		__asm(push(i0!=0), iftrue, target("_ioctl__XprivateX__BB3_21_F"))
	__asm(lbl("_ioctl__XprivateX__BB3_1_F"))
		__asm(push(i1>1074029312), iftrue, target("_ioctl__XprivateX__BB3_6_F"))
	__asm(lbl("_ioctl__XprivateX__BB3_2_F"))
		__asm(push(i1==-1072405750), iftrue, target("_ioctl__XprivateX__BB3_16_F"))
	__asm(lbl("_ioctl__XprivateX__BB3_3_F"))
		__asm(push(i1==-1062968474), iftrue, target("_ioctl__XprivateX__BB3_4_F"))
		__asm(jump, target("_ioctl__XprivateX__BB3_19_F"))
	__asm(lbl("_ioctl__XprivateX__BB3_4_F"))
		i0 =  ((__xasm<int>(push(i2), op(0x37))))
		i1 =  ((__xasm<int>(push(i0), op(0x37))))
		i2 = i0
		__asm(push(uint(i1)>uint(8)), iftrue, target("_ioctl__XprivateX__BB3_15_F"))
		__asm(jump, target("_ioctl__XprivateX__BB3_5_F"))
	__asm(lbl("_ioctl__XprivateX__BB3_5_F"))
		i3 =  (_smodes)
		i1 =  (i1 * 164)
		i4 = i2
		i1 =  (i3 + i1)
		i3 =  (164)
		memcpy(i4, i1, i3)
		i1 =  ((__xasm<int>(push((i2+12)), op(0x37))))
		i2 =  ((__xasm<int>(push((i2+8)), op(0x37))))
		i0 =  ((__xasm<int>(push(i0), op(0x37))))
		i3 =  (___sF)
		mstate.esp -= 20
		i4 =  (__2E_str4400)
		i3 =  (i3 + 176)
		__asm(push(i3), push(mstate.esp), op(0x3c))
		__asm(push(i4), push((mstate.esp+4)), op(0x3c))
		__asm(push(i0), push((mstate.esp+8)), op(0x3c))
		__asm(push(i2), push((mstate.esp+12)), op(0x3c))
		__asm(push(i1), push((mstate.esp+16)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("_ioctl_state1"))
		mstate.esp += 20
		i0 =  (0)
		__asm(jump, target("_ioctl__XprivateX__BB3_20_F"))
	__asm(lbl("_ioctl__XprivateX__BB3_6_F"))
		__asm(push(i1==1074029313), iftrue, target("_ioctl__XprivateX__BB3_14_F"))
	__asm(lbl("_ioctl__XprivateX__BB3_7_F"))
		__asm(push(i1==1241672454), iftrue, target("_ioctl__XprivateX__BB3_10_F"))
	__asm(lbl("_ioctl__XprivateX__BB3_8_F"))
		__asm(push(i1!=1074296323), iftrue, target("_ioctl__XprivateX__BB3_19_F"))
	__asm(lbl("_ioctl__XprivateX__BB3_9_F"))
		i0 = i2
		__asm(jump, target("_ioctl__XprivateX__BB3_18_F"))
	__asm(lbl("_ioctl__XprivateX__BB3_10_F"))
		i0 =  (___sF)
		i1 =  ((__xasm<int>(push(i2), op(0x37))))
		mstate.esp -= 16
		i2 =  (__2E_str3399)
		i0 =  (i0 + 176)
		i3 =  (11)
		i4 =  (1)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i4), push((mstate.esp+4)), op(0x3c))
		__asm(push(i3), push((mstate.esp+8)), op(0x3c))
		__asm(push(i0), push((mstate.esp+12)), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM_fwrite.start()
		return
	__asm(lbl("_ioctl_state2"))
		i0 = mstate.eax
		mstate.esp += 16
		i0 =  (0)
		i2 = i0
		i3 =  (2562)
		memset(i1, i2, i3)
		i2 =  (256)
		__asm(push(i2), push(i1), op(0x3b))
		i1 =  (i1 + 2)
		i2 = i0
	__asm(jump, target("_ioctl__XprivateX__BB3_11_F"), lbl("_ioctl__XprivateX__BB3_11_B"), label, lbl("_ioctl__XprivateX__BB3_11_F")); 
		__asm(push(i2), push(i1), op(0x3a))
		i2 =  (i2 + 1)
		i1 =  (i1 + 10)
		i0 =  (i0 + 1)
		__asm(push(i0==256), iftrue, target("_ioctl__XprivateX__BB3_13_F"))
	__asm(lbl("_ioctl__XprivateX__BB3_12_F"))
		__asm(jump, target("_ioctl__XprivateX__BB3_11_B"))
	__asm(lbl("_ioctl__XprivateX__BB3_13_F"))
		i0 =  (0)
		__asm(jump, target("_ioctl__XprivateX__BB3_20_F"))
	__asm(lbl("_ioctl__XprivateX__BB3_14_F"))
		i0 =  (0)
		i1 =  ((__xasm<int>(push(i2), op(0x37))))
		__asm(push(i0), push(i1), op(0x3c))
		__asm(jump, target("_ioctl__XprivateX__BB3_20_F"))
	__asm(lbl("_ioctl__XprivateX__BB3_15_F"))
		i0 =  (0)
		i1 = i2
		i2 = i0
		i3 =  (164)
		memset(i1, i2, i3)
		__asm(jump, target("_ioctl__XprivateX__BB3_20_F"))
	__asm(lbl("_ioctl__XprivateX__BB3_16_F"))
		i0 =  (___sF)
		mstate.esp -= 16
		i1 =  (__2E_str5401)
		i0 =  (i0 + 176)
		i3 =  (14)
		i4 =  (1)
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i4), push((mstate.esp+4)), op(0x3c))
		__asm(push(i3), push((mstate.esp+8)), op(0x3c))
		__asm(push(i0), push((mstate.esp+12)), op(0x3c))
		state = 3
		mstate.esp -= 4;FSM_fwrite.start()
		return
	__asm(lbl("_ioctl_state3"))
		i0 = mstate.eax
		mstate.esp += 16
		i1 =  ((__xasm<int>(push(i2), op(0x37))))
		i0 =  ((__xasm<int>(push(i1), op(0x37))))
		i2 =  (i2 + 4)
		__asm(push(i0==5), iftrue, target("_ioctl__XprivateX__BB3_22_F"))
	__asm(lbl("_ioctl__XprivateX__BB3_17_F"))
		i0 = i2
		__asm(jump, target("_ioctl__XprivateX__BB3_18_F"))
	__asm(lbl("_ioctl__XprivateX__BB3_18_F"))
		i1 =  (___sF)
		i0 =  ((__xasm<int>(push(i0), op(0x37))))
		mstate.esp -= 16
		i2 =  (__2E_str6402)
		i1 =  (i1 + 176)
		i3 =  (11)
		i4 =  (1)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i4), push((mstate.esp+4)), op(0x3c))
		__asm(push(i3), push((mstate.esp+8)), op(0x3c))
		__asm(push(i1), push((mstate.esp+12)), op(0x3c))
		state = 4
		mstate.esp -= 4;FSM_fwrite.start()
		return
	__asm(lbl("_ioctl_state4"))
		i1 = mstate.eax
		mstate.esp += 16
		i1 =  (0)
		__asm(push(i1), push(i0), op(0x3b))
		__asm(push(i1), push((i0+2)), op(0x3b))
		__asm(push(i1), push((i0+4)), op(0x3b))
		__asm(push(i1), push((i0+6)), op(0x3b))
		i0 = i1
		__asm(jump, target("_ioctl__XprivateX__BB3_20_F"))
	__asm(lbl("_ioctl__XprivateX__BB3_19_F"))
		i0 =  (___sF)
		mstate.esp -= 12
		i2 =  (__2E_str7403)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i2), push((mstate.esp+4)), op(0x3c))
		__asm(push(i1), push((mstate.esp+8)), op(0x3c))
		state = 5
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("_ioctl_state5"))
		mstate.esp += 12
		i0 =  (-1)
	__asm(jump, target("_ioctl__XprivateX__BB3_20_F"), lbl("_ioctl__XprivateX__BB3_20_B"), label, lbl("_ioctl__XprivateX__BB3_20_F")); 
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("_ioctl__XprivateX__BB3_21_F"))
				state = 6
	__asm(lbl("_ioctl_state6"))
//InlineAsmStart
	i0 =  mstate.system.ioctl(i0, i1, i2);//!!ASYNC

	//InlineAsmEnd
		__asm(jump, target("_ioctl__XprivateX__BB3_20_B"))
	__asm(lbl("_ioctl__XprivateX__BB3_22_F"))
		i2 =  (0)
		//InlineAsmStart
	i0 =  vgl_mouse_x()
	//InlineAsmEnd
		i3 = i0
		//InlineAsmStart
	i0 =  vgl_mouse_y()
	//InlineAsmEnd
		i4 = i0
		//InlineAsmStart
	i0 =  vgl_mouse_buttons()
	//InlineAsmEnd
		__asm(push(i0), push((i1+16)), op(0x3c))
		__asm(push(i3), push((i1+4)), op(0x3c))
		__asm(push(i4), push((i1+8)), op(0x3c))
		i0 = i2
		__asm(jump, target("_ioctl__XprivateX__BB3_20_B"))
	__asm(lbl("_ioctl_errState"))
		throw("Invalid state in _ioctl")
	}
}



// Async
public const _fstat:int = regFunc(FSM_fstat.start)

public final class FSM_fstat extends Machine {

	public static function start():void {
			var result:FSM_fstat = new FSM_fstat
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int

	public static const intRegCount:int = 5

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("_fstat_entry"))
		__asm(push(state), switchjump(
			"_fstat_errState",
			"_fstat_state0",
			"_fstat_state1",
			"_fstat_state2"))
	__asm(lbl("_fstat_state0"))
	__asm(lbl("_fstat__XprivateX__BB4_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 4096
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		__asm(push(i0<2), iftrue, target("_fstat__XprivateX__BB4_4_F"))
	__asm(lbl("_fstat__XprivateX__BB4_1_F"))
				state = 1
	__asm(lbl("_fstat_state1"))
//InlineAsmStart
	i0 =  mstate.system.fsize(i0);//!!ASYNC

	//InlineAsmEnd
		__asm(push(i0>-1), iftrue, target("_fstat__XprivateX__BB4_3_F"))
	__asm(lbl("_fstat__XprivateX__BB4_2_F"))
		i0 =  (__2E_str96)
		mstate.esp -= 20
		i1 =  (__2E_str251)
		i2 =  (59)
		i3 =  (2)
		i4 =  ((mstate.ebp+-4096))
		__asm(push(i4), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i3), push((mstate.esp+8)), op(0x3c))
		__asm(push(i1), push((mstate.esp+12)), op(0x3c))
		__asm(push(i2), push((mstate.esp+16)), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM_sprintf.start()
		return
	__asm(lbl("_fstat_state2"))
		mstate.esp += 20
		i1 =  (3)
		i0 = i4
		//InlineAsmStart
	log(i1, mstate.gworker.stringFromPtr(i0))
	//InlineAsmEnd
		__asm(push(i3), push(_val_2E_1440), op(0x3c))
		i0 =  (-1)
		__asm(jump, target("_fstat__XprivateX__BB4_5_F"))
	__asm(lbl("_fstat__XprivateX__BB4_3_F"))
		i2 =  (0)
		i3 = i1
		i4 =  (96)
		memset(i3, i2, i4)
		i3 =  (i0 >> 31)
		__asm(push(i0), push((i1+48)), op(0x3c))
		__asm(push(i3), push((i1+52)), op(0x3c))
		mstate.eax = i2
		__asm(jump, target("_fstat__XprivateX__BB4_6_F"))
	__asm(lbl("_fstat__XprivateX__BB4_4_F"))
		i0 =  (0)
	__asm(lbl("_fstat__XprivateX__BB4_5_F"))
		mstate.eax = i0
	__asm(lbl("_fstat__XprivateX__BB4_6_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("_fstat_errState"))
		throw("Invalid state in _fstat")
	}
}



// Sync
public const __exit:int = regFunc(FSM__exit.start)

public final class FSM__exit extends Machine {

	public static function start():void {
		var i0:int


		__asm(label, lbl("__exit_entry"))
	__asm(lbl("__exit__XprivateX__BB5_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		//InlineAsmStart
	throw new AlchemyExit(i0)
	//InlineAsmEnd
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Async
public const _sprintf:int = regFunc(FSM_sprintf.start)

public final class FSM_sprintf extends Machine {

	public static function start():void {
			var result:FSM_sprintf = new FSM_sprintf
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int

	public static const intRegCount:int = 4

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("_sprintf_entry"))
		__asm(push(state), switchjump(
			"_sprintf_errState",
			"_sprintf_state0",
			"_sprintf_state1"))
	__asm(lbl("_sprintf_state0"))
	__asm(lbl("_sprintf__XprivateX__BB6_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 260
		i0 =  (-1)
		__asm(push(i0), push((mstate.ebp+-242)), op(0x3b))
		i0 =  (520)
		__asm(push(i0), push((mstate.ebp+-244)), op(0x3b))
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		__asm(push(i0), push((mstate.ebp+-256)), op(0x3c))
		__asm(push(i0), push((mstate.ebp+-240)), op(0x3c))
		i0 =  (2147483647)
		__asm(push(i0), push((mstate.ebp+-248)), op(0x3c))
		i1 =  ((mstate.ebp+-160))
		__asm(push(i0), push((mstate.ebp+-236)), op(0x3c))
		__asm(push(i1), push((mstate.ebp+-200)), op(0x3c))
		i0 =  (0)
		__asm(push(i0), push((mstate.ebp+-160)), op(0x3c))
		__asm(push(i0), push((mstate.ebp+-156)), op(0x3c))
		__asm(push(i0), push((mstate.ebp+-152)), op(0x3c))
		__asm(push(i0), push((mstate.ebp+-148)), op(0x3c))
		__asm(push(i0), push((mstate.ebp+-144)), op(0x3c))
		i1 =  (i1 + 20)
		i2 =  (128)
		memset(i1, i0, i2)
		i1 =  (mstate.ebp + 16)
		__asm(push(i1), push((mstate.ebp+-260)), op(0x3c))
		mstate.esp -= 12
		i2 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i3 =  ((mstate.ebp+-256))
		__asm(push(i3), push(mstate.esp), op(0x3c))
		__asm(push(i2), push((mstate.esp+4)), op(0x3c))
		__asm(push(i1), push((mstate.esp+8)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM___vfprintf.start()
		return
	__asm(lbl("_sprintf_state1"))
		i1 = mstate.eax
		mstate.esp += 12
		i1 =  ((__xasm<int>(push((mstate.ebp+-256)), op(0x37))))
		__asm(push(i0), push(i1), op(0x3a))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("_sprintf_errState"))
		throw("Invalid state in _sprintf")
	}
}



// Async
public const __start:int = regFunc(FSM__start.start)

public final class FSM__start extends Machine {

	public static function start():void {
			var result:FSM__start = new FSM__start
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int

	public static const intRegCount:int = 3

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__start_entry"))
		__asm(push(state), switchjump(
			"__start_errState",
			"__start_state0",
			"__start_state1",
			"__start_state2",
			"__start_state3",
			"__start_state4"))
	__asm(lbl("__start_state0"))
	__asm(lbl("__start__XprivateX__BB7_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push(i0), op(0x37))))
		i2 =  (i1 << 2)
		i2 =  (i2 + i0)
		i2 =  (i2 + 8)
		__asm(push(i2), push(_environ), op(0x3c))
		__asm(push(i1<1), iftrue, target("__start__XprivateX__BB7_9_F"))
	__asm(lbl("__start__XprivateX__BB7_1_F"))
		i0 =  ((__xasm<int>(push((i0+4)), op(0x37))))
		i1 = i0
		__asm(push(i0==0), iftrue, target("__start__XprivateX__BB7_9_F"))
	__asm(lbl("__start__XprivateX__BB7_2_F"))
		__asm(push(i1), push(___progname), op(0x3c))
		i2 =  ((__xasm<int>(push(i1), op(0x35))))
		__asm(push(i2==0), iftrue, target("__start__XprivateX__BB7_9_F"))
	__asm(jump, target("__start__XprivateX__BB7_3_F"), lbl("__start__XprivateX__BB7_3_B"), label, lbl("__start__XprivateX__BB7_3_F")); 
		i2 =  ((__xasm<int>(push(i0), op(0x35))))
		__asm(push(i2==47), iftrue, target("__start__XprivateX__BB7_5_F"))
	__asm(lbl("__start__XprivateX__BB7_4_F"))
		__asm(jump, target("__start__XprivateX__BB7_6_F"))
	__asm(lbl("__start__XprivateX__BB7_5_F"))
		i1 =  (i0 + 1)
	__asm(lbl("__start__XprivateX__BB7_6_F"))
		i2 =  ((__xasm<int>(push((i0+1)), op(0x35))))
		i0 =  (i0 + 1)
		__asm(push(i2==0), iftrue, target("__start__XprivateX__BB7_8_F"))
	__asm(lbl("__start__XprivateX__BB7_7_F"))
		__asm(jump, target("__start__XprivateX__BB7_3_B"))
	__asm(lbl("__start__XprivateX__BB7_8_F"))
		__asm(push(i1), push(___progname), op(0x3c))
	__asm(lbl("__start__XprivateX__BB7_9_F"))
		i0 =  (0)
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_atexit.start()
		return
	__asm(lbl("__start_state1"))
		mstate.esp += 4
		mstate.esp -= 4
		i0 =  (__fini)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM_atexit.start()
		return
	__asm(lbl("__start_state2"))
		mstate.esp += 4
		i0 =  (__2E_str1)
		i1 =  (4)
		i2 =  (1)
		//InlineAsmStart
	log(i1, mstate.gworker.stringFromPtr(i0))
	//InlineAsmEnd
		__asm(push(i2), push(___mb_cur_max_2E_b), op(0x3a))
		state = 3
		mstate.esp -= 4;FSM_main.start()
		return
	__asm(lbl("__start_state3"))
		i0 = mstate.eax
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 4
		mstate.esp -= 4;FSM_exit.start()
		return
	__asm(lbl("__start_state4"))
		mstate.esp += 4
	__asm(lbl("__start_errState"))
		throw("Invalid state in __start")
	}
}



// Async
public const _atexit:int = regFunc(FSM_atexit.start)

public final class FSM_atexit extends Machine {

	public static function start():void {
			var result:FSM_atexit = new FSM_atexit
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int

	public static const intRegCount:int = 5

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("_atexit_entry"))
		__asm(push(state), switchjump(
			"_atexit_errState",
			"_atexit_state0",
			"_atexit_state1",
			"_atexit_state2"))
	__asm(lbl("_atexit_state0"))
	__asm(lbl("_atexit__XprivateX__BB8_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push(___atexit), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		__asm(push(i0==0), iftrue, target("_atexit__XprivateX__BB8_11_F"))
	__asm(lbl("_atexit__XprivateX__BB8_1_F"))
		i2 = i0
		__asm(jump, target("_atexit__XprivateX__BB8_8_F"))
	__asm(lbl("_atexit__XprivateX__BB8_2_B"), label)
		__asm(jump, target("_atexit__XprivateX__BB8_3_F"))
	__asm(jump, target("_atexit__XprivateX__BB8_3_F"), lbl("_atexit__XprivateX__BB8_3_B"), label, lbl("_atexit__XprivateX__BB8_3_F")); 
		i2 =  (520)
		mstate.esp -= 8
		i3 =  (0)
		__asm(push(i3), push(mstate.esp), op(0x3c))
		__asm(push(i2), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("_atexit_state1"))
		i2 = mstate.eax
		mstate.esp += 8
		__asm(push(i2==0), iftrue, target("_atexit__XprivateX__BB8_13_F"))
	__asm(lbl("_atexit__XprivateX__BB8_4_F"))
		i3 =  ((__xasm<int>(push(___atexit), op(0x37))))
		__asm(push(i0==i3), iftrue, target("_atexit__XprivateX__BB8_7_F"))
	__asm(lbl("_atexit__XprivateX__BB8_5_F"))
		i0 =  (0)
		mstate.esp -= 8
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("_atexit_state2"))
		i0 = mstate.eax
		mstate.esp += 8
		i0 =  ((__xasm<int>(push(___atexit), op(0x37))))
		i2 =  ((__xasm<int>(push((i0+4)), op(0x37))))
		__asm(push(i2>31), iftrue, target("_atexit__XprivateX__BB8_2_B"))
	__asm(lbl("_atexit__XprivateX__BB8_6_F"))
		__asm(jump, target("_atexit__XprivateX__BB8_12_F"))
	__asm(lbl("_atexit__XprivateX__BB8_7_F"))
		i0 =  (0)
		__asm(push(i0), push((i2+4)), op(0x3c))
		__asm(push(i3), push(i2), op(0x3c))
		__asm(push(i2), push(___atexit), op(0x3c))
		i0 = i2
		i2 = i0
	__asm(lbl("_atexit__XprivateX__BB8_8_F"))
		i3 =  ((__xasm<int>(push((i0+4)), op(0x37))))
		__asm(push(i3>31), iftrue, target("_atexit__XprivateX__BB8_10_F"))
	__asm(lbl("_atexit__XprivateX__BB8_9_F"))
		__asm(jump, target("_atexit__XprivateX__BB8_12_F"))
	__asm(lbl("_atexit__XprivateX__BB8_10_F"))
		i0 = i2
		__asm(jump, target("_atexit__XprivateX__BB8_3_B"))
	__asm(lbl("_atexit__XprivateX__BB8_11_F"))
		i0 =  (___atexit0_2E_3021)
		__asm(push(i0), push(___atexit), op(0x3c))
		__asm(jump, target("_atexit__XprivateX__BB8_12_F"))
	__asm(lbl("_atexit__XprivateX__BB8_12_F"))
		i2 =  (1)
		i3 =  ((__xasm<int>(push((i0+4)), op(0x37))))
		i4 =  (i3 << 4)
		i4 =  (i0 + i4)
		__asm(push(i2), push((i4+8)), op(0x3c))
		__asm(push(i1), push((i4+12)), op(0x3c))
		i1 =  (0)
		__asm(push(i1), push((i4+16)), op(0x3c))
		__asm(push(i1), push((i4+20)), op(0x3c))
		i1 =  (i3 + 1)
		__asm(push(i1), push((i0+4)), op(0x3c))
	__asm(lbl("_atexit__XprivateX__BB8_13_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("_atexit_errState"))
		throw("Invalid state in _atexit")
	}
}



// Async
public const _exit:int = regFunc(FSM_exit.start)

public final class FSM_exit extends Machine {

	public static function start():void {
			var result:FSM_exit = new FSM_exit
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("_exit_entry"))
		__asm(push(state), switchjump(
			"_exit_errState",
			"_exit_state0",
			"_exit_state1",
			"_exit_state2"))
	__asm(lbl("_exit_state0"))
	__asm(lbl("_exit__XprivateX__BB9_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push(___cleanup_2E_b), op(0x35))))
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 ^ 1)
		i0 =  (i0 & 1)
		__asm(push(i0!=0), iftrue, target("_exit__XprivateX__BB9_2_F"))
	__asm(lbl("_exit__XprivateX__BB9_1_F"))
		state = 1
		mstate.esp -= 4;FSM__cleanup.start()
		return
	__asm(lbl("_exit_state1"))
	__asm(lbl("_exit__XprivateX__BB9_2_F"))
		mstate.esp -= 4
		__asm(push(i1), push(mstate.esp), op(0x3c))
		mstate.esp -= 4;FSM__exit.start()
	__asm(lbl("_exit_state2"))
		mstate.esp += 4
	__asm(lbl("_exit_errState"))
		throw("Invalid state in _exit")
	}
}



// Sync
public const _dorounding:int = regFunc(FSM_dorounding.start)

public final class FSM_dorounding extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int


		__asm(label, lbl("_dorounding_entry"))
	__asm(lbl("_dorounding__XprivateX__BB10_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  (i0 + i1)
		i2 =  ((__xasm<int>(push(i2), op(0x35))))
		i3 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i4 =  (i2 << 24)
		i5 = i0
		i4 =  (i4 >> 24)
		__asm(push(i4>8), iftrue, target("_dorounding__XprivateX__BB10_3_F"))
	__asm(lbl("_dorounding__XprivateX__BB10_1_F"))
		i2 =  (i2 & 255)
		__asm(push(i2!=8), iftrue, target("_dorounding__XprivateX__BB10_11_F"))
	__asm(lbl("_dorounding__XprivateX__BB10_2_F"))
		i2 =  (i1 + i0)
		i2 =  ((__xasm<int>(push((i2+-1)), op(0x35))))
		i2 =  (i2 & 1)
		__asm(push(i2==0), iftrue, target("_dorounding__XprivateX__BB10_11_F"))
	__asm(lbl("_dorounding__XprivateX__BB10_3_F"))
		i2 =  (i1 + -1)
		i4 =  (i0 + i2)
		i6 =  ((__xasm<int>(push(i4), op(0x35))))
		__asm(push(i6==15), iftrue, target("_dorounding__XprivateX__BB10_5_F"))
	__asm(lbl("_dorounding__XprivateX__BB10_4_F"))
		i0 = i4
		__asm(jump, target("_dorounding__XprivateX__BB10_9_F"))
	__asm(lbl("_dorounding__XprivateX__BB10_5_F"))
		i4 =  (0)
		i1 =  (i5 + i1)
		i1 =  (i1 + -1)
	__asm(jump, target("_dorounding__XprivateX__BB10_6_F"), lbl("_dorounding__XprivateX__BB10_6_B"), label, lbl("_dorounding__XprivateX__BB10_6_F")); 
		i5 = i1
		__asm(push(i2==i4), iftrue, target("_dorounding__XprivateX__BB10_10_F"))
	__asm(lbl("_dorounding__XprivateX__BB10_7_F"))
		i6 =  ((__xasm<int>(push(i5), op(0x35))))
		i7 =  (i4 ^ -1)
		i6 =  (i6 + 1)
		i7 =  (i2 + i7)
		__asm(push(i6), push(i5), op(0x3a))
		i5 =  (i0 + i7)
		i6 =  ((__xasm<int>(push(i5), op(0x35))))
		i1 =  (i1 + -1)
		i4 =  (i4 + 1)
		__asm(push(i6==15), iftrue, target("_dorounding__XprivateX__BB10_12_F"))
	__asm(lbl("_dorounding__XprivateX__BB10_8_F"))
		i0 = i5
		__asm(jump, target("_dorounding__XprivateX__BB10_9_F"))
	__asm(lbl("_dorounding__XprivateX__BB10_9_F"))
		i3 = i0
		i5 =  ((__xasm<int>(push(i3), op(0x35))))
		i5 =  (i5 + 1)
		__asm(push(i5), push(i3), op(0x3a))
		__asm(jump, target("_dorounding__XprivateX__BB10_11_F"))
	__asm(lbl("_dorounding__XprivateX__BB10_10_F"))
		i0 =  (1)
		__asm(push(i0), push(i5), op(0x3a))
		i0 =  ((__xasm<int>(push(i3), op(0x37))))
		i0 =  (i0 + 4)
		__asm(push(i0), push(i3), op(0x3c))
	__asm(lbl("_dorounding__XprivateX__BB10_11_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	__asm(lbl("_dorounding__XprivateX__BB10_12_F"))
		__asm(jump, target("_dorounding__XprivateX__BB10_6_B"))
	}
}



// Async
public const _abort1:int = regFunc(FSM_abort1.start)

public final class FSM_abort1 extends Machine {

	public static function start():void {
			var result:FSM_abort1 = new FSM_abort1
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
	public var i8:int, i9:int, i10:int, i11:int

	public static const intRegCount:int = 12

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("_abort1_entry"))
		__asm(push(state), switchjump(
			"_abort1_errState",
			"_abort1_state0",
			"_abort1_state1",
			"_abort1_state2",
			"_abort1_state3",
			"_abort1_state4",
			"_abort1_state5",
			"_abort1_state6",
			"_abort1_state7"))
	__asm(lbl("_abort1_state0"))
	__asm(lbl("_abort1__XprivateX__BB11_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 20480
		i0 =  ((__xasm<int>(push(___cleanup_2E_b), op(0x35))))
		i0 =  (i0 ^ 1)
		i0 =  (i0 & 1)
		__asm(push(i0!=0), iftrue, target("_abort1__XprivateX__BB11_2_F"))
	__asm(lbl("_abort1__XprivateX__BB11_1_F"))
		state = 1
		mstate.esp -= 4;FSM__cleanup.start()
		return
	__asm(lbl("_abort1_state1"))
	__asm(lbl("_abort1__XprivateX__BB11_2_F"))
		i2 =  (__2E_str340)
		i3 =  (4)
		i0 = i2
		i1 = i3
		//InlineAsmStart
	log(i1, mstate.gworker.stringFromPtr(i0))
	//InlineAsmEnd
		mstate.esp -= 20
		i4 =  (__2E_str96)
		i5 =  (__2E_str138)
		i6 =  (34)
		i7 =  (78)
		i0 =  ((mstate.ebp+-20480))
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i4), push((mstate.esp+4)), op(0x3c))
		__asm(push(i7), push((mstate.esp+8)), op(0x3c))
		__asm(push(i5), push((mstate.esp+12)), op(0x3c))
		__asm(push(i6), push((mstate.esp+16)), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM_sprintf.start()
		return
	__asm(lbl("_abort1_state2"))
		mstate.esp += 20
		i8 =  (3)
		i1 = i8
		//InlineAsmStart
	log(i1, mstate.gworker.stringFromPtr(i0))
	//InlineAsmEnd
		__asm(push(i7), push(_val_2E_1440), op(0x3c))
		i9 =  (__2E_str977)
		i10 =  (__2E_str37)
		i0 = i9
		i1 = i3
		//InlineAsmStart
	log(i1, mstate.gworker.stringFromPtr(i0))
	//InlineAsmEnd
		i0 = i10
		i1 = i3
		//InlineAsmStart
	log(i1, mstate.gworker.stringFromPtr(i0))
	//InlineAsmEnd
		mstate.esp -= 20
		i11 =  (50)
		i0 =  ((mstate.ebp+-16384))
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i4), push((mstate.esp+4)), op(0x3c))
		__asm(push(i7), push((mstate.esp+8)), op(0x3c))
		__asm(push(i5), push((mstate.esp+12)), op(0x3c))
		__asm(push(i11), push((mstate.esp+16)), op(0x3c))
		state = 3
		mstate.esp -= 4;FSM_sprintf.start()
		return
	__asm(lbl("_abort1_state3"))
		mstate.esp += 20
		i1 = i8
		//InlineAsmStart
	log(i1, mstate.gworker.stringFromPtr(i0))
	//InlineAsmEnd
		__asm(push(i7), push(_val_2E_1440), op(0x3c))
		i0 =  (__2E_str643)
		i1 = i3
		//InlineAsmStart
	log(i1, mstate.gworker.stringFromPtr(i0))
	//InlineAsmEnd
		mstate.esp -= 20
		i0 =  (10)
		i1 =  ((mstate.ebp+-12288))
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i4), push((mstate.esp+4)), op(0x3c))
		__asm(push(i7), push((mstate.esp+8)), op(0x3c))
		__asm(push(i5), push((mstate.esp+12)), op(0x3c))
		__asm(push(i0), push((mstate.esp+16)), op(0x3c))
		state = 4
		mstate.esp -= 4;FSM_sprintf.start()
		return
	__asm(lbl("_abort1_state4"))
		mstate.esp += 20
		i0 = i1
		i1 = i8
		//InlineAsmStart
	log(i1, mstate.gworker.stringFromPtr(i0))
	//InlineAsmEnd
		__asm(push(i7), push(_val_2E_1440), op(0x3c))
		i0 = i2
		i1 = i3
		//InlineAsmStart
	log(i1, mstate.gworker.stringFromPtr(i0))
	//InlineAsmEnd
		mstate.esp -= 20
		i0 =  ((mstate.ebp+-8192))
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i4), push((mstate.esp+4)), op(0x3c))
		__asm(push(i7), push((mstate.esp+8)), op(0x3c))
		__asm(push(i5), push((mstate.esp+12)), op(0x3c))
		__asm(push(i6), push((mstate.esp+16)), op(0x3c))
		state = 5
		mstate.esp -= 4;FSM_sprintf.start()
		return
	__asm(lbl("_abort1_state5"))
		mstate.esp += 20
		i1 = i8
		//InlineAsmStart
	log(i1, mstate.gworker.stringFromPtr(i0))
	//InlineAsmEnd
		__asm(push(i7), push(_val_2E_1440), op(0x3c))
		i0 = i9
		i1 = i3
		//InlineAsmStart
	log(i1, mstate.gworker.stringFromPtr(i0))
	//InlineAsmEnd
		i0 = i10
		i1 = i3
		//InlineAsmStart
	log(i1, mstate.gworker.stringFromPtr(i0))
	//InlineAsmEnd
		mstate.esp -= 20
		i0 =  ((mstate.ebp+-4096))
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i4), push((mstate.esp+4)), op(0x3c))
		__asm(push(i7), push((mstate.esp+8)), op(0x3c))
		__asm(push(i5), push((mstate.esp+12)), op(0x3c))
		__asm(push(i11), push((mstate.esp+16)), op(0x3c))
		state = 6
		mstate.esp -= 4;FSM_sprintf.start()
		return
	__asm(lbl("_abort1_state6"))
		mstate.esp += 20
		i1 = i8
		//InlineAsmStart
	log(i1, mstate.gworker.stringFromPtr(i0))
	//InlineAsmEnd
		__asm(push(i7), push(_val_2E_1440), op(0x3c))
		mstate.esp -= 4
		i0 =  (1)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 7
		mstate.esp -= 4;FSM_exit.start()
		return
	__asm(lbl("_abort1_state7"))
		mstate.esp += 4
	__asm(lbl("_abort1_errState"))
		throw("Invalid state in _abort1")
	}
}



// Async
public const ___gdtoa:int = regFunc(FSM___gdtoa.start)

public final class FSM___gdtoa extends Machine {

	public static function start():void {
			var result:FSM___gdtoa = new FSM___gdtoa
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
	public var i8:int, i9:int, i10:int, i11:int, i12:int, i13:int, i14:int, i15:int
	public var i16:int, i17:int, i18:int, i19:int, i20:int, i21:int, i22:int, i23:int
	public var i24:int, i25:int, i26:int, i27:int, i28:int, i29:int, i30:int, i31:int
	public static const intRegCount:int = 32
	public var f0:Number, f1:Number, f2:Number, f3:Number

	public static const NumberRegCount:int = 4
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("___gdtoa_entry"))
		__asm(push(state), switchjump(
			"___gdtoa_errState",
			"___gdtoa_state0",
			"___gdtoa_state1",
			"___gdtoa_state2",
			"___gdtoa_state3",
			"___gdtoa_state4",
			"___gdtoa_state5",
			"___gdtoa_state6",
			"___gdtoa_state7",
			"___gdtoa_state8",
			"___gdtoa_state9",
			"___gdtoa_state10",
			"___gdtoa_state11",
			"___gdtoa_state12",
			"___gdtoa_state13",
			"___gdtoa_state14",
			"___gdtoa_state15",
			"___gdtoa_state16",
			"___gdtoa_state17",
			"___gdtoa_state18",
			"___gdtoa_state19",
			"___gdtoa_state20",
			"___gdtoa_state21",
			"___gdtoa_state22",
			"___gdtoa_state23",
			"___gdtoa_state24",
			"___gdtoa_state25",
			"___gdtoa_state26",
			"___gdtoa_state27",
			"___gdtoa_state28",
			"___gdtoa_state29",
			"___gdtoa_state30",
			"___gdtoa_state31",
			"___gdtoa_state32",
			"___gdtoa_state33",
			"___gdtoa_state34",
			"___gdtoa_state35",
			"___gdtoa_state36",
			"___gdtoa_state37",
			"___gdtoa_state38"))
	__asm(lbl("___gdtoa_state0"))
	__asm(lbl("___gdtoa__XprivateX__BB12_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 216
		i0 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i1 =  ((__xasm<int>(push(i0), op(0x37))))
		i2 =  (i1 & -49)
		i3 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i4 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		__asm(push(i2), push(i0), op(0x3c))
		i1 =  (i1 & 7)
		i2 =  ((__xasm<int>(push((mstate.ebp+20)), op(0x37))))
		i5 =  ((__xasm<int>(push((mstate.ebp+24)), op(0x37))))
		i6 =  ((__xasm<int>(push((mstate.ebp+28)), op(0x37))))
		i7 =  ((__xasm<int>(push((mstate.ebp+32)), op(0x37))))
		i8 = i4
		__asm(push(i1>2), iftrue, target("___gdtoa__XprivateX__BB12_6_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_1_F"))
		__asm(push(i1==0), iftrue, target("___gdtoa__XprivateX__BB12_61_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_2_F"))
		i1 =  (i1 + -1)
		__asm(push(uint(i1)<uint(2)), iftrue, target("___gdtoa__XprivateX__BB12_3_F"))
		__asm(jump, target("___gdtoa__XprivateX__BB12_429_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_3_F"))
		i1 =  (32)
		i9 =  (0)
		__asm(jump, target("___gdtoa__XprivateX__BB12_4_F"))
	__asm(jump, target("___gdtoa__XprivateX__BB12_4_F"), lbl("___gdtoa__XprivateX__BB12_4_B"), label, lbl("___gdtoa__XprivateX__BB12_4_F")); 
		i9 =  (i9 + 1)
		i1 =  (i1 << 1)
		__asm(push(i1>63), iftrue, target("___gdtoa__XprivateX__BB12_30_F"))
		__asm(jump, target("___gdtoa__XprivateX__BB12_5_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_5_F"))
		__asm(jump, target("___gdtoa__XprivateX__BB12_4_B"))
	__asm(lbl("___gdtoa__XprivateX__BB12_6_F"))
		__asm(push(i1==3), iftrue, target("___gdtoa__XprivateX__BB12_10_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_7_F"))
		__asm(push(i1==4), iftrue, target("___gdtoa__XprivateX__BB12_8_F"))
		__asm(jump, target("___gdtoa__XprivateX__BB12_429_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_8_F"))
		i0 =  (-32768)
		__asm(push(i0), push(i6), op(0x3c))
		i0 =  ((__xasm<int>(push(_freelist), op(0x37))))
		__asm(push(i0==0), iftrue, target("___gdtoa__XprivateX__BB12_22_F"))
		__asm(jump, target("___gdtoa__XprivateX__BB12_9_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_9_F"))
		i1 =  ((__xasm<int>(push(i0), op(0x37))))
		__asm(push(i1), push(_freelist), op(0x3c))
		__asm(jump, target("___gdtoa__XprivateX__BB12_25_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_10_F"))
		i0 =  (-32768)
		__asm(push(i0), push(i6), op(0x3c))
		i0 =  ((__xasm<int>(push(_freelist), op(0x37))))
		__asm(push(i0==0), iftrue, target("___gdtoa__XprivateX__BB12_12_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_11_F"))
		i1 =  ((__xasm<int>(push(i0), op(0x37))))
		__asm(push(i1), push(_freelist), op(0x3c))
		__asm(jump, target("___gdtoa__XprivateX__BB12_15_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_12_F"))
		i0 =  (_private_mem)
		i1 =  ((__xasm<int>(push(_pmem_next), op(0x37))))
		i0 =  (i1 - i0)
		i0 =  (i0 >> 3)
		i0 =  (i0 + 3)
		__asm(push(uint(i0)>uint(288)), iftrue, target("___gdtoa__XprivateX__BB12_14_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_13_F"))
		i0 =  (0)
		i2 =  (i1 + 24)
		__asm(push(i2), push(_pmem_next), op(0x3c))
		__asm(push(i0), push((i1+4)), op(0x3c))
		i0 =  (1)
		__asm(push(i0), push((i1+8)), op(0x3c))
		i0 = i1
		__asm(jump, target("___gdtoa__XprivateX__BB12_15_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_14_F"))
		i0 =  (24)
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_malloc.start()
		return
	__asm(lbl("___gdtoa_state1"))
		i0 = mstate.eax
		mstate.esp += 4
		i1 =  (0)
		__asm(push(i1), push((i0+4)), op(0x3c))
		i1 =  (1)
		__asm(push(i1), push((i0+8)), op(0x3c))
	__asm(lbl("___gdtoa__XprivateX__BB12_15_F"))
		i1 =  (0)
		__asm(push(i1), push((i0+16)), op(0x3c))
		__asm(push(i1), push((i0+12)), op(0x3c))
		__asm(push(i1), push(i0), op(0x3c))
		i2 =  (73)
		__asm(push(i2), push((i0+4)), op(0x3a))
		i0 =  (i0 + 4)
		i2 =  (__2E_str159)
		i3 = i0
	__asm(jump, target("___gdtoa__XprivateX__BB12_16_F"), lbl("___gdtoa__XprivateX__BB12_16_B"), label, lbl("___gdtoa__XprivateX__BB12_16_F")); 
		i4 =  (i2 + i1)
		i4 =  ((__xasm<int>(push((i4+1)), op(0x35))))
		i5 =  (i0 + i1)
		__asm(push(i4), push((i5+1)), op(0x3a))
		i1 =  (i1 + 1)
		__asm(push(i4==0), iftrue, target("___gdtoa__XprivateX__BB12_18_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_17_F"))
		__asm(jump, target("___gdtoa__XprivateX__BB12_16_B"))
	__asm(lbl("___gdtoa__XprivateX__BB12_18_F"))
		__asm(push(i7==0), iftrue, target("___gdtoa__XprivateX__BB12_21_F"))
	__asm(jump, target("___gdtoa__XprivateX__BB12_19_F"), lbl("___gdtoa__XprivateX__BB12_19_B"), label, lbl("___gdtoa__XprivateX__BB12_19_F")); 
		i0 =  (i0 + i1)
		__asm(push(i0), push(i7), op(0x3c))
		__asm(jump, target("___gdtoa__XprivateX__BB12_20_F"))
	__asm(jump, target("___gdtoa__XprivateX__BB12_20_F"), lbl("___gdtoa__XprivateX__BB12_20_B"), label, lbl("___gdtoa__XprivateX__BB12_20_F")); 
		__asm(jump, target("___gdtoa__XprivateX__BB12_21_F"))
		__asm(jump, target("___gdtoa__XprivateX__BB12_21_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_21_F"))
		mstate.eax = i3
		__asm(jump, target("___gdtoa__XprivateX__BB12_428_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_22_F"))
		i0 =  (_private_mem)
		i1 =  ((__xasm<int>(push(_pmem_next), op(0x37))))
		i0 =  (i1 - i0)
		i0 =  (i0 >> 3)
		i0 =  (i0 + 3)
		__asm(push(uint(i0)>uint(288)), iftrue, target("___gdtoa__XprivateX__BB12_24_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_23_F"))
		i0 =  (0)
		i2 =  (i1 + 24)
		__asm(push(i2), push(_pmem_next), op(0x3c))
		__asm(push(i0), push((i1+4)), op(0x3c))
		i0 =  (1)
		__asm(push(i0), push((i1+8)), op(0x3c))
		i0 = i1
		__asm(jump, target("___gdtoa__XprivateX__BB12_25_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_24_F"))
		i0 =  (24)
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM_malloc.start()
		return
	__asm(lbl("___gdtoa_state2"))
		i0 = mstate.eax
		mstate.esp += 4
		i1 =  (0)
		__asm(push(i1), push((i0+4)), op(0x3c))
		i1 =  (1)
		__asm(push(i1), push((i0+8)), op(0x3c))
	__asm(lbl("___gdtoa__XprivateX__BB12_25_F"))
		i1 =  (0)
		__asm(push(i1), push((i0+16)), op(0x3c))
		__asm(push(i1), push((i0+12)), op(0x3c))
		__asm(push(i1), push(i0), op(0x3c))
		i2 =  (78)
		__asm(push(i2), push((i0+4)), op(0x3a))
		i0 =  (i0 + 4)
		i2 =  (__2E_str260)
		i3 = i0
	__asm(jump, target("___gdtoa__XprivateX__BB12_26_F"), lbl("___gdtoa__XprivateX__BB12_26_B"), label, lbl("___gdtoa__XprivateX__BB12_26_F")); 
		i4 =  (i2 + i1)
		i4 =  ((__xasm<int>(push((i4+1)), op(0x35))))
		i5 =  (i0 + i1)
		__asm(push(i4), push((i5+1)), op(0x3a))
		i1 =  (i1 + 1)
		__asm(push(i4==0), iftrue, target("___gdtoa__XprivateX__BB12_28_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_27_F"))
		__asm(jump, target("___gdtoa__XprivateX__BB12_26_B"))
	__asm(lbl("___gdtoa__XprivateX__BB12_28_F"))
		__asm(push(i7==0), iftrue, target("___gdtoa__XprivateX__BB12_20_B"))
	__asm(lbl("___gdtoa__XprivateX__BB12_29_F"))
		__asm(jump, target("___gdtoa__XprivateX__BB12_19_B"))
	__asm(lbl("___gdtoa__XprivateX__BB12_30_F"))
		i1 =  (0)
		mstate.esp -= 4
		__asm(push(i9), push(mstate.esp), op(0x3c))
		state = 3
		mstate.esp -= 4;FSM___Balloc_D2A.start()
		return
	__asm(lbl("___gdtoa_state3"))
		i9 = mstate.eax
		mstate.esp += 4
		i10 =  (i9 + 20)
		i11 = i9
		i12 = i1
	__asm(jump, target("___gdtoa__XprivateX__BB12_31_F"), lbl("___gdtoa__XprivateX__BB12_31_B"), label, lbl("___gdtoa__XprivateX__BB12_31_F")); 
		i13 =  (i8 + i12)
		i13 =  ((__xasm<int>(push(i13), op(0x37))))
		i14 =  (i9 + i12)
		__asm(push(i13), push((i14+20)), op(0x3c))
		i12 =  (i12 + 4)
		i1 =  (i1 + 1)
		__asm(push(i1>1), iftrue, target("___gdtoa__XprivateX__BB12_33_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_32_F"))
		__asm(jump, target("___gdtoa__XprivateX__BB12_31_B"))
	__asm(lbl("___gdtoa__XprivateX__BB12_33_F"))
		i1 =  (i1 << 2)
		i8 =  (i11 + 20)
		i1 =  (i8 + i1)
		i1 =  (i1 - i10)
		i1 =  (i1 >> 2)
		i10 =  (i1 + -1)
		i12 =  (i10 << 2)
		i8 =  (i8 + i12)
		i8 =  ((__xasm<int>(push(i8), op(0x37))))
		__asm(push(i8==0), iftrue, target("___gdtoa__XprivateX__BB12_35_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_34_F"))
		i9 = i10
		__asm(jump, target("___gdtoa__XprivateX__BB12_43_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_35_F"))
		i8 =  (i1 << 2)
		i9 =  (i9 + i8)
		i9 =  (i9 + 12)
	__asm(jump, target("___gdtoa__XprivateX__BB12_36_F"), lbl("___gdtoa__XprivateX__BB12_36_B"), label, lbl("___gdtoa__XprivateX__BB12_36_F")); 
		i8 = i9
		__asm(push(i1!=1), iftrue, target("___gdtoa__XprivateX__BB12_40_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_37_F"))
		i1 =  (0)
		__asm(push(i1), push((i11+16)), op(0x3c))
		mstate.esp -= 4
		__asm(push(i11), push(mstate.esp), op(0x3c))
		mstate.esp -= 4;FSM___trailz_D2A.start()
	__asm(lbl("___gdtoa_state4"))
		i1 = mstate.eax
		mstate.esp += 4
		__asm(push(i1), push((mstate.ebp+-4)), op(0x3c))
		__asm(push(i1==0), iftrue, target("___gdtoa__XprivateX__BB12_39_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_38_F"))
		i9 =  (0)
		__asm(jump, target("___gdtoa__XprivateX__BB12_48_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_39_F"))
		i1 =  (0)
		i9 = i3
		__asm(jump, target("___gdtoa__XprivateX__BB12_49_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_40_F"))
		i8 =  ((__xasm<int>(push(i8), op(0x37))))
		i9 =  (i9 + -4)
		i1 =  (i1 + -1)
		__asm(push(i8!=0), iftrue, target("___gdtoa__XprivateX__BB12_42_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_41_F"))
		__asm(jump, target("___gdtoa__XprivateX__BB12_36_B"))
	__asm(lbl("___gdtoa__XprivateX__BB12_42_F"))
		i9 =  (i1 + -1)
	__asm(lbl("___gdtoa__XprivateX__BB12_43_F"))
		i8 =  (i9 << 2)
		__asm(push(i1), push((i11+16)), op(0x3c))
		i1 =  (i11 + i8)
		i1 =  ((__xasm<int>(push((i1+20)), op(0x37))))
		i8 =  ((uint(i1)<uint(65536)) ? 16 : 0)
		i1 =  (i1 << i8)
		i10 =  ((uint(i1)<uint(16777216)) ? 8 : 0)
		i1 =  (i1 << i10)
		i12 =  ((uint(i1)<uint(268435456)) ? 4 : 0)
		i8 =  (i10 | i8)
		i1 =  (i1 << i12)
		i10 =  ((uint(i1)<uint(1073741824)) ? 2 : 0)
		i8 =  (i8 | i12)
		i8 =  (i8 | i10)
		i1 =  (i1 << i10)
		__asm(push(i1>-1), iftrue, target("___gdtoa__XprivateX__BB12_45_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_44_F"))
		i1 = i8
		__asm(jump, target("___gdtoa__XprivateX__BB12_46_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_45_F"))
		i1 =  (i1 & 1073741824)
		i8 =  (i8 + 1)
		i1 =  ((i1==0) ? 32 : i8)
	__asm(lbl("___gdtoa__XprivateX__BB12_46_F"))
		mstate.esp -= 4
		__asm(push(i11), push(mstate.esp), op(0x3c))
		mstate.esp -= 4;FSM___trailz_D2A.start()
	__asm(lbl("___gdtoa_state5"))
		i8 = mstate.eax
		i9 =  (i9 << 5)
		mstate.esp += 4
		i9 =  (i9 + 32)
		__asm(push(i8), push((mstate.ebp+-4)), op(0x3c))
		i9 =  (i9 - i1)
		__asm(push(i8==0), iftrue, target("___gdtoa__XprivateX__BB12_430_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_47_F"))
		i1 = i8
		__asm(jump, target("___gdtoa__XprivateX__BB12_48_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_48_F"))
		mstate.esp -= 8
		__asm(push(i11), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		mstate.esp -= 4;FSM___rshift_D2A.start()
	__asm(lbl("___gdtoa_state6"))
		mstate.esp += 8
		i1 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		i9 =  (i9 - i1)
		i8 =  (i1 + i3)
		i1 = i9
		i9 = i8
	__asm(jump, target("___gdtoa__XprivateX__BB12_49_F"), lbl("___gdtoa__XprivateX__BB12_49_B"), label, lbl("___gdtoa__XprivateX__BB12_49_F")); 
		i8 = i9
		i9 =  ((__xasm<int>(push((i11+16)), op(0x37))))
		__asm(push(i9!=0), iftrue, target("___gdtoa__XprivateX__BB12_68_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_50_F"))
		__asm(push(i11==0), iftrue, target("___gdtoa__XprivateX__BB12_52_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_51_F"))
		i0 =  (_freelist)
		i1 =  ((__xasm<int>(push((i11+4)), op(0x37))))
		i1 =  (i1 << 2)
		i0 =  (i0 + i1)
		i1 =  ((__xasm<int>(push(i0), op(0x37))))
		__asm(push(i1), push(i11), op(0x3c))
		__asm(push(i11), push(i0), op(0x3c))
	__asm(lbl("___gdtoa__XprivateX__BB12_52_F"))
		i0 =  (1)
		__asm(push(i0), push(i6), op(0x3c))
		i0 =  ((__xasm<int>(push(_freelist), op(0x37))))
		__asm(push(i0==0), iftrue, target("___gdtoa__XprivateX__BB12_54_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_53_F"))
		i1 =  ((__xasm<int>(push(i0), op(0x37))))
		__asm(push(i1), push(_freelist), op(0x3c))
		__asm(jump, target("___gdtoa__XprivateX__BB12_57_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_54_F"))
		i0 =  (_private_mem)
		i1 =  ((__xasm<int>(push(_pmem_next), op(0x37))))
		i0 =  (i1 - i0)
		i0 =  (i0 >> 3)
		i0 =  (i0 + 3)
		__asm(push(uint(i0)>uint(288)), iftrue, target("___gdtoa__XprivateX__BB12_56_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_55_F"))
		i0 =  (0)
		i2 =  (i1 + 24)
		__asm(push(i2), push(_pmem_next), op(0x3c))
		__asm(push(i0), push((i1+4)), op(0x3c))
		i0 =  (1)
		__asm(push(i0), push((i1+8)), op(0x3c))
		i0 = i1
		__asm(jump, target("___gdtoa__XprivateX__BB12_57_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_56_F"))
		i0 =  (24)
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 7
		mstate.esp -= 4;FSM_malloc.start()
		return
	__asm(lbl("___gdtoa_state7"))
		i0 = mstate.eax
		mstate.esp += 4
		i1 =  (0)
		__asm(push(i1), push((i0+4)), op(0x3c))
		i1 =  (1)
		__asm(push(i1), push((i0+8)), op(0x3c))
	__asm(lbl("___gdtoa__XprivateX__BB12_57_F"))
		i1 =  (0)
		__asm(push(i1), push((i0+16)), op(0x3c))
		__asm(push(i1), push((i0+12)), op(0x3c))
		__asm(push(i1), push(i0), op(0x3c))
		i2 =  (48)
		__asm(push(i2), push((i0+4)), op(0x3a))
		__asm(push(i1), push((i0+5)), op(0x3a))
		i1 =  (i0 + 5)
		i0 =  (i0 + 4)
		__asm(push(i7==0), iftrue, target("___gdtoa__XprivateX__BB12_60_F"))
	__asm(jump, target("___gdtoa__XprivateX__BB12_58_F"), lbl("___gdtoa__XprivateX__BB12_58_B"), label, lbl("___gdtoa__XprivateX__BB12_58_F")); 
		__asm(push(i1), push(i7), op(0x3c))
		__asm(jump, target("___gdtoa__XprivateX__BB12_59_F"))
	__asm(jump, target("___gdtoa__XprivateX__BB12_59_F"), lbl("___gdtoa__XprivateX__BB12_59_B"), label, lbl("___gdtoa__XprivateX__BB12_59_F")); 
		__asm(jump, target("___gdtoa__XprivateX__BB12_60_F"))
		__asm(jump, target("___gdtoa__XprivateX__BB12_60_F"))
	__asm(jump, target("___gdtoa__XprivateX__BB12_60_F"), lbl("___gdtoa__XprivateX__BB12_60_B"), label, lbl("___gdtoa__XprivateX__BB12_60_F")); 
		mstate.eax = i0
		__asm(jump, target("___gdtoa__XprivateX__BB12_428_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_61_F"))
		i0 =  (1)
		__asm(push(i0), push(i6), op(0x3c))
		i0 =  ((__xasm<int>(push(_freelist), op(0x37))))
		__asm(push(i0==0), iftrue, target("___gdtoa__XprivateX__BB12_63_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_62_F"))
		i1 =  ((__xasm<int>(push(i0), op(0x37))))
		__asm(push(i1), push(_freelist), op(0x3c))
		__asm(jump, target("___gdtoa__XprivateX__BB12_66_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_63_F"))
		i0 =  (_private_mem)
		i1 =  ((__xasm<int>(push(_pmem_next), op(0x37))))
		i0 =  (i1 - i0)
		i0 =  (i0 >> 3)
		i0 =  (i0 + 3)
		__asm(push(uint(i0)>uint(288)), iftrue, target("___gdtoa__XprivateX__BB12_65_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_64_F"))
		i0 =  (0)
		i2 =  (i1 + 24)
		__asm(push(i2), push(_pmem_next), op(0x3c))
		__asm(push(i0), push((i1+4)), op(0x3c))
		i0 =  (1)
		__asm(push(i0), push((i1+8)), op(0x3c))
		i0 = i1
		__asm(jump, target("___gdtoa__XprivateX__BB12_66_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_65_F"))
		i0 =  (24)
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 8
		mstate.esp -= 4;FSM_malloc.start()
		return
	__asm(lbl("___gdtoa_state8"))
		i0 = mstate.eax
		mstate.esp += 4
		i1 =  (0)
		__asm(push(i1), push((i0+4)), op(0x3c))
		i1 =  (1)
		__asm(push(i1), push((i0+8)), op(0x3c))
	__asm(lbl("___gdtoa__XprivateX__BB12_66_F"))
		i1 =  (0)
		__asm(push(i1), push((i0+16)), op(0x3c))
		__asm(push(i1), push((i0+12)), op(0x3c))
		__asm(push(i1), push(i0), op(0x3c))
		i2 =  (48)
		__asm(push(i2), push((i0+4)), op(0x3a))
		__asm(push(i1), push((i0+5)), op(0x3a))
		i1 =  (i0 + 5)
		i0 =  (i0 + 4)
		__asm(push(i7==0), iftrue, target("___gdtoa__XprivateX__BB12_59_B"))
	__asm(lbl("___gdtoa__XprivateX__BB12_67_F"))
		__asm(jump, target("___gdtoa__XprivateX__BB12_58_B"))
	__asm(lbl("___gdtoa__XprivateX__BB12_68_F"))
		i9 =  ((mstate.ebp+-4))
		mstate.esp -= 8
		__asm(push(i11), push(mstate.esp), op(0x3c))
		__asm(push(i9), push((mstate.esp+4)), op(0x3c))
		mstate.esp -= 4;FSM___b2d_D2A.start()
	__asm(lbl("___gdtoa_state9"))
		f0 = mstate.st0
		__asm(push(f0), push((mstate.ebp+-16)), op(0x3e))
		i9 =  ((__xasm<int>(push((mstate.ebp+-12)), op(0x37))))
		i9 =  (i9 | 1072693248)
		i10 =  ((__xasm<int>(push((mstate.ebp+-16)), op(0x37))))
		i9 =  (i9 & 1073741823)
		__asm(push(i10), push((mstate.ebp+-24)), op(0x3c))
		__asm(push(i9), push((mstate.ebp+-20)), op(0x3c))
		i12 =  (i1 + i8)
		i12 =  (i12 + -1)
		f0 =  ((__xasm<Number>(push((mstate.ebp+-24)), op(0x39))))
		f0 =  (f0 + -1.5)
		i13 =  (i12 >> 31)
		i14 =  (i12 + i13)
		f1 =  (Number(i12))
		f0 =  (f0 * 0.28953)
		mstate.esp += 8
		i13 =  (i14 ^ i13)
		f1 =  (f1 * 0.30103)
		f0 =  (f0 + 0.176091)
		__asm(push(i12), push((mstate.ebp+-4)), op(0x3c))
		i13 =  (i13 + -1077)
		f0 =  (f0 + f1)
		__asm(push(i13>0), iftrue, target("___gdtoa__XprivateX__BB12_70_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_69_F"))
		__asm(jump, target("___gdtoa__XprivateX__BB12_71_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_70_F"))
		f1 =  (Number(i13))
		f1 =  (f1 * 7e-17)
		f0 =  (f1 + f0)
	__asm(lbl("___gdtoa__XprivateX__BB12_71_F"))
		f1 =  (0)
		i13 =  (int(f0))
		__asm(push(f0<f1), iftrue, target("___gdtoa__XprivateX__BB12_73_F"))
	__asm(jump, target("___gdtoa__XprivateX__BB12_72_F"), lbl("___gdtoa__XprivateX__BB12_72_B"), label, lbl("___gdtoa__XprivateX__BB12_72_F")); 
		__asm(jump, target("___gdtoa__XprivateX__BB12_75_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_73_F"))
		f1 =  (Number(i13))
		__asm(push(f1==f0), iftrue, target("___gdtoa__XprivateX__BB12_72_B"))
	__asm(lbl("___gdtoa__XprivateX__BB12_74_F"))
		i13 =  (i13 + -1)
	__asm(lbl("___gdtoa__XprivateX__BB12_75_F"))
		i14 =  (i8 + i1)
		i14 =  (i14 << 20)
		i9 =  (i14 + i9)
		i9 =  (i9 + -1048576)
		__asm(push(uint(i13)<uint(23)), iftrue, target("___gdtoa__XprivateX__BB12_77_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_76_F"))
		i14 =  (1)
		__asm(jump, target("___gdtoa__XprivateX__BB12_80_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_77_F"))
		i14 =  (___tens_D2A)
		i15 =  (i13 << 3)
		__asm(push(i10), push((mstate.ebp+-32)), op(0x3c))
		__asm(push(i9), push((mstate.ebp+-28)), op(0x3c))
		i14 =  (i14 + i15)
		f0 =  ((__xasm<Number>(push((mstate.ebp+-32)), op(0x39))))
		f1 =  ((__xasm<Number>(push(i14), op(0x39))))
		__asm(push(f0<f1), iftrue, target("___gdtoa__XprivateX__BB12_79_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_78_F"))
		i14 =  (0)
		__asm(jump, target("___gdtoa__XprivateX__BB12_80_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_79_F"))
		i14 =  (0)
		i13 =  (i13 + -1)
	__asm(lbl("___gdtoa__XprivateX__BB12_80_F"))
		i15 =  (i1 - i12)
		i16 =  (i15 + -1)
		i15 =  (1 - i15)
		i17 =  ((i16>-1) ? i16 : 0)
		i15 =  ((i16>-1) ? 0 : i15)
		__asm(push(i13<0), iftrue, target("___gdtoa__XprivateX__BB12_82_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_81_F"))
		i16 =  (0)
		i17 =  (i17 + i13)
		i18 = i13
		__asm(jump, target("___gdtoa__XprivateX__BB12_83_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_82_F"))
		i16 =  (0)
		i19 =  (0 - i13)
		i15 =  (i15 - i13)
		i18 = i16
		i16 = i19
	__asm(lbl("___gdtoa__XprivateX__BB12_83_F"))
		i2 =  ((uint(i2)>uint(9)) ? 0 : i2)
		i19 =  (i2 + -4)
		i19 =  ((i2<6) ? i2 : i19)
		i2 =  ((i2<6) ? 1 : 0)
		i20 =  ((i5<1) ? 1 : i5)
		__asm(push(i19>2), iftrue, target("___gdtoa__XprivateX__BB12_87_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_84_F"))
		__asm(push(uint(i19)<uint(2)), iftrue, target("___gdtoa__XprivateX__BB12_91_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_85_F"))
		__asm(push(i19==2), iftrue, target("___gdtoa__XprivateX__BB12_92_F"))
		__asm(jump, target("___gdtoa__XprivateX__BB12_86_F"))
	__asm(jump, target("___gdtoa__XprivateX__BB12_86_F"), lbl("___gdtoa__XprivateX__BB12_86_B"), label, lbl("___gdtoa__XprivateX__BB12_86_F")); 
		//IMPLICIT_DEF i20 = 
		i21 =  (1)
		i22 = i20
		i23 = i20
		__asm(jump, target("___gdtoa__XprivateX__BB12_98_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_87_F"))
		__asm(push(i19==3), iftrue, target("___gdtoa__XprivateX__BB12_94_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_88_F"))
		__asm(push(i19==4), iftrue, target("___gdtoa__XprivateX__BB12_93_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_89_F"))
		__asm(push(i19!=5), iftrue, target("___gdtoa__XprivateX__BB12_86_B"))
	__asm(lbl("___gdtoa__XprivateX__BB12_90_F"))
		i12 =  (1)
		__asm(jump, target("___gdtoa__XprivateX__BB12_95_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_91_F"))
		i5 =  (22)
		__asm(push(i5), push((mstate.ebp+-4)), op(0x3c))
		i20 =  (0)
		i23 =  (-1)
		i21 =  (1)
		i12 = i5
		i22 = i23
		i5 = i20
		__asm(jump, target("___gdtoa__XprivateX__BB12_98_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_92_F"))
		i5 =  (0)
		__asm(push(i20), push((mstate.ebp+-4)), op(0x3c))
		i12 = i20
		i21 = i5
		i22 = i20
		i23 = i20
		i5 = i20
		__asm(jump, target("___gdtoa__XprivateX__BB12_98_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_93_F"))
		i5 =  (1)
		__asm(push(i20), push((mstate.ebp+-4)), op(0x3c))
		i12 = i20
		i21 = i5
		i22 = i20
		i23 = i20
		i5 = i20
		__asm(jump, target("___gdtoa__XprivateX__BB12_98_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_94_F"))
		i12 =  (0)
	__asm(lbl("___gdtoa__XprivateX__BB12_95_F"))
		i21 = i12
		i22 =  (i13 + i5)
		i23 =  (i22 + 1)
		__asm(push(i23), push((mstate.ebp+-4)), op(0x3c))
		__asm(push(i23<1), iftrue, target("___gdtoa__XprivateX__BB12_97_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_96_F"))
		i12 = i23
		__asm(jump, target("___gdtoa__XprivateX__BB12_98_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_97_F"))
		i12 =  (1)
		__asm(push(i12), push((mstate.ebp+-4)), op(0x3c))
	__asm(lbl("___gdtoa__XprivateX__BB12_98_F"))
		i20 = i21
		i21 = i22
		i22 = i23
		__asm(push(uint(i12)<uint(20)), iftrue, target("___gdtoa__XprivateX__BB12_431_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_99_F"))
		i23 =  (4)
		i24 =  (0)
		__asm(jump, target("___gdtoa__XprivateX__BB12_100_F"))
	__asm(jump, target("___gdtoa__XprivateX__BB12_100_F"), lbl("___gdtoa__XprivateX__BB12_100_B"), label, lbl("___gdtoa__XprivateX__BB12_100_F")); 
		i23 =  (i23 << 1)
		i24 =  (i24 + 1)
		i25 =  (i23 + 16)
		__asm(push(uint(i25)>uint(i12)), iftrue, target("___gdtoa__XprivateX__BB12_102_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_101_F"))
		__asm(jump, target("___gdtoa__XprivateX__BB12_100_B"))
	__asm(lbl("___gdtoa__XprivateX__BB12_102_F"))
		i12 = i24
	__asm(jump, target("___gdtoa__XprivateX__BB12_103_F"), lbl("___gdtoa__XprivateX__BB12_103_B"), label, lbl("___gdtoa__XprivateX__BB12_103_F")); 
		mstate.esp -= 4
		__asm(push(i12), push(mstate.esp), op(0x3c))
		state = 10
		mstate.esp -= 4;FSM___Balloc_D2A.start()
		return
	__asm(lbl("___gdtoa_state10"))
		i23 = mstate.eax
		mstate.esp += 4
		__asm(push(i12), push(i23), op(0x3c))
		i12 =  (i23 + 4)
		i2 =  (i2 ^ 1)
		i23 =  ((i13!=0) ? 1 : 0)
		i2 =  (i23 | i2)
		i23 = i12
		i2 =  (i2 & 1)
		__asm(push(i2!=0), iftrue, target("___gdtoa__XprivateX__BB12_169_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_104_F"))
		__asm(push(uint(i22)>uint(14)), iftrue, target("___gdtoa__XprivateX__BB12_169_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_105_F"))
		i2 =  (0)
		__asm(push(i2), push((mstate.ebp+-4)), op(0x3c))
		__asm(push(i13<1), iftrue, target("___gdtoa__XprivateX__BB12_117_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_106_F"))
		i2 =  (___tens_D2A)
		i24 =  (i13 & 15)
		i24 =  (i24 << 3)
		i2 =  (i2 + i24)
		f0 =  ((__xasm<Number>(push(i2), op(0x39))))
		i2 =  (i13 >> 4)
		i24 =  (i2 & 16)
		__asm(push(i24!=0), iftrue, target("___gdtoa__XprivateX__BB12_108_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_107_F"))
		i24 =  (2)
		i25 =  (0)
		i26 = i10
		i27 = i9
		__asm(jump, target("___gdtoa__XprivateX__BB12_114_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_108_F"))
		__asm(push(i10), push((mstate.ebp+-40)), op(0x3c))
		__asm(push(i9), push((mstate.ebp+-36)), op(0x3c))
		f1 =  ((__xasm<Number>(push((mstate.ebp+-40)), op(0x39))))
		f1 =  (f1 / 1e+256)
		__asm(push(f1), push((mstate.ebp+-48)), op(0x3e))
		i24 =  ((__xasm<int>(push((mstate.ebp+-48)), op(0x37))))
		i25 =  ((__xasm<int>(push((mstate.ebp+-44)), op(0x37))))
		i2 =  (i2 & 15)
		__asm(push(i2==0), iftrue, target("___gdtoa__XprivateX__BB12_432_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_109_F"))
		i26 =  (3)
		i27 =  (0)
		__asm(jump, target("___gdtoa__XprivateX__BB12_110_F"))
	__asm(jump, target("___gdtoa__XprivateX__BB12_110_F"), lbl("___gdtoa__XprivateX__BB12_110_B"), label, lbl("___gdtoa__XprivateX__BB12_110_F")); 
		i28 = i25
		i25 = i26
		i26 =  (i2 & 1)
		__asm(push(i26!=0), iftrue, target("___gdtoa__XprivateX__BB12_112_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_111_F"))
		__asm(jump, target("___gdtoa__XprivateX__BB12_113_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_112_F"))
		i26 =  (___bigtens_D2A)
		i29 =  (i27 << 3)
		i26 =  (i26 + i29)
		f1 =  ((__xasm<Number>(push(i26), op(0x39))))
		f0 =  (f1 * f0)
		i25 =  (i25 + 1)
	__asm(lbl("___gdtoa__XprivateX__BB12_113_F"))
		i29 = i25
		i25 =  (i27 + 1)
		__asm(push(i25), push((mstate.ebp+-4)), op(0x3c))
		i2 =  (i2 >> 1)
		i26 = i24
		i27 = i28
		i24 = i29
	__asm(lbl("___gdtoa__XprivateX__BB12_114_F"))
		i28 = i27
		i29 = i24
		__asm(push(i2==0), iftrue, target("___gdtoa__XprivateX__BB12_116_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_115_F"))
		i27 = i25
		i24 = i26
		i25 = i28
		i26 = i29
		__asm(jump, target("___gdtoa__XprivateX__BB12_110_B"))
	__asm(lbl("___gdtoa__XprivateX__BB12_116_F"))
		i24 = i26
		i25 = i28
		i2 = i29
		__asm(jump, target("___gdtoa__XprivateX__BB12_127_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_117_F"))
		i2 =  (0 - i13)
		__asm(push(i13!=0), iftrue, target("___gdtoa__XprivateX__BB12_119_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_118_F"))
		f0 =  (1)
		i2 =  (2)
		i24 = i10
		i25 = i9
		__asm(jump, target("___gdtoa__XprivateX__BB12_127_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_119_F"))
		i24 =  (___tens_D2A)
		i25 =  (i2 & 15)
		i25 =  (i25 << 3)
		__asm(push(i10), push((mstate.ebp+-56)), op(0x3c))
		__asm(push(i9), push((mstate.ebp+-52)), op(0x3c))
		i24 =  (i24 + i25)
		f0 =  ((__xasm<Number>(push(i24), op(0x39))))
		f1 =  ((__xasm<Number>(push((mstate.ebp+-56)), op(0x39))))
		f0 =  (f1 * f0)
		__asm(push(f0), push((mstate.ebp+-64)), op(0x3e))
		i24 =  ((__xasm<int>(push((mstate.ebp+-64)), op(0x37))))
		i25 =  ((__xasm<int>(push((mstate.ebp+-60)), op(0x37))))
		i26 =  (i2 >> 4)
		__asm(push(uint(i2)<uint(16)), iftrue, target("___gdtoa__XprivateX__BB12_433_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_120_F"))
		i2 =  (___bigtens_D2A)
		i27 =  (2)
		i28 =  (0)
		__asm(jump, target("___gdtoa__XprivateX__BB12_121_F"))
	__asm(jump, target("___gdtoa__XprivateX__BB12_121_F"), lbl("___gdtoa__XprivateX__BB12_121_B"), label, lbl("___gdtoa__XprivateX__BB12_121_F")); 
		i29 = i2
		i30 =  (i26 & 1)
		__asm(push(i30!=0), iftrue, target("___gdtoa__XprivateX__BB12_123_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_122_F"))
		__asm(jump, target("___gdtoa__XprivateX__BB12_124_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_123_F"))
		__asm(push(i24), push((mstate.ebp+-72)), op(0x3c))
		__asm(push(i25), push((mstate.ebp+-68)), op(0x3c))
		f0 =  ((__xasm<Number>(push(i29), op(0x39))))
		f1 =  ((__xasm<Number>(push((mstate.ebp+-72)), op(0x39))))
		f0 =  (f1 * f0)
		__asm(push(f0), push((mstate.ebp+-80)), op(0x3e))
		i24 =  ((__xasm<int>(push((mstate.ebp+-80)), op(0x37))))
		i25 =  ((__xasm<int>(push((mstate.ebp+-76)), op(0x37))))
		i27 =  (i27 + 1)
	__asm(lbl("___gdtoa__XprivateX__BB12_124_F"))
		i2 =  (i2 + 8)
		i28 =  (i28 + 1)
		i29 =  (i26 >> 1)
		__asm(push(uint(i26)<uint(2)), iftrue, target("___gdtoa__XprivateX__BB12_126_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_125_F"))
		i26 = i29
		__asm(jump, target("___gdtoa__XprivateX__BB12_121_B"))
	__asm(lbl("___gdtoa__XprivateX__BB12_126_F"))
		f0 =  (1)
		__asm(push(i28), push((mstate.ebp+-4)), op(0x3c))
		i2 = i27
	__asm(jump, target("___gdtoa__XprivateX__BB12_127_F"), lbl("___gdtoa__XprivateX__BB12_127_B"), label, lbl("___gdtoa__XprivateX__BB12_127_F")); 
		__asm(push(i14!=0), iftrue, target("___gdtoa__XprivateX__BB12_129_F"))
	__asm(jump, target("___gdtoa__XprivateX__BB12_128_F"), lbl("___gdtoa__XprivateX__BB12_128_B"), label, lbl("___gdtoa__XprivateX__BB12_128_F")); 
		i26 = i13
		i27 = i22
		__asm(jump, target("___gdtoa__XprivateX__BB12_133_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_129_F"))
		f1 =  (1)
		__asm(push(i24), push((mstate.ebp+-88)), op(0x3c))
		__asm(push(i25), push((mstate.ebp+-84)), op(0x3c))
		f2 =  ((__xasm<Number>(push((mstate.ebp+-88)), op(0x39))))
		__asm(push(f2>=f1), iftrue, target("___gdtoa__XprivateX__BB12_128_B"))
	__asm(lbl("___gdtoa__XprivateX__BB12_130_F"))
		__asm(push(i22<1), iftrue, target("___gdtoa__XprivateX__BB12_128_B"))
	__asm(lbl("___gdtoa__XprivateX__BB12_131_F"))
		__asm(push(i21<1), iftrue, target("___gdtoa__XprivateX__BB12_169_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_132_F"))
		f1 =  (f2 * 10)
		__asm(push(f1), push((mstate.ebp+-96)), op(0x3e))
		i24 =  ((__xasm<int>(push((mstate.ebp+-96)), op(0x37))))
		i25 =  ((__xasm<int>(push((mstate.ebp+-92)), op(0x37))))
		i2 =  (i2 + 1)
		i26 =  (i13 + -1)
		i27 = i21
	__asm(lbl("___gdtoa__XprivateX__BB12_133_F"))
		__asm(push(i24), push((mstate.ebp+-104)), op(0x3c))
		__asm(push(i25), push((mstate.ebp+-100)), op(0x3c))
		f1 =  ((__xasm<Number>(push((mstate.ebp+-104)), op(0x39))))
		f2 =  (Number(i2))
		f2 =  (f2 * f1)
		f2 =  (f2 + 7)
		__asm(push(f2), push((mstate.ebp+-112)), op(0x3e))
		i2 =  ((__xasm<int>(push((mstate.ebp+-108)), op(0x37))))
		i28 =  ((__xasm<int>(push((mstate.ebp+-112)), op(0x37))))
		i2 =  (i2 + -54525952)
		__asm(push(i27!=0), iftrue, target("___gdtoa__XprivateX__BB12_139_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_134_F"))
		__asm(push(i28), push((mstate.ebp+-120)), op(0x3c))
		__asm(push(i2), push((mstate.ebp+-116)), op(0x3c))
		f0 =  ((__xasm<Number>(push((mstate.ebp+-120)), op(0x39))))
		f1 =  (f1 + -5)
		__asm(push(f1<=f0), iftrue, target("___gdtoa__XprivateX__BB12_137_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_135_F"))
		i1 =  (0)
		i2 = i11
		i3 = i1
		i4 = i26
		__asm(jump, target("___gdtoa__XprivateX__BB12_136_F"))
	__asm(jump, target("___gdtoa__XprivateX__BB12_136_F"), lbl("___gdtoa__XprivateX__BB12_136_B"), label, lbl("___gdtoa__XprivateX__BB12_136_F")); 
		i11 = i4
		i13 =  (49)
		__asm(push(i13), push(i12), op(0x3a))
		i13 =  (32)
		i4 =  (0)
		i11 =  (i11 + 1)
		i24 =  (i12 + 1)
		__asm(jump, target("___gdtoa__XprivateX__BB12_409_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_137_F"))
		f0 =  -f0
		__asm(push(f1>=f0), iftrue, target("___gdtoa__XprivateX__BB12_169_F"))
	__asm(jump, target("___gdtoa__XprivateX__BB12_138_F"), lbl("___gdtoa__XprivateX__BB12_138_B"), label, lbl("___gdtoa__XprivateX__BB12_138_F")); 
		i1 =  (0)
		i2 = i11
		i3 = i1
		__asm(jump, target("___gdtoa__XprivateX__BB12_302_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_139_F"))
		__asm(push(i20==0), iftrue, target("___gdtoa__XprivateX__BB12_151_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_140_F"))
		i29 =  (___tens_D2A)
		i30 =  (i27 << 3)
		__asm(push(i28), push((mstate.ebp+-128)), op(0x3c))
		__asm(push(i2), push((mstate.ebp+-124)), op(0x3c))
		i2 =  (i30 + i29)
		f1 =  ((__xasm<Number>(push((i2+-8)), op(0x39))))
		f2 =  (f0 * 0.5)
		i2 =  (0)
		f3 =  ((__xasm<Number>(push((mstate.ebp+-128)), op(0x39))))
		f1 =  (f2 / f1)
		__asm(push(i2), push((mstate.ebp+-4)), op(0x3c))
		f1 =  (f1 - f3)
	__asm(jump, target("___gdtoa__XprivateX__BB12_141_F"), lbl("___gdtoa__XprivateX__BB12_141_B"), label, lbl("___gdtoa__XprivateX__BB12_141_F")); 
		__asm(push(i24), push((mstate.ebp+-136)), op(0x3c))
		__asm(push(i25), push((mstate.ebp+-132)), op(0x3c))
		f2 =  ((__xasm<Number>(push((mstate.ebp+-136)), op(0x39))))
		f3 =  (f2 / f0)
		i24 =  (int(f3))
		f3 =  (Number(i24))
		f3 =  (f3 * f0)
		i24 =  (i24 + 48)
		i25 =  (i23 + i2)
		__asm(push(i24), push(i25), op(0x3a))
		i24 =  (i2 + 1)
		f2 =  (f2 - f3)
		__asm(push(f2>=f1), iftrue, target("___gdtoa__XprivateX__BB12_148_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_142_F"))
		f1 =  (0)
		i2 =  (i12 + i24)
		__asm(push(f2!=f1), iftrue, target("___gdtoa__XprivateX__BB12_144_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_143_F"))
		i1 =  (0)
		i3 = i11
		i24 = i26
		__asm(jump, target("___gdtoa__XprivateX__BB12_420_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_144_F"))
		__asm(push(i11==0), iftrue, target("___gdtoa__XprivateX__BB12_146_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_145_F"))
		i1 =  (_freelist)
		i3 =  ((__xasm<int>(push((i11+4)), op(0x37))))
		i3 =  (i3 << 2)
		i1 =  (i1 + i3)
		i3 =  ((__xasm<int>(push(i1), op(0x37))))
		__asm(push(i3), push(i11), op(0x3c))
		__asm(push(i11), push(i1), op(0x3c))
	__asm(lbl("___gdtoa__XprivateX__BB12_146_F"))
		i1 =  (0)
		__asm(push(i1), push(i2), op(0x3a))
		i1 =  (i26 + 1)
		__asm(push(i1), push(i6), op(0x3c))
		__asm(push(i7==0), iftrue, target("___gdtoa__XprivateX__BB12_425_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_147_F"))
		i1 =  (16)
		__asm(jump, target("___gdtoa__XprivateX__BB12_424_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_148_F"))
		f3 =  (f0 - f2)
		__asm(push(f3<f1), iftrue, target("___gdtoa__XprivateX__BB12_184_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_149_F"))
		i24 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		i24 =  (i24 + 1)
		__asm(push(i24), push((mstate.ebp+-4)), op(0x3c))
		__asm(push(i24>=i27), iftrue, target("___gdtoa__XprivateX__BB12_169_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_150_F"))
		f2 =  (f2 * 10)
		__asm(push(f2), push((mstate.ebp+-144)), op(0x3e))
		i24 =  ((__xasm<int>(push((mstate.ebp+-144)), op(0x37))))
		i25 =  ((__xasm<int>(push((mstate.ebp+-140)), op(0x37))))
		i2 =  (i2 + 1)
		f1 =  (f1 * 10)
		__asm(jump, target("___gdtoa__XprivateX__BB12_141_B"))
	__asm(lbl("___gdtoa__XprivateX__BB12_151_F"))
		i29 =  (___tens_D2A)
		i30 =  (i27 << 3)
		__asm(push(i28), push((mstate.ebp+-152)), op(0x3c))
		__asm(push(i2), push((mstate.ebp+-148)), op(0x3c))
		i2 =  (i30 + i29)
		f1 =  (f1 / f0)
		f2 =  ((__xasm<Number>(push((i2+-8)), op(0x39))))
		f3 =  ((__xasm<Number>(push((mstate.ebp+-152)), op(0x39))))
		i2 =  (1)
		__asm(push(i2), push((mstate.ebp+-4)), op(0x3c))
		i2 =  (int(f1))
		f1 =  (f3 * f2)
		__asm(push(i2==0), iftrue, target("___gdtoa__XprivateX__BB12_153_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_152_F"))
		i28 = i12
		__asm(jump, target("___gdtoa__XprivateX__BB12_155_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_153_F"))
		i28 = i12
		__asm(jump, target("___gdtoa__XprivateX__BB12_156_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_154_B"), label)
		i2 =  (i28 + i2)
		i28 = i2
		i2 = i29
	__asm(lbl("___gdtoa__XprivateX__BB12_155_F"))
		__asm(push(i24), push((mstate.ebp+-160)), op(0x3c))
		__asm(push(i25), push((mstate.ebp+-156)), op(0x3c))
		f2 =  (Number(i2))
		f3 =  ((__xasm<Number>(push((mstate.ebp+-160)), op(0x39))))
		f2 =  (f2 * f0)
		f2 =  (f3 - f2)
		__asm(push(f2), push((mstate.ebp+-168)), op(0x3e))
		i24 =  ((__xasm<int>(push((mstate.ebp+-168)), op(0x37))))
		i25 =  ((__xasm<int>(push((mstate.ebp+-164)), op(0x37))))
	__asm(lbl("___gdtoa__XprivateX__BB12_156_F"))
		i29 =  (0)
		i30 = i28
		i31 = i29
	__asm(jump, target("___gdtoa__XprivateX__BB12_157_F"), lbl("___gdtoa__XprivateX__BB12_157_B"), label, lbl("___gdtoa__XprivateX__BB12_157_F")); 
		i29 = i31
		i2 =  (i2 + 48)
		i31 =  (i30 + i29)
		__asm(push(i2), push(i31), op(0x3a))
		i2 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		i31 =  (i29 + 1)
		__asm(push(i2!=i27), iftrue, target("___gdtoa__XprivateX__BB12_167_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_158_F"))
		__asm(push(i24), push((mstate.ebp+-176)), op(0x3c))
		__asm(push(i25), push((mstate.ebp+-172)), op(0x3c))
		f2 =  ((__xasm<Number>(push((mstate.ebp+-176)), op(0x39))))
		f0 =  (f0 * 0.5)
		i2 =  (i28 + i31)
		f3 =  (f1 + f0)
		__asm(push(f2<=f3), iftrue, target("___gdtoa__XprivateX__BB12_160_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_159_F"))
		i1 = i26
		__asm(jump, target("___gdtoa__XprivateX__BB12_185_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_160_F"))
		f0 =  (f0 - f1)
		__asm(push(f2>=f0), iftrue, target("___gdtoa__XprivateX__BB12_169_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_161_F"))
		i2 =  (0)
	__asm(jump, target("___gdtoa__XprivateX__BB12_162_F"), lbl("___gdtoa__XprivateX__BB12_162_B"), label, lbl("___gdtoa__XprivateX__BB12_162_F")); 
		i1 =  (i2 ^ -1)
		i1 =  (i31 + i1)
		i1 =  (i28 + i1)
		i1 =  ((__xasm<int>(push(i1), op(0x35))))
		i2 =  (i2 + 1)
		__asm(push(i1!=48), iftrue, target("___gdtoa__XprivateX__BB12_164_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_163_F"))
		__asm(jump, target("___gdtoa__XprivateX__BB12_162_B"))
	__asm(lbl("___gdtoa__XprivateX__BB12_164_F"))
		f0 =  (0)
		i2 =  (i2 + -1)
		i2 =  (i31 - i2)
		i2 =  (i28 + i2)
		__asm(push(f2!=f0), iftrue, target("___gdtoa__XprivateX__BB12_166_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_165_F"))
		i1 =  (0)
		i3 = i11
		i24 = i26
		__asm(jump, target("___gdtoa__XprivateX__BB12_420_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_166_F"))
		i1 =  (16)
		i3 = i11
		i24 = i26
		__asm(jump, target("___gdtoa__XprivateX__BB12_420_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_167_F"))
		__asm(push(i24), push((mstate.ebp+-184)), op(0x3c))
		__asm(push(i25), push((mstate.ebp+-180)), op(0x3c))
		f2 =  ((__xasm<Number>(push((mstate.ebp+-184)), op(0x39))))
		f2 =  (f2 * 10)
		__asm(push(f2), push((mstate.ebp+-192)), op(0x3e))
		f2 =  (f2 / f0)
		i2 =  (i2 + 1)
		__asm(push(i2), push((mstate.ebp+-4)), op(0x3c))
		i24 =  ((__xasm<int>(push((mstate.ebp+-192)), op(0x37))))
		i25 =  ((__xasm<int>(push((mstate.ebp+-188)), op(0x37))))
		i2 =  (i29 + 1)
		i29 =  (int(f2))
		__asm(push(i29!=0), iftrue, target("___gdtoa__XprivateX__BB12_154_B"))
	__asm(lbl("___gdtoa__XprivateX__BB12_168_F"))
		i31 = i2
		i2 = i29
		__asm(jump, target("___gdtoa__XprivateX__BB12_157_B"))
	__asm(lbl("___gdtoa__XprivateX__BB12_169_F"))
		__asm(push(i13>14), iftrue, target("___gdtoa__XprivateX__BB12_195_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_170_F"))
		__asm(push(i8<0), iftrue, target("___gdtoa__XprivateX__BB12_195_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_171_F"))
		i1 =  (___tens_D2A)
		i2 =  (i13 << 3)
		i1 =  (i1 + i2)
		f0 =  ((__xasm<Number>(push(i1), op(0x39))))
		__asm(push(i5>-1), iftrue, target("___gdtoa__XprivateX__BB12_176_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_172_F"))
		__asm(push(i22>0), iftrue, target("___gdtoa__XprivateX__BB12_176_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_173_F"))
		__asm(push(i22<0), iftrue, target("___gdtoa__XprivateX__BB12_138_B"))
	__asm(lbl("___gdtoa__XprivateX__BB12_174_F"))
		__asm(push(i10), push((mstate.ebp+-200)), op(0x3c))
		__asm(push(i9), push((mstate.ebp+-196)), op(0x3c))
		f1 =  ((__xasm<Number>(push((mstate.ebp+-200)), op(0x39))))
		f0 =  (f0 * 5)
		__asm(push(f1<=f0), iftrue, target("___gdtoa__XprivateX__BB12_138_B"))
	__asm(lbl("___gdtoa__XprivateX__BB12_175_F"))
		i1 =  (0)
		i2 = i11
		i3 = i1
		i4 = i13
		__asm(jump, target("___gdtoa__XprivateX__BB12_136_B"))
	__asm(lbl("___gdtoa__XprivateX__BB12_176_F"))
		i1 =  (1)
		__asm(push(i1), push((mstate.ebp+-4)), op(0x3c))
		i1 =  (0)
		i2 = i10
		i3 = i9
	__asm(jump, target("___gdtoa__XprivateX__BB12_177_F"), lbl("___gdtoa__XprivateX__BB12_177_B"), label, lbl("___gdtoa__XprivateX__BB12_177_F")); 
		f1 =  (0)
		__asm(push(i2), push((mstate.ebp+-208)), op(0x3c))
		__asm(push(i3), push((mstate.ebp+-204)), op(0x3c))
		f2 =  ((__xasm<Number>(push((mstate.ebp+-208)), op(0x39))))
		f3 =  (f2 / f0)
		i2 =  (int(f3))
		f3 =  (Number(i2))
		f3 =  (f3 * f0)
		i3 =  (i2 + 48)
		i4 =  (i23 + i1)
		__asm(push(i3), push(i4), op(0x3a))
		i3 =  (i1 + 1)
		f2 =  (f2 - f3)
		__asm(push(f2==f1), iftrue, target("___gdtoa__XprivateX__BB12_419_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_178_F"))
		i4 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		__asm(push(i4!=i22), iftrue, target("___gdtoa__XprivateX__BB12_194_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_179_F"))
		f2 =  (f2 + f2)
		i1 =  (i12 + i3)
		__asm(push(f2<=f0), iftrue, target("___gdtoa__XprivateX__BB12_181_F"))
	__asm(jump, target("___gdtoa__XprivateX__BB12_180_F"), lbl("___gdtoa__XprivateX__BB12_180_B"), label, lbl("___gdtoa__XprivateX__BB12_180_F")); 
		i2 = i1
		i1 = i13
		__asm(jump, target("___gdtoa__XprivateX__BB12_185_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_181_F"))
		__asm(push(f2==f0), iftrue, target("___gdtoa__XprivateX__BB12_183_F"))
	__asm(jump, target("___gdtoa__XprivateX__BB12_182_F"), lbl("___gdtoa__XprivateX__BB12_182_B"), label, lbl("___gdtoa__XprivateX__BB12_182_F")); 
		i4 =  (16)
		i3 = i11
		i2 = i1
		i24 = i13
		i1 = i4
		__asm(jump, target("___gdtoa__XprivateX__BB12_420_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_183_F"))
		i2 =  (i2 & 1)
		__asm(push(i2==0), iftrue, target("___gdtoa__XprivateX__BB12_182_B"))
		__asm(jump, target("___gdtoa__XprivateX__BB12_180_B"))
	__asm(lbl("___gdtoa__XprivateX__BB12_184_F"))
		i1 =  (i12 + i24)
		i2 = i1
		i1 = i26
	__asm(lbl("___gdtoa__XprivateX__BB12_185_F"))
		i3 =  ((__xasm<int>(push((i2+-1)), op(0x35))))
		i4 =  (i2 + -1)
		i5 = i2
		__asm(push(i3==57), iftrue, target("___gdtoa__XprivateX__BB12_187_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_186_F"))
		i3 = i4
		__asm(jump, target("___gdtoa__XprivateX__BB12_193_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_187_F"))
		i3 =  (0)
		i4 = i5
		i5 = i2
	__asm(jump, target("___gdtoa__XprivateX__BB12_188_F"), lbl("___gdtoa__XprivateX__BB12_188_B"), label, lbl("___gdtoa__XprivateX__BB12_188_F")); 
		i8 =  (i3 ^ -1)
		i8 =  (i2 + i8)
		__asm(push(i8!=i12), iftrue, target("___gdtoa__XprivateX__BB12_190_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_189_F"))
		i3 =  (48)
		__asm(push(i3), push(i8), op(0x3a))
		i1 =  (i1 + 1)
		i2 = i5
		i3 = i8
		__asm(jump, target("___gdtoa__XprivateX__BB12_193_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_190_F"))
		i5 =  ((__xasm<int>(push((i4+-2)), op(0x35))))
		i4 =  (i4 + -1)
		i3 =  (i3 + 1)
		__asm(push(i5!=57), iftrue, target("___gdtoa__XprivateX__BB12_192_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_191_F"))
		i5 = i8
		__asm(jump, target("___gdtoa__XprivateX__BB12_188_B"))
	__asm(lbl("___gdtoa__XprivateX__BB12_192_F"))
		i3 =  (i4 + -1)
		i2 = i8
	__asm(lbl("___gdtoa__XprivateX__BB12_193_F"))
		i4 =  (32)
		i5 =  ((__xasm<int>(push(i3), op(0x35))))
		i5 =  (i5 + 1)
		__asm(push(i5), push(i3), op(0x3a))
		i3 = i11
		i24 = i1
		i1 = i4
		__asm(jump, target("___gdtoa__XprivateX__BB12_420_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_194_F"))
		f1 =  (f2 * 10)
		__asm(push(f1), push((mstate.ebp+-216)), op(0x3e))
		i2 =  (i4 + 1)
		__asm(push(i2), push((mstate.ebp+-4)), op(0x3c))
		i2 =  ((__xasm<int>(push((mstate.ebp+-216)), op(0x37))))
		i3 =  ((__xasm<int>(push((mstate.ebp+-212)), op(0x37))))
		i1 =  (i1 + 1)
		__asm(jump, target("___gdtoa__XprivateX__BB12_177_B"))
	__asm(lbl("___gdtoa__XprivateX__BB12_195_F"))
		__asm(push(i20!=0), iftrue, target("___gdtoa__XprivateX__BB12_197_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_196_F"))
		i2 =  (0)
		i8 = i17
		i17 = i18
		i18 = i16
		i24 = i15
		__asm(jump, target("___gdtoa__XprivateX__BB12_223_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_197_F"))
		__asm(push(i19>1), iftrue, target("___gdtoa__XprivateX__BB12_209_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_198_F"))
		i2 =  (65 - i1)
		__asm(push(i2), push((mstate.ebp+-4)), op(0x3c))
		i24 =  (64 - i1)
		i24 =  (i8 - i24)
		__asm(push(i24<-16445), iftrue, target("___gdtoa__XprivateX__BB12_200_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_199_F"))
		i8 = i18
		i18 = i16
		i24 = i15
		__asm(jump, target("___gdtoa__XprivateX__BB12_217_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_200_F"))
		i2 =  (i8 + 16446)
		__asm(push(i2), push((mstate.ebp+-4)), op(0x3c))
		i24 =  ((__xasm<int>(push((_freelist+4)), op(0x37))))
		i8 =  (i2 + i17)
		i2 =  (i2 + i15)
		__asm(push(i24==0), iftrue, target("___gdtoa__XprivateX__BB12_202_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_201_F"))
		i17 =  ((__xasm<int>(push(i24), op(0x37))))
		__asm(push(i17), push((_freelist+4)), op(0x3c))
		__asm(jump, target("___gdtoa__XprivateX__BB12_205_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_202_F"))
		i24 =  (_private_mem)
		i17 =  ((__xasm<int>(push(_pmem_next), op(0x37))))
		i24 =  (i17 - i24)
		i24 =  (i24 >> 3)
		i24 =  (i24 + 4)
		__asm(push(uint(i24)>uint(288)), iftrue, target("___gdtoa__XprivateX__BB12_204_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_203_F"))
		i24 =  (1)
		i9 =  (i17 + 32)
		__asm(push(i9), push(_pmem_next), op(0x3c))
		__asm(push(i24), push((i17+4)), op(0x3c))
		i24 =  (2)
		__asm(push(i24), push((i17+8)), op(0x3c))
		i24 = i17
		__asm(jump, target("___gdtoa__XprivateX__BB12_205_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_204_F"))
		i24 =  (32)
		mstate.esp -= 4
		__asm(push(i24), push(mstate.esp), op(0x3c))
		state = 11
		mstate.esp -= 4;FSM_malloc.start()
		return
	__asm(lbl("___gdtoa_state11"))
		i24 = mstate.eax
		mstate.esp += 4
		i17 =  (1)
		__asm(push(i17), push((i24+4)), op(0x3c))
		i17 =  (2)
		__asm(push(i17), push((i24+8)), op(0x3c))
	__asm(lbl("___gdtoa__XprivateX__BB12_205_F"))
		i17 =  (0)
		__asm(push(i17), push((i24+12)), op(0x3c))
		i17 =  (1)
		__asm(push(i17), push((i24+20)), op(0x3c))
		__asm(push(i17), push((i24+16)), op(0x3c))
		__asm(push(i8<1), iftrue, target("___gdtoa__XprivateX__BB12_207_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_206_F"))
		__asm(push(i15>0), iftrue, target("___gdtoa__XprivateX__BB12_208_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_207_F"))
		i17 = i16
		__asm(jump, target("___gdtoa__XprivateX__BB12_228_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_208_F"))
		i17 = i16
		__asm(jump, target("___gdtoa__XprivateX__BB12_227_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_209_F"))
		i9 =  (i22 + -1)
		__asm(push(i16<i9), iftrue, target("___gdtoa__XprivateX__BB12_213_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_210_F"))
		__asm(push(i22), push((mstate.ebp+-4)), op(0x3c))
		i24 =  (i16 - i9)
		__asm(push(i22<0), iftrue, target("___gdtoa__XprivateX__BB12_212_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_211_F"))
		i2 = i22
		i8 = i18
		i18 = i24
		i24 = i15
		__asm(jump, target("___gdtoa__XprivateX__BB12_217_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_212_F"))
		i2 = i18
		i18 = i24
		__asm(jump, target("___gdtoa__XprivateX__BB12_216_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_213_F"))
		i2 =  (i9 - i16)
		__asm(push(i22), push((mstate.ebp+-4)), op(0x3c))
		i16 =  (i2 + i18)
		__asm(push(i22<0), iftrue, target("___gdtoa__XprivateX__BB12_215_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_214_F"))
		i18 =  (0)
		i2 = i22
		i8 = i16
		i24 = i15
		i16 = i9
		__asm(jump, target("___gdtoa__XprivateX__BB12_217_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_215_F"))
		i18 =  (0)
		i2 = i16
		i16 = i9
	__asm(lbl("___gdtoa__XprivateX__BB12_216_F"))
		i24 = i2
		i2 =  (0)
		__asm(push(i2), push((mstate.ebp+-4)), op(0x3c))
		i9 =  (i15 - i22)
		i8 = i24
		i24 = i9
	__asm(lbl("___gdtoa__XprivateX__BB12_217_F"))
		i9 = i8
		i8 =  ((__xasm<int>(push((_freelist+4)), op(0x37))))
		i17 =  (i2 + i17)
		i15 =  (i2 + i15)
		__asm(push(i8==0), iftrue, target("___gdtoa__XprivateX__BB12_219_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_218_F"))
		i2 =  ((__xasm<int>(push(i8), op(0x37))))
		__asm(push(i2), push((_freelist+4)), op(0x3c))
		i2 = i8
		__asm(jump, target("___gdtoa__XprivateX__BB12_222_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_219_F"))
		i2 =  (_private_mem)
		i8 =  ((__xasm<int>(push(_pmem_next), op(0x37))))
		i2 =  (i8 - i2)
		i2 =  (i2 >> 3)
		i2 =  (i2 + 4)
		__asm(push(uint(i2)>uint(288)), iftrue, target("___gdtoa__XprivateX__BB12_221_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_220_F"))
		i2 =  (1)
		i10 =  (i8 + 32)
		__asm(push(i10), push(_pmem_next), op(0x3c))
		__asm(push(i2), push((i8+4)), op(0x3c))
		i2 =  (2)
		__asm(push(i2), push((i8+8)), op(0x3c))
		i2 = i8
		__asm(jump, target("___gdtoa__XprivateX__BB12_222_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_221_F"))
		i2 =  (32)
		mstate.esp -= 4
		__asm(push(i2), push(mstate.esp), op(0x3c))
		state = 12
		mstate.esp -= 4;FSM_malloc.start()
		return
	__asm(lbl("___gdtoa_state12"))
		i2 = mstate.eax
		mstate.esp += 4
		i8 =  (1)
		__asm(push(i8), push((i2+4)), op(0x3c))
		i8 =  (2)
		__asm(push(i8), push((i2+8)), op(0x3c))
	__asm(lbl("___gdtoa__XprivateX__BB12_222_F"))
		i8 =  (0)
		__asm(push(i8), push((i2+12)), op(0x3c))
		i8 =  (1)
		__asm(push(i8), push((i2+20)), op(0x3c))
		__asm(push(i8), push((i2+16)), op(0x3c))
		i8 = i17
		i17 = i9
	__asm(lbl("___gdtoa__XprivateX__BB12_223_F"))
		i9 = i18
		i10 = i24
		i25 = i15
		__asm(push(i10<1), iftrue, target("___gdtoa__XprivateX__BB12_225_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_224_F"))
		__asm(push(i8>0), iftrue, target("___gdtoa__XprivateX__BB12_226_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_225_F"))
		i18 = i17
		i17 = i9
		i24 = i2
		i15 = i10
		i2 = i25
		__asm(jump, target("___gdtoa__XprivateX__BB12_228_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_226_F"))
		i18 = i17
		i17 = i9
		i15 = i10
		i24 = i2
		i2 = i25
	__asm(lbl("___gdtoa__XprivateX__BB12_227_F"))
		i9 =  ((i8<=i15) ? i8 : i15)
		__asm(push(i9), push((mstate.ebp+-4)), op(0x3c))
		i8 =  (i8 - i9)
		i15 =  (i15 - i9)
		i2 =  (i2 - i9)
	__asm(lbl("___gdtoa__XprivateX__BB12_228_F"))
		i9 = i18
		i10 = i17
		__asm(push(i16>0), iftrue, target("___gdtoa__XprivateX__BB12_230_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_229_F"))
		i10 = i11
		__asm(jump, target("___gdtoa__XprivateX__BB12_247_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_230_F"))
		__asm(push(i20==0), iftrue, target("___gdtoa__XprivateX__BB12_246_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_231_F"))
		__asm(push(i10>0), iftrue, target("___gdtoa__XprivateX__BB12_233_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_232_F"))
		__asm(jump, target("___gdtoa__XprivateX__BB12_236_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_233_F"))
		mstate.esp -= 8
		__asm(push(i24), push(mstate.esp), op(0x3c))
		__asm(push(i10), push((mstate.esp+4)), op(0x3c))
		state = 13
		mstate.esp -= 4;FSM___pow5mult_D2A.start()
		return
	__asm(lbl("___gdtoa_state13"))
		i24 = mstate.eax
		mstate.esp += 8
		mstate.esp -= 8
		__asm(push(i24), push(mstate.esp), op(0x3c))
		__asm(push(i11), push((mstate.esp+4)), op(0x3c))
		state = 14
		mstate.esp -= 4;FSM___mult_D2A.start()
		return
	__asm(lbl("___gdtoa_state14"))
		i17 = mstate.eax
		mstate.esp += 8
		__asm(push(i11!=0), iftrue, target("___gdtoa__XprivateX__BB12_235_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_234_F"))
		i11 = i17
		__asm(jump, target("___gdtoa__XprivateX__BB12_236_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_235_F"))
		i18 =  (_freelist)
		i25 =  ((__xasm<int>(push((i11+4)), op(0x37))))
		i25 =  (i25 << 2)
		i18 =  (i18 + i25)
		i25 =  ((__xasm<int>(push(i18), op(0x37))))
		__asm(push(i25), push(i11), op(0x3c))
		__asm(push(i11), push(i18), op(0x3c))
		i11 = i17
	__asm(lbl("___gdtoa__XprivateX__BB12_236_F"))
		__asm(push(i16!=i10), iftrue, target("___gdtoa__XprivateX__BB12_238_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_237_F"))
		i10 = i11
		__asm(jump, target("___gdtoa__XprivateX__BB12_247_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_238_F"))
		mstate.esp -= 8
		i10 =  (i16 - i10)
		__asm(push(i11), push(mstate.esp), op(0x3c))
		__asm(push(i10), push((mstate.esp+4)), op(0x3c))
		state = 15
		mstate.esp -= 4;FSM___pow5mult_D2A.start()
		return
	__asm(lbl("___gdtoa_state15"))
		i10 = mstate.eax
		mstate.esp += 8
		i11 =  ((__xasm<int>(push((_freelist+4)), op(0x37))))
		__asm(push(i11==0), iftrue, target("___gdtoa__XprivateX__BB12_240_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_239_F"))
		i16 =  ((__xasm<int>(push(i11), op(0x37))))
		__asm(push(i16), push((_freelist+4)), op(0x3c))
		__asm(jump, target("___gdtoa__XprivateX__BB12_243_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_240_F"))
		i11 =  (_private_mem)
		i16 =  ((__xasm<int>(push(_pmem_next), op(0x37))))
		i11 =  (i16 - i11)
		i11 =  (i11 >> 3)
		i11 =  (i11 + 4)
		__asm(push(uint(i11)>uint(288)), iftrue, target("___gdtoa__XprivateX__BB12_242_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_241_F"))
		i11 =  (1)
		i17 =  (i16 + 32)
		__asm(push(i17), push(_pmem_next), op(0x3c))
		__asm(push(i11), push((i16+4)), op(0x3c))
		i11 =  (2)
		__asm(push(i11), push((i16+8)), op(0x3c))
		i11 = i16
		__asm(jump, target("___gdtoa__XprivateX__BB12_243_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_242_F"))
		i11 =  (32)
		mstate.esp -= 4
		__asm(push(i11), push(mstate.esp), op(0x3c))
		state = 16
		mstate.esp -= 4;FSM_malloc.start()
		return
	__asm(lbl("___gdtoa_state16"))
		i11 = mstate.eax
		mstate.esp += 4
		i16 =  (1)
		__asm(push(i16), push((i11+4)), op(0x3c))
		i16 =  (2)
		__asm(push(i16), push((i11+8)), op(0x3c))
	__asm(lbl("___gdtoa__XprivateX__BB12_243_F"))
		i16 =  (0)
		__asm(push(i16), push((i11+12)), op(0x3c))
		i16 =  (1)
		__asm(push(i16), push((i11+20)), op(0x3c))
		__asm(push(i16), push((i11+16)), op(0x3c))
		__asm(push(i9>0), iftrue, target("___gdtoa__XprivateX__BB12_245_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_244_F"))
		__asm(jump, target("___gdtoa__XprivateX__BB12_256_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_245_F"))
		__asm(jump, target("___gdtoa__XprivateX__BB12_255_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_246_F"))
		mstate.esp -= 8
		__asm(push(i11), push(mstate.esp), op(0x3c))
		__asm(push(i16), push((mstate.esp+4)), op(0x3c))
		state = 17
		mstate.esp -= 4;FSM___pow5mult_D2A.start()
		return
	__asm(lbl("___gdtoa_state17"))
		i10 = mstate.eax
		mstate.esp += 8
	__asm(lbl("___gdtoa__XprivateX__BB12_247_F"))
		i11 = i10
		i10 =  ((__xasm<int>(push((_freelist+4)), op(0x37))))
		__asm(push(i10==0), iftrue, target("___gdtoa__XprivateX__BB12_249_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_248_F"))
		i16 =  ((__xasm<int>(push(i10), op(0x37))))
		__asm(push(i16), push((_freelist+4)), op(0x3c))
		__asm(jump, target("___gdtoa__XprivateX__BB12_252_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_249_F"))
		i10 =  (_private_mem)
		i16 =  ((__xasm<int>(push(_pmem_next), op(0x37))))
		i10 =  (i16 - i10)
		i10 =  (i10 >> 3)
		i10 =  (i10 + 4)
		__asm(push(uint(i10)>uint(288)), iftrue, target("___gdtoa__XprivateX__BB12_251_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_250_F"))
		i10 =  (1)
		i17 =  (i16 + 32)
		__asm(push(i17), push(_pmem_next), op(0x3c))
		__asm(push(i10), push((i16+4)), op(0x3c))
		i10 =  (2)
		__asm(push(i10), push((i16+8)), op(0x3c))
		i10 = i16
		__asm(jump, target("___gdtoa__XprivateX__BB12_252_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_251_F"))
		i10 =  (32)
		mstate.esp -= 4
		__asm(push(i10), push(mstate.esp), op(0x3c))
		state = 18
		mstate.esp -= 4;FSM_malloc.start()
		return
	__asm(lbl("___gdtoa_state18"))
		i10 = mstate.eax
		mstate.esp += 4
		i16 =  (1)
		__asm(push(i16), push((i10+4)), op(0x3c))
		i16 =  (2)
		__asm(push(i16), push((i10+8)), op(0x3c))
	__asm(lbl("___gdtoa__XprivateX__BB12_252_F"))
		i16 = i10
		i10 =  (0)
		__asm(push(i10), push((i16+12)), op(0x3c))
		i10 =  (1)
		__asm(push(i10), push((i16+20)), op(0x3c))
		__asm(push(i10), push((i16+16)), op(0x3c))
		__asm(push(i9>0), iftrue, target("___gdtoa__XprivateX__BB12_254_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_253_F"))
		i10 = i11
		i11 = i16
		__asm(jump, target("___gdtoa__XprivateX__BB12_256_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_254_F"))
		i10 = i11
		i11 = i16
	__asm(lbl("___gdtoa__XprivateX__BB12_255_F"))
		mstate.esp -= 8
		__asm(push(i11), push(mstate.esp), op(0x3c))
		__asm(push(i9), push((mstate.esp+4)), op(0x3c))
		state = 19
		mstate.esp -= 4;FSM___pow5mult_D2A.start()
		return
	__asm(lbl("___gdtoa_state19"))
		i11 = mstate.eax
		mstate.esp += 8
	__asm(lbl("___gdtoa__XprivateX__BB12_256_F"))
		i16 =  ((i19<2) ? 1 : 0)
		i1 =  ((i1==1) ? 1 : 0)
		i1 =  (i1 & i16)
		i3 =  ((i3>-16444) ? 1 : 0)
		i1 =  (i1 & i3)
		i3 =  (i1 & 1)
		i2 =  (i2 + i3)
		i3 =  (i8 + i3)
		__asm(push(i9!=0), iftrue, target("___gdtoa__XprivateX__BB12_258_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_257_F"))
		i8 =  (1)
		__asm(jump, target("___gdtoa__XprivateX__BB12_262_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_258_F"))
		i8 =  ((__xasm<int>(push((i11+16)), op(0x37))))
		i8 =  (i8 << 2)
		i8 =  (i8 + i11)
		i8 =  ((__xasm<int>(push((i8+16)), op(0x37))))
		i9 =  ((uint(i8)<uint(65536)) ? 16 : 0)
		i8 =  (i8 << i9)
		i16 =  ((uint(i8)<uint(16777216)) ? 8 : 0)
		i8 =  (i8 << i16)
		i17 =  ((uint(i8)<uint(268435456)) ? 4 : 0)
		i9 =  (i16 | i9)
		i8 =  (i8 << i17)
		i16 =  ((uint(i8)<uint(1073741824)) ? 2 : 0)
		i9 =  (i9 | i17)
		i9 =  (i9 | i16)
		i8 =  (i8 << i16)
		__asm(push(i8>-1), iftrue, target("___gdtoa__XprivateX__BB12_260_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_259_F"))
		i8 = i9
		__asm(jump, target("___gdtoa__XprivateX__BB12_261_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_260_F"))
		i8 =  (i8 & 1073741824)
		i9 =  (i9 + 1)
		i8 =  ((i8==0) ? 32 : i9)
	__asm(lbl("___gdtoa__XprivateX__BB12_261_F"))
		i8 =  (32 - i8)
	__asm(lbl("___gdtoa__XprivateX__BB12_262_F"))
		i8 =  (i8 + i3)
		i8 =  (i8 & 31)
		i9 =  (32 - i8)
		i8 =  ((i8==0) ? i8 : i9)
		__asm(push(i8), push((mstate.ebp+-4)), op(0x3c))
		__asm(push(i8<5), iftrue, target("___gdtoa__XprivateX__BB12_267_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_263_F"))
		i8 =  (i8 + -4)
		__asm(push(i8), push((mstate.ebp+-4)), op(0x3c))
		i3 =  (i8 + i3)
		i15 =  (i8 + i15)
		i2 =  (i8 + i2)
		__asm(push(i2>0), iftrue, target("___gdtoa__XprivateX__BB12_265_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_264_F"))
		i2 = i3
		i3 = i15
		i15 = i10
		__asm(jump, target("___gdtoa__XprivateX__BB12_272_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_265_F"))
		__asm(jump, target("___gdtoa__XprivateX__BB12_266_F"))
	__asm(jump, target("___gdtoa__XprivateX__BB12_266_F"), lbl("___gdtoa__XprivateX__BB12_266_B"), label, lbl("___gdtoa__XprivateX__BB12_266_F")); 
		mstate.esp -= 8
		__asm(push(i10), push(mstate.esp), op(0x3c))
		__asm(push(i2), push((mstate.esp+4)), op(0x3c))
		state = 20
		mstate.esp -= 4;FSM___lshift_D2A.start()
		return
	__asm(lbl("___gdtoa_state20"))
		i8 = mstate.eax
		mstate.esp += 8
		i2 = i3
		i3 = i15
		i15 = i8
		__asm(jump, target("___gdtoa__XprivateX__BB12_272_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_267_F"))
		__asm(push(i8<4), iftrue, target("___gdtoa__XprivateX__BB12_269_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_268_F"))
		__asm(jump, target("___gdtoa__XprivateX__BB12_270_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_269_F"))
		i8 =  (i8 + 28)
		__asm(push(i8), push((mstate.ebp+-4)), op(0x3c))
		i3 =  (i8 + i3)
		i15 =  (i8 + i15)
		i2 =  (i8 + i2)
	__asm(lbl("___gdtoa__XprivateX__BB12_270_F"))
		__asm(push(i2>0), iftrue, target("___gdtoa__XprivateX__BB12_266_B"))
	__asm(lbl("___gdtoa__XprivateX__BB12_271_F"))
		i2 = i3
		i3 = i15
		i15 = i10
		__asm(jump, target("___gdtoa__XprivateX__BB12_272_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_272_F"))
		i8 = i15
		__asm(push(i2>0), iftrue, target("___gdtoa__XprivateX__BB12_274_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_273_F"))
		i2 = i11
		__asm(jump, target("___gdtoa__XprivateX__BB12_275_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_274_F"))
		mstate.esp -= 8
		__asm(push(i11), push(mstate.esp), op(0x3c))
		__asm(push(i2), push((mstate.esp+4)), op(0x3c))
		state = 21
		mstate.esp -= 4;FSM___lshift_D2A.start()
		return
	__asm(lbl("___gdtoa_state21"))
		i2 = mstate.eax
		mstate.esp += 8
	__asm(lbl("___gdtoa__XprivateX__BB12_275_F"))
		i11 = i2
		__asm(push(i14!=0), iftrue, target("___gdtoa__XprivateX__BB12_277_F"))
	__asm(jump, target("___gdtoa__XprivateX__BB12_276_F"), lbl("___gdtoa__XprivateX__BB12_276_B"), label, lbl("___gdtoa__XprivateX__BB12_276_F")); 
		i2 = i8
		i8 = i13
		i13 = i22
		__asm(jump, target("___gdtoa__XprivateX__BB12_288_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_277_F"))
		i2 =  ((__xasm<int>(push((i8+16)), op(0x37))))
		i9 =  ((__xasm<int>(push((i11+16)), op(0x37))))
		i10 =  (i2 - i9)
		__asm(push(i2==i9), iftrue, target("___gdtoa__XprivateX__BB12_279_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_278_F"))
		i2 = i10
		__asm(jump, target("___gdtoa__XprivateX__BB12_284_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_279_F"))
		i2 =  (0)
	__asm(jump, target("___gdtoa__XprivateX__BB12_280_F"), lbl("___gdtoa__XprivateX__BB12_280_B"), label, lbl("___gdtoa__XprivateX__BB12_280_F")); 
		i10 =  (i2 ^ -1)
		i10 =  (i9 + i10)
		i14 =  (i10 << 2)
		i15 =  (i8 + i14)
		i14 =  (i11 + i14)
		i15 =  ((__xasm<int>(push((i15+20)), op(0x37))))
		i14 =  ((__xasm<int>(push((i14+20)), op(0x37))))
		__asm(push(i15==i14), iftrue, target("___gdtoa__XprivateX__BB12_282_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_281_F"))
		i2 =  ((uint(i15)<uint(i14)) ? -1 : 1)
		__asm(jump, target("___gdtoa__XprivateX__BB12_284_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_282_F"))
		i2 =  (i2 + 1)
		__asm(push(i10>0), iftrue, target("___gdtoa__XprivateX__BB12_434_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_283_F"))
		i2 =  (0)
		__asm(jump, target("___gdtoa__XprivateX__BB12_284_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_284_F"))
		__asm(push(i2>-1), iftrue, target("___gdtoa__XprivateX__BB12_276_B"))
	__asm(lbl("___gdtoa__XprivateX__BB12_285_F"))
		i2 =  (10)
		mstate.esp -= 12
		i9 =  (0)
		__asm(push(i8), push(mstate.esp), op(0x3c))
		__asm(push(i2), push((mstate.esp+4)), op(0x3c))
		__asm(push(i9), push((mstate.esp+8)), op(0x3c))
		state = 22
		mstate.esp -= 4;FSM___multadd_D2A.start()
		return
	__asm(lbl("___gdtoa_state22"))
		i2 = mstate.eax
		mstate.esp += 12
		i13 =  (i13 + -1)
		__asm(push(i20!=0), iftrue, target("___gdtoa__XprivateX__BB12_287_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_286_F"))
		i8 = i13
		i13 = i21
		__asm(jump, target("___gdtoa__XprivateX__BB12_288_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_287_F"))
		i8 =  (0)
		mstate.esp -= 12
		i9 =  (10)
		__asm(push(i24), push(mstate.esp), op(0x3c))
		__asm(push(i9), push((mstate.esp+4)), op(0x3c))
		__asm(push(i8), push((mstate.esp+8)), op(0x3c))
		state = 23
		mstate.esp -= 4;FSM___multadd_D2A.start()
		return
	__asm(lbl("___gdtoa_state23"))
		i24 = mstate.eax
		mstate.esp += 12
		i8 = i13
		i13 = i21
	__asm(lbl("___gdtoa__XprivateX__BB12_288_F"))
		__asm(push(i13>0), iftrue, target("___gdtoa__XprivateX__BB12_307_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_289_F"))
		__asm(push(i19<3), iftrue, target("___gdtoa__XprivateX__BB12_307_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_290_F"))
		__asm(push(i13>-1), iftrue, target("___gdtoa__XprivateX__BB12_292_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_291_F"))
		i3 = i24
		i1 = i11
		__asm(jump, target("___gdtoa__XprivateX__BB12_302_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_292_F"))
		i1 =  (0)
		mstate.esp -= 12
		i3 =  (5)
		__asm(push(i11), push(mstate.esp), op(0x3c))
		__asm(push(i3), push((mstate.esp+4)), op(0x3c))
		__asm(push(i1), push((mstate.esp+8)), op(0x3c))
		state = 24
		mstate.esp -= 4;FSM___multadd_D2A.start()
		return
	__asm(lbl("___gdtoa_state24"))
		i1 = mstate.eax
		mstate.esp += 12
		i3 =  ((__xasm<int>(push((i2+16)), op(0x37))))
		i4 =  ((__xasm<int>(push((i1+16)), op(0x37))))
		i11 =  (i3 - i4)
		__asm(push(i3==i4), iftrue, target("___gdtoa__XprivateX__BB12_294_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_293_F"))
		i3 = i11
		__asm(jump, target("___gdtoa__XprivateX__BB12_299_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_294_F"))
		i3 =  (0)
	__asm(jump, target("___gdtoa__XprivateX__BB12_295_F"), lbl("___gdtoa__XprivateX__BB12_295_B"), label, lbl("___gdtoa__XprivateX__BB12_295_F")); 
		i11 =  (i3 ^ -1)
		i11 =  (i4 + i11)
		i13 =  (i11 << 2)
		i19 =  (i2 + i13)
		i13 =  (i1 + i13)
		i19 =  ((__xasm<int>(push((i19+20)), op(0x37))))
		i13 =  ((__xasm<int>(push((i13+20)), op(0x37))))
		__asm(push(i19==i13), iftrue, target("___gdtoa__XprivateX__BB12_297_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_296_F"))
		i3 =  ((uint(i19)<uint(i13)) ? -1 : 1)
		__asm(jump, target("___gdtoa__XprivateX__BB12_299_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_297_F"))
		i3 =  (i3 + 1)
		__asm(push(i11>0), iftrue, target("___gdtoa__XprivateX__BB12_435_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_298_F"))
		i3 =  (0)
		__asm(jump, target("___gdtoa__XprivateX__BB12_299_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_299_F"))
		__asm(push(i3<1), iftrue, target("___gdtoa__XprivateX__BB12_301_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_300_F"))
		i3 = i24
		i4 = i8
		__asm(jump, target("___gdtoa__XprivateX__BB12_136_B"))
	__asm(lbl("___gdtoa__XprivateX__BB12_301_F"))
		i3 = i24
	__asm(lbl("___gdtoa__XprivateX__BB12_302_F"))
		i4 =  (i5 ^ -1)
		__asm(push(i1==0), iftrue, target("___gdtoa__XprivateX__BB12_304_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_303_F"))
		i11 =  (_freelist)
		i13 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		i13 =  (i13 << 2)
		i11 =  (i11 + i13)
		i13 =  ((__xasm<int>(push(i11), op(0x37))))
		__asm(push(i13), push(i1), op(0x3c))
		__asm(push(i1), push(i11), op(0x3c))
	__asm(lbl("___gdtoa__XprivateX__BB12_304_F"))
		__asm(push(i3==0), iftrue, target("___gdtoa__XprivateX__BB12_306_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_305_F"))
		i1 =  (16)
		i11 =  (0)
		i13 = i12
		__asm(jump, target("___gdtoa__XprivateX__BB12_413_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_306_F"))
		i1 =  (16)
		i3 = i2
		i2 = i12
		i24 = i4
		__asm(jump, target("___gdtoa__XprivateX__BB12_420_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_307_F"))
		__asm(push(i20!=0), iftrue, target("___gdtoa__XprivateX__BB12_310_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_308_F"))
		i1 =  (1)
		__asm(push(i1), push((mstate.ebp+-4)), op(0x3c))
		mstate.esp -= 8
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i11), push((mstate.esp+4)), op(0x3c))
		mstate.esp -= 4;FSM___quorem_D2A.start()
	__asm(lbl("___gdtoa_state25"))
		i1 = mstate.eax
		mstate.esp += 8
		i1 =  (i1 + 48)
		__asm(push(i1), push(i12), op(0x3a))
		i3 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		i4 =  (i12 + 1)
		__asm(push(i3<i13), iftrue, target("___gdtoa__XprivateX__BB12_381_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_309_F"))
		i3 =  (0)
		i13 = i4
		i4 = i24
		__asm(jump, target("___gdtoa__XprivateX__BB12_386_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_310_F"))
		__asm(push(i3>0), iftrue, target("___gdtoa__XprivateX__BB12_312_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_311_F"))
		i3 = i24
		__asm(jump, target("___gdtoa__XprivateX__BB12_313_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_312_F"))
		mstate.esp -= 8
		__asm(push(i24), push(mstate.esp), op(0x3c))
		__asm(push(i3), push((mstate.esp+4)), op(0x3c))
		state = 26
		mstate.esp -= 4;FSM___lshift_D2A.start()
		return
	__asm(lbl("___gdtoa_state26"))
		i3 = mstate.eax
		mstate.esp += 8
	__asm(lbl("___gdtoa__XprivateX__BB12_313_F"))
		i1 =  (i1 & 1)
		__asm(push(i1!=0), iftrue, target("___gdtoa__XprivateX__BB12_315_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_314_F"))
		i1 = i3
		__asm(jump, target("___gdtoa__XprivateX__BB12_316_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_315_F"))
		i1 =  (1)
		i24 =  ((__xasm<int>(push((i3+4)), op(0x37))))
		mstate.esp -= 4
		__asm(push(i24), push(mstate.esp), op(0x3c))
		state = 27
		mstate.esp -= 4;FSM___Balloc_D2A.start()
		return
	__asm(lbl("___gdtoa_state27"))
		i24 = mstate.eax
		mstate.esp += 4
		i5 =  ((__xasm<int>(push((i3+16)), op(0x37))))
		i9 =  (i24 + 12)
		i5 =  (i5 << 2)
		i10 =  (i3 + 12)
		i5 =  (i5 + 8)
		memcpy(i9, i10, i5)
		mstate.esp -= 8
		__asm(push(i24), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 28
		mstate.esp -= 4;FSM___lshift_D2A.start()
		return
	__asm(lbl("___gdtoa_state28"))
		i1 = mstate.eax
		mstate.esp += 8
	__asm(lbl("___gdtoa__XprivateX__BB12_316_F"))
		i24 =  (1)
		i5 =  (0)
	__asm(jump, target("___gdtoa__XprivateX__BB12_317_F"), lbl("___gdtoa__XprivateX__BB12_317_B"), label, lbl("___gdtoa__XprivateX__BB12_317_F")); 
		i9 = i1
		__asm(push(i24), push((mstate.ebp+-4)), op(0x3c))
		mstate.esp -= 8
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i11), push((mstate.esp+4)), op(0x3c))
		mstate.esp -= 4;FSM___quorem_D2A.start()
	__asm(lbl("___gdtoa_state29"))
		i1 = mstate.eax
		mstate.esp += 8
		i24 =  ((__xasm<int>(push((i2+16)), op(0x37))))
		i10 =  ((__xasm<int>(push((i3+16)), op(0x37))))
		i14 =  (i24 - i10)
		i15 =  (i2 + 16)
		i16 =  (i1 + 48)
		i17 =  (i23 + i5)
		__asm(push(i24==i10), iftrue, target("___gdtoa__XprivateX__BB12_319_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_318_F"))
		i24 = i14
		__asm(jump, target("___gdtoa__XprivateX__BB12_324_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_319_F"))
		i24 =  (0)
	__asm(jump, target("___gdtoa__XprivateX__BB12_320_F"), lbl("___gdtoa__XprivateX__BB12_320_B"), label, lbl("___gdtoa__XprivateX__BB12_320_F")); 
		i14 =  (i24 ^ -1)
		i14 =  (i10 + i14)
		i18 =  (i14 << 2)
		i20 =  (i2 + i18)
		i18 =  (i3 + i18)
		i20 =  ((__xasm<int>(push((i20+20)), op(0x37))))
		i18 =  ((__xasm<int>(push((i18+20)), op(0x37))))
		__asm(push(i20==i18), iftrue, target("___gdtoa__XprivateX__BB12_322_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_321_F"))
		i24 =  ((uint(i20)<uint(i18)) ? -1 : 1)
		__asm(jump, target("___gdtoa__XprivateX__BB12_324_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_322_F"))
		i24 =  (i24 + 1)
		__asm(push(i14>0), iftrue, target("___gdtoa__XprivateX__BB12_436_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_323_F"))
		i24 =  (0)
		__asm(jump, target("___gdtoa__XprivateX__BB12_324_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_324_F"))
		mstate.esp -= 8
		__asm(push(i11), push(mstate.esp), op(0x3c))
		__asm(push(i9), push((mstate.esp+4)), op(0x3c))
		state = 30
		mstate.esp -= 4;FSM___diff_D2A.start()
		return
	__asm(lbl("___gdtoa_state30"))
		i10 = mstate.eax
		mstate.esp += 8
		i14 =  ((__xasm<int>(push((i10+12)), op(0x37))))
		__asm(push(i14==0), iftrue, target("___gdtoa__XprivateX__BB12_326_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_325_F"))
		i14 =  (1)
		__asm(jump, target("___gdtoa__XprivateX__BB12_333_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_326_F"))
		i14 =  ((__xasm<int>(push(i15), op(0x37))))
		i18 =  ((__xasm<int>(push((i10+16)), op(0x37))))
		i20 =  (i14 - i18)
		__asm(push(i14==i18), iftrue, target("___gdtoa__XprivateX__BB12_328_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_327_F"))
		i14 = i20
		__asm(jump, target("___gdtoa__XprivateX__BB12_333_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_328_F"))
		i14 =  (0)
	__asm(jump, target("___gdtoa__XprivateX__BB12_329_F"), lbl("___gdtoa__XprivateX__BB12_329_B"), label, lbl("___gdtoa__XprivateX__BB12_329_F")); 
		i20 =  (i14 ^ -1)
		i20 =  (i18 + i20)
		i21 =  (i20 << 2)
		i22 =  (i2 + i21)
		i21 =  (i10 + i21)
		i22 =  ((__xasm<int>(push((i22+20)), op(0x37))))
		i21 =  ((__xasm<int>(push((i21+20)), op(0x37))))
		__asm(push(i22==i21), iftrue, target("___gdtoa__XprivateX__BB12_331_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_330_F"))
		i14 =  ((uint(i22)<uint(i21)) ? -1 : 1)
		__asm(jump, target("___gdtoa__XprivateX__BB12_333_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_331_F"))
		i14 =  (i14 + 1)
		__asm(push(i20>0), iftrue, target("___gdtoa__XprivateX__BB12_437_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_332_F"))
		i14 =  (0)
		__asm(jump, target("___gdtoa__XprivateX__BB12_333_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_333_F"))
		__asm(push(i10==0), iftrue, target("___gdtoa__XprivateX__BB12_335_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_334_F"))
		i18 =  (_freelist)
		i20 =  ((__xasm<int>(push((i10+4)), op(0x37))))
		i20 =  (i20 << 2)
		i18 =  (i18 + i20)
		i20 =  ((__xasm<int>(push(i18), op(0x37))))
		__asm(push(i20), push(i10), op(0x3c))
		__asm(push(i10), push(i18), op(0x3c))
	__asm(lbl("___gdtoa__XprivateX__BB12_335_F"))
		__asm(push(i14!=0), iftrue, target("___gdtoa__XprivateX__BB12_346_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_336_F"))
		__asm(push(i19!=0), iftrue, target("___gdtoa__XprivateX__BB12_346_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_337_F"))
		i10 =  ((__xasm<int>(push(i4), op(0x37))))
		i10 =  (i10 & 1)
		__asm(push(i10!=0), iftrue, target("___gdtoa__XprivateX__BB12_346_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_338_F"))
		__asm(push(i16!=57), iftrue, target("___gdtoa__XprivateX__BB12_340_F"))
	__asm(jump, target("___gdtoa__XprivateX__BB12_339_F"), lbl("___gdtoa__XprivateX__BB12_339_B"), label, lbl("___gdtoa__XprivateX__BB12_339_F")); 
		__asm(jump, target("___gdtoa__XprivateX__BB12_373_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_340_F"))
		__asm(push(i24>0), iftrue, target("___gdtoa__XprivateX__BB12_344_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_341_F"))
		i1 =  ((__xasm<int>(push(i15), op(0x37))))
		__asm(push(i1>1), iftrue, target("___gdtoa__XprivateX__BB12_343_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_342_F"))
		i1 =  ((__xasm<int>(push((i2+20)), op(0x37))))
		__asm(push(i1==0), iftrue, target("___gdtoa__XprivateX__BB12_345_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_343_F"))
		i13 =  (16)
		i1 =  (i5 + i12)
		__asm(push(i16), push(i17), op(0x3a))
		i24 =  (i1 + 1)
		i4 = i3
		i3 = i9
		i1 = i11
		i11 = i8
		__asm(jump, target("___gdtoa__XprivateX__BB12_409_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_344_F"))
		i13 =  (32)
		i24 =  (i5 + i12)
		i1 =  (i1 + 49)
		__asm(push(i1), push(i17), op(0x3a))
		i24 =  (i24 + 1)
		i4 = i3
		i3 = i9
		i1 = i11
		i11 = i8
		__asm(jump, target("___gdtoa__XprivateX__BB12_409_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_345_F"))
		i13 =  (0)
		i1 =  (i5 + i12)
		__asm(push(i16), push(i17), op(0x3a))
		i24 =  (i1 + 1)
		i4 = i3
		i3 = i9
		i1 = i11
		i11 = i8
		__asm(jump, target("___gdtoa__XprivateX__BB12_409_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_346_F"))
		__asm(push(i24<0), iftrue, target("___gdtoa__XprivateX__BB12_350_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_347_F"))
		__asm(push(i24!=0), iftrue, target("___gdtoa__XprivateX__BB12_369_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_348_F"))
		__asm(push(i19!=0), iftrue, target("___gdtoa__XprivateX__BB12_369_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_349_F"))
		i24 =  ((__xasm<int>(push(i4), op(0x37))))
		i24 =  (i24 & 1)
		__asm(push(i24!=0), iftrue, target("___gdtoa__XprivateX__BB12_369_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_350_F"))
		__asm(push(i14>0), iftrue, target("___gdtoa__XprivateX__BB12_352_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_351_F"))
		i1 =  (0)
		i13 = i16
		__asm(jump, target("___gdtoa__XprivateX__BB12_365_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_352_F"))
		i13 =  (1)
		mstate.esp -= 8
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i13), push((mstate.esp+4)), op(0x3c))
		state = 31
		mstate.esp -= 4;FSM___lshift_D2A.start()
		return
	__asm(lbl("___gdtoa_state31"))
		i2 = mstate.eax
		mstate.esp += 8
		i13 =  ((__xasm<int>(push((i2+16)), op(0x37))))
		i4 =  ((__xasm<int>(push((i11+16)), op(0x37))))
		i24 =  (i13 - i4)
		__asm(push(i13==i4), iftrue, target("___gdtoa__XprivateX__BB12_354_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_353_F"))
		i13 = i24
		__asm(jump, target("___gdtoa__XprivateX__BB12_359_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_354_F"))
		i13 =  (0)
	__asm(jump, target("___gdtoa__XprivateX__BB12_355_F"), lbl("___gdtoa__XprivateX__BB12_355_B"), label, lbl("___gdtoa__XprivateX__BB12_355_F")); 
		i24 =  (i13 ^ -1)
		i24 =  (i4 + i24)
		i14 =  (i24 << 2)
		i19 =  (i2 + i14)
		i14 =  (i11 + i14)
		i19 =  ((__xasm<int>(push((i19+20)), op(0x37))))
		i14 =  ((__xasm<int>(push((i14+20)), op(0x37))))
		__asm(push(i19==i14), iftrue, target("___gdtoa__XprivateX__BB12_357_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_356_F"))
		i13 =  ((uint(i19)<uint(i14)) ? -1 : 1)
		__asm(jump, target("___gdtoa__XprivateX__BB12_359_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_357_F"))
		i13 =  (i13 + 1)
		__asm(push(i24>0), iftrue, target("___gdtoa__XprivateX__BB12_438_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_358_F"))
		i13 =  (0)
		__asm(jump, target("___gdtoa__XprivateX__BB12_359_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_359_F"))
		__asm(push(i13>0), iftrue, target("___gdtoa__XprivateX__BB12_363_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_360_F"))
		__asm(push(i13==0), iftrue, target("___gdtoa__XprivateX__BB12_362_F"))
	__asm(jump, target("___gdtoa__XprivateX__BB12_361_F"), lbl("___gdtoa__XprivateX__BB12_361_B"), label, lbl("___gdtoa__XprivateX__BB12_361_F")); 
		i1 =  (32)
		i13 = i16
		__asm(jump, target("___gdtoa__XprivateX__BB12_365_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_362_F"))
		i13 =  (i16 & 1)
		__asm(push(i13==0), iftrue, target("___gdtoa__XprivateX__BB12_361_B"))
	__asm(lbl("___gdtoa__XprivateX__BB12_363_F"))
		i13 =  (i1 + 49)
		__asm(push(i13==58), iftrue, target("___gdtoa__XprivateX__BB12_372_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_364_F"))
		i1 =  (32)
		__asm(jump, target("___gdtoa__XprivateX__BB12_365_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_365_F"))
		i14 = i1
		i1 = i13
		i13 =  ((__xasm<int>(push((i2+16)), op(0x37))))
		__asm(push(i13>1), iftrue, target("___gdtoa__XprivateX__BB12_367_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_366_F"))
		i13 =  ((__xasm<int>(push((i2+20)), op(0x37))))
		__asm(push(i13==0), iftrue, target("___gdtoa__XprivateX__BB12_368_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_367_F"))
		i13 =  (16)
		i4 =  (i5 + i12)
		__asm(push(i1), push(i17), op(0x3a))
		i24 =  (i4 + 1)
		i4 = i3
		i3 = i9
		i1 = i11
		i11 = i8
		__asm(jump, target("___gdtoa__XprivateX__BB12_409_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_368_F"))
		i13 =  (i5 + i12)
		__asm(push(i1), push(i17), op(0x3a))
		i13 =  (i13 + 1)
		i4 = i3
		i3 = i9
		i1 = i11
		i24 = i13
		i11 = i8
		i13 = i14
		__asm(jump, target("___gdtoa__XprivateX__BB12_409_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_369_F"))
		__asm(push(i14<1), iftrue, target("___gdtoa__XprivateX__BB12_376_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_370_F"))
		__asm(push(i16==57), iftrue, target("___gdtoa__XprivateX__BB12_339_B"))
		__asm(jump, target("___gdtoa__XprivateX__BB12_371_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_371_F"))
		i13 =  (32)
		i1 =  (i5 + i12)
		i4 =  (i16 + 1)
		__asm(push(i4), push(i17), op(0x3a))
		i24 =  (i1 + 1)
		i4 = i3
		i3 = i9
		i1 = i11
		i11 = i8
		__asm(jump, target("___gdtoa__XprivateX__BB12_409_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_372_F"))
		__asm(jump, target("___gdtoa__XprivateX__BB12_373_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_373_F"))
		i1 =  (57)
		i13 =  (i5 + i12)
		__asm(push(i1), push(i17), op(0x3a))
		i1 =  (i13 + 1)
		i13 =  (i23 + i5)
		i4 = i9
		__asm(jump, target("___gdtoa__XprivateX__BB12_374_F"))
	__asm(jump, target("___gdtoa__XprivateX__BB12_374_F"), lbl("___gdtoa__XprivateX__BB12_374_B"), label, lbl("___gdtoa__XprivateX__BB12_374_F")); 
		i24 = i4
		i5 = i1
		__asm(push(i13==i12), iftrue, target("___gdtoa__XprivateX__BB12_402_F"))
		__asm(jump, target("___gdtoa__XprivateX__BB12_375_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_375_F"))
		i1 = i3
		i3 = i24
		__asm(jump, target("___gdtoa__XprivateX__BB12_395_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_376_F"))
		__asm(push(i16), push(i17), op(0x3a))
		i1 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		i24 =  (i5 + 1)
		__asm(push(i1==i13), iftrue, target("___gdtoa__XprivateX__BB12_385_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_377_F"))
		i1 =  (0)
		mstate.esp -= 12
		i24 =  (10)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i24), push((mstate.esp+4)), op(0x3c))
		__asm(push(i1), push((mstate.esp+8)), op(0x3c))
		state = 32
		mstate.esp -= 4;FSM___multadd_D2A.start()
		return
	__asm(lbl("___gdtoa_state32"))
		i2 = mstate.eax
		mstate.esp += 12
		__asm(push(i3!=i9), iftrue, target("___gdtoa__XprivateX__BB12_379_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_378_F"))
		i1 =  (0)
		mstate.esp -= 12
		i3 =  (10)
		__asm(push(i9), push(mstate.esp), op(0x3c))
		__asm(push(i3), push((mstate.esp+4)), op(0x3c))
		__asm(push(i1), push((mstate.esp+8)), op(0x3c))
		state = 33
		mstate.esp -= 4;FSM___multadd_D2A.start()
		return
	__asm(lbl("___gdtoa_state33"))
		i1 = mstate.eax
		mstate.esp += 12
		i3 = i1
		__asm(jump, target("___gdtoa__XprivateX__BB12_380_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_379_F"))
		i1 =  (0)
		mstate.esp -= 12
		i24 =  (10)
		__asm(push(i3), push(mstate.esp), op(0x3c))
		__asm(push(i24), push((mstate.esp+4)), op(0x3c))
		__asm(push(i1), push((mstate.esp+8)), op(0x3c))
		state = 34
		mstate.esp -= 4;FSM___multadd_D2A.start()
		return
	__asm(lbl("___gdtoa_state34"))
		i3 = mstate.eax
		mstate.esp += 12
		mstate.esp -= 12
		__asm(push(i9), push(mstate.esp), op(0x3c))
		__asm(push(i24), push((mstate.esp+4)), op(0x3c))
		__asm(push(i1), push((mstate.esp+8)), op(0x3c))
		state = 35
		mstate.esp -= 4;FSM___multadd_D2A.start()
		return
	__asm(lbl("___gdtoa_state35"))
		i1 = mstate.eax
		mstate.esp += 12
	__asm(lbl("___gdtoa__XprivateX__BB12_380_F"))
		i24 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		i5 =  (i5 + 1)
		i24 =  (i24 + 1)
		__asm(jump, target("___gdtoa__XprivateX__BB12_317_B"))
	__asm(lbl("___gdtoa__XprivateX__BB12_381_F"))
		i1 =  (0)
		__asm(jump, target("___gdtoa__XprivateX__BB12_382_F"))
	__asm(jump, target("___gdtoa__XprivateX__BB12_382_F"), lbl("___gdtoa__XprivateX__BB12_382_B"), label, lbl("___gdtoa__XprivateX__BB12_382_F")); 
		i3 =  (0)
		mstate.esp -= 12
		i4 =  (10)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i4), push((mstate.esp+4)), op(0x3c))
		__asm(push(i3), push((mstate.esp+8)), op(0x3c))
		state = 36
		mstate.esp -= 4;FSM___multadd_D2A.start()
		return
	__asm(lbl("___gdtoa_state36"))
		i2 = mstate.eax
		mstate.esp += 12
		i3 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		i3 =  (i3 + 1)
		__asm(push(i3), push((mstate.ebp+-4)), op(0x3c))
		mstate.esp -= 8
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i11), push((mstate.esp+4)), op(0x3c))
		mstate.esp -= 4;FSM___quorem_D2A.start()
	__asm(lbl("___gdtoa_state37"))
		i3 = mstate.eax
		mstate.esp += 8
		i3 =  (i3 + 48)
		i4 =  (i23 + i1)
		__asm(push(i3), push((i4+1)), op(0x3a))
		i4 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		i1 =  (i1 + 1)
		__asm(push(i4>=i13), iftrue, target("___gdtoa__XprivateX__BB12_384_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_383_F"))
		__asm(jump, target("___gdtoa__XprivateX__BB12_382_B"))
	__asm(lbl("___gdtoa__XprivateX__BB12_384_F"))
		i9 =  (0)
		i1 =  (i1 << 0)
		i1 =  (i1 + i12)
		i13 =  (i1 + 1)
		i1 = i3
		i4 = i24
		i3 = i9
		__asm(jump, target("___gdtoa__XprivateX__BB12_386_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_385_F"))
		i13 =  (i12 + i24)
		i1 = i16
		i4 = i9
	__asm(lbl("___gdtoa__XprivateX__BB12_386_F"))
		i24 = i4
		i4 =  (1)
		mstate.esp -= 8
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i4), push((mstate.esp+4)), op(0x3c))
		state = 38
		mstate.esp -= 4;FSM___lshift_D2A.start()
		return
	__asm(lbl("___gdtoa_state38"))
		i2 = mstate.eax
		mstate.esp += 8
		i4 =  ((__xasm<int>(push((i2+16)), op(0x37))))
		i5 =  ((__xasm<int>(push((i11+16)), op(0x37))))
		i9 =  (i4 - i5)
		__asm(push(i4==i5), iftrue, target("___gdtoa__XprivateX__BB12_388_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_387_F"))
		i4 = i9
		__asm(jump, target("___gdtoa__XprivateX__BB12_393_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_388_F"))
		i4 =  (0)
	__asm(jump, target("___gdtoa__XprivateX__BB12_389_F"), lbl("___gdtoa__XprivateX__BB12_389_B"), label, lbl("___gdtoa__XprivateX__BB12_389_F")); 
		i9 =  (i4 ^ -1)
		i9 =  (i5 + i9)
		i10 =  (i9 << 2)
		i14 =  (i2 + i10)
		i10 =  (i11 + i10)
		i14 =  ((__xasm<int>(push((i14+20)), op(0x37))))
		i10 =  ((__xasm<int>(push((i10+20)), op(0x37))))
		__asm(push(i14==i10), iftrue, target("___gdtoa__XprivateX__BB12_391_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_390_F"))
		i4 =  ((uint(i14)<uint(i10)) ? -1 : 1)
		__asm(jump, target("___gdtoa__XprivateX__BB12_393_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_391_F"))
		i4 =  (i4 + 1)
		__asm(push(i9>0), iftrue, target("___gdtoa__XprivateX__BB12_439_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_392_F"))
		i4 =  (0)
		__asm(jump, target("___gdtoa__XprivateX__BB12_393_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_393_F"))
		__asm(push(i4<1), iftrue, target("___gdtoa__XprivateX__BB12_397_F"))
	__asm(jump, target("___gdtoa__XprivateX__BB12_394_F"), lbl("___gdtoa__XprivateX__BB12_394_B"), label, lbl("___gdtoa__XprivateX__BB12_394_F")); 
		i1 = i3
		i3 = i24
		__asm(jump, target("___gdtoa__XprivateX__BB12_395_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_395_F"))
		i24 = i3
		i3 =  ((__xasm<int>(push((i13+-1)), op(0x35))))
		i5 =  (i13 + -1)
		__asm(push(i3!=57), iftrue, target("___gdtoa__XprivateX__BB12_403_F"))
		__asm(jump, target("___gdtoa__XprivateX__BB12_396_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_396_F"))
		i3 = i1
		i4 = i24
		i1 = i13
		i13 = i5
		__asm(jump, target("___gdtoa__XprivateX__BB12_374_B"))
	__asm(lbl("___gdtoa__XprivateX__BB12_397_F"))
		__asm(push(i4!=0), iftrue, target("___gdtoa__XprivateX__BB12_399_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_398_F"))
		i1 =  (i1 & 1)
		__asm(push(i1==0), iftrue, target("___gdtoa__XprivateX__BB12_399_F"))
		__asm(jump, target("___gdtoa__XprivateX__BB12_394_B"))
	__asm(lbl("___gdtoa__XprivateX__BB12_399_F"))
		i1 =  ((__xasm<int>(push((i2+16)), op(0x37))))
		__asm(push(i1>1), iftrue, target("___gdtoa__XprivateX__BB12_404_F"))
		__asm(jump, target("___gdtoa__XprivateX__BB12_400_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_400_F"))
		i1 =  ((__xasm<int>(push((i2+20)), op(0x37))))
		__asm(push(i1!=0), iftrue, target("___gdtoa__XprivateX__BB12_404_F"))
		__asm(jump, target("___gdtoa__XprivateX__BB12_401_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_401_F"))
		i1 =  (0)
		__asm(jump, target("___gdtoa__XprivateX__BB12_405_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_402_F"))
		i1 =  (49)
		__asm(push(i1), push(i13), op(0x3a))
		i13 =  (32)
		i8 =  (i8 + 1)
		i4 = i3
		i3 = i24
		i1 = i11
		i24 = i5
		i11 = i8
		__asm(jump, target("___gdtoa__XprivateX__BB12_409_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_403_F"))
		i9 =  (32)
		i3 =  (i3 + 1)
		__asm(push(i3), push(i5), op(0x3a))
		i4 = i1
		i3 = i24
		i1 = i11
		i24 = i13
		i11 = i8
		i13 = i9
		__asm(jump, target("___gdtoa__XprivateX__BB12_409_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_404_F"))
		i1 =  (16)
	__asm(lbl("___gdtoa__XprivateX__BB12_405_F"))
		i5 = i1
		i1 =  (0)
	__asm(jump, target("___gdtoa__XprivateX__BB12_406_F"), lbl("___gdtoa__XprivateX__BB12_406_B"), label, lbl("___gdtoa__XprivateX__BB12_406_F")); 
		i4 =  (i1 ^ -1)
		i4 =  (i13 + i4)
		i4 =  ((__xasm<int>(push(i4), op(0x35))))
		i1 =  (i1 + 1)
		__asm(push(i4!=48), iftrue, target("___gdtoa__XprivateX__BB12_408_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_407_F"))
		__asm(jump, target("___gdtoa__XprivateX__BB12_406_B"))
	__asm(lbl("___gdtoa__XprivateX__BB12_408_F"))
		i1 =  (i1 + -1)
		i13 =  (i13 - i1)
		i4 = i3
		i3 = i24
		i1 = i11
		i24 = i13
		i11 = i8
		i13 = i5
	__asm(lbl("___gdtoa__XprivateX__BB12_409_F"))
		i5 = i11
		i8 = i13
		__asm(push(i1==0), iftrue, target("___gdtoa__XprivateX__BB12_411_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_410_F"))
		i11 =  (_freelist)
		i13 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		i13 =  (i13 << 2)
		i11 =  (i11 + i13)
		i13 =  ((__xasm<int>(push(i11), op(0x37))))
		__asm(push(i13), push(i1), op(0x3c))
		__asm(push(i1), push(i11), op(0x3c))
	__asm(lbl("___gdtoa__XprivateX__BB12_411_F"))
		__asm(push(i3==0), iftrue, target("___gdtoa__XprivateX__BB12_440_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_412_F"))
		i11 = i4
		i13 = i24
		i4 = i5
		i1 = i8
		__asm(jump, target("___gdtoa__XprivateX__BB12_413_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_413_F"))
		i24 = i4
		__asm(push(i11==i3), iftrue, target("___gdtoa__XprivateX__BB12_416_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_414_F"))
		__asm(push(i11==0), iftrue, target("___gdtoa__XprivateX__BB12_416_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_415_F"))
		i4 =  (_freelist)
		i5 =  ((__xasm<int>(push((i11+4)), op(0x37))))
		i5 =  (i5 << 2)
		i4 =  (i4 + i5)
		i5 =  ((__xasm<int>(push(i4), op(0x37))))
		__asm(push(i5), push(i11), op(0x3c))
		__asm(push(i11), push(i4), op(0x3c))
	__asm(lbl("___gdtoa__XprivateX__BB12_416_F"))
		__asm(push(i3!=0), iftrue, target("___gdtoa__XprivateX__BB12_418_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_417_F"))
		i3 = i2
		i2 = i13
		__asm(jump, target("___gdtoa__XprivateX__BB12_420_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_418_F"))
		i11 =  (_freelist)
		i4 =  ((__xasm<int>(push((i3+4)), op(0x37))))
		i4 =  (i4 << 2)
		i11 =  (i11 + i4)
		i4 =  ((__xasm<int>(push(i11), op(0x37))))
		__asm(push(i4), push(i3), op(0x3c))
		__asm(push(i3), push(i11), op(0x3c))
		i3 = i2
		i2 = i13
		__asm(jump, target("___gdtoa__XprivateX__BB12_420_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_419_F"))
		i1 =  (0)
		i2 =  (i12 + i3)
		i3 = i11
		i24 = i13
	__asm(jump, target("___gdtoa__XprivateX__BB12_420_F"), lbl("___gdtoa__XprivateX__BB12_420_B"), label, lbl("___gdtoa__XprivateX__BB12_420_F")); 
		i4 = i24
		__asm(push(i3==0), iftrue, target("___gdtoa__XprivateX__BB12_422_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_421_F"))
		i5 =  (_freelist)
		i8 =  ((__xasm<int>(push((i3+4)), op(0x37))))
		i8 =  (i8 << 2)
		i5 =  (i5 + i8)
		i8 =  ((__xasm<int>(push(i5), op(0x37))))
		__asm(push(i8), push(i3), op(0x3c))
		__asm(push(i3), push(i5), op(0x3c))
	__asm(lbl("___gdtoa__XprivateX__BB12_422_F"))
		i3 =  (0)
		__asm(push(i3), push(i2), op(0x3a))
		i3 =  (i4 + 1)
		__asm(push(i3), push(i6), op(0x3c))
		__asm(push(i7==0), iftrue, target("___gdtoa__XprivateX__BB12_441_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_423_F"))
		__asm(jump, target("___gdtoa__XprivateX__BB12_424_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_424_F"))
		__asm(push(i2), push(i7), op(0x3c))
		i2 =  ((__xasm<int>(push(i0), op(0x37))))
		i2 =  (i2 | i1)
		__asm(push(i2), push(i0), op(0x3c))
		__asm(jump, target("___gdtoa__XprivateX__BB12_427_F"))
	__asm(lbl("___gdtoa__XprivateX__BB12_425_F"))
		i2 =  (16)
		__asm(jump, target("___gdtoa__XprivateX__BB12_426_F"))
	__asm(jump, target("___gdtoa__XprivateX__BB12_426_F"), lbl("___gdtoa__XprivateX__BB12_426_B"), label, lbl("___gdtoa__XprivateX__BB12_426_F")); 
		i1 = i2
		i2 =  ((__xasm<int>(push(i0), op(0x37))))
		i1 =  (i2 | i1)
		__asm(push(i1), push(i0), op(0x3c))
	__asm(lbl("___gdtoa__XprivateX__BB12_427_F"))
		mstate.eax = i12
	__asm(lbl("___gdtoa__XprivateX__BB12_428_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("___gdtoa__XprivateX__BB12_429_F"))
		i0 =  (0)
		__asm(jump, target("___gdtoa__XprivateX__BB12_60_B"))
	__asm(lbl("___gdtoa__XprivateX__BB12_430_F"))
		i1 = i9
		i9 = i3
		__asm(jump, target("___gdtoa__XprivateX__BB12_49_B"))
	__asm(lbl("___gdtoa__XprivateX__BB12_431_F"))
		i12 =  (0)
		__asm(jump, target("___gdtoa__XprivateX__BB12_103_B"))
	__asm(lbl("___gdtoa__XprivateX__BB12_432_F"))
		i2 =  (3)
		__asm(jump, target("___gdtoa__XprivateX__BB12_127_B"))
	__asm(lbl("___gdtoa__XprivateX__BB12_433_F"))
		f0 =  (1)
		i2 =  (2)
		__asm(jump, target("___gdtoa__XprivateX__BB12_127_B"))
	__asm(lbl("___gdtoa__XprivateX__BB12_434_F"))
		__asm(jump, target("___gdtoa__XprivateX__BB12_280_B"))
	__asm(lbl("___gdtoa__XprivateX__BB12_435_F"))
		__asm(jump, target("___gdtoa__XprivateX__BB12_295_B"))
	__asm(lbl("___gdtoa__XprivateX__BB12_436_F"))
		__asm(jump, target("___gdtoa__XprivateX__BB12_320_B"))
	__asm(lbl("___gdtoa__XprivateX__BB12_437_F"))
		__asm(jump, target("___gdtoa__XprivateX__BB12_329_B"))
	__asm(lbl("___gdtoa__XprivateX__BB12_438_F"))
		__asm(jump, target("___gdtoa__XprivateX__BB12_355_B"))
	__asm(lbl("___gdtoa__XprivateX__BB12_439_F"))
		__asm(jump, target("___gdtoa__XprivateX__BB12_389_B"))
	__asm(lbl("___gdtoa__XprivateX__BB12_440_F"))
		i3 = i2
		i2 = i24
		i24 = i5
		i1 = i8
		__asm(jump, target("___gdtoa__XprivateX__BB12_420_B"))
	__asm(lbl("___gdtoa__XprivateX__BB12_441_F"))
		i2 = i1
		__asm(jump, target("___gdtoa__XprivateX__BB12_426_B"))
	__asm(lbl("___gdtoa_errState"))
		throw("Invalid state in ___gdtoa")
	}
}



// Sync
public const ___quorem_D2A:int = regFunc(FSM___quorem_D2A.start)

public final class FSM___quorem_D2A extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
		var i8:int, i9:int, i10:int, i11:int, i12:int, i13:int, i14:int, i15:int
		var i16:int, i17:int, i18:int, i19:int, i20:int, i21:int, i22:int, i23:int


		__asm(label, lbl("___quorem_D2A_entry"))
	__asm(lbl("___quorem_D2A__XprivateX__BB13_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((__xasm<int>(push((i1+16)), op(0x37))))
		i3 =  ((__xasm<int>(push((i0+16)), op(0x37))))
		i4 =  (i0 + 16)
		i5 =  (i1 + 16)
		i6 = i1
		i7 = i0
		__asm(push(i3>=i2), iftrue, target("___quorem_D2A__XprivateX__BB13_3_F"))
	__asm(lbl("___quorem_D2A__XprivateX__BB13_1_F"))
		i0 =  (0)
		__asm(jump, target("___quorem_D2A__XprivateX__BB13_2_F"))
	__asm(jump, target("___quorem_D2A__XprivateX__BB13_2_F"), lbl("___quorem_D2A__XprivateX__BB13_2_B"), label, lbl("___quorem_D2A__XprivateX__BB13_2_F")); 
		mstate.eax = i0
		__asm(jump, target("___quorem_D2A__XprivateX__BB13_37_F"))
	__asm(lbl("___quorem_D2A__XprivateX__BB13_3_F"))
		i8 =  (i2 + -1)
		i9 =  (i8 << 2)
		i10 =  (i1 + i9)
		i10 =  ((__xasm<int>(push((i10+20)), op(0x37))))
		i9 =  (i0 + i9)
		i11 =  ((__xasm<int>(push((i9+20)), op(0x37))))
		i10 =  (i10 + 1)
		i9 =  (i9 + 20)
		i10 =  (uint(i11) / uint(i10))
		__asm(push(i10!=0), iftrue, target("___quorem_D2A__XprivateX__BB13_5_F"))
	__asm(jump, target("___quorem_D2A__XprivateX__BB13_4_F"), lbl("___quorem_D2A__XprivateX__BB13_4_B"), label, lbl("___quorem_D2A__XprivateX__BB13_4_F")); 
		i2 = i3
		i3 = i8
		__asm(jump, target("___quorem_D2A__XprivateX__BB13_18_F"))
	__asm(lbl("___quorem_D2A__XprivateX__BB13_5_F"))
		i11 =  (20)
		i12 =  (0)
		i13 = i12
		i14 = i12
		i15 = i12
		i16 = i10
		i17 = i14
		i18 = i13
	__asm(jump, target("___quorem_D2A__XprivateX__BB13_6_F"), lbl("___quorem_D2A__XprivateX__BB13_6_B"), label, lbl("___quorem_D2A__XprivateX__BB13_6_F")); 
		i19 =  (0)
		i20 =  (i6 + i11)
		mstate.esp -= 16
		i20 =  ((__xasm<int>(push(i20), op(0x37))))
		__asm(push(i20), push(mstate.esp), op(0x3c))
		__asm(push(i19), push((mstate.esp+4)), op(0x3c))
		__asm(push(i16), push((mstate.esp+8)), op(0x3c))
		__asm(push(i12), push((mstate.esp+12)), op(0x3c))
		mstate.esp -= 4;(mstate.funcs[___muldi3])()
	__asm(lbl("___quorem_D2A_state1"))
		i20 = mstate.eax
		i21 = mstate.edx
		i22 =  (i7 + i11)
		i23 =  ((__xasm<int>(push(i22), op(0x37))))
		i14 =  __addc(i20, i14)
		i13 =  __adde(i21, i13)
		i14 =  __subc(i23, i14)
		i20 =  __sube(i19, i19)
		i14 =  __subc(i14, i17)
		i17 =  __sube(i20, i18)
		__asm(push(i14), push(i22), op(0x3c))
		i14 =  (i17 & 1)
		i11 =  (i11 + 4)
		i15 =  (i15 + 1)
		mstate.esp += 16
		i18 = i19
		__asm(push(i15>i8), iftrue, target("___quorem_D2A__XprivateX__BB13_8_F"))
	__asm(lbl("___quorem_D2A__XprivateX__BB13_7_F"))
		i17 = i14
		i14 = i13
		i13 = i19
		__asm(jump, target("___quorem_D2A__XprivateX__BB13_6_B"))
	__asm(lbl("___quorem_D2A__XprivateX__BB13_8_F"))
		i9 =  ((__xasm<int>(push(i9), op(0x37))))
		__asm(push(i9!=0), iftrue, target("___quorem_D2A__XprivateX__BB13_4_B"))
	__asm(lbl("___quorem_D2A__XprivateX__BB13_9_F"))
		i3 =  (i2 + -2)
		__asm(push(i3>0), iftrue, target("___quorem_D2A__XprivateX__BB13_11_F"))
	__asm(lbl("___quorem_D2A__XprivateX__BB13_10_F"))
		i2 = i8
		__asm(jump, target("___quorem_D2A__XprivateX__BB13_17_F"))
	__asm(lbl("___quorem_D2A__XprivateX__BB13_11_F"))
		i9 =  (0)
		i11 =  (i2 << 2)
		i11 =  (i7 + i11)
		i11 =  (i11 + 12)
		i2 =  (i2 + -1)
		__asm(jump, target("___quorem_D2A__XprivateX__BB13_15_F"))
	__asm(lbl("___quorem_D2A__XprivateX__BB13_12_B"), label)
		i9 =  (i12 + -4)
		i12 =  (i11 + -1)
		i13 =  (i2 + 1)
		i2 =  (i2 ^ -1)
		i2 =  (i3 + i2)
		__asm(push(i2>0), iftrue, target("___quorem_D2A__XprivateX__BB13_14_F"))
	__asm(lbl("___quorem_D2A__XprivateX__BB13_13_F"))
		i2 = i12
		__asm(jump, target("___quorem_D2A__XprivateX__BB13_17_F"))
	__asm(lbl("___quorem_D2A__XprivateX__BB13_14_F"))
		i11 = i9
		i2 = i12
		i9 = i13
	__asm(lbl("___quorem_D2A__XprivateX__BB13_15_F"))
		i12 = i11
		i11 = i2
		i2 = i9
		i9 =  ((__xasm<int>(push(i12), op(0x37))))
		__asm(push(i9==0), iftrue, target("___quorem_D2A__XprivateX__BB13_12_B"))
	__asm(lbl("___quorem_D2A__XprivateX__BB13_16_F"))
		i2 = i11
	__asm(lbl("___quorem_D2A__XprivateX__BB13_17_F"))
		i3 = i2
		__asm(push(i3), push(i4), op(0x3c))
		i2 = i3
	__asm(lbl("___quorem_D2A__XprivateX__BB13_18_F"))
		i5 =  ((__xasm<int>(push(i5), op(0x37))))
		i9 =  (i2 - i5)
		__asm(push(i2==i5), iftrue, target("___quorem_D2A__XprivateX__BB13_20_F"))
	__asm(lbl("___quorem_D2A__XprivateX__BB13_19_F"))
		i1 = i9
		__asm(jump, target("___quorem_D2A__XprivateX__BB13_25_F"))
	__asm(lbl("___quorem_D2A__XprivateX__BB13_20_F"))
		i2 =  (0)
	__asm(jump, target("___quorem_D2A__XprivateX__BB13_21_F"), lbl("___quorem_D2A__XprivateX__BB13_21_B"), label, lbl("___quorem_D2A__XprivateX__BB13_21_F")); 
		i9 =  (i2 ^ -1)
		i9 =  (i5 + i9)
		i11 =  (i9 << 2)
		i12 =  (i0 + i11)
		i11 =  (i1 + i11)
		i12 =  ((__xasm<int>(push((i12+20)), op(0x37))))
		i11 =  ((__xasm<int>(push((i11+20)), op(0x37))))
		__asm(push(i12==i11), iftrue, target("___quorem_D2A__XprivateX__BB13_23_F"))
	__asm(lbl("___quorem_D2A__XprivateX__BB13_22_F"))
		i1 =  ((uint(i12)<uint(i11)) ? -1 : 1)
		__asm(jump, target("___quorem_D2A__XprivateX__BB13_25_F"))
	__asm(lbl("___quorem_D2A__XprivateX__BB13_23_F"))
		i2 =  (i2 + 1)
		__asm(push(i9>0), iftrue, target("___quorem_D2A__XprivateX__BB13_38_F"))
	__asm(lbl("___quorem_D2A__XprivateX__BB13_24_F"))
		i1 =  (0)
		__asm(jump, target("___quorem_D2A__XprivateX__BB13_25_F"))
	__asm(lbl("___quorem_D2A__XprivateX__BB13_25_F"))
		__asm(push(i1>-1), iftrue, target("___quorem_D2A__XprivateX__BB13_27_F"))
	__asm(lbl("___quorem_D2A__XprivateX__BB13_26_F"))
		i0 = i10
		__asm(jump, target("___quorem_D2A__XprivateX__BB13_2_B"))
	__asm(lbl("___quorem_D2A__XprivateX__BB13_27_F"))
		i1 =  (0)
		i2 =  (20)
		i5 =  (i10 + 1)
		i9 = i1
		i10 = i1
		i11 = i10
		i12 = i9
	__asm(jump, target("___quorem_D2A__XprivateX__BB13_28_F"), lbl("___quorem_D2A__XprivateX__BB13_28_B"), label, lbl("___quorem_D2A__XprivateX__BB13_28_F")); 
		i13 =  (0)
		i14 =  (i6 + i2)
		i14 =  ((__xasm<int>(push(i14), op(0x37))))
		i15 =  (i7 + i2)
		i16 =  ((__xasm<int>(push(i15), op(0x37))))
		i10 =  __addc(i14, i10)
		i9 =  __adde(i9, i13)
		i10 =  __subc(i16, i10)
		i14 =  __sube(i13, i13)
		i10 =  __subc(i10, i11)
		i11 =  __sube(i14, i12)
		__asm(push(i10), push(i15), op(0x3c))
		i10 =  (i11 & 1)
		i2 =  (i2 + 4)
		i1 =  (i1 + 1)
		i12 = i13
		__asm(push(i1>i8), iftrue, target("___quorem_D2A__XprivateX__BB13_30_F"))
	__asm(lbl("___quorem_D2A__XprivateX__BB13_29_F"))
		i11 = i10
		i10 = i9
		i9 = i13
		__asm(jump, target("___quorem_D2A__XprivateX__BB13_28_B"))
	__asm(lbl("___quorem_D2A__XprivateX__BB13_30_F"))
		i1 =  (i3 << 2)
		i1 =  (i0 + i1)
		i1 =  ((__xasm<int>(push((i1+20)), op(0x37))))
		__asm(push(i1==0), iftrue, target("___quorem_D2A__XprivateX__BB13_32_F"))
	__asm(lbl("___quorem_D2A__XprivateX__BB13_31_F"))
		i0 = i5
		__asm(jump, target("___quorem_D2A__XprivateX__BB13_2_B"))
	__asm(lbl("___quorem_D2A__XprivateX__BB13_32_F"))
		i1 =  (0)
		__asm(jump, target("___quorem_D2A__XprivateX__BB13_34_F"))
	__asm(lbl("___quorem_D2A__XprivateX__BB13_33_B"), label)
		i1 =  (i1 + 1)
	__asm(lbl("___quorem_D2A__XprivateX__BB13_34_F"))
		i2 =  (i1 ^ -1)
		i2 =  (i3 + i2)
		__asm(push(i2<1), iftrue, target("___quorem_D2A__XprivateX__BB13_36_F"))
	__asm(lbl("___quorem_D2A__XprivateX__BB13_35_F"))
		i2 =  (i2 << 2)
		i2 =  (i0 + i2)
		i2 =  ((__xasm<int>(push((i2+20)), op(0x37))))
		__asm(push(i2==0), iftrue, target("___quorem_D2A__XprivateX__BB13_33_B"))
	__asm(lbl("___quorem_D2A__XprivateX__BB13_36_F"))
		i0 =  (i3 - i1)
		__asm(push(i0), push(i4), op(0x3c))
		mstate.eax = i5
		__asm(jump, target("___quorem_D2A__XprivateX__BB13_37_F"))
	__asm(lbl("___quorem_D2A__XprivateX__BB13_37_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	__asm(lbl("___quorem_D2A__XprivateX__BB13_38_F"))
		__asm(jump, target("___quorem_D2A__XprivateX__BB13_21_B"))
	}
}



// Async
public const ___Balloc_D2A:int = regFunc(FSM___Balloc_D2A.start)

public final class FSM___Balloc_D2A extends Machine {

	public static function start():void {
			var result:FSM___Balloc_D2A = new FSM___Balloc_D2A
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int

	public static const intRegCount:int = 6

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("___Balloc_D2A_entry"))
		__asm(push(state), switchjump(
			"___Balloc_D2A_errState",
			"___Balloc_D2A_state0",
			"___Balloc_D2A_state1"))
	__asm(lbl("___Balloc_D2A_state0"))
	__asm(lbl("___Balloc_D2A__XprivateX__BB14_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (_freelist)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i2 =  (i1 << 2)
		i0 =  (i0 + i2)
		i2 =  ((__xasm<int>(push(i0), op(0x37))))
		__asm(push(i2==0), iftrue, target("___Balloc_D2A__XprivateX__BB14_2_F"))
	__asm(lbl("___Balloc_D2A__XprivateX__BB14_1_F"))
		i1 =  ((__xasm<int>(push(i2), op(0x37))))
		__asm(push(i1), push(i0), op(0x3c))
		i1 = i2
		__asm(jump, target("___Balloc_D2A__XprivateX__BB14_5_F"))
	__asm(lbl("___Balloc_D2A__XprivateX__BB14_2_F"))
		i0 =  (1)
		i0 =  (i0 << i1)
		i2 =  (i0 << 2)
		i3 =  ((__xasm<int>(push(_pmem_next), op(0x37))))
		i2 =  (i2 + 27)
		i4 =  (_private_mem)
		i4 =  (i3 - i4)
		i5 =  (i2 >>> 3)
		i4 =  (i4 >> 3)
		i4 =  (i4 + i5)
		__asm(push(uint(i4)>uint(288)), iftrue, target("___Balloc_D2A__XprivateX__BB14_4_F"))
	__asm(lbl("___Balloc_D2A__XprivateX__BB14_3_F"))
		i2 =  (i5 << 3)
		i2 =  (i3 + i2)
		__asm(push(i2), push(_pmem_next), op(0x3c))
		__asm(push(i1), push((i3+4)), op(0x3c))
		__asm(push(i0), push((i3+8)), op(0x3c))
		i1 = i3
		__asm(jump, target("___Balloc_D2A__XprivateX__BB14_5_F"))
	__asm(lbl("___Balloc_D2A__XprivateX__BB14_4_F"))
		i3 =  (0)
		mstate.esp -= 8
		i2 =  (i2 & -8)
		__asm(push(i3), push(mstate.esp), op(0x3c))
		__asm(push(i2), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("___Balloc_D2A_state1"))
		i2 = mstate.eax
		mstate.esp += 8
		__asm(push(i1), push((i2+4)), op(0x3c))
		__asm(push(i0), push((i2+8)), op(0x3c))
		i1 = i2
	__asm(lbl("___Balloc_D2A__XprivateX__BB14_5_F"))
		i0 = i1
		i1 =  (0)
		__asm(push(i1), push((i0+16)), op(0x3c))
		__asm(push(i1), push((i0+12)), op(0x3c))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("___Balloc_D2A_errState"))
		throw("Invalid state in ___Balloc_D2A")
	}
}



// Async
public const ___d2b_D2A:int = regFunc(FSM___d2b_D2A.start)

public final class FSM___d2b_D2A extends Machine {

	public static function start():void {
			var result:FSM___d2b_D2A = new FSM___d2b_D2A
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
	public var i8:int, i9:int, i10:int

	public static const intRegCount:int = 11

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("___d2b_D2A_entry"))
		__asm(push(state), switchjump(
			"___d2b_D2A_errState",
			"___d2b_D2A_state0",
			"___d2b_D2A_state1",
			"___d2b_D2A_state2",
			"___d2b_D2A_state3"))
	__asm(lbl("___d2b_D2A_state0"))
	__asm(lbl("___d2b_D2A__XprivateX__BB15_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 8
		i0 =  ((__xasm<int>(push((_freelist+4)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i3 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i4 =  ((__xasm<int>(push((mstate.ebp+20)), op(0x37))))
		__asm(push(i0==0), iftrue, target("___d2b_D2A__XprivateX__BB15_2_F"))
	__asm(lbl("___d2b_D2A__XprivateX__BB15_1_F"))
		i5 =  ((__xasm<int>(push(i0), op(0x37))))
		__asm(push(i5), push((_freelist+4)), op(0x3c))
		__asm(jump, target("___d2b_D2A__XprivateX__BB15_5_F"))
	__asm(lbl("___d2b_D2A__XprivateX__BB15_2_F"))
		i0 =  (_private_mem)
		i5 =  ((__xasm<int>(push(_pmem_next), op(0x37))))
		i0 =  (i5 - i0)
		i0 =  (i0 >> 3)
		i0 =  (i0 + 4)
		__asm(push(uint(i0)>uint(288)), iftrue, target("___d2b_D2A__XprivateX__BB15_4_F"))
	__asm(lbl("___d2b_D2A__XprivateX__BB15_3_F"))
		i0 =  (1)
		i6 =  (i5 + 32)
		__asm(push(i6), push(_pmem_next), op(0x3c))
		__asm(push(i0), push((i5+4)), op(0x3c))
		i0 =  (2)
		__asm(push(i0), push((i5+8)), op(0x3c))
		i0 = i5
		__asm(jump, target("___d2b_D2A__XprivateX__BB15_5_F"))
	__asm(lbl("___d2b_D2A__XprivateX__BB15_4_F"))
		i0 =  (32)
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_malloc.start()
		return
	__asm(lbl("___d2b_D2A_state1"))
		i0 = mstate.eax
		mstate.esp += 4
		i5 =  (1)
		__asm(push(i5), push((i0+4)), op(0x3c))
		i5 =  (2)
		__asm(push(i5), push((i0+8)), op(0x3c))
	__asm(lbl("___d2b_D2A__XprivateX__BB15_5_F"))
		i5 =  (0)
		i6 =  (i2 & 2147483647)
		__asm(push(i5), push((i0+16)), op(0x3c))
		i7 =  ((uint(i6)<uint(1048576)) ? 0 : 1048576)
		i2 =  (i2 & 1048575)
		__asm(push(i5), push((i0+12)), op(0x3c))
		i2 =  (i2 | i7)
		__asm(push(i2), push((mstate.ebp+-4)), op(0x3c))
		__asm(push(i1), push((mstate.ebp+-8)), op(0x3c))
		i2 =  (i6 >>> 20)
		i5 =  (i0 + 20)
		i7 =  (i0 + 16)
		__asm(push(i1==0), iftrue, target("___d2b_D2A__XprivateX__BB15_11_F"))
	__asm(lbl("___d2b_D2A__XprivateX__BB15_6_F"))
		i1 =  ((mstate.ebp+-8))
		mstate.esp -= 4
		__asm(push(i1), push(mstate.esp), op(0x3c))
		mstate.esp -= 4;FSM___lo0bits_D2A.start()
	__asm(lbl("___d2b_D2A_state2"))
		i1 = mstate.eax
		mstate.esp += 4
		__asm(push(i1==0), iftrue, target("___d2b_D2A__XprivateX__BB15_8_F"))
	__asm(lbl("___d2b_D2A__XprivateX__BB15_7_F"))
		i8 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		i9 =  (32 - i1)
		i10 =  ((__xasm<int>(push((mstate.ebp+-8)), op(0x37))))
		i8 =  (i8 << i9)
		i8 =  (i8 | i10)
		__asm(push(i8), push(i5), op(0x3c))
		i5 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		i5 =  (i5 >>> i1)
		__asm(push(i5), push((mstate.ebp+-4)), op(0x3c))
		__asm(jump, target("___d2b_D2A__XprivateX__BB15_9_F"))
	__asm(lbl("___d2b_D2A__XprivateX__BB15_8_F"))
		i8 =  ((__xasm<int>(push((mstate.ebp+-8)), op(0x37))))
		__asm(push(i8), push(i5), op(0x3c))
	__asm(lbl("___d2b_D2A__XprivateX__BB15_9_F"))
		i5 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		__asm(push(i5), push((i0+24)), op(0x3c))
		i5 =  ((i5==0) ? 1 : 2)
		__asm(push(i5), push(i7), op(0x3c))
		__asm(push(uint(i6)<uint(1048576)), iftrue, target("___d2b_D2A__XprivateX__BB15_14_F"))
	__asm(lbl("___d2b_D2A__XprivateX__BB15_10_F"))
		i5 = i1
		__asm(jump, target("___d2b_D2A__XprivateX__BB15_13_F"))
	__asm(lbl("___d2b_D2A__XprivateX__BB15_11_F"))
		i1 =  ((mstate.ebp+-4))
		mstate.esp -= 4
		__asm(push(i1), push(mstate.esp), op(0x3c))
		mstate.esp -= 4;FSM___lo0bits_D2A.start()
	__asm(lbl("___d2b_D2A_state3"))
		i1 = mstate.eax
		mstate.esp += 4
		i8 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		__asm(push(i8), push(i5), op(0x3c))
		i5 =  (1)
		__asm(push(i5), push(i7), op(0x3c))
		i1 =  (i1 + 32)
		__asm(push(uint(i6)<uint(1048576)), iftrue, target("___d2b_D2A__XprivateX__BB15_20_F"))
	__asm(lbl("___d2b_D2A__XprivateX__BB15_12_F"))
		i5 = i1
		__asm(jump, target("___d2b_D2A__XprivateX__BB15_13_F"))
	__asm(lbl("___d2b_D2A__XprivateX__BB15_13_F"))
		i2 =  (i2 + i5)
		i2 =  (i2 + -1075)
		__asm(push(i2), push(i3), op(0x3c))
		i2 =  (53 - i5)
		__asm(push(i2), push(i4), op(0x3c))
		__asm(jump, target("___d2b_D2A__XprivateX__BB15_19_F"))
	__asm(lbl("___d2b_D2A__XprivateX__BB15_14_F"))
		i6 = i1
		__asm(jump, target("___d2b_D2A__XprivateX__BB15_15_F"))
	__asm(jump, target("___d2b_D2A__XprivateX__BB15_15_F"), lbl("___d2b_D2A__XprivateX__BB15_15_B"), label, lbl("___d2b_D2A__XprivateX__BB15_15_F")); 
		i1 = i5
		i5 = i6
		i2 =  (i2 + i5)
		i2 =  (i2 + -1074)
		i5 =  (i1 << 2)
		__asm(push(i2), push(i3), op(0x3c))
		i2 =  (i5 + i0)
		i2 =  ((__xasm<int>(push((i2+16)), op(0x37))))
		i3 =  ((uint(i2)<uint(65536)) ? 16 : 0)
		i2 =  (i2 << i3)
		i5 =  ((uint(i2)<uint(16777216)) ? 8 : 0)
		i2 =  (i2 << i5)
		i6 =  ((uint(i2)<uint(268435456)) ? 4 : 0)
		i3 =  (i5 | i3)
		i2 =  (i2 << i6)
		i5 =  ((uint(i2)<uint(1073741824)) ? 2 : 0)
		i3 =  (i3 | i6)
		i3 =  (i3 | i5)
		i2 =  (i2 << i5)
		__asm(push(i2>-1), iftrue, target("___d2b_D2A__XprivateX__BB15_17_F"))
	__asm(lbl("___d2b_D2A__XprivateX__BB15_16_F"))
		i2 = i3
		__asm(jump, target("___d2b_D2A__XprivateX__BB15_18_F"))
	__asm(lbl("___d2b_D2A__XprivateX__BB15_17_F"))
		i2 =  (i2 & 1073741824)
		i3 =  (i3 + 1)
		i2 =  ((i2==0) ? 32 : i3)
	__asm(lbl("___d2b_D2A__XprivateX__BB15_18_F"))
		i1 =  (i1 << 5)
		i1 =  (i1 - i2)
		__asm(push(i1), push(i4), op(0x3c))
	__asm(lbl("___d2b_D2A__XprivateX__BB15_19_F"))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("___d2b_D2A__XprivateX__BB15_20_F"))
		i5 =  (1)
		i6 = i1
		__asm(jump, target("___d2b_D2A__XprivateX__BB15_15_B"))
	__asm(lbl("___d2b_D2A_errState"))
		throw("Invalid state in ___d2b_D2A")
	}
}



// Async
public const ___pow5mult_D2A:int = regFunc(FSM___pow5mult_D2A.start)

public final class FSM___pow5mult_D2A extends Machine {

	public static function start():void {
			var result:FSM___pow5mult_D2A = new FSM___pow5mult_D2A
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int

	public static const intRegCount:int = 6

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("___pow5mult_D2A_entry"))
		__asm(push(state), switchjump(
			"___pow5mult_D2A_errState",
			"___pow5mult_D2A_state0",
			"___pow5mult_D2A_state1",
			"___pow5mult_D2A_state2",
			"___pow5mult_D2A_state3",
			"___pow5mult_D2A_state4"))
	__asm(lbl("___pow5mult_D2A_state0"))
	__asm(lbl("___pow5mult_D2A__XprivateX__BB16_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i2 =  (i0 & 3)
		__asm(push(i2!=0), iftrue, target("___pow5mult_D2A__XprivateX__BB16_2_F"))
	__asm(lbl("___pow5mult_D2A__XprivateX__BB16_1_F"))
		__asm(jump, target("___pow5mult_D2A__XprivateX__BB16_3_F"))
	__asm(lbl("___pow5mult_D2A__XprivateX__BB16_2_F"))
		i3 =  (_p05_2E_3773)
		i2 =  (i2 << 2)
		i2 =  (i2 + i3)
		i2 =  ((__xasm<int>(push((i2+-4)), op(0x37))))
		mstate.esp -= 12
		i3 =  (0)
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i2), push((mstate.esp+4)), op(0x3c))
		__asm(push(i3), push((mstate.esp+8)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM___multadd_D2A.start()
		return
	__asm(lbl("___pow5mult_D2A_state1"))
		i1 = mstate.eax
		mstate.esp += 12
	__asm(lbl("___pow5mult_D2A__XprivateX__BB16_3_F"))
		i2 =  (i0 >> 2)
		__asm(push(uint(i0)>uint(3)), iftrue, target("___pow5mult_D2A__XprivateX__BB16_6_F"))
	__asm(lbl("___pow5mult_D2A__XprivateX__BB16_4_F"))
		__asm(jump, target("___pow5mult_D2A__XprivateX__BB16_5_F"))
	__asm(jump, target("___pow5mult_D2A__XprivateX__BB16_5_F"), lbl("___pow5mult_D2A__XprivateX__BB16_5_B"), label, lbl("___pow5mult_D2A__XprivateX__BB16_5_F")); 
		i0 = i1
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("___pow5mult_D2A__XprivateX__BB16_6_F"))
		i0 =  ((__xasm<int>(push(_p5s), op(0x37))))
		__asm(push(i0==0), iftrue, target("___pow5mult_D2A__XprivateX__BB16_8_F"))
	__asm(lbl("___pow5mult_D2A__XprivateX__BB16_7_F"))
		__asm(jump, target("___pow5mult_D2A__XprivateX__BB16_14_F"))
	__asm(lbl("___pow5mult_D2A__XprivateX__BB16_8_F"))
		i0 =  ((__xasm<int>(push((_freelist+4)), op(0x37))))
		__asm(push(i0==0), iftrue, target("___pow5mult_D2A__XprivateX__BB16_10_F"))
	__asm(lbl("___pow5mult_D2A__XprivateX__BB16_9_F"))
		i3 =  ((__xasm<int>(push(i0), op(0x37))))
		__asm(push(i3), push((_freelist+4)), op(0x3c))
		__asm(jump, target("___pow5mult_D2A__XprivateX__BB16_13_F"))
	__asm(lbl("___pow5mult_D2A__XprivateX__BB16_10_F"))
		i0 =  (_private_mem)
		i3 =  ((__xasm<int>(push(_pmem_next), op(0x37))))
		i0 =  (i3 - i0)
		i0 =  (i0 >> 3)
		i0 =  (i0 + 4)
		__asm(push(uint(i0)>uint(288)), iftrue, target("___pow5mult_D2A__XprivateX__BB16_12_F"))
	__asm(lbl("___pow5mult_D2A__XprivateX__BB16_11_F"))
		i0 =  (1)
		i4 =  (i3 + 32)
		__asm(push(i4), push(_pmem_next), op(0x3c))
		__asm(push(i0), push((i3+4)), op(0x3c))
		i0 =  (2)
		__asm(push(i0), push((i3+8)), op(0x3c))
		i0 = i3
		__asm(jump, target("___pow5mult_D2A__XprivateX__BB16_13_F"))
	__asm(lbl("___pow5mult_D2A__XprivateX__BB16_12_F"))
		i0 =  (32)
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM_malloc.start()
		return
	__asm(lbl("___pow5mult_D2A_state2"))
		i0 = mstate.eax
		mstate.esp += 4
		i3 =  (1)
		__asm(push(i3), push((i0+4)), op(0x3c))
		i3 =  (2)
		__asm(push(i3), push((i0+8)), op(0x3c))
	__asm(lbl("___pow5mult_D2A__XprivateX__BB16_13_F"))
		i3 =  (0)
		__asm(push(i3), push((i0+12)), op(0x3c))
		i4 =  (625)
		__asm(push(i4), push((i0+20)), op(0x3c))
		i4 =  (1)
		__asm(push(i4), push((i0+16)), op(0x3c))
		__asm(push(i0), push(_p5s), op(0x3c))
		__asm(push(i3), push(i0), op(0x3c))
	__asm(jump, target("___pow5mult_D2A__XprivateX__BB16_14_F"), lbl("___pow5mult_D2A__XprivateX__BB16_14_B"), label, lbl("___pow5mult_D2A__XprivateX__BB16_14_F")); 
		i3 =  (i2 & 1)
		__asm(push(i3!=0), iftrue, target("___pow5mult_D2A__XprivateX__BB16_16_F"))
	__asm(lbl("___pow5mult_D2A__XprivateX__BB16_15_F"))
		__asm(jump, target("___pow5mult_D2A__XprivateX__BB16_19_F"))
	__asm(lbl("___pow5mult_D2A__XprivateX__BB16_16_F"))
		mstate.esp -= 8
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 3
		mstate.esp -= 4;FSM___mult_D2A.start()
		return
	__asm(lbl("___pow5mult_D2A_state3"))
		i3 = mstate.eax
		mstate.esp += 8
		__asm(push(i1!=0), iftrue, target("___pow5mult_D2A__XprivateX__BB16_18_F"))
	__asm(lbl("___pow5mult_D2A__XprivateX__BB16_17_F"))
		i1 = i3
		__asm(jump, target("___pow5mult_D2A__XprivateX__BB16_19_F"))
	__asm(lbl("___pow5mult_D2A__XprivateX__BB16_18_F"))
		i4 =  (_freelist)
		i5 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		i5 =  (i5 << 2)
		i4 =  (i4 + i5)
		i5 =  ((__xasm<int>(push(i4), op(0x37))))
		__asm(push(i5), push(i1), op(0x3c))
		__asm(push(i1), push(i4), op(0x3c))
		i1 = i3
	__asm(lbl("___pow5mult_D2A__XprivateX__BB16_19_F"))
		i3 =  (i2 >> 1)
		__asm(push(uint(i2)>uint(1)), iftrue, target("___pow5mult_D2A__XprivateX__BB16_21_F"))
	__asm(lbl("___pow5mult_D2A__XprivateX__BB16_20_F"))
		__asm(jump, target("___pow5mult_D2A__XprivateX__BB16_5_B"))
	__asm(lbl("___pow5mult_D2A__XprivateX__BB16_21_F"))
		i2 =  ((__xasm<int>(push(i0), op(0x37))))
		i4 = i0
		__asm(push(i2==0), iftrue, target("___pow5mult_D2A__XprivateX__BB16_23_F"))
	__asm(lbl("___pow5mult_D2A__XprivateX__BB16_22_F"))
		i0 = i2
		i2 = i3
		__asm(jump, target("___pow5mult_D2A__XprivateX__BB16_14_B"))
	__asm(lbl("___pow5mult_D2A__XprivateX__BB16_23_F"))
		i2 =  (0)
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 4
		mstate.esp -= 4;FSM___mult_D2A.start()
		return
	__asm(lbl("___pow5mult_D2A_state4"))
		i0 = mstate.eax
		mstate.esp += 8
		__asm(push(i0), push(i4), op(0x3c))
		__asm(push(i2), push(i0), op(0x3c))
		i2 = i3
		__asm(jump, target("___pow5mult_D2A__XprivateX__BB16_14_B"))
	__asm(lbl("___pow5mult_D2A_errState"))
		throw("Invalid state in ___pow5mult_D2A")
	}
}



// Async
public const ___mult_D2A:int = regFunc(FSM___mult_D2A.start)

public final class FSM___mult_D2A extends Machine {

	public static function start():void {
			var result:FSM___mult_D2A = new FSM___mult_D2A
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
	public var i8:int, i9:int, i10:int, i11:int, i12:int, i13:int, i14:int, i15:int
	public var i16:int, i17:int, i18:int, i19:int, i20:int

	public static const intRegCount:int = 21

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("___mult_D2A_entry"))
		__asm(push(state), switchjump(
			"___mult_D2A_errState",
			"___mult_D2A_state0",
			"___mult_D2A_state1",
			"___mult_D2A_state2"))
	__asm(lbl("___mult_D2A_state0"))
	__asm(lbl("___mult_D2A__XprivateX__BB17_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((__xasm<int>(push((i0+16)), op(0x37))))
		i3 =  ((__xasm<int>(push((i1+16)), op(0x37))))
		i4 =  ((i2<i3) ? i0 : i1)
		i0 =  ((i2<i3) ? i1 : i0)
		i1 =  ((__xasm<int>(push((i0+16)), op(0x37))))
		i2 =  ((__xasm<int>(push((i4+16)), op(0x37))))
		i3 =  ((__xasm<int>(push((i0+8)), op(0x37))))
		i5 =  (i2 + i1)
		i6 =  ((__xasm<int>(push((i0+4)), op(0x37))))
		i3 =  ((i3<i5) ? 1 : 0)
		i3 =  (i3 & 1)
		mstate.esp -= 4
		i3 =  (i3 + i6)
		__asm(push(i3), push(mstate.esp), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM___Balloc_D2A.start()
		return
	__asm(lbl("___mult_D2A_state1"))
		i3 = mstate.eax
		mstate.esp += 4
		i6 = i3
		__asm(push(i5<1), iftrue, target("___mult_D2A__XprivateX__BB17_4_F"))
	__asm(lbl("___mult_D2A__XprivateX__BB17_1_F"))
		i7 =  (0)
		i8 =  (i6 + 20)
	__asm(jump, target("___mult_D2A__XprivateX__BB17_2_F"), lbl("___mult_D2A__XprivateX__BB17_2_B"), label, lbl("___mult_D2A__XprivateX__BB17_2_F")); 
		i9 =  (0)
		__asm(push(i9), push(i8), op(0x3c))
		i8 =  (i8 + 4)
		i7 =  (i7 + 1)
		__asm(push(i7>=i5), iftrue, target("___mult_D2A__XprivateX__BB17_4_F"))
	__asm(lbl("___mult_D2A__XprivateX__BB17_3_F"))
		__asm(jump, target("___mult_D2A__XprivateX__BB17_2_B"))
	__asm(lbl("___mult_D2A__XprivateX__BB17_4_F"))
		__asm(push(i2<1), iftrue, target("___mult_D2A__XprivateX__BB17_13_F"))
	__asm(lbl("___mult_D2A__XprivateX__BB17_5_F"))
		i7 =  (0)
		i8 = i7
	__asm(jump, target("___mult_D2A__XprivateX__BB17_6_F"), lbl("___mult_D2A__XprivateX__BB17_6_B"), label, lbl("___mult_D2A__XprivateX__BB17_6_F")); 
		i9 =  (i4 + i8)
		i9 =  ((__xasm<int>(push((i9+20)), op(0x37))))
		__asm(push(i9==0), iftrue, target("___mult_D2A__XprivateX__BB17_11_F"))
	__asm(lbl("___mult_D2A__XprivateX__BB17_7_F"))
		i10 =  (20)
		i11 =  (0)
		i12 =  (i6 + i8)
		i13 = i11
		i14 = i11
		i15 = i11
	__asm(jump, target("___mult_D2A__XprivateX__BB17_8_F"), lbl("___mult_D2A__XprivateX__BB17_8_B"), label, lbl("___mult_D2A__XprivateX__BB17_8_F")); 
		i16 =  (0)
		i17 =  (i0 + i10)
		mstate.esp -= 16
		i17 =  ((__xasm<int>(push(i17), op(0x37))))
		__asm(push(i17), push(mstate.esp), op(0x3c))
		__asm(push(i16), push((mstate.esp+4)), op(0x3c))
		__asm(push(i9), push((mstate.esp+8)), op(0x3c))
		__asm(push(i11), push((mstate.esp+12)), op(0x3c))
		i17 =  (i12 + i10)
		i18 =  ((__xasm<int>(push(i17), op(0x37))))
		mstate.esp -= 4;(mstate.funcs[___muldi3])()
	__asm(lbl("___mult_D2A_state2"))
		i19 = mstate.eax
		i20 = mstate.edx
		i14 =  __addc(i18, i14)
		i13 =  __adde(i13, i16)
		i14 =  __addc(i14, i19)
		i13 =  __adde(i13, i20)
		__asm(push(i14), push(i17), op(0x3c))
		i10 =  (i10 + 4)
		i14 =  (i15 + 1)
		mstate.esp += 16
		__asm(push(i14>=i1), iftrue, target("___mult_D2A__XprivateX__BB17_10_F"))
	__asm(lbl("___mult_D2A__XprivateX__BB17_9_F"))
		i15 = i14
		i14 = i13
		i13 = i16
		__asm(jump, target("___mult_D2A__XprivateX__BB17_8_B"))
	__asm(lbl("___mult_D2A__XprivateX__BB17_10_F"))
		i9 =  (i7 + i14)
		i9 =  (i9 << 2)
		i9 =  (i3 + i9)
		__asm(push(i13), push((i9+20)), op(0x3c))
	__asm(lbl("___mult_D2A__XprivateX__BB17_11_F"))
		i8 =  (i8 + 4)
		i7 =  (i7 + 1)
		__asm(push(i7>=i2), iftrue, target("___mult_D2A__XprivateX__BB17_13_F"))
	__asm(lbl("___mult_D2A__XprivateX__BB17_12_F"))
		__asm(jump, target("___mult_D2A__XprivateX__BB17_6_B"))
	__asm(lbl("___mult_D2A__XprivateX__BB17_13_F"))
		__asm(push(i5>0), iftrue, target("___mult_D2A__XprivateX__BB17_18_F"))
	__asm(lbl("___mult_D2A__XprivateX__BB17_14_F"))
		i1 = i5
		__asm(jump, target("___mult_D2A__XprivateX__BB17_21_F"))
	__asm(lbl("___mult_D2A__XprivateX__BB17_15_B"), label)
		i0 =  (i2 + -1)
		i2 =  (i1 + 1)
		__asm(push(i0<1), iftrue, target("___mult_D2A__XprivateX__BB17_17_F"))
	__asm(lbl("___mult_D2A__XprivateX__BB17_16_F"))
		i1 = i0
		i0 = i2
		__asm(jump, target("___mult_D2A__XprivateX__BB17_19_F"))
	__asm(lbl("___mult_D2A__XprivateX__BB17_17_F"))
		i1 = i0
		__asm(jump, target("___mult_D2A__XprivateX__BB17_21_F"))
	__asm(lbl("___mult_D2A__XprivateX__BB17_18_F"))
		i0 =  (0)
		i1 =  (i2 + i1)
		__asm(jump, target("___mult_D2A__XprivateX__BB17_19_F"))
	__asm(lbl("___mult_D2A__XprivateX__BB17_19_F"))
		i2 = i1
		i1 = i0
		i0 =  (i1 ^ -1)
		i0 =  (i5 + i0)
		i0 =  (i0 << 2)
		i0 =  (i3 + i0)
		i0 =  ((__xasm<int>(push((i0+20)), op(0x37))))
		__asm(push(i0==0), iftrue, target("___mult_D2A__XprivateX__BB17_15_B"))
	__asm(lbl("___mult_D2A__XprivateX__BB17_20_F"))
		i1 = i2
	__asm(lbl("___mult_D2A__XprivateX__BB17_21_F"))
		i0 = i1
		__asm(push(i0), push((i3+16)), op(0x3c))
		mstate.eax = i3
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("___mult_D2A_errState"))
		throw("Invalid state in ___mult_D2A")
	}
}



// Async
public const ___lshift_D2A:int = regFunc(FSM___lshift_D2A.start)

public final class FSM___lshift_D2A extends Machine {

	public static function start():void {
			var result:FSM___lshift_D2A = new FSM___lshift_D2A
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
	public var i8:int, i9:int, i10:int, i11:int, i12:int, i13:int, i14:int, i15:int

	public static const intRegCount:int = 16

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("___lshift_D2A_entry"))
		__asm(push(state), switchjump(
			"___lshift_D2A_errState",
			"___lshift_D2A_state0",
			"___lshift_D2A_state1"))
	__asm(lbl("___lshift_D2A_state0"))
	__asm(lbl("___lshift_D2A__XprivateX__BB18_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((__xasm<int>(push((i0+16)), op(0x37))))
		i3 =  (i1 >> 5)
		i2 =  (i2 + i3)
		i4 =  ((__xasm<int>(push((i0+4)), op(0x37))))
		i5 =  ((__xasm<int>(push((i0+8)), op(0x37))))
		i6 =  (i2 + 1)
		i7 =  (i0 + 16)
		i8 =  (i0 + 4)
		i9 = i0
		__asm(push(i6>i5), iftrue, target("___lshift_D2A__XprivateX__BB18_2_F"))
	__asm(lbl("___lshift_D2A__XprivateX__BB18_1_F"))
		__asm(jump, target("___lshift_D2A__XprivateX__BB18_6_F"))
	__asm(lbl("___lshift_D2A__XprivateX__BB18_2_F"))
		i10 =  (-1)
	__asm(jump, target("___lshift_D2A__XprivateX__BB18_3_F"), lbl("___lshift_D2A__XprivateX__BB18_3_B"), label, lbl("___lshift_D2A__XprivateX__BB18_3_F")); 
		i10 =  (i10 + 1)
		i5 =  (i5 << 1)
		__asm(push(i6<=i5), iftrue, target("___lshift_D2A__XprivateX__BB18_5_F"))
	__asm(lbl("___lshift_D2A__XprivateX__BB18_4_F"))
		__asm(jump, target("___lshift_D2A__XprivateX__BB18_3_B"))
	__asm(lbl("___lshift_D2A__XprivateX__BB18_5_F"))
		i4 =  (i10 + i4)
		i4 =  (i4 + 1)
	__asm(lbl("___lshift_D2A__XprivateX__BB18_6_F"))
		mstate.esp -= 4
		__asm(push(i4), push(mstate.esp), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM___Balloc_D2A.start()
		return
	__asm(lbl("___lshift_D2A_state1"))
		i4 = mstate.eax
		mstate.esp += 4
		i5 =  (i4 + 20)
		i10 = i4
		__asm(push(i3>0), iftrue, target("___lshift_D2A__XprivateX__BB18_8_F"))
	__asm(lbl("___lshift_D2A__XprivateX__BB18_7_F"))
		i3 = i5
		__asm(jump, target("___lshift_D2A__XprivateX__BB18_12_F"))
	__asm(lbl("___lshift_D2A__XprivateX__BB18_8_F"))
		i5 =  (0)
		i4 =  (i4 + 20)
	__asm(jump, target("___lshift_D2A__XprivateX__BB18_9_F"), lbl("___lshift_D2A__XprivateX__BB18_9_B"), label, lbl("___lshift_D2A__XprivateX__BB18_9_F")); 
		i11 =  (0)
		__asm(push(i11), push(i4), op(0x3c))
		i4 =  (i4 + 4)
		i5 =  (i5 + 1)
		__asm(push(i5==i3), iftrue, target("___lshift_D2A__XprivateX__BB18_11_F"))
	__asm(lbl("___lshift_D2A__XprivateX__BB18_10_F"))
		__asm(jump, target("___lshift_D2A__XprivateX__BB18_9_B"))
	__asm(lbl("___lshift_D2A__XprivateX__BB18_11_F"))
		i3 =  (i5 << 2)
		i3 =  (i10 + i3)
		i3 =  (i3 + 20)
	__asm(lbl("___lshift_D2A__XprivateX__BB18_12_F"))
		i4 =  ((__xasm<int>(push(i7), op(0x37))))
		i1 =  (i1 & 31)
		i5 = i3
		__asm(push(i1!=0), iftrue, target("___lshift_D2A__XprivateX__BB18_16_F"))
	__asm(lbl("___lshift_D2A__XprivateX__BB18_13_F"))
		i1 =  (0)
		i3 = i1
		__asm(jump, target("___lshift_D2A__XprivateX__BB18_14_F"))
	__asm(jump, target("___lshift_D2A__XprivateX__BB18_14_F"), lbl("___lshift_D2A__XprivateX__BB18_14_B"), label, lbl("___lshift_D2A__XprivateX__BB18_14_F")); 
		i6 =  (i9 + i3)
		i6 =  ((__xasm<int>(push((i6+20)), op(0x37))))
		i7 =  (i5 + i3)
		__asm(push(i6), push(i7), op(0x3c))
		i3 =  (i3 + 4)
		i1 =  (i1 + 1)
		__asm(push(i1>=i4), iftrue, target("___lshift_D2A__XprivateX__BB18_24_F"))
		__asm(jump, target("___lshift_D2A__XprivateX__BB18_15_F"))
	__asm(lbl("___lshift_D2A__XprivateX__BB18_15_F"))
		__asm(jump, target("___lshift_D2A__XprivateX__BB18_14_B"))
	__asm(lbl("___lshift_D2A__XprivateX__BB18_16_F"))
		i7 =  (0)
		i11 =  (32 - i1)
		i12 = i7
		i13 = i7
	__asm(jump, target("___lshift_D2A__XprivateX__BB18_17_F"), lbl("___lshift_D2A__XprivateX__BB18_17_B"), label, lbl("___lshift_D2A__XprivateX__BB18_17_F")); 
		i14 =  (i9 + i12)
		i15 =  ((__xasm<int>(push((i14+20)), op(0x37))))
		i15 =  (i15 << i1)
		i7 =  (i15 | i7)
		i15 =  (i5 + i12)
		__asm(push(i7), push(i15), op(0x3c))
		i7 =  ((__xasm<int>(push((i14+20)), op(0x37))))
		i12 =  (i12 + 4)
		i13 =  (i13 + 1)
		i7 =  (i7 >>> i11)
		__asm(push(i13>=i4), iftrue, target("___lshift_D2A__XprivateX__BB18_19_F"))
	__asm(lbl("___lshift_D2A__XprivateX__BB18_18_F"))
		__asm(jump, target("___lshift_D2A__XprivateX__BB18_17_B"))
	__asm(lbl("___lshift_D2A__XprivateX__BB18_19_F"))
		i1 =  (i13 << 2)
		i1 =  (i3 + i1)
		__asm(push(i7), push(i1), op(0x3c))
		__asm(push(i7==0), iftrue, target("___lshift_D2A__XprivateX__BB18_24_F"))
	__asm(lbl("___lshift_D2A__XprivateX__BB18_20_F"))
		__asm(push(i6), push((i10+16)), op(0x3c))
		__asm(push(i0==0), iftrue, target("___lshift_D2A__XprivateX__BB18_22_F"))
	__asm(jump, target("___lshift_D2A__XprivateX__BB18_21_F"), lbl("___lshift_D2A__XprivateX__BB18_21_B"), label, lbl("___lshift_D2A__XprivateX__BB18_21_F")); 
		i1 =  (_freelist)
		i2 =  ((__xasm<int>(push(i8), op(0x37))))
		i2 =  (i2 << 2)
		i1 =  (i1 + i2)
		i2 =  ((__xasm<int>(push(i1), op(0x37))))
		__asm(push(i2), push(i0), op(0x3c))
		__asm(push(i0), push(i1), op(0x3c))
	__asm(lbl("___lshift_D2A__XprivateX__BB18_22_F"))
		__asm(jump, target("___lshift_D2A__XprivateX__BB18_23_F"))
	__asm(jump, target("___lshift_D2A__XprivateX__BB18_23_F"), lbl("___lshift_D2A__XprivateX__BB18_23_B"), label, lbl("___lshift_D2A__XprivateX__BB18_23_F")); 
		mstate.eax = i10
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("___lshift_D2A__XprivateX__BB18_24_F"))
		__asm(push(i2), push((i10+16)), op(0x3c))
		__asm(push(i0==0), iftrue, target("___lshift_D2A__XprivateX__BB18_23_B"))
	__asm(lbl("___lshift_D2A__XprivateX__BB18_25_F"))
		__asm(jump, target("___lshift_D2A__XprivateX__BB18_21_B"))
	__asm(lbl("___lshift_D2A_errState"))
		throw("Invalid state in ___lshift_D2A")
	}
}



// Async
public const ___multadd_D2A:int = regFunc(FSM___multadd_D2A.start)

public final class FSM___multadd_D2A extends Machine {

	public static function start():void {
			var result:FSM___multadd_D2A = new FSM___multadd_D2A
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
	public var i8:int, i9:int, i10:int, i11:int

	public static const intRegCount:int = 12

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("___multadd_D2A_entry"))
		__asm(push(state), switchjump(
			"___multadd_D2A_errState",
			"___multadd_D2A_state0",
			"___multadd_D2A_state1",
			"___multadd_D2A_state2"))
	__asm(lbl("___multadd_D2A_state0"))
	__asm(lbl("___multadd_D2A__XprivateX__BB19_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (0)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i3 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i4 =  ((__xasm<int>(push((i1+16)), op(0x37))))
		i5 =  (i3 >> 31)
		i6 =  (i2 >> 31)
		i7 =  (i1 + 20)
		i8 =  (i1 + 16)
	__asm(jump, target("___multadd_D2A__XprivateX__BB19_1_F"), lbl("___multadd_D2A__XprivateX__BB19_1_B"), label, lbl("___multadd_D2A__XprivateX__BB19_1_F")); 
		i9 =  (0)
		mstate.esp -= 16
		i10 =  ((__xasm<int>(push(i7), op(0x37))))
		__asm(push(i10), push(mstate.esp), op(0x3c))
		__asm(push(i9), push((mstate.esp+4)), op(0x3c))
		__asm(push(i3), push((mstate.esp+8)), op(0x3c))
		__asm(push(i5), push((mstate.esp+12)), op(0x3c))
		mstate.esp -= 4;(mstate.funcs[___muldi3])()
	__asm(lbl("___multadd_D2A_state1"))
		i10 = mstate.eax
		i11 = mstate.edx
		i2 =  __addc(i10, i2)
		i6 =  __adde(i11, i6)
		__asm(push(i2), push(i7), op(0x3c))
		i2 =  (i7 + 4)
		i0 =  (i0 + 1)
		mstate.esp += 16
		i7 = i6
		__asm(push(i0>=i4), iftrue, target("___multadd_D2A__XprivateX__BB19_3_F"))
	__asm(lbl("___multadd_D2A__XprivateX__BB19_2_F"))
		i7 = i2
		i2 = i6
		i6 = i9
		__asm(jump, target("___multadd_D2A__XprivateX__BB19_1_B"))
	__asm(lbl("___multadd_D2A__XprivateX__BB19_3_F"))
		i0 =  ((i7==0) ? 1 : 0)
		__asm(push(i0!=0), iftrue, target("___multadd_D2A__XprivateX__BB19_10_F"))
	__asm(lbl("___multadd_D2A__XprivateX__BB19_4_F"))
		i0 =  ((__xasm<int>(push((i1+8)), op(0x37))))
		__asm(push(i0<=i4), iftrue, target("___multadd_D2A__XprivateX__BB19_6_F"))
	__asm(lbl("___multadd_D2A__XprivateX__BB19_5_F"))
		__asm(jump, target("___multadd_D2A__XprivateX__BB19_9_F"))
	__asm(lbl("___multadd_D2A__XprivateX__BB19_6_F"))
		i0 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		mstate.esp -= 4
		i0 =  (i0 + 1)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM___Balloc_D2A.start()
		return
	__asm(lbl("___multadd_D2A_state2"))
		i0 = mstate.eax
		mstate.esp += 4
		i2 =  ((__xasm<int>(push(i8), op(0x37))))
		i3 =  (i0 + 12)
		i2 =  (i2 << 2)
		i5 =  (i1 + 12)
		i2 =  (i2 + 8)
		memcpy(i3, i5, i2)
		i2 =  (i1 + 4)
		__asm(push(i1!=0), iftrue, target("___multadd_D2A__XprivateX__BB19_8_F"))
	__asm(lbl("___multadd_D2A__XprivateX__BB19_7_F"))
		i1 = i0
		__asm(jump, target("___multadd_D2A__XprivateX__BB19_9_F"))
	__asm(lbl("___multadd_D2A__XprivateX__BB19_8_F"))
		i3 =  (_freelist)
		i2 =  ((__xasm<int>(push(i2), op(0x37))))
		i2 =  (i2 << 2)
		i2 =  (i3 + i2)
		i3 =  ((__xasm<int>(push(i2), op(0x37))))
		__asm(push(i3), push(i1), op(0x3c))
		__asm(push(i1), push(i2), op(0x3c))
		i1 = i0
	__asm(lbl("___multadd_D2A__XprivateX__BB19_9_F"))
		i0 =  (i4 << 2)
		i0 =  (i1 + i0)
		__asm(push(i6), push((i0+20)), op(0x3c))
		i0 =  (i4 + 1)
		__asm(push(i0), push((i1+16)), op(0x3c))
	__asm(lbl("___multadd_D2A__XprivateX__BB19_10_F"))
		mstate.eax = i1
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("___multadd_D2A_errState"))
		throw("Invalid state in ___multadd_D2A")
	}
}



// Async
public const ___diff_D2A:int = regFunc(FSM___diff_D2A.start)

public final class FSM___diff_D2A extends Machine {

	public static function start():void {
			var result:FSM___diff_D2A = new FSM___diff_D2A
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
	public var i8:int, i9:int, i10:int, i11:int, i12:int, i13:int

	public static const intRegCount:int = 14

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("___diff_D2A_entry"))
		__asm(push(state), switchjump(
			"___diff_D2A_errState",
			"___diff_D2A_state0",
			"___diff_D2A_state1",
			"___diff_D2A_state2"))
	__asm(lbl("___diff_D2A_state0"))
	__asm(lbl("___diff_D2A__XprivateX__BB20_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((__xasm<int>(push((i0+16)), op(0x37))))
		i3 =  ((__xasm<int>(push((i1+16)), op(0x37))))
		i4 =  (i2 - i3)
		__asm(push(i2==i3), iftrue, target("___diff_D2A__XprivateX__BB20_2_F"))
	__asm(lbl("___diff_D2A__XprivateX__BB20_1_F"))
		i3 = i4
		__asm(jump, target("___diff_D2A__XprivateX__BB20_7_F"))
	__asm(lbl("___diff_D2A__XprivateX__BB20_2_F"))
		i2 =  (0)
	__asm(jump, target("___diff_D2A__XprivateX__BB20_3_F"), lbl("___diff_D2A__XprivateX__BB20_3_B"), label, lbl("___diff_D2A__XprivateX__BB20_3_F")); 
		i4 =  (i2 ^ -1)
		i4 =  (i3 + i4)
		i5 =  (i4 << 2)
		i6 =  (i0 + i5)
		i5 =  (i1 + i5)
		i6 =  ((__xasm<int>(push((i6+20)), op(0x37))))
		i5 =  ((__xasm<int>(push((i5+20)), op(0x37))))
		__asm(push(i6==i5), iftrue, target("___diff_D2A__XprivateX__BB20_5_F"))
	__asm(lbl("___diff_D2A__XprivateX__BB20_4_F"))
		i2 =  ((uint(i6)<uint(i5)) ? -1 : 1)
		i3 = i2
		__asm(jump, target("___diff_D2A__XprivateX__BB20_7_F"))
	__asm(lbl("___diff_D2A__XprivateX__BB20_5_F"))
		i2 =  (i2 + 1)
		__asm(push(i4>0), iftrue, target("___diff_D2A__XprivateX__BB20_31_F"))
	__asm(lbl("___diff_D2A__XprivateX__BB20_6_F"))
		i2 =  (0)
		i3 = i2
		__asm(jump, target("___diff_D2A__XprivateX__BB20_7_F"))
	__asm(lbl("___diff_D2A__XprivateX__BB20_7_F"))
		i2 = i3
		__asm(push(i2!=0), iftrue, target("___diff_D2A__XprivateX__BB20_14_F"))
	__asm(lbl("___diff_D2A__XprivateX__BB20_8_F"))
		i0 =  ((__xasm<int>(push(_freelist), op(0x37))))
		__asm(push(i0==0), iftrue, target("___diff_D2A__XprivateX__BB20_10_F"))
	__asm(lbl("___diff_D2A__XprivateX__BB20_9_F"))
		i1 =  ((__xasm<int>(push(i0), op(0x37))))
		__asm(push(i1), push(_freelist), op(0x3c))
		__asm(jump, target("___diff_D2A__XprivateX__BB20_13_F"))
	__asm(lbl("___diff_D2A__XprivateX__BB20_10_F"))
		i0 =  (_private_mem)
		i1 =  ((__xasm<int>(push(_pmem_next), op(0x37))))
		i0 =  (i1 - i0)
		i0 =  (i0 >> 3)
		i0 =  (i0 + 3)
		__asm(push(uint(i0)>uint(288)), iftrue, target("___diff_D2A__XprivateX__BB20_12_F"))
	__asm(lbl("___diff_D2A__XprivateX__BB20_11_F"))
		i0 =  (0)
		i2 =  (i1 + 24)
		__asm(push(i2), push(_pmem_next), op(0x3c))
		__asm(push(i0), push((i1+4)), op(0x3c))
		i0 =  (1)
		__asm(push(i0), push((i1+8)), op(0x3c))
		i0 = i1
		__asm(jump, target("___diff_D2A__XprivateX__BB20_13_F"))
	__asm(lbl("___diff_D2A__XprivateX__BB20_12_F"))
		i0 =  (24)
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_malloc.start()
		return
	__asm(lbl("___diff_D2A_state1"))
		i0 = mstate.eax
		mstate.esp += 4
		i1 =  (0)
		__asm(push(i1), push((i0+4)), op(0x3c))
		i1 =  (1)
		__asm(push(i1), push((i0+8)), op(0x3c))
	__asm(lbl("___diff_D2A__XprivateX__BB20_13_F"))
		i1 =  (0)
		__asm(push(i1), push((i0+12)), op(0x3c))
		i2 =  (1)
		__asm(push(i2), push((i0+16)), op(0x3c))
		__asm(push(i1), push((i0+20)), op(0x3c))
		mstate.eax = i0
		__asm(jump, target("___diff_D2A__XprivateX__BB20_30_F"))
	__asm(lbl("___diff_D2A__XprivateX__BB20_14_F"))
		i3 =  (20)
		i4 =  ((i2<0) ? i1 : i0)
		i5 =  ((__xasm<int>(push((i4+4)), op(0x37))))
		mstate.esp -= 4
		__asm(push(i5), push(mstate.esp), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM___Balloc_D2A.start()
		return
	__asm(lbl("___diff_D2A_state2"))
		i5 = mstate.eax
		mstate.esp += 4
		i6 =  (i2 >>> 31)
		__asm(push(i6), push((i5+12)), op(0x3c))
		i0 =  ((i2<0) ? i0 : i1)
		i1 =  ((__xasm<int>(push((i4+16)), op(0x37))))
		i2 =  ((__xasm<int>(push((i0+16)), op(0x37))))
		i6 =  (0)
		i7 = i6
		i8 = i6
		i9 = i5
		i10 = i4
	__asm(jump, target("___diff_D2A__XprivateX__BB20_15_F"), lbl("___diff_D2A__XprivateX__BB20_15_B"), label, lbl("___diff_D2A__XprivateX__BB20_15_F")); 
		i11 =  (0)
		i12 =  (i4 + i3)
		i13 =  (i0 + i3)
		i12 =  ((__xasm<int>(push(i12), op(0x37))))
		i13 =  ((__xasm<int>(push(i13), op(0x37))))
		i12 =  __subc(i12, i13)
		i13 =  __sube(i11, i11)
		i6 =  __subc(i12, i6)
		i7 =  __sube(i13, i7)
		i12 =  (i9 + i3)
		__asm(push(i6), push(i12), op(0x3c))
		i6 =  (i7 & 1)
		i3 =  (i3 + 4)
		i7 =  (i8 + 1)
		__asm(push(i7>=i2), iftrue, target("___diff_D2A__XprivateX__BB20_20_F"))
	__asm(lbl("___diff_D2A__XprivateX__BB20_16_F"))
		i8 = i7
		i7 = i11
		__asm(jump, target("___diff_D2A__XprivateX__BB20_15_B"))
	__asm(lbl("___diff_D2A__XprivateX__BB20_17_B"), label)
		i0 =  (0)
		__asm(jump, target("___diff_D2A__XprivateX__BB20_18_F"))
	__asm(jump, target("___diff_D2A__XprivateX__BB20_18_F"), lbl("___diff_D2A__XprivateX__BB20_18_B"), label, lbl("___diff_D2A__XprivateX__BB20_18_F")); 
		i2 =  (0)
		i3 =  (i7 + i0)
		i3 =  (i3 << 2)
		i4 =  (i10 + i3)
		i4 =  ((__xasm<int>(push((i4+20)), op(0x37))))
		i6 =  __subc(i4, i6)
		i11 =  __sube(i2, i11)
		i3 =  (i5 + i3)
		i0 =  (i0 + 1)
		__asm(push(i6), push((i3+20)), op(0x3c))
		i6 =  (i11 & 1)
		i11 =  (i7 + i0)
		__asm(push(i11>=i1), iftrue, target("___diff_D2A__XprivateX__BB20_25_F"))
	__asm(lbl("___diff_D2A__XprivateX__BB20_19_F"))
		i11 = i2
		__asm(jump, target("___diff_D2A__XprivateX__BB20_18_B"))
	__asm(lbl("___diff_D2A__XprivateX__BB20_20_F"))
		i0 =  (i7 << 2)
		i0 =  (i5 + i0)
		i0 =  (i0 + 20)
		__asm(push(i7<i1), iftrue, target("___diff_D2A__XprivateX__BB20_17_B"))
	__asm(lbl("___diff_D2A__XprivateX__BB20_21_F"))
		i11 = i0
		__asm(jump, target("___diff_D2A__XprivateX__BB20_26_F"))
	__asm(lbl("___diff_D2A__XprivateX__BB20_22_B"), label)
		i2 =  (-1)
		i11 =  (i11 + -8)
		i0 = i11
		i11 = i2
		__asm(jump, target("___diff_D2A__XprivateX__BB20_23_F"))
	__asm(jump, target("___diff_D2A__XprivateX__BB20_23_F"), lbl("___diff_D2A__XprivateX__BB20_23_B"), label, lbl("___diff_D2A__XprivateX__BB20_23_F")); 
		i2 =  ((__xasm<int>(push(i0), op(0x37))))
		i0 =  (i0 + -4)
		i11 =  (i11 + 1)
		__asm(push(i2!=0), iftrue, target("___diff_D2A__XprivateX__BB20_28_F"))
	__asm(lbl("___diff_D2A__XprivateX__BB20_24_F"))
		__asm(jump, target("___diff_D2A__XprivateX__BB20_23_B"))
	__asm(lbl("___diff_D2A__XprivateX__BB20_25_F"))
		i11 =  (i11 << 2)
		i11 =  (i5 + i11)
		i11 =  (i11 + 20)
	__asm(lbl("___diff_D2A__XprivateX__BB20_26_F"))
		i0 =  ((__xasm<int>(push((i11+-4)), op(0x37))))
		__asm(push(i0==0), iftrue, target("___diff_D2A__XprivateX__BB20_22_B"))
	__asm(lbl("___diff_D2A__XprivateX__BB20_27_F"))
		i11 = i1
		__asm(jump, target("___diff_D2A__XprivateX__BB20_29_F"))
	__asm(lbl("___diff_D2A__XprivateX__BB20_28_F"))
		i11 =  (i1 - i11)
		i11 =  (i11 + -1)
	__asm(lbl("___diff_D2A__XprivateX__BB20_29_F"))
		i0 = i11
		__asm(push(i0), push((i5+16)), op(0x3c))
		mstate.eax = i5
	__asm(lbl("___diff_D2A__XprivateX__BB20_30_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("___diff_D2A__XprivateX__BB20_31_F"))
		__asm(jump, target("___diff_D2A__XprivateX__BB20_3_B"))
	__asm(lbl("___diff_D2A_errState"))
		throw("Invalid state in ___diff_D2A")
	}
}



// Sync
public const _localeconv:int = regFunc(FSM_localeconv.start)

public final class FSM_localeconv extends Machine {

	public static function start():void {
		var i0:int


		__asm(label, lbl("_localeconv_entry"))
	__asm(lbl("_localeconv__XprivateX__BB21_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push(___mlocale_changed_2E_b), op(0x35))))
		__asm(push(i0!=0), iftrue, target("_localeconv__XprivateX__BB21_2_F"))
	__asm(lbl("_localeconv__XprivateX__BB21_1_F"))
		i0 =  (1)
		__asm(push(i0), push(___mlocale_changed_2E_b), op(0x3a))
	__asm(lbl("_localeconv__XprivateX__BB21_2_F"))
		i0 =  ((__xasm<int>(push(___nlocale_changed_2E_b), op(0x35))))
		__asm(push(i0!=0), iftrue, target("_localeconv__XprivateX__BB21_4_F"))
	__asm(lbl("_localeconv__XprivateX__BB21_3_F"))
		i0 =  (__2E_str20159)
		__asm(push(i0), push(_ret_2E_1494_2E_0), op(0x3c))
		i0 =  (__2E_str45)
		__asm(push(i0), push(_ret_2E_1494_2E_1), op(0x3c))
		i0 =  (_numempty22)
		__asm(push(i0), push(_ret_2E_1494_2E_2), op(0x3c))
		i0 =  (1)
		__asm(push(i0), push(___nlocale_changed_2E_b), op(0x3a))
	__asm(lbl("_localeconv__XprivateX__BB21_4_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const ___lo0bits_D2A:int = regFunc(FSM___lo0bits_D2A.start)

public final class FSM___lo0bits_D2A extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int, i4:int


		__asm(label, lbl("___lo0bits_D2A_entry"))
	__asm(lbl("___lo0bits_D2A__XprivateX__BB22_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push(i0), op(0x37))))
		i2 =  (i1 & 7)
		__asm(push(i2==0), iftrue, target("___lo0bits_D2A__XprivateX__BB22_5_F"))
	__asm(lbl("___lo0bits_D2A__XprivateX__BB22_1_F"))
		i2 =  (i1 & 1)
		__asm(push(i2==0), iftrue, target("___lo0bits_D2A__XprivateX__BB22_3_F"))
	__asm(lbl("___lo0bits_D2A__XprivateX__BB22_2_F"))
		i0 =  (0)
		__asm(jump, target("___lo0bits_D2A__XprivateX__BB22_12_F"))
	__asm(lbl("___lo0bits_D2A__XprivateX__BB22_3_F"))
		i2 =  (i1 & 2)
		__asm(push(i2==0), iftrue, target("___lo0bits_D2A__XprivateX__BB22_9_F"))
	__asm(lbl("___lo0bits_D2A__XprivateX__BB22_4_F"))
		i2 =  (1)
		i1 =  (i1 >>> 1)
		__asm(jump, target("___lo0bits_D2A__XprivateX__BB22_10_F"))
	__asm(lbl("___lo0bits_D2A__XprivateX__BB22_5_F"))
		i2 =  (i1 & 65535)
		i2 =  ((i2==0) ? 16 : 0)
		i1 =  (i1 >>> i2)
		i3 =  (i1 & 255)
		i3 =  ((i3==0) ? 8 : 0)
		i1 =  (i1 >>> i3)
		i4 =  (i1 & 15)
		i4 =  ((i4==0) ? 4 : 0)
		i1 =  (i1 >>> i4)
		i2 =  (i3 | i2)
		i3 =  (i1 & 3)
		i3 =  ((i3==0) ? 2 : 0)
		i2 =  (i2 | i4)
		i1 =  (i1 >>> i3)
		i2 =  (i2 | i3)
		i3 =  (i1 & 1)
		__asm(push(i3==0), iftrue, target("___lo0bits_D2A__XprivateX__BB22_7_F"))
	__asm(lbl("___lo0bits_D2A__XprivateX__BB22_6_F"))
		__asm(jump, target("___lo0bits_D2A__XprivateX__BB22_10_F"))
	__asm(lbl("___lo0bits_D2A__XprivateX__BB22_7_F"))
		i3 =  (i1 >>> 1)
		i2 =  (i2 + 1)
		__asm(push(uint(i1)<uint(2)), iftrue, target("___lo0bits_D2A__XprivateX__BB22_11_F"))
	__asm(lbl("___lo0bits_D2A__XprivateX__BB22_8_F"))
		i1 = i3
		__asm(jump, target("___lo0bits_D2A__XprivateX__BB22_10_F"))
	__asm(lbl("___lo0bits_D2A__XprivateX__BB22_9_F"))
		i2 =  (2)
		i1 =  (i1 >>> 2)
		__asm(jump, target("___lo0bits_D2A__XprivateX__BB22_10_F"))
	__asm(lbl("___lo0bits_D2A__XprivateX__BB22_10_F"))
		__asm(push(i1), push(i0), op(0x3c))
		mstate.eax = i2
		__asm(jump, target("___lo0bits_D2A__XprivateX__BB22_13_F"))
	__asm(lbl("___lo0bits_D2A__XprivateX__BB22_11_F"))
		i0 =  (32)
		__asm(jump, target("___lo0bits_D2A__XprivateX__BB22_12_F"))
	__asm(lbl("___lo0bits_D2A__XprivateX__BB22_12_F"))
		mstate.eax = i0
	__asm(lbl("___lo0bits_D2A__XprivateX__BB22_13_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const ___rshift_D2A:int = regFunc(FSM___rshift_D2A.start)

public final class FSM___rshift_D2A extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
		var i8:int, i9:int, i10:int, i11:int, i12:int


		__asm(label, lbl("___rshift_D2A_entry"))
	__asm(lbl("___rshift_D2A__XprivateX__BB23_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((__xasm<int>(push((i0+16)), op(0x37))))
		i3 =  (i0 + 16)
		i4 =  (i1 >> 5)
		i5 =  (i0 + 20)
		i6 = i0
		__asm(push(i2>i4), iftrue, target("___rshift_D2A__XprivateX__BB23_2_F"))
	__asm(jump, target("___rshift_D2A__XprivateX__BB23_1_F"), lbl("___rshift_D2A__XprivateX__BB23_1_B"), label, lbl("___rshift_D2A__XprivateX__BB23_1_F")); 
		i1 = i5
		__asm(jump, target("___rshift_D2A__XprivateX__BB23_17_F"))
	__asm(lbl("___rshift_D2A__XprivateX__BB23_2_F"))
		i1 =  (i1 & 31)
		__asm(push(i1!=0), iftrue, target("___rshift_D2A__XprivateX__BB23_7_F"))
	__asm(lbl("___rshift_D2A__XprivateX__BB23_3_F"))
		__asm(push(i4>=i2), iftrue, target("___rshift_D2A__XprivateX__BB23_1_B"))
	__asm(lbl("___rshift_D2A__XprivateX__BB23_4_F"))
		i1 =  (0)
		i7 =  (i4 << 2)
		i6 =  (i6 + 20)
		__asm(jump, target("___rshift_D2A__XprivateX__BB23_5_F"))
	__asm(jump, target("___rshift_D2A__XprivateX__BB23_5_F"), lbl("___rshift_D2A__XprivateX__BB23_5_B"), label, lbl("___rshift_D2A__XprivateX__BB23_5_F")); 
		i8 =  (i7 + i6)
		i8 =  ((__xasm<int>(push(i8), op(0x37))))
		__asm(push(i8), push(i6), op(0x3c))
		i6 =  (i6 + 4)
		i1 =  (i1 + 1)
		i8 =  (i4 + i1)
		__asm(push(i8>=i2), iftrue, target("___rshift_D2A__XprivateX__BB23_16_F"))
		__asm(jump, target("___rshift_D2A__XprivateX__BB23_6_F"))
	__asm(lbl("___rshift_D2A__XprivateX__BB23_6_F"))
		__asm(jump, target("___rshift_D2A__XprivateX__BB23_5_B"))
	__asm(lbl("___rshift_D2A__XprivateX__BB23_7_F"))
		i7 =  (i4 << 2)
		i7 =  (i0 + i7)
		i7 =  ((__xasm<int>(push((i7+20)), op(0x37))))
		i7 =  (i7 >>> i1)
		i8 =  (32 - i1)
		i9 =  (i4 + 1)
		__asm(push(i9<i2), iftrue, target("___rshift_D2A__XprivateX__BB23_9_F"))
	__asm(lbl("___rshift_D2A__XprivateX__BB23_8_F"))
		i1 = i5
		i6 = i7
		__asm(jump, target("___rshift_D2A__XprivateX__BB23_13_F"))
	__asm(lbl("___rshift_D2A__XprivateX__BB23_9_F"))
		i9 =  (0)
		i10 =  (i4 << 2)
		i4 =  (i4 + 1)
	__asm(jump, target("___rshift_D2A__XprivateX__BB23_10_F"), lbl("___rshift_D2A__XprivateX__BB23_10_B"), label, lbl("___rshift_D2A__XprivateX__BB23_10_F")); 
		i11 =  (i10 + i6)
		i12 =  ((__xasm<int>(push((i11+24)), op(0x37))))
		i12 =  (i12 << i8)
		i7 =  (i12 | i7)
		__asm(push(i7), push((i6+20)), op(0x3c))
		i7 =  ((__xasm<int>(push((i11+24)), op(0x37))))
		i6 =  (i6 + 4)
		i9 =  (i9 + 1)
		i7 =  (i7 >>> i1)
		i11 =  (i4 + i9)
		__asm(push(i11>=i2), iftrue, target("___rshift_D2A__XprivateX__BB23_12_F"))
	__asm(lbl("___rshift_D2A__XprivateX__BB23_11_F"))
		__asm(jump, target("___rshift_D2A__XprivateX__BB23_10_B"))
	__asm(lbl("___rshift_D2A__XprivateX__BB23_12_F"))
		i1 =  (i9 << 2)
		i1 =  (i0 + i1)
		i1 =  (i1 + 20)
		i6 = i7
	__asm(lbl("___rshift_D2A__XprivateX__BB23_13_F"))
		i2 = i6
		__asm(push(i2), push(i1), op(0x3c))
		__asm(push(i2!=0), iftrue, target("___rshift_D2A__XprivateX__BB23_15_F"))
	__asm(lbl("___rshift_D2A__XprivateX__BB23_14_F"))
		__asm(jump, target("___rshift_D2A__XprivateX__BB23_17_F"))
	__asm(lbl("___rshift_D2A__XprivateX__BB23_15_F"))
		i1 =  (i1 + 4)
		__asm(jump, target("___rshift_D2A__XprivateX__BB23_17_F"))
	__asm(lbl("___rshift_D2A__XprivateX__BB23_16_F"))
		i1 =  (i1 << 2)
		i1 =  (i0 + i1)
		i1 =  (i1 + 20)
	__asm(lbl("___rshift_D2A__XprivateX__BB23_17_F"))
		i0 =  (i0 + 20)
		i0 =  (i1 - i0)
		i1 =  (i0 >> 2)
		__asm(push(i1), push(i3), op(0x3c))
		__asm(push(uint(i0)>uint(3)), iftrue, target("___rshift_D2A__XprivateX__BB23_19_F"))
	__asm(lbl("___rshift_D2A__XprivateX__BB23_18_F"))
		i0 =  (0)
		__asm(push(i0), push(i5), op(0x3c))
	__asm(lbl("___rshift_D2A__XprivateX__BB23_19_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const ___trailz_D2A:int = regFunc(FSM___trailz_D2A.start)

public final class FSM___trailz_D2A extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int


		__asm(label, lbl("___trailz_D2A_entry"))
	__asm(lbl("___trailz_D2A__XprivateX__BB24_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 4
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+16)), op(0x37))))
		i2 =  (i0 + 20)
		i3 =  (i1 << 2)
		i3 =  (i2 + i3)
		__asm(push(i1>0), iftrue, target("___trailz_D2A__XprivateX__BB24_2_F"))
	__asm(lbl("___trailz_D2A__XprivateX__BB24_1_F"))
		i0 =  (0)
		i1 = i2
		__asm(jump, target("___trailz_D2A__XprivateX__BB24_7_F"))
	__asm(lbl("___trailz_D2A__XprivateX__BB24_2_F"))
		i2 =  (0)
		i0 =  (i0 + 20)
		i4 = i2
		__asm(jump, target("___trailz_D2A__XprivateX__BB24_3_F"))
	__asm(jump, target("___trailz_D2A__XprivateX__BB24_3_F"), lbl("___trailz_D2A__XprivateX__BB24_3_B"), label, lbl("___trailz_D2A__XprivateX__BB24_3_F")); 
		i5 =  ((__xasm<int>(push(i0), op(0x37))))
		i6 = i0
		__asm(push(i5==0), iftrue, target("___trailz_D2A__XprivateX__BB24_4_F"))
		__asm(jump, target("___trailz_D2A__XprivateX__BB24_6_F"))
	__asm(lbl("___trailz_D2A__XprivateX__BB24_4_F"))
		i4 =  (i4 + 32)
		i0 =  (i0 + 4)
		i2 =  (i2 + 1)
		i5 = i0
		__asm(push(i2<i1), iftrue, target("___trailz_D2A__XprivateX__BB24_3_B"))
	__asm(lbl("___trailz_D2A__XprivateX__BB24_5_F"))
		i0 = i4
		i1 = i5
		__asm(jump, target("___trailz_D2A__XprivateX__BB24_7_F"))
	__asm(lbl("___trailz_D2A__XprivateX__BB24_6_F"))
		i0 = i4
		i1 = i6
	__asm(lbl("___trailz_D2A__XprivateX__BB24_7_F"))
		__asm(push(uint(i1)>=uint(i3)), iftrue, target("___trailz_D2A__XprivateX__BB24_9_F"))
	__asm(lbl("___trailz_D2A__XprivateX__BB24_8_F"))
		i2 =  ((mstate.ebp+-4))
		i1 =  ((__xasm<int>(push(i1), op(0x37))))
		__asm(push(i1), push((mstate.ebp+-4)), op(0x3c))
		mstate.esp -= 4
		__asm(push(i2), push(mstate.esp), op(0x3c))
		mstate.esp -= 4;FSM___lo0bits_D2A.start()
	__asm(lbl("___trailz_D2A_state1"))
		i1 = mstate.eax
		mstate.esp += 4
		i0 =  (i1 + i0)
	__asm(lbl("___trailz_D2A__XprivateX__BB24_9_F"))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const ___b2d_D2A:int = regFunc(FSM___b2d_D2A.start)

public final class FSM___b2d_D2A extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
		var i8:int, i9:int

		var f0:Number

		__asm(label, lbl("___b2d_D2A_entry"))
	__asm(lbl("___b2d_D2A__XprivateX__BB25_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 8
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+16)), op(0x37))))
		i2 =  (i1 + -1)
		i3 =  (i2 << 2)
		i4 =  (i0 + 20)
		i3 =  (i4 + i3)
		i5 =  ((__xasm<int>(push(i3), op(0x37))))
		i6 =  ((uint(i5)<uint(65536)) ? 16 : 0)
		i7 =  (i5 << i6)
		i8 =  ((uint(i7)<uint(16777216)) ? 8 : 0)
		i7 =  (i7 << i8)
		i9 =  ((uint(i7)<uint(268435456)) ? 4 : 0)
		i6 =  (i8 | i6)
		i7 =  (i7 << i9)
		i8 =  ((uint(i7)<uint(1073741824)) ? 2 : 0)
		i6 =  (i6 | i9)
		i6 =  (i6 | i8)
		i7 =  (i7 << i8)
		i8 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		__asm(push(i7>-1), iftrue, target("___b2d_D2A__XprivateX__BB25_2_F"))
	__asm(lbl("___b2d_D2A__XprivateX__BB25_1_F"))
		__asm(jump, target("___b2d_D2A__XprivateX__BB25_3_F"))
	__asm(lbl("___b2d_D2A__XprivateX__BB25_2_F"))
		i7 =  (i7 & 1073741824)
		i6 =  (i6 + 1)
		i6 =  ((i7==0) ? 32 : i6)
	__asm(lbl("___b2d_D2A__XprivateX__BB25_3_F"))
		i7 =  (32 - i6)
		__asm(push(i7), push(i8), op(0x3c))
		__asm(push(i6>10), iftrue, target("___b2d_D2A__XprivateX__BB25_7_F"))
	__asm(lbl("___b2d_D2A__XprivateX__BB25_4_F"))
		i3 =  (i6 + 21)
		i4 =  (11 - i6)
		i3 =  (i5 << i3)
		i5 =  (i5 >>> i4)
		__asm(push(i2>0), iftrue, target("___b2d_D2A__XprivateX__BB25_6_F"))
	__asm(lbl("___b2d_D2A__XprivateX__BB25_5_F"))
		i4 = i5
		__asm(jump, target("___b2d_D2A__XprivateX__BB25_16_F"))
	__asm(lbl("___b2d_D2A__XprivateX__BB25_6_F"))
		i1 =  (i1 << 2)
		i0 =  (i1 + i0)
		i0 =  ((__xasm<int>(push((i0+12)), op(0x37))))
		i4 =  (i0 >>> i4)
		i3 =  (i4 | i3)
		i4 = i5
		__asm(jump, target("___b2d_D2A__XprivateX__BB25_16_F"))
	__asm(lbl("___b2d_D2A__XprivateX__BB25_7_F"))
		__asm(push(i2>0), iftrue, target("___b2d_D2A__XprivateX__BB25_9_F"))
	__asm(lbl("___b2d_D2A__XprivateX__BB25_8_F"))
		i0 =  (0)
		i1 = i3
		__asm(jump, target("___b2d_D2A__XprivateX__BB25_10_F"))
	__asm(lbl("___b2d_D2A__XprivateX__BB25_9_F"))
		i1 =  (i1 << 2)
		i0 =  (i1 + i0)
		i3 =  ((__xasm<int>(push((i0+12)), op(0x37))))
		i0 =  (i0 + 12)
		i1 = i0
		i0 = i3
	__asm(lbl("___b2d_D2A__XprivateX__BB25_10_F"))
		i3 = i1
		i1 =  (i6 + -11)
		__asm(push(i6!=11), iftrue, target("___b2d_D2A__XprivateX__BB25_12_F"))
	__asm(lbl("___b2d_D2A__XprivateX__BB25_11_F"))
		i4 = i5
		i3 = i0
		__asm(jump, target("___b2d_D2A__XprivateX__BB25_16_F"))
	__asm(lbl("___b2d_D2A__XprivateX__BB25_12_F"))
		i2 =  (43 - i6)
		i6 =  (i0 >>> i2)
		i5 =  (i5 << i1)
		i5 =  (i6 | i5)
		__asm(push(uint(i3)>uint(i4)), iftrue, target("___b2d_D2A__XprivateX__BB25_14_F"))
	__asm(lbl("___b2d_D2A__XprivateX__BB25_13_F"))
		i3 =  (0)
		__asm(jump, target("___b2d_D2A__XprivateX__BB25_15_F"))
	__asm(lbl("___b2d_D2A__XprivateX__BB25_14_F"))
		i3 =  ((__xasm<int>(push((i3+-4)), op(0x37))))
	__asm(lbl("___b2d_D2A__XprivateX__BB25_15_F"))
		i3 =  (i3 >>> i2)
		i4 =  (i0 << i1)
		i3 =  (i3 | i4)
		i4 = i5
	__asm(lbl("___b2d_D2A__XprivateX__BB25_16_F"))
		i0 = i4
		i1 = i3
		i0 =  (i0 | 1072693248)
		__asm(push(i1), push((mstate.ebp+-8)), op(0x3c))
		__asm(push(i0), push((mstate.ebp+-4)), op(0x3c))
		f0 =  ((__xasm<Number>(push((mstate.ebp+-8)), op(0x39))))
		mstate.st0 = f0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Async
public const _fprintf:int = regFunc(FSM_fprintf.start)

public final class FSM_fprintf extends Machine {

	public static function start():void {
			var result:FSM_fprintf = new FSM_fprintf
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int

	public static const intRegCount:int = 3

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("_fprintf_entry"))
		__asm(push(state), switchjump(
			"_fprintf_errState",
			"_fprintf_state0",
			"_fprintf_state1"))
	__asm(lbl("_fprintf_state0"))
	__asm(lbl("_fprintf__XprivateX__BB26_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 4
		i0 =  (mstate.ebp + 16)
		__asm(push(i0), push((mstate.ebp+-4)), op(0x3c))
		mstate.esp -= 12
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i2), push((mstate.esp+4)), op(0x3c))
		__asm(push(i0), push((mstate.esp+8)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM___vfprintf.start()
		return
	__asm(lbl("_fprintf_state1"))
		i0 = mstate.eax
		mstate.esp += 12
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("_fprintf_errState"))
		throw("Invalid state in _fprintf")
	}
}



// Sync
public const _getenv:int = regFunc(FSM_getenv.start)

public final class FSM_getenv extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
		var i8:int


		__asm(label, lbl("_getenv_entry"))
	__asm(lbl("_getenv__XprivateX__BB27_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		__asm(push(i0!=0), iftrue, target("_getenv__XprivateX__BB27_3_F"))
	__asm(jump, target("_getenv__XprivateX__BB27_1_F"), lbl("_getenv__XprivateX__BB27_1_B"), label, lbl("_getenv__XprivateX__BB27_1_F")); 
		i0 =  (0)
		__asm(jump, target("_getenv__XprivateX__BB27_2_F"))
	__asm(jump, target("_getenv__XprivateX__BB27_2_F"), lbl("_getenv__XprivateX__BB27_2_B"), label, lbl("_getenv__XprivateX__BB27_2_F")); 
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	__asm(lbl("_getenv__XprivateX__BB27_3_F"))
		i1 =  ((__xasm<int>(push(_environ), op(0x37))))
		i2 = i1
		__asm(push(i1==0), iftrue, target("_getenv__XprivateX__BB27_1_B"))
	__asm(lbl("_getenv__XprivateX__BB27_4_F"))
		i3 = i0
		__asm(jump, target("_getenv__XprivateX__BB27_6_F"))
	__asm(lbl("_getenv__XprivateX__BB27_5_B"), label)
		i3 =  (i3 + 1)
	__asm(lbl("_getenv__XprivateX__BB27_6_F"))
		i4 =  ((__xasm<int>(push(i3), op(0x35))))
		i5 = i3
		__asm(push(i4==0), iftrue, target("_getenv__XprivateX__BB27_8_F"))
	__asm(lbl("_getenv__XprivateX__BB27_7_F"))
		i4 =  (i4 & 255)
		__asm(push(i4!=61), iftrue, target("_getenv__XprivateX__BB27_5_B"))
	__asm(lbl("_getenv__XprivateX__BB27_8_F"))
		i2 =  ((__xasm<int>(push(i2), op(0x37))))
		__asm(push(i2==0), iftrue, target("_getenv__XprivateX__BB27_1_B"))
	__asm(lbl("_getenv__XprivateX__BB27_9_F"))
		i1 =  (i1 + 4)
		i3 =  (i5 - i0)
	__asm(jump, target("_getenv__XprivateX__BB27_10_F"), lbl("_getenv__XprivateX__BB27_10_B"), label, lbl("_getenv__XprivateX__BB27_10_F")); 
		i4 =  (0)
		i5 = i1
		__asm(jump, target("_getenv__XprivateX__BB27_13_F"))
	__asm(lbl("_getenv__XprivateX__BB27_11_B"), label)
		i4 =  ((__xasm<int>(push(i4), op(0x35))))
		i8 =  (i7 + 1)
		i6 =  (i6 & 255)
		__asm(push(i6!=i4), iftrue, target("_getenv__XprivateX__BB27_21_F"))
	__asm(lbl("_getenv__XprivateX__BB27_12_F"))
		i4 = i8
		__asm(jump, target("_getenv__XprivateX__BB27_13_F"))
	__asm(lbl("_getenv__XprivateX__BB27_13_F"))
		i7 = i4
		i4 =  (i0 + i7)
		i6 =  (i2 + i7)
		__asm(push(i3==i7), iftrue, target("_getenv__XprivateX__BB27_22_F"))
	__asm(lbl("_getenv__XprivateX__BB27_14_F"))
		i6 =  ((__xasm<int>(push(i6), op(0x35))))
		__asm(push(i6==0), iftrue, target("_getenv__XprivateX__BB27_15_F"))
		__asm(jump, target("_getenv__XprivateX__BB27_11_B"))
	__asm(lbl("_getenv__XprivateX__BB27_15_F"))
		i2 =  (i2 + i7)
	__asm(jump, target("_getenv__XprivateX__BB27_16_F"), lbl("_getenv__XprivateX__BB27_16_B"), label, lbl("_getenv__XprivateX__BB27_16_F")); 
		__asm(push(i3!=i7), iftrue, target("_getenv__XprivateX__BB27_19_F"))
	__asm(lbl("_getenv__XprivateX__BB27_17_F"))
		i4 =  ((__xasm<int>(push(i2), op(0x35))))
		i2 =  (i2 + 1)
		__asm(push(i4!=61), iftrue, target("_getenv__XprivateX__BB27_19_F"))
	__asm(lbl("_getenv__XprivateX__BB27_18_F"))
		i0 = i2
		__asm(jump, target("_getenv__XprivateX__BB27_2_B"))
	__asm(lbl("_getenv__XprivateX__BB27_19_F"))
		i2 =  ((__xasm<int>(push(i5), op(0x37))))
		i1 =  (i1 + 4)
		__asm(push(i2==0), iftrue, target("_getenv__XprivateX__BB27_1_B"))
	__asm(lbl("_getenv__XprivateX__BB27_20_F"))
		__asm(jump, target("_getenv__XprivateX__BB27_10_B"))
	__asm(lbl("_getenv__XprivateX__BB27_21_F"))
		i2 =  (i2 + i8)
		__asm(jump, target("_getenv__XprivateX__BB27_16_B"))
	__asm(lbl("_getenv__XprivateX__BB27_22_F"))
		i2 =  (i2 + i7)
		__asm(jump, target("_getenv__XprivateX__BB27_16_B"))
	}
}



// Sync
public const _bcopy:int = regFunc(FSM_bcopy.start)

public final class FSM_bcopy extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
		var i8:int, i9:int


		__asm(label, lbl("_bcopy_entry"))
	__asm(lbl("_bcopy__XprivateX__BB28_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i3 = i0
		i4 = i1
		__asm(push(i2==0), iftrue, target("_bcopy__XprivateX__BB28_39_F"))
	__asm(lbl("_bcopy__XprivateX__BB28_1_F"))
		__asm(push(i1==i0), iftrue, target("_bcopy__XprivateX__BB28_39_F"))
	__asm(lbl("_bcopy__XprivateX__BB28_2_F"))
		__asm(push(uint(i1)>=uint(i0)), iftrue, target("_bcopy__XprivateX__BB28_23_F"))
	__asm(lbl("_bcopy__XprivateX__BB28_3_F"))
		i5 =  (i4 | i3)
		i5 =  (i5 & 3)
		__asm(push(i5!=0), iftrue, target("_bcopy__XprivateX__BB28_5_F"))
	__asm(lbl("_bcopy__XprivateX__BB28_4_F"))
		__asm(jump, target("_bcopy__XprivateX__BB28_13_F"))
	__asm(lbl("_bcopy__XprivateX__BB28_5_F"))
		i5 =  (i4 ^ i3)
		i5 =  (i5 & 3)
		__asm(push(i5!=0), iftrue, target("_bcopy__XprivateX__BB28_7_F"))
	__asm(lbl("_bcopy__XprivateX__BB28_6_F"))
		__asm(push(uint(i2)>uint(3)), iftrue, target("_bcopy__XprivateX__BB28_8_F"))
	__asm(lbl("_bcopy__XprivateX__BB28_7_F"))
		i5 = i2
		__asm(jump, target("_bcopy__XprivateX__BB28_9_F"))
	__asm(lbl("_bcopy__XprivateX__BB28_8_F"))
		i5 =  (i3 & 3)
		i5 =  (4 - i5)
	__asm(lbl("_bcopy__XprivateX__BB28_9_F"))
		i6 =  (0)
		i2 =  (i2 - i5)
	__asm(jump, target("_bcopy__XprivateX__BB28_10_F"), lbl("_bcopy__XprivateX__BB28_10_B"), label, lbl("_bcopy__XprivateX__BB28_10_F")); 
		i7 =  (i3 + i6)
		i7 =  ((__xasm<int>(push(i7), op(0x35))))
		i8 =  (i4 + i6)
		__asm(push(i7), push(i8), op(0x3a))
		i6 =  (i6 + 1)
		__asm(push(i6==i5), iftrue, target("_bcopy__XprivateX__BB28_12_F"))
	__asm(lbl("_bcopy__XprivateX__BB28_11_F"))
		__asm(jump, target("_bcopy__XprivateX__BB28_10_B"))
	__asm(lbl("_bcopy__XprivateX__BB28_12_F"))
		i0 =  (i0 + i6)
		i1 =  (i1 + i6)
	__asm(lbl("_bcopy__XprivateX__BB28_13_F"))
		i3 =  (i2 >>> 2)
		i4 = i0
		i5 = i1
		__asm(push(uint(i2)>uint(3)), iftrue, target("_bcopy__XprivateX__BB28_15_F"))
	__asm(lbl("_bcopy__XprivateX__BB28_14_F"))
		__asm(jump, target("_bcopy__XprivateX__BB28_19_F"))
	__asm(lbl("_bcopy__XprivateX__BB28_15_F"))
		i6 =  (0)
		i7 = i6
	__asm(jump, target("_bcopy__XprivateX__BB28_16_F"), lbl("_bcopy__XprivateX__BB28_16_B"), label, lbl("_bcopy__XprivateX__BB28_16_F")); 
		i8 =  (i4 + i7)
		i8 =  ((__xasm<int>(push(i8), op(0x37))))
		i9 =  (i5 + i7)
		__asm(push(i8), push(i9), op(0x3c))
		i7 =  (i7 + 4)
		i6 =  (i6 + 1)
		__asm(push(i6==i3), iftrue, target("_bcopy__XprivateX__BB28_18_F"))
	__asm(lbl("_bcopy__XprivateX__BB28_17_F"))
		__asm(jump, target("_bcopy__XprivateX__BB28_16_B"))
	__asm(lbl("_bcopy__XprivateX__BB28_18_F"))
		i1 =  (i1 + i7)
		i0 =  (i0 + i7)
	__asm(lbl("_bcopy__XprivateX__BB28_19_F"))
		i2 =  (i2 & 3)
		__asm(push(i2==0), iftrue, target("_bcopy__XprivateX__BB28_39_F"))
	__asm(lbl("_bcopy__XprivateX__BB28_20_F"))
		i3 =  (0)
	__asm(jump, target("_bcopy__XprivateX__BB28_21_F"), lbl("_bcopy__XprivateX__BB28_21_B"), label, lbl("_bcopy__XprivateX__BB28_21_F")); 
		i4 =  (i0 + i3)
		i4 =  ((__xasm<int>(push(i4), op(0x35))))
		i5 =  (i1 + i3)
		__asm(push(i4), push(i5), op(0x3a))
		i3 =  (i3 + 1)
		__asm(push(i3==i2), iftrue, target("_bcopy__XprivateX__BB28_39_F"))
	__asm(lbl("_bcopy__XprivateX__BB28_22_F"))
		__asm(jump, target("_bcopy__XprivateX__BB28_21_B"))
	__asm(lbl("_bcopy__XprivateX__BB28_23_F"))
		i3 =  (i1 + i2)
		i4 =  (i0 + i2)
		i5 =  (i4 | i3)
		i6 = i3
		i7 = i4
		i5 =  (i5 & 3)
		__asm(push(i5!=0), iftrue, target("_bcopy__XprivateX__BB28_25_F"))
	__asm(lbl("_bcopy__XprivateX__BB28_24_F"))
		i0 = i2
		i1 = i7
		i2 = i6
		__asm(jump, target("_bcopy__XprivateX__BB28_29_F"))
	__asm(lbl("_bcopy__XprivateX__BB28_25_F"))
		i5 =  (0)
		i3 =  (i4 ^ i3)
		i3 =  (i3 & 3)
		i3 =  ((i3!=0) ? 1 : 0)
		i6 =  ((uint(i2)<uint(5)) ? 1 : 0)
		i3 =  (i3 | i6)
		i3 =  (i3 & 1)
		i4 =  (i4 & 3)
		i3 =  ((i3!=0) ? i2 : i4)
		i4 =  (i2 - i3)
	__asm(jump, target("_bcopy__XprivateX__BB28_26_F"), lbl("_bcopy__XprivateX__BB28_26_B"), label, lbl("_bcopy__XprivateX__BB28_26_F")); 
		i6 =  (i5 ^ -1)
		i6 =  (i6 + i2)
		i7 =  (i0 + i6)
		i8 =  ((__xasm<int>(push(i7), op(0x35))))
		i6 =  (i1 + i6)
		__asm(push(i8), push(i6), op(0x3a))
		i5 =  (i5 + 1)
		__asm(push(i5==i3), iftrue, target("_bcopy__XprivateX__BB28_28_F"))
	__asm(lbl("_bcopy__XprivateX__BB28_27_F"))
		__asm(jump, target("_bcopy__XprivateX__BB28_26_B"))
	__asm(lbl("_bcopy__XprivateX__BB28_28_F"))
		i0 = i4
		i1 = i7
		i2 = i6
	__asm(lbl("_bcopy__XprivateX__BB28_29_F"))
		i3 =  (i0 >>> 2)
		i4 = i2
		i5 = i1
		__asm(push(uint(i0)>uint(3)), iftrue, target("_bcopy__XprivateX__BB28_31_F"))
	__asm(lbl("_bcopy__XprivateX__BB28_30_F"))
		i3 = i1
		i4 = i2
		__asm(jump, target("_bcopy__XprivateX__BB28_35_F"))
	__asm(lbl("_bcopy__XprivateX__BB28_31_F"))
		i1 =  (0)
		i2 = i1
	__asm(jump, target("_bcopy__XprivateX__BB28_32_F"), lbl("_bcopy__XprivateX__BB28_32_B"), label, lbl("_bcopy__XprivateX__BB28_32_F")); 
		i6 =  (i5 + i2)
		i6 =  ((__xasm<int>(push((i6+-4)), op(0x37))))
		i7 =  (i4 + i2)
		__asm(push(i6), push((i7+-4)), op(0x3c))
		i2 =  (i2 + -4)
		i1 =  (i1 + 1)
		__asm(push(i1==i3), iftrue, target("_bcopy__XprivateX__BB28_34_F"))
	__asm(lbl("_bcopy__XprivateX__BB28_33_F"))
		__asm(jump, target("_bcopy__XprivateX__BB28_32_B"))
	__asm(lbl("_bcopy__XprivateX__BB28_34_F"))
		i4 =  (i4 + i2)
		i3 =  (i5 + i2)
	__asm(lbl("_bcopy__XprivateX__BB28_35_F"))
		i1 = i3
		i2 = i4
		i0 =  (i0 & 3)
		__asm(push(i0==0), iftrue, target("_bcopy__XprivateX__BB28_39_F"))
	__asm(lbl("_bcopy__XprivateX__BB28_36_F"))
		i3 =  (0)
	__asm(jump, target("_bcopy__XprivateX__BB28_37_F"), lbl("_bcopy__XprivateX__BB28_37_B"), label, lbl("_bcopy__XprivateX__BB28_37_F")); 
		i4 =  (i3 ^ -1)
		i5 =  (i1 + i4)
		i5 =  ((__xasm<int>(push(i5), op(0x35))))
		i4 =  (i2 + i4)
		__asm(push(i5), push(i4), op(0x3a))
		i3 =  (i3 + 1)
		__asm(push(i3==i0), iftrue, target("_bcopy__XprivateX__BB28_39_F"))
	__asm(lbl("_bcopy__XprivateX__BB28_38_F"))
		__asm(jump, target("_bcopy__XprivateX__BB28_37_B"))
	__asm(lbl("_bcopy__XprivateX__BB28_39_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Async
public const _free:int = regFunc(FSM_free.start)

public final class FSM_free extends Machine {

	public static function start():void {
			var result:FSM_free = new FSM_free
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("_free_entry"))
		__asm(push(state), switchjump(
			"_free_errState",
			"_free_state0",
			"_free_state1"))
	__asm(lbl("_free_state0"))
	__asm(lbl("_free__XprivateX__BB29_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (0)
		mstate.esp -= 8
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("_free_state1"))
		i0 = mstate.eax
		mstate.esp += 8
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("_free_errState"))
		throw("Invalid state in _free")
	}
}



// Sync
public const __UTF8_wcrtomb:int = regFunc(FSM__UTF8_wcrtomb.start)

public final class FSM__UTF8_wcrtomb extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int


		__asm(label, lbl("__UTF8_wcrtomb_entry"))
	__asm(lbl("__UTF8_wcrtomb__XprivateX__BB30_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  ((__xasm<int>(push((i0+4)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i3 = i1
		__asm(push(i0==0), iftrue, target("__UTF8_wcrtomb__XprivateX__BB30_2_F"))
	__asm(lbl("__UTF8_wcrtomb__XprivateX__BB30_1_F"))
		i1 =  (22)
		__asm(push(i1), push(_val_2E_1440), op(0x3c))
		i1 =  (-1)
		mstate.eax = i1
		__asm(jump, target("__UTF8_wcrtomb__XprivateX__BB30_23_F"))
	__asm(lbl("__UTF8_wcrtomb__XprivateX__BB30_2_F"))
		__asm(push(i1==0), iftrue, target("__UTF8_wcrtomb__XprivateX__BB30_21_F"))
	__asm(lbl("__UTF8_wcrtomb__XprivateX__BB30_3_F"))
		__asm(push(uint(i2)>uint(127)), iftrue, target("__UTF8_wcrtomb__XprivateX__BB30_5_F"))
	__asm(lbl("__UTF8_wcrtomb__XprivateX__BB30_4_F"))
		i3 =  (1)
		__asm(push(i2), push(i1), op(0x3a))
		mstate.eax = i3
		__asm(jump, target("__UTF8_wcrtomb__XprivateX__BB30_23_F"))
	__asm(lbl("__UTF8_wcrtomb__XprivateX__BB30_5_F"))
		__asm(push(uint(i2)>uint(2047)), iftrue, target("__UTF8_wcrtomb__XprivateX__BB30_7_F"))
	__asm(lbl("__UTF8_wcrtomb__XprivateX__BB30_6_F"))
		i0 =  (192)
		i4 =  (2)
		__asm(jump, target("__UTF8_wcrtomb__XprivateX__BB30_15_F"))
	__asm(lbl("__UTF8_wcrtomb__XprivateX__BB30_7_F"))
		__asm(push(uint(i2)>uint(65535)), iftrue, target("__UTF8_wcrtomb__XprivateX__BB30_9_F"))
	__asm(lbl("__UTF8_wcrtomb__XprivateX__BB30_8_F"))
		i0 =  (224)
		i4 =  (3)
		__asm(jump, target("__UTF8_wcrtomb__XprivateX__BB30_15_F"))
	__asm(lbl("__UTF8_wcrtomb__XprivateX__BB30_9_F"))
		__asm(push(uint(i2)>uint(2097151)), iftrue, target("__UTF8_wcrtomb__XprivateX__BB30_11_F"))
	__asm(lbl("__UTF8_wcrtomb__XprivateX__BB30_10_F"))
		i0 =  (240)
		i4 =  (4)
		__asm(jump, target("__UTF8_wcrtomb__XprivateX__BB30_15_F"))
	__asm(lbl("__UTF8_wcrtomb__XprivateX__BB30_11_F"))
		__asm(push(uint(i2)>uint(67108863)), iftrue, target("__UTF8_wcrtomb__XprivateX__BB30_13_F"))
	__asm(lbl("__UTF8_wcrtomb__XprivateX__BB30_12_F"))
		i0 =  (248)
		i4 =  (5)
		__asm(jump, target("__UTF8_wcrtomb__XprivateX__BB30_15_F"))
	__asm(lbl("__UTF8_wcrtomb__XprivateX__BB30_13_F"))
		__asm(push(i2<0), iftrue, target("__UTF8_wcrtomb__XprivateX__BB30_24_F"))
	__asm(lbl("__UTF8_wcrtomb__XprivateX__BB30_14_F"))
		i0 =  (252)
		i4 =  (6)
		__asm(jump, target("__UTF8_wcrtomb__XprivateX__BB30_15_F"))
	__asm(lbl("__UTF8_wcrtomb__XprivateX__BB30_15_F"))
		i5 = i2
		i6 =  (i4 + -1)
		__asm(push(i6>0), iftrue, target("__UTF8_wcrtomb__XprivateX__BB30_17_F"))
	__asm(lbl("__UTF8_wcrtomb__XprivateX__BB30_16_F"))
		i2 = i5
		__asm(jump, target("__UTF8_wcrtomb__XprivateX__BB30_20_F"))
	__asm(lbl("__UTF8_wcrtomb__XprivateX__BB30_17_F"))
		i6 =  (i4 + -1)
	__asm(jump, target("__UTF8_wcrtomb__XprivateX__BB30_18_F"), lbl("__UTF8_wcrtomb__XprivateX__BB30_18_B"), label, lbl("__UTF8_wcrtomb__XprivateX__BB30_18_F")); 
		i5 =  (i5 | -128)
		i5 =  (i5 & -65)
		i7 =  (i3 + i6)
		__asm(push(i5), push(i7), op(0x3a))
		i5 =  (i2 >> 6)
		i2 =  (i6 + -1)
		i7 = i5
		__asm(push(i2>0), iftrue, target("__UTF8_wcrtomb__XprivateX__BB30_25_F"))
	__asm(lbl("__UTF8_wcrtomb__XprivateX__BB30_19_F"))
		i2 = i5
		__asm(jump, target("__UTF8_wcrtomb__XprivateX__BB30_20_F"))
	__asm(lbl("__UTF8_wcrtomb__XprivateX__BB30_20_F"))
		i0 =  (i2 | i0)
		__asm(push(i0), push(i1), op(0x3a))
		mstate.eax = i4
		__asm(jump, target("__UTF8_wcrtomb__XprivateX__BB30_23_F"))
	__asm(lbl("__UTF8_wcrtomb__XprivateX__BB30_21_F"))
		i0 =  (1)
	__asm(jump, target("__UTF8_wcrtomb__XprivateX__BB30_22_F"), lbl("__UTF8_wcrtomb__XprivateX__BB30_22_B"), label, lbl("__UTF8_wcrtomb__XprivateX__BB30_22_F")); 
		mstate.eax = i0
	__asm(lbl("__UTF8_wcrtomb__XprivateX__BB30_23_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	__asm(lbl("__UTF8_wcrtomb__XprivateX__BB30_24_F"))
		i0 =  (86)
		__asm(push(i0), push(_val_2E_1440), op(0x3c))
		i0 =  (-1)
		__asm(jump, target("__UTF8_wcrtomb__XprivateX__BB30_22_B"))
	__asm(lbl("__UTF8_wcrtomb__XprivateX__BB30_25_F"))
		i6 = i2
		i2 = i7
		__asm(jump, target("__UTF8_wcrtomb__XprivateX__BB30_18_B"))
	}
}



// Sync
public const __UTF8_wcsnrtombs:int = regFunc(FSM__UTF8_wcsnrtombs.start)

public final class FSM__UTF8_wcsnrtombs extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
		var i8:int, i9:int, i10:int, i11:int, i12:int, i13:int, i14:int


		__asm(label, lbl("__UTF8_wcsnrtombs_entry"))
	__asm(lbl("__UTF8_wcsnrtombs__XprivateX__BB31_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 16
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i3 =  ((__xasm<int>(push((mstate.ebp+20)), op(0x37))))
		i4 =  ((__xasm<int>(push((mstate.ebp+24)), op(0x37))))
		i5 =  ((__xasm<int>(push((i4+4)), op(0x37))))
		__asm(push(i5==0), iftrue, target("__UTF8_wcsnrtombs__XprivateX__BB31_2_F"))
	__asm(lbl("__UTF8_wcsnrtombs__XprivateX__BB31_1_F"))
		i0 =  (22)
		__asm(push(i0), push(_val_2E_1440), op(0x3c))
		i0 =  (-1)
		__asm(jump, target("__UTF8_wcsnrtombs__XprivateX__BB31_41_F"))
	__asm(lbl("__UTF8_wcsnrtombs__XprivateX__BB31_2_F"))
		i5 =  ((__xasm<int>(push(i1), op(0x37))))
		__asm(push(i0==0), iftrue, target("__UTF8_wcsnrtombs__XprivateX__BB31_20_F"))
	__asm(lbl("__UTF8_wcsnrtombs__XprivateX__BB31_3_F"))
		i6 =  (0)
		i7 =  ((mstate.ebp+-16))
		i8 = i6
		i9 = i6
		__asm(jump, target("__UTF8_wcsnrtombs__XprivateX__BB31_4_F"))
	__asm(jump, target("__UTF8_wcsnrtombs__XprivateX__BB31_4_F"), lbl("__UTF8_wcsnrtombs__XprivateX__BB31_4_B"), label, lbl("__UTF8_wcsnrtombs__XprivateX__BB31_4_F")); 
		i11 = i6
		i10 =  (i0 + i11)
		i6 = i5
		__asm(push(i3==0), iftrue, target("__UTF8_wcsnrtombs__XprivateX__BB31_6_F"))
		__asm(jump, target("__UTF8_wcsnrtombs__XprivateX__BB31_5_F"))
	__asm(lbl("__UTF8_wcsnrtombs__XprivateX__BB31_5_F"))
		__asm(push(i8!=i2), iftrue, target("__UTF8_wcsnrtombs__XprivateX__BB31_22_F"))
		__asm(jump, target("__UTF8_wcsnrtombs__XprivateX__BB31_6_F"))
	__asm(jump, target("__UTF8_wcsnrtombs__XprivateX__BB31_6_F"), lbl("__UTF8_wcsnrtombs__XprivateX__BB31_6_B"), label, lbl("__UTF8_wcsnrtombs__XprivateX__BB31_6_F")); 
		__asm(push(i6), push(i1), op(0x3c))
		mstate.eax = i9
		__asm(jump, target("__UTF8_wcsnrtombs__XprivateX__BB31_16_F"))
	__asm(lbl("__UTF8_wcsnrtombs__XprivateX__BB31_7_B"), label)
		i3 =  (0)
		i0 =  (i2 + -1)
		i2 =  (-1)
		i1 =  ((mstate.ebp+-16))
		__asm(jump, target("__UTF8_wcsnrtombs__XprivateX__BB31_8_F"))
	__asm(jump, target("__UTF8_wcsnrtombs__XprivateX__BB31_8_F"), lbl("__UTF8_wcsnrtombs__XprivateX__BB31_8_B"), label, lbl("__UTF8_wcsnrtombs__XprivateX__BB31_8_F")); 
		i6 =  ((__xasm<int>(push(i5), op(0x37))))
		i7 = i5
		__asm(push(uint(i6)>uint(127)), iftrue, target("__UTF8_wcsnrtombs__XprivateX__BB31_10_F"))
	__asm(lbl("__UTF8_wcsnrtombs__XprivateX__BB31_9_F"))
		i6 =  (1)
		__asm(jump, target("__UTF8_wcsnrtombs__XprivateX__BB31_12_F"))
	__asm(lbl("__UTF8_wcsnrtombs__XprivateX__BB31_10_F"))
		mstate.esp -= 12
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i6), push((mstate.esp+4)), op(0x3c))
		__asm(push(i4), push((mstate.esp+8)), op(0x3c))
		mstate.esp -= 4;FSM__UTF8_wcrtomb.start()
	__asm(lbl("__UTF8_wcsnrtombs_state1"))
		i6 = mstate.eax
		mstate.esp += 12
		__asm(push(i6==-1), iftrue, target("__UTF8_wcsnrtombs__XprivateX__BB31_39_F"))
	__asm(lbl("__UTF8_wcsnrtombs__XprivateX__BB31_11_F"))
		__asm(jump, target("__UTF8_wcsnrtombs__XprivateX__BB31_12_F"))
	__asm(lbl("__UTF8_wcsnrtombs__XprivateX__BB31_12_F"))
		i7 =  ((__xasm<int>(push(i7), op(0x37))))
		__asm(push(i7!=0), iftrue, target("__UTF8_wcsnrtombs__XprivateX__BB31_17_F"))
	__asm(lbl("__UTF8_wcsnrtombs__XprivateX__BB31_13_F"))
		i5 =  (i3 + i6)
	__asm(jump, target("__UTF8_wcsnrtombs__XprivateX__BB31_14_F"), lbl("__UTF8_wcsnrtombs__XprivateX__BB31_14_B"), label, lbl("__UTF8_wcsnrtombs__XprivateX__BB31_14_F")); 
		i5 =  (i5 + -1)
	__asm(jump, target("__UTF8_wcsnrtombs__XprivateX__BB31_15_F"), lbl("__UTF8_wcsnrtombs__XprivateX__BB31_15_B"), label, lbl("__UTF8_wcsnrtombs__XprivateX__BB31_15_F")); 
		mstate.eax = i5
	__asm(jump, target("__UTF8_wcsnrtombs__XprivateX__BB31_16_F"), lbl("__UTF8_wcsnrtombs__XprivateX__BB31_16_B"), label, lbl("__UTF8_wcsnrtombs__XprivateX__BB31_16_F")); 
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	__asm(lbl("__UTF8_wcsnrtombs__XprivateX__BB31_17_F"))
		i5 =  (i5 + 4)
		i2 =  (i2 + 1)
		i3 =  (i6 + i3)
		__asm(push(i0==i2), iftrue, target("__UTF8_wcsnrtombs__XprivateX__BB31_19_F"))
	__asm(lbl("__UTF8_wcsnrtombs__XprivateX__BB31_18_F"))
		__asm(jump, target("__UTF8_wcsnrtombs__XprivateX__BB31_8_B"))
	__asm(lbl("__UTF8_wcsnrtombs__XprivateX__BB31_19_F"))
		i5 = i3
		__asm(jump, target("__UTF8_wcsnrtombs__XprivateX__BB31_40_F"))
	__asm(lbl("__UTF8_wcsnrtombs__XprivateX__BB31_20_F"))
		__asm(push(i2!=0), iftrue, target("__UTF8_wcsnrtombs__XprivateX__BB31_7_B"))
	__asm(lbl("__UTF8_wcsnrtombs__XprivateX__BB31_21_F"))
		i5 =  (0)
		__asm(jump, target("__UTF8_wcsnrtombs__XprivateX__BB31_40_F"))
	__asm(lbl("__UTF8_wcsnrtombs__XprivateX__BB31_22_F"))
		i12 =  ((__xasm<int>(push(i6), op(0x37))))
		__asm(push(uint(i12)>uint(127)), iftrue, target("__UTF8_wcsnrtombs__XprivateX__BB31_27_F"))
	__asm(lbl("__UTF8_wcsnrtombs__XprivateX__BB31_23_F"))
		__asm(push(i12), push(i10), op(0x3a))
		i6 =  ((__xasm<int>(push(i6), op(0x37))))
		__asm(push(i6==0), iftrue, target("__UTF8_wcsnrtombs__XprivateX__BB31_26_F"))
	__asm(lbl("__UTF8_wcsnrtombs__XprivateX__BB31_24_F"))
		i6 =  (1)
		__asm(jump, target("__UTF8_wcsnrtombs__XprivateX__BB31_25_F"))
	__asm(jump, target("__UTF8_wcsnrtombs__XprivateX__BB31_25_F"), lbl("__UTF8_wcsnrtombs__XprivateX__BB31_25_B"), label, lbl("__UTF8_wcsnrtombs__XprivateX__BB31_25_F")); 
		i5 =  (i5 + 4)
		i8 =  (i8 + 1)
		i9 =  (i6 + i9)
		i3 =  (i3 - i6)
		i6 =  (i11 + i6)
		__asm(jump, target("__UTF8_wcsnrtombs__XprivateX__BB31_4_B"))
	__asm(lbl("__UTF8_wcsnrtombs__XprivateX__BB31_26_F"))
		i5 =  (1)
		__asm(jump, target("__UTF8_wcsnrtombs__XprivateX__BB31_38_F"))
	__asm(lbl("__UTF8_wcsnrtombs__XprivateX__BB31_27_F"))
		i13 =  ((__xasm<int>(push(___mb_cur_max_2E_b), op(0x35))))
		i13 =  ((i13!=0) ? 6 : 0)
		__asm(push(uint(i13)>=uint(i3)), iftrue, target("__UTF8_wcsnrtombs__XprivateX__BB31_30_F"))
	__asm(lbl("__UTF8_wcsnrtombs__XprivateX__BB31_28_F"))
		mstate.esp -= 12
		__asm(push(i10), push(mstate.esp), op(0x3c))
		__asm(push(i12), push((mstate.esp+4)), op(0x3c))
		__asm(push(i4), push((mstate.esp+8)), op(0x3c))
		mstate.esp -= 4;FSM__UTF8_wcrtomb.start()
	__asm(lbl("__UTF8_wcsnrtombs_state2"))
		i10 = mstate.eax
		mstate.esp += 12
		__asm(push(i10==-1), iftrue, target("__UTF8_wcsnrtombs__XprivateX__BB31_32_F"))
	__asm(lbl("__UTF8_wcsnrtombs__XprivateX__BB31_29_F"))
		__asm(jump, target("__UTF8_wcsnrtombs__XprivateX__BB31_35_F"))
	__asm(lbl("__UTF8_wcsnrtombs__XprivateX__BB31_30_F"))
		mstate.esp -= 12
		__asm(push(i7), push(mstate.esp), op(0x3c))
		__asm(push(i12), push((mstate.esp+4)), op(0x3c))
		__asm(push(i4), push((mstate.esp+8)), op(0x3c))
		mstate.esp -= 4;FSM__UTF8_wcrtomb.start()
	__asm(lbl("__UTF8_wcsnrtombs_state3"))
		i12 = mstate.eax
		mstate.esp += 12
		__asm(push(i12!=-1), iftrue, target("__UTF8_wcsnrtombs__XprivateX__BB31_33_F"))
	__asm(lbl("__UTF8_wcsnrtombs__XprivateX__BB31_31_F"))
		__asm(jump, target("__UTF8_wcsnrtombs__XprivateX__BB31_32_F"))
	__asm(lbl("__UTF8_wcsnrtombs__XprivateX__BB31_32_F"))
		i5 =  (-1)
		__asm(push(i6), push(i1), op(0x3c))
		__asm(jump, target("__UTF8_wcsnrtombs__XprivateX__BB31_15_B"))
	__asm(lbl("__UTF8_wcsnrtombs__XprivateX__BB31_33_F"))
		__asm(push(uint(i12)>uint(i3)), iftrue, target("__UTF8_wcsnrtombs__XprivateX__BB31_6_B"))
	__asm(lbl("__UTF8_wcsnrtombs__XprivateX__BB31_34_F"))
		i13 = i7
		i14 = i12
		memcpy(i10, i13, i14)
		i10 = i12
	__asm(lbl("__UTF8_wcsnrtombs__XprivateX__BB31_35_F"))
		i6 =  ((__xasm<int>(push(i6), op(0x37))))
		__asm(push(i6==0), iftrue, target("__UTF8_wcsnrtombs__XprivateX__BB31_37_F"))
	__asm(lbl("__UTF8_wcsnrtombs__XprivateX__BB31_36_F"))
		i6 = i10
		__asm(jump, target("__UTF8_wcsnrtombs__XprivateX__BB31_25_B"))
	__asm(lbl("__UTF8_wcsnrtombs__XprivateX__BB31_37_F"))
		i5 = i10
	__asm(lbl("__UTF8_wcsnrtombs__XprivateX__BB31_38_F"))
		i6 =  (0)
		i5 =  (i9 + i5)
		__asm(push(i6), push(i1), op(0x3c))
		__asm(jump, target("__UTF8_wcsnrtombs__XprivateX__BB31_14_B"))
	__asm(lbl("__UTF8_wcsnrtombs__XprivateX__BB31_39_F"))
		i5 =  (-1)
		__asm(jump, target("__UTF8_wcsnrtombs__XprivateX__BB31_40_F"))
	__asm(lbl("__UTF8_wcsnrtombs__XprivateX__BB31_40_F"))
		i0 = i5
	__asm(lbl("__UTF8_wcsnrtombs__XprivateX__BB31_41_F"))
		mstate.eax = i0
		__asm(jump, target("__UTF8_wcsnrtombs__XprivateX__BB31_16_B"))
	}
}



// Sync
public const ___adddi3:int = regFunc(FSM___adddi3.start)

public final class FSM___adddi3 extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int


		__asm(label, lbl("___adddi3_entry"))
	__asm(lbl("___adddi3__XprivateX__BB32_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  (i0 + i1)
		i0 =  ((uint(i1)<uint(i0)) ? 1 : 0)
		i2 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i3 =  ((__xasm<int>(push((mstate.ebp+20)), op(0x37))))
		i2 =  (i2 + i3)
		i0 =  (i0 & 1)
		i0 =  (i0 + i2)
		mstate.edx = i0
		mstate.eax = i1
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const ___anddi3:int = regFunc(FSM___anddi3.start)

public final class FSM___anddi3 extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int


		__asm(label, lbl("___anddi3_entry"))
	__asm(lbl("___anddi3__XprivateX__BB33_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i3 =  ((__xasm<int>(push((mstate.ebp+20)), op(0x37))))
		i2 =  (i2 & i3)
		i0 =  (i0 & i1)
		mstate.edx = i2
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const ___ashldi3:int = regFunc(FSM___ashldi3.start)

public final class FSM___ashldi3 extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int


		__asm(label, lbl("___ashldi3_entry"))
	__asm(lbl("___ashldi3__XprivateX__BB34_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+20)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i3 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i4 =  ((uint(i0)<uint(32)) ? 1 : 0)
		i5 =  ((i1==0) ? 1 : 0)
		i4 =  ((i5!=0) ? i4 : 0)
		__asm(push(i4!=0), iftrue, target("___ashldi3__XprivateX__BB34_4_F"))
	__asm(lbl("___ashldi3__XprivateX__BB34_1_F"))
		i3 =  ((uint(i0)<uint(64)) ? 1 : 0)
		i1 =  ((i1==0) ? 1 : 0)
		i1 =  ((i1!=0) ? i3 : 0)
		__asm(push(i1!=0), iftrue, target("___ashldi3__XprivateX__BB34_3_F"))
	__asm(lbl("___ashldi3__XprivateX__BB34_2_F"))
		i0 =  (0)
		i1 = i0
		__asm(jump, target("___ashldi3__XprivateX__BB34_7_F"))
	__asm(lbl("___ashldi3__XprivateX__BB34_3_F"))
		i1 =  (0)
		i0 =  (i0 + -32)
		i0 =  (i2 << i0)
		mstate.edx = i0
		mstate.eax = i1
		__asm(jump, target("___ashldi3__XprivateX__BB34_8_F"))
	__asm(lbl("___ashldi3__XprivateX__BB34_4_F"))
		i1 =  (i0 | i1)
		__asm(push(i1!=0), iftrue, target("___ashldi3__XprivateX__BB34_6_F"))
	__asm(lbl("___ashldi3__XprivateX__BB34_5_F"))
		i0 = i2
		i1 = i3
		__asm(jump, target("___ashldi3__XprivateX__BB34_7_F"))
	__asm(lbl("___ashldi3__XprivateX__BB34_6_F"))
		i1 =  (32 - i0)
		i1 =  (i2 >>> i1)
		i3 =  (i3 << i0)
		i0 =  (i2 << i0)
		i1 =  (i1 | i3)
	__asm(lbl("___ashldi3__XprivateX__BB34_7_F"))
		mstate.edx = i1
		mstate.eax = i0
	__asm(lbl("___ashldi3__XprivateX__BB34_8_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const ___ashrdi3:int = regFunc(FSM___ashrdi3.start)

public final class FSM___ashrdi3 extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
		var i8:int


		__asm(label, lbl("___ashrdi3_entry"))
	__asm(lbl("___ashrdi3__XprivateX__BB35_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+20)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i3 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i4 =  ((uint(i0)<uint(32)) ? 1 : 0)
		i5 =  ((i1==0) ? 1 : 0)
		i4 =  ((i5!=0) ? i4 : 0)
		__asm(push(i4!=0), iftrue, target("___ashrdi3__XprivateX__BB35_4_F"))
	__asm(lbl("___ashrdi3__XprivateX__BB35_1_F"))
		i2 =  (0)
		i4 =  (i3 >> 31)
		i5 =  ((i1!=0) ? 1 : 0)
		i6 =  ((uint(i0)>uint(63)) ? 1 : 0)
		i1 =  ((i1==0) ? 1 : 0)
		i7 = i2
		i8 = i4
		i1 =  ((i1!=0) ? i6 : i5)
		__asm(push(i1!=0), iftrue, target("___ashrdi3__XprivateX__BB35_3_F"))
	__asm(lbl("___ashrdi3__XprivateX__BB35_2_F"))
		i2 =  (i0 + -32)
		i2 =  (i3 >> i2)
		i2 =  (i2 | i7)
		mstate.edx = i4
		__asm(jump, target("___ashrdi3__XprivateX__BB35_7_F"))
	__asm(lbl("___ashrdi3__XprivateX__BB35_3_F"))
		i0 =  (i4 | i2)
		i1 =  (i7 | i8)
		mstate.edx = i0
		mstate.eax = i1
		__asm(jump, target("___ashrdi3__XprivateX__BB35_8_F"))
	__asm(lbl("___ashrdi3__XprivateX__BB35_4_F"))
		i1 =  (i0 | i1)
		__asm(push(i1==0), iftrue, target("___ashrdi3__XprivateX__BB35_6_F"))
	__asm(lbl("___ashrdi3__XprivateX__BB35_5_F"))
		i1 =  (32 - i0)
		i1 =  (i3 << i1)
		i2 =  (i2 >>> i0)
		i3 =  (i3 >> i0)
		i2 =  (i1 | i2)
	__asm(lbl("___ashrdi3__XprivateX__BB35_6_F"))
		mstate.edx = i3
	__asm(lbl("___ashrdi3__XprivateX__BB35_7_F"))
		mstate.eax = i2
	__asm(lbl("___ashrdi3__XprivateX__BB35_8_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const ___cmpdi2:int = regFunc(FSM___cmpdi2.start)

public final class FSM___cmpdi2 extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int, i4:int


		__asm(label, lbl("___cmpdi2_entry"))
	__asm(lbl("___cmpdi2__XprivateX__BB36_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+20)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i3 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i4 = i1
		i4 = i0
		__asm(push(i0>=i1), iftrue, target("___cmpdi2__XprivateX__BB36_2_F"))
	__asm(jump, target("___cmpdi2__XprivateX__BB36_1_F"), lbl("___cmpdi2__XprivateX__BB36_1_B"), label, lbl("___cmpdi2__XprivateX__BB36_1_F")); 
		i0 =  (0)
		__asm(jump, target("___cmpdi2__XprivateX__BB36_6_F"))
	__asm(lbl("___cmpdi2__XprivateX__BB36_2_F"))
		__asm(push(i0<=i1), iftrue, target("___cmpdi2__XprivateX__BB36_4_F"))
	__asm(lbl("___cmpdi2__XprivateX__BB36_3_F"))
		i0 =  (2)
		__asm(jump, target("___cmpdi2__XprivateX__BB36_6_F"))
	__asm(lbl("___cmpdi2__XprivateX__BB36_4_F"))
		i0 = i3
		i1 = i2
		__asm(push(uint(i2)<uint(i3)), iftrue, target("___cmpdi2__XprivateX__BB36_1_B"))
	__asm(lbl("___cmpdi2__XprivateX__BB36_5_F"))
		i0 =  ((uint(i1)>uint(i0)) ? 2 : 1)
	__asm(lbl("___cmpdi2__XprivateX__BB36_6_F"))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const ___divdi3:int = regFunc(FSM___divdi3.start)

public final class FSM___divdi3 extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
		var i8:int


		__asm(label, lbl("___divdi3_entry"))
	__asm(lbl("___divdi3__XprivateX__BB37_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (0)
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+20)), op(0x37))))
		i3 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i4 =  (i1 >> 31)
		i5 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i6 =  (i2 >> 31)
		i3 =  __addc(i3, i4)
		i7 =  __adde(i1, i4)
		i5 =  __addc(i5, i6)
		i8 =  __adde(i2, i6)
		mstate.esp -= 20
		i8 =  (i8 ^ i6)
		i5 =  (i5 ^ i6)
		i6 =  (i7 ^ i4)
		i3 =  (i3 ^ i4)
		__asm(push(i3), push(mstate.esp), op(0x3c))
		__asm(push(i6), push((mstate.esp+4)), op(0x3c))
		__asm(push(i5), push((mstate.esp+8)), op(0x3c))
		__asm(push(i8), push((mstate.esp+12)), op(0x3c))
		__asm(push(i0), push((mstate.esp+16)), op(0x3c))
		mstate.esp -= 4;FSM___qdivrem.start()
	__asm(lbl("___divdi3_state1"))
		i0 = mstate.eax
		i3 = mstate.edx
		mstate.esp += 20
		i1 =  (i1 >>> 31)
		i2 =  (i2 >>> 31)
		__asm(push(i1==i2), iftrue, target("___divdi3__XprivateX__BB37_2_F"))
	__asm(lbl("___divdi3__XprivateX__BB37_1_F"))
		i1 =  (0)
		i0 =  __subc(i1, i0)
		i3 =  __sube(i1, i3)
	__asm(lbl("___divdi3__XprivateX__BB37_2_F"))
		mstate.edx = i3
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const ___qdivrem:int = regFunc(FSM___qdivrem.start)

public final class FSM___qdivrem extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
		var i8:int, i9:int, i10:int, i11:int, i12:int, i13:int, i14:int, i15:int
		var i16:int, i17:int, i18:int, i19:int, i20:int, i21:int, i22:int, i23:int
		var i24:int, i25:int, i26:int

		__asm(label, lbl("___qdivrem_entry"))
	__asm(lbl("___qdivrem__XprivateX__BB38_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 48
		i0 =  ((mstate.ebp+-48))
		i1 =  ((__xasm<int>(push((mstate.ebp+24)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i3 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i4 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i5 =  ((__xasm<int>(push((mstate.ebp+20)), op(0x37))))
		i6 =  ((mstate.ebp+-32))
		i7 =  ((mstate.ebp+-16))
		i8 =  (i4 | i5)
		__asm(push(i8!=0), iftrue, target("___qdivrem__XprivateX__BB38_4_F"))
	__asm(lbl("___qdivrem__XprivateX__BB38_1_F"))
		__asm(push(i1!=0), iftrue, target("___qdivrem__XprivateX__BB38_3_F"))
	__asm(lbl("___qdivrem__XprivateX__BB38_2_F"))
		i0 =  (0)
		i0 =  (uint(1) / uint(i0))
		i1 = i0
		__asm(jump, target("___qdivrem__XprivateX__BB38_83_F"))
	__asm(lbl("___qdivrem__XprivateX__BB38_3_F"))
		i0 =  (0)
		__asm(push(i2), push(i1), op(0x3c))
		__asm(push(i3), push((i1+4)), op(0x3c))
		i0 =  (uint(1) / uint(i0))
		__asm(jump, target("___qdivrem__XprivateX__BB38_8_F"))
	__asm(lbl("___qdivrem__XprivateX__BB38_4_F"))
		i8 =  ((uint(i3)>=uint(i5)) ? 1 : 0)
		i9 =  ((uint(i2)>=uint(i4)) ? 1 : 0)
		i10 =  ((i3==i5) ? 1 : 0)
		i8 =  ((i10!=0) ? i9 : i8)
		__asm(push(i8!=0), iftrue, target("___qdivrem__XprivateX__BB38_9_F"))
	__asm(lbl("___qdivrem__XprivateX__BB38_5_F"))
		__asm(push(i1!=0), iftrue, target("___qdivrem__XprivateX__BB38_7_F"))
	__asm(lbl("___qdivrem__XprivateX__BB38_6_F"))
		i0 =  (0)
		i1 = i0
		__asm(jump, target("___qdivrem__XprivateX__BB38_83_F"))
	__asm(lbl("___qdivrem__XprivateX__BB38_7_F"))
		i0 =  (0)
		__asm(push(i2), push(i1), op(0x3c))
		__asm(push(i3), push((i1+4)), op(0x3c))
	__asm(lbl("___qdivrem__XprivateX__BB38_8_F"))
		mstate.edx = i0
		__asm(jump, target("___qdivrem__XprivateX__BB38_84_F"))
	__asm(lbl("___qdivrem__XprivateX__BB38_9_F"))
		i8 =  (0)
		__asm(push(i8), push((mstate.ebp+-48)), op(0x3b))
		i8 =  (i3 >>> 16)
		__asm(push(i8), push((mstate.ebp+-46)), op(0x3b))
		__asm(push(i3), push((mstate.ebp+-44)), op(0x3b))
		i9 =  (i2 >>> 16)
		__asm(push(i9), push((mstate.ebp+-42)), op(0x3b))
		__asm(push(i2), push((mstate.ebp+-40)), op(0x3b))
		i10 =  (i5 >>> 16)
		__asm(push(i10), push((mstate.ebp+-30)), op(0x3b))
		__asm(push(i5), push((mstate.ebp+-28)), op(0x3b))
		i5 =  (i4 >>> 16)
		i11 =  ((mstate.ebp+-48))
		__asm(push(i5), push((mstate.ebp+-26)), op(0x3b))
		__asm(push(i4), push((mstate.ebp+-24)), op(0x3b))
		i4 =  (i11 + 8)
		i5 =  (i11 + 6)
		i12 =  (i11 + 4)
		i13 =  (i11 + 2)
		i14 =  ((mstate.ebp+-32))
		i15 = i8
		__asm(push(i10==0), iftrue, target("___qdivrem__XprivateX__BB38_11_F"))
	__asm(lbl("___qdivrem__XprivateX__BB38_10_F"))
		i2 =  (4)
		i3 = i14
		__asm(jump, target("___qdivrem__XprivateX__BB38_19_F"))
	__asm(lbl("___qdivrem__XprivateX__BB38_11_F"))
		i10 =  (0)
		i6 =  (i6 + 4)
		i14 = i10
	__asm(jump, target("___qdivrem__XprivateX__BB38_12_F"), lbl("___qdivrem__XprivateX__BB38_12_B"), label, lbl("___qdivrem__XprivateX__BB38_12_F")); 
		i16 = i6
		i17 =  (i14 + 3)
		__asm(push(i17!=1), iftrue, target("___qdivrem__XprivateX__BB38_16_F"))
	__asm(lbl("___qdivrem__XprivateX__BB38_13_F"))
		i0 =  ((mstate.ebp+-32))
		i6 =  (i10 << 1)
		i0 =  (i6 + i0)
		i0 =  ((__xasm<int>(push((i0+4)), op(0x36))))
		i6 =  (uint(i8) % uint(i0))
		i3 =  (i3 & 65535)
		i6 =  (i6 << 16)
		i3 =  (i3 | i6)
		i6 =  (uint(i3) % uint(i0))
		i6 =  (i6 << 16)
		i6 =  (i9 | i6)
		i10 =  (uint(i6) % uint(i0))
		i2 =  (i2 & 65535)
		i10 =  (i10 << 16)
		i2 =  (i2 | i10)
		i10 =  (uint(i2) / uint(i0))
		i6 =  (uint(i6) / uint(i0))
		i3 =  (uint(i3) / uint(i0))
		i14 =  (uint(i8) / uint(i0))
		__asm(push(i1==0), iftrue, target("___qdivrem__XprivateX__BB38_15_F"))
	__asm(lbl("___qdivrem__XprivateX__BB38_14_F"))
		i4 =  (0)
		i0 =  (uint(i2) % uint(i0))
		__asm(push(i0), push(i1), op(0x3c))
		__asm(push(i4), push((i1+4)), op(0x3c))
	__asm(lbl("___qdivrem__XprivateX__BB38_15_F"))
		i0 =  (i10 & 65535)
		i1 =  (i6 << 16)
		i2 =  (i3 & 65535)
		i3 =  (i14 << 16)
		i0 =  (i0 | i1)
		i1 =  (i2 | i3)
		__asm(jump, target("___qdivrem__XprivateX__BB38_83_F"))
	__asm(lbl("___qdivrem__XprivateX__BB38_16_F"))
		i16 =  ((__xasm<int>(push(i16), op(0x36))))
		i6 =  (i6 + 2)
		i14 =  (i14 + -1)
		i10 =  (i10 + 1)
		__asm(push(i16!=0), iftrue, target("___qdivrem__XprivateX__BB38_18_F"))
	__asm(lbl("___qdivrem__XprivateX__BB38_17_F"))
		__asm(jump, target("___qdivrem__XprivateX__BB38_12_B"))
	__asm(lbl("___qdivrem__XprivateX__BB38_18_F"))
		i2 =  ((mstate.ebp+-32))
		i3 =  (i10 << 1)
		i6 =  (i14 + 4)
		i3 =  (i2 + i3)
		i2 = i6
	__asm(lbl("___qdivrem__XprivateX__BB38_19_F"))
		i6 =  (4 - i2)
		i8 = i3
		i9 =  (i15 & 65535)
		__asm(push(i9==0), iftrue, target("___qdivrem__XprivateX__BB38_21_F"))
	__asm(lbl("___qdivrem__XprivateX__BB38_20_F"))
		i0 = i6
		i6 = i11
		__asm(jump, target("___qdivrem__XprivateX__BB38_25_F"))
	__asm(lbl("___qdivrem__XprivateX__BB38_21_F"))
		i9 =  (0)
		i0 =  (i0 + 4)
	__asm(jump, target("___qdivrem__XprivateX__BB38_22_F"), lbl("___qdivrem__XprivateX__BB38_22_B"), label, lbl("___qdivrem__XprivateX__BB38_22_F")); 
		i10 =  ((__xasm<int>(push(i0), op(0x36))))
		i0 =  (i0 + 2)
		i9 =  (i9 + 1)
		__asm(push(i10!=0), iftrue, target("___qdivrem__XprivateX__BB38_24_F"))
	__asm(lbl("___qdivrem__XprivateX__BB38_23_F"))
		__asm(jump, target("___qdivrem__XprivateX__BB38_22_B"))
	__asm(lbl("___qdivrem__XprivateX__BB38_24_F"))
		i0 =  ((mstate.ebp+-48))
		i10 =  (i9 + -1)
		i9 =  (i9 << 1)
		i6 =  (i6 - i10)
		i9 =  (i0 + i9)
		i0 =  (i6 + -1)
		i6 = i9
	__asm(lbl("___qdivrem__XprivateX__BB38_25_F"))
		i9 =  (3 - i0)
		i10 = i6
		__asm(push(i9<0), iftrue, target("___qdivrem__XprivateX__BB38_29_F"))
	__asm(lbl("___qdivrem__XprivateX__BB38_26_F"))
		i9 =  (i0 << 1)
		i9 =  (i7 - i9)
		i11 =  (3 - i0)
		i9 =  (i9 + 6)
	__asm(jump, target("___qdivrem__XprivateX__BB38_27_F"), lbl("___qdivrem__XprivateX__BB38_27_B"), label, lbl("___qdivrem__XprivateX__BB38_27_F")); 
		i14 =  (0)
		__asm(push(i14), push(i9), op(0x3b))
		i9 =  (i9 + -2)
		i11 =  (i11 + -1)
		__asm(push(i11<0), iftrue, target("___qdivrem__XprivateX__BB38_29_F"))
	__asm(lbl("___qdivrem__XprivateX__BB38_28_F"))
		__asm(jump, target("___qdivrem__XprivateX__BB38_27_B"))
	__asm(lbl("___qdivrem__XprivateX__BB38_29_F"))
		i9 =  ((__xasm<int>(push((i3+2)), op(0x36))))
		i11 =  (i3 + 2)
		i14 =  (i9 << 16)
		i14 =  (i14 >> 16)
		__asm(push(i14>-1), iftrue, target("___qdivrem__XprivateX__BB38_31_F"))
	__asm(lbl("___qdivrem__XprivateX__BB38_30_F"))
		i9 =  (0)
		__asm(jump, target("___qdivrem__XprivateX__BB38_34_F"))
	__asm(lbl("___qdivrem__XprivateX__BB38_31_F"))
		i14 =  (0)
	__asm(jump, target("___qdivrem__XprivateX__BB38_32_F"), lbl("___qdivrem__XprivateX__BB38_32_B"), label, lbl("___qdivrem__XprivateX__BB38_32_F")); 
		i14 =  (i14 + 1)
		i9 =  (i9 << 1)
		__asm(push(uint(i9)<uint(32768)), iftrue, target("___qdivrem__XprivateX__BB38_85_F"))
	__asm(lbl("___qdivrem__XprivateX__BB38_33_F"))
		i9 = i14
		__asm(jump, target("___qdivrem__XprivateX__BB38_34_F"))
	__asm(lbl("___qdivrem__XprivateX__BB38_34_F"))
		__asm(push(i9<1), iftrue, target("___qdivrem__XprivateX__BB38_47_F"))
	__asm(lbl("___qdivrem__XprivateX__BB38_35_F"))
		i14 =  ((__xasm<int>(push(i6), op(0x36))))
		i14 =  (i14 << i9)
		i15 =  (i0 + i2)
		__asm(push(i15>0), iftrue, target("___qdivrem__XprivateX__BB38_39_F"))
	__asm(lbl("___qdivrem__XprivateX__BB38_36_F"))
		i15 =  (0)
		__asm(jump, target("___qdivrem__XprivateX__BB38_37_F"))
	__asm(jump, target("___qdivrem__XprivateX__BB38_37_F"), lbl("___qdivrem__XprivateX__BB38_37_B"), label, lbl("___qdivrem__XprivateX__BB38_37_F")); 
		i15 =  (i15 << 1)
		i15 =  (i6 + i15)
		__asm(push(i14), push(i15), op(0x3b))
		i14 =  ((__xasm<int>(push(i11), op(0x36))))
		i14 =  (i14 << i9)
		i15 =  (i2 + -1)
		__asm(push(i15>0), iftrue, target("___qdivrem__XprivateX__BB38_42_F"))
		__asm(jump, target("___qdivrem__XprivateX__BB38_38_F"))
	__asm(lbl("___qdivrem__XprivateX__BB38_38_F"))
		i15 =  (1)
		__asm(jump, target("___qdivrem__XprivateX__BB38_46_F"))
	__asm(lbl("___qdivrem__XprivateX__BB38_39_F"))
		i16 =  (0)
		i17 =  (16 - i9)
		i18 = i10
	__asm(jump, target("___qdivrem__XprivateX__BB38_40_F"), lbl("___qdivrem__XprivateX__BB38_40_B"), label, lbl("___qdivrem__XprivateX__BB38_40_F")); 
		i19 =  ((__xasm<int>(push((i18+2)), op(0x36))))
		i19 =  (i19 >>> i17)
		i14 =  (i19 | i14)
		__asm(push(i14), push(i18), op(0x3b))
		i14 =  ((__xasm<int>(push((i18+2)), op(0x36))))
		i16 =  (i16 + 1)
		i14 =  (i14 << i9)
		i18 =  (i18 + 2)
		__asm(push(i16==i15), iftrue, target("___qdivrem__XprivateX__BB38_37_B"))
	__asm(lbl("___qdivrem__XprivateX__BB38_41_F"))
		__asm(jump, target("___qdivrem__XprivateX__BB38_40_B"))
	__asm(lbl("___qdivrem__XprivateX__BB38_42_F"))
		i16 =  (0)
		i17 =  (16 - i9)
		i18 = i8
	__asm(jump, target("___qdivrem__XprivateX__BB38_43_F"), lbl("___qdivrem__XprivateX__BB38_43_B"), label, lbl("___qdivrem__XprivateX__BB38_43_F")); 
		i19 =  ((__xasm<int>(push((i18+4)), op(0x36))))
		i19 =  (i19 >>> i17)
		i14 =  (i19 | i14)
		__asm(push(i14), push((i18+2)), op(0x3b))
		i14 =  ((__xasm<int>(push((i18+4)), op(0x36))))
		i16 =  (i16 + 1)
		i14 =  (i14 << i9)
		i18 =  (i18 + 2)
		__asm(push(i16==i15), iftrue, target("___qdivrem__XprivateX__BB38_45_F"))
	__asm(lbl("___qdivrem__XprivateX__BB38_44_F"))
		__asm(jump, target("___qdivrem__XprivateX__BB38_43_B"))
	__asm(lbl("___qdivrem__XprivateX__BB38_45_F"))
		i15 = i2
	__asm(lbl("___qdivrem__XprivateX__BB38_46_F"))
		i15 =  (i15 << 1)
		i15 =  (i3 + i15)
		__asm(push(i14), push(i15), op(0x3b))
	__asm(lbl("___qdivrem__XprivateX__BB38_47_F"))
		i14 =  (0)
		i11 =  ((__xasm<int>(push(i11), op(0x36))))
		i3 =  ((__xasm<int>(push((i3+4)), op(0x36))))
		i15 =  (i0 << 1)
		i7 =  (i7 - i15)
		i15 = i11
		i16 = i14
	__asm(jump, target("___qdivrem__XprivateX__BB38_48_F"), lbl("___qdivrem__XprivateX__BB38_48_B"), label, lbl("___qdivrem__XprivateX__BB38_48_F")); 
		i17 =  (i10 + i16)
		i18 =  ((__xasm<int>(push(i17), op(0x36))))
		i19 =  ((__xasm<int>(push((i17+2)), op(0x36))))
		i20 =  ((__xasm<int>(push((i17+4)), op(0x36))))
		i21 =  (i11 & 65535)
		__asm(push(i18!=i21), iftrue, target("___qdivrem__XprivateX__BB38_52_F"))
	__asm(lbl("___qdivrem__XprivateX__BB38_49_F"))
		i18 =  (i19 & 65535)
		i18 =  (i18 + i15)
		__asm(push(uint(i18)>uint(65535)), iftrue, target("___qdivrem__XprivateX__BB38_51_F"))
	__asm(lbl("___qdivrem__XprivateX__BB38_50_F"))
		i19 =  (65535)
		__asm(jump, target("___qdivrem__XprivateX__BB38_53_F"))
	__asm(lbl("___qdivrem__XprivateX__BB38_51_F"))
		i18 =  (65535)
		__asm(jump, target("___qdivrem__XprivateX__BB38_57_F"))
	__asm(lbl("___qdivrem__XprivateX__BB38_52_F"))
		i19 =  (i19 & 65535)
		i18 =  (i18 << 16)
		i18 =  (i18 | i19)
		i19 =  (uint(i18) % uint(i15))
		i21 =  (uint(i18) / uint(i15))
		i18 = i19
		i19 = i21
	__asm(lbl("___qdivrem__XprivateX__BB38_53_F"))
		i21 =  (i11 & 65535)
		i22 =  (i3 & 65535)
		i20 =  (i20 & 65535)
		i23 =  (i18 << 16)
		i24 =  (i21 << 16)
		i25 =  (i19 * i22)
		__asm(jump, target("___qdivrem__XprivateX__BB38_56_F"))
	__asm(lbl("___qdivrem__XprivateX__BB38_54_B"), label)
		i25 =  (i25 - i22)
		i19 =  (i21 + i26)
		i23 =  (i24 + i23)
		i26 =  (i18 + -1)
		__asm(push(uint(i19)>uint(65535)), iftrue, target("___qdivrem__XprivateX__BB38_86_F"))
	__asm(lbl("___qdivrem__XprivateX__BB38_55_F"))
		i18 = i19
		i19 = i26
		__asm(jump, target("___qdivrem__XprivateX__BB38_56_F"))
	__asm(lbl("___qdivrem__XprivateX__BB38_56_F"))
		i26 = i18
		i18 = i19
		i19 =  (i23 | i20)
		__asm(push(uint(i25)>uint(i19)), iftrue, target("___qdivrem__XprivateX__BB38_54_B"))
	__asm(jump, target("___qdivrem__XprivateX__BB38_57_F"), lbl("___qdivrem__XprivateX__BB38_57_B"), label, lbl("___qdivrem__XprivateX__BB38_57_F")); 
		__asm(push(i2>0), iftrue, target("___qdivrem__XprivateX__BB38_59_F"))
	__asm(lbl("___qdivrem__XprivateX__BB38_58_F"))
		i19 =  (0)
		__asm(jump, target("___qdivrem__XprivateX__BB38_62_F"))
	__asm(lbl("___qdivrem__XprivateX__BB38_59_F"))
		i19 =  (0)
		i20 =  (i2 << 1)
		i21 =  (i10 + i16)
		i22 = i2
	__asm(jump, target("___qdivrem__XprivateX__BB38_60_F"), lbl("___qdivrem__XprivateX__BB38_60_B"), label, lbl("___qdivrem__XprivateX__BB38_60_F")); 
		i23 =  (i8 + i20)
		i23 =  ((__xasm<int>(push(i23), op(0x36))))
		i24 =  (i21 + i20)
		i25 =  ((__xasm<int>(push(i24), op(0x36))))
		i23 =  (i23 * i18)
		i23 =  (i25 - i23)
		i19 =  (i23 - i19)
		i23 =  (i19 >>> 16)
		i23 =  (65536 - i23)
		__asm(push(i19), push(i24), op(0x3b))
		i19 =  (i20 + -2)
		i22 =  (i22 + -1)
		i23 =  (i23 & 65535)
		__asm(push(i22>0), iftrue, target("___qdivrem__XprivateX__BB38_87_F"))
	__asm(lbl("___qdivrem__XprivateX__BB38_61_F"))
		i19 = i23
		__asm(jump, target("___qdivrem__XprivateX__BB38_62_F"))
	__asm(lbl("___qdivrem__XprivateX__BB38_62_F"))
		i20 =  ((__xasm<int>(push(i17), op(0x36))))
		i19 =  (i20 - i19)
		__asm(push(i19), push(i17), op(0x3b))
		__asm(push(uint(i19)>uint(65535)), iftrue, target("___qdivrem__XprivateX__BB38_66_F"))
	__asm(lbl("___qdivrem__XprivateX__BB38_63_F"))
		i17 = i18
		__asm(jump, target("___qdivrem__XprivateX__BB38_64_F"))
	__asm(jump, target("___qdivrem__XprivateX__BB38_64_F"), lbl("___qdivrem__XprivateX__BB38_64_B"), label, lbl("___qdivrem__XprivateX__BB38_64_F")); 
		i18 =  (i7 + i16)
		__asm(push(i17), push((i18+8)), op(0x3b))
		i16 =  (i16 + 2)
		i14 =  (i14 + 1)
		__asm(push(i14>i0), iftrue, target("___qdivrem__XprivateX__BB38_72_F"))
		__asm(jump, target("___qdivrem__XprivateX__BB38_65_F"))
	__asm(lbl("___qdivrem__XprivateX__BB38_65_F"))
		__asm(jump, target("___qdivrem__XprivateX__BB38_48_B"))
	__asm(lbl("___qdivrem__XprivateX__BB38_66_F"))
		i18 =  (i18 + -1)
		__asm(push(i2>0), iftrue, target("___qdivrem__XprivateX__BB38_69_F"))
	__asm(lbl("___qdivrem__XprivateX__BB38_67_F"))
		i19 =  (0)
		__asm(jump, target("___qdivrem__XprivateX__BB38_68_F"))
	__asm(jump, target("___qdivrem__XprivateX__BB38_68_F"), lbl("___qdivrem__XprivateX__BB38_68_B"), label, lbl("___qdivrem__XprivateX__BB38_68_F")); 
		i20 =  ((__xasm<int>(push(i17), op(0x36))))
		i19 =  (i20 + i19)
		__asm(push(i19), push(i17), op(0x3b))
		i17 = i18
		__asm(jump, target("___qdivrem__XprivateX__BB38_64_B"))
	__asm(lbl("___qdivrem__XprivateX__BB38_69_F"))
		i19 =  (0)
		i20 =  (i2 << 1)
		i21 =  (i10 + i16)
		i22 = i2
	__asm(jump, target("___qdivrem__XprivateX__BB38_70_F"), lbl("___qdivrem__XprivateX__BB38_70_B"), label, lbl("___qdivrem__XprivateX__BB38_70_F")); 
		i23 =  (i21 + i20)
		i24 =  ((__xasm<int>(push(i23), op(0x36))))
		i25 =  (i8 + i20)
		i25 =  ((__xasm<int>(push(i25), op(0x36))))
		i19 =  (i24 + i19)
		i19 =  (i19 + i25)
		__asm(push(i19), push(i23), op(0x3b))
		i20 =  (i20 + -2)
		i22 =  (i22 + -1)
		i19 =  (i19 >>> 16)
		__asm(push(i22<1), iftrue, target("___qdivrem__XprivateX__BB38_68_B"))
	__asm(lbl("___qdivrem__XprivateX__BB38_71_F"))
		__asm(jump, target("___qdivrem__XprivateX__BB38_70_B"))
	__asm(lbl("___qdivrem__XprivateX__BB38_72_F"))
		__asm(push(i1==0), iftrue, target("___qdivrem__XprivateX__BB38_82_F"))
	__asm(lbl("___qdivrem__XprivateX__BB38_73_F"))
		__asm(push(i9==0), iftrue, target("___qdivrem__XprivateX__BB38_81_F"))
	__asm(lbl("___qdivrem__XprivateX__BB38_74_F"))
		i3 =  (i2 + i0)
		i7 =  (i3 << 1)
		i6 =  (i6 + i7)
		__asm(push(i3>i0), iftrue, target("___qdivrem__XprivateX__BB38_76_F"))
	__asm(lbl("___qdivrem__XprivateX__BB38_75_F"))
		i0 = i6
		__asm(jump, target("___qdivrem__XprivateX__BB38_80_F"))
	__asm(lbl("___qdivrem__XprivateX__BB38_76_F"))
		i3 =  (i2 + i0)
		i7 =  (i3 + -1)
		i7 =  (i7 << 1)
		i8 =  (i3 << 1)
		i11 =  (16 - i9)
	__asm(jump, target("___qdivrem__XprivateX__BB38_77_F"), lbl("___qdivrem__XprivateX__BB38_77_B"), label, lbl("___qdivrem__XprivateX__BB38_77_F")); 
		i14 =  (i8 + i10)
		i6 =  ((__xasm<int>(push(i6), op(0x36))))
		i15 =  ((__xasm<int>(push((i14+-2)), op(0x36))))
		i15 =  (i15 << i11)
		i6 =  (i6 >>> i9)
		i6 =  (i15 | i6)
		__asm(push(i6), push(i14), op(0x3b))
		i6 =  (i7 + i10)
		i10 =  (i10 + -2)
		i3 =  (i3 + -1)
		__asm(push(i3<=i0), iftrue, target("___qdivrem__XprivateX__BB38_79_F"))
	__asm(lbl("___qdivrem__XprivateX__BB38_78_F"))
		__asm(jump, target("___qdivrem__XprivateX__BB38_77_B"))
	__asm(lbl("___qdivrem__XprivateX__BB38_79_F"))
		i0 =  (i2 + i0)
		i0 =  (i0 << 1)
		i0 =  (i0 + i10)
	__asm(lbl("___qdivrem__XprivateX__BB38_80_F"))
		i2 =  (0)
		__asm(push(i2), push(i0), op(0x3b))
	__asm(lbl("___qdivrem__XprivateX__BB38_81_F"))
		i0 =  ((__xasm<int>(push(i13), op(0x36))))
		i2 =  ((__xasm<int>(push(i5), op(0x36))))
		i3 =  ((__xasm<int>(push(i12), op(0x36))))
		i4 =  ((__xasm<int>(push(i4), op(0x36))))
		i2 =  (i2 << 16)
		i0 =  (i0 << 16)
		i2 =  (i2 | i4)
		i0 =  (i0 | i3)
		__asm(push(i2), push(i1), op(0x3c))
		__asm(push(i0), push((i1+4)), op(0x3c))
	__asm(lbl("___qdivrem__XprivateX__BB38_82_F"))
		i0 =  ((__xasm<int>(push((mstate.ebp+-10)), op(0x36))))
		i1 =  ((__xasm<int>(push((mstate.ebp+-14)), op(0x36))))
		i2 =  ((__xasm<int>(push((mstate.ebp+-8)), op(0x36))))
		i3 =  ((__xasm<int>(push((mstate.ebp+-12)), op(0x36))))
		i0 =  (i0 << 16)
		i1 =  (i1 << 16)
		i0 =  (i0 | i2)
		i1 =  (i1 | i3)
	__asm(lbl("___qdivrem__XprivateX__BB38_83_F"))
		mstate.edx = i1
	__asm(lbl("___qdivrem__XprivateX__BB38_84_F"))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	__asm(lbl("___qdivrem__XprivateX__BB38_85_F"))
		__asm(jump, target("___qdivrem__XprivateX__BB38_32_B"))
	__asm(lbl("___qdivrem__XprivateX__BB38_86_F"))
		i18 = i26
		__asm(jump, target("___qdivrem__XprivateX__BB38_57_B"))
	__asm(lbl("___qdivrem__XprivateX__BB38_87_F"))
		i20 = i19
		i19 = i23
		__asm(jump, target("___qdivrem__XprivateX__BB38_60_B"))
	}
}



// Sync
public const ___fixdfdi:int = regFunc(FSM___fixdfdi.start)

public final class FSM___fixdfdi extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int

		var f0:Number, f1:Number

		__asm(label, lbl("___fixdfdi_entry"))
	__asm(lbl("___fixdfdi__XprivateX__BB39_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		f0 =  (0)
		f1 =  ((__xasm<Number>(push((mstate.ebp+8)), op(0x39))))
		__asm(push(f1>=f0), iftrue, target("___fixdfdi__XprivateX__BB39_3_F"))
	__asm(lbl("___fixdfdi__XprivateX__BB39_1_F"))
		f0 =  (-9.22337e+18)
		__asm(push(f1>f0), iftrue, target("___fixdfdi__XprivateX__BB39_6_F"))
	__asm(lbl("___fixdfdi__XprivateX__BB39_2_F"))
		i0 =  (-2147483648)
		i1 =  (0)
		__asm(jump, target("___fixdfdi__XprivateX__BB39_7_F"))
	__asm(lbl("___fixdfdi__XprivateX__BB39_3_F"))
		f0 =  (9.22337e+18)
		__asm(push(f1<f0), iftrue, target("___fixdfdi__XprivateX__BB39_5_F"))
	__asm(lbl("___fixdfdi__XprivateX__BB39_4_F"))
		i0 =  (2147483647)
		i1 =  (-1)
		__asm(jump, target("___fixdfdi__XprivateX__BB39_7_F"))
	__asm(lbl("___fixdfdi__XprivateX__BB39_5_F"))
		mstate.esp -= 8
		__asm(push(f1), push(mstate.esp), op(0x3e))
		mstate.esp -= 4;(mstate.funcs[___fixunsdfdi])()
	__asm(lbl("___fixdfdi_state1"))
		i0 = mstate.eax
		i1 = mstate.edx
		mstate.esp += 8
		mstate.edx = i1
		mstate.eax = i0
		__asm(jump, target("___fixdfdi__XprivateX__BB39_8_F"))
	__asm(lbl("___fixdfdi__XprivateX__BB39_6_F"))
		i0 =  (0)
		mstate.esp -= 8
		f1 =  -f1
		__asm(push(f1), push(mstate.esp), op(0x3e))
		mstate.esp -= 4;(mstate.funcs[___fixunsdfdi])()
	__asm(lbl("___fixdfdi_state2"))
		i1 = mstate.eax
		i2 = mstate.edx
		mstate.esp += 8
		i1 =  __subc(i0, i1)
		i0 =  __sube(i0, i2)
		__asm(jump, target("___fixdfdi__XprivateX__BB39_7_F"))
	__asm(lbl("___fixdfdi__XprivateX__BB39_7_F"))
		mstate.edx = i0
		mstate.eax = i1
	__asm(lbl("___fixdfdi__XprivateX__BB39_8_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const ___fixsfdi:int = regFunc(FSM___fixsfdi.start)

public final class FSM___fixsfdi extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int

		var f0:Number, f1:Number, f2:Number

		__asm(label, lbl("___fixsfdi_entry"))
	__asm(lbl("___fixsfdi__XprivateX__BB40_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		f0 =  (0)
		f1 =  ((__xasm<Number>(push((mstate.ebp+8)), op(0x38))))
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f2 =  f1/*fextend*/
		__asm(push(f2>=f0), iftrue, target("___fixsfdi__XprivateX__BB40_3_F"))
	__asm(lbl("___fixsfdi__XprivateX__BB40_1_F"))
		f0 =  (-9.22337e+18)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f2 =  f1/*fextend*/
		__asm(push(f2>f0), iftrue, target("___fixsfdi__XprivateX__BB40_6_F"))
	__asm(lbl("___fixsfdi__XprivateX__BB40_2_F"))
		i0 =  (-2147483648)
		i1 =  (0)
		__asm(jump, target("___fixsfdi__XprivateX__BB40_7_F"))
	__asm(lbl("___fixsfdi__XprivateX__BB40_3_F"))
		f0 =  (9.22337e+18)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f2 =  f1/*fextend*/
		__asm(push(f2<f0), iftrue, target("___fixsfdi__XprivateX__BB40_5_F"))
	__asm(lbl("___fixsfdi__XprivateX__BB40_4_F"))
		i0 =  (2147483647)
		i1 =  (-1)
		__asm(jump, target("___fixsfdi__XprivateX__BB40_7_F"))
	__asm(lbl("___fixsfdi__XprivateX__BB40_5_F"))
		mstate.esp -= 4
		__asm(push(f1), push(mstate.esp), op(0x3d))
		mstate.esp -= 4;(mstate.funcs[___fixunssfdi])()
	__asm(lbl("___fixsfdi_state1"))
		i0 = mstate.eax
		i1 = mstate.edx
		mstate.esp += 4
		mstate.edx = i1
		mstate.eax = i0
		__asm(jump, target("___fixsfdi__XprivateX__BB40_8_F"))
	__asm(lbl("___fixsfdi__XprivateX__BB40_6_F"))
		i0 =  (0)
		f0 =  f1/*fextend*/
		f0 =  -f0
		mstate.esp -= 4
		f1 =  f0/*fround*/
		__asm(push(f1), push(mstate.esp), op(0x3d))
		mstate.esp -= 4;(mstate.funcs[___fixunssfdi])()
	__asm(lbl("___fixsfdi_state2"))
		i1 = mstate.eax
		i2 = mstate.edx
		mstate.esp += 4
		i1 =  __subc(i0, i1)
		i0 =  __sube(i0, i2)
		__asm(jump, target("___fixsfdi__XprivateX__BB40_7_F"))
	__asm(lbl("___fixsfdi__XprivateX__BB40_7_F"))
		mstate.edx = i0
		mstate.eax = i1
	__asm(lbl("___fixsfdi__XprivateX__BB40_8_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const ___fixunsdfdi:int = regFunc(FSM___fixunsdfdi.start)

public final class FSM___fixunsdfdi extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number

		__asm(label, lbl("___fixunsdfdi_entry"))
	__asm(lbl("___fixunsdfdi__XprivateX__BB41_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		f0 =  (1.84467e+19)
		f1 =  ((__xasm<Number>(push((mstate.ebp+8)), op(0x39))))
		__asm(push(f1>=f0), iftrue, target("___fixunsdfdi__XprivateX__BB41_3_F"))
	__asm(lbl("___fixunsdfdi__XprivateX__BB41_1_F"))
		f0 =  (0)
		__asm(push(f1<f0), iftrue, target("___fixunsdfdi__XprivateX__BB41_3_F"))
	__asm(lbl("___fixunsdfdi__XprivateX__BB41_2_F"))
		i0 =  (0)
		f0 =  (f1 + -2.14748e+09)
		f0 =  (f0 * 2.32831e-10)
		mstate.esp -= 8
		i1 =  (uint(f0))
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		mstate.esp -= 4;(mstate.funcs[___floatdidf])()
	__asm(lbl("___fixunsdfdi_state1"))
		f0 = mstate.st0
		f0 =  (f1 - f0)
		f1 =  (0)
		f2 =  (f0 + 4.29497e+09)
		f2 =  ((f0<f1) ? f2 : f0)
		i2 =  (i1 + -1)
		f3 =  (4.29497e+09)
		f4 =  (f2 - 4.29497e+09)
		f4 =  ((f2>f3) ? f4 : f2)
		i1 =  ((f0>=f1) ? i1 : i2)
		i0 =  ((f0>=f1) ? 0 : i0)
		i2 =  (i1 + 1)
		i0 =  ((f2<=f3) ? i0 : i0)
		i3 =  (uint(f4))
		mstate.esp += 8
		i0 =  (i0 | i3)
		i1 =  ((f2<=f3) ? i1 : i2)
		mstate.edx = i1
		__asm(jump, target("___fixunsdfdi__XprivateX__BB41_4_F"))
	__asm(lbl("___fixunsdfdi__XprivateX__BB41_3_F"))
		i0 =  (-1)
		mstate.edx = i0
	__asm(lbl("___fixunsdfdi__XprivateX__BB41_4_F"))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const ___fixunssfdi:int = regFunc(FSM___fixunssfdi.start)

public final class FSM___fixunssfdi extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number

		__asm(label, lbl("___fixunssfdi_entry"))
	__asm(lbl("___fixunssfdi__XprivateX__BB42_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		f0 =  (1.84467e+19)
		f1 =  ((__xasm<Number>(push((mstate.ebp+8)), op(0x38))))
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f2 =  f1/*fextend*/
		__asm(push(f2>=f0), iftrue, target("___fixunssfdi__XprivateX__BB42_3_F"))
	__asm(lbl("___fixunssfdi__XprivateX__BB42_1_F"))
		f0 =  (0)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f2 =  f1/*fextend*/
		__asm(push(f2<f0), iftrue, target("___fixunssfdi__XprivateX__BB42_3_F"))
	__asm(lbl("___fixunssfdi__XprivateX__BB42_2_F"))
		i0 =  (0)
		f0 =  f1/*fextend*/
		f1 =  (f0 + -2.14748e+09)
		f1 =  (f1 * 2.32831e-10)
		mstate.esp -= 8
		i1 =  (uint(f1))
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		mstate.esp -= 4;(mstate.funcs[___floatdidf])()
	__asm(lbl("___fixunssfdi_state1"))
		f1 = mstate.st0
		f0 =  (f0 - f1)
		f1 =  (0)
		f2 =  (f0 + 4.29497e+09)
		f2 =  ((f0<f1) ? f2 : f0)
		i2 =  (i1 + -1)
		f3 =  (4.29497e+09)
		f4 =  (f2 - 4.29497e+09)
		f4 =  ((f2>f3) ? f4 : f2)
		i1 =  ((f0>=f1) ? i1 : i2)
		i0 =  ((f0>=f1) ? 0 : i0)
		i2 =  (i1 + 1)
		i0 =  ((f2<=f3) ? i0 : i0)
		i3 =  (uint(f4))
		mstate.esp += 8
		i0 =  (i0 | i3)
		i1 =  ((f2<=f3) ? i1 : i2)
		mstate.edx = i1
		__asm(jump, target("___fixunssfdi__XprivateX__BB42_4_F"))
	__asm(lbl("___fixunssfdi__XprivateX__BB42_3_F"))
		i0 =  (-1)
		mstate.edx = i0
	__asm(lbl("___fixunssfdi__XprivateX__BB42_4_F"))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const ___floatdidf:int = regFunc(FSM___floatdidf.start)

public final class FSM___floatdidf extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int

		var f0:Number, f1:Number

		__asm(label, lbl("___floatdidf_entry"))
	__asm(lbl("___floatdidf__XprivateX__BB43_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i2 =  (i0 >> 31)
		i1 =  __addc(i1, i2)
		i3 =  __adde(i0, i2)
		i3 =  (i3 ^ i2)
		i1 =  (i1 ^ i2)
		f0 =  (Number(uint(i3)))
		f1 =  (Number(uint(i1)))
		f0 =  (f0 * 4.29497e+09)
		f0 =  (f1 + f0)
		__asm(push(i0>-1), iftrue, target("___floatdidf__XprivateX__BB43_2_F"))
	__asm(lbl("___floatdidf__XprivateX__BB43_1_F"))
		f0 =  -f0
	__asm(lbl("___floatdidf__XprivateX__BB43_2_F"))
		mstate.st0 = f0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const ___floatdisf:int = regFunc(FSM___floatdisf.start)

public final class FSM___floatdisf extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int

		var f0:Number, f1:Number

		__asm(label, lbl("___floatdisf_entry"))
	__asm(lbl("___floatdisf__XprivateX__BB44_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i2 =  (i0 >> 31)
		i1 =  __addc(i1, i2)
		i3 =  __adde(i0, i2)
		i3 =  (i3 ^ i2)
		f0 =  (Number(uint(i3)))
		i1 =  (i1 ^ i2)
		f0 =  (f0 * 4.29497e+09)
		f1 =  (Number(uint(i1)))
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  (f1 + f0)
		f0 =  f0/*fround*/
		__asm(push(i0>-1), iftrue, target("___floatdisf__XprivateX__BB44_2_F"))
	__asm(lbl("___floatdisf__XprivateX__BB44_1_F"))
		f0 =  f0/*fextend*/
		f0 =  -f0
		f0 =  f0/*fround*/
	__asm(lbl("___floatdisf__XprivateX__BB44_2_F"))
		mstate.st0 = f0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const ___floatunsdidf:int = regFunc(FSM___floatunsdidf.start)

public final class FSM___floatunsdidf extends Machine {

	public static function start():void {
		var i0:int, i1:int

		var f0:Number, f1:Number

		__asm(label, lbl("___floatunsdidf_entry"))
	__asm(lbl("___floatunsdidf__XprivateX__BB45_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		f0 =  (Number(uint(i0)))
		f1 =  (Number(uint(i1)))
		f0 =  (f0 * 4.29497e+09)
		f0 =  (f1 + f0)
		mstate.st0 = f0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const ___iordi3:int = regFunc(FSM___iordi3.start)

public final class FSM___iordi3 extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int


		__asm(label, lbl("___iordi3_entry"))
	__asm(lbl("___iordi3__XprivateX__BB46_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i3 =  ((__xasm<int>(push((mstate.ebp+20)), op(0x37))))
		i2 =  (i2 | i3)
		i0 =  (i0 | i1)
		mstate.edx = i2
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const ___lshldi3:int = regFunc(FSM___lshldi3.start)

public final class FSM___lshldi3 extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int


		__asm(label, lbl("___lshldi3_entry"))
	__asm(lbl("___lshldi3__XprivateX__BB47_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+20)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i3 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i4 =  ((uint(i0)<uint(32)) ? 1 : 0)
		i5 =  ((i1==0) ? 1 : 0)
		i4 =  ((i5!=0) ? i4 : 0)
		__asm(push(i4!=0), iftrue, target("___lshldi3__XprivateX__BB47_4_F"))
	__asm(lbl("___lshldi3__XprivateX__BB47_1_F"))
		i3 =  ((uint(i0)<uint(64)) ? 1 : 0)
		i1 =  ((i1==0) ? 1 : 0)
		i1 =  ((i1!=0) ? i3 : 0)
		__asm(push(i1!=0), iftrue, target("___lshldi3__XprivateX__BB47_3_F"))
	__asm(lbl("___lshldi3__XprivateX__BB47_2_F"))
		i0 =  (0)
		i1 = i0
		__asm(jump, target("___lshldi3__XprivateX__BB47_7_F"))
	__asm(lbl("___lshldi3__XprivateX__BB47_3_F"))
		i1 =  (0)
		i0 =  (i0 + -32)
		i0 =  (i2 << i0)
		mstate.edx = i0
		mstate.eax = i1
		__asm(jump, target("___lshldi3__XprivateX__BB47_8_F"))
	__asm(lbl("___lshldi3__XprivateX__BB47_4_F"))
		i1 =  (i0 | i1)
		__asm(push(i1!=0), iftrue, target("___lshldi3__XprivateX__BB47_6_F"))
	__asm(lbl("___lshldi3__XprivateX__BB47_5_F"))
		i0 = i2
		i1 = i3
		__asm(jump, target("___lshldi3__XprivateX__BB47_7_F"))
	__asm(lbl("___lshldi3__XprivateX__BB47_6_F"))
		i1 =  (32 - i0)
		i1 =  (i2 >>> i1)
		i3 =  (i3 << i0)
		i0 =  (i2 << i0)
		i1 =  (i1 | i3)
	__asm(lbl("___lshldi3__XprivateX__BB47_7_F"))
		mstate.edx = i1
		mstate.eax = i0
	__asm(lbl("___lshldi3__XprivateX__BB47_8_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const ___lshrdi3:int = regFunc(FSM___lshrdi3.start)

public final class FSM___lshrdi3 extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int


		__asm(label, lbl("___lshrdi3_entry"))
	__asm(lbl("___lshrdi3__XprivateX__BB48_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+20)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i3 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i4 =  ((uint(i0)<uint(32)) ? 1 : 0)
		i5 =  ((i1==0) ? 1 : 0)
		i4 =  ((i5!=0) ? i4 : 0)
		__asm(push(i4!=0), iftrue, target("___lshrdi3__XprivateX__BB48_3_F"))
	__asm(lbl("___lshrdi3__XprivateX__BB48_1_F"))
		i2 =  ((uint(i0)<uint(64)) ? 1 : 0)
		i1 =  ((i1==0) ? 1 : 0)
		i1 =  ((i1!=0) ? i2 : 0)
		__asm(push(i1!=0), iftrue, target("___lshrdi3__XprivateX__BB48_6_F"))
	__asm(lbl("___lshrdi3__XprivateX__BB48_2_F"))
		i0 =  (0)
		i1 = i0
		__asm(jump, target("___lshrdi3__XprivateX__BB48_7_F"))
	__asm(lbl("___lshrdi3__XprivateX__BB48_3_F"))
		i1 =  (i0 | i1)
		__asm(push(i1!=0), iftrue, target("___lshrdi3__XprivateX__BB48_5_F"))
	__asm(lbl("___lshrdi3__XprivateX__BB48_4_F"))
		i0 = i2
		i1 = i3
		__asm(jump, target("___lshrdi3__XprivateX__BB48_7_F"))
	__asm(lbl("___lshrdi3__XprivateX__BB48_5_F"))
		i1 =  (32 - i0)
		i1 =  (i3 << i1)
		i2 =  (i2 >>> i0)
		i0 =  (i3 >>> i0)
		i1 =  (i1 | i2)
		mstate.edx = i0
		mstate.eax = i1
		__asm(jump, target("___lshrdi3__XprivateX__BB48_8_F"))
	__asm(lbl("___lshrdi3__XprivateX__BB48_6_F"))
		i1 =  (0)
		i0 =  (i0 + -32)
		i0 =  (i3 >>> i0)
		__asm(jump, target("___lshrdi3__XprivateX__BB48_7_F"))
	__asm(lbl("___lshrdi3__XprivateX__BB48_7_F"))
		mstate.edx = i1
		mstate.eax = i0
	__asm(lbl("___lshrdi3__XprivateX__BB48_8_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const ___moddi3:int = regFunc(FSM___moddi3.start)

public final class FSM___moddi3 extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int


		__asm(label, lbl("___moddi3_entry"))
	__asm(lbl("___moddi3__XprivateX__BB49_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 8
		i0 =  ((mstate.ebp+-8))
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+20)), op(0x37))))
		i3 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i4 =  (i1 >> 31)
		i5 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i6 =  (i2 >> 31)
		i3 =  __addc(i3, i4)
		i7 =  __adde(i1, i4)
		i5 =  __addc(i5, i6)
		i2 =  __adde(i2, i6)
		mstate.esp -= 20
		i2 =  (i2 ^ i6)
		i5 =  (i5 ^ i6)
		i6 =  (i7 ^ i4)
		i3 =  (i3 ^ i4)
		__asm(push(i3), push(mstate.esp), op(0x3c))
		__asm(push(i6), push((mstate.esp+4)), op(0x3c))
		__asm(push(i5), push((mstate.esp+8)), op(0x3c))
		__asm(push(i2), push((mstate.esp+12)), op(0x3c))
		__asm(push(i0), push((mstate.esp+16)), op(0x3c))
		mstate.esp -= 4;FSM___qdivrem.start()
	__asm(lbl("___moddi3_state1"))
		i0 = mstate.eax
		i0 = mstate.edx
		mstate.esp += 20
		i0 =  ((__xasm<int>(push((mstate.ebp+-8)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		__asm(push(i1>-1), iftrue, target("___moddi3__XprivateX__BB49_2_F"))
	__asm(lbl("___moddi3__XprivateX__BB49_1_F"))
		i1 =  (0)
		i0 =  __subc(i1, i0)
		i2 =  __sube(i1, i2)
	__asm(lbl("___moddi3__XprivateX__BB49_2_F"))
		mstate.edx = i2
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const ___lmulq:int = regFunc(FSM___lmulq.start)

public final class FSM___lmulq extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
		var i8:int, i9:int


		__asm(label, lbl("___lmulq_entry"))
	__asm(lbl("___lmulq__XprivateX__BB50_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  (i1 & 65535)
		i3 =  (i0 & 65535)
		i4 =  (i2 * i3)
		i5 =  (i1 >>> 16)
		i6 =  (i0 >>> 16)
		__asm(push(uint(i1)>uint(65535)), iftrue, target("___lmulq__XprivateX__BB50_4_F"))
	__asm(lbl("___lmulq__XprivateX__BB50_1_F"))
		__asm(push(uint(i0)>uint(65535)), iftrue, target("___lmulq__XprivateX__BB50_4_F"))
	__asm(lbl("___lmulq__XprivateX__BB50_2_F"))
		i2 =  (0)
		mstate.edx = i2
		mstate.eax = i4
	__asm(jump, target("___lmulq__XprivateX__BB50_3_F"), lbl("___lmulq__XprivateX__BB50_3_B"), label, lbl("___lmulq__XprivateX__BB50_3_F")); 
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	__asm(lbl("___lmulq__XprivateX__BB50_4_F"))
		i0 =  ((uint(i6)<uint(i3)) ? i3 : i6)
		i1 =  ((uint(i6)<uint(i3)) ? i6 : i3)
		i7 =  ((uint(i2)<uint(i5)) ? i5 : i2)
		i8 =  ((uint(i2)<uint(i5)) ? i2 : i5)
		i9 =  (i5 * i6)
		i7 =  (i7 - i8)
		i0 =  (i0 - i1)
		i1 =  (i9 >>> 16)
		i0 =  (i7 * i0)
		i3 =  ((uint(i6)<uint(i3)) ? 1 : 0)
		i2 =  ((uint(i2)<uint(i5)) ? 1 : 0)
		i2 =  (i2 ^ i3)
		i3 =  (i0 << 16)
		i5 =  (i9 << 16)
		i1 =  (i1 + i9)
		i2 =  (i2 ^ 1)
		i2 =  (i2 & 1)
		__asm(push(i2!=0), iftrue, target("___lmulq__XprivateX__BB50_6_F"))
	__asm(lbl("___lmulq__XprivateX__BB50_5_F"))
		i3 =  (i5 - i3)
		i5 =  ((uint(i3)>uint(i5)) ? 1 : 0)
		i0 =  (i0 >>> 16)
		i5 =  (i5 & 1)
		i0 =  (i1 - i0)
		i0 =  (i0 - i5)
		i1 = i3
		__asm(jump, target("___lmulq__XprivateX__BB50_7_F"))
	__asm(lbl("___lmulq__XprivateX__BB50_6_F"))
		i2 =  (i3 + i5)
		i3 =  ((uint(i2)<uint(i5)) ? 1 : 0)
		i0 =  (i0 >>> 16)
		i3 =  (i3 & 1)
		i0 =  (i0 + i1)
		i0 =  (i0 + i3)
		i1 = i2
	__asm(lbl("___lmulq__XprivateX__BB50_7_F"))
		i2 =  (i4 << 16)
		i2 =  (i1 + i2)
		i1 =  ((uint(i2)<uint(i1)) ? 1 : 0)
		i2 =  (i2 + i4)
		i3 =  (i4 >>> 16)
		i4 =  ((uint(i2)<uint(i4)) ? 1 : 0)
		i1 =  (i1 & 1)
		i0 =  (i0 + i3)
		i3 =  (i4 & 1)
		i0 =  (i0 + i1)
		i0 =  (i0 + i3)
		mstate.edx = i0
		mstate.eax = i2
		__asm(jump, target("___lmulq__XprivateX__BB50_3_B"))
	}
}



// Sync
public const ___muldi3:int = regFunc(FSM___muldi3.start)

public final class FSM___muldi3 extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
		var i8:int, i9:int, i10:int, i11:int


		__asm(label, lbl("___muldi3_entry"))
	__asm(lbl("___muldi3__XprivateX__BB51_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (0)
		i0 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+20)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i3 =  (i0 >> 31)
		i4 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i5 =  (i1 >> 31)
		i2 =  __addc(i2, i3)
		i6 =  __adde(i0, i3)
		i4 =  __addc(i4, i5)
		i7 =  __adde(i1, i5)
		i0 =  (i0 >>> 31)
		i6 =  (i6 ^ i3)
		i2 =  (i2 ^ i3)
		i1 =  (i1 >>> 31)
		i3 =  (i7 ^ i5)
		i4 =  (i4 ^ i5)
		i5 = i6
		i7 = i6
		__asm(push(i6!=0), iftrue, target("___muldi3__XprivateX__BB51_4_F"))
	__asm(lbl("___muldi3__XprivateX__BB51_1_F"))
		__asm(push(i3!=0), iftrue, target("___muldi3__XprivateX__BB51_4_F"))
	__asm(lbl("___muldi3__XprivateX__BB51_2_F"))
		mstate.esp -= 8
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i4), push((mstate.esp+4)), op(0x3c))
		mstate.esp -= 4;FSM___lmulq.start()
	__asm(lbl("___muldi3_state1"))
		i2 = mstate.eax
		i3 = mstate.edx
		mstate.esp += 8
		__asm(push(i0==i1), iftrue, target("___muldi3__XprivateX__BB51_7_F"))
	__asm(lbl("___muldi3__XprivateX__BB51_3_F"))
		__asm(jump, target("___muldi3__XprivateX__BB51_6_F"))
	__asm(lbl("___muldi3__XprivateX__BB51_4_F"))
		i6 =  ((uint(i4)<uint(i3)) ? i4 : i3)
		i8 =  ((uint(i4)<uint(i3)) ? i3 : i4)
		i9 =  ((uint(i5)<uint(i2)) ? i7 : i2)
		i7 =  ((uint(i5)<uint(i2)) ? i2 : i7)
		i10 =  ((uint(i4)<uint(i3)) ? 1 : 0)
		i11 =  ((uint(i5)<uint(i2)) ? 1 : 0)
		i6 =  (i8 - i6)
		i7 =  (i7 - i9)
		mstate.esp -= 8
		i8 =  (i10 ^ i11)
		i6 =  (i6 * i7)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i4), push((mstate.esp+4)), op(0x3c))
		i2 =  (i8 & 1)
		i4 =  (0 - i6)
		i2 =  ((i2!=0) ? i4 : i6)
		i3 =  (i3 * i5)
		mstate.esp -= 4;FSM___lmulq.start()
	__asm(lbl("___muldi3_state2"))
		i4 = mstate.eax
		i5 = mstate.edx
		i2 =  (i2 + i3)
		i2 =  (i2 + i4)
		mstate.esp += 8
		i3 =  (i2 + i5)
		__asm(push(i0==i1), iftrue, target("___muldi3__XprivateX__BB51_10_F"))
	__asm(lbl("___muldi3__XprivateX__BB51_5_F"))
		i2 = i4
		__asm(jump, target("___muldi3__XprivateX__BB51_6_F"))
	__asm(lbl("___muldi3__XprivateX__BB51_6_F"))
		i0 =  (0)
		i2 =  __subc(i0, i2)
		i3 =  __sube(i0, i3)
		mstate.edx = i3
		mstate.eax = i2
		__asm(jump, target("___muldi3__XprivateX__BB51_9_F"))
	__asm(lbl("___muldi3__XprivateX__BB51_7_F"))
		__asm(jump, target("___muldi3__XprivateX__BB51_8_F"))
	__asm(jump, target("___muldi3__XprivateX__BB51_8_F"), lbl("___muldi3__XprivateX__BB51_8_B"), label, lbl("___muldi3__XprivateX__BB51_8_F")); 
		i0 = i2
		i1 = i3
		mstate.edx = i1
		mstate.eax = i0
	__asm(lbl("___muldi3__XprivateX__BB51_9_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	__asm(lbl("___muldi3__XprivateX__BB51_10_F"))
		i2 = i4
		__asm(jump, target("___muldi3__XprivateX__BB51_8_B"))
	}
}



// Sync
public const ___negdi2:int = regFunc(FSM___negdi2.start)

public final class FSM___negdi2 extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int


		__asm(label, lbl("___negdi2_entry"))
	__asm(lbl("___negdi2__XprivateX__BB52_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (0)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i3 =  ((i1!=0) ? 1 : 0)
		i2 =  __subc(i0, i2)
		i3 =  (i3 & 1)
		i0 =  __subc(i0, i1)
		i1 =  __subc(i2, i3)
		mstate.edx = i1
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const ___one_cmpldi2:int = regFunc(FSM___one_cmpldi2.start)

public final class FSM___one_cmpldi2 extends Machine {

	public static function start():void {
		var i0:int, i1:int


		__asm(label, lbl("___one_cmpldi2_entry"))
	__asm(lbl("___one_cmpldi2__XprivateX__BB53_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i1 =  (i1 ^ -1)
		i0 =  (i0 ^ -1)
		mstate.edx = i1
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const ___subdi3:int = regFunc(FSM___subdi3.start)

public final class FSM___subdi3 extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int


		__asm(label, lbl("___subdi3_entry"))
	__asm(lbl("___subdi3__XprivateX__BB54_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i1 =  (i0 - i1)
		i0 =  ((uint(i1)>uint(i0)) ? 1 : 0)
		i2 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i3 =  ((__xasm<int>(push((mstate.ebp+20)), op(0x37))))
		i2 =  __subc(i2, i3)
		i0 =  (i0 & 1)
		i0 =  __subc(i2, i0)
		mstate.edx = i0
		mstate.eax = i1
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const ___ucmpdi2:int = regFunc(FSM___ucmpdi2.start)

public final class FSM___ucmpdi2 extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int, i4:int


		__asm(label, lbl("___ucmpdi2_entry"))
	__asm(lbl("___ucmpdi2__XprivateX__BB55_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+20)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i3 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i4 = i1
		i4 = i0
		__asm(push(uint(i0)>=uint(i1)), iftrue, target("___ucmpdi2__XprivateX__BB55_2_F"))
	__asm(jump, target("___ucmpdi2__XprivateX__BB55_1_F"), lbl("___ucmpdi2__XprivateX__BB55_1_B"), label, lbl("___ucmpdi2__XprivateX__BB55_1_F")); 
		i0 =  (0)
		__asm(jump, target("___ucmpdi2__XprivateX__BB55_6_F"))
	__asm(lbl("___ucmpdi2__XprivateX__BB55_2_F"))
		__asm(push(uint(i0)<=uint(i1)), iftrue, target("___ucmpdi2__XprivateX__BB55_4_F"))
	__asm(lbl("___ucmpdi2__XprivateX__BB55_3_F"))
		i0 =  (2)
		__asm(jump, target("___ucmpdi2__XprivateX__BB55_6_F"))
	__asm(lbl("___ucmpdi2__XprivateX__BB55_4_F"))
		i0 = i3
		i1 = i2
		__asm(push(uint(i2)<uint(i3)), iftrue, target("___ucmpdi2__XprivateX__BB55_1_B"))
	__asm(lbl("___ucmpdi2__XprivateX__BB55_5_F"))
		i0 =  ((uint(i1)>uint(i0)) ? 2 : 1)
	__asm(lbl("___ucmpdi2__XprivateX__BB55_6_F"))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const ___udivdi3:int = regFunc(FSM___udivdi3.start)

public final class FSM___udivdi3 extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int, i4:int


		__asm(label, lbl("___udivdi3_entry"))
	__asm(lbl("___udivdi3__XprivateX__BB56_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (0)
		mstate.esp -= 20
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i3 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i4 =  ((__xasm<int>(push((mstate.ebp+20)), op(0x37))))
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i2), push((mstate.esp+4)), op(0x3c))
		__asm(push(i3), push((mstate.esp+8)), op(0x3c))
		__asm(push(i4), push((mstate.esp+12)), op(0x3c))
		__asm(push(i0), push((mstate.esp+16)), op(0x3c))
		mstate.esp -= 4;FSM___qdivrem.start()
	__asm(lbl("___udivdi3_state1"))
		i0 = mstate.eax
		i1 = mstate.edx
		mstate.esp += 20
		mstate.edx = i1
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const ___umoddi3:int = regFunc(FSM___umoddi3.start)

public final class FSM___umoddi3 extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int, i4:int


		__asm(label, lbl("___umoddi3_entry"))
	__asm(lbl("___umoddi3__XprivateX__BB57_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 8
		i0 =  ((mstate.ebp+-8))
		mstate.esp -= 20
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i3 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i4 =  ((__xasm<int>(push((mstate.ebp+20)), op(0x37))))
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i2), push((mstate.esp+4)), op(0x3c))
		__asm(push(i3), push((mstate.esp+8)), op(0x3c))
		__asm(push(i4), push((mstate.esp+12)), op(0x3c))
		__asm(push(i0), push((mstate.esp+16)), op(0x3c))
		mstate.esp -= 4;FSM___qdivrem.start()
	__asm(lbl("___umoddi3_state1"))
		i0 = mstate.eax
		i0 = mstate.edx
		mstate.esp += 20
		i0 =  ((__xasm<int>(push((mstate.ebp+-8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		mstate.edx = i1
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const ___xordi3:int = regFunc(FSM___xordi3.start)

public final class FSM___xordi3 extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int


		__asm(label, lbl("___xordi3_entry"))
	__asm(lbl("___xordi3__XprivateX__BB58_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i3 =  ((__xasm<int>(push((mstate.ebp+20)), op(0x37))))
		i2 =  (i2 ^ i3)
		i0 =  (i0 ^ i1)
		mstate.edx = i2
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Async
public const ___vfprintf:int = regFunc(FSM___vfprintf.start)

public final class FSM___vfprintf extends Machine {

	public static function start():void {
			var result:FSM___vfprintf = new FSM___vfprintf
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
	public var i8:int, i9:int, i10:int, i11:int, i12:int, i13:int, i14:int, i15:int
	public var i16:int, i17:int, i18:int, i19:int, i20:int, i21:int, i22:int, i23:int
	public var i24:int, i25:int, i26:int, i27:int, i28:int, i29:int, i30:int, i31:int
	public static const intRegCount:int = 32
	public var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number

	public static const NumberRegCount:int = 5
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("___vfprintf_entry"))
		__asm(push(state), switchjump(
			"___vfprintf_errState",
			"___vfprintf_state0",
			"___vfprintf_state1",
			"___vfprintf_state2",
			"___vfprintf_state3",
			"___vfprintf_state4",
			"___vfprintf_state5",
			"___vfprintf_state6",
			"___vfprintf_state7",
			"___vfprintf_state8",
			"___vfprintf_state9",
			"___vfprintf_state10",
			"___vfprintf_state11",
			"___vfprintf_state12",
			"___vfprintf_state13",
			"___vfprintf_state14",
			"___vfprintf_state15",
			"___vfprintf_state16",
			"___vfprintf_state17",
			"___vfprintf_state18",
			"___vfprintf_state19",
			"___vfprintf_state20",
			"___vfprintf_state21",
			"___vfprintf_state22",
			"___vfprintf_state23",
			"___vfprintf_state24",
			"___vfprintf_state25",
			"___vfprintf_state26",
			"___vfprintf_state27",
			"___vfprintf_state28",
			"___vfprintf_state29",
			"___vfprintf_state30",
			"___vfprintf_state31",
			"___vfprintf_state32",
			"___vfprintf_state33",
			"___vfprintf_state34",
			"___vfprintf_state35",
			"___vfprintf_state36",
			"___vfprintf_state37",
			"___vfprintf_state38",
			"___vfprintf_state39",
			"___vfprintf_state40",
			"___vfprintf_state41",
			"___vfprintf_state42",
			"___vfprintf_state43",
			"___vfprintf_state44",
			"___vfprintf_state45",
			"___vfprintf_state46",
			"___vfprintf_state47",
			"___vfprintf_state48",
			"___vfprintf_state49",
			"___vfprintf_state50",
			"___vfprintf_state51",
			"___vfprintf_state52",
			"___vfprintf_state53",
			"___vfprintf_state54",
			"___vfprintf_state55",
			"___vfprintf_state56",
			"___vfprintf_state57",
			"___vfprintf_state58",
			"___vfprintf_state59",
			"___vfprintf_state60",
			"___vfprintf_state61",
			"___vfprintf_state62",
			"___vfprintf_state63",
			"___vfprintf_state64",
			"___vfprintf_state65",
			"___vfprintf_state66",
			"___vfprintf_state67",
			"___vfprintf_state68",
			"___vfprintf_state69",
			"___vfprintf_state70",
			"___vfprintf_state71",
			"___vfprintf_state72",
			"___vfprintf_state73",
			"___vfprintf_state74",
			"___vfprintf_state75",
			"___vfprintf_state76",
			"___vfprintf_state77",
			"___vfprintf_state78",
			"___vfprintf_state79",
			"___vfprintf_state80",
			"___vfprintf_state81",
			"___vfprintf_state82",
			"___vfprintf_state83",
			"___vfprintf_state84",
			"___vfprintf_state85",
			"___vfprintf_state86",
			"___vfprintf_state87",
			"___vfprintf_state88",
			"___vfprintf_state89",
			"___vfprintf_state90",
			"___vfprintf_state91",
			"___vfprintf_state92",
			"___vfprintf_state93",
			"___vfprintf_state94",
			"___vfprintf_state95",
			"___vfprintf_state96",
			"___vfprintf_state97",
			"___vfprintf_state98",
			"___vfprintf_state99",
			"___vfprintf_state100",
			"___vfprintf_state101",
			"___vfprintf_state102",
			"___vfprintf_state103",
			"___vfprintf_state104",
			"___vfprintf_state105",
			"___vfprintf_state106",
			"___vfprintf_state107",
			"___vfprintf_state108",
			"___vfprintf_state109",
			"___vfprintf_state110",
			"___vfprintf_state111",
			"___vfprintf_state112",
			"___vfprintf_state113",
			"___vfprintf_state114",
			"___vfprintf_state115",
			"___vfprintf_state116",
			"___vfprintf_state117"))
	__asm(lbl("___vfprintf_state0"))
	__asm(lbl("___vfprintf__XprivateX__BB59_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 2556
		i0 =  (0)
		__asm(push(i0), push((mstate.ebp+-1745)), op(0x3a))
		mstate.esp -= 4;FSM_localeconv.start()
	__asm(lbl("___vfprintf_state1"))
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+12)), op(0x36))))
		i2 =  ((__xasm<int>(push(_ret_2E_1494_2E_0), op(0x37))))
		__asm(push(i2), push((mstate.ebp+-2097)), op(0x3c))
		i2 =  (i0 + 12)
		__asm(push(i2), push((mstate.ebp+-1971)), op(0x3c))
		i2 =  ((mstate.ebp+-1328))
		i3 =  ((mstate.ebp+-192))
		__asm(push(i3), push((mstate.ebp+-2196)), op(0x3c))
		i3 =  ((mstate.ebp+-1736))
		__asm(push(i3), push((mstate.ebp+-2205)), op(0x3c))
		i3 =  ((mstate.ebp+-1648))
		__asm(push(i3), push((mstate.ebp+-2034)), op(0x3c))
		i3 =  ((mstate.ebp+-208))
		__asm(push(i3), push((mstate.ebp+-2052)), op(0x3c))
		i3 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		__asm(push(i3), push((mstate.ebp+-2232)), op(0x3c))
		i3 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i4 =  (i1 & 8)
		__asm(push(i4==0), iftrue, target("___vfprintf__XprivateX__BB59_3_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1_F"))
		i4 =  ((__xasm<int>(push((i0+16)), op(0x37))))
		__asm(push(i4!=0), iftrue, target("___vfprintf__XprivateX__BB59_5_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_2_F"))
		i1 =  (i1 & 512)
		__asm(push(i1!=0), iftrue, target("___vfprintf__XprivateX__BB59_5_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_3_F"))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM___swsetup.start()
		return
	__asm(lbl("___vfprintf_state2"))
		i1 = mstate.eax
		mstate.esp += 4
		__asm(push(i1==0), iftrue, target("___vfprintf__XprivateX__BB59_5_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_4_F"))
		i0 =  (-1)
		__asm(jump, target("___vfprintf__XprivateX__BB59_1460_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_5_F"))
		i1 =  ((__xasm<int>(push((mstate.ebp+-1971)), op(0x37))))
		i1 =  ((__xasm<int>(push(i1), op(0x36))))
		i4 =  (i1 & 26)
		__asm(push(i4!=10), iftrue, target("___vfprintf__XprivateX__BB59_14_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_6_F"))
		i4 =  ((__xasm<int>(push((i0+14)), op(0x36))))
		i5 =  (i4 << 16)
		i5 =  (i5 >> 16)
		__asm(push(i5<0), iftrue, target("___vfprintf__XprivateX__BB59_14_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_7_F"))
		i5 =  (1024)
		i1 =  (i1 & -3)
		__asm(push(i1), push((mstate.ebp+-292)), op(0x3b))
		__asm(push(i4), push((mstate.ebp+-290)), op(0x3b))
		i1 =  ((__xasm<int>(push((i0+28)), op(0x37))))
		__asm(push(i1), push((mstate.ebp+-276)), op(0x3c))
		i1 =  ((__xasm<int>(push((i0+44)), op(0x37))))
		__asm(push(i1), push((mstate.ebp+-260)), op(0x3c))
		i0 =  ((__xasm<int>(push((i0+56)), op(0x37))))
		__asm(push(i0), push((mstate.ebp+-248)), op(0x3c))
		__asm(push(i2), push((mstate.ebp+-304)), op(0x3c))
		__asm(push(i2), push((mstate.ebp+-288)), op(0x3c))
		__asm(push(i5), push((mstate.ebp+-296)), op(0x3c))
		__asm(push(i5), push((mstate.ebp+-284)), op(0x3c))
		i0 =  (0)
		__asm(push(i0), push((mstate.ebp+-280)), op(0x3c))
		i0 =  ((mstate.ebp+-304))
		mstate.esp -= 12
		__asm(push(i0), push(mstate.esp), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2232)), op(0x37))))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i3), push((mstate.esp+8)), op(0x3c))
		state = 3
		mstate.esp -= 4;FSM___vfprintf.start()
		return
	__asm(lbl("___vfprintf_state3"))
		i3 = mstate.eax
		mstate.esp += 12
		i0 =  (i0 + 12)
		__asm(push(i3>-1), iftrue, target("___vfprintf__XprivateX__BB59_9_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_8_F"), lbl("___vfprintf__XprivateX__BB59_8_B"), label, lbl("___vfprintf__XprivateX__BB59_8_F")); 
		__asm(jump, target("___vfprintf__XprivateX__BB59_11_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_9_F"))
		i1 =  ((mstate.ebp+-304))
		mstate.esp -= 4
		__asm(push(i1), push(mstate.esp), op(0x3c))
		state = 4
		mstate.esp -= 4;FSM___fflush.start()
		return
	__asm(lbl("___vfprintf_state4"))
		i1 = mstate.eax
		mstate.esp += 4
		__asm(push(i1==0), iftrue, target("___vfprintf__XprivateX__BB59_8_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_10_F"))
		i3 =  (-1)
	__asm(lbl("___vfprintf__XprivateX__BB59_11_F"))
		i0 =  ((__xasm<int>(push(i0), op(0x36))))
		i0 =  (i0 & 64)
		__asm(push(i0!=0), iftrue, target("___vfprintf__XprivateX__BB59_13_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_12_F"))
		i0 = i3
		__asm(jump, target("___vfprintf__XprivateX__BB59_1460_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_13_F"))
		i0 =  ((__xasm<int>(push((mstate.ebp+-1971)), op(0x37))))
		i0 =  ((__xasm<int>(push(i0), op(0x36))))
		i0 =  (i0 | 64)
		i1 =  ((__xasm<int>(push((mstate.ebp+-1971)), op(0x37))))
		__asm(push(i0), push(i1), op(0x3b))
		mstate.eax = i3
		__asm(jump, target("___vfprintf__XprivateX__BB59_1461_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_14_F"))
		i1 =  (0)
		__asm(push(i1), push((mstate.ebp+-1540)), op(0x3c))
		__asm(push(i3), push((mstate.ebp+-1752)), op(0x3c))
		__asm(push(i3), push((mstate.ebp+-1460)), op(0x3c))
		i2 =  ((mstate.ebp+-1712))
		__asm(push(i2), push((mstate.ebp+-1728)), op(0x3c))
		__asm(push(i1), push((mstate.ebp+-1720)), op(0x3c))
		i4 =  ((mstate.ebp+-1728))
		__asm(push(i1), push((mstate.ebp+-1724)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2232)), op(0x37))))
		i1 =  ((__xasm<int>(push(i1), op(0x35))))
		i5 =  (i4 + 4)
		i4 =  (i4 + 8)
		i6 =  ((mstate.ebp+-1460))
		__asm(push(i1==0), iftrue, target("___vfprintf__XprivateX__BB59_16_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_15_F"))
		i6 =  (i1 & 255)
		__asm(push(i6!=37), iftrue, target("___vfprintf__XprivateX__BB59_17_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_16_F"))
		i6 =  (1)
		//IMPLICIT_DEF i7 = 
		i8 =  (0)
		i9 = i8
		i10 = i7
		i11 = i7
		i12 = i7
		i13 = i7
		i14 = i8
		i15 = i7
		i16 = i7
		i17 = i7
		i18 = i8
		i19 = i7
		i20 = i7
		i21 = i7
		i22 =  ((__xasm<int>(push((mstate.ebp+-2232)), op(0x37))))
		i23 = i2
		i24 = i22
		__asm(jump, target("___vfprintf__XprivateX__BB59_27_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_17_F"))
		i1 =  (1)
		//IMPLICIT_DEF i6 = 
		i7 =  (0)
		i8 = i6
		i9 = i6
		i10 = i6
		i11 = i6
		i12 = i7
		i13 =  ((__xasm<int>(push((mstate.ebp+-2232)), op(0x37))))
		i14 = i2
		i15 = i13
		i16 = i6
		i17 = i12
		i18 = i6
		i19 = i6
		i20 = i6
		i21 = i12
		i22 = i6
		i23 = i6
		__asm(jump, target("___vfprintf__XprivateX__BB59_23_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_18_B"), label)
		i8 =  (0)
		__asm(push(i8), push(i5), op(0x3c))
		i8 = i2
		i20 = i24
		i16 = i3
		i24 = i17
		i17 = i19
		i3 = i29
		i7 = i21
		i10 = i14
		i12 = i1
		i19 = i9
		i1 =  ((__xasm<int>(push((mstate.ebp+-2502)), op(0x37))))
		i22 = i1
		i1 =  ((__xasm<int>(push((mstate.ebp+-2511)), op(0x37))))
		i14 = i1
		i1 =  ((__xasm<int>(push((mstate.ebp+-2520)), op(0x37))))
		i15 = i1
		i1 =  ((__xasm<int>(push((mstate.ebp+-2547)), op(0x37))))
		i23 = i1
		i1 =  ((__xasm<int>(push((mstate.ebp+-2538)), op(0x37))))
		i9 = i1
		i21 = i25
		i1 =  ((__xasm<int>(push((mstate.ebp+-2556)), op(0x37))))
		i11 = i1
		i1 =  ((__xasm<int>(push((mstate.ebp+-2529)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_19_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_19_F"), lbl("___vfprintf__XprivateX__BB59_19_B"), label, lbl("___vfprintf__XprivateX__BB59_19_F")); 
		i25 = i16
		i26 = i17
		i27 = i3
		i28 = i7
		i29 = i10
		i10 = i14
		i30 = i15
		i17 = i21
		i3 =  ((__xasm<int>(push(i18), op(0x35))))
		__asm(push(i3==0), iftrue, target("___vfprintf__XprivateX__BB59_21_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_20_F"))
		i7 =  (i3 & 255)
		__asm(push(i7!=37), iftrue, target("___vfprintf__XprivateX__BB59_22_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_21_F"))
		i6 =  (i6 + i13)
		i7 = i25
		i13 = i24
		i14 = i26
		i15 = i27
		i16 = i28
		i18 = i29
		i21 = i30
		i24 = i6
		__asm(jump, target("___vfprintf__XprivateX__BB59_28_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_22_F"))
		i3 =  (i6 + i13)
		i13 = i3
		i14 = i8
		i7 = i20
		i15 = i3
		i3 = i1
		i16 = i11
		i1 = i9
		i11 = i23
		i9 = i30
		i18 = i22
		i20 = i12
		i21 = i29
		i22 = i28
		i23 = i27
		i6 = i26
		i8 = i24
		i12 = i25
	__asm(lbl("___vfprintf__XprivateX__BB59_23_F"))
		i24 = i13
		i25 = i14
		i26 = i7
		i7 = i15
		i27 = i16
		i28 = i17
		i29 = i11
		i11 = i18
		i30 = i19
		i19 = i20
		i18 = i21
		i17 = i22
		i16 = i23
	__asm(jump, target("___vfprintf__XprivateX__BB59_24_F"), lbl("___vfprintf__XprivateX__BB59_24_B"), label, lbl("___vfprintf__XprivateX__BB59_24_F")); 
		i23 =  ((__xasm<int>(push((i7+1)), op(0x35))))
		i22 =  (i7 + 1)
		i7 = i22
		__asm(push(i23==0), iftrue, target("___vfprintf__XprivateX__BB59_26_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_25_F"))
		i13 =  (i23 & 255)
		__asm(push(i13!=37), iftrue, target("___vfprintf__XprivateX__BB59_1462_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_26_F"))
		i14 = i12
		i13 = i8
		i15 = i6
		i20 = i30
		i21 = i11
		i12 = i10
		i11 = i9
		i10 = i29
		i6 = i1
		i8 = i28
		i7 = i27
		i1 = i23
		i9 = i26
		i23 = i25
		__asm(jump, target("___vfprintf__XprivateX__BB59_27_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_27_F"))
		i25 = i12
		i26 = i10
		i27 = i7
		i28 = i22
		i29 = i1
		i30 = i9
		i31 = i23
		i1 = i24
		__asm(push(i1), push((mstate.ebp+-2250)), op(0x3c))
		i1 =  ((mstate.ebp+-1736))
		__asm(push(i1), push((mstate.ebp+-2124)), op(0x3c))
		i1 =  ((mstate.ebp+-1648))
		__asm(push(i1), push((mstate.ebp+-2187)), op(0x3c))
		i1 =  ((mstate.ebp+-32))
		__asm(push(i1), push((mstate.ebp+-2016)), op(0x3c))
		i1 =  ((mstate.ebp+-48))
		__asm(push(i1), push((mstate.ebp+-2241)), op(0x3c))
		i1 =  ((mstate.ebp+-16))
		__asm(push(i1), push((mstate.ebp+-2169)), op(0x3c))
		i1 =  ((mstate.ebp+-1542))
		__asm(push(i1), push((mstate.ebp+-2088)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2169)), op(0x37))))
		i1 =  (i1 + 4)
		__asm(push(i1), push((mstate.ebp+-1980)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2016)), op(0x37))))
		i1 =  (i1 + 4)
		__asm(push(i1), push((mstate.ebp+-1989)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2016)), op(0x37))))
		i1 =  (i1 + 8)
		__asm(push(i1), push((mstate.ebp+-1998)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2241)), op(0x37))))
		i1 =  (i1 + 4)
		__asm(push(i1), push((mstate.ebp+-2214)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2241)), op(0x37))))
		i1 =  (i1 + 8)
		__asm(push(i1), push((mstate.ebp+-2007)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2124)), op(0x37))))
		i1 =  (i1 + 3)
		__asm(push(i1), push((mstate.ebp+-2025)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2187)), op(0x37))))
		i1 =  (i1 + 1)
		__asm(push(i1), push((mstate.ebp+-2043)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2187)), op(0x37))))
		i1 =  (i1 + 99)
		__asm(push(i1), push((mstate.ebp+-2142)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2187)), op(0x37))))
		i1 =  (i1 + 100)
		__asm(push(i1), push((mstate.ebp+-2160)), op(0x3c))
		i1 =  ((mstate.ebp+-176))
		__asm(push(i1), push((mstate.ebp+-2061)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2124)), op(0x37))))
		i1 =  (i1 + 2)
		__asm(push(i1), push((mstate.ebp+-2115)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2124)), op(0x37))))
		i1 =  (i1 + 1)
		__asm(push(i1), push((mstate.ebp+-2106)), op(0x3c))
		i1 =  ((mstate.ebp+-1456))
		__asm(push(i1), push((mstate.ebp+-2151)), op(0x3c))
		i1 =  ((mstate.ebp+-1536))
		__asm(push(i1), push((mstate.ebp+-2223)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2088)), op(0x37))))
		i1 =  (i1 + 1)
		__asm(push(i1), push((mstate.ebp+-2178)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2016)), op(0x37))))
		__asm(push(i1), push((mstate.ebp+-2133)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2241)), op(0x37))))
		__asm(push(i1), push((mstate.ebp+-2079)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2160)), op(0x37))))
		__asm(push(i1), push((mstate.ebp+-2070)), op(0x3c))
		i7 = i14
		i14 = i15
		i15 = i16
		i16 = i17
		i12 = i19
		i19 = i20
		i22 = i21
		i10 = i25
		i21 = i11
		i23 = i26
		i9 = i6
		i17 = i8
		i11 = i27
		i1 = i3
		i24 = i28
		i3 = i29
		i20 = i30
		i8 = i31
		i6 =  ((__xasm<int>(push((mstate.ebp+-2250)), op(0x37))))
	__asm(lbl("___vfprintf__XprivateX__BB59_28_F"))
		i25 = i13
		i13 = i14
		__asm(push(i13), push((mstate.ebp+-2295)), op(0x3c))
		i13 = i15
		__asm(push(i13), push((mstate.ebp+-2286)), op(0x3c))
		i13 = i16
		__asm(push(i13), push((mstate.ebp+-2268)), op(0x3c))
		i14 = i18
		__asm(push(i12), push((mstate.ebp+-2313)), op(0x3c))
		i12 = i19
		__asm(push(i12), push((mstate.ebp+-2304)), op(0x3c))
		i12 = i22
		__asm(push(i12), push((mstate.ebp+-2457)), op(0x3c))
		__asm(push(i10), push((mstate.ebp+-2448)), op(0x3c))
		i10 = i21
		__asm(push(i10), push((mstate.ebp+-2439)), op(0x3c))
		i10 = i23
		__asm(push(i10), push((mstate.ebp+-2475)), op(0x3c))
		i10 = i17
		__asm(push(i10), push((mstate.ebp+-2367)), op(0x3c))
		i10 = i11
		__asm(push(i10), push((mstate.ebp+-2322)), op(0x3c))
		i10 = i24
		i11 = i20
		i12 =  (i10 - i6)
		__asm(push(i10!=i6), iftrue, target("___vfprintf__XprivateX__BB59_30_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_29_F"))
		i6 = i8
		i8 = i11
		__asm(jump, target("___vfprintf__XprivateX__BB59_39_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_30_F"))
		i13 =  (i12 + i11)
		__asm(push(i13>-1), iftrue, target("___vfprintf__XprivateX__BB59_32_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_31_F"))
		i6 =  (-1)
		i8 = i14
		i0 =  ((__xasm<int>(push((mstate.ebp+-2367)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1449_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_32_F"))
		__asm(push(i6), push(i8), op(0x3c))
		__asm(push(i12), push((i8+4)), op(0x3c))
		i6 =  ((__xasm<int>(push(i4), op(0x37))))
		i6 =  (i6 + i12)
		__asm(push(i6), push(i4), op(0x3c))
		i12 =  ((__xasm<int>(push(i5), op(0x37))))
		i12 =  (i12 + 1)
		__asm(push(i12), push(i5), op(0x3c))
		i8 =  (i8 + 8)
		__asm(push(i12>7), iftrue, target("___vfprintf__XprivateX__BB59_34_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_33_F"))
		i6 = i8
		i8 = i13
		__asm(jump, target("___vfprintf__XprivateX__BB59_39_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_34_F"))
		__asm(push(i6!=0), iftrue, target("___vfprintf__XprivateX__BB59_36_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_35_F"))
		i6 =  (0)
		__asm(push(i6), push(i5), op(0x3c))
		i6 = i2
		i8 = i13
		__asm(jump, target("___vfprintf__XprivateX__BB59_39_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_36_F"))
		i6 =  ((mstate.ebp+-1728))
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i6), push((mstate.esp+4)), op(0x3c))
		state = 5
		mstate.esp -= 4;FSM___sfvwrite.start()
		return
	__asm(lbl("___vfprintf_state5"))
		i6 = mstate.eax
		mstate.esp += 8
		i8 =  (0)
		__asm(push(i8), push(i4), op(0x3c))
		__asm(push(i8), push(i5), op(0x3c))
		__asm(push(i6==0), iftrue, target("___vfprintf__XprivateX__BB59_38_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_37_F"))
		i6 = i11
		i8 = i14
		i0 =  ((__xasm<int>(push((mstate.ebp+-2367)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1449_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_38_F"))
		i6 = i2
		i8 = i13
	__asm(lbl("___vfprintf__XprivateX__BB59_39_F"))
		__asm(push(i6), push((mstate.ebp+-2259)), op(0x3c))
		i6 = i8
		__asm(push(i6), push((mstate.ebp+-2277)), op(0x3c))
		i6 =  (i3 & 255)
		__asm(push(i6==0), iftrue, target("___vfprintf__XprivateX__BB59_1445_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_40_F"))
		i6 =  (0)
		__asm(push(i6), push((mstate.ebp+-1746)), op(0x3a))
		i8 =  ((__xasm<int>(push((mstate.ebp+-2178)), op(0x37))))
		__asm(push(i6), push(i8), op(0x3a))
		i8 =  (-1)
		i3 =  (i10 + 1)
		i10 = i6
		__asm(jump, target("___vfprintf__XprivateX__BB59_42_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_41_B"), label)
		i6 =  (i6 + i13)
		i3 = i6
		i6 = i8
		i8 = i11
	__asm(jump, target("___vfprintf__XprivateX__BB59_42_F"), lbl("___vfprintf__XprivateX__BB59_42_B"), label, lbl("___vfprintf__XprivateX__BB59_42_F")); 
		i11 =  ((__xasm<int>(push(i3), op(0x35), op(0x51))))
		i3 =  (i3 + 1)
		i12 = i7
		i13 = i11
		i11 = i8
	__asm(jump, target("___vfprintf__XprivateX__BB59_43_F"), lbl("___vfprintf__XprivateX__BB59_43_B"), label, lbl("___vfprintf__XprivateX__BB59_43_F")); 
		i8 = i6
		i6 = i11
		i11 = i13
		__asm(jump, target("___vfprintf__XprivateX__BB59_45_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_44_B"), label)
		i13 =  (i15 + i13)
		i3 =  (i13 + i3)
		i3 =  (i3 + 1)
	__asm(jump, target("___vfprintf__XprivateX__BB59_45_F"), lbl("___vfprintf__XprivateX__BB59_45_B"), label, lbl("___vfprintf__XprivateX__BB59_45_F")); 
		i13 = i11
		i11 = i6
		i15 =  (0)
		i6 = i3
		i16 = i13
	__asm(jump, target("___vfprintf__XprivateX__BB59_46_F"), lbl("___vfprintf__XprivateX__BB59_46_B"), label, lbl("___vfprintf__XprivateX__BB59_46_F")); 
		i13 = i15
		i15 = i16
		i18 =  (i6 + i13)
		__asm(push(i15>87), iftrue, target("___vfprintf__XprivateX__BB59_86_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_47_F"))
		__asm(push(i15>64), iftrue, target("___vfprintf__XprivateX__BB59_69_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_48_F"))
		__asm(push(i15>42), iftrue, target("___vfprintf__XprivateX__BB59_59_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_49_F"))
		__asm(push(i15>34), iftrue, target("___vfprintf__XprivateX__BB59_54_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_50_F"))
		__asm(push(i15==0), iftrue, target("___vfprintf__XprivateX__BB59_1445_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_51_F"))
		__asm(push(i15==32), iftrue, target("___vfprintf__XprivateX__BB59_52_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1157_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_52_F"))
		i15 =  ((__xasm<int>(push((mstate.ebp+-1746)), op(0x35))))
		__asm(push(i15!=0), iftrue, target("___vfprintf__XprivateX__BB59_41_B"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_53_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_53_F"))
		i15 =  (32)
		__asm(push(i15), push((mstate.ebp+-1746)), op(0x3a))
		i16 =  ((__xasm<int>(push(i18), op(0x35), op(0x51))))
		i15 =  (i13 + 1)
		__asm(jump, target("___vfprintf__XprivateX__BB59_46_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_54_F"))
		__asm(push(i15==35), iftrue, target("___vfprintf__XprivateX__BB59_143_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_55_F"))
		__asm(push(i15==39), iftrue, target("___vfprintf__XprivateX__BB59_163_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_56_F"))
		__asm(push(i15==42), iftrue, target("___vfprintf__XprivateX__BB59_57_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1157_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_57_F"))
		i15 =  ((__xasm<int>(push(i18), op(0x35), op(0x51))))
		i15 =  (i15 + -48)
		__asm(push(uint(i15)>uint(9)), iftrue, target("___vfprintf__XprivateX__BB59_147_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_58_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_58_F"))
		i15 =  (0)
		i8 = i15
		__asm(jump, target("___vfprintf__XprivateX__BB59_145_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_59_F"))
		__asm(push(i15>45), iftrue, target("___vfprintf__XprivateX__BB59_63_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_60_F"))
		__asm(push(i15==43), iftrue, target("___vfprintf__XprivateX__BB59_162_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_61_F"))
		__asm(push(i15==45), iftrue, target("___vfprintf__XprivateX__BB59_62_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1157_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_62_F"))
		i3 =  (i6 + i13)
		i6 =  (i10 | 4)
		i10 = i6
		i6 = i8
		i8 = i11
		__asm(jump, target("___vfprintf__XprivateX__BB59_42_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_63_F"))
		__asm(push(i15==46), iftrue, target("___vfprintf__XprivateX__BB59_167_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_64_F"))
		__asm(push(i15==48), iftrue, target("___vfprintf__XprivateX__BB59_184_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_65_F"))
		i16 =  (i15 + -49)
		__asm(push(uint(i16)<uint(9)), iftrue, target("___vfprintf__XprivateX__BB59_66_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1157_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_66_F"))
		i6 =  (0)
		i16 = i6
		__asm(jump, target("___vfprintf__XprivateX__BB59_67_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_67_F"), lbl("___vfprintf__XprivateX__BB59_67_B"), label, lbl("___vfprintf__XprivateX__BB59_67_F")); 
		i17 =  (i13 + i16)
		i17 =  (i3 + i17)
		i17 =  ((__xasm<int>(push(i17), op(0x35))))
		i6 =  (i6 * 10)
		i18 =  (i17 << 24)
		i6 =  (i15 + i6)
		i15 =  (i18 >> 24)
		i18 =  (i6 + -48)
		i6 =  (i16 + 1)
		i16 =  (i15 + -48)
		__asm(push(uint(i16)>uint(9)), iftrue, target("___vfprintf__XprivateX__BB59_185_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_68_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_68_F"))
		i16 = i6
		i6 = i18
		__asm(jump, target("___vfprintf__XprivateX__BB59_67_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_69_F"))
		__asm(push(i15>70), iftrue, target("___vfprintf__XprivateX__BB59_78_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_70_F"))
		__asm(push(i15>67), iftrue, target("___vfprintf__XprivateX__BB59_74_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_71_F"))
		__asm(push(i15==65), iftrue, target("___vfprintf__XprivateX__BB59_91_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_72_F"))
		__asm(push(i15==67), iftrue, target("___vfprintf__XprivateX__BB59_73_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1157_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_73_F"))
		i3 =  (i10 | 16)
		__asm(jump, target("___vfprintf__XprivateX__BB59_138_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_74_F"))
		__asm(push(i15==68), iftrue, target("___vfprintf__XprivateX__BB59_206_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_75_F"))
		__asm(push(i15==69), iftrue, target("___vfprintf__XprivateX__BB59_100_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_76_F"))
		__asm(push(i15==70), iftrue, target("___vfprintf__XprivateX__BB59_77_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1157_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_77_F"), lbl("___vfprintf__XprivateX__BB59_77_B"), label, lbl("___vfprintf__XprivateX__BB59_77_F")); 
		i3 =  (0)
		__asm(jump, target("___vfprintf__XprivateX__BB59_425_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_78_F"))
		__asm(push(i15>78), iftrue, target("___vfprintf__XprivateX__BB59_82_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_79_F"))
		__asm(push(i15==71), iftrue, target("___vfprintf__XprivateX__BB59_105_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_80_F"))
		__asm(push(i15==76), iftrue, target("___vfprintf__XprivateX__BB59_81_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1157_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_81_F"))
		i3 =  (i6 + i13)
		i6 =  (i10 | 8)
		i10 = i6
		i6 = i8
		i8 = i11
		__asm(jump, target("___vfprintf__XprivateX__BB59_42_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_82_F"))
		__asm(push(i15==79), iftrue, target("___vfprintf__XprivateX__BB59_943_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_83_F"))
		__asm(push(i15==83), iftrue, target("___vfprintf__XprivateX__BB59_979_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_84_F"))
		__asm(push(i15==85), iftrue, target("___vfprintf__XprivateX__BB59_85_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1157_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_85_F"))
		i3 =  (i10 | 16)
		__asm(jump, target("___vfprintf__XprivateX__BB59_130_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_86_F"))
		__asm(push(i15>107), iftrue, target("___vfprintf__XprivateX__BB59_111_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_87_F"))
		__asm(push(i15>101), iftrue, target("___vfprintf__XprivateX__BB59_102_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_88_F"))
		__asm(push(i15>98), iftrue, target("___vfprintf__XprivateX__BB59_97_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_89_F"))
		__asm(push(i15==88), iftrue, target("___vfprintf__XprivateX__BB59_142_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_90_F"))
		__asm(push(i15==97), iftrue, target("___vfprintf__XprivateX__BB59_91_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1157_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_91_F"))
		i3 =  (_xdigs_lower_2E_4528)
		i12 =  (i11 >>> 31)
		i16 =  (_xdigs_upper_2E_4529)
		i12 =  (i12 ^ 1)
		i17 =  ((i15==97) ? 120 : 88)
		i19 =  ((__xasm<int>(push((mstate.ebp+-2178)), op(0x37))))
		__asm(push(i17), push(i19), op(0x3a))
		i3 =  ((i15==97) ? i3 : i16)
		i16 =  ((i15==97) ? 112 : 80)
		i11 =  (i12 + i11)
		__asm(push(i14==0), iftrue, target("___vfprintf__XprivateX__BB59_94_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_92_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_92_F"))
		i12 =  (1)
		i17 =  ((__xasm<int>(push((i14+-4)), op(0x37))))
		__asm(push(i17), push(i14), op(0x3c))
		i12 =  (i12 << i17)
		__asm(push(i12), push((i14+4)), op(0x3c))
		i12 =  (i14 + -4)
		i14 = i12
		__asm(push(i12==0), iftrue, target("___vfprintf__XprivateX__BB59_94_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_93_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_93_F"))
		i19 =  (_freelist)
		i17 =  (i17 << 2)
		i17 =  (i19 + i17)
		i19 =  ((__xasm<int>(push(i17), op(0x37))))
		__asm(push(i19), push(i12), op(0x3c))
		__asm(push(i14), push(i17), op(0x3c))
		__asm(jump, target("___vfprintf__XprivateX__BB59_94_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_94_F"))
		i12 =  ((__xasm<int>(push((mstate.ebp+-1540)), op(0x37))))
		i14 =  (i10 & 8)
		__asm(push(i14==0), iftrue, target("___vfprintf__XprivateX__BB59_331_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_95_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_95_F"))
		__asm(push(i12==0), iftrue, target("___vfprintf__XprivateX__BB59_249_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_96_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_96_F"))
		i14 =  (i9 << 3)
		i12 =  (i12 + i14)
		__asm(jump, target("___vfprintf__XprivateX__BB59_250_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_97_F"))
		__asm(push(i15==99), iftrue, target("___vfprintf__XprivateX__BB59_137_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_98_F"))
		__asm(push(i15==100), iftrue, target("___vfprintf__XprivateX__BB59_136_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_99_F"))
		__asm(push(i15==101), iftrue, target("___vfprintf__XprivateX__BB59_100_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1157_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_100_F"))
		i3 = i15
		__asm(push(i11>-1), iftrue, target("___vfprintf__XprivateX__BB59_421_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_101_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_101_F"))
		i11 =  (7)
		__asm(jump, target("___vfprintf__XprivateX__BB59_425_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_102_F"))
		__asm(push(i15>103), iftrue, target("___vfprintf__XprivateX__BB59_107_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_103_F"))
		__asm(push(i15==102), iftrue, target("___vfprintf__XprivateX__BB59_77_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_104_F"))
		__asm(push(i15==103), iftrue, target("___vfprintf__XprivateX__BB59_105_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1157_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_105_F"))
		i3 =  (i15 + -2)
		__asm(push(i11==0), iftrue, target("___vfprintf__XprivateX__BB59_424_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_106_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_106_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_425_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_107_F"))
		__asm(push(i15==104), iftrue, target("___vfprintf__XprivateX__BB59_190_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_108_F"))
		__asm(push(i15==105), iftrue, target("___vfprintf__XprivateX__BB59_136_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_109_F"))
		__asm(push(i15==106), iftrue, target("___vfprintf__XprivateX__BB59_110_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1157_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_110_F"))
		i3 =  (i6 + i13)
		i6 =  (i10 | 4096)
		i10 = i6
		i6 = i8
		i8 = i11
		__asm(jump, target("___vfprintf__XprivateX__BB59_42_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_111_F"))
		__asm(push(i15>114), iftrue, target("___vfprintf__XprivateX__BB59_122_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_112_F"))
		__asm(push(i15>110), iftrue, target("___vfprintf__XprivateX__BB59_118_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_113_F"))
		__asm(push(i15==108), iftrue, target("___vfprintf__XprivateX__BB59_193_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_114_F"))
		__asm(push(i15==110), iftrue, target("___vfprintf__XprivateX__BB59_115_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1157_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_115_F"))
		i3 =  (i10 & 32)
		__asm(push(i3==0), iftrue, target("___vfprintf__XprivateX__BB59_909_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_116_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_116_F"))
		i3 =  ((__xasm<int>(push((mstate.ebp+-1540)), op(0x37))))
		__asm(push(i3==0), iftrue, target("___vfprintf__XprivateX__BB59_907_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_117_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_117_F"))
		i10 =  (i9 << 3)
		i3 =  (i3 + i10)
		__asm(jump, target("___vfprintf__XprivateX__BB59_908_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_118_F"))
		__asm(push(i15==111), iftrue, target("___vfprintf__XprivateX__BB59_135_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_119_F"))
		__asm(push(i15==112), iftrue, target("___vfprintf__XprivateX__BB59_975_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_120_F"))
		__asm(push(i15==113), iftrue, target("___vfprintf__XprivateX__BB59_121_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1157_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_121_F"))
		i3 =  (i6 + i13)
		i6 =  (i10 | 32)
		i10 = i6
		i6 = i8
		i8 = i11
		__asm(jump, target("___vfprintf__XprivateX__BB59_42_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_122_F"))
		__asm(push(i15>116), iftrue, target("___vfprintf__XprivateX__BB59_126_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_123_F"))
		__asm(push(i15==115), iftrue, target("___vfprintf__XprivateX__BB59_134_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_124_F"))
		__asm(push(i15==116), iftrue, target("___vfprintf__XprivateX__BB59_125_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1157_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_125_F"))
		i3 =  (i6 + i13)
		i6 =  (i10 | 2048)
		i10 = i6
		i6 = i8
		i8 = i11
		__asm(jump, target("___vfprintf__XprivateX__BB59_42_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_126_F"))
		__asm(push(i15==122), iftrue, target("___vfprintf__XprivateX__BB59_196_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_127_F"))
		__asm(push(i15==120), iftrue, target("___vfprintf__XprivateX__BB59_1063_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_128_F"))
		__asm(push(i15!=117), iftrue, target("___vfprintf__XprivateX__BB59_1157_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_129_F"))
		i3 = i10
		__asm(jump, target("___vfprintf__XprivateX__BB59_130_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_130_F"))
		i10 =  (i3 & 7200)
		__asm(push(i10==0), iftrue, target("___vfprintf__XprivateX__BB59_1048_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_131_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_131_F"))
		i10 =  (i3 & 4096)
		__asm(push(i10==0), iftrue, target("___vfprintf__XprivateX__BB59_1037_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_132_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_132_F"))
		i10 =  ((__xasm<int>(push((mstate.ebp+-1540)), op(0x37))))
		__asm(push(i10==0), iftrue, target("___vfprintf__XprivateX__BB59_1036_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_133_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_133_F"))
		i15 =  (0)
		i16 =  (i9 << 3)
		i10 =  (i10 + i16)
		i16 =  ((__xasm<int>(push(i10), op(0x37))))
		i10 =  ((__xasm<int>(push((i10+4)), op(0x37))))
		__asm(push(i15), push((mstate.ebp+-1746)), op(0x3a))
		i19 =  (10)
		i9 =  (i9 + 1)
		i15 =  ((__xasm<int>(push((mstate.ebp+-2457)), op(0x37))))
		i17 = i15
		i15 = i16
		i16 = i19
		i19 =  ((__xasm<int>(push((mstate.ebp+-2475)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1103_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_134_F"))
		i3 = i10
		__asm(jump, target("___vfprintf__XprivateX__BB59_980_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_135_F"))
		i3 = i10
		__asm(jump, target("___vfprintf__XprivateX__BB59_944_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_136_F"))
		i3 = i10
		__asm(jump, target("___vfprintf__XprivateX__BB59_207_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_137_F"))
		i3 = i10
		__asm(jump, target("___vfprintf__XprivateX__BB59_138_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_138_F"))
		i10 =  (i3 & 16)
		__asm(push(i10==0), iftrue, target("___vfprintf__XprivateX__BB59_202_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_139_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_139_F"))
		i10 =  (_initial_2E_2136)
		i12 =  ((__xasm<int>(push((mstate.ebp+-2151)), op(0x37))))
		i15 =  (128)
		memcpy(i12, i10, i15)
		i10 =  ((__xasm<int>(push((mstate.ebp+-1540)), op(0x37))))
		__asm(push(i10==0), iftrue, target("___vfprintf__XprivateX__BB59_197_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_140_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_140_F"))
		i12 =  ((mstate.ebp+-1456))
		i15 =  (i9 << 3)
		i10 =  (i10 + i15)
		i10 =  ((__xasm<int>(push(i10), op(0x37))))
		mstate.esp -= 12
		i15 =  ((__xasm<int>(push((mstate.ebp+-2187)), op(0x37))))
		__asm(push(i15), push(mstate.esp), op(0x3c))
		__asm(push(i10), push((mstate.esp+4)), op(0x3c))
		__asm(push(i12), push((mstate.esp+8)), op(0x3c))
		mstate.esp -= 4;FSM__UTF8_wcrtomb.start()
	__asm(lbl("___vfprintf_state6"))
		i10 = mstate.eax
		mstate.esp += 12
		__asm(push(i10==-1), iftrue, target("___vfprintf__XprivateX__BB59_199_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_141_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_141_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_205_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_142_F"))
		i3 =  (_xdigs_upper_2E_4529)
		__asm(jump, target("___vfprintf__XprivateX__BB59_1064_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_143_F"))
		i3 =  (i6 + i13)
		i6 =  (i10 | 1)
		i10 = i6
		i6 = i8
		i8 = i11
		__asm(jump, target("___vfprintf__XprivateX__BB59_42_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_144_B"), label)
		i8 = i12
		__asm(jump, target("___vfprintf__XprivateX__BB59_145_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_145_F"))
		i12 =  (i8 + 1)
		i8 =  (i13 + i8)
		i16 =  (i13 + i12)
		i8 =  (i3 + i8)
		i8 =  ((__xasm<int>(push(i8), op(0x35), op(0x51))))
		i15 =  (i15 * 10)
		i16 =  (i3 + i16)
		i17 =  ((__xasm<int>(push(i16), op(0x35), op(0x51))))
		i8 =  (i15 + i8)
		i15 =  (i8 + -48)
		i8 =  (i17 + -48)
		__asm(push(uint(i8)<uint(10)), iftrue, target("___vfprintf__XprivateX__BB59_144_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_146_F"))
		i3 = i16
		__asm(jump, target("___vfprintf__XprivateX__BB59_148_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_147_F"))
		i15 =  (0)
		i3 =  (i6 + i13)
	__asm(lbl("___vfprintf__XprivateX__BB59_148_F"))
		i8 = i15
		i15 =  ((__xasm<int>(push(i3), op(0x35))))
		i12 =  ((__xasm<int>(push((mstate.ebp+-1540)), op(0x37))))
		__asm(push(i15!=36), iftrue, target("___vfprintf__XprivateX__BB59_156_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_149_F"))
		__asm(push(i12!=0), iftrue, target("___vfprintf__XprivateX__BB59_151_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_150_F"))
		i6 =  ((mstate.ebp+-1540))
		i15 =  ((__xasm<int>(push((mstate.ebp+-2223)), op(0x37))))
		__asm(push(i15), push((mstate.ebp+-1540)), op(0x3c))
		i15 =  ((__xasm<int>(push((mstate.ebp+-1460)), op(0x37))))
		mstate.esp -= 12
		i12 =  ((__xasm<int>(push((mstate.ebp+-2232)), op(0x37))))
		__asm(push(i12), push(mstate.esp), op(0x3c))
		__asm(push(i15), push((mstate.esp+4)), op(0x3c))
		__asm(push(i6), push((mstate.esp+8)), op(0x3c))
		state = 7
		mstate.esp -= 4;FSM___find_arguments.start()
		return
	__asm(lbl("___vfprintf_state7"))
		mstate.esp += 12
	__asm(lbl("___vfprintf__XprivateX__BB59_151_F"))
		i6 =  ((__xasm<int>(push((mstate.ebp+-1540)), op(0x37))))
		i3 =  (i3 + 1)
		__asm(push(i6==0), iftrue, target("___vfprintf__XprivateX__BB59_155_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_152_F"))
		i8 =  (i8 << 3)
		i6 =  (i6 + i8)
		i6 =  ((__xasm<int>(push(i6), op(0x37))))
		__asm(push(i6>-1), iftrue, target("___vfprintf__XprivateX__BB59_154_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_153_F"))
		i8 = i9
		i15 = i1
		__asm(jump, target("___vfprintf__XprivateX__BB59_161_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_154_F"))
		i8 = i11
		__asm(jump, target("___vfprintf__XprivateX__BB59_42_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_155_F"))
		i6 =  (i1 + 4)
		i8 = i1
		i15 = i9
		__asm(jump, target("___vfprintf__XprivateX__BB59_159_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_156_F"))
		__asm(push(i12==0), iftrue, target("___vfprintf__XprivateX__BB59_158_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_157_F"))
		i3 =  (i9 << 3)
		i6 =  (i6 + i13)
		i15 =  (i9 + 1)
		i8 =  (i12 + i3)
		i3 = i6
		i6 = i1
		__asm(jump, target("___vfprintf__XprivateX__BB59_159_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_158_F"))
		i3 =  (i6 + i13)
		i6 =  (i9 + 1)
		i9 =  (i1 + 4)
		i8 = i1
		i15 = i6
		i6 = i9
	__asm(lbl("___vfprintf__XprivateX__BB59_159_F"))
		i1 = i6
		i6 =  ((__xasm<int>(push(i8), op(0x37))))
		__asm(push(i6>-1), iftrue, target("___vfprintf__XprivateX__BB59_1463_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_160_F"))
		i8 = i15
		i15 = i1
		__asm(jump, target("___vfprintf__XprivateX__BB59_161_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_161_F"))
		i1 = i8
		i8 =  (i10 | 4)
		i6 =  (0 - i6)
		i10 = i8
		i8 = i11
		i9 = i1
		i1 = i15
		__asm(jump, target("___vfprintf__XprivateX__BB59_42_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_162_F"))
		i3 =  (43)
		__asm(push(i3), push((mstate.ebp+-1746)), op(0x3a))
		i3 =  (i6 + i13)
		i6 = i8
		i8 = i11
		__asm(jump, target("___vfprintf__XprivateX__BB59_42_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_163_F"))
		mstate.esp -= 4;FSM_localeconv.start()
	__asm(lbl("___vfprintf_state8"))
		i3 =  ((__xasm<int>(push(_ret_2E_1494_2E_1), op(0x37))))
		i3 =  ((__xasm<int>(push(i3), op(0x35))))
		__asm(push(i3), push((mstate.ebp+-1745)), op(0x3a))
		mstate.esp -= 4;FSM_localeconv.start()
	__asm(lbl("___vfprintf_state9"))
		i15 =  ((__xasm<int>(push(_ret_2E_1494_2E_2), op(0x37))))
		i3 =  (i6 + i13)
		i6 =  (i10 | 512)
		i10 = i6
		i6 = i8
		i8 = i11
		i7 = i15
		__asm(jump, target("___vfprintf__XprivateX__BB59_42_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_164_B"), label)
		i15 = i12
		__asm(jump, target("___vfprintf__XprivateX__BB59_165_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_165_F"), lbl("___vfprintf__XprivateX__BB59_165_B"), label, lbl("___vfprintf__XprivateX__BB59_165_F")); 
		i12 =  (i15 + 1)
		i16 =  (i13 + i12)
		i15 =  (i15 + i13)
		i16 =  (i3 + i16)
		i15 =  (i15 + i3)
		i16 =  ((__xasm<int>(push(i16), op(0x35), op(0x51))))
		i11 =  (i11 * 10)
		i17 =  ((__xasm<int>(push((i15+2)), op(0x35), op(0x51))))
		i11 =  (i11 + i16)
		i11 =  (i11 + -48)
		i15 =  (i15 + 2)
		i16 =  (i17 + -48)
		__asm(push(uint(i16)<uint(10)), iftrue, target("___vfprintf__XprivateX__BB59_164_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_166_F"))
		i3 = i15
		__asm(jump, target("___vfprintf__XprivateX__BB59_170_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_167_F"))
		i6 =  (i13 + i3)
		i11 =  ((__xasm<int>(push(i18), op(0x35))))
		i6 =  (i6 + 1)
		__asm(push(i11==42), iftrue, target("___vfprintf__XprivateX__BB59_168_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_182_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_168_F"))
		i11 =  ((__xasm<int>(push(i6), op(0x35), op(0x51))))
		i11 =  (i11 + -48)
		__asm(push(uint(i11)<uint(10)), iftrue, target("___vfprintf__XprivateX__BB59_1464_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_169_F"))
		i11 =  (0)
		i3 = i6
		__asm(jump, target("___vfprintf__XprivateX__BB59_170_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_170_F"))
		i15 =  ((__xasm<int>(push(i3), op(0x35))))
		i12 =  ((__xasm<int>(push((mstate.ebp+-1540)), op(0x37))))
		__asm(push(i15!=36), iftrue, target("___vfprintf__XprivateX__BB59_176_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_171_F"))
		__asm(push(i12!=0), iftrue, target("___vfprintf__XprivateX__BB59_173_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_172_F"))
		i6 =  ((mstate.ebp+-1540))
		i15 =  ((__xasm<int>(push((mstate.ebp+-2223)), op(0x37))))
		__asm(push(i15), push((mstate.ebp+-1540)), op(0x3c))
		i15 =  ((__xasm<int>(push((mstate.ebp+-1460)), op(0x37))))
		mstate.esp -= 12
		i12 =  ((__xasm<int>(push((mstate.ebp+-2232)), op(0x37))))
		__asm(push(i12), push(mstate.esp), op(0x3c))
		__asm(push(i15), push((mstate.esp+4)), op(0x3c))
		__asm(push(i6), push((mstate.esp+8)), op(0x3c))
		state = 10
		mstate.esp -= 4;FSM___find_arguments.start()
		return
	__asm(lbl("___vfprintf_state10"))
		mstate.esp += 12
	__asm(lbl("___vfprintf__XprivateX__BB59_173_F"))
		i6 =  ((__xasm<int>(push((mstate.ebp+-1540)), op(0x37))))
		i3 =  (i3 + 1)
		__asm(push(i6==0), iftrue, target("___vfprintf__XprivateX__BB59_175_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_174_F"))
		i11 =  (i11 << 3)
		i6 =  (i6 + i11)
		i11 =  ((__xasm<int>(push(i6), op(0x37))))
		i6 = i8
		i8 = i11
		__asm(jump, target("___vfprintf__XprivateX__BB59_42_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_175_F"))
		i11 =  ((__xasm<int>(push(i1), op(0x37))))
		i15 =  (i1 + 4)
		i6 = i8
		i8 = i11
		i1 = i15
		__asm(jump, target("___vfprintf__XprivateX__BB59_42_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_176_F"))
		__asm(push(i12==0), iftrue, target("___vfprintf__XprivateX__BB59_178_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_177_F"))
		i3 =  (i9 << 3)
		i3 =  (i12 + i3)
		i11 =  ((__xasm<int>(push(i3), op(0x37))))
		i15 =  (i9 + 1)
		i3 = i6
		i6 = i8
		i8 = i11
		i9 = i15
		__asm(jump, target("___vfprintf__XprivateX__BB59_42_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_178_F"))
		i11 =  ((__xasm<int>(push(i1), op(0x37))))
		i15 =  (i9 + 1)
		i1 =  (i1 + 4)
		i3 = i6
		i6 = i8
		i8 = i11
		i9 = i15
		__asm(jump, target("___vfprintf__XprivateX__BB59_42_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_179_B"), label)
		i6 =  (0)
		i15 = i6
		i16 = i6
		i6 = i11
		__asm(jump, target("___vfprintf__XprivateX__BB59_180_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_180_F"), lbl("___vfprintf__XprivateX__BB59_180_B"), label, lbl("___vfprintf__XprivateX__BB59_180_F")); 
		i11 = i15
		i15 =  (i11 + 1)
		i11 =  (i16 * 10)
		i16 =  (i13 + i15)
		i6 =  (i11 + i6)
		i11 =  (i3 + i16)
		i11 =  ((__xasm<int>(push(i11), op(0x35), op(0x51))))
		i6 =  (i6 + -48)
		i16 =  (i11 + -48)
		__asm(push(uint(i16)>uint(9)), iftrue, target("___vfprintf__XprivateX__BB59_44_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_181_F"))
		i16 = i6
		i6 = i11
		__asm(jump, target("___vfprintf__XprivateX__BB59_180_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_182_F"))
		i11 =  (i11 << 24)
		i11 =  (i11 >> 24)
		i15 =  (i11 + -48)
		__asm(push(uint(i15)<uint(10)), iftrue, target("___vfprintf__XprivateX__BB59_179_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_183_F"))
		i15 =  (0)
		i3 = i6
		i6 = i15
		__asm(jump, target("___vfprintf__XprivateX__BB59_45_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_184_F"))
		i3 =  (i6 + i13)
		i6 =  (i10 | 128)
		i10 = i6
		i6 = i8
		i8 = i11
		__asm(jump, target("___vfprintf__XprivateX__BB59_42_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_185_F"))
		i6 =  (i13 + i6)
		i3 =  (i3 + i6)
		i6 =  (i17 & 255)
		__asm(push(i6==36), iftrue, target("___vfprintf__XprivateX__BB59_187_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_186_F"))
		i13 = i15
		i6 = i18
		__asm(jump, target("___vfprintf__XprivateX__BB59_43_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_187_F"))
		i6 =  ((__xasm<int>(push((mstate.ebp+-1540)), op(0x37))))
		__asm(push(i6==0), iftrue, target("___vfprintf__XprivateX__BB59_189_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_188_F"))
		i6 = i8
		i8 = i11
		i9 = i18
		__asm(jump, target("___vfprintf__XprivateX__BB59_42_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_189_F"))
		i6 =  ((mstate.ebp+-1540))
		i9 =  ((__xasm<int>(push((mstate.ebp+-2223)), op(0x37))))
		__asm(push(i9), push((mstate.ebp+-1540)), op(0x3c))
		i9 =  ((__xasm<int>(push((mstate.ebp+-1460)), op(0x37))))
		mstate.esp -= 12
		i12 =  ((__xasm<int>(push((mstate.ebp+-2232)), op(0x37))))
		__asm(push(i12), push(mstate.esp), op(0x3c))
		__asm(push(i9), push((mstate.esp+4)), op(0x3c))
		__asm(push(i6), push((mstate.esp+8)), op(0x3c))
		state = 11
		mstate.esp -= 4;FSM___find_arguments.start()
		return
	__asm(lbl("___vfprintf_state11"))
		mstate.esp += 12
		i6 = i8
		i8 = i11
		i9 = i18
		__asm(jump, target("___vfprintf__XprivateX__BB59_42_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_190_F"))
		i3 =  (i10 & 64)
		__asm(push(i3==0), iftrue, target("___vfprintf__XprivateX__BB59_192_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_191_F"))
		i3 =  (i10 | 8192)
		i6 =  (i6 + i13)
		i10 =  (i3 & -65)
		i3 = i6
		i6 = i8
		i8 = i11
		__asm(jump, target("___vfprintf__XprivateX__BB59_42_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_192_F"))
		i3 =  (i6 + i13)
		i6 =  (i10 | 64)
		i10 = i6
		i6 = i8
		i8 = i11
		__asm(jump, target("___vfprintf__XprivateX__BB59_42_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_193_F"))
		i3 =  (i10 & 16)
		__asm(push(i3==0), iftrue, target("___vfprintf__XprivateX__BB59_195_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_194_F"))
		i3 =  (i10 | 32)
		i6 =  (i6 + i13)
		i10 =  (i3 & -17)
		i3 = i6
		i6 = i8
		i8 = i11
		__asm(jump, target("___vfprintf__XprivateX__BB59_42_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_195_F"))
		i3 =  (i6 + i13)
		i6 =  (i10 | 16)
		i10 = i6
		i6 = i8
		i8 = i11
		__asm(jump, target("___vfprintf__XprivateX__BB59_42_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_196_F"))
		i3 =  (i6 + i13)
		i6 =  (i10 | 1024)
		i10 = i6
		i6 = i8
		i8 = i11
		__asm(jump, target("___vfprintf__XprivateX__BB59_42_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_197_F"))
		i10 =  ((mstate.ebp+-1456))
		i12 =  ((__xasm<int>(push(i1), op(0x37))))
		mstate.esp -= 12
		i15 =  ((__xasm<int>(push((mstate.ebp+-2187)), op(0x37))))
		__asm(push(i15), push(mstate.esp), op(0x3c))
		__asm(push(i12), push((mstate.esp+4)), op(0x3c))
		__asm(push(i10), push((mstate.esp+8)), op(0x3c))
		mstate.esp -= 4;FSM__UTF8_wcrtomb.start()
	__asm(lbl("___vfprintf_state12"))
		i10 = mstate.eax
		mstate.esp += 12
		i1 =  (i1 + 4)
		__asm(push(i10==-1), iftrue, target("___vfprintf__XprivateX__BB59_199_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_198_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_205_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_199_F"))
		i3 =  ((__xasm<int>(push((mstate.ebp+-1971)), op(0x37))))
		i3 =  ((__xasm<int>(push(i3), op(0x36))))
		i3 =  (i3 | 64)
		i0 =  ((__xasm<int>(push((mstate.ebp+-1971)), op(0x37))))
		__asm(push(i3), push(i0), op(0x3b))
		__asm(push(i14==0), iftrue, target("___vfprintf__XprivateX__BB59_201_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_200_F"))
		i3 =  ((__xasm<int>(push((mstate.ebp+-2277)), op(0x37))))
		i0 = i14
		i1 =  ((__xasm<int>(push((mstate.ebp+-2367)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1451_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_201_F"))
		i3 =  ((__xasm<int>(push((mstate.ebp+-2277)), op(0x37))))
		i0 =  ((__xasm<int>(push((mstate.ebp+-2367)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1454_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_202_F"))
		i10 =  ((__xasm<int>(push((mstate.ebp+-1540)), op(0x37))))
		__asm(push(i10==0), iftrue, target("___vfprintf__XprivateX__BB59_204_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_203_F"))
		i12 =  (1)
		i15 =  (i9 << 3)
		i10 =  (i10 + i15)
		i10 =  ((__xasm<int>(push(i10), op(0x35))))
		i15 =  ((__xasm<int>(push((mstate.ebp+-2187)), op(0x37))))
		__asm(push(i10), push(i15), op(0x3a))
		i10 = i12
		__asm(jump, target("___vfprintf__XprivateX__BB59_205_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_204_F"))
		i10 =  (1)
		i12 =  ((__xasm<int>(push(i1), op(0x35))))
		i15 =  ((__xasm<int>(push((mstate.ebp+-2187)), op(0x37))))
		__asm(push(i12), push(i15), op(0x3a))
		i1 =  (i1 + 4)
	__asm(lbl("___vfprintf__XprivateX__BB59_205_F"))
		i12 =  (0)
		__asm(push(i12), push((mstate.ebp+-1746)), op(0x3a))
		i9 =  (i9 + 1)
		i15 =  ((__xasm<int>(push((mstate.ebp+-2187)), op(0x37))))
		i16 = i11
		i17 = i25
		i11 =  ((__xasm<int>(push((mstate.ebp+-2295)), op(0x37))))
		i19 = i11
		i11 =  ((__xasm<int>(push((mstate.ebp+-2286)), op(0x37))))
		i20 = i11
		i11 =  ((__xasm<int>(push((mstate.ebp+-2268)), op(0x37))))
		i21 = i11
		i11 =  ((__xasm<int>(push((mstate.ebp+-2313)), op(0x37))))
		i22 = i11
		i11 =  ((__xasm<int>(push((mstate.ebp+-2304)), op(0x37))))
		i23 = i11
		i11 =  ((__xasm<int>(push((mstate.ebp+-2457)), op(0x37))))
		i24 = i11
		i11 =  ((__xasm<int>(push((mstate.ebp+-2448)), op(0x37))))
		i25 = i11
		i11 =  ((__xasm<int>(push((mstate.ebp+-2439)), op(0x37))))
		i26 = i11
		i11 = i12
		i12 =  ((__xasm<int>(push((mstate.ebp+-2475)), op(0x37))))
		i27 =  ((__xasm<int>(push((mstate.ebp+-2367)), op(0x37))))
		i28 =  ((__xasm<int>(push((mstate.ebp+-2322)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1158_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_206_F"))
		i3 =  (i10 | 16)
	__asm(lbl("___vfprintf__XprivateX__BB59_207_F"))
		i10 =  (i3 & 7200)
		__asm(push(i10==0), iftrue, target("___vfprintf__XprivateX__BB59_229_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_208_F"))
		i10 =  (i3 & 4096)
		__asm(push(i10==0), iftrue, target("___vfprintf__XprivateX__BB59_214_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_209_F"))
		i10 =  ((__xasm<int>(push((mstate.ebp+-1540)), op(0x37))))
		__asm(push(i10==0), iftrue, target("___vfprintf__XprivateX__BB59_213_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_210_F"))
		i15 =  (i9 << 3)
		i10 =  (i10 + i15)
		i15 =  ((__xasm<int>(push(i10), op(0x37))))
		i10 =  ((__xasm<int>(push((i10+4)), op(0x37))))
		i9 =  (i9 + 1)
		__asm(push(i10<0), iftrue, target("___vfprintf__XprivateX__BB59_212_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_211_F"))
		i16 =  (10)
		i17 =  ((__xasm<int>(push((mstate.ebp+-2457)), op(0x37))))
		i19 =  ((__xasm<int>(push((mstate.ebp+-2475)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1103_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_212_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_228_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_213_F"))
		i10 =  ((__xasm<int>(push(i1), op(0x37))))
		i15 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		i1 =  (i1 + 8)
		__asm(jump, target("___vfprintf__XprivateX__BB59_225_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_214_F"))
		i10 =  (i3 & 1024)
		__asm(push(i10==0), iftrue, target("___vfprintf__XprivateX__BB59_218_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_215_F"))
		i10 =  ((__xasm<int>(push((mstate.ebp+-1540)), op(0x37))))
		__asm(push(i10==0), iftrue, target("___vfprintf__XprivateX__BB59_217_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_216_F"))
		i15 =  (0)
		i16 =  (i9 << 3)
		i10 =  (i10 + i16)
		i10 =  ((__xasm<int>(push(i10), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_225_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_217_F"))
		i15 =  (0)
		i10 =  ((__xasm<int>(push(i1), op(0x37))))
		i1 =  (i1 + 4)
		__asm(jump, target("___vfprintf__XprivateX__BB59_225_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_218_F"))
		i10 =  ((__xasm<int>(push((mstate.ebp+-1540)), op(0x37))))
		i15 =  (i3 & 2048)
		__asm(push(i15==0), iftrue, target("___vfprintf__XprivateX__BB59_222_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_219_F"))
		__asm(push(i10==0), iftrue, target("___vfprintf__XprivateX__BB59_221_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_220_F"))
		i15 =  (i9 << 3)
		i10 =  (i10 + i15)
		i10 =  ((__xasm<int>(push(i10), op(0x37))))
		i15 =  (i10 >> 31)
		__asm(jump, target("___vfprintf__XprivateX__BB59_225_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_221_F"))
		i10 =  ((__xasm<int>(push(i1), op(0x37))))
		i15 =  (i10 >> 31)
		i1 =  (i1 + 4)
		__asm(jump, target("___vfprintf__XprivateX__BB59_225_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_222_F"))
		__asm(push(i10==0), iftrue, target("___vfprintf__XprivateX__BB59_224_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_223_F"))
		i15 =  (i9 << 3)
		i10 =  (i10 + i15)
		i15 =  ((__xasm<int>(push(i10), op(0x37))))
		i16 =  ((__xasm<int>(push((i10+4)), op(0x37))))
		i10 = i15
		i15 = i16
		__asm(jump, target("___vfprintf__XprivateX__BB59_225_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_224_F"))
		i10 =  ((__xasm<int>(push(i1), op(0x37))))
		i15 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		i1 =  (i1 + 8)
	__asm(lbl("___vfprintf__XprivateX__BB59_225_F"))
		i16 = i15
		i9 =  (i9 + 1)
		__asm(push(i16<0), iftrue, target("___vfprintf__XprivateX__BB59_227_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_226_F"))
		i19 =  (10)
		i15 =  ((__xasm<int>(push((mstate.ebp+-2457)), op(0x37))))
		i17 = i15
		i15 = i10
		i10 = i16
		i16 = i19
		i19 =  ((__xasm<int>(push((mstate.ebp+-2475)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1103_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_227_F"))
		i15 = i10
		i10 = i16
	__asm(lbl("___vfprintf__XprivateX__BB59_228_F"))
		i16 =  (45)
		i17 =  (0)
		__asm(push(i16), push((mstate.ebp+-1746)), op(0x3a))
		i15 =  __subc(i17, i15)
		i10 =  __sube(i17, i10)
		i16 =  (10)
		i17 =  ((__xasm<int>(push((mstate.ebp+-2457)), op(0x37))))
		i19 =  ((__xasm<int>(push((mstate.ebp+-2475)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1103_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_229_F"))
		i10 =  (i3 & 16)
		__asm(push(i10==0), iftrue, target("___vfprintf__XprivateX__BB59_236_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_230_F"))
		i10 =  ((__xasm<int>(push((mstate.ebp+-1540)), op(0x37))))
		__asm(push(i10==0), iftrue, target("___vfprintf__XprivateX__BB59_235_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_231_F"))
		i15 =  (i9 << 3)
		i10 =  (i10 + i15)
		i10 =  ((__xasm<int>(push(i10), op(0x37))))
		i9 =  (i9 + 1)
		__asm(push(i10<0), iftrue, target("___vfprintf__XprivateX__BB59_233_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_232_F"))
		i16 =  (10)
		i17 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2448)), op(0x37))))
		i15 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2439)), op(0x37))))
		i19 =  ((__xasm<int>(push((mstate.ebp+-2475)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1103_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_233_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_234_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_234_F"), lbl("___vfprintf__XprivateX__BB59_234_B"), label, lbl("___vfprintf__XprivateX__BB59_234_F")); 
		i15 =  (45)
		__asm(push(i15), push((mstate.ebp+-1746)), op(0x3a))
		i16 =  (10)
		i10 =  (0 - i10)
		i17 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2448)), op(0x37))))
		i15 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2439)), op(0x37))))
		i19 =  ((__xasm<int>(push((mstate.ebp+-2475)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1103_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_235_F"))
		i10 =  ((__xasm<int>(push(i1), op(0x37))))
		i1 =  (i1 + 4)
		__asm(jump, target("___vfprintf__XprivateX__BB59_247_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_236_F"))
		i10 =  (i3 & 64)
		__asm(push(i10==0), iftrue, target("___vfprintf__XprivateX__BB59_240_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_237_F"))
		i10 =  ((__xasm<int>(push((mstate.ebp+-1540)), op(0x37))))
		__asm(push(i10==0), iftrue, target("___vfprintf__XprivateX__BB59_239_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_238_F"))
		i15 =  (i9 << 3)
		i10 =  (i10 + i15)
		i10 =  ((__xasm<int>(push(i10), op(0x36), op(0x52))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_247_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_239_F"))
		i10 =  ((__xasm<int>(push(i1), op(0x36), op(0x52))))
		i1 =  (i1 + 4)
		__asm(jump, target("___vfprintf__XprivateX__BB59_247_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_240_F"))
		i10 =  ((__xasm<int>(push((mstate.ebp+-1540)), op(0x37))))
		i15 =  (i3 & 8192)
		__asm(push(i15==0), iftrue, target("___vfprintf__XprivateX__BB59_244_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_241_F"))
		__asm(push(i10==0), iftrue, target("___vfprintf__XprivateX__BB59_243_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_242_F"))
		i15 =  (i9 << 3)
		i10 =  (i10 + i15)
		i10 =  ((__xasm<int>(push(i10), op(0x35), op(0x51))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_247_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_243_F"))
		i10 =  ((__xasm<int>(push(i1), op(0x35), op(0x51))))
		i1 =  (i1 + 4)
		__asm(jump, target("___vfprintf__XprivateX__BB59_247_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_244_F"))
		__asm(push(i10==0), iftrue, target("___vfprintf__XprivateX__BB59_246_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_245_F"))
		i15 =  (i9 << 3)
		i10 =  (i10 + i15)
		i10 =  ((__xasm<int>(push(i10), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_247_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_246_F"))
		i10 =  ((__xasm<int>(push(i1), op(0x37))))
		i1 =  (i1 + 4)
	__asm(lbl("___vfprintf__XprivateX__BB59_247_F"))
		i9 =  (i9 + 1)
		__asm(push(i10<0), iftrue, target("___vfprintf__XprivateX__BB59_234_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_248_F"))
		i16 =  (10)
		i17 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2448)), op(0x37))))
		i15 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2439)), op(0x37))))
		i19 =  ((__xasm<int>(push((mstate.ebp+-2475)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1103_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_249_F"))
		i14 =  (i1 + 8)
		i12 = i1
		i1 = i14
	__asm(lbl("___vfprintf__XprivateX__BB59_250_F"))
		i14 =  (0)
		f0 =  ((__xasm<Number>(push(i12), op(0x39))))
		i12 =  ((__xasm<int>(push((mstate.ebp+-2079)), op(0x37))))
		__asm(push(f0), push(i12), op(0x3e))
		i12 =  ((__xasm<int>(push((mstate.ebp+-2007)), op(0x37))))
		i12 =  ((__xasm<int>(push(i12), op(0x37))))
		__asm(push(f0), push((mstate.ebp+-1760)), op(0x3e))
		i17 =  ((__xasm<int>(push((mstate.ebp+-1756)), op(0x37))))
		i19 =  (i12 >>> 15)
		i20 =  ((__xasm<int>(push((mstate.ebp+-1760)), op(0x37))))
		i21 =  (i17 & 2146435072)
		i19 =  (i19 & 1)
		__asm(push(i21==0), iftrue, target("___vfprintf__XprivateX__BB59_253_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_251_F"))
		i21 =  (i21 ^ 2146435072)
		i14 =  (i14 | i21)
		__asm(push(i14==0), iftrue, target("___vfprintf__XprivateX__BB59_254_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_252_F"))
		i17 =  (4)
		__asm(jump, target("___vfprintf__XprivateX__BB59_255_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_253_F"))
		i17 =  (i17 & 1048575)
		i17 =  (i17 | i20)
		i17 =  ((i17==0) ? 16 : 8)
		__asm(jump, target("___vfprintf__XprivateX__BB59_255_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_254_F"))
		i17 =  (i17 & 1048575)
		i17 =  (i17 | i20)
		i17 =  ((i17==0) ? 1 : 2)
	__asm(lbl("___vfprintf__XprivateX__BB59_255_F"))
		i14 = i17
		__asm(push(i14>3), iftrue, target("___vfprintf__XprivateX__BB59_260_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_256_F"))
		__asm(push(i14==1), iftrue, target("___vfprintf__XprivateX__BB59_270_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_257_F"))
		__asm(push(i14==2), iftrue, target("___vfprintf__XprivateX__BB59_258_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_285_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_258_F"))
		i12 =  (2147483647)
		__asm(push(i12), push((mstate.ebp+-1744)), op(0x3c))
		i12 =  ((__xasm<int>(push(_freelist), op(0x37))))
		__asm(push(i12==0), iftrue, target("___vfprintf__XprivateX__BB59_278_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_259_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_259_F"))
		i14 =  ((__xasm<int>(push(i12), op(0x37))))
		__asm(push(i14), push(_freelist), op(0x3c))
		__asm(jump, target("___vfprintf__XprivateX__BB59_281_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_260_F"))
		__asm(push(i14==16), iftrue, target("___vfprintf__XprivateX__BB59_264_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_261_F"))
		__asm(push(i14==8), iftrue, target("___vfprintf__XprivateX__BB59_286_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_262_F"))
		__asm(push(i14!=4), iftrue, target("___vfprintf__XprivateX__BB59_285_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_263_F"))
		i12 =  (i12 & 32767)
		i12 =  (i12 + -16385)
		__asm(jump, target("___vfprintf__XprivateX__BB59_287_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_264_F"))
		i12 =  (1)
		__asm(push(i12), push((mstate.ebp+-1744)), op(0x3c))
		i12 =  ((__xasm<int>(push(_freelist), op(0x37))))
		__asm(push(i12==0), iftrue, target("___vfprintf__XprivateX__BB59_266_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_265_F"))
		i14 =  ((__xasm<int>(push(i12), op(0x37))))
		__asm(push(i14), push(_freelist), op(0x3c))
		__asm(jump, target("___vfprintf__XprivateX__BB59_269_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_266_F"))
		i12 =  (_private_mem)
		i14 =  ((__xasm<int>(push(_pmem_next), op(0x37))))
		i12 =  (i14 - i12)
		i12 =  (i12 >> 3)
		i12 =  (i12 + 3)
		__asm(push(uint(i12)>uint(288)), iftrue, target("___vfprintf__XprivateX__BB59_268_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_267_F"))
		i12 =  (0)
		i17 =  (i14 + 24)
		__asm(push(i17), push(_pmem_next), op(0x3c))
		__asm(push(i12), push((i14+4)), op(0x3c))
		i12 =  (1)
		__asm(push(i12), push((i14+8)), op(0x3c))
		i12 = i14
		__asm(jump, target("___vfprintf__XprivateX__BB59_269_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_268_F"))
		i12 =  (24)
		mstate.esp -= 4
		__asm(push(i12), push(mstate.esp), op(0x3c))
		state = 13
		mstate.esp -= 4;FSM_malloc.start()
		return
	__asm(lbl("___vfprintf_state13"))
		i12 = mstate.eax
		mstate.esp += 4
		i14 =  (0)
		__asm(push(i14), push((i12+4)), op(0x3c))
		i14 =  (1)
		__asm(push(i14), push((i12+8)), op(0x3c))
	__asm(lbl("___vfprintf__XprivateX__BB59_269_F"))
		i14 =  (0)
		__asm(push(i14), push((i12+16)), op(0x3c))
		__asm(push(i14), push((i12+12)), op(0x3c))
		__asm(push(i14), push(i12), op(0x3c))
		i17 =  (48)
		__asm(push(i17), push((i12+4)), op(0x3a))
		__asm(push(i14), push((i12+5)), op(0x3a))
		i14 =  (i12 + 5)
		__asm(push(i14), push((mstate.ebp+-1740)), op(0x3c))
		i12 =  (i12 + 4)
		__asm(jump, target("___vfprintf__XprivateX__BB59_328_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_270_F"))
		i12 =  (2147483647)
		__asm(push(i12), push((mstate.ebp+-1744)), op(0x3c))
		i12 =  ((__xasm<int>(push(_freelist), op(0x37))))
		__asm(push(i12==0), iftrue, target("___vfprintf__XprivateX__BB59_272_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_271_F"))
		i14 =  ((__xasm<int>(push(i12), op(0x37))))
		__asm(push(i14), push(_freelist), op(0x3c))
		__asm(jump, target("___vfprintf__XprivateX__BB59_275_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_272_F"))
		i12 =  (_private_mem)
		i14 =  ((__xasm<int>(push(_pmem_next), op(0x37))))
		i12 =  (i14 - i12)
		i12 =  (i12 >> 3)
		i12 =  (i12 + 3)
		__asm(push(uint(i12)>uint(288)), iftrue, target("___vfprintf__XprivateX__BB59_274_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_273_F"))
		i12 =  (0)
		i17 =  (i14 + 24)
		__asm(push(i17), push(_pmem_next), op(0x3c))
		__asm(push(i12), push((i14+4)), op(0x3c))
		i12 =  (1)
		__asm(push(i12), push((i14+8)), op(0x3c))
		i12 = i14
		__asm(jump, target("___vfprintf__XprivateX__BB59_275_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_274_F"))
		i12 =  (24)
		mstate.esp -= 4
		__asm(push(i12), push(mstate.esp), op(0x3c))
		state = 14
		mstate.esp -= 4;FSM_malloc.start()
		return
	__asm(lbl("___vfprintf_state14"))
		i12 = mstate.eax
		mstate.esp += 4
		i14 =  (0)
		__asm(push(i14), push((i12+4)), op(0x3c))
		i14 =  (1)
		__asm(push(i14), push((i12+8)), op(0x3c))
	__asm(lbl("___vfprintf__XprivateX__BB59_275_F"))
		i14 =  (0)
		__asm(push(i14), push((i12+16)), op(0x3c))
		__asm(push(i14), push((i12+12)), op(0x3c))
		__asm(push(i14), push(i12), op(0x3c))
		i17 =  (73)
		__asm(push(i17), push((i12+4)), op(0x3a))
		i12 =  (i12 + 4)
		i17 =  (__2E_str159)
		i20 = i12
	__asm(jump, target("___vfprintf__XprivateX__BB59_276_F"), lbl("___vfprintf__XprivateX__BB59_276_B"), label, lbl("___vfprintf__XprivateX__BB59_276_F")); 
		i21 =  (i17 + i14)
		i21 =  ((__xasm<int>(push((i21+1)), op(0x35))))
		i22 =  (i12 + i14)
		__asm(push(i21), push((i22+1)), op(0x3a))
		i14 =  (i14 + 1)
		__asm(push(i21==0), iftrue, target("___vfprintf__XprivateX__BB59_327_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_277_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_276_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_278_F"))
		i12 =  (_private_mem)
		i14 =  ((__xasm<int>(push(_pmem_next), op(0x37))))
		i12 =  (i14 - i12)
		i12 =  (i12 >> 3)
		i12 =  (i12 + 3)
		__asm(push(uint(i12)>uint(288)), iftrue, target("___vfprintf__XprivateX__BB59_280_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_279_F"))
		i12 =  (0)
		i17 =  (i14 + 24)
		__asm(push(i17), push(_pmem_next), op(0x3c))
		__asm(push(i12), push((i14+4)), op(0x3c))
		i12 =  (1)
		__asm(push(i12), push((i14+8)), op(0x3c))
		i12 = i14
		__asm(jump, target("___vfprintf__XprivateX__BB59_281_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_280_F"))
		i12 =  (24)
		mstate.esp -= 4
		__asm(push(i12), push(mstate.esp), op(0x3c))
		state = 15
		mstate.esp -= 4;FSM_malloc.start()
		return
	__asm(lbl("___vfprintf_state15"))
		i12 = mstate.eax
		mstate.esp += 4
		i14 =  (0)
		__asm(push(i14), push((i12+4)), op(0x3c))
		i14 =  (1)
		__asm(push(i14), push((i12+8)), op(0x3c))
	__asm(lbl("___vfprintf__XprivateX__BB59_281_F"))
		i14 =  (0)
		__asm(push(i14), push((i12+16)), op(0x3c))
		__asm(push(i14), push((i12+12)), op(0x3c))
		__asm(push(i14), push(i12), op(0x3c))
		i17 =  (78)
		__asm(push(i17), push((i12+4)), op(0x3a))
		i12 =  (i12 + 4)
		i17 =  (__2E_str260)
		i20 = i12
	__asm(jump, target("___vfprintf__XprivateX__BB59_282_F"), lbl("___vfprintf__XprivateX__BB59_282_B"), label, lbl("___vfprintf__XprivateX__BB59_282_F")); 
		i21 =  (i17 + i14)
		i21 =  ((__xasm<int>(push((i21+1)), op(0x35))))
		i22 =  (i12 + i14)
		__asm(push(i21), push((i22+1)), op(0x3a))
		i14 =  (i14 + 1)
		__asm(push(i21==0), iftrue, target("___vfprintf__XprivateX__BB59_284_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_283_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_282_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_284_F"))
		i12 =  (i12 + i14)
		__asm(push(i12), push((mstate.ebp+-1740)), op(0x3c))
		i12 = i20
		__asm(jump, target("___vfprintf__XprivateX__BB59_328_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_285_F"))
		state = 16
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("___vfprintf_state16"))
	__asm(lbl("___vfprintf__XprivateX__BB59_286_F"))
		i12 =  (i12 & 32767)
		f0 =  (f0 * 5.36312e+154)
		i14 =  ((__xasm<int>(push((mstate.ebp+-2079)), op(0x37))))
		__asm(push(f0), push(i14), op(0x3e))
		i12 =  (i12 + -16899)
		__asm(jump, target("___vfprintf__XprivateX__BB59_287_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_287_F"))
		i14 =  ((i11==0) ? 1 : i11)
		__asm(push(i12), push((mstate.ebp+-1744)), op(0x3c))
		i12 =  ((i14>15) ? i14 : 16)
		__asm(push(uint(i12)<uint(20)), iftrue, target("___vfprintf__XprivateX__BB59_1465_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_288_F"))
		i17 =  (4)
		i20 =  (0)
		__asm(jump, target("___vfprintf__XprivateX__BB59_289_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_289_F"), lbl("___vfprintf__XprivateX__BB59_289_B"), label, lbl("___vfprintf__XprivateX__BB59_289_F")); 
		i17 =  (i17 << 1)
		i20 =  (i20 + 1)
		i21 =  (i17 + 16)
		__asm(push(uint(i21)>uint(i12)), iftrue, target("___vfprintf__XprivateX__BB59_291_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_290_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_289_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_291_F"))
		i17 = i20
	__asm(jump, target("___vfprintf__XprivateX__BB59_292_F"), lbl("___vfprintf__XprivateX__BB59_292_B"), label, lbl("___vfprintf__XprivateX__BB59_292_F")); 
		mstate.esp -= 4
		__asm(push(i17), push(mstate.esp), op(0x3c))
		state = 17
		mstate.esp -= 4;FSM___Balloc_D2A.start()
		return
	__asm(lbl("___vfprintf_state17"))
		i20 = mstate.eax
		mstate.esp += 4
		i21 =  (i12 + -1)
		i22 =  (i20 + 4)
		__asm(push(i17), push(i20), op(0x3c))
		i17 =  (i22 + i21)
		i20 = i22
		__asm(push(i21>15), iftrue, target("___vfprintf__XprivateX__BB59_294_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_293_F"))
		i12 = i17
		__asm(jump, target("___vfprintf__XprivateX__BB59_304_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_294_F"))
		i17 =  (0)
		i12 =  (i12 + i22)
		i12 =  (i12 + -1)
	__asm(jump, target("___vfprintf__XprivateX__BB59_295_F"), lbl("___vfprintf__XprivateX__BB59_295_B"), label, lbl("___vfprintf__XprivateX__BB59_295_F")); 
		i23 =  (0)
		i24 =  (i17 ^ -1)
		__asm(push(i23), push(i12), op(0x3a))
		i12 =  (i12 + -1)
		i17 =  (i17 + 1)
		i23 =  (i21 + i24)
		__asm(push(i23<16), iftrue, target("___vfprintf__XprivateX__BB59_303_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_296_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_295_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_297_B"), label)
		__asm(jump, target("___vfprintf__XprivateX__BB59_298_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_298_F"), lbl("___vfprintf__XprivateX__BB59_298_B"), label, lbl("___vfprintf__XprivateX__BB59_298_F")); 
		i24 =  ((__xasm<int>(push((mstate.ebp+-2241)), op(0x37))))
		i24 =  ((__xasm<int>(push(i24), op(0x35))))
		i24 =  (i24 & 15)
		__asm(push(i24), push(i12), op(0x3a))
		i24 =  ((__xasm<int>(push((mstate.ebp+-2241)), op(0x37))))
		i24 =  ((__xasm<int>(push(i24), op(0x37))))
		i24 =  (i24 >>> 4)
		i25 =  (i17 ^ -1)
		i26 =  ((__xasm<int>(push((mstate.ebp+-2241)), op(0x37))))
		__asm(push(i24), push(i26), op(0x3c))
		i12 =  (i12 + -1)
		i17 =  (i17 + 1)
		i24 =  (i21 + i25)
		__asm(push(uint(i23)>=uint(i24)), iftrue, target("___vfprintf__XprivateX__BB59_300_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_299_F"))
		__asm(push(uint(i24)>uint(i20)), iftrue, target("___vfprintf__XprivateX__BB59_297_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_300_F"))
		i12 = i24
		__asm(jump, target("___vfprintf__XprivateX__BB59_301_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_301_F"), lbl("___vfprintf__XprivateX__BB59_301_B"), label, lbl("___vfprintf__XprivateX__BB59_301_F")); 
		i23 = i12
		i12 =  ((__xasm<int>(push((mstate.ebp+-2214)), op(0x37))))
		i17 =  ((__xasm<int>(push(i12), op(0x35))))
		i12 = i23
		__asm(push(uint(i23)>uint(i20)), iftrue, target("___vfprintf__XprivateX__BB59_1466_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_302_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_302_F"))
		i12 = i17
		i17 = i23
		__asm(jump, target("___vfprintf__XprivateX__BB59_311_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_303_F"))
		i12 =  (i20 + i23)
	__asm(lbl("___vfprintf__XprivateX__BB59_304_F"))
		i21 = i12
		i23 =  (i20 + 7)
		i12 = i21
		__asm(push(uint(i23)>=uint(i21)), iftrue, target("___vfprintf__XprivateX__BB59_306_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_305_F"))
		__asm(push(uint(i21)>uint(i20)), iftrue, target("___vfprintf__XprivateX__BB59_307_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_306_F"))
		i12 = i21
		__asm(jump, target("___vfprintf__XprivateX__BB59_301_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_307_F"))
		i17 =  (0)
		__asm(jump, target("___vfprintf__XprivateX__BB59_298_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_308_B"), label)
		__asm(jump, target("___vfprintf__XprivateX__BB59_309_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_309_F"), lbl("___vfprintf__XprivateX__BB59_309_B"), label, lbl("___vfprintf__XprivateX__BB59_309_F")); 
		i17 =  (i17 & 15)
		__asm(push(i17), push(i12), op(0x3a))
		i17 =  ((__xasm<int>(push((mstate.ebp+-2214)), op(0x37))))
		i17 =  ((__xasm<int>(push(i17), op(0x37))))
		i17 =  (i17 >>> 4)
		i24 =  (i21 ^ -1)
		i25 =  ((__xasm<int>(push((mstate.ebp+-2214)), op(0x37))))
		__asm(push(i17), push(i25), op(0x3c))
		i12 =  (i12 + -1)
		i21 =  (i21 + 1)
		i24 =  (i23 + i24)
		__asm(push(uint(i24)>uint(i20)), iftrue, target("___vfprintf__XprivateX__BB59_308_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_310_F"))
		i12 = i17
		i17 = i24
		__asm(jump, target("___vfprintf__XprivateX__BB59_311_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_311_F"))
		i12 =  (i12 | 8)
		__asm(push(i12), push(i17), op(0x3a))
		__asm(push(i14<0), iftrue, target("___vfprintf__XprivateX__BB59_313_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_312_F"))
		i12 = i14
		__asm(jump, target("___vfprintf__XprivateX__BB59_319_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_313_F"))
		i12 =  ((__xasm<int>(push((i20+15)), op(0x35))))
		__asm(push(i12==0), iftrue, target("___vfprintf__XprivateX__BB59_315_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_314_F"))
		i12 =  (16)
		__asm(jump, target("___vfprintf__XprivateX__BB59_319_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_315_F"))
		i12 =  (-1)
		i14 =  (i22 + 14)
	__asm(jump, target("___vfprintf__XprivateX__BB59_316_F"), lbl("___vfprintf__XprivateX__BB59_316_B"), label, lbl("___vfprintf__XprivateX__BB59_316_F")); 
		i17 =  ((__xasm<int>(push(i14), op(0x35))))
		i14 =  (i14 + -1)
		i12 =  (i12 + 1)
		__asm(push(i17!=0), iftrue, target("___vfprintf__XprivateX__BB59_318_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_317_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_316_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_318_F"))
		i12 =  (15 - i12)
	__asm(lbl("___vfprintf__XprivateX__BB59_319_F"))
		__asm(push(i12>15), iftrue, target("___vfprintf__XprivateX__BB59_322_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_320_F"))
		i14 =  (i20 + i12)
		i14 =  ((__xasm<int>(push(i14), op(0x35))))
		__asm(push(i14==0), iftrue, target("___vfprintf__XprivateX__BB59_322_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_321_F"))
		i14 =  ((mstate.ebp+-1744))
		mstate.esp -= 12
		__asm(push(i20), push(mstate.esp), op(0x3c))
		__asm(push(i12), push((mstate.esp+4)), op(0x3c))
		__asm(push(i14), push((mstate.esp+8)), op(0x3c))
		mstate.esp -= 4;FSM_dorounding.start()
	__asm(lbl("___vfprintf_state18"))
		mstate.esp += 12
	__asm(lbl("___vfprintf__XprivateX__BB59_322_F"))
		i14 =  (0)
		i17 =  (i20 + i12)
		__asm(push(i17), push((mstate.ebp+-1740)), op(0x3c))
		i21 =  (i12 + -1)
		__asm(push(i14), push(i17), op(0x3a))
		i14 =  (i20 + i21)
		__asm(push(uint(i14)>=uint(i20)), iftrue, target("___vfprintf__XprivateX__BB59_324_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_323_F"), lbl("___vfprintf__XprivateX__BB59_323_B"), label, lbl("___vfprintf__XprivateX__BB59_323_F")); 
		i12 = i20
		__asm(jump, target("___vfprintf__XprivateX__BB59_328_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_324_F"))
		i14 =  (0)
		i12 =  (i22 + i12)
		i12 =  (i12 + -1)
	__asm(jump, target("___vfprintf__XprivateX__BB59_325_F"), lbl("___vfprintf__XprivateX__BB59_325_B"), label, lbl("___vfprintf__XprivateX__BB59_325_F")); 
		i17 =  ((__xasm<int>(push(i12), op(0x35), op(0x51))))
		i17 =  (i3 + i17)
		i17 =  ((__xasm<int>(push(i17), op(0x35))))
		__asm(push(i17), push(i12), op(0x3a))
		i12 =  (i12 + -1)
		i17 =  (i14 + 1)
		i14 =  (i14 ^ -1)
		i14 =  (i21 + i14)
		i14 =  (i20 + i14)
		__asm(push(uint(i14)<uint(i20)), iftrue, target("___vfprintf__XprivateX__BB59_323_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_326_F"))
		i14 = i17
		__asm(jump, target("___vfprintf__XprivateX__BB59_325_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_327_F"))
		i12 =  (i12 + i14)
		__asm(push(i12), push((mstate.ebp+-1740)), op(0x3c))
		i12 = i20
		__asm(jump, target("___vfprintf__XprivateX__BB59_328_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_328_F"))
		i9 =  (i9 + 1)
		__asm(push(i11<0), iftrue, target("___vfprintf__XprivateX__BB59_330_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_329_F"))
		i14 = i12
		__asm(jump, target("___vfprintf__XprivateX__BB59_416_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_330_F"))
		i11 = i19
		i14 = i12
		__asm(jump, target("___vfprintf__XprivateX__BB59_415_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_331_F"))
		__asm(push(i12==0), iftrue, target("___vfprintf__XprivateX__BB59_333_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_332_F"))
		i14 =  (i9 << 3)
		i12 =  (i12 + i14)
		__asm(jump, target("___vfprintf__XprivateX__BB59_334_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_333_F"))
		i14 =  (i1 + 8)
		i12 = i1
		i1 = i14
	__asm(lbl("___vfprintf__XprivateX__BB59_334_F"))
		i14 =  (0)
		f0 =  ((__xasm<Number>(push(i12), op(0x39))))
		__asm(push(f0), push((mstate.ebp+-1768)), op(0x3e))
		i12 =  ((__xasm<int>(push((mstate.ebp+-1764)), op(0x37))))
		i19 =  ((__xasm<int>(push((mstate.ebp+-1768)), op(0x37))))
		i17 =  (i12 & 2146435072)
		i20 =  (i12 >>> 31)
		i21 = i12
		__asm(push(i17==0), iftrue, target("___vfprintf__XprivateX__BB59_337_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_335_F"))
		i17 =  (i17 ^ 2146435072)
		i14 =  (i14 | i17)
		__asm(push(i14==0), iftrue, target("___vfprintf__XprivateX__BB59_338_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_336_F"))
		i14 =  (4)
		__asm(jump, target("___vfprintf__XprivateX__BB59_339_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_337_F"))
		i14 =  (i12 & 1048575)
		i14 =  (i14 | i19)
		i14 =  ((i14==0) ? 16 : 8)
		__asm(jump, target("___vfprintf__XprivateX__BB59_339_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_338_F"))
		i14 =  (i12 & 1048575)
		i14 =  (i14 | i19)
		i14 =  ((i14==0) ? 1 : 2)
	__asm(lbl("___vfprintf__XprivateX__BB59_339_F"))
		__asm(push(i14>3), iftrue, target("___vfprintf__XprivateX__BB59_344_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_340_F"))
		__asm(push(i14==1), iftrue, target("___vfprintf__XprivateX__BB59_354_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_341_F"))
		__asm(push(i14==2), iftrue, target("___vfprintf__XprivateX__BB59_342_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_369_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_342_F"))
		i12 =  (2147483647)
		__asm(push(i12), push((mstate.ebp+-1744)), op(0x3c))
		i12 =  ((__xasm<int>(push(_freelist), op(0x37))))
		__asm(push(i12==0), iftrue, target("___vfprintf__XprivateX__BB59_362_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_343_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_343_F"))
		i14 =  ((__xasm<int>(push(i12), op(0x37))))
		__asm(push(i14), push(_freelist), op(0x3c))
		__asm(jump, target("___vfprintf__XprivateX__BB59_365_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_344_F"))
		__asm(push(i14==16), iftrue, target("___vfprintf__XprivateX__BB59_348_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_345_F"))
		__asm(push(i14==8), iftrue, target("___vfprintf__XprivateX__BB59_370_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_346_F"))
		__asm(push(i14!=4), iftrue, target("___vfprintf__XprivateX__BB59_369_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_347_F"))
		i12 =  (i12 >>> 20)
		i12 =  (i12 & 2047)
		i12 =  (i12 + -1022)
		i14 = i19
		i19 = i21
		__asm(jump, target("___vfprintf__XprivateX__BB59_371_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_348_F"))
		i12 =  (1)
		__asm(push(i12), push((mstate.ebp+-1744)), op(0x3c))
		i12 =  ((__xasm<int>(push(_freelist), op(0x37))))
		__asm(push(i12==0), iftrue, target("___vfprintf__XprivateX__BB59_350_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_349_F"))
		i14 =  ((__xasm<int>(push(i12), op(0x37))))
		__asm(push(i14), push(_freelist), op(0x3c))
		__asm(jump, target("___vfprintf__XprivateX__BB59_353_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_350_F"))
		i12 =  (_private_mem)
		i14 =  ((__xasm<int>(push(_pmem_next), op(0x37))))
		i12 =  (i14 - i12)
		i12 =  (i12 >> 3)
		i12 =  (i12 + 3)
		__asm(push(uint(i12)>uint(288)), iftrue, target("___vfprintf__XprivateX__BB59_352_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_351_F"))
		i12 =  (0)
		i19 =  (i14 + 24)
		__asm(push(i19), push(_pmem_next), op(0x3c))
		__asm(push(i12), push((i14+4)), op(0x3c))
		i12 =  (1)
		__asm(push(i12), push((i14+8)), op(0x3c))
		i12 = i14
		__asm(jump, target("___vfprintf__XprivateX__BB59_353_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_352_F"))
		i12 =  (24)
		mstate.esp -= 8
		i14 =  (0)
		__asm(push(i14), push(mstate.esp), op(0x3c))
		__asm(push(i12), push((mstate.esp+4)), op(0x3c))
		state = 19
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("___vfprintf_state19"))
		i12 = mstate.eax
		mstate.esp += 8
		__asm(push(i14), push((i12+4)), op(0x3c))
		i14 =  (1)
		__asm(push(i14), push((i12+8)), op(0x3c))
	__asm(lbl("___vfprintf__XprivateX__BB59_353_F"))
		i14 =  (0)
		__asm(push(i14), push((i12+16)), op(0x3c))
		__asm(push(i14), push((i12+12)), op(0x3c))
		__asm(push(i14), push(i12), op(0x3c))
		i19 =  (48)
		__asm(push(i19), push((i12+4)), op(0x3a))
		__asm(push(i14), push((i12+5)), op(0x3a))
		i14 =  (i12 + 5)
		__asm(push(i14), push((mstate.ebp+-1740)), op(0x3c))
		i12 =  (i12 + 4)
		__asm(jump, target("___vfprintf__XprivateX__BB59_412_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_354_F"))
		i12 =  (2147483647)
		__asm(push(i12), push((mstate.ebp+-1744)), op(0x3c))
		i12 =  ((__xasm<int>(push(_freelist), op(0x37))))
		__asm(push(i12==0), iftrue, target("___vfprintf__XprivateX__BB59_356_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_355_F"))
		i14 =  ((__xasm<int>(push(i12), op(0x37))))
		__asm(push(i14), push(_freelist), op(0x3c))
		__asm(jump, target("___vfprintf__XprivateX__BB59_359_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_356_F"))
		i12 =  (_private_mem)
		i14 =  ((__xasm<int>(push(_pmem_next), op(0x37))))
		i12 =  (i14 - i12)
		i12 =  (i12 >> 3)
		i12 =  (i12 + 3)
		__asm(push(uint(i12)>uint(288)), iftrue, target("___vfprintf__XprivateX__BB59_358_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_357_F"))
		i12 =  (0)
		i19 =  (i14 + 24)
		__asm(push(i19), push(_pmem_next), op(0x3c))
		__asm(push(i12), push((i14+4)), op(0x3c))
		i12 =  (1)
		__asm(push(i12), push((i14+8)), op(0x3c))
		i12 = i14
		__asm(jump, target("___vfprintf__XprivateX__BB59_359_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_358_F"))
		i12 =  (24)
		mstate.esp -= 8
		i14 =  (0)
		__asm(push(i14), push(mstate.esp), op(0x3c))
		__asm(push(i12), push((mstate.esp+4)), op(0x3c))
		state = 20
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("___vfprintf_state20"))
		i12 = mstate.eax
		mstate.esp += 8
		__asm(push(i14), push((i12+4)), op(0x3c))
		i14 =  (1)
		__asm(push(i14), push((i12+8)), op(0x3c))
	__asm(lbl("___vfprintf__XprivateX__BB59_359_F"))
		i14 =  (0)
		__asm(push(i14), push((i12+16)), op(0x3c))
		__asm(push(i14), push((i12+12)), op(0x3c))
		__asm(push(i14), push(i12), op(0x3c))
		i19 =  (73)
		__asm(push(i19), push((i12+4)), op(0x3a))
		i12 =  (i12 + 4)
		i19 =  (__2E_str159)
		i17 = i12
	__asm(jump, target("___vfprintf__XprivateX__BB59_360_F"), lbl("___vfprintf__XprivateX__BB59_360_B"), label, lbl("___vfprintf__XprivateX__BB59_360_F")); 
		i21 =  (i19 + i14)
		i21 =  ((__xasm<int>(push((i21+1)), op(0x35))))
		i22 =  (i12 + i14)
		__asm(push(i21), push((i22+1)), op(0x3a))
		i14 =  (i14 + 1)
		__asm(push(i21==0), iftrue, target("___vfprintf__XprivateX__BB59_411_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_361_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_360_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_362_F"))
		i12 =  (_private_mem)
		i14 =  ((__xasm<int>(push(_pmem_next), op(0x37))))
		i12 =  (i14 - i12)
		i12 =  (i12 >> 3)
		i12 =  (i12 + 3)
		__asm(push(uint(i12)>uint(288)), iftrue, target("___vfprintf__XprivateX__BB59_364_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_363_F"))
		i12 =  (0)
		i19 =  (i14 + 24)
		__asm(push(i19), push(_pmem_next), op(0x3c))
		__asm(push(i12), push((i14+4)), op(0x3c))
		i12 =  (1)
		__asm(push(i12), push((i14+8)), op(0x3c))
		i12 = i14
		__asm(jump, target("___vfprintf__XprivateX__BB59_365_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_364_F"))
		i12 =  (24)
		mstate.esp -= 8
		i14 =  (0)
		__asm(push(i14), push(mstate.esp), op(0x3c))
		__asm(push(i12), push((mstate.esp+4)), op(0x3c))
		state = 21
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("___vfprintf_state21"))
		i12 = mstate.eax
		mstate.esp += 8
		__asm(push(i14), push((i12+4)), op(0x3c))
		i14 =  (1)
		__asm(push(i14), push((i12+8)), op(0x3c))
	__asm(lbl("___vfprintf__XprivateX__BB59_365_F"))
		i14 =  (0)
		__asm(push(i14), push((i12+16)), op(0x3c))
		__asm(push(i14), push((i12+12)), op(0x3c))
		__asm(push(i14), push(i12), op(0x3c))
		i19 =  (78)
		__asm(push(i19), push((i12+4)), op(0x3a))
		i12 =  (i12 + 4)
		i19 =  (__2E_str260)
		i17 = i12
	__asm(jump, target("___vfprintf__XprivateX__BB59_366_F"), lbl("___vfprintf__XprivateX__BB59_366_B"), label, lbl("___vfprintf__XprivateX__BB59_366_F")); 
		i21 =  (i19 + i14)
		i21 =  ((__xasm<int>(push((i21+1)), op(0x35))))
		i22 =  (i12 + i14)
		__asm(push(i21), push((i22+1)), op(0x3a))
		i14 =  (i14 + 1)
		__asm(push(i21==0), iftrue, target("___vfprintf__XprivateX__BB59_368_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_367_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_366_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_368_F"))
		i12 =  (i12 + i14)
		__asm(push(i12), push((mstate.ebp+-1740)), op(0x3c))
		i12 = i17
		__asm(jump, target("___vfprintf__XprivateX__BB59_412_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_369_F"))
		state = 22
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("___vfprintf_state22"))
	__asm(lbl("___vfprintf__XprivateX__BB59_370_F"))
		f0 =  (f0 * 5.36312e+154)
		__asm(push(f0), push((mstate.ebp+-1776)), op(0x3e))
		i19 =  ((__xasm<int>(push((mstate.ebp+-1772)), op(0x37))))
		i12 =  (i19 >>> 20)
		i12 =  (i12 & 2047)
		i14 =  ((__xasm<int>(push((mstate.ebp+-1776)), op(0x37))))
		i12 =  (i12 + -1536)
		__asm(jump, target("___vfprintf__XprivateX__BB59_371_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_371_F"))
		i17 =  ((i11==0) ? 1 : i11)
		__asm(push(i12), push((mstate.ebp+-1744)), op(0x3c))
		i12 =  ((i17>13) ? i17 : 14)
		__asm(push(uint(i12)<uint(20)), iftrue, target("___vfprintf__XprivateX__BB59_1467_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_372_F"))
		i21 =  (4)
		i22 =  (0)
		__asm(jump, target("___vfprintf__XprivateX__BB59_373_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_373_F"), lbl("___vfprintf__XprivateX__BB59_373_B"), label, lbl("___vfprintf__XprivateX__BB59_373_F")); 
		i21 =  (i21 << 1)
		i22 =  (i22 + 1)
		i23 =  (i21 + 16)
		__asm(push(uint(i23)>uint(i12)), iftrue, target("___vfprintf__XprivateX__BB59_375_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_374_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_373_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_375_F"))
		i21 = i22
	__asm(jump, target("___vfprintf__XprivateX__BB59_376_F"), lbl("___vfprintf__XprivateX__BB59_376_B"), label, lbl("___vfprintf__XprivateX__BB59_376_F")); 
		mstate.esp -= 4
		__asm(push(i21), push(mstate.esp), op(0x3c))
		state = 23
		mstate.esp -= 4;FSM___Balloc_D2A.start()
		return
	__asm(lbl("___vfprintf_state23"))
		i22 = mstate.eax
		mstate.esp += 4
		i23 =  (i12 + -1)
		i24 =  (i22 + 4)
		__asm(push(i21), push(i22), op(0x3c))
		i21 =  (i24 + i23)
		i22 = i24
		__asm(push(i23>13), iftrue, target("___vfprintf__XprivateX__BB59_378_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_377_F"))
		i12 = i21
		__asm(jump, target("___vfprintf__XprivateX__BB59_388_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_378_F"))
		i21 =  (0)
		i12 =  (i12 + i24)
		i12 =  (i12 + -1)
	__asm(jump, target("___vfprintf__XprivateX__BB59_379_F"), lbl("___vfprintf__XprivateX__BB59_379_B"), label, lbl("___vfprintf__XprivateX__BB59_379_F")); 
		i25 =  (0)
		i26 =  (i21 ^ -1)
		__asm(push(i25), push(i12), op(0x3a))
		i12 =  (i12 + -1)
		i21 =  (i21 + 1)
		i25 =  (i23 + i26)
		__asm(push(i25<14), iftrue, target("___vfprintf__XprivateX__BB59_387_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_380_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_379_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_381_B"), label)
		i26 = i19
		__asm(jump, target("___vfprintf__XprivateX__BB59_382_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_382_F"), lbl("___vfprintf__XprivateX__BB59_382_B"), label, lbl("___vfprintf__XprivateX__BB59_382_F")); 
		i19 = i26
		i26 =  (i12 & 15)
		i27 =  (i23 ^ -1)
		__asm(push(i26), push(i19), op(0x3a))
		i19 =  (i19 + -1)
		i23 =  (i23 + 1)
		i26 =  (i21 + i27)
		i12 =  (i12 >>> 4)
		__asm(push(uint(i25)>=uint(i26)), iftrue, target("___vfprintf__XprivateX__BB59_384_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_383_F"))
		__asm(push(uint(i26)>uint(i22)), iftrue, target("___vfprintf__XprivateX__BB59_381_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_384_F"))
		i19 = i26
		__asm(jump, target("___vfprintf__XprivateX__BB59_385_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_385_F"), lbl("___vfprintf__XprivateX__BB59_385_B"), label, lbl("___vfprintf__XprivateX__BB59_385_F")); 
		i23 = i12
		i25 = i14
		i12 = i19
		i19 = i25
		i14 = i12
		__asm(push(uint(i12)>uint(i22)), iftrue, target("___vfprintf__XprivateX__BB59_1468_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_386_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_386_F"))
		i14 = i19
		__asm(jump, target("___vfprintf__XprivateX__BB59_395_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_387_F"))
		i12 =  (i22 + i25)
	__asm(lbl("___vfprintf__XprivateX__BB59_388_F"))
		i21 = i12
		i25 =  (i22 + 5)
		i12 = i21
		__asm(push(uint(i25)>=uint(i21)), iftrue, target("___vfprintf__XprivateX__BB59_390_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_389_F"))
		__asm(push(uint(i21)>uint(i22)), iftrue, target("___vfprintf__XprivateX__BB59_391_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_390_F"))
		i12 = i14
		i14 = i19
		i19 = i21
		__asm(jump, target("___vfprintf__XprivateX__BB59_385_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_391_F"))
		i23 =  (0)
		i26 = i12
		i12 = i14
		i14 = i19
		__asm(jump, target("___vfprintf__XprivateX__BB59_382_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_392_B"), label)
		i21 = i19
		i19 = i26
		__asm(jump, target("___vfprintf__XprivateX__BB59_393_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_393_F"), lbl("___vfprintf__XprivateX__BB59_393_B"), label, lbl("___vfprintf__XprivateX__BB59_393_F")); 
		i26 =  (i25 >>> 4)
		i19 =  (i19 & 15)
		i27 =  (i14 ^ -1)
		i25 =  (i25 & -1048576)
		i26 =  (i26 & 65535)
		__asm(push(i19), push(i21), op(0x3a))
		i25 =  (i26 | i25)
		i19 =  (i21 + -1)
		i14 =  (i14 + 1)
		i21 =  (i12 + i27)
		i26 = i25
		__asm(push(uint(i21)>uint(i22)), iftrue, target("___vfprintf__XprivateX__BB59_392_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_394_F"))
		i14 = i26
		i12 = i21
		__asm(jump, target("___vfprintf__XprivateX__BB59_395_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_395_F"))
		i14 =  (i14 | 1)
		__asm(push(i14), push(i12), op(0x3a))
		__asm(push(i17<0), iftrue, target("___vfprintf__XprivateX__BB59_397_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_396_F"))
		i12 = i17
		__asm(jump, target("___vfprintf__XprivateX__BB59_403_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_397_F"))
		i12 =  ((__xasm<int>(push((i22+13)), op(0x35))))
		__asm(push(i12==0), iftrue, target("___vfprintf__XprivateX__BB59_399_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_398_F"))
		i12 =  (14)
		__asm(jump, target("___vfprintf__XprivateX__BB59_403_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_399_F"))
		i12 =  (-1)
		i14 =  (i24 + 12)
	__asm(jump, target("___vfprintf__XprivateX__BB59_400_F"), lbl("___vfprintf__XprivateX__BB59_400_B"), label, lbl("___vfprintf__XprivateX__BB59_400_F")); 
		i19 =  ((__xasm<int>(push(i14), op(0x35))))
		i14 =  (i14 + -1)
		i12 =  (i12 + 1)
		__asm(push(i19!=0), iftrue, target("___vfprintf__XprivateX__BB59_402_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_401_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_400_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_402_F"))
		i12 =  (13 - i12)
	__asm(lbl("___vfprintf__XprivateX__BB59_403_F"))
		__asm(push(i12>13), iftrue, target("___vfprintf__XprivateX__BB59_406_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_404_F"))
		i14 =  (i22 + i12)
		i14 =  ((__xasm<int>(push(i14), op(0x35))))
		__asm(push(i14==0), iftrue, target("___vfprintf__XprivateX__BB59_406_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_405_F"))
		i14 =  ((mstate.ebp+-1744))
		mstate.esp -= 12
		__asm(push(i22), push(mstate.esp), op(0x3c))
		__asm(push(i12), push((mstate.esp+4)), op(0x3c))
		__asm(push(i14), push((mstate.esp+8)), op(0x3c))
		mstate.esp -= 4;FSM_dorounding.start()
	__asm(lbl("___vfprintf_state24"))
		mstate.esp += 12
	__asm(lbl("___vfprintf__XprivateX__BB59_406_F"))
		i14 =  (0)
		i19 =  (i22 + i12)
		__asm(push(i19), push((mstate.ebp+-1740)), op(0x3c))
		i17 =  (i12 + -1)
		__asm(push(i14), push(i19), op(0x3a))
		i14 =  (i22 + i17)
		__asm(push(uint(i14)>=uint(i22)), iftrue, target("___vfprintf__XprivateX__BB59_408_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_407_F"), lbl("___vfprintf__XprivateX__BB59_407_B"), label, lbl("___vfprintf__XprivateX__BB59_407_F")); 
		i12 = i22
		__asm(jump, target("___vfprintf__XprivateX__BB59_412_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_408_F"))
		i14 =  (0)
		i12 =  (i24 + i12)
		i12 =  (i12 + -1)
	__asm(jump, target("___vfprintf__XprivateX__BB59_409_F"), lbl("___vfprintf__XprivateX__BB59_409_B"), label, lbl("___vfprintf__XprivateX__BB59_409_F")); 
		i19 =  ((__xasm<int>(push(i12), op(0x35), op(0x51))))
		i19 =  (i3 + i19)
		i19 =  ((__xasm<int>(push(i19), op(0x35))))
		__asm(push(i19), push(i12), op(0x3a))
		i12 =  (i12 + -1)
		i19 =  (i14 + 1)
		i14 =  (i14 ^ -1)
		i14 =  (i17 + i14)
		i14 =  (i22 + i14)
		__asm(push(uint(i14)<uint(i22)), iftrue, target("___vfprintf__XprivateX__BB59_407_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_410_F"))
		i14 = i19
		__asm(jump, target("___vfprintf__XprivateX__BB59_409_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_411_F"))
		i12 =  (i12 + i14)
		__asm(push(i12), push((mstate.ebp+-1740)), op(0x3c))
		i12 = i17
		__asm(jump, target("___vfprintf__XprivateX__BB59_412_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_412_F"))
		i9 =  (i9 + 1)
		__asm(push(i11<0), iftrue, target("___vfprintf__XprivateX__BB59_414_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_413_F"))
		i19 = i20
		i14 = i12
		__asm(jump, target("___vfprintf__XprivateX__BB59_416_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_414_F"))
		i11 = i20
		i14 = i12
	__asm(lbl("___vfprintf__XprivateX__BB59_415_F"))
		i19 =  ((__xasm<int>(push((mstate.ebp+-1740)), op(0x37))))
		i17 =  (i19 - i14)
		i19 = i11
		i11 = i17
	__asm(lbl("___vfprintf__XprivateX__BB59_416_F"))
		i17 = i19
		i19 =  ((__xasm<int>(push((mstate.ebp+-1744)), op(0x37))))
		__asm(push(i19==2147483647), iftrue, target("___vfprintf__XprivateX__BB59_418_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_417_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_849_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_418_F"))
		i20 =  (0)
		i21 =  ((__xasm<int>(push((mstate.ebp+-2178)), op(0x37))))
		__asm(push(i20), push(i21), op(0x3a))
		__asm(push(i17==0), iftrue, target("___vfprintf__XprivateX__BB59_420_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_419_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_851_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_420_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_852_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_421_F"))
		i11 =  (i11 + 1)
		i11 =  ((i11<0) ? 6 : i11)
		__asm(push(i14==0), iftrue, target("___vfprintf__XprivateX__BB59_423_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_422_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_427_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_423_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_430_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_424_F"))
		i11 =  (1)
	__asm(lbl("___vfprintf__XprivateX__BB59_425_F"))
		i11 =  ((i11<0) ? 6 : i11)
		__asm(push(i14==0), iftrue, target("___vfprintf__XprivateX__BB59_1469_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_426_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_427_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_427_F"))
		i12 =  (1)
		i16 =  ((__xasm<int>(push((i14+-4)), op(0x37))))
		__asm(push(i16), push(i14), op(0x3c))
		i12 =  (i12 << i16)
		__asm(push(i12), push((i14+4)), op(0x3c))
		i12 =  (i14 + -4)
		i14 = i12
		__asm(push(i12!=0), iftrue, target("___vfprintf__XprivateX__BB59_429_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_428_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_430_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_429_F"))
		i19 =  (_freelist)
		i16 =  (i16 << 2)
		i16 =  (i19 + i16)
		i19 =  ((__xasm<int>(push(i16), op(0x37))))
		__asm(push(i19), push(i12), op(0x3c))
		__asm(push(i14), push(i16), op(0x3c))
	__asm(jump, target("___vfprintf__XprivateX__BB59_430_F"), lbl("___vfprintf__XprivateX__BB59_430_B"), label, lbl("___vfprintf__XprivateX__BB59_430_F")); 
		__asm(push(i3), push((mstate.ebp+-2385)), op(0x3c))
		i3 = i11
		__asm(push(i3), push((mstate.ebp+-2466)), op(0x3c))
		i3 =  ((__xasm<int>(push((mstate.ebp+-1540)), op(0x37))))
		i11 =  (i10 & 8)
		__asm(push(i11==0), iftrue, target("___vfprintf__XprivateX__BB59_462_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_431_F"))
		__asm(push(i3==0), iftrue, target("___vfprintf__XprivateX__BB59_433_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_432_F"))
		i11 =  (i9 << 3)
		i3 =  (i3 + i11)
		__asm(jump, target("___vfprintf__XprivateX__BB59_434_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_433_F"))
		i11 =  (i1 + 8)
		i3 = i1
		i1 = i11
	__asm(lbl("___vfprintf__XprivateX__BB59_434_F"))
		i11 =  (0)
		f0 =  ((__xasm<Number>(push(i3), op(0x39))))
		i3 =  ((__xasm<int>(push((mstate.ebp+-2133)), op(0x37))))
		__asm(push(f0), push(i3), op(0x3e))
		i3 =  ((__xasm<int>(push((mstate.ebp+-1998)), op(0x37))))
		i3 =  ((__xasm<int>(push(i3), op(0x37))))
		i12 =  ((__xasm<int>(push((mstate.ebp+-2016)), op(0x37))))
		i12 =  ((__xasm<int>(push(i12), op(0x37))))
		i14 =  ((__xasm<int>(push((mstate.ebp+-2169)), op(0x37))))
		__asm(push(i12), push(i14), op(0x3c))
		i12 =  ((__xasm<int>(push((mstate.ebp+-1989)), op(0x37))))
		i12 =  ((__xasm<int>(push(i12), op(0x37))))
		i14 =  ((__xasm<int>(push((mstate.ebp+-1980)), op(0x37))))
		__asm(push(i12), push(i14), op(0x3c))
		i12 =  ((__xasm<int>(push((mstate.ebp+-2133)), op(0x37))))
		i12 =  ((__xasm<int>(push((i12+4)), op(0x37))))
		i14 =  ((__xasm<int>(push((mstate.ebp+-2133)), op(0x37))))
		i14 =  ((__xasm<int>(push(i14), op(0x37))))
		i16 =  ((__xasm<int>(push((mstate.ebp+-2385)), op(0x37))))
		i16 =  (i16 & 255)
		i19 =  (i3 & 32767)
		i3 =  (i3 >>> 15)
		i17 =  (i12 & 2146435072)
		i16 =  ((i16==0) ? 3 : 2)
		i19 =  (i19 + -16446)
		i3 =  (i3 & 1)
		i9 =  (i9 + 1)
		__asm(push(i17==0), iftrue, target("___vfprintf__XprivateX__BB59_437_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_435_F"))
		i17 =  (i17 ^ 2146435072)
		i11 =  (i11 | i17)
		__asm(push(i11==0), iftrue, target("___vfprintf__XprivateX__BB59_438_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_436_F"))
		i12 =  (4)
		__asm(jump, target("___vfprintf__XprivateX__BB59_439_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_437_F"))
		i12 =  (i12 & 1048575)
		i12 =  (i12 | i14)
		i12 =  ((i12==0) ? 16 : 8)
		__asm(jump, target("___vfprintf__XprivateX__BB59_439_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_438_F"))
		i12 =  (i12 & 1048575)
		i12 =  (i12 | i14)
		i12 =  ((i12==0) ? 1 : 2)
	__asm(lbl("___vfprintf__XprivateX__BB59_439_F"))
		i11 = i12
		__asm(push(i11>3), iftrue, target("___vfprintf__XprivateX__BB59_444_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_440_F"))
		__asm(push(i11==1), iftrue, target("___vfprintf__XprivateX__BB59_455_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_441_F"))
		__asm(push(i11==2), iftrue, target("___vfprintf__XprivateX__BB59_442_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_459_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_442_F"))
		i11 =  (4)
		__asm(push(i11), push((mstate.ebp+-36)), op(0x3c))
		mstate.esp -= 28
		i11 =  ((mstate.ebp+-1740))
		i12 =  ((mstate.ebp+-1744))
		i14 =  ((mstate.ebp+-36))
		__asm(push(i19), push(mstate.esp), op(0x3c))
		i19 =  ((__xasm<int>(push((mstate.ebp+-2169)), op(0x37))))
		__asm(push(i19), push((mstate.esp+4)), op(0x3c))
		__asm(push(i14), push((mstate.esp+8)), op(0x3c))
		__asm(push(i16), push((mstate.esp+12)), op(0x3c))
		i16 =  ((__xasm<int>(push((mstate.ebp+-2466)), op(0x37))))
		__asm(push(i16), push((mstate.esp+16)), op(0x3c))
		__asm(push(i12), push((mstate.esp+20)), op(0x3c))
		__asm(push(i11), push((mstate.esp+24)), op(0x3c))
		state = 25
		mstate.esp -= 4;FSM___gdtoa.start()
		return
	__asm(lbl("___vfprintf_state25"))
		i12 = mstate.eax
		mstate.esp += 28
		i16 =  ((__xasm<int>(push((mstate.ebp+-1744)), op(0x37))))
		__asm(push(i16==-32768), iftrue, target("___vfprintf__XprivateX__BB59_458_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_443_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_443_F"))
		i19 = i16
		i17 = i3
		i14 = i12
		i3 =  ((__xasm<int>(push((mstate.ebp+-2466)), op(0x37))))
		i11 = i3
		i3 =  ((__xasm<int>(push((mstate.ebp+-2385)), op(0x37))))
		i16 = i3
		i3 =  ((__xasm<int>(push((mstate.ebp+-2475)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_849_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_444_F"))
		__asm(push(i11==16), iftrue, target("___vfprintf__XprivateX__BB59_449_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_445_F"))
		__asm(push(i11==8), iftrue, target("___vfprintf__XprivateX__BB59_452_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_446_F"))
		__asm(push(i11!=4), iftrue, target("___vfprintf__XprivateX__BB59_459_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_447_F"))
		i11 =  (1)
		__asm(push(i11), push((mstate.ebp+-36)), op(0x3c))
		mstate.esp -= 28
		i11 =  ((mstate.ebp+-1740))
		i12 =  ((mstate.ebp+-1744))
		i14 =  ((mstate.ebp+-36))
		__asm(push(i19), push(mstate.esp), op(0x3c))
		i19 =  ((__xasm<int>(push((mstate.ebp+-2169)), op(0x37))))
		__asm(push(i19), push((mstate.esp+4)), op(0x3c))
		__asm(push(i14), push((mstate.esp+8)), op(0x3c))
		__asm(push(i16), push((mstate.esp+12)), op(0x3c))
		i16 =  ((__xasm<int>(push((mstate.ebp+-2466)), op(0x37))))
		__asm(push(i16), push((mstate.esp+16)), op(0x3c))
		__asm(push(i12), push((mstate.esp+20)), op(0x3c))
		__asm(push(i11), push((mstate.esp+24)), op(0x3c))
		state = 26
		mstate.esp -= 4;FSM___gdtoa.start()
		return
	__asm(lbl("___vfprintf_state26"))
		i12 = mstate.eax
		mstate.esp += 28
		i16 =  ((__xasm<int>(push((mstate.ebp+-1744)), op(0x37))))
		__asm(push(i16==-32768), iftrue, target("___vfprintf__XprivateX__BB59_460_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_448_F"))
		i19 = i16
		i17 = i3
		i14 = i12
		i3 =  ((__xasm<int>(push((mstate.ebp+-2466)), op(0x37))))
		i11 = i3
		i3 =  ((__xasm<int>(push((mstate.ebp+-2385)), op(0x37))))
		i16 = i3
		i3 =  ((__xasm<int>(push((mstate.ebp+-2475)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_849_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_449_F"))
		i11 =  (0)
		__asm(push(i11), push((mstate.ebp+-36)), op(0x3c))
		mstate.esp -= 28
		i11 =  ((mstate.ebp+-1740))
		i12 =  ((mstate.ebp+-1744))
		i14 =  ((mstate.ebp+-36))
		__asm(push(i19), push(mstate.esp), op(0x3c))
		i19 =  ((__xasm<int>(push((mstate.ebp+-2169)), op(0x37))))
		__asm(push(i19), push((mstate.esp+4)), op(0x3c))
		__asm(push(i14), push((mstate.esp+8)), op(0x3c))
		__asm(push(i16), push((mstate.esp+12)), op(0x3c))
		i16 =  ((__xasm<int>(push((mstate.ebp+-2466)), op(0x37))))
		__asm(push(i16), push((mstate.esp+16)), op(0x3c))
		__asm(push(i12), push((mstate.esp+20)), op(0x3c))
		__asm(push(i11), push((mstate.esp+24)), op(0x3c))
		state = 27
		mstate.esp -= 4;FSM___gdtoa.start()
		return
	__asm(lbl("___vfprintf_state27"))
		i12 = mstate.eax
		mstate.esp += 28
		i16 =  ((__xasm<int>(push((mstate.ebp+-1744)), op(0x37))))
		__asm(push(i16==-32768), iftrue, target("___vfprintf__XprivateX__BB59_451_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_450_F"))
		i19 = i16
		i17 = i3
		i14 = i12
		i3 =  ((__xasm<int>(push((mstate.ebp+-2466)), op(0x37))))
		i11 = i3
		i3 =  ((__xasm<int>(push((mstate.ebp+-2385)), op(0x37))))
		i16 = i3
		i3 =  ((__xasm<int>(push((mstate.ebp+-2475)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_849_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_451_F"))
		i16 = i12
		__asm(jump, target("___vfprintf__XprivateX__BB59_461_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_452_F"))
		i11 =  (2)
		__asm(push(i11), push((mstate.ebp+-36)), op(0x3c))
		mstate.esp -= 28
		i11 =  ((mstate.ebp+-1740))
		i12 =  ((mstate.ebp+-1744))
		i14 =  ((mstate.ebp+-36))
		__asm(push(i19), push(mstate.esp), op(0x3c))
		i19 =  ((__xasm<int>(push((mstate.ebp+-2169)), op(0x37))))
		__asm(push(i19), push((mstate.esp+4)), op(0x3c))
		__asm(push(i14), push((mstate.esp+8)), op(0x3c))
		__asm(push(i16), push((mstate.esp+12)), op(0x3c))
		i16 =  ((__xasm<int>(push((mstate.ebp+-2466)), op(0x37))))
		__asm(push(i16), push((mstate.esp+16)), op(0x3c))
		__asm(push(i12), push((mstate.esp+20)), op(0x3c))
		__asm(push(i11), push((mstate.esp+24)), op(0x3c))
		state = 28
		mstate.esp -= 4;FSM___gdtoa.start()
		return
	__asm(lbl("___vfprintf_state28"))
		i12 = mstate.eax
		mstate.esp += 28
		i16 =  ((__xasm<int>(push((mstate.ebp+-1744)), op(0x37))))
		__asm(push(i16==-32768), iftrue, target("___vfprintf__XprivateX__BB59_454_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_453_F"))
		i19 = i16
		i17 = i3
		i14 = i12
		i3 =  ((__xasm<int>(push((mstate.ebp+-2466)), op(0x37))))
		i11 = i3
		i3 =  ((__xasm<int>(push((mstate.ebp+-2385)), op(0x37))))
		i16 = i3
		i3 =  ((__xasm<int>(push((mstate.ebp+-2475)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_849_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_454_F"))
		i16 = i12
		__asm(jump, target("___vfprintf__XprivateX__BB59_461_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_455_F"))
		i11 =  (3)
		__asm(push(i11), push((mstate.ebp+-36)), op(0x3c))
		mstate.esp -= 28
		i11 =  ((mstate.ebp+-1740))
		i12 =  ((mstate.ebp+-1744))
		i14 =  ((mstate.ebp+-36))
		__asm(push(i19), push(mstate.esp), op(0x3c))
		i19 =  ((__xasm<int>(push((mstate.ebp+-2169)), op(0x37))))
		__asm(push(i19), push((mstate.esp+4)), op(0x3c))
		__asm(push(i14), push((mstate.esp+8)), op(0x3c))
		__asm(push(i16), push((mstate.esp+12)), op(0x3c))
		i16 =  ((__xasm<int>(push((mstate.ebp+-2466)), op(0x37))))
		__asm(push(i16), push((mstate.esp+16)), op(0x3c))
		__asm(push(i12), push((mstate.esp+20)), op(0x3c))
		__asm(push(i11), push((mstate.esp+24)), op(0x3c))
		state = 29
		mstate.esp -= 4;FSM___gdtoa.start()
		return
	__asm(lbl("___vfprintf_state29"))
		i12 = mstate.eax
		mstate.esp += 28
		i16 =  ((__xasm<int>(push((mstate.ebp+-1744)), op(0x37))))
		__asm(push(i16==-32768), iftrue, target("___vfprintf__XprivateX__BB59_457_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_456_F"))
		i19 = i16
		i17 = i3
		i14 = i12
		i3 =  ((__xasm<int>(push((mstate.ebp+-2466)), op(0x37))))
		i11 = i3
		i3 =  ((__xasm<int>(push((mstate.ebp+-2385)), op(0x37))))
		i16 = i3
		i3 =  ((__xasm<int>(push((mstate.ebp+-2475)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_849_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_457_F"))
		i16 = i12
		__asm(jump, target("___vfprintf__XprivateX__BB59_461_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_458_F"))
		i16 = i12
		__asm(jump, target("___vfprintf__XprivateX__BB59_461_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_459_F"))
		state = 30
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("___vfprintf_state30"))
	__asm(lbl("___vfprintf__XprivateX__BB59_460_F"))
		i16 = i12
		__asm(jump, target("___vfprintf__XprivateX__BB59_461_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_461_F"))
		i12 = i16
		i11 =  (2147483647)
		__asm(push(i11), push((mstate.ebp+-1744)), op(0x3c))
		i19 = i11
		i17 = i3
		i14 = i12
		i3 =  ((__xasm<int>(push((mstate.ebp+-2466)), op(0x37))))
		i11 = i3
		i3 =  ((__xasm<int>(push((mstate.ebp+-2385)), op(0x37))))
		i16 = i3
		i3 =  ((__xasm<int>(push((mstate.ebp+-2475)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_849_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_462_F"))
		__asm(push(i3==0), iftrue, target("___vfprintf__XprivateX__BB59_464_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_463_F"))
		i11 =  (i9 << 3)
		i3 =  (i3 + i11)
		__asm(jump, target("___vfprintf__XprivateX__BB59_465_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_464_F"))
		i11 =  (i1 + 8)
		i3 = i1
		i1 = i11
	__asm(lbl("___vfprintf__XprivateX__BB59_465_F"))
		__asm(push(i1), push((mstate.ebp+-2331)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2385)), op(0x37))))
		i1 =  (i1 & 255)
		i11 =  ((__xasm<int>(push(i3), op(0x37))))
		i3 =  ((__xasm<int>(push((i3+4)), op(0x37))))
		i1 =  ((i1==0) ? 3 : 2)
		i9 =  (i9 + 1)
		__asm(push(i9), push((mstate.ebp+-2340)), op(0x3c))
		__asm(push(i3>-1), iftrue, target("___vfprintf__XprivateX__BB59_472_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_466_F"))
		i9 =  (i3 & 2147483647)
		i3 =  (i3 & 2146435072)
		i3 =  (i3 ^ 2146435072)
		__asm(push(i3==0), iftrue, target("___vfprintf__XprivateX__BB59_471_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_467_F"))
		i3 =  (1)
		i12 = i3
		i3 = i9
		__asm(jump, target("___vfprintf__XprivateX__BB59_468_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_468_F"), lbl("___vfprintf__XprivateX__BB59_468_B"), label, lbl("___vfprintf__XprivateX__BB59_468_F")); 
		i9 = i12
		__asm(push(i9), push((mstate.ebp+-2349)), op(0x3c))
		i9 = i11
		__asm(push(i9), push((mstate.ebp+-2421)), op(0x3c))
		f0 =  (0)
		__asm(push(i9), push((mstate.ebp+-1784)), op(0x3c))
		__asm(push(i3), push((mstate.ebp+-1780)), op(0x3c))
		f1 =  ((__xasm<Number>(push((mstate.ebp+-1784)), op(0x39))))
		__asm(push(f1!=f0), iftrue, target("___vfprintf__XprivateX__BB59_499_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_469_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_469_F"))
		i3 =  (1)
		__asm(push(i3), push((mstate.ebp+-1744)), op(0x3c))
		i3 =  ((__xasm<int>(push(_freelist), op(0x37))))
		__asm(push(i3==0), iftrue, target("___vfprintf__XprivateX__BB59_495_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_470_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_470_F"))
		i1 =  ((__xasm<int>(push(i3), op(0x37))))
		__asm(push(i1), push(_freelist), op(0x3c))
		__asm(jump, target("___vfprintf__XprivateX__BB59_498_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_471_F"))
		i3 =  (1)
		i1 = i3
		i3 = i9
		__asm(jump, target("___vfprintf__XprivateX__BB59_475_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_472_F"))
		i9 =  (i3 & 2146435072)
		i9 =  (i9 ^ 2146435072)
		__asm(push(i9==0), iftrue, target("___vfprintf__XprivateX__BB59_474_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_473_F"))
		i9 =  (0)
		i12 = i9
		__asm(jump, target("___vfprintf__XprivateX__BB59_468_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_474_F"))
		i1 =  (0)
	__asm(lbl("___vfprintf__XprivateX__BB59_475_F"))
		i9 = i11
		i11 =  (9999)
		__asm(push(i11), push((mstate.ebp+-1744)), op(0x3c))
		__asm(push(i9!=0), iftrue, target("___vfprintf__XprivateX__BB59_486_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_476_F"))
		i3 =  (i3 & 1048575)
		__asm(push(i3!=0), iftrue, target("___vfprintf__XprivateX__BB59_486_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_477_F"))
		i3 =  ((__xasm<int>(push(_freelist), op(0x37))))
		__asm(push(i3==0), iftrue, target("___vfprintf__XprivateX__BB59_479_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_478_F"))
		i9 =  ((__xasm<int>(push(i3), op(0x37))))
		__asm(push(i9), push(_freelist), op(0x3c))
		__asm(jump, target("___vfprintf__XprivateX__BB59_482_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_479_F"))
		i3 =  (_private_mem)
		i9 =  ((__xasm<int>(push(_pmem_next), op(0x37))))
		i3 =  (i9 - i3)
		i3 =  (i3 >> 3)
		i3 =  (i3 + 3)
		__asm(push(uint(i3)>uint(288)), iftrue, target("___vfprintf__XprivateX__BB59_481_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_480_F"))
		i3 =  (0)
		i11 =  (i9 + 24)
		__asm(push(i11), push(_pmem_next), op(0x3c))
		__asm(push(i3), push((i9+4)), op(0x3c))
		i3 =  (1)
		__asm(push(i3), push((i9+8)), op(0x3c))
		i3 = i9
		__asm(jump, target("___vfprintf__XprivateX__BB59_482_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_481_F"))
		i3 =  (24)
		mstate.esp -= 4
		__asm(push(i3), push(mstate.esp), op(0x3c))
		state = 31
		mstate.esp -= 4;FSM_malloc.start()
		return
	__asm(lbl("___vfprintf_state31"))
		i3 = mstate.eax
		mstate.esp += 4
		i9 =  (0)
		__asm(push(i9), push((i3+4)), op(0x3c))
		i9 =  (1)
		__asm(push(i9), push((i3+8)), op(0x3c))
	__asm(lbl("___vfprintf__XprivateX__BB59_482_F"))
		i9 =  (0)
		__asm(push(i9), push((i3+16)), op(0x3c))
		__asm(push(i9), push((i3+12)), op(0x3c))
		__asm(push(i9), push(i3), op(0x3c))
		i11 =  (73)
		__asm(push(i11), push((i3+4)), op(0x3a))
		i3 =  (i3 + 4)
		i11 =  (__2E_str159)
		i12 = i3
	__asm(jump, target("___vfprintf__XprivateX__BB59_483_F"), lbl("___vfprintf__XprivateX__BB59_483_B"), label, lbl("___vfprintf__XprivateX__BB59_483_F")); 
		i14 =  (i11 + i9)
		i14 =  ((__xasm<int>(push((i14+1)), op(0x35))))
		i16 =  (i3 + i9)
		__asm(push(i14), push((i16+1)), op(0x3a))
		i9 =  (i9 + 1)
		__asm(push(i14==0), iftrue, target("___vfprintf__XprivateX__BB59_485_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_484_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_483_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_485_F"))
		i3 =  (i3 + i9)
		__asm(push(i3), push((mstate.ebp+-1740)), op(0x3c))
		i3 = i1
		i1 = i12
		__asm(jump, target("___vfprintf__XprivateX__BB59_846_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_486_F"))
		i3 =  ((__xasm<int>(push(_freelist), op(0x37))))
		__asm(push(i3==0), iftrue, target("___vfprintf__XprivateX__BB59_488_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_487_F"))
		i9 =  ((__xasm<int>(push(i3), op(0x37))))
		__asm(push(i9), push(_freelist), op(0x3c))
		__asm(jump, target("___vfprintf__XprivateX__BB59_491_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_488_F"))
		i3 =  (_private_mem)
		i9 =  ((__xasm<int>(push(_pmem_next), op(0x37))))
		i3 =  (i9 - i3)
		i3 =  (i3 >> 3)
		i3 =  (i3 + 3)
		__asm(push(uint(i3)>uint(288)), iftrue, target("___vfprintf__XprivateX__BB59_490_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_489_F"))
		i3 =  (0)
		i11 =  (i9 + 24)
		__asm(push(i11), push(_pmem_next), op(0x3c))
		__asm(push(i3), push((i9+4)), op(0x3c))
		i3 =  (1)
		__asm(push(i3), push((i9+8)), op(0x3c))
		i3 = i9
		__asm(jump, target("___vfprintf__XprivateX__BB59_491_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_490_F"))
		i3 =  (24)
		mstate.esp -= 4
		__asm(push(i3), push(mstate.esp), op(0x3c))
		state = 32
		mstate.esp -= 4;FSM_malloc.start()
		return
	__asm(lbl("___vfprintf_state32"))
		i3 = mstate.eax
		mstate.esp += 4
		i9 =  (0)
		__asm(push(i9), push((i3+4)), op(0x3c))
		i9 =  (1)
		__asm(push(i9), push((i3+8)), op(0x3c))
	__asm(lbl("___vfprintf__XprivateX__BB59_491_F"))
		i9 =  (0)
		__asm(push(i9), push((i3+16)), op(0x3c))
		__asm(push(i9), push((i3+12)), op(0x3c))
		__asm(push(i9), push(i3), op(0x3c))
		i11 =  (78)
		__asm(push(i11), push((i3+4)), op(0x3a))
		i3 =  (i3 + 4)
		i11 =  (__2E_str260)
		i12 = i3
	__asm(jump, target("___vfprintf__XprivateX__BB59_492_F"), lbl("___vfprintf__XprivateX__BB59_492_B"), label, lbl("___vfprintf__XprivateX__BB59_492_F")); 
		i14 =  (i11 + i9)
		i14 =  ((__xasm<int>(push((i14+1)), op(0x35))))
		i16 =  (i3 + i9)
		__asm(push(i14), push((i16+1)), op(0x3a))
		i9 =  (i9 + 1)
		__asm(push(i14==0), iftrue, target("___vfprintf__XprivateX__BB59_494_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_493_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_492_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_494_F"))
		i3 =  (i3 + i9)
		__asm(push(i3), push((mstate.ebp+-1740)), op(0x3c))
		i3 = i1
		i1 = i12
		__asm(jump, target("___vfprintf__XprivateX__BB59_846_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_495_F"))
		i3 =  (_private_mem)
		i1 =  ((__xasm<int>(push(_pmem_next), op(0x37))))
		i3 =  (i1 - i3)
		i3 =  (i3 >> 3)
		i3 =  (i3 + 3)
		__asm(push(uint(i3)>uint(288)), iftrue, target("___vfprintf__XprivateX__BB59_497_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_496_F"))
		i3 =  (0)
		i9 =  (i1 + 24)
		__asm(push(i9), push(_pmem_next), op(0x3c))
		__asm(push(i3), push((i1+4)), op(0x3c))
		i3 =  (1)
		__asm(push(i3), push((i1+8)), op(0x3c))
		i3 = i1
		__asm(jump, target("___vfprintf__XprivateX__BB59_498_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_497_F"))
		i3 =  (24)
		mstate.esp -= 4
		__asm(push(i3), push(mstate.esp), op(0x3c))
		state = 33
		mstate.esp -= 4;FSM_malloc.start()
		return
	__asm(lbl("___vfprintf_state33"))
		i3 = mstate.eax
		mstate.esp += 4
		i1 =  (0)
		__asm(push(i1), push((i3+4)), op(0x3c))
		i1 =  (1)
		__asm(push(i1), push((i3+8)), op(0x3c))
	__asm(lbl("___vfprintf__XprivateX__BB59_498_F"))
		i1 =  (0)
		__asm(push(i1), push((i3+16)), op(0x3c))
		__asm(push(i1), push((i3+12)), op(0x3c))
		__asm(push(i1), push(i3), op(0x3c))
		i9 =  (48)
		__asm(push(i9), push((i3+4)), op(0x3a))
		__asm(push(i1), push((i3+5)), op(0x3a))
		i1 =  (i3 + 5)
		__asm(push(i1), push((mstate.ebp+-1740)), op(0x3c))
		i1 =  (i3 + 4)
		i3 =  ((__xasm<int>(push((mstate.ebp+-2349)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_846_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_499_F"))
		i9 =  ((mstate.ebp+-8))
		mstate.esp -= 16
		i11 =  ((mstate.ebp+-4))
		__asm(push(f1), push(mstate.esp), op(0x3e))
		__asm(push(i11), push((mstate.esp+8)), op(0x3c))
		__asm(push(i9), push((mstate.esp+12)), op(0x3c))
		i9 =  (i3 >>> 20)
		state = 34
		mstate.esp -= 4;FSM___d2b_D2A.start()
		return
	__asm(lbl("___vfprintf_state34"))
		i11 = mstate.eax
		mstate.esp += 16
		i9 =  (i9 & 2047)
		i12 = i3
		__asm(push(i9==0), iftrue, target("___vfprintf__XprivateX__BB59_501_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_500_F"))
		i12 =  (0)
		i14 =  (i3 | 1072693248)
		i14 =  (i14 & 1073741823)
		i9 =  (i9 + -1023)
		i16 = i12
		i19 =  ((__xasm<int>(push((mstate.ebp+-2421)), op(0x37))))
		i17 = i3
		__asm(jump, target("___vfprintf__XprivateX__BB59_504_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_501_F"))
		i9 =  ((__xasm<int>(push((mstate.ebp+-8)), op(0x37))))
		i14 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		i9 =  (i14 + i9)
		i16 =  (i9 + -1)
		i14 =  (i9 + 1074)
		__asm(push(i14<33), iftrue, target("___vfprintf__XprivateX__BB59_503_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_502_F"))
		i20 =  (1)
		i14 =  (i9 + 1042)
		i9 =  (-1010 - i9)
		i19 =  ((__xasm<int>(push((mstate.ebp+-2421)), op(0x37))))
		i14 =  (i19 >>> i14)
		i9 =  (i12 << i9)
		i9 =  (i9 | i14)
		f0 =  (Number(uint(i9)))
		__asm(push(f0), push((mstate.ebp+-1792)), op(0x3e))
		i9 =  ((__xasm<int>(push((mstate.ebp+-1788)), op(0x37))))
		i12 =  ((__xasm<int>(push((mstate.ebp+-1792)), op(0x37))))
		i14 =  (i9 + -32505856)
		i21 =  (0)
		i19 = i12
		i17 = i9
		i12 = i21
		i9 = i16
		i16 = i20
		__asm(jump, target("___vfprintf__XprivateX__BB59_504_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_503_F"))
		i20 =  (1)
		i9 =  (-1042 - i9)
		i12 =  ((__xasm<int>(push((mstate.ebp+-2421)), op(0x37))))
		i9 =  (i12 << i9)
		f0 =  (Number(uint(i9)))
		__asm(push(f0), push((mstate.ebp+-1800)), op(0x3e))
		i9 =  ((__xasm<int>(push((mstate.ebp+-1796)), op(0x37))))
		i12 =  ((__xasm<int>(push((mstate.ebp+-1800)), op(0x37))))
		i14 =  (i9 + -32505856)
		i21 =  (0)
		i19 = i12
		i17 = i9
		i12 = i21
		i9 = i16
		i16 = i20
	__asm(lbl("___vfprintf__XprivateX__BB59_504_F"))
		__asm(push(i16), push((mstate.ebp+-2358)), op(0x3c))
		f0 =  (0)
		i12 =  (i19 | i12)
		__asm(push(i12), push((mstate.ebp+-1808)), op(0x3c))
		__asm(push(i14), push((mstate.ebp+-1804)), op(0x3c))
		f2 =  ((__xasm<Number>(push((mstate.ebp+-1808)), op(0x39))))
		f2 =  (f2 + -1.5)
		f3 =  (Number(i9))
		f2 =  (f2 * 0.28953)
		f3 =  (f3 * 0.30103)
		f2 =  (f2 + 0.176091)
		f2 =  (f2 + f3)
		i12 =  (int(f2))
		__asm(push(f2<f0), iftrue, target("___vfprintf__XprivateX__BB59_506_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_505_F"), lbl("___vfprintf__XprivateX__BB59_505_B"), label, lbl("___vfprintf__XprivateX__BB59_505_F")); 
		__asm(jump, target("___vfprintf__XprivateX__BB59_508_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_506_F"))
		f0 =  (Number(i12))
		__asm(push(f0==f2), iftrue, target("___vfprintf__XprivateX__BB59_505_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_507_F"))
		i12 =  (i12 + -1)
	__asm(lbl("___vfprintf__XprivateX__BB59_508_F"))
		__asm(push(uint(i12)<uint(23)), iftrue, target("___vfprintf__XprivateX__BB59_510_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_509_F"))
		i14 =  (1)
		__asm(jump, target("___vfprintf__XprivateX__BB59_513_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_510_F"))
		i14 =  (___tens_D2A)
		i16 =  (i12 << 3)
		i14 =  (i14 + i16)
		f0 =  ((__xasm<Number>(push(i14), op(0x39))))
		__asm(push(f1<f0), iftrue, target("___vfprintf__XprivateX__BB59_512_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_511_F"))
		i14 =  (0)
		__asm(jump, target("___vfprintf__XprivateX__BB59_513_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_512_F"))
		i14 =  (0)
		i12 =  (i12 + -1)
	__asm(lbl("___vfprintf__XprivateX__BB59_513_F"))
		__asm(push(i14), push((mstate.ebp+-2376)), op(0x3c))
		i14 =  ((__xasm<int>(push((mstate.ebp+-8)), op(0x37))))
		i14 =  (i14 - i9)
		i16 =  (i14 + -1)
		i14 =  (1 - i14)
		i19 =  ((i16>-1) ? i16 : 0)
		i14 =  ((i16>-1) ? 0 : i14)
		__asm(push(i12<0), iftrue, target("___vfprintf__XprivateX__BB59_527_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_514_F"))
		i19 =  (i19 + i12)
		__asm(push(i1>2), iftrue, target("___vfprintf__XprivateX__BB59_519_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_515_F"))
		__asm(push(uint(i1)<uint(2)), iftrue, target("___vfprintf__XprivateX__BB59_539_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_516_F"))
		__asm(push(i1==2), iftrue, target("___vfprintf__XprivateX__BB59_517_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_526_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_517_F"))
		i9 =  (0)
		i16 = i12
		__asm(jump, target("___vfprintf__XprivateX__BB59_518_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_518_F"), lbl("___vfprintf__XprivateX__BB59_518_B"), label, lbl("___vfprintf__XprivateX__BB59_518_F")); 
		i20 =  (0)
		i17 = i16
		i16 = i9
		i9 = i20
		__asm(jump, target("___vfprintf__XprivateX__BB59_524_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_519_F"))
		__asm(push(i1==3), iftrue, target("___vfprintf__XprivateX__BB59_542_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_520_F"))
		__asm(push(i1==4), iftrue, target("___vfprintf__XprivateX__BB59_523_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_521_F"))
		__asm(push(i1!=5), iftrue, target("___vfprintf__XprivateX__BB59_526_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_522_F"))
		i9 =  (1)
		i16 =  (0)
		i17 = i12
		__asm(jump, target("___vfprintf__XprivateX__BB59_544_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_523_F"))
		i9 =  (1)
		i16 =  (0)
		i17 = i12
		__asm(jump, target("___vfprintf__XprivateX__BB59_524_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_524_F"), lbl("___vfprintf__XprivateX__BB59_524_B"), label, lbl("___vfprintf__XprivateX__BB59_524_F")); 
		i23 = i9
		i9 =  ((__xasm<int>(push((mstate.ebp+-2466)), op(0x37))))
		__asm(push(i9<1), iftrue, target("___vfprintf__XprivateX__BB59_541_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_525_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_525_F"))
		i21 = i17
		i20 = i16
		i9 =  ((__xasm<int>(push((mstate.ebp+-2466)), op(0x37))))
		i22 = i9
		i17 = i9
		i16 = i23
		i23 = i9
		__asm(jump, target("___vfprintf__XprivateX__BB59_547_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_526_F"))
		i16 =  (1)
		//IMPLICIT_DEF i17 = 
		i20 =  (0)
		i21 = i12
		i22 = i17
		i23 =  ((__xasm<int>(push((mstate.ebp+-2466)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_547_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_527_F"))
		i20 =  (0 - i12)
		i14 =  (i14 - i12)
		__asm(push(i1>2), iftrue, target("___vfprintf__XprivateX__BB59_531_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_528_F"))
		__asm(push(uint(i1)<uint(2)), iftrue, target("___vfprintf__XprivateX__BB59_537_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_529_F"))
		__asm(push(i1==2), iftrue, target("___vfprintf__XprivateX__BB59_530_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_538_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_530_F"))
		i9 =  (0)
		i16 = i9
		i9 = i20
		__asm(jump, target("___vfprintf__XprivateX__BB59_518_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_531_F"))
		__asm(push(i1==3), iftrue, target("___vfprintf__XprivateX__BB59_536_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_532_F"))
		__asm(push(i1==4), iftrue, target("___vfprintf__XprivateX__BB59_535_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_533_F"))
		__asm(push(i1!=5), iftrue, target("___vfprintf__XprivateX__BB59_538_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_534_F"))
		i9 =  (1)
		i16 =  (0)
		i17 = i16
		i16 = i20
		__asm(jump, target("___vfprintf__XprivateX__BB59_544_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_535_F"))
		i9 =  (1)
		i16 =  (0)
		i17 = i16
		i16 = i20
		__asm(jump, target("___vfprintf__XprivateX__BB59_524_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_536_F"))
		i9 =  (0)
		i16 = i9
		i9 = i20
		__asm(jump, target("___vfprintf__XprivateX__BB59_543_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_537_F"))
		i9 =  (0)
		i16 = i9
		i9 = i20
		__asm(jump, target("___vfprintf__XprivateX__BB59_540_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_538_F"))
		i16 =  (1)
		//IMPLICIT_DEF i17 = 
		i21 =  (0)
		i22 = i17
		i23 =  ((__xasm<int>(push((mstate.ebp+-2466)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_547_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_539_F"))
		i9 =  (0)
		i16 = i12
		__asm(jump, target("___vfprintf__XprivateX__BB59_540_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_540_F"))
		i23 =  (0)
		i24 =  (1)
		i25 =  (18)
		i17 =  (-1)
		i21 = i16
		i20 = i9
		i22 = i17
		i9 = i25
		i16 = i24
		__asm(jump, target("___vfprintf__XprivateX__BB59_547_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_541_F"))
		i24 =  (1)
		i21 = i17
		i20 = i16
		i22 = i24
		i17 = i24
		i9 = i24
		i16 = i23
		i23 = i24
		__asm(jump, target("___vfprintf__XprivateX__BB59_547_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_542_F"))
		i9 =  (0)
		i16 = i12
		__asm(jump, target("___vfprintf__XprivateX__BB59_543_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_543_F"))
		i20 =  (0)
		i17 = i16
		i16 = i9
		i9 = i20
	__asm(lbl("___vfprintf__XprivateX__BB59_544_F"))
		i23 = i9
		i9 =  ((__xasm<int>(push((mstate.ebp+-2466)), op(0x37))))
		i9 =  (i12 + i9)
		i24 =  (i9 + 1)
		__asm(push(i24<1), iftrue, target("___vfprintf__XprivateX__BB59_546_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_545_F"))
		i21 = i17
		i20 = i16
		i22 = i24
		i17 = i9
		i9 = i24
		i16 = i23
		i23 =  ((__xasm<int>(push((mstate.ebp+-2466)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_547_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_546_F"))
		i25 =  (1)
		i21 = i17
		i20 = i16
		i22 = i24
		i17 = i9
		i9 = i25
		i16 = i23
		i23 =  ((__xasm<int>(push((mstate.ebp+-2466)), op(0x37))))
	__asm(lbl("___vfprintf__XprivateX__BB59_547_F"))
		__asm(push(i21), push((mstate.ebp+-2412)), op(0x3c))
		i21 = i22
		__asm(push(i17), push((mstate.ebp+-2403)), op(0x3c))
		__asm(push(i16), push((mstate.ebp+-2430)), op(0x3c))
		i16 = i23
		__asm(push(i16), push((mstate.ebp+-2394)), op(0x3c))
		__asm(push(uint(i9)<uint(20)), iftrue, target("___vfprintf__XprivateX__BB59_1470_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_548_F"))
		i16 =  (4)
		i17 =  (0)
		__asm(jump, target("___vfprintf__XprivateX__BB59_549_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_549_F"), lbl("___vfprintf__XprivateX__BB59_549_B"), label, lbl("___vfprintf__XprivateX__BB59_549_F")); 
		i16 =  (i16 << 1)
		i17 =  (i17 + 1)
		i22 =  (i16 + 16)
		__asm(push(uint(i22)>uint(i9)), iftrue, target("___vfprintf__XprivateX__BB59_551_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_550_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_549_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_551_F"))
		i9 = i17
	__asm(jump, target("___vfprintf__XprivateX__BB59_552_F"), lbl("___vfprintf__XprivateX__BB59_552_B"), label, lbl("___vfprintf__XprivateX__BB59_552_F")); 
		mstate.esp -= 4
		__asm(push(i9), push(mstate.esp), op(0x3c))
		state = 35
		mstate.esp -= 4;FSM___Balloc_D2A.start()
		return
	__asm(lbl("___vfprintf_state35"))
		i16 = mstate.eax
		mstate.esp += 4
		__asm(push(i9), push(i16), op(0x3c))
		i9 =  (i16 + 4)
		__asm(push(i9), push((mstate.ebp+-2493)), op(0x3c))
		__asm(push(uint(i21)>uint(14)), iftrue, target("___vfprintf__XprivateX__BB59_606_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_553_F"))
		__asm(push(i12<1), iftrue, target("___vfprintf__XprivateX__BB59_568_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_554_F"))
		i16 =  (___tens_D2A)
		i17 =  (i12 & 15)
		i17 =  (i17 << 3)
		i16 =  (i16 + i17)
		f0 =  ((__xasm<Number>(push(i16), op(0x39))))
		i16 =  (i12 >> 4)
		i17 =  (i16 & 16)
		__asm(push(i17!=0), iftrue, target("___vfprintf__XprivateX__BB59_556_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_555_F"))
		i17 =  (0)
		i22 =  (2)
		i23 =  ((__xasm<int>(push((mstate.ebp+-2421)), op(0x37))))
		i24 = i3
		__asm(jump, target("___vfprintf__XprivateX__BB59_562_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_556_F"))
		f2 =  (f1 / 1e+256)
		__asm(push(f2), push((mstate.ebp+-1816)), op(0x3e))
		i17 =  ((__xasm<int>(push((mstate.ebp+-1816)), op(0x37))))
		i22 =  ((__xasm<int>(push((mstate.ebp+-1812)), op(0x37))))
		i16 =  (i16 & 15)
		__asm(push(i16==0), iftrue, target("___vfprintf__XprivateX__BB59_1471_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_557_F"))
		i23 =  (0)
		i24 =  (3)
		__asm(jump, target("___vfprintf__XprivateX__BB59_558_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_558_F"), lbl("___vfprintf__XprivateX__BB59_558_B"), label, lbl("___vfprintf__XprivateX__BB59_558_F")); 
		i25 =  (i16 & 1)
		__asm(push(i25!=0), iftrue, target("___vfprintf__XprivateX__BB59_560_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_559_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_561_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_560_F"))
		i25 =  (___bigtens_D2A)
		i26 =  (i23 << 3)
		i25 =  (i25 + i26)
		f2 =  ((__xasm<Number>(push(i25), op(0x39))))
		f0 =  (f2 * f0)
		i24 =  (i24 + 1)
	__asm(lbl("___vfprintf__XprivateX__BB59_561_F"))
		i25 = i24
		i26 =  (i23 + 1)
		i16 =  (i16 >> 1)
		i23 = i17
		i24 = i22
		i22 = i25
		i17 = i26
	__asm(lbl("___vfprintf__XprivateX__BB59_562_F"))
		i25 = i22
		i26 = i17
		__asm(push(i16==0), iftrue, target("___vfprintf__XprivateX__BB59_564_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_563_F"))
		i17 = i23
		i22 = i24
		i24 = i25
		i23 = i26
		__asm(jump, target("___vfprintf__XprivateX__BB59_558_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_564_F"))
		i17 = i23
		i22 = i24
		i16 = i25
	__asm(jump, target("___vfprintf__XprivateX__BB59_565_F"), lbl("___vfprintf__XprivateX__BB59_565_B"), label, lbl("___vfprintf__XprivateX__BB59_565_F")); 
		__asm(push(i17), push((mstate.ebp+-1824)), op(0x3c))
		__asm(push(i22), push((mstate.ebp+-1820)), op(0x3c))
		f2 =  ((__xasm<Number>(push((mstate.ebp+-1824)), op(0x39))))
		f0 =  (f2 / f0)
		__asm(push(f0), push((mstate.ebp+-1832)), op(0x3e))
		i17 =  ((__xasm<int>(push((mstate.ebp+-1832)), op(0x37))))
		i22 =  ((__xasm<int>(push((mstate.ebp+-1828)), op(0x37))))
		i23 =  ((__xasm<int>(push((mstate.ebp+-2376)), op(0x37))))
		__asm(push(i23==0), iftrue, target("___vfprintf__XprivateX__BB59_567_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_566_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_580_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_567_F"))
		i23 = i21
		i24 = i12
		__asm(jump, target("___vfprintf__XprivateX__BB59_585_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_568_F"))
		i16 =  (0 - i12)
		__asm(push(i12!=0), iftrue, target("___vfprintf__XprivateX__BB59_570_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_569_F"))
		i16 =  (2)
		i17 =  ((__xasm<int>(push((mstate.ebp+-2421)), op(0x37))))
		i22 = i3
		__asm(jump, target("___vfprintf__XprivateX__BB59_578_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_570_F"))
		i17 =  (___tens_D2A)
		i22 =  (i16 & 15)
		i22 =  (i22 << 3)
		i17 =  (i17 + i22)
		f0 =  ((__xasm<Number>(push(i17), op(0x39))))
		f0 =  (f1 * f0)
		__asm(push(f0), push((mstate.ebp+-1840)), op(0x3e))
		i17 =  ((__xasm<int>(push((mstate.ebp+-1840)), op(0x37))))
		i22 =  ((__xasm<int>(push((mstate.ebp+-1836)), op(0x37))))
		i23 =  (i16 >> 4)
		__asm(push(uint(i16)<uint(16)), iftrue, target("___vfprintf__XprivateX__BB59_1472_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_571_F"))
		i16 =  (___bigtens_D2A)
		i24 =  (2)
		__asm(jump, target("___vfprintf__XprivateX__BB59_572_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_572_F"), lbl("___vfprintf__XprivateX__BB59_572_B"), label, lbl("___vfprintf__XprivateX__BB59_572_F")); 
		i25 = i16
		i26 =  (i23 & 1)
		__asm(push(i26!=0), iftrue, target("___vfprintf__XprivateX__BB59_574_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_573_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_575_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_574_F"))
		__asm(push(i17), push((mstate.ebp+-1848)), op(0x3c))
		__asm(push(i22), push((mstate.ebp+-1844)), op(0x3c))
		f0 =  ((__xasm<Number>(push(i25), op(0x39))))
		f2 =  ((__xasm<Number>(push((mstate.ebp+-1848)), op(0x39))))
		f0 =  (f2 * f0)
		__asm(push(f0), push((mstate.ebp+-1856)), op(0x3e))
		i17 =  ((__xasm<int>(push((mstate.ebp+-1856)), op(0x37))))
		i22 =  ((__xasm<int>(push((mstate.ebp+-1852)), op(0x37))))
		i24 =  (i24 + 1)
	__asm(lbl("___vfprintf__XprivateX__BB59_575_F"))
		i16 =  (i16 + 8)
		i25 =  (i23 >> 1)
		__asm(push(uint(i23)<uint(2)), iftrue, target("___vfprintf__XprivateX__BB59_577_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_576_F"))
		i23 = i25
		__asm(jump, target("___vfprintf__XprivateX__BB59_572_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_577_F"))
		i16 = i24
	__asm(jump, target("___vfprintf__XprivateX__BB59_578_F"), lbl("___vfprintf__XprivateX__BB59_578_B"), label, lbl("___vfprintf__XprivateX__BB59_578_F")); 
		i23 =  ((__xasm<int>(push((mstate.ebp+-2376)), op(0x37))))
		__asm(push(i23==0), iftrue, target("___vfprintf__XprivateX__BB59_1473_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_579_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_580_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_580_F"))
		f0 =  (1)
		__asm(push(i17), push((mstate.ebp+-1864)), op(0x3c))
		__asm(push(i22), push((mstate.ebp+-1860)), op(0x3c))
		f2 =  ((__xasm<Number>(push((mstate.ebp+-1864)), op(0x39))))
		__asm(push(f2>=f0), iftrue, target("___vfprintf__XprivateX__BB59_582_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_581_F"))
		__asm(push(i21>0), iftrue, target("___vfprintf__XprivateX__BB59_583_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_582_F"))
		i23 = i21
		i24 = i12
		__asm(jump, target("___vfprintf__XprivateX__BB59_585_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_583_F"))
		i17 =  ((__xasm<int>(push((mstate.ebp+-2403)), op(0x37))))
		__asm(push(i17<1), iftrue, target("___vfprintf__XprivateX__BB59_606_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_584_F"))
		f0 =  (f2 * 10)
		__asm(push(f0), push((mstate.ebp+-1872)), op(0x3e))
		i17 =  ((__xasm<int>(push((mstate.ebp+-1872)), op(0x37))))
		i22 =  ((__xasm<int>(push((mstate.ebp+-1868)), op(0x37))))
		i16 =  (i16 + 1)
		i24 =  (i12 + -1)
		i23 =  ((__xasm<int>(push((mstate.ebp+-2403)), op(0x37))))
	__asm(jump, target("___vfprintf__XprivateX__BB59_585_F"), lbl("___vfprintf__XprivateX__BB59_585_B"), label, lbl("___vfprintf__XprivateX__BB59_585_F")); 
		__asm(push(i17), push((mstate.ebp+-1880)), op(0x3c))
		__asm(push(i22), push((mstate.ebp+-1876)), op(0x3c))
		f0 =  ((__xasm<Number>(push((mstate.ebp+-1880)), op(0x39))))
		f2 =  (Number(i16))
		f2 =  (f2 * f0)
		f2 =  (f2 + 7)
		__asm(push(f2), push((mstate.ebp+-1888)), op(0x3e))
		i16 =  ((__xasm<int>(push((mstate.ebp+-1884)), op(0x37))))
		i25 =  ((__xasm<int>(push((mstate.ebp+-1888)), op(0x37))))
		i16 =  (i16 + -54525952)
		__asm(push(i23!=0), iftrue, target("___vfprintf__XprivateX__BB59_591_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_586_F"))
		__asm(push(i25), push((mstate.ebp+-1896)), op(0x3c))
		__asm(push(i16), push((mstate.ebp+-1892)), op(0x3c))
		f2 =  ((__xasm<Number>(push((mstate.ebp+-1896)), op(0x39))))
		f0 =  (f0 + -5)
		__asm(push(f0<=f2), iftrue, target("___vfprintf__XprivateX__BB59_589_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_587_F"))
		i3 =  (0)
		i1 = i24
		i9 = i11
		i11 = i3
		__asm(jump, target("___vfprintf__XprivateX__BB59_588_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_588_F"), lbl("___vfprintf__XprivateX__BB59_588_B"), label, lbl("___vfprintf__XprivateX__BB59_588_F")); 
		i12 =  (49)
		i14 =  ((__xasm<int>(push((mstate.ebp+-2493)), op(0x37))))
		__asm(push(i12), push(i14), op(0x3a))
		i12 =  (0)
		i1 =  (i1 + 1)
		i14 =  (i14 + 1)
		i16 = i11
		i11 = i14
		__asm(jump, target("___vfprintf__XprivateX__BB59_829_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_589_F"))
		f2 =  -f2
		__asm(push(f0>=f2), iftrue, target("___vfprintf__XprivateX__BB59_606_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_590_F"), lbl("___vfprintf__XprivateX__BB59_590_B"), label, lbl("___vfprintf__XprivateX__BB59_590_F")); 
		i3 =  (0)
		i1 = i11
		i9 = i3
		__asm(jump, target("___vfprintf__XprivateX__BB59_732_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_591_F"))
		i26 =  ((__xasm<int>(push((mstate.ebp+-2430)), op(0x37))))
		__asm(push(i26==0), iftrue, target("___vfprintf__XprivateX__BB59_597_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_592_F"))
		i26 =  (___tens_D2A)
		i27 =  (i23 << 3)
		__asm(push(i25), push((mstate.ebp+-1904)), op(0x3c))
		__asm(push(i16), push((mstate.ebp+-1900)), op(0x3c))
		i16 =  (i27 + i26)
		f0 =  ((__xasm<Number>(push((i16+-8)), op(0x39))))
		f2 =  ((__xasm<Number>(push((mstate.ebp+-1904)), op(0x39))))
		f0 =  (0.5 / f0)
		i16 =  (0)
		f0 =  (f0 - f2)
	__asm(jump, target("___vfprintf__XprivateX__BB59_593_F"), lbl("___vfprintf__XprivateX__BB59_593_B"), label, lbl("___vfprintf__XprivateX__BB59_593_F")); 
		__asm(push(i17), push((mstate.ebp+-1912)), op(0x3c))
		__asm(push(i22), push((mstate.ebp+-1908)), op(0x3c))
		f2 =  ((__xasm<Number>(push((mstate.ebp+-1912)), op(0x39))))
		i17 =  (int(f2))
		f3 =  (Number(i17))
		i17 =  (i17 + 48)
		i22 =  (i9 + i16)
		__asm(push(i17), push(i22), op(0x3a))
		f2 =  (f2 - f3)
		i17 =  (i16 + 1)
		__asm(push(f2<f0), iftrue, target("___vfprintf__XprivateX__BB59_841_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_594_F"))
		f3 =  (1 - f2)
		__asm(push(f3<f0), iftrue, target("___vfprintf__XprivateX__BB59_621_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_595_F"))
		__asm(push(i17>=i23), iftrue, target("___vfprintf__XprivateX__BB59_606_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_596_F"))
		f2 =  (f2 * 10)
		__asm(push(f2), push((mstate.ebp+-1920)), op(0x3e))
		i17 =  ((__xasm<int>(push((mstate.ebp+-1920)), op(0x37))))
		i22 =  ((__xasm<int>(push((mstate.ebp+-1916)), op(0x37))))
		i16 =  (i16 + 1)
		f0 =  (f0 * 10)
		__asm(jump, target("___vfprintf__XprivateX__BB59_593_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_597_F"))
		i26 =  (___tens_D2A)
		i27 =  (i23 << 3)
		__asm(push(i25), push((mstate.ebp+-1928)), op(0x3c))
		__asm(push(i16), push((mstate.ebp+-1924)), op(0x3c))
		i16 =  (i27 + i26)
		f0 =  ((__xasm<Number>(push((mstate.ebp+-1928)), op(0x39))))
		f2 =  ((__xasm<Number>(push((i16+-8)), op(0x39))))
		i16 =  (0)
		f0 =  (f0 * f2)
	__asm(jump, target("___vfprintf__XprivateX__BB59_598_F"), lbl("___vfprintf__XprivateX__BB59_598_B"), label, lbl("___vfprintf__XprivateX__BB59_598_F")); 
		f2 =  (0)
		__asm(push(i17), push((mstate.ebp+-1936)), op(0x3c))
		__asm(push(i22), push((mstate.ebp+-1932)), op(0x3c))
		f3 =  ((__xasm<Number>(push((mstate.ebp+-1936)), op(0x39))))
		i17 =  (int(f3))
		f4 =  (Number(i17))
		i17 =  (i17 + 48)
		f3 =  (f3 - f4)
		i22 =  (i16 + 1)
		i25 =  (i9 + i16)
		__asm(push(i17), push(i25), op(0x3a))
		i23 =  ((f3==f2) ? i22 : i23)
		__asm(push(i22!=i23), iftrue, target("___vfprintf__XprivateX__BB59_605_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_599_F"))
		i16 =  ((__xasm<int>(push((mstate.ebp+-2493)), op(0x37))))
		i16 =  (i16 + i22)
		f2 =  (f0 + 0.5)
		__asm(push(f3<=f2), iftrue, target("___vfprintf__XprivateX__BB59_601_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_600_F"))
		i3 = i24
		i1 = i16
		__asm(jump, target("___vfprintf__XprivateX__BB59_622_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_601_F"))
		f0 =  (0.5 - f0)
		__asm(push(f3>=f0), iftrue, target("___vfprintf__XprivateX__BB59_606_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_602_F"))
		i3 =  (0)
	__asm(jump, target("___vfprintf__XprivateX__BB59_603_F"), lbl("___vfprintf__XprivateX__BB59_603_B"), label, lbl("___vfprintf__XprivateX__BB59_603_F")); 
		i1 =  (i3 ^ -1)
		i1 =  (i22 + i1)
		i9 =  ((__xasm<int>(push((mstate.ebp+-2493)), op(0x37))))
		i1 =  (i9 + i1)
		i1 =  ((__xasm<int>(push(i1), op(0x35))))
		i3 =  (i3 + 1)
		__asm(push(i1!=48), iftrue, target("___vfprintf__XprivateX__BB59_840_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_604_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_603_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_605_F"))
		f2 =  (f3 * 10)
		__asm(push(f2), push((mstate.ebp+-1944)), op(0x3e))
		i17 =  ((__xasm<int>(push((mstate.ebp+-1944)), op(0x37))))
		i22 =  ((__xasm<int>(push((mstate.ebp+-1940)), op(0x37))))
		i16 =  (i16 + 1)
		__asm(jump, target("___vfprintf__XprivateX__BB59_598_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_606_F"))
		i16 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		__asm(push(i16<0), iftrue, target("___vfprintf__XprivateX__BB59_631_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_607_F"))
		__asm(push(i12>14), iftrue, target("___vfprintf__XprivateX__BB59_631_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_608_F"))
		i1 =  (___tens_D2A)
		i14 =  (i12 << 3)
		i1 =  (i1 + i14)
		f0 =  ((__xasm<Number>(push(i1), op(0x39))))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2394)), op(0x37))))
		__asm(push(i1>-1), iftrue, target("___vfprintf__XprivateX__BB59_610_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_609_F"))
		__asm(push(i21<1), iftrue, target("___vfprintf__XprivateX__BB59_615_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_610_F"))
		i1 =  (0)
		i14 =  ((__xasm<int>(push((mstate.ebp+-2421)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_611_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_611_F"), lbl("___vfprintf__XprivateX__BB59_611_B"), label, lbl("___vfprintf__XprivateX__BB59_611_F")); 
		f1 =  (0)
		__asm(push(i14), push((mstate.ebp+-1952)), op(0x3c))
		__asm(push(i3), push((mstate.ebp+-1948)), op(0x3c))
		f2 =  ((__xasm<Number>(push((mstate.ebp+-1952)), op(0x39))))
		f3 =  (f2 / f0)
		i3 =  (int(f3))
		f3 =  (Number(i3))
		f3 =  (f3 * f0)
		f2 =  (f2 - f3)
		i14 =  (i3 + -1)
		i3 =  ((f2>=f1) ? i3 : i14)
		f3 =  (f2 + f0)
		i14 =  (i3 + 48)
		i16 =  (i9 + i1)
		__asm(push(i14), push(i16), op(0x3a))
		f2 =  ((f2<f1) ? f3 : f2)
		i14 =  (i1 + 1)
		__asm(push(f2==f1), iftrue, target("___vfprintf__XprivateX__BB59_839_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_612_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_612_F"))
		__asm(push(i14!=i21), iftrue, target("___vfprintf__XprivateX__BB59_630_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_613_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_613_F"))
		f2 =  (f2 + f2)
		i1 =  ((__xasm<int>(push((mstate.ebp+-2493)), op(0x37))))
		i1 =  (i1 + i14)
		__asm(push(f2<=f0), iftrue, target("___vfprintf__XprivateX__BB59_618_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_614_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_614_F"), lbl("___vfprintf__XprivateX__BB59_614_B"), label, lbl("___vfprintf__XprivateX__BB59_614_F")); 
		i3 = i12
		__asm(jump, target("___vfprintf__XprivateX__BB59_622_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_615_F"))
		__asm(push(i21<0), iftrue, target("___vfprintf__XprivateX__BB59_590_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_616_F"))
		f0 =  (f0 * 5)
		__asm(push(f1<=f0), iftrue, target("___vfprintf__XprivateX__BB59_590_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_617_F"))
		i3 =  (0)
		i1 = i12
		i9 = i11
		i11 = i3
		__asm(jump, target("___vfprintf__XprivateX__BB59_588_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_618_F"))
		__asm(push(f2==f0), iftrue, target("___vfprintf__XprivateX__BB59_620_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_619_F"), lbl("___vfprintf__XprivateX__BB59_619_B"), label, lbl("___vfprintf__XprivateX__BB59_619_F")); 
		i3 = i12
		i9 = i11
		__asm(jump, target("___vfprintf__XprivateX__BB59_842_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_620_F"))
		i3 =  (i3 & 1)
		__asm(push(i3==0), iftrue, target("___vfprintf__XprivateX__BB59_619_B"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_614_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_621_F"))
		i3 =  ((__xasm<int>(push((mstate.ebp+-2493)), op(0x37))))
		i1 =  (i3 + i17)
		i3 = i24
	__asm(lbl("___vfprintf__XprivateX__BB59_622_F"))
		i9 =  (0)
		__asm(jump, target("___vfprintf__XprivateX__BB59_623_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_623_F"), lbl("___vfprintf__XprivateX__BB59_623_B"), label, lbl("___vfprintf__XprivateX__BB59_623_F")); 
		i14 = i9
		i9 =  (i14 ^ -1)
		i9 =  (i1 + i9)
		i12 =  ((__xasm<int>(push(i9), op(0x35))))
		__asm(push(i12==57), iftrue, target("___vfprintf__XprivateX__BB59_624_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_629_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_624_F"))
		i14 =  (i14 + 1)
		i12 =  ((__xasm<int>(push((mstate.ebp+-2493)), op(0x37))))
		__asm(push(i9==i12), iftrue, target("___vfprintf__XprivateX__BB59_626_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_625_F"))
		i9 = i14
		__asm(jump, target("___vfprintf__XprivateX__BB59_623_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_626_F"))
		i12 =  (49)
		i14 =  (i14 + -1)
		__asm(push(i12), push(i9), op(0x3a))
		i1 =  (i1 - i14)
		__asm(push(i11==0), iftrue, target("___vfprintf__XprivateX__BB59_628_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_627_F"))
		i9 =  (_freelist)
		i14 =  ((__xasm<int>(push((i11+4)), op(0x37))))
		i14 =  (i14 << 2)
		i9 =  (i9 + i14)
		i14 =  ((__xasm<int>(push(i9), op(0x37))))
		__asm(push(i14), push(i11), op(0x3c))
		__asm(push(i11), push(i9), op(0x3c))
	__asm(lbl("___vfprintf__XprivateX__BB59_628_F"))
		i9 =  (0)
		__asm(push(i9), push(i1), op(0x3a))
		i3 =  (i3 + 2)
		__asm(jump, target("___vfprintf__XprivateX__BB59_845_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_629_F"))
		i12 =  (i12 + 1)
		__asm(push(i12), push(i9), op(0x3a))
		i1 =  (i1 - i14)
		i9 = i11
		__asm(jump, target("___vfprintf__XprivateX__BB59_842_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_630_F"))
		f1 =  (f2 * 10)
		__asm(push(f1), push((mstate.ebp+-1960)), op(0x3e))
		i3 =  ((__xasm<int>(push((mstate.ebp+-1960)), op(0x37))))
		i16 =  ((__xasm<int>(push((mstate.ebp+-1956)), op(0x37))))
		i1 =  (i1 + 1)
		i14 = i3
		i3 = i16
		__asm(jump, target("___vfprintf__XprivateX__BB59_611_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_631_F"))
		i17 =  ((__xasm<int>(push((mstate.ebp+-2430)), op(0x37))))
		__asm(push(i17!=0), iftrue, target("___vfprintf__XprivateX__BB59_633_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_632_F"))
		i16 =  (0)
		i17 = i14
		__asm(jump, target("___vfprintf__XprivateX__BB59_649_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_633_F"))
		i17 =  ((__xasm<int>(push((mstate.ebp+-2358)), op(0x37))))
		i17 =  (i17 ^ 1)
		i17 =  (i17 & 1)
		__asm(push(i17!=0), iftrue, target("___vfprintf__XprivateX__BB59_643_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_634_F"))
		i16 =  (i16 + 1075)
		i17 =  ((__xasm<int>(push((_freelist+4)), op(0x37))))
		i19 =  (i16 + i19)
		i16 =  (i16 + i14)
		__asm(push(i17==0), iftrue, target("___vfprintf__XprivateX__BB59_636_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_635_F"))
		i22 =  ((__xasm<int>(push(i17), op(0x37))))
		__asm(push(i22), push((_freelist+4)), op(0x3c))
		__asm(jump, target("___vfprintf__XprivateX__BB59_639_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_636_F"))
		i17 =  (_private_mem)
		i22 =  ((__xasm<int>(push(_pmem_next), op(0x37))))
		i17 =  (i22 - i17)
		i17 =  (i17 >> 3)
		i17 =  (i17 + 4)
		__asm(push(uint(i17)>uint(288)), iftrue, target("___vfprintf__XprivateX__BB59_638_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_637_F"))
		i17 =  (1)
		i24 =  (i22 + 32)
		__asm(push(i24), push(_pmem_next), op(0x3c))
		__asm(push(i17), push((i22+4)), op(0x3c))
		i17 =  (2)
		__asm(push(i17), push((i22+8)), op(0x3c))
		i17 = i22
		__asm(jump, target("___vfprintf__XprivateX__BB59_639_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_638_F"))
		i17 =  (32)
		mstate.esp -= 4
		__asm(push(i17), push(mstate.esp), op(0x3c))
		state = 36
		mstate.esp -= 4;FSM_malloc.start()
		return
	__asm(lbl("___vfprintf_state36"))
		i17 = mstate.eax
		mstate.esp += 4
		i22 =  (1)
		__asm(push(i22), push((i17+4)), op(0x3c))
		i22 =  (2)
		__asm(push(i22), push((i17+8)), op(0x3c))
	__asm(lbl("___vfprintf__XprivateX__BB59_639_F"))
		i22 =  (0)
		__asm(push(i22), push((i17+12)), op(0x3c))
		i22 =  (1)
		__asm(push(i22), push((i17+20)), op(0x3c))
		__asm(push(i22), push((i17+16)), op(0x3c))
		__asm(push(i19<1), iftrue, target("___vfprintf__XprivateX__BB59_641_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_640_F"))
		__asm(push(i14>0), iftrue, target("___vfprintf__XprivateX__BB59_642_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_641_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_654_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_642_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_653_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_643_F"))
		i16 =  ((__xasm<int>(push((mstate.ebp+-8)), op(0x37))))
		i17 =  ((__xasm<int>(push((_freelist+4)), op(0x37))))
		i16 =  (54 - i16)
		i19 =  (i16 + i19)
		i16 =  (i16 + i14)
		__asm(push(i17==0), iftrue, target("___vfprintf__XprivateX__BB59_645_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_644_F"))
		i22 =  ((__xasm<int>(push(i17), op(0x37))))
		__asm(push(i22), push((_freelist+4)), op(0x3c))
		__asm(jump, target("___vfprintf__XprivateX__BB59_648_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_645_F"))
		i17 =  (_private_mem)
		i22 =  ((__xasm<int>(push(_pmem_next), op(0x37))))
		i17 =  (i22 - i17)
		i17 =  (i17 >> 3)
		i17 =  (i17 + 4)
		__asm(push(uint(i17)>uint(288)), iftrue, target("___vfprintf__XprivateX__BB59_647_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_646_F"))
		i17 =  (1)
		i24 =  (i22 + 32)
		__asm(push(i24), push(_pmem_next), op(0x3c))
		__asm(push(i17), push((i22+4)), op(0x3c))
		i17 =  (2)
		__asm(push(i17), push((i22+8)), op(0x3c))
		i17 = i22
		__asm(jump, target("___vfprintf__XprivateX__BB59_648_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_647_F"))
		i17 =  (32)
		mstate.esp -= 4
		__asm(push(i17), push(mstate.esp), op(0x3c))
		state = 37
		mstate.esp -= 4;FSM_malloc.start()
		return
	__asm(lbl("___vfprintf_state37"))
		i17 = mstate.eax
		mstate.esp += 4
		i22 =  (1)
		__asm(push(i22), push((i17+4)), op(0x3c))
		i22 =  (2)
		__asm(push(i22), push((i17+8)), op(0x3c))
	__asm(lbl("___vfprintf__XprivateX__BB59_648_F"))
		i22 = i17
		i17 =  (0)
		__asm(push(i17), push((i22+12)), op(0x3c))
		i17 =  (1)
		__asm(push(i17), push((i22+20)), op(0x3c))
		__asm(push(i17), push((i22+16)), op(0x3c))
		i17 = i16
		i16 = i22
	__asm(lbl("___vfprintf__XprivateX__BB59_649_F"))
		i22 = i17
		i17 = i16
		__asm(push(i19<1), iftrue, target("___vfprintf__XprivateX__BB59_651_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_650_F"))
		__asm(push(i14>0), iftrue, target("___vfprintf__XprivateX__BB59_652_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_651_F"))
		i16 = i22
		__asm(jump, target("___vfprintf__XprivateX__BB59_654_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_652_F"))
		i16 = i22
	__asm(lbl("___vfprintf__XprivateX__BB59_653_F"))
		i22 =  ((i19<=i14) ? i19 : i14)
		i19 =  (i19 - i22)
		i14 =  (i14 - i22)
		i16 =  (i16 - i22)
	__asm(lbl("___vfprintf__XprivateX__BB59_654_F"))
		__asm(push(i20>0), iftrue, target("___vfprintf__XprivateX__BB59_656_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_655_F"), lbl("___vfprintf__XprivateX__BB59_655_B"), label, lbl("___vfprintf__XprivateX__BB59_655_F")); 
		__asm(jump, target("___vfprintf__XprivateX__BB59_669_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_656_F"))
		i22 =  ((__xasm<int>(push((mstate.ebp+-2430)), op(0x37))))
		__asm(push(i22==0), iftrue, target("___vfprintf__XprivateX__BB59_668_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_657_F"))
		__asm(push(i20<1), iftrue, target("___vfprintf__XprivateX__BB59_655_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_658_F"))
		mstate.esp -= 8
		__asm(push(i17), push(mstate.esp), op(0x3c))
		__asm(push(i20), push((mstate.esp+4)), op(0x3c))
		state = 38
		mstate.esp -= 4;FSM___pow5mult_D2A.start()
		return
	__asm(lbl("___vfprintf_state38"))
		i17 = mstate.eax
		mstate.esp += 8
		mstate.esp -= 8
		__asm(push(i17), push(mstate.esp), op(0x3c))
		__asm(push(i11), push((mstate.esp+4)), op(0x3c))
		state = 39
		mstate.esp -= 4;FSM___mult_D2A.start()
		return
	__asm(lbl("___vfprintf_state39"))
		i20 = mstate.eax
		mstate.esp += 8
		__asm(push(i11==0), iftrue, target("___vfprintf__XprivateX__BB59_660_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_659_F"))
		i22 =  (_freelist)
		i24 =  ((__xasm<int>(push((i11+4)), op(0x37))))
		i24 =  (i24 << 2)
		i22 =  (i22 + i24)
		i24 =  ((__xasm<int>(push(i22), op(0x37))))
		__asm(push(i24), push(i11), op(0x3c))
		__asm(push(i11), push(i22), op(0x3c))
	__asm(lbl("___vfprintf__XprivateX__BB59_660_F"))
		i11 =  ((__xasm<int>(push((_freelist+4)), op(0x37))))
		__asm(push(i11==0), iftrue, target("___vfprintf__XprivateX__BB59_662_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_661_F"))
		i22 =  ((__xasm<int>(push(i11), op(0x37))))
		__asm(push(i22), push((_freelist+4)), op(0x3c))
		__asm(jump, target("___vfprintf__XprivateX__BB59_665_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_662_F"))
		i11 =  (_private_mem)
		i22 =  ((__xasm<int>(push(_pmem_next), op(0x37))))
		i11 =  (i22 - i11)
		i11 =  (i11 >> 3)
		i11 =  (i11 + 4)
		__asm(push(uint(i11)>uint(288)), iftrue, target("___vfprintf__XprivateX__BB59_664_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_663_F"))
		i11 =  (1)
		i24 =  (i22 + 32)
		__asm(push(i24), push(_pmem_next), op(0x3c))
		__asm(push(i11), push((i22+4)), op(0x3c))
		i11 =  (2)
		__asm(push(i11), push((i22+8)), op(0x3c))
		i11 = i22
		__asm(jump, target("___vfprintf__XprivateX__BB59_665_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_664_F"))
		i11 =  (32)
		mstate.esp -= 4
		__asm(push(i11), push(mstate.esp), op(0x3c))
		state = 40
		mstate.esp -= 4;FSM_malloc.start()
		return
	__asm(lbl("___vfprintf_state40"))
		i11 = mstate.eax
		mstate.esp += 4
		i22 =  (1)
		__asm(push(i22), push((i11+4)), op(0x3c))
		i22 =  (2)
		__asm(push(i22), push((i11+8)), op(0x3c))
	__asm(lbl("___vfprintf__XprivateX__BB59_665_F"))
		i22 =  (0)
		__asm(push(i22), push((i11+12)), op(0x3c))
		i22 =  (1)
		__asm(push(i22), push((i11+20)), op(0x3c))
		__asm(push(i22), push((i11+16)), op(0x3c))
		i22 =  ((__xasm<int>(push((mstate.ebp+-2412)), op(0x37))))
		__asm(push(i22>0), iftrue, target("___vfprintf__XprivateX__BB59_667_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_666_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_678_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_667_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_677_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_668_F"))
		mstate.esp -= 8
		__asm(push(i11), push(mstate.esp), op(0x3c))
		__asm(push(i20), push((mstate.esp+4)), op(0x3c))
		state = 41
		mstate.esp -= 4;FSM___pow5mult_D2A.start()
		return
	__asm(lbl("___vfprintf_state41"))
		i11 = mstate.eax
		mstate.esp += 8
	__asm(lbl("___vfprintf__XprivateX__BB59_669_F"))
		i20 =  ((__xasm<int>(push((_freelist+4)), op(0x37))))
		__asm(push(i20==0), iftrue, target("___vfprintf__XprivateX__BB59_671_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_670_F"))
		i22 =  ((__xasm<int>(push(i20), op(0x37))))
		__asm(push(i22), push((_freelist+4)), op(0x3c))
		__asm(jump, target("___vfprintf__XprivateX__BB59_674_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_671_F"))
		i20 =  (_private_mem)
		i22 =  ((__xasm<int>(push(_pmem_next), op(0x37))))
		i20 =  (i22 - i20)
		i20 =  (i20 >> 3)
		i20 =  (i20 + 4)
		__asm(push(uint(i20)>uint(288)), iftrue, target("___vfprintf__XprivateX__BB59_673_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_672_F"))
		i20 =  (1)
		i24 =  (i22 + 32)
		__asm(push(i24), push(_pmem_next), op(0x3c))
		__asm(push(i20), push((i22+4)), op(0x3c))
		i20 =  (2)
		__asm(push(i20), push((i22+8)), op(0x3c))
		i20 = i22
		__asm(jump, target("___vfprintf__XprivateX__BB59_674_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_673_F"))
		i20 =  (32)
		mstate.esp -= 4
		__asm(push(i20), push(mstate.esp), op(0x3c))
		state = 42
		mstate.esp -= 4;FSM_malloc.start()
		return
	__asm(lbl("___vfprintf_state42"))
		i20 = mstate.eax
		mstate.esp += 4
		i22 =  (1)
		__asm(push(i22), push((i20+4)), op(0x3c))
		i22 =  (2)
		__asm(push(i22), push((i20+8)), op(0x3c))
	__asm(lbl("___vfprintf__XprivateX__BB59_674_F"))
		i22 = i20
		i20 =  (0)
		__asm(push(i20), push((i22+12)), op(0x3c))
		i20 =  (1)
		__asm(push(i20), push((i22+20)), op(0x3c))
		__asm(push(i20), push((i22+16)), op(0x3c))
		i20 =  ((__xasm<int>(push((mstate.ebp+-2412)), op(0x37))))
		__asm(push(i20>0), iftrue, target("___vfprintf__XprivateX__BB59_676_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_675_F"))
		i20 = i11
		i11 = i22
		__asm(jump, target("___vfprintf__XprivateX__BB59_678_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_676_F"))
		i20 = i11
		i11 = i22
	__asm(lbl("___vfprintf__XprivateX__BB59_677_F"))
		mstate.esp -= 8
		__asm(push(i11), push(mstate.esp), op(0x3c))
		i11 =  ((__xasm<int>(push((mstate.ebp+-2412)), op(0x37))))
		__asm(push(i11), push((mstate.esp+4)), op(0x3c))
		state = 43
		mstate.esp -= 4;FSM___pow5mult_D2A.start()
		return
	__asm(lbl("___vfprintf_state43"))
		i11 = mstate.eax
		mstate.esp += 8
	__asm(lbl("___vfprintf__XprivateX__BB59_678_F"))
		i22 = i20
		i24 =  ((__xasm<int>(push((mstate.ebp+-2430)), op(0x37))))
		__asm(push(i24!=0), iftrue, target("___vfprintf__XprivateX__BB59_681_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_679_F"))
		__asm(push(i1<2), iftrue, target("___vfprintf__XprivateX__BB59_681_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_680_F"), lbl("___vfprintf__XprivateX__BB59_680_B"), label, lbl("___vfprintf__XprivateX__BB59_680_F")); 
		i3 =  (0)
		__asm(jump, target("___vfprintf__XprivateX__BB59_685_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_681_F"))
		i24 =  ((__xasm<int>(push((mstate.ebp+-2421)), op(0x37))))
		__asm(push(i24!=0), iftrue, target("___vfprintf__XprivateX__BB59_680_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_682_F"))
		i24 =  (i3 & 1048575)
		__asm(push(i24!=0), iftrue, target("___vfprintf__XprivateX__BB59_680_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_683_F"))
		i3 =  (i3 & 2145386496)
		__asm(push(i3==0), iftrue, target("___vfprintf__XprivateX__BB59_680_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_684_F"))
		i3 =  (1)
		i19 =  (i19 + 1)
		i16 =  (i16 + 1)
	__asm(lbl("___vfprintf__XprivateX__BB59_685_F"))
		i24 =  ((__xasm<int>(push((mstate.ebp+-2412)), op(0x37))))
		__asm(push(i24!=0), iftrue, target("___vfprintf__XprivateX__BB59_687_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_686_F"))
		i24 =  (1)
		__asm(jump, target("___vfprintf__XprivateX__BB59_691_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_687_F"))
		i24 =  ((__xasm<int>(push((i11+16)), op(0x37))))
		i24 =  (i24 << 2)
		i24 =  (i24 + i11)
		i24 =  ((__xasm<int>(push((i24+16)), op(0x37))))
		i20 =  ((uint(i24)<uint(65536)) ? 16 : 0)
		i24 =  (i24 << i20)
		i23 =  ((uint(i24)<uint(16777216)) ? 8 : 0)
		i24 =  (i24 << i23)
		i25 =  ((uint(i24)<uint(268435456)) ? 4 : 0)
		i20 =  (i23 | i20)
		i24 =  (i24 << i25)
		i23 =  ((uint(i24)<uint(1073741824)) ? 2 : 0)
		i20 =  (i20 | i25)
		i20 =  (i20 | i23)
		i24 =  (i24 << i23)
		__asm(push(i24>-1), iftrue, target("___vfprintf__XprivateX__BB59_689_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_688_F"))
		i24 = i20
		__asm(jump, target("___vfprintf__XprivateX__BB59_690_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_689_F"))
		i24 =  (i24 & 1073741824)
		i20 =  (i20 + 1)
		i24 =  ((i24==0) ? 32 : i20)
	__asm(lbl("___vfprintf__XprivateX__BB59_690_F"))
		i24 =  (32 - i24)
	__asm(lbl("___vfprintf__XprivateX__BB59_691_F"))
		i24 =  (i24 + i19)
		i24 =  (i24 & 31)
		i20 =  (32 - i24)
		i24 =  ((i24==0) ? i24 : i20)
		__asm(push(i24<5), iftrue, target("___vfprintf__XprivateX__BB59_696_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_692_F"))
		i24 =  (i24 + -4)
		i19 =  (i24 + i19)
		i14 =  (i24 + i14)
		i16 =  (i24 + i16)
		__asm(push(i16>0), iftrue, target("___vfprintf__XprivateX__BB59_694_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_693_F"))
		i16 = i19
		i19 = i22
		__asm(jump, target("___vfprintf__XprivateX__BB59_701_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_694_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_695_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_695_F"), lbl("___vfprintf__XprivateX__BB59_695_B"), label, lbl("___vfprintf__XprivateX__BB59_695_F")); 
		mstate.esp -= 8
		__asm(push(i22), push(mstate.esp), op(0x3c))
		__asm(push(i16), push((mstate.esp+4)), op(0x3c))
		state = 44
		mstate.esp -= 4;FSM___lshift_D2A.start()
		return
	__asm(lbl("___vfprintf_state44"))
		i22 = mstate.eax
		mstate.esp += 8
		i16 = i19
		i19 = i22
		__asm(jump, target("___vfprintf__XprivateX__BB59_701_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_696_F"))
		__asm(push(i24<4), iftrue, target("___vfprintf__XprivateX__BB59_698_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_697_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_699_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_698_F"))
		i24 =  (i24 + 28)
		i19 =  (i24 + i19)
		i14 =  (i24 + i14)
		i16 =  (i24 + i16)
	__asm(lbl("___vfprintf__XprivateX__BB59_699_F"))
		__asm(push(i16>0), iftrue, target("___vfprintf__XprivateX__BB59_695_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_700_F"))
		i16 = i19
		i19 = i22
		__asm(jump, target("___vfprintf__XprivateX__BB59_701_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_701_F"))
		__asm(push(i16>0), iftrue, target("___vfprintf__XprivateX__BB59_703_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_702_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_704_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_703_F"))
		mstate.esp -= 8
		__asm(push(i11), push(mstate.esp), op(0x3c))
		__asm(push(i16), push((mstate.esp+4)), op(0x3c))
		state = 45
		mstate.esp -= 4;FSM___lshift_D2A.start()
		return
	__asm(lbl("___vfprintf_state45"))
		i11 = mstate.eax
		mstate.esp += 8
	__asm(lbl("___vfprintf__XprivateX__BB59_704_F"))
		i16 =  ((__xasm<int>(push((mstate.ebp+-2376)), op(0x37))))
		__asm(push(i16!=0), iftrue, target("___vfprintf__XprivateX__BB59_706_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_705_F"), lbl("___vfprintf__XprivateX__BB59_705_B"), label, lbl("___vfprintf__XprivateX__BB59_705_F")); 
		i16 = i21
		__asm(jump, target("___vfprintf__XprivateX__BB59_717_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_706_F"))
		i16 =  ((__xasm<int>(push((i19+16)), op(0x37))))
		i22 =  ((__xasm<int>(push((i11+16)), op(0x37))))
		i24 =  (i16 - i22)
		__asm(push(i16==i22), iftrue, target("___vfprintf__XprivateX__BB59_708_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_707_F"))
		i16 = i24
		__asm(jump, target("___vfprintf__XprivateX__BB59_713_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_708_F"))
		i16 =  (0)
	__asm(jump, target("___vfprintf__XprivateX__BB59_709_F"), lbl("___vfprintf__XprivateX__BB59_709_B"), label, lbl("___vfprintf__XprivateX__BB59_709_F")); 
		i24 =  (i16 ^ -1)
		i24 =  (i22 + i24)
		i20 =  (i24 << 2)
		i23 =  (i19 + i20)
		i20 =  (i11 + i20)
		i23 =  ((__xasm<int>(push((i23+20)), op(0x37))))
		i20 =  ((__xasm<int>(push((i20+20)), op(0x37))))
		__asm(push(i23==i20), iftrue, target("___vfprintf__XprivateX__BB59_711_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_710_F"))
		i16 =  ((uint(i23)<uint(i20)) ? -1 : 1)
		__asm(jump, target("___vfprintf__XprivateX__BB59_713_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_711_F"))
		i16 =  (i16 + 1)
		__asm(push(i24>0), iftrue, target("___vfprintf__XprivateX__BB59_1474_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_712_F"))
		i16 =  (0)
		__asm(jump, target("___vfprintf__XprivateX__BB59_713_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_713_F"))
		__asm(push(i16>-1), iftrue, target("___vfprintf__XprivateX__BB59_705_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_714_F"))
		i16 =  (10)
		mstate.esp -= 12
		i22 =  (0)
		__asm(push(i19), push(mstate.esp), op(0x3c))
		__asm(push(i16), push((mstate.esp+4)), op(0x3c))
		__asm(push(i22), push((mstate.esp+8)), op(0x3c))
		state = 46
		mstate.esp -= 4;FSM___multadd_D2A.start()
		return
	__asm(lbl("___vfprintf_state46"))
		i19 = mstate.eax
		mstate.esp += 12
		i12 =  (i12 + -1)
		i16 =  ((__xasm<int>(push((mstate.ebp+-2430)), op(0x37))))
		__asm(push(i16!=0), iftrue, target("___vfprintf__XprivateX__BB59_716_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_715_F"))
		i16 =  ((__xasm<int>(push((mstate.ebp+-2403)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_717_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_716_F"))
		i16 =  (0)
		mstate.esp -= 12
		i22 =  (10)
		__asm(push(i17), push(mstate.esp), op(0x3c))
		__asm(push(i22), push((mstate.esp+4)), op(0x3c))
		__asm(push(i16), push((mstate.esp+8)), op(0x3c))
		state = 47
		mstate.esp -= 4;FSM___multadd_D2A.start()
		return
	__asm(lbl("___vfprintf_state47"))
		i17 = mstate.eax
		mstate.esp += 12
		i16 =  ((__xasm<int>(push((mstate.ebp+-2403)), op(0x37))))
	__asm(lbl("___vfprintf__XprivateX__BB59_717_F"))
		__asm(push(i12), push((mstate.ebp+-2484)), op(0x3c))
		i12 = i19
		i19 = i17
		__asm(push(i16>0), iftrue, target("___vfprintf__XprivateX__BB59_737_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_718_F"))
		__asm(push(i1==3), iftrue, target("___vfprintf__XprivateX__BB59_720_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_719_F"))
		__asm(push(i1!=5), iftrue, target("___vfprintf__XprivateX__BB59_737_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_720_F"))
		__asm(push(i16>-1), iftrue, target("___vfprintf__XprivateX__BB59_722_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_721_F"))
		i1 = i12
		i9 = i19
		i3 = i11
		__asm(jump, target("___vfprintf__XprivateX__BB59_732_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_722_F"))
		i3 =  (0)
		mstate.esp -= 12
		i1 =  (5)
		__asm(push(i11), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i3), push((mstate.esp+8)), op(0x3c))
		state = 48
		mstate.esp -= 4;FSM___multadd_D2A.start()
		return
	__asm(lbl("___vfprintf_state48"))
		i3 = mstate.eax
		mstate.esp += 12
		i1 =  ((__xasm<int>(push((i12+16)), op(0x37))))
		i9 =  ((__xasm<int>(push((i3+16)), op(0x37))))
		i11 =  (i1 - i9)
		__asm(push(i1==i9), iftrue, target("___vfprintf__XprivateX__BB59_724_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_723_F"))
		i1 = i11
		__asm(jump, target("___vfprintf__XprivateX__BB59_729_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_724_F"))
		i1 =  (0)
	__asm(jump, target("___vfprintf__XprivateX__BB59_725_F"), lbl("___vfprintf__XprivateX__BB59_725_B"), label, lbl("___vfprintf__XprivateX__BB59_725_F")); 
		i11 =  (i1 ^ -1)
		i11 =  (i9 + i11)
		i14 =  (i11 << 2)
		i16 =  (i12 + i14)
		i14 =  (i3 + i14)
		i16 =  ((__xasm<int>(push((i16+20)), op(0x37))))
		i14 =  ((__xasm<int>(push((i14+20)), op(0x37))))
		__asm(push(i16==i14), iftrue, target("___vfprintf__XprivateX__BB59_727_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_726_F"))
		i1 =  ((uint(i16)<uint(i14)) ? -1 : 1)
		__asm(jump, target("___vfprintf__XprivateX__BB59_729_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_727_F"))
		i1 =  (i1 + 1)
		__asm(push(i11>0), iftrue, target("___vfprintf__XprivateX__BB59_1475_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_728_F"))
		i1 =  (0)
		__asm(jump, target("___vfprintf__XprivateX__BB59_729_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_729_F"))
		__asm(push(i1<1), iftrue, target("___vfprintf__XprivateX__BB59_731_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_730_F"))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2484)), op(0x37))))
		i9 = i12
		i11 = i19
		__asm(jump, target("___vfprintf__XprivateX__BB59_588_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_731_F"))
		i1 = i12
		i9 = i19
	__asm(lbl("___vfprintf__XprivateX__BB59_732_F"))
		i11 =  ((__xasm<int>(push((mstate.ebp+-2394)), op(0x37))))
		i11 =  (i11 ^ -1)
		__asm(push(i3==0), iftrue, target("___vfprintf__XprivateX__BB59_734_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_733_F"))
		i12 =  (_freelist)
		i14 =  ((__xasm<int>(push((i3+4)), op(0x37))))
		i14 =  (i14 << 2)
		i12 =  (i12 + i14)
		i14 =  ((__xasm<int>(push(i12), op(0x37))))
		__asm(push(i14), push(i3), op(0x3c))
		__asm(push(i3), push(i12), op(0x3c))
	__asm(lbl("___vfprintf__XprivateX__BB59_734_F"))
		__asm(push(i9==0), iftrue, target("___vfprintf__XprivateX__BB59_736_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_735_F"))
		i3 =  (0)
		i12 =  ((__xasm<int>(push((mstate.ebp+-2493)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_833_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_736_F"))
		i3 = i11
		i9 = i1
		i1 =  ((__xasm<int>(push((mstate.ebp+-2493)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_842_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_737_F"))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2430)), op(0x37))))
		__asm(push(i1!=0), iftrue, target("___vfprintf__XprivateX__BB59_743_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_738_F"))
		i3 =  (0)
		i1 = i12
		__asm(jump, target("___vfprintf__XprivateX__BB59_739_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_739_F"), lbl("___vfprintf__XprivateX__BB59_739_B"), label, lbl("___vfprintf__XprivateX__BB59_739_F")); 
		i12 = i1
		mstate.esp -= 8
		__asm(push(i12), push(mstate.esp), op(0x3c))
		__asm(push(i11), push((mstate.esp+4)), op(0x3c))
		mstate.esp -= 4;FSM___quorem_D2A.start()
	__asm(lbl("___vfprintf_state49"))
		i1 = mstate.eax
		mstate.esp += 8
		i1 =  (i1 + 48)
		i14 =  (i9 + i3)
		__asm(push(i1), push(i14), op(0x3a))
		i14 =  ((__xasm<int>(push((i12+20)), op(0x37))))
		i17 =  (i3 + 1)
		__asm(push(i14!=0), iftrue, target("___vfprintf__XprivateX__BB59_741_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_740_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_740_F"))
		i14 =  ((__xasm<int>(push((i12+16)), op(0x37))))
		__asm(push(i14<2), iftrue, target("___vfprintf__XprivateX__BB59_827_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_741_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_741_F"))
		__asm(push(i17>=i16), iftrue, target("___vfprintf__XprivateX__BB59_807_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_742_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_742_F"))
		i1 =  (0)
		mstate.esp -= 12
		i14 =  (10)
		__asm(push(i12), push(mstate.esp), op(0x3c))
		__asm(push(i14), push((mstate.esp+4)), op(0x3c))
		__asm(push(i1), push((mstate.esp+8)), op(0x3c))
		state = 50
		mstate.esp -= 4;FSM___multadd_D2A.start()
		return
	__asm(lbl("___vfprintf_state50"))
		i1 = mstate.eax
		mstate.esp += 12
		i3 =  (i3 + 1)
		__asm(jump, target("___vfprintf__XprivateX__BB59_739_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_743_F"))
		__asm(push(i14>0), iftrue, target("___vfprintf__XprivateX__BB59_745_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_744_F"))
		i1 = i19
		__asm(jump, target("___vfprintf__XprivateX__BB59_746_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_745_F"))
		mstate.esp -= 8
		__asm(push(i19), push(mstate.esp), op(0x3c))
		__asm(push(i14), push((mstate.esp+4)), op(0x3c))
		state = 51
		mstate.esp -= 4;FSM___lshift_D2A.start()
		return
	__asm(lbl("___vfprintf_state51"))
		i1 = mstate.eax
		mstate.esp += 8
	__asm(lbl("___vfprintf__XprivateX__BB59_746_F"))
		i3 =  (i3 & 1)
		__asm(push(i3!=0), iftrue, target("___vfprintf__XprivateX__BB59_748_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_747_F"))
		i3 = i1
		__asm(jump, target("___vfprintf__XprivateX__BB59_749_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_748_F"))
		i3 =  (1)
		i14 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		mstate.esp -= 4
		__asm(push(i14), push(mstate.esp), op(0x3c))
		state = 52
		mstate.esp -= 4;FSM___Balloc_D2A.start()
		return
	__asm(lbl("___vfprintf_state52"))
		i14 = mstate.eax
		mstate.esp += 4
		i19 =  ((__xasm<int>(push((i1+16)), op(0x37))))
		i17 =  (i14 + 12)
		i19 =  (i19 << 2)
		i22 =  (i1 + 12)
		i19 =  (i19 + 8)
		memcpy(i17, i22, i19)
		mstate.esp -= 8
		__asm(push(i14), push(mstate.esp), op(0x3c))
		__asm(push(i3), push((mstate.esp+4)), op(0x3c))
		state = 53
		mstate.esp -= 4;FSM___lshift_D2A.start()
		return
	__asm(lbl("___vfprintf_state53"))
		i3 = mstate.eax
		mstate.esp += 8
	__asm(lbl("___vfprintf__XprivateX__BB59_749_F"))
		i14 =  (0)
		i19 =  ((__xasm<int>(push((mstate.ebp+-2421)), op(0x37))))
		i19 =  (i19 & 1)
		i17 = i14
	__asm(jump, target("___vfprintf__XprivateX__BB59_750_F"), lbl("___vfprintf__XprivateX__BB59_750_B"), label, lbl("___vfprintf__XprivateX__BB59_750_F")); 
		i22 = i1
		mstate.esp -= 8
		__asm(push(i12), push(mstate.esp), op(0x3c))
		__asm(push(i11), push((mstate.esp+4)), op(0x3c))
		mstate.esp -= 4;FSM___quorem_D2A.start()
	__asm(lbl("___vfprintf_state54"))
		i1 = mstate.eax
		mstate.esp += 8
		i24 =  ((__xasm<int>(push((i12+16)), op(0x37))))
		i20 =  ((__xasm<int>(push((i22+16)), op(0x37))))
		i21 =  (i24 - i20)
		i23 =  (i12 + 16)
		i25 =  (i1 + 48)
		i26 =  (i9 + i17)
		i27 =  (i17 + 1)
		__asm(push(i24==i20), iftrue, target("___vfprintf__XprivateX__BB59_752_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_751_F"))
		i20 = i21
		__asm(jump, target("___vfprintf__XprivateX__BB59_757_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_752_F"))
		i24 =  (0)
	__asm(jump, target("___vfprintf__XprivateX__BB59_753_F"), lbl("___vfprintf__XprivateX__BB59_753_B"), label, lbl("___vfprintf__XprivateX__BB59_753_F")); 
		i21 =  (i24 ^ -1)
		i21 =  (i20 + i21)
		i28 =  (i21 << 2)
		i29 =  (i12 + i28)
		i28 =  (i22 + i28)
		i29 =  ((__xasm<int>(push((i29+20)), op(0x37))))
		i28 =  ((__xasm<int>(push((i28+20)), op(0x37))))
		__asm(push(i29==i28), iftrue, target("___vfprintf__XprivateX__BB59_755_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_754_F"))
		i24 =  ((uint(i29)<uint(i28)) ? -1 : 1)
		i20 = i24
		__asm(jump, target("___vfprintf__XprivateX__BB59_757_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_755_F"))
		i24 =  (i24 + 1)
		__asm(push(i21>0), iftrue, target("___vfprintf__XprivateX__BB59_1476_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_756_F"))
		i24 =  (0)
		i20 = i24
		__asm(jump, target("___vfprintf__XprivateX__BB59_757_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_757_F"))
		i24 = i20
		mstate.esp -= 8
		__asm(push(i11), push(mstate.esp), op(0x3c))
		__asm(push(i3), push((mstate.esp+4)), op(0x3c))
		state = 55
		mstate.esp -= 4;FSM___diff_D2A.start()
		return
	__asm(lbl("___vfprintf_state55"))
		i20 = mstate.eax
		mstate.esp += 8
		i21 =  ((__xasm<int>(push((i20+12)), op(0x37))))
		__asm(push(i21==0), iftrue, target("___vfprintf__XprivateX__BB59_759_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_758_F"))
		i21 =  (1)
		__asm(jump, target("___vfprintf__XprivateX__BB59_766_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_759_F"))
		i21 =  ((__xasm<int>(push(i23), op(0x37))))
		i28 =  ((__xasm<int>(push((i20+16)), op(0x37))))
		i29 =  (i21 - i28)
		__asm(push(i21==i28), iftrue, target("___vfprintf__XprivateX__BB59_761_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_760_F"))
		i21 = i29
		__asm(jump, target("___vfprintf__XprivateX__BB59_766_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_761_F"))
		i21 =  (0)
	__asm(jump, target("___vfprintf__XprivateX__BB59_762_F"), lbl("___vfprintf__XprivateX__BB59_762_B"), label, lbl("___vfprintf__XprivateX__BB59_762_F")); 
		i29 =  (i21 ^ -1)
		i29 =  (i28 + i29)
		i30 =  (i29 << 2)
		i31 =  (i12 + i30)
		i30 =  (i20 + i30)
		i31 =  ((__xasm<int>(push((i31+20)), op(0x37))))
		i30 =  ((__xasm<int>(push((i30+20)), op(0x37))))
		__asm(push(i31==i30), iftrue, target("___vfprintf__XprivateX__BB59_764_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_763_F"))
		i21 =  ((uint(i31)<uint(i30)) ? -1 : 1)
		__asm(jump, target("___vfprintf__XprivateX__BB59_766_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_764_F"))
		i21 =  (i21 + 1)
		__asm(push(i29>0), iftrue, target("___vfprintf__XprivateX__BB59_1477_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_765_F"))
		i21 =  (0)
		__asm(jump, target("___vfprintf__XprivateX__BB59_766_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_766_F"))
		__asm(push(i20==0), iftrue, target("___vfprintf__XprivateX__BB59_768_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_767_F"))
		i28 =  (_freelist)
		i29 =  ((__xasm<int>(push((i20+4)), op(0x37))))
		i29 =  (i29 << 2)
		i28 =  (i28 + i29)
		i29 =  ((__xasm<int>(push(i28), op(0x37))))
		__asm(push(i29), push(i20), op(0x3c))
		__asm(push(i20), push(i28), op(0x3c))
	__asm(lbl("___vfprintf__XprivateX__BB59_768_F"))
		__asm(push(i21!=0), iftrue, target("___vfprintf__XprivateX__BB59_773_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_769_F"))
		i20 =  (i19 | i14)
		__asm(push(i20!=0), iftrue, target("___vfprintf__XprivateX__BB59_773_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_770_F"))
		__asm(push(i25!=57), iftrue, target("___vfprintf__XprivateX__BB59_772_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_771_F"), lbl("___vfprintf__XprivateX__BB59_771_B"), label, lbl("___vfprintf__XprivateX__BB59_771_F")); 
		i1 = i12
		__asm(jump, target("___vfprintf__XprivateX__BB59_799_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_772_F"))
		i1 =  (i1 + 49)
		i1 =  ((i24>0) ? i1 : i25)
		__asm(push(i1), push(i26), op(0x3a))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2493)), op(0x37))))
		i14 =  (i1 + i27)
		i1 =  ((__xasm<int>(push((mstate.ebp+-2484)), op(0x37))))
		i9 = i12
		i12 = i22
		i16 = i3
		i3 = i11
		i11 = i14
		__asm(jump, target("___vfprintf__XprivateX__BB59_829_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_773_F"))
		__asm(push(i24<0), iftrue, target("___vfprintf__XprivateX__BB59_776_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_774_F"))
		__asm(push(i24!=0), iftrue, target("___vfprintf__XprivateX__BB59_795_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_775_F"))
		i24 =  (i19 | i14)
		__asm(push(i24!=0), iftrue, target("___vfprintf__XprivateX__BB59_795_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_776_F"))
		i14 =  ((__xasm<int>(push((i12+20)), op(0x37))))
		__asm(push(i14!=0), iftrue, target("___vfprintf__XprivateX__BB59_780_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_777_F"))
		i14 =  ((__xasm<int>(push(i23), op(0x37))))
		__asm(push(i21<1), iftrue, target("___vfprintf__XprivateX__BB59_779_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_778_F"))
		__asm(push(i14>1), iftrue, target("___vfprintf__XprivateX__BB59_781_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_779_F"), lbl("___vfprintf__XprivateX__BB59_779_B"), label, lbl("___vfprintf__XprivateX__BB59_779_F")); 
		i1 = i25
		i9 = i12
		__asm(jump, target("___vfprintf__XprivateX__BB59_794_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_780_F"))
		__asm(push(i21<1), iftrue, target("___vfprintf__XprivateX__BB59_779_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_781_F"))
		i14 =  (1)
		mstate.esp -= 8
		__asm(push(i12), push(mstate.esp), op(0x3c))
		__asm(push(i14), push((mstate.esp+4)), op(0x3c))
		state = 56
		mstate.esp -= 4;FSM___lshift_D2A.start()
		return
	__asm(lbl("___vfprintf_state56"))
		i12 = mstate.eax
		mstate.esp += 8
		i14 =  ((__xasm<int>(push((i12+16)), op(0x37))))
		i16 =  ((__xasm<int>(push((i11+16)), op(0x37))))
		i19 =  (i14 - i16)
		__asm(push(i14==i16), iftrue, target("___vfprintf__XprivateX__BB59_783_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_782_F"))
		i16 = i19
		__asm(jump, target("___vfprintf__XprivateX__BB59_788_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_783_F"))
		i14 =  (0)
	__asm(jump, target("___vfprintf__XprivateX__BB59_784_F"), lbl("___vfprintf__XprivateX__BB59_784_B"), label, lbl("___vfprintf__XprivateX__BB59_784_F")); 
		i19 =  (i14 ^ -1)
		i19 =  (i16 + i19)
		i21 =  (i19 << 2)
		i24 =  (i12 + i21)
		i21 =  (i11 + i21)
		i24 =  ((__xasm<int>(push((i24+20)), op(0x37))))
		i21 =  ((__xasm<int>(push((i21+20)), op(0x37))))
		__asm(push(i24==i21), iftrue, target("___vfprintf__XprivateX__BB59_786_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_785_F"))
		i14 =  ((uint(i24)<uint(i21)) ? -1 : 1)
		i16 = i14
		__asm(jump, target("___vfprintf__XprivateX__BB59_788_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_786_F"))
		i14 =  (i14 + 1)
		__asm(push(i19>0), iftrue, target("___vfprintf__XprivateX__BB59_1478_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_787_F"))
		i14 =  (0)
		i16 = i14
		__asm(jump, target("___vfprintf__XprivateX__BB59_788_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_788_F"))
		i14 = i16
		__asm(push(i14>0), iftrue, target("___vfprintf__XprivateX__BB59_792_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_789_F"))
		__asm(push(i14==0), iftrue, target("___vfprintf__XprivateX__BB59_791_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_790_F"), lbl("___vfprintf__XprivateX__BB59_790_B"), label, lbl("___vfprintf__XprivateX__BB59_790_F")); 
		i1 = i25
		i9 = i12
		__asm(jump, target("___vfprintf__XprivateX__BB59_794_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_791_F"))
		i14 =  (i25 & 1)
		__asm(push(i14==0), iftrue, target("___vfprintf__XprivateX__BB59_790_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_792_F"))
		i1 =  (i1 + 49)
		__asm(push(i1==58), iftrue, target("___vfprintf__XprivateX__BB59_798_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_793_F"))
		i9 = i12
		__asm(jump, target("___vfprintf__XprivateX__BB59_794_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_794_F"))
		__asm(push(i1), push(i26), op(0x3a))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2493)), op(0x37))))
		i14 =  (i1 + i27)
		i1 =  ((__xasm<int>(push((mstate.ebp+-2484)), op(0x37))))
		i12 = i22
		i16 = i3
		i3 = i11
		i11 = i14
		__asm(jump, target("___vfprintf__XprivateX__BB59_829_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_795_F"))
		__asm(push(i21<1), iftrue, target("___vfprintf__XprivateX__BB59_802_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_796_F"))
		__asm(push(i25==57), iftrue, target("___vfprintf__XprivateX__BB59_771_B"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_797_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_797_F"))
		i1 =  (i25 + 1)
		__asm(push(i1), push(i26), op(0x3a))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2493)), op(0x37))))
		i14 =  (i1 + i27)
		i1 =  ((__xasm<int>(push((mstate.ebp+-2484)), op(0x37))))
		i9 = i12
		i12 = i22
		i16 = i3
		i3 = i11
		i11 = i14
		__asm(jump, target("___vfprintf__XprivateX__BB59_829_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_798_F"))
		i1 = i12
		__asm(jump, target("___vfprintf__XprivateX__BB59_799_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_799_F"))
		i12 =  (57)
		__asm(push(i12), push(i26), op(0x3a))
		i9 =  (i9 + i17)
		i12 =  ((__xasm<int>(push((mstate.ebp+-2493)), op(0x37))))
		i12 =  (i12 + i27)
		i14 = i22
		__asm(jump, target("___vfprintf__XprivateX__BB59_800_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_800_F"), lbl("___vfprintf__XprivateX__BB59_800_B"), label, lbl("___vfprintf__XprivateX__BB59_800_F")); 
		i16 = i1
		i19 = i12
		i1 =  ((__xasm<int>(push((mstate.ebp+-2493)), op(0x37))))
		__asm(push(i9==i1), iftrue, target("___vfprintf__XprivateX__BB59_825_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_801_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_801_F"))
		i1 = i16
		i12 = i14
		__asm(jump, target("___vfprintf__XprivateX__BB59_818_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_802_F"))
		__asm(push(i25), push(i26), op(0x3a))
		__asm(push(i27==i16), iftrue, target("___vfprintf__XprivateX__BB59_808_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_803_F"))
		i1 =  (0)
		mstate.esp -= 12
		i24 =  (10)
		__asm(push(i12), push(mstate.esp), op(0x3c))
		__asm(push(i24), push((mstate.esp+4)), op(0x3c))
		__asm(push(i1), push((mstate.esp+8)), op(0x3c))
		state = 57
		mstate.esp -= 4;FSM___multadd_D2A.start()
		return
	__asm(lbl("___vfprintf_state57"))
		i1 = mstate.eax
		mstate.esp += 12
		__asm(push(i22!=i3), iftrue, target("___vfprintf__XprivateX__BB59_806_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_804_F"))
		i12 =  (0)
		mstate.esp -= 12
		i22 =  (10)
		__asm(push(i3), push(mstate.esp), op(0x3c))
		__asm(push(i22), push((mstate.esp+4)), op(0x3c))
		__asm(push(i12), push((mstate.esp+8)), op(0x3c))
		state = 58
		mstate.esp -= 4;FSM___multadd_D2A.start()
		return
	__asm(lbl("___vfprintf_state58"))
		i3 = mstate.eax
		mstate.esp += 12
		i12 = i3
	__asm(jump, target("___vfprintf__XprivateX__BB59_805_F"), lbl("___vfprintf__XprivateX__BB59_805_B"), label, lbl("___vfprintf__XprivateX__BB59_805_F")); 
		i22 = i12
		i12 =  (i17 + 1)
		i17 = i12
		i12 = i1
		i1 = i22
		__asm(jump, target("___vfprintf__XprivateX__BB59_750_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_806_F"))
		i12 =  (0)
		mstate.esp -= 12
		i24 =  (10)
		__asm(push(i22), push(mstate.esp), op(0x3c))
		__asm(push(i24), push((mstate.esp+4)), op(0x3c))
		__asm(push(i12), push((mstate.esp+8)), op(0x3c))
		state = 59
		mstate.esp -= 4;FSM___multadd_D2A.start()
		return
	__asm(lbl("___vfprintf_state59"))
		i22 = mstate.eax
		mstate.esp += 12
		mstate.esp -= 12
		__asm(push(i3), push(mstate.esp), op(0x3c))
		__asm(push(i24), push((mstate.esp+4)), op(0x3c))
		__asm(push(i12), push((mstate.esp+8)), op(0x3c))
		state = 60
		mstate.esp -= 4;FSM___multadd_D2A.start()
		return
	__asm(lbl("___vfprintf_state60"))
		i3 = mstate.eax
		mstate.esp += 12
		i12 = i22
		__asm(jump, target("___vfprintf__XprivateX__BB59_805_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_807_F"))
		i3 =  (0)
		i9 =  ((__xasm<int>(push((mstate.ebp+-2493)), op(0x37))))
		i9 =  (i9 + i17)
		i14 = i3
		i3 = i19
		__asm(jump, target("___vfprintf__XprivateX__BB59_809_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_808_F"))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2493)), op(0x37))))
		i9 =  (i1 + i27)
		i1 = i25
		i14 = i22
	__asm(lbl("___vfprintf__XprivateX__BB59_809_F"))
		i16 =  (1)
		mstate.esp -= 8
		__asm(push(i12), push(mstate.esp), op(0x3c))
		__asm(push(i16), push((mstate.esp+4)), op(0x3c))
		state = 61
		mstate.esp -= 4;FSM___lshift_D2A.start()
		return
	__asm(lbl("___vfprintf_state61"))
		i12 = mstate.eax
		mstate.esp += 8
		i16 =  ((__xasm<int>(push((i12+16)), op(0x37))))
		i19 =  ((__xasm<int>(push((i11+16)), op(0x37))))
		i17 =  (i16 - i19)
		__asm(push(i16==i19), iftrue, target("___vfprintf__XprivateX__BB59_811_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_810_F"))
		i19 = i17
		__asm(jump, target("___vfprintf__XprivateX__BB59_816_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_811_F"))
		i16 =  (0)
	__asm(jump, target("___vfprintf__XprivateX__BB59_812_F"), lbl("___vfprintf__XprivateX__BB59_812_B"), label, lbl("___vfprintf__XprivateX__BB59_812_F")); 
		i17 =  (i16 ^ -1)
		i17 =  (i19 + i17)
		i22 =  (i17 << 2)
		i24 =  (i12 + i22)
		i22 =  (i11 + i22)
		i24 =  ((__xasm<int>(push((i24+20)), op(0x37))))
		i22 =  ((__xasm<int>(push((i22+20)), op(0x37))))
		__asm(push(i24==i22), iftrue, target("___vfprintf__XprivateX__BB59_814_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_813_F"))
		i16 =  ((uint(i24)<uint(i22)) ? -1 : 1)
		i19 = i16
		__asm(jump, target("___vfprintf__XprivateX__BB59_816_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_814_F"))
		i16 =  (i16 + 1)
		__asm(push(i17>0), iftrue, target("___vfprintf__XprivateX__BB59_1479_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_815_F"))
		i16 =  (0)
		i19 = i16
		__asm(jump, target("___vfprintf__XprivateX__BB59_816_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_816_F"))
		i16 = i19
		__asm(push(i16<1), iftrue, target("___vfprintf__XprivateX__BB59_820_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_817_F"), lbl("___vfprintf__XprivateX__BB59_817_B"), label, lbl("___vfprintf__XprivateX__BB59_817_F")); 
		i1 = i12
		i12 = i14
		__asm(jump, target("___vfprintf__XprivateX__BB59_818_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_818_F"))
		i14 = i1
		i19 = i9
		i1 =  ((__xasm<int>(push((i19+-1)), op(0x35))))
		i9 =  (i19 + -1)
		__asm(push(i1!=57), iftrue, target("___vfprintf__XprivateX__BB59_826_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_819_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_819_F"))
		i1 = i14
		i14 = i12
		i12 = i19
		__asm(jump, target("___vfprintf__XprivateX__BB59_800_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_820_F"))
		__asm(push(i16==0), iftrue, target("___vfprintf__XprivateX__BB59_824_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_821_F"), lbl("___vfprintf__XprivateX__BB59_821_B"), label, lbl("___vfprintf__XprivateX__BB59_821_F")); 
		i1 =  (0)
		__asm(jump, target("___vfprintf__XprivateX__BB59_822_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_822_F"), lbl("___vfprintf__XprivateX__BB59_822_B"), label, lbl("___vfprintf__XprivateX__BB59_822_F")); 
		i16 =  (i1 ^ -1)
		i16 =  (i9 + i16)
		i16 =  ((__xasm<int>(push(i16), op(0x35))))
		i1 =  (i1 + 1)
		__asm(push(i16!=48), iftrue, target("___vfprintf__XprivateX__BB59_828_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_823_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_823_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_822_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_824_F"))
		i1 =  (i1 & 1)
		__asm(push(i1==0), iftrue, target("___vfprintf__XprivateX__BB59_821_B"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_817_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_825_F"))
		i1 =  (49)
		__asm(push(i1), push(i9), op(0x3a))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2484)), op(0x37))))
		i1 =  (i1 + 1)
		i9 = i16
		i12 = i14
		i16 = i3
		i3 = i11
		i11 = i19
		__asm(jump, target("___vfprintf__XprivateX__BB59_829_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_826_F"))
		i1 =  (i1 + 1)
		__asm(push(i1), push(i9), op(0x3a))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2484)), op(0x37))))
		i9 = i14
		i16 = i3
		i3 = i11
		i11 = i19
		__asm(jump, target("___vfprintf__XprivateX__BB59_829_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_827_F"))
		i3 =  (0)
		i1 =  ((__xasm<int>(push((mstate.ebp+-2493)), op(0x37))))
		i14 =  (i1 + i17)
		i1 =  ((__xasm<int>(push((mstate.ebp+-2484)), op(0x37))))
		i9 = i12
		i12 = i3
		i16 = i19
		i3 = i11
		i11 = i14
		__asm(jump, target("___vfprintf__XprivateX__BB59_829_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_828_F"))
		i1 =  (i1 + -1)
		i19 =  (i9 - i1)
		i1 =  ((__xasm<int>(push((mstate.ebp+-2484)), op(0x37))))
		i9 = i12
		i12 = i14
		i16 = i3
		i3 = i11
		i11 = i19
	__asm(lbl("___vfprintf__XprivateX__BB59_829_F"))
		i14 = i16
		i16 = i11
		__asm(push(i3==0), iftrue, target("___vfprintf__XprivateX__BB59_831_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_830_F"))
		i11 =  (_freelist)
		i19 =  ((__xasm<int>(push((i3+4)), op(0x37))))
		i19 =  (i19 << 2)
		i11 =  (i11 + i19)
		i19 =  ((__xasm<int>(push(i11), op(0x37))))
		__asm(push(i19), push(i3), op(0x3c))
		__asm(push(i3), push(i11), op(0x3c))
	__asm(lbl("___vfprintf__XprivateX__BB59_831_F"))
		__asm(push(i14==0), iftrue, target("___vfprintf__XprivateX__BB59_1480_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_832_F"))
		i11 = i1
		i1 = i9
		i3 = i12
		i9 = i14
		i12 = i16
		__asm(jump, target("___vfprintf__XprivateX__BB59_833_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_833_F"))
		__asm(push(i3==i9), iftrue, target("___vfprintf__XprivateX__BB59_836_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_834_F"))
		__asm(push(i3==0), iftrue, target("___vfprintf__XprivateX__BB59_836_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_835_F"))
		i14 =  (_freelist)
		i16 =  ((__xasm<int>(push((i3+4)), op(0x37))))
		i16 =  (i16 << 2)
		i14 =  (i14 + i16)
		i16 =  ((__xasm<int>(push(i14), op(0x37))))
		__asm(push(i16), push(i3), op(0x3c))
		__asm(push(i3), push(i14), op(0x3c))
	__asm(lbl("___vfprintf__XprivateX__BB59_836_F"))
		__asm(push(i9!=0), iftrue, target("___vfprintf__XprivateX__BB59_838_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_837_F"))
		i3 = i11
		i9 = i1
		i1 = i12
		__asm(jump, target("___vfprintf__XprivateX__BB59_842_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_838_F"))
		i3 =  (_freelist)
		i14 =  ((__xasm<int>(push((i9+4)), op(0x37))))
		i14 =  (i14 << 2)
		i3 =  (i3 + i14)
		i14 =  ((__xasm<int>(push(i3), op(0x37))))
		__asm(push(i14), push(i9), op(0x3c))
		__asm(push(i9), push(i3), op(0x3c))
		i3 = i11
		i9 = i1
		i1 = i12
		__asm(jump, target("___vfprintf__XprivateX__BB59_842_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_839_F"))
		i3 =  ((__xasm<int>(push((mstate.ebp+-2493)), op(0x37))))
		i1 =  (i3 + i14)
		i3 = i12
		i9 = i11
		__asm(jump, target("___vfprintf__XprivateX__BB59_842_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_840_F"))
		i3 =  (i3 + -1)
		i3 =  (i22 - i3)
		i1 =  ((__xasm<int>(push((mstate.ebp+-2493)), op(0x37))))
		i1 =  (i1 + i3)
		i3 = i24
		i9 = i11
		__asm(jump, target("___vfprintf__XprivateX__BB59_842_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_841_F"))
		i3 =  ((__xasm<int>(push((mstate.ebp+-2493)), op(0x37))))
		i1 =  (i3 + i17)
		i3 = i24
		i9 = i11
	__asm(jump, target("___vfprintf__XprivateX__BB59_842_F"), lbl("___vfprintf__XprivateX__BB59_842_B"), label, lbl("___vfprintf__XprivateX__BB59_842_F")); 
		__asm(push(i9==0), iftrue, target("___vfprintf__XprivateX__BB59_844_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_843_F"))
		i11 =  (_freelist)
		i12 =  ((__xasm<int>(push((i9+4)), op(0x37))))
		i12 =  (i12 << 2)
		i11 =  (i11 + i12)
		i12 =  ((__xasm<int>(push(i11), op(0x37))))
		__asm(push(i12), push(i9), op(0x3c))
		__asm(push(i9), push(i11), op(0x3c))
	__asm(lbl("___vfprintf__XprivateX__BB59_844_F"))
		i9 =  (0)
		__asm(push(i9), push(i1), op(0x3a))
		i3 =  (i3 + 1)
	__asm(lbl("___vfprintf__XprivateX__BB59_845_F"))
		__asm(push(i3), push((mstate.ebp+-1744)), op(0x3c))
		__asm(push(i1), push((mstate.ebp+-1740)), op(0x3c))
		i3 =  ((__xasm<int>(push((mstate.ebp+-2349)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2493)), op(0x37))))
	__asm(lbl("___vfprintf__XprivateX__BB59_846_F"))
		i9 =  ((__xasm<int>(push((mstate.ebp+-1744)), op(0x37))))
		__asm(push(i9==9999), iftrue, target("___vfprintf__XprivateX__BB59_848_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_847_F"))
		i19 = i9
		i17 = i3
		i14 = i1
		i3 =  ((__xasm<int>(push((mstate.ebp+-2466)), op(0x37))))
		i11 = i3
		i3 =  ((__xasm<int>(push((mstate.ebp+-2385)), op(0x37))))
		i16 = i3
		i12 = i1
		i3 =  ((__xasm<int>(push((mstate.ebp+-2475)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2340)), op(0x37))))
		i9 = i1
		i1 =  ((__xasm<int>(push((mstate.ebp+-2331)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_849_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_848_F"))
		i9 =  (2147483647)
		__asm(push(i9), push((mstate.ebp+-1744)), op(0x3c))
		i19 = i9
		i17 = i3
		i14 = i1
		i3 =  ((__xasm<int>(push((mstate.ebp+-2466)), op(0x37))))
		i11 = i3
		i3 =  ((__xasm<int>(push((mstate.ebp+-2385)), op(0x37))))
		i16 = i3
		i12 = i1
		i3 =  ((__xasm<int>(push((mstate.ebp+-2475)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2340)), op(0x37))))
		i9 = i1
		i1 =  ((__xasm<int>(push((mstate.ebp+-2331)), op(0x37))))
	__asm(lbl("___vfprintf__XprivateX__BB59_849_F"))
		__asm(push(i17==0), iftrue, target("___vfprintf__XprivateX__BB59_1481_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_850_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_851_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_851_F"))
		i17 =  (45)
		__asm(push(i17), push((mstate.ebp+-1746)), op(0x3a))
	__asm(jump, target("___vfprintf__XprivateX__BB59_852_F"), lbl("___vfprintf__XprivateX__BB59_852_B"), label, lbl("___vfprintf__XprivateX__BB59_852_F")); 
		i20 = i19
		i17 = i16
		i27 = i3
		__asm(push(i20!=2147483647), iftrue, target("___vfprintf__XprivateX__BB59_858_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_853_F"))
		i3 =  ((__xasm<int>(push(i14), op(0x35))))
		__asm(push(i3!=78), iftrue, target("___vfprintf__XprivateX__BB59_855_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_854_F"))
		i3 =  (__2E_str118283)
		i14 =  (__2E_str219284)
		i28 =  (0)
		__asm(push(i28), push((mstate.ebp+-1746)), op(0x3a))
		i3 =  ((i15>96) ? i3 : i14)
		i29 =  (3)
		i15 = i3
		i3 = i10
		i16 = i11
		i10 =  ((__xasm<int>(push((mstate.ebp+-2295)), op(0x37))))
		i19 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2286)), op(0x37))))
		i20 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2268)), op(0x37))))
		i21 = i10
		i14 = i12
		i10 =  ((__xasm<int>(push((mstate.ebp+-2313)), op(0x37))))
		i22 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2304)), op(0x37))))
		i23 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2457)), op(0x37))))
		i24 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2448)), op(0x37))))
		i25 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2439)), op(0x37))))
		i26 = i10
		i11 = i28
		i10 = i29
		i12 = i27
		i27 =  ((__xasm<int>(push((mstate.ebp+-2367)), op(0x37))))
		i28 =  ((__xasm<int>(push((mstate.ebp+-2322)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1158_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_855_F"))
		__asm(push(i15<97), iftrue, target("___vfprintf__XprivateX__BB59_857_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_856_F"))
		i3 =  (__2E_str320285)
		i28 =  (3)
		i29 =  (0)
		i15 = i3
		i3 = i10
		i16 = i11
		i10 =  ((__xasm<int>(push((mstate.ebp+-2295)), op(0x37))))
		i19 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2286)), op(0x37))))
		i20 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2268)), op(0x37))))
		i21 = i10
		i14 = i12
		i10 =  ((__xasm<int>(push((mstate.ebp+-2313)), op(0x37))))
		i22 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2304)), op(0x37))))
		i23 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2457)), op(0x37))))
		i24 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2448)), op(0x37))))
		i25 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2439)), op(0x37))))
		i26 = i10
		i11 = i29
		i10 = i28
		i12 = i27
		i27 =  ((__xasm<int>(push((mstate.ebp+-2367)), op(0x37))))
		i28 =  ((__xasm<int>(push((mstate.ebp+-2322)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1158_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_857_F"))
		i3 =  (__2E_str421)
		i28 =  (3)
		i29 =  (0)
		i15 = i3
		i3 = i10
		i16 = i11
		i10 =  ((__xasm<int>(push((mstate.ebp+-2295)), op(0x37))))
		i19 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2286)), op(0x37))))
		i20 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2268)), op(0x37))))
		i21 = i10
		i14 = i12
		i10 =  ((__xasm<int>(push((mstate.ebp+-2313)), op(0x37))))
		i22 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2304)), op(0x37))))
		i23 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2457)), op(0x37))))
		i24 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2448)), op(0x37))))
		i25 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2439)), op(0x37))))
		i26 = i10
		i11 = i29
		i10 = i28
		i12 = i27
		i27 =  ((__xasm<int>(push((mstate.ebp+-2367)), op(0x37))))
		i28 =  ((__xasm<int>(push((mstate.ebp+-2322)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1158_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_858_F"))
		i3 =  ((__xasm<int>(push((mstate.ebp+-1740)), op(0x37))))
		i21 =  (i3 - i14)
		i3 =  (i10 | 256)
		__asm(push(i15==71), iftrue, target("___vfprintf__XprivateX__BB59_861_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_859_F"))
		__asm(push(i15==103), iftrue, target("___vfprintf__XprivateX__BB59_861_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_860_F"), lbl("___vfprintf__XprivateX__BB59_860_B"), label, lbl("___vfprintf__XprivateX__BB59_860_F")); 
		i10 = i11
		i11 = i17
		__asm(jump, target("___vfprintf__XprivateX__BB59_867_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_861_F"))
		i10 =  (i3 & 1)
		__asm(push(i20<-3), iftrue, target("___vfprintf__XprivateX__BB59_865_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_862_F"))
		__asm(push(i20>i11), iftrue, target("___vfprintf__XprivateX__BB59_865_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_863_F"))
		i10 =  ((i10==0) ? i21 : i11)
		i10 =  (i10 - i20)
		__asm(push(i10<0), iftrue, target("___vfprintf__XprivateX__BB59_893_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_864_F"))
		i11 =  (0)
		__asm(jump, target("___vfprintf__XprivateX__BB59_867_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_865_F"))
		__asm(push(i10!=0), iftrue, target("___vfprintf__XprivateX__BB59_860_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_866_F"))
		i10 = i21
		i11 = i17
	__asm(lbl("___vfprintf__XprivateX__BB59_867_F"))
		i15 =  (i11 & 255)
		__asm(push(i15!=0), iftrue, target("___vfprintf__XprivateX__BB59_869_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_868_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_894_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_869_F"))
		i15 =  ((__xasm<int>(push((mstate.ebp+-2124)), op(0x37))))
		__asm(push(i11), push(i15), op(0x3a))
		i15 =  (i20 + -1)
		__asm(push(i15>-1), iftrue, target("___vfprintf__XprivateX__BB59_879_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_870_F"))
		i15 =  (45)
		i16 =  ((__xasm<int>(push((mstate.ebp+-2106)), op(0x37))))
		__asm(push(i15), push(i16), op(0x3a))
		i15 =  (1 - i20)
		__asm(push(i15>9), iftrue, target("___vfprintf__XprivateX__BB59_875_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_871_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_872_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_872_F"), lbl("___vfprintf__XprivateX__BB59_872_B"), label, lbl("___vfprintf__XprivateX__BB59_872_F")); 
		i16 =  (i11 & 255)
		__asm(push(i16==69), iftrue, target("___vfprintf__XprivateX__BB59_886_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_873_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_873_F"))
		i16 =  (i11 & 255)
		__asm(push(i16==101), iftrue, target("___vfprintf__XprivateX__BB59_886_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_874_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_874_F"))
		i16 =  ((__xasm<int>(push((mstate.ebp+-2115)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_887_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_875_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_876_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_876_F"), lbl("___vfprintf__XprivateX__BB59_876_B"), label, lbl("___vfprintf__XprivateX__BB59_876_F")); 
		i16 =  (-1)
		i17 =  ((__xasm<int>(push((mstate.ebp+-2052)), op(0x37))))
		i17 =  (i17 + 5)
		__asm(jump, target("___vfprintf__XprivateX__BB59_877_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_877_F"), lbl("___vfprintf__XprivateX__BB59_877_B"), label, lbl("___vfprintf__XprivateX__BB59_877_F")); 
		i19 =  (i15 / 10)
		i20 =  (i19 * 10)
		i20 =  (i15 - i20)
		i20 =  (i20 + 48)
		__asm(push(i20), push(i17), op(0x3a))
		i17 =  (i17 + -1)
		i16 =  (i16 + 1)
		__asm(push(i15<100), iftrue, target("___vfprintf__XprivateX__BB59_881_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_878_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_878_F"))
		i15 = i19
		__asm(jump, target("___vfprintf__XprivateX__BB59_877_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_879_F"))
		i16 =  (43)
		i17 =  ((__xasm<int>(push((mstate.ebp+-2106)), op(0x37))))
		__asm(push(i16), push(i17), op(0x3a))
		__asm(push(i15>9), iftrue, target("___vfprintf__XprivateX__BB59_876_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_880_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_872_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_881_F"))
		i15 =  ((mstate.ebp+-208))
		i17 =  (4 - i16)
		i19 =  (i19 + 48)
		i15 =  (i15 + i17)
		__asm(push(i19), push(i15), op(0x3a))
		__asm(push(i17<6), iftrue, target("___vfprintf__XprivateX__BB59_883_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_882_F"))
		i15 =  ((__xasm<int>(push((mstate.ebp+-2115)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_889_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_883_F"))
		i15 =  (0)
		i17 =  ((__xasm<int>(push((mstate.ebp+-2052)), op(0x37))))
		i17 =  (i17 - i16)
		i16 =  (4 - i16)
	__asm(jump, target("___vfprintf__XprivateX__BB59_884_F"), lbl("___vfprintf__XprivateX__BB59_884_B"), label, lbl("___vfprintf__XprivateX__BB59_884_F")); 
		i19 =  (i17 + i15)
		i19 =  ((__xasm<int>(push((i19+4)), op(0x35))))
		i20 =  ((__xasm<int>(push((mstate.ebp+-2205)), op(0x37))))
		i20 =  (i20 + i15)
		__asm(push(i19), push((i20+2)), op(0x3a))
		i15 =  (i15 + 1)
		i19 =  (i16 + i15)
		__asm(push(i19>5), iftrue, target("___vfprintf__XprivateX__BB59_888_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_885_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_884_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_886_F"))
		i16 =  (48)
		i17 =  ((__xasm<int>(push((mstate.ebp+-2115)), op(0x37))))
		__asm(push(i16), push(i17), op(0x3a))
		i16 =  ((__xasm<int>(push((mstate.ebp+-2025)), op(0x37))))
	__asm(lbl("___vfprintf__XprivateX__BB59_887_F"))
		i15 =  (i15 + 48)
		__asm(push(i15), push(i16), op(0x3a))
		i15 =  (i16 + 1)
		__asm(jump, target("___vfprintf__XprivateX__BB59_889_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_888_F"))
		i16 =  ((mstate.ebp+-1736))
		i15 =  (i15 << 0)
		i15 =  (i15 + i16)
		i15 =  (i15 + 2)
	__asm(lbl("___vfprintf__XprivateX__BB59_889_F"))
		i16 =  ((__xasm<int>(push((mstate.ebp+-2205)), op(0x37))))
		i19 =  (i15 - i16)
		i28 =  (i19 + i10)
		__asm(push(i10>1), iftrue, target("___vfprintf__XprivateX__BB59_892_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_890_F"))
		i15 =  (i3 & 1)
		__asm(push(i15!=0), iftrue, target("___vfprintf__XprivateX__BB59_892_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_891_F"))
		i29 =  (0)
		i15 = i14
		i16 = i10
		i17 = i11
		i10 =  ((__xasm<int>(push((mstate.ebp+-2286)), op(0x37))))
		i20 = i10
		i14 = i12
		i10 =  ((__xasm<int>(push((mstate.ebp+-2313)), op(0x37))))
		i22 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2304)), op(0x37))))
		i23 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2457)), op(0x37))))
		i24 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2448)), op(0x37))))
		i25 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2439)), op(0x37))))
		i26 = i10
		i11 = i29
		i10 = i28
		i12 = i27
		i27 =  ((__xasm<int>(push((mstate.ebp+-2367)), op(0x37))))
		i28 =  ((__xasm<int>(push((mstate.ebp+-2322)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1158_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_892_F"))
		i29 =  (0)
		i28 =  (i28 + 1)
		i15 = i14
		i16 = i10
		i17 = i11
		i10 =  ((__xasm<int>(push((mstate.ebp+-2286)), op(0x37))))
		i20 = i10
		i14 = i12
		i10 =  ((__xasm<int>(push((mstate.ebp+-2313)), op(0x37))))
		i22 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2304)), op(0x37))))
		i23 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2457)), op(0x37))))
		i24 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2448)), op(0x37))))
		i25 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2439)), op(0x37))))
		i26 = i10
		i11 = i29
		i10 = i28
		i12 = i27
		i27 =  ((__xasm<int>(push((mstate.ebp+-2367)), op(0x37))))
		i28 =  ((__xasm<int>(push((mstate.ebp+-2322)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1158_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_893_F"))
		i10 =  (0)
		i11 = i10
		__asm(jump, target("___vfprintf__XprivateX__BB59_894_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_894_F"))
		i15 =  ((i20>0) ? i20 : 1)
		__asm(push(i10!=0), iftrue, target("___vfprintf__XprivateX__BB59_897_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_895_F"))
		i16 =  (i3 & 1)
		__asm(push(i16!=0), iftrue, target("___vfprintf__XprivateX__BB59_897_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_896_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_898_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_897_F"))
		i15 =  (i10 + i15)
		i15 =  (i15 + 1)
	__asm(lbl("___vfprintf__XprivateX__BB59_898_F"))
		i28 = i15
		__asm(push(i7==0), iftrue, target("___vfprintf__XprivateX__BB59_900_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_899_F"))
		__asm(push(i20>0), iftrue, target("___vfprintf__XprivateX__BB59_901_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_900_F"))
		i29 =  (0)
		i15 = i14
		i16 = i10
		i17 = i11
		i10 =  ((__xasm<int>(push((mstate.ebp+-2295)), op(0x37))))
		i19 = i10
		i14 = i12
		i10 =  ((__xasm<int>(push((mstate.ebp+-2313)), op(0x37))))
		i22 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2304)), op(0x37))))
		i23 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2457)), op(0x37))))
		i24 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2448)), op(0x37))))
		i25 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2439)), op(0x37))))
		i26 = i10
		i11 = i29
		i10 = i28
		i12 = i27
		i27 =  ((__xasm<int>(push((mstate.ebp+-2367)), op(0x37))))
		i28 =  ((__xasm<int>(push((mstate.ebp+-2322)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1158_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_901_F"))
		i15 =  ((__xasm<int>(push(i7), op(0x35))))
		__asm(push(i15==127), iftrue, target("___vfprintf__XprivateX__BB59_1482_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_902_F"))
		i15 =  (0)
		i16 = i20
		i17 = i15
		__asm(jump, target("___vfprintf__XprivateX__BB59_903_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_903_F"), lbl("___vfprintf__XprivateX__BB59_903_B"), label, lbl("___vfprintf__XprivateX__BB59_903_F")); 
		i19 =  ((__xasm<int>(push(i7), op(0x35), op(0x51))))
		__asm(push(i19<i16), iftrue, target("___vfprintf__XprivateX__BB59_905_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_904_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1483_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_905_F"))
		i20 =  ((__xasm<int>(push((i7+1)), op(0x35))))
		i22 =  ((i20==0) ? 1 : 0)
		i23 =  (i7 + 1)
		i22 =  (i22 & 1)
		i7 =  ((i20==0) ? i7 : i23)
		i20 =  ((__xasm<int>(push(i7), op(0x35))))
		i23 =  (i22 ^ 1)
		i15 =  (i15 + i22)
		i17 =  (i17 + i23)
		i16 =  (i16 - i19)
		__asm(push(i20==127), iftrue, target("___vfprintf__XprivateX__BB59_1483_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_906_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_903_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_907_F"))
		i10 =  (i1 + 4)
		i3 = i1
		i1 = i10
	__asm(lbl("___vfprintf__XprivateX__BB59_908_F"))
		i3 =  ((__xasm<int>(push(i3), op(0x37))))
		i10 =  ((__xasm<int>(push((mstate.ebp+-2277)), op(0x37))))
		i10 =  (i10 >> 31)
		i15 =  ((__xasm<int>(push((mstate.ebp+-2277)), op(0x37))))
		__asm(push(i15), push(i3), op(0x3c))
		__asm(push(i10), push((i3+4)), op(0x3c))
		i9 =  (i9 + 1)
		i3 =  ((__xasm<int>(push((mstate.ebp+-2259)), op(0x37))))
		i8 = i3
		i20 = i15
		i16 = i7
		i24 = i25
		i3 =  ((__xasm<int>(push((mstate.ebp+-2295)), op(0x37))))
		i17 = i3
		i3 =  ((__xasm<int>(push((mstate.ebp+-2286)), op(0x37))))
		i10 =  ((__xasm<int>(push((mstate.ebp+-2268)), op(0x37))))
		i7 = i10
		i10 = i14
		i15 =  ((__xasm<int>(push((mstate.ebp+-2313)), op(0x37))))
		i12 = i15
		i15 =  ((__xasm<int>(push((mstate.ebp+-2304)), op(0x37))))
		i19 = i15
		i15 =  ((__xasm<int>(push((mstate.ebp+-2457)), op(0x37))))
		i22 = i15
		i15 =  ((__xasm<int>(push((mstate.ebp+-2448)), op(0x37))))
		i14 = i15
		i15 =  ((__xasm<int>(push((mstate.ebp+-2439)), op(0x37))))
		i11 =  ((__xasm<int>(push((mstate.ebp+-2475)), op(0x37))))
		i23 = i11
		i11 =  ((__xasm<int>(push((mstate.ebp+-2367)), op(0x37))))
		i21 = i11
		i11 =  ((__xasm<int>(push((mstate.ebp+-2322)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_19_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_909_F"))
		i3 =  (i10 & 1024)
		__asm(push(i3==0), iftrue, target("___vfprintf__XprivateX__BB59_914_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_910_F"))
		i3 =  ((__xasm<int>(push((mstate.ebp+-1540)), op(0x37))))
		__asm(push(i3==0), iftrue, target("___vfprintf__XprivateX__BB59_912_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_911_F"))
		i10 =  (i9 << 3)
		i3 =  (i3 + i10)
		__asm(jump, target("___vfprintf__XprivateX__BB59_913_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_912_F"))
		i10 =  (i1 + 4)
		i3 = i1
		i1 = i10
	__asm(lbl("___vfprintf__XprivateX__BB59_913_F"))
		i3 =  ((__xasm<int>(push(i3), op(0x37))))
		i10 =  ((__xasm<int>(push((mstate.ebp+-2277)), op(0x37))))
		__asm(push(i10), push(i3), op(0x3c))
		i9 =  (i9 + 1)
		i3 =  ((__xasm<int>(push((mstate.ebp+-2259)), op(0x37))))
		i8 = i3
		i20 = i10
		i16 = i7
		i24 = i25
		i3 =  ((__xasm<int>(push((mstate.ebp+-2295)), op(0x37))))
		i17 = i3
		i3 =  ((__xasm<int>(push((mstate.ebp+-2286)), op(0x37))))
		i10 =  ((__xasm<int>(push((mstate.ebp+-2268)), op(0x37))))
		i7 = i10
		i10 = i14
		i15 =  ((__xasm<int>(push((mstate.ebp+-2313)), op(0x37))))
		i12 = i15
		i15 =  ((__xasm<int>(push((mstate.ebp+-2304)), op(0x37))))
		i19 = i15
		i15 =  ((__xasm<int>(push((mstate.ebp+-2457)), op(0x37))))
		i22 = i15
		i15 =  ((__xasm<int>(push((mstate.ebp+-2448)), op(0x37))))
		i14 = i15
		i15 =  ((__xasm<int>(push((mstate.ebp+-2439)), op(0x37))))
		i11 =  ((__xasm<int>(push((mstate.ebp+-2475)), op(0x37))))
		i23 = i11
		i11 =  ((__xasm<int>(push((mstate.ebp+-2367)), op(0x37))))
		i21 = i11
		i11 =  ((__xasm<int>(push((mstate.ebp+-2322)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_19_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_914_F"))
		i3 =  (i10 & 2048)
		__asm(push(i3==0), iftrue, target("___vfprintf__XprivateX__BB59_919_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_915_F"))
		i3 =  ((__xasm<int>(push((mstate.ebp+-1540)), op(0x37))))
		__asm(push(i3==0), iftrue, target("___vfprintf__XprivateX__BB59_917_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_916_F"))
		i10 =  (i9 << 3)
		i3 =  (i3 + i10)
		__asm(jump, target("___vfprintf__XprivateX__BB59_918_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_917_F"))
		i10 =  (i1 + 4)
		i3 = i1
		i1 = i10
	__asm(lbl("___vfprintf__XprivateX__BB59_918_F"))
		i3 =  ((__xasm<int>(push(i3), op(0x37))))
		i10 =  ((__xasm<int>(push((mstate.ebp+-2277)), op(0x37))))
		__asm(push(i10), push(i3), op(0x3c))
		i9 =  (i9 + 1)
		i3 =  ((__xasm<int>(push((mstate.ebp+-2259)), op(0x37))))
		i8 = i3
		i20 = i10
		i16 = i7
		i24 = i25
		i3 =  ((__xasm<int>(push((mstate.ebp+-2295)), op(0x37))))
		i17 = i3
		i3 =  ((__xasm<int>(push((mstate.ebp+-2286)), op(0x37))))
		i10 =  ((__xasm<int>(push((mstate.ebp+-2268)), op(0x37))))
		i7 = i10
		i10 = i14
		i15 =  ((__xasm<int>(push((mstate.ebp+-2313)), op(0x37))))
		i12 = i15
		i15 =  ((__xasm<int>(push((mstate.ebp+-2304)), op(0x37))))
		i19 = i15
		i15 =  ((__xasm<int>(push((mstate.ebp+-2457)), op(0x37))))
		i22 = i15
		i15 =  ((__xasm<int>(push((mstate.ebp+-2448)), op(0x37))))
		i14 = i15
		i15 =  ((__xasm<int>(push((mstate.ebp+-2439)), op(0x37))))
		i11 =  ((__xasm<int>(push((mstate.ebp+-2475)), op(0x37))))
		i23 = i11
		i11 =  ((__xasm<int>(push((mstate.ebp+-2367)), op(0x37))))
		i21 = i11
		i11 =  ((__xasm<int>(push((mstate.ebp+-2322)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_19_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_919_F"))
		i3 =  (i10 & 4096)
		__asm(push(i3==0), iftrue, target("___vfprintf__XprivateX__BB59_924_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_920_F"))
		i3 =  ((__xasm<int>(push((mstate.ebp+-1540)), op(0x37))))
		__asm(push(i3==0), iftrue, target("___vfprintf__XprivateX__BB59_922_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_921_F"))
		i10 =  (i9 << 3)
		i3 =  (i3 + i10)
		__asm(jump, target("___vfprintf__XprivateX__BB59_923_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_922_F"))
		i10 =  (i1 + 4)
		i3 = i1
		i1 = i10
	__asm(lbl("___vfprintf__XprivateX__BB59_923_F"))
		i3 =  ((__xasm<int>(push(i3), op(0x37))))
		i10 =  ((__xasm<int>(push((mstate.ebp+-2277)), op(0x37))))
		i10 =  (i10 >> 31)
		i15 =  ((__xasm<int>(push((mstate.ebp+-2277)), op(0x37))))
		__asm(push(i15), push(i3), op(0x3c))
		__asm(push(i10), push((i3+4)), op(0x3c))
		i9 =  (i9 + 1)
		i3 =  ((__xasm<int>(push((mstate.ebp+-2259)), op(0x37))))
		i8 = i3
		i20 = i15
		i16 = i7
		i24 = i25
		i3 =  ((__xasm<int>(push((mstate.ebp+-2295)), op(0x37))))
		i17 = i3
		i3 =  ((__xasm<int>(push((mstate.ebp+-2286)), op(0x37))))
		i10 =  ((__xasm<int>(push((mstate.ebp+-2268)), op(0x37))))
		i7 = i10
		i10 = i14
		i15 =  ((__xasm<int>(push((mstate.ebp+-2313)), op(0x37))))
		i12 = i15
		i15 =  ((__xasm<int>(push((mstate.ebp+-2304)), op(0x37))))
		i19 = i15
		i15 =  ((__xasm<int>(push((mstate.ebp+-2457)), op(0x37))))
		i22 = i15
		i15 =  ((__xasm<int>(push((mstate.ebp+-2448)), op(0x37))))
		i14 = i15
		i15 =  ((__xasm<int>(push((mstate.ebp+-2439)), op(0x37))))
		i11 =  ((__xasm<int>(push((mstate.ebp+-2475)), op(0x37))))
		i23 = i11
		i11 =  ((__xasm<int>(push((mstate.ebp+-2367)), op(0x37))))
		i21 = i11
		i11 =  ((__xasm<int>(push((mstate.ebp+-2322)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_19_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_924_F"))
		i3 =  (i10 & 16)
		__asm(push(i3==0), iftrue, target("___vfprintf__XprivateX__BB59_929_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_925_F"))
		i3 =  ((__xasm<int>(push((mstate.ebp+-1540)), op(0x37))))
		__asm(push(i3==0), iftrue, target("___vfprintf__XprivateX__BB59_927_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_926_F"))
		i10 =  (i9 << 3)
		i3 =  (i3 + i10)
		__asm(jump, target("___vfprintf__XprivateX__BB59_928_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_927_F"))
		i10 =  (i1 + 4)
		i3 = i1
		i1 = i10
	__asm(lbl("___vfprintf__XprivateX__BB59_928_F"))
		i3 =  ((__xasm<int>(push(i3), op(0x37))))
		i10 =  ((__xasm<int>(push((mstate.ebp+-2277)), op(0x37))))
		__asm(push(i10), push(i3), op(0x3c))
		i9 =  (i9 + 1)
		i3 =  ((__xasm<int>(push((mstate.ebp+-2259)), op(0x37))))
		i8 = i3
		i20 = i10
		i16 = i7
		i24 = i25
		i3 =  ((__xasm<int>(push((mstate.ebp+-2295)), op(0x37))))
		i17 = i3
		i3 =  ((__xasm<int>(push((mstate.ebp+-2286)), op(0x37))))
		i10 =  ((__xasm<int>(push((mstate.ebp+-2268)), op(0x37))))
		i7 = i10
		i10 = i14
		i15 =  ((__xasm<int>(push((mstate.ebp+-2313)), op(0x37))))
		i12 = i15
		i15 =  ((__xasm<int>(push((mstate.ebp+-2304)), op(0x37))))
		i19 = i15
		i15 =  ((__xasm<int>(push((mstate.ebp+-2457)), op(0x37))))
		i22 = i15
		i15 =  ((__xasm<int>(push((mstate.ebp+-2448)), op(0x37))))
		i14 = i15
		i15 =  ((__xasm<int>(push((mstate.ebp+-2439)), op(0x37))))
		i11 =  ((__xasm<int>(push((mstate.ebp+-2475)), op(0x37))))
		i23 = i11
		i11 =  ((__xasm<int>(push((mstate.ebp+-2367)), op(0x37))))
		i21 = i11
		i11 =  ((__xasm<int>(push((mstate.ebp+-2322)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_19_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_929_F"))
		i3 =  (i10 & 64)
		__asm(push(i3==0), iftrue, target("___vfprintf__XprivateX__BB59_934_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_930_F"))
		i3 =  ((__xasm<int>(push((mstate.ebp+-1540)), op(0x37))))
		__asm(push(i3==0), iftrue, target("___vfprintf__XprivateX__BB59_932_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_931_F"))
		i10 =  (i9 << 3)
		i3 =  (i3 + i10)
		__asm(jump, target("___vfprintf__XprivateX__BB59_933_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_932_F"))
		i10 =  (i1 + 4)
		i3 = i1
		i1 = i10
	__asm(lbl("___vfprintf__XprivateX__BB59_933_F"))
		i3 =  ((__xasm<int>(push(i3), op(0x37))))
		i10 =  ((__xasm<int>(push((mstate.ebp+-2277)), op(0x37))))
		__asm(push(i10), push(i3), op(0x3b))
		i9 =  (i9 + 1)
		i3 =  ((__xasm<int>(push((mstate.ebp+-2259)), op(0x37))))
		i8 = i3
		i20 = i10
		i16 = i7
		i24 = i25
		i3 =  ((__xasm<int>(push((mstate.ebp+-2295)), op(0x37))))
		i17 = i3
		i3 =  ((__xasm<int>(push((mstate.ebp+-2286)), op(0x37))))
		i10 =  ((__xasm<int>(push((mstate.ebp+-2268)), op(0x37))))
		i7 = i10
		i10 = i14
		i15 =  ((__xasm<int>(push((mstate.ebp+-2313)), op(0x37))))
		i12 = i15
		i15 =  ((__xasm<int>(push((mstate.ebp+-2304)), op(0x37))))
		i19 = i15
		i15 =  ((__xasm<int>(push((mstate.ebp+-2457)), op(0x37))))
		i22 = i15
		i15 =  ((__xasm<int>(push((mstate.ebp+-2448)), op(0x37))))
		i14 = i15
		i15 =  ((__xasm<int>(push((mstate.ebp+-2439)), op(0x37))))
		i11 =  ((__xasm<int>(push((mstate.ebp+-2475)), op(0x37))))
		i23 = i11
		i11 =  ((__xasm<int>(push((mstate.ebp+-2367)), op(0x37))))
		i21 = i11
		i11 =  ((__xasm<int>(push((mstate.ebp+-2322)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_19_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_934_F"))
		i3 =  ((__xasm<int>(push((mstate.ebp+-1540)), op(0x37))))
		i10 =  (i10 & 8192)
		__asm(push(i10==0), iftrue, target("___vfprintf__XprivateX__BB59_939_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_935_F"))
		__asm(push(i3==0), iftrue, target("___vfprintf__XprivateX__BB59_937_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_936_F"))
		i10 =  (i9 << 3)
		i3 =  (i3 + i10)
		__asm(jump, target("___vfprintf__XprivateX__BB59_938_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_937_F"))
		i10 =  (i1 + 4)
		i3 = i1
		i1 = i10
	__asm(lbl("___vfprintf__XprivateX__BB59_938_F"))
		i3 =  ((__xasm<int>(push(i3), op(0x37))))
		i10 =  ((__xasm<int>(push((mstate.ebp+-2277)), op(0x37))))
		__asm(push(i10), push(i3), op(0x3a))
		i9 =  (i9 + 1)
		i3 =  ((__xasm<int>(push((mstate.ebp+-2259)), op(0x37))))
		i8 = i3
		i20 = i10
		i16 = i7
		i24 = i25
		i3 =  ((__xasm<int>(push((mstate.ebp+-2295)), op(0x37))))
		i17 = i3
		i3 =  ((__xasm<int>(push((mstate.ebp+-2286)), op(0x37))))
		i10 =  ((__xasm<int>(push((mstate.ebp+-2268)), op(0x37))))
		i7 = i10
		i10 = i14
		i15 =  ((__xasm<int>(push((mstate.ebp+-2313)), op(0x37))))
		i12 = i15
		i15 =  ((__xasm<int>(push((mstate.ebp+-2304)), op(0x37))))
		i19 = i15
		i15 =  ((__xasm<int>(push((mstate.ebp+-2457)), op(0x37))))
		i22 = i15
		i15 =  ((__xasm<int>(push((mstate.ebp+-2448)), op(0x37))))
		i14 = i15
		i15 =  ((__xasm<int>(push((mstate.ebp+-2439)), op(0x37))))
		i11 =  ((__xasm<int>(push((mstate.ebp+-2475)), op(0x37))))
		i23 = i11
		i11 =  ((__xasm<int>(push((mstate.ebp+-2367)), op(0x37))))
		i21 = i11
		i11 =  ((__xasm<int>(push((mstate.ebp+-2322)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_19_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_939_F"))
		__asm(push(i3==0), iftrue, target("___vfprintf__XprivateX__BB59_941_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_940_F"))
		i10 =  (i9 << 3)
		i3 =  (i3 + i10)
		__asm(jump, target("___vfprintf__XprivateX__BB59_942_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_941_F"))
		i10 =  (i1 + 4)
		i3 = i1
		i1 = i10
	__asm(lbl("___vfprintf__XprivateX__BB59_942_F"))
		i3 =  ((__xasm<int>(push(i3), op(0x37))))
		i10 =  ((__xasm<int>(push((mstate.ebp+-2277)), op(0x37))))
		__asm(push(i10), push(i3), op(0x3c))
		i9 =  (i9 + 1)
		i3 =  ((__xasm<int>(push((mstate.ebp+-2259)), op(0x37))))
		i8 = i3
		i20 = i10
		i16 = i7
		i24 = i25
		i3 =  ((__xasm<int>(push((mstate.ebp+-2295)), op(0x37))))
		i17 = i3
		i3 =  ((__xasm<int>(push((mstate.ebp+-2286)), op(0x37))))
		i10 =  ((__xasm<int>(push((mstate.ebp+-2268)), op(0x37))))
		i7 = i10
		i10 = i14
		i15 =  ((__xasm<int>(push((mstate.ebp+-2313)), op(0x37))))
		i12 = i15
		i15 =  ((__xasm<int>(push((mstate.ebp+-2304)), op(0x37))))
		i19 = i15
		i15 =  ((__xasm<int>(push((mstate.ebp+-2457)), op(0x37))))
		i22 = i15
		i15 =  ((__xasm<int>(push((mstate.ebp+-2448)), op(0x37))))
		i14 = i15
		i15 =  ((__xasm<int>(push((mstate.ebp+-2439)), op(0x37))))
		i11 =  ((__xasm<int>(push((mstate.ebp+-2475)), op(0x37))))
		i23 = i11
		i11 =  ((__xasm<int>(push((mstate.ebp+-2367)), op(0x37))))
		i21 = i11
		i11 =  ((__xasm<int>(push((mstate.ebp+-2322)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_19_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_943_F"))
		i3 =  (i10 | 16)
	__asm(lbl("___vfprintf__XprivateX__BB59_944_F"))
		i10 =  (i3 & 7200)
		__asm(push(i10==0), iftrue, target("___vfprintf__XprivateX__BB59_960_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_945_F"))
		i10 =  (i3 & 4096)
		__asm(push(i10==0), iftrue, target("___vfprintf__XprivateX__BB59_949_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_946_F"))
		i10 =  ((__xasm<int>(push((mstate.ebp+-1540)), op(0x37))))
		__asm(push(i10==0), iftrue, target("___vfprintf__XprivateX__BB59_948_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_947_F"))
		i15 =  (0)
		i16 =  (i9 << 3)
		i10 =  (i10 + i16)
		i16 =  ((__xasm<int>(push(i10), op(0x37))))
		i10 =  ((__xasm<int>(push((i10+4)), op(0x37))))
		__asm(push(i15), push((mstate.ebp+-1746)), op(0x3a))
		i19 =  (8)
		i9 =  (i9 + 1)
		i15 =  ((__xasm<int>(push((mstate.ebp+-2457)), op(0x37))))
		i17 = i15
		i15 = i16
		i16 = i19
		i19 =  ((__xasm<int>(push((mstate.ebp+-2475)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1103_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_948_F"))
		i10 =  (0)
		i15 =  ((__xasm<int>(push(i1), op(0x37))))
		i16 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		__asm(push(i10), push((mstate.ebp+-1746)), op(0x3a))
		i9 =  (i9 + 1)
		i1 =  (i1 + 8)
		i19 =  (8)
		i10 =  ((__xasm<int>(push((mstate.ebp+-2457)), op(0x37))))
		i17 = i10
		i10 = i16
		i16 = i19
		i19 =  ((__xasm<int>(push((mstate.ebp+-2475)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1103_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_949_F"))
		i10 =  (i3 & 1024)
		__asm(push(i10==0), iftrue, target("___vfprintf__XprivateX__BB59_953_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_950_F"))
		i10 =  ((__xasm<int>(push((mstate.ebp+-1540)), op(0x37))))
		__asm(push(i10==0), iftrue, target("___vfprintf__XprivateX__BB59_952_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_951_F"))
		i16 =  (0)
		i15 =  (i9 << 3)
		i10 =  (i10 + i15)
		i10 =  ((__xasm<int>(push(i10), op(0x37))))
		__asm(push(i16), push((mstate.ebp+-1746)), op(0x3a))
		i19 =  (8)
		i9 =  (i9 + 1)
		i15 =  ((__xasm<int>(push((mstate.ebp+-2457)), op(0x37))))
		i17 = i15
		i15 = i10
		i10 = i16
		i16 = i19
		i19 =  ((__xasm<int>(push((mstate.ebp+-2475)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1103_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_952_F"))
		i10 =  (0)
		i15 =  ((__xasm<int>(push(i1), op(0x37))))
		__asm(push(i10), push((mstate.ebp+-1746)), op(0x3a))
		i16 =  (8)
		i9 =  (i9 + 1)
		i1 =  (i1 + 4)
		i17 =  ((__xasm<int>(push((mstate.ebp+-2457)), op(0x37))))
		i19 =  ((__xasm<int>(push((mstate.ebp+-2475)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1103_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_953_F"))
		i10 =  ((__xasm<int>(push((mstate.ebp+-1540)), op(0x37))))
		i15 =  (i3 & 2048)
		__asm(push(i15==0), iftrue, target("___vfprintf__XprivateX__BB59_957_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_954_F"))
		__asm(push(i10==0), iftrue, target("___vfprintf__XprivateX__BB59_956_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_955_F"))
		i15 =  (0)
		i16 =  (i9 << 3)
		i10 =  (i10 + i16)
		i10 =  ((__xasm<int>(push(i10), op(0x37))))
		__asm(push(i15), push((mstate.ebp+-1746)), op(0x3a))
		i16 =  (i10 >> 31)
		i19 =  (8)
		i9 =  (i9 + 1)
		i15 =  ((__xasm<int>(push((mstate.ebp+-2457)), op(0x37))))
		i17 = i15
		i15 = i10
		i10 = i16
		i16 = i19
		i19 =  ((__xasm<int>(push((mstate.ebp+-2475)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1103_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_956_F"))
		i10 =  (0)
		i15 =  ((__xasm<int>(push(i1), op(0x37))))
		__asm(push(i10), push((mstate.ebp+-1746)), op(0x3a))
		i10 =  (i15 >> 31)
		i16 =  (8)
		i9 =  (i9 + 1)
		i1 =  (i1 + 4)
		i17 =  ((__xasm<int>(push((mstate.ebp+-2457)), op(0x37))))
		i19 =  ((__xasm<int>(push((mstate.ebp+-2475)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1103_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_957_F"))
		__asm(push(i10==0), iftrue, target("___vfprintf__XprivateX__BB59_959_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_958_F"))
		i15 =  (0)
		i16 =  (i9 << 3)
		i10 =  (i10 + i16)
		i16 =  ((__xasm<int>(push(i10), op(0x37))))
		i10 =  ((__xasm<int>(push((i10+4)), op(0x37))))
		__asm(push(i15), push((mstate.ebp+-1746)), op(0x3a))
		i19 =  (8)
		i9 =  (i9 + 1)
		i15 =  ((__xasm<int>(push((mstate.ebp+-2457)), op(0x37))))
		i17 = i15
		i15 = i16
		i16 = i19
		i19 =  ((__xasm<int>(push((mstate.ebp+-2475)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1103_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_959_F"))
		i10 =  (0)
		i15 =  ((__xasm<int>(push(i1), op(0x37))))
		i16 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		__asm(push(i10), push((mstate.ebp+-1746)), op(0x3a))
		i9 =  (i9 + 1)
		i1 =  (i1 + 8)
		i19 =  (8)
		i10 =  ((__xasm<int>(push((mstate.ebp+-2457)), op(0x37))))
		i17 = i10
		i10 = i16
		i16 = i19
		i19 =  ((__xasm<int>(push((mstate.ebp+-2475)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1103_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_960_F"))
		i10 =  (i3 & 16)
		__asm(push(i10==0), iftrue, target("___vfprintf__XprivateX__BB59_964_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_961_F"))
		i10 =  ((__xasm<int>(push((mstate.ebp+-1540)), op(0x37))))
		__asm(push(i10==0), iftrue, target("___vfprintf__XprivateX__BB59_963_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_962_F"))
		i15 =  (0)
		i16 =  (i9 << 3)
		i10 =  (i10 + i16)
		i10 =  ((__xasm<int>(push(i10), op(0x37))))
		__asm(push(i15), push((mstate.ebp+-1746)), op(0x3a))
		i16 =  (8)
		i9 =  (i9 + 1)
		i17 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2448)), op(0x37))))
		i15 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2439)), op(0x37))))
		i19 =  ((__xasm<int>(push((mstate.ebp+-2475)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1103_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_963_F"))
		i10 =  (0)
		i15 =  ((__xasm<int>(push(i1), op(0x37))))
		__asm(push(i10), push((mstate.ebp+-1746)), op(0x3a))
		i16 =  (8)
		i9 =  (i9 + 1)
		i1 =  (i1 + 4)
		i17 = i15
		i10 =  ((__xasm<int>(push((mstate.ebp+-2448)), op(0x37))))
		i15 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2439)), op(0x37))))
		i19 =  ((__xasm<int>(push((mstate.ebp+-2475)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1103_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_964_F"))
		i10 =  (i3 & 64)
		__asm(push(i10==0), iftrue, target("___vfprintf__XprivateX__BB59_968_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_965_F"))
		i10 =  ((__xasm<int>(push((mstate.ebp+-1540)), op(0x37))))
		__asm(push(i10==0), iftrue, target("___vfprintf__XprivateX__BB59_967_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_966_F"))
		i15 =  (0)
		i16 =  (i9 << 3)
		i10 =  (i10 + i16)
		i10 =  ((__xasm<int>(push(i10), op(0x36))))
		__asm(push(i15), push((mstate.ebp+-1746)), op(0x3a))
		i16 =  (8)
		i9 =  (i9 + 1)
		i17 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2448)), op(0x37))))
		i15 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2439)), op(0x37))))
		i19 =  ((__xasm<int>(push((mstate.ebp+-2475)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1103_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_967_F"))
		i10 =  (0)
		i15 =  ((__xasm<int>(push(i1), op(0x36))))
		__asm(push(i10), push((mstate.ebp+-1746)), op(0x3a))
		i16 =  (8)
		i9 =  (i9 + 1)
		i1 =  (i1 + 4)
		i17 = i15
		i10 =  ((__xasm<int>(push((mstate.ebp+-2448)), op(0x37))))
		i15 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2439)), op(0x37))))
		i19 =  ((__xasm<int>(push((mstate.ebp+-2475)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1103_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_968_F"))
		i10 =  ((__xasm<int>(push((mstate.ebp+-1540)), op(0x37))))
		i15 =  (i3 & 8192)
		__asm(push(i15==0), iftrue, target("___vfprintf__XprivateX__BB59_972_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_969_F"))
		__asm(push(i10==0), iftrue, target("___vfprintf__XprivateX__BB59_971_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_970_F"))
		i15 =  (0)
		i16 =  (i9 << 3)
		i10 =  (i10 + i16)
		i10 =  ((__xasm<int>(push(i10), op(0x35))))
		__asm(push(i15), push((mstate.ebp+-1746)), op(0x3a))
		i16 =  (8)
		i9 =  (i9 + 1)
		i17 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2448)), op(0x37))))
		i15 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2439)), op(0x37))))
		i19 =  ((__xasm<int>(push((mstate.ebp+-2475)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1103_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_971_F"))
		i10 =  (0)
		i15 =  ((__xasm<int>(push(i1), op(0x35))))
		__asm(push(i10), push((mstate.ebp+-1746)), op(0x3a))
		i16 =  (8)
		i9 =  (i9 + 1)
		i1 =  (i1 + 4)
		i17 = i15
		i10 =  ((__xasm<int>(push((mstate.ebp+-2448)), op(0x37))))
		i15 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2439)), op(0x37))))
		i19 =  ((__xasm<int>(push((mstate.ebp+-2475)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1103_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_972_F"))
		__asm(push(i10==0), iftrue, target("___vfprintf__XprivateX__BB59_974_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_973_F"))
		i15 =  (0)
		i16 =  (i9 << 3)
		i10 =  (i10 + i16)
		i10 =  ((__xasm<int>(push(i10), op(0x37))))
		__asm(push(i15), push((mstate.ebp+-1746)), op(0x3a))
		i16 =  (8)
		i9 =  (i9 + 1)
		i17 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2448)), op(0x37))))
		i15 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2439)), op(0x37))))
		i19 =  ((__xasm<int>(push((mstate.ebp+-2475)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1103_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_974_F"))
		i10 =  (0)
		i15 =  ((__xasm<int>(push(i1), op(0x37))))
		__asm(push(i10), push((mstate.ebp+-1746)), op(0x3a))
		i16 =  (8)
		i9 =  (i9 + 1)
		i1 =  (i1 + 4)
		i17 = i15
		i10 =  ((__xasm<int>(push((mstate.ebp+-2448)), op(0x37))))
		i15 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2439)), op(0x37))))
		i19 =  ((__xasm<int>(push((mstate.ebp+-2475)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1103_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_975_F"))
		i3 =  ((__xasm<int>(push((mstate.ebp+-1540)), op(0x37))))
		__asm(push(i3==0), iftrue, target("___vfprintf__XprivateX__BB59_977_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_976_F"))
		i15 =  (i9 << 3)
		i3 =  (i3 + i15)
		__asm(jump, target("___vfprintf__XprivateX__BB59_978_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_977_F"))
		i15 =  (i1 + 4)
		i3 = i1
		i1 = i15
	__asm(lbl("___vfprintf__XprivateX__BB59_978_F"))
		i15 =  (120)
		i16 =  ((__xasm<int>(push(i3), op(0x37))))
		i3 =  ((__xasm<int>(push((mstate.ebp+-2178)), op(0x37))))
		__asm(push(i15), push(i3), op(0x3a))
		i19 =  (0)
		__asm(push(i19), push((mstate.ebp+-1746)), op(0x3a))
		i20 =  (_xdigs_lower_2E_4528)
		i21 =  (16)
		i9 =  (i9 + 1)
		i3 =  (i10 | 4096)
		i10 =  ((__xasm<int>(push((mstate.ebp+-2457)), op(0x37))))
		i17 = i10
		i15 = i16
		i10 = i19
		i16 = i21
		i19 = i20
		__asm(jump, target("___vfprintf__XprivateX__BB59_1103_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_979_F"))
		i3 =  (i10 | 16)
	__asm(lbl("___vfprintf__XprivateX__BB59_980_F"))
		i10 =  (i3 & 16)
		__asm(push(i10==0), iftrue, target("___vfprintf__XprivateX__BB59_1013_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_981_F"))
		i10 =  ((__xasm<int>(push((mstate.ebp+-2367)), op(0x37))))
		__asm(push(i10==0), iftrue, target("___vfprintf__XprivateX__BB59_983_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_982_F"))
		i10 =  (0)
		mstate.esp -= 8
		i15 =  ((__xasm<int>(push((mstate.ebp+-2367)), op(0x37))))
		__asm(push(i15), push(mstate.esp), op(0x3c))
		__asm(push(i10), push((mstate.esp+4)), op(0x3c))
		state = 62
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("___vfprintf_state62"))
		i10 = mstate.eax
		mstate.esp += 8
	__asm(lbl("___vfprintf__XprivateX__BB59_983_F"))
		i10 =  ((__xasm<int>(push((mstate.ebp+-1540)), op(0x37))))
		__asm(push(i10==0), iftrue, target("___vfprintf__XprivateX__BB59_985_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_984_F"))
		i15 =  (i9 << 3)
		i10 =  (i10 + i15)
		__asm(jump, target("___vfprintf__XprivateX__BB59_986_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_985_F"))
		i15 =  (i1 + 4)
		i10 = i1
		i1 = i15
	__asm(lbl("___vfprintf__XprivateX__BB59_986_F"))
		i10 =  ((__xasm<int>(push(i10), op(0x37))))
		i9 =  (i9 + 1)
		__asm(push(i10!=0), iftrue, target("___vfprintf__XprivateX__BB59_988_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_987_F"))
		i10 =  (__2E_str522)
		i15 =  ((__xasm<int>(push((mstate.ebp+-2367)), op(0x37))))
		i12 =  ((__xasm<int>(push((mstate.ebp+-2322)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1019_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_988_F"))
		i15 =  (_initial_2E_2136)
		__asm(push(i10), push((mstate.ebp+-196)), op(0x3c))
		i12 =  ((__xasm<int>(push((mstate.ebp+-2061)), op(0x37))))
		i16 =  (128)
		memcpy(i12, i15, i16)
		__asm(push(i11<0), iftrue, target("___vfprintf__XprivateX__BB59_994_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_989_F"))
		i15 =  (0)
	__asm(jump, target("___vfprintf__XprivateX__BB59_990_F"), lbl("___vfprintf__XprivateX__BB59_990_B"), label, lbl("___vfprintf__XprivateX__BB59_990_F")); 
		i12 =  ((mstate.ebp+-176))
		i16 =  ((__xasm<int>(push((mstate.ebp+-196)), op(0x37))))
		i17 =  ((__xasm<int>(push(i16), op(0x37))))
		i16 =  (i16 + 4)
		__asm(push(i16), push((mstate.ebp+-196)), op(0x3c))
		mstate.esp -= 12
		i16 =  ((__xasm<int>(push((mstate.ebp+-2196)), op(0x37))))
		__asm(push(i16), push(mstate.esp), op(0x3c))
		__asm(push(i17), push((mstate.esp+4)), op(0x3c))
		__asm(push(i12), push((mstate.esp+8)), op(0x3c))
		mstate.esp -= 4;FSM__UTF8_wcrtomb.start()
	__asm(lbl("___vfprintf_state63"))
		i12 = mstate.eax
		mstate.esp += 12
		i16 =  (i12 + -1)
		__asm(push(uint(i16)<uint(-2)), iftrue, target("___vfprintf__XprivateX__BB59_992_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_991_F"), lbl("___vfprintf__XprivateX__BB59_991_B"), label, lbl("___vfprintf__XprivateX__BB59_991_F")); 
		__asm(jump, target("___vfprintf__XprivateX__BB59_996_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_992_F"))
		i16 =  (i12 + i15)
		__asm(push(uint(i16)>uint(i11)), iftrue, target("___vfprintf__XprivateX__BB59_991_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_993_F"))
		i15 = i16
		__asm(jump, target("___vfprintf__XprivateX__BB59_990_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_994_F"))
		i15 =  ((mstate.ebp+-176))
		mstate.esp -= 20
		i12 =  (0)
		i16 =  (-1)
		i17 =  ((mstate.ebp+-196))
		__asm(push(i12), push(mstate.esp), op(0x3c))
		__asm(push(i17), push((mstate.esp+4)), op(0x3c))
		__asm(push(i16), push((mstate.esp+8)), op(0x3c))
		__asm(push(i12), push((mstate.esp+12)), op(0x3c))
		__asm(push(i15), push((mstate.esp+16)), op(0x3c))
		mstate.esp -= 4;FSM__UTF8_wcsnrtombs.start()
	__asm(lbl("___vfprintf_state64"))
		i15 = mstate.eax
		mstate.esp += 20
		__asm(push(i15==-1), iftrue, target("___vfprintf__XprivateX__BB59_1484_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_995_F"))
		i12 =  ((__xasm<int>(push((mstate.ebp+-2322)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_996_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_996_F"))
		i16 =  (0)
		mstate.esp -= 8
		i17 =  (i15 + 1)
		__asm(push(i16), push(mstate.esp), op(0x3c))
		__asm(push(i17), push((mstate.esp+4)), op(0x3c))
		state = 65
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("___vfprintf_state65"))
		i16 = mstate.eax
		mstate.esp += 8
		__asm(push(i16!=0), iftrue, target("___vfprintf__XprivateX__BB59_998_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_997_F"))
		i10 =  (0)
		i15 = i12
		__asm(jump, target("___vfprintf__XprivateX__BB59_1009_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_998_F"))
		i17 =  (_initial_2E_2136)
		__asm(push(i10), push((mstate.ebp+-196)), op(0x3c))
		i10 =  ((__xasm<int>(push((mstate.ebp+-2061)), op(0x37))))
		i19 =  (128)
		memcpy(i10, i17, i19)
		i10 = i16
		__asm(push(i15==0), iftrue, target("___vfprintf__XprivateX__BB59_1005_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_999_F"))
		i12 =  (0)
		__asm(jump, target("___vfprintf__XprivateX__BB59_1000_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_1000_F"), lbl("___vfprintf__XprivateX__BB59_1000_B"), label, lbl("___vfprintf__XprivateX__BB59_1000_F")); 
		i17 =  ((mstate.ebp+-176))
		i19 =  ((__xasm<int>(push((mstate.ebp+-196)), op(0x37))))
		i20 =  ((__xasm<int>(push(i19), op(0x37))))
		i19 =  (i19 + 4)
		__asm(push(i19), push((mstate.ebp+-196)), op(0x3c))
		mstate.esp -= 12
		i19 =  (i16 + i12)
		__asm(push(i19), push(mstate.esp), op(0x3c))
		__asm(push(i20), push((mstate.esp+4)), op(0x3c))
		__asm(push(i17), push((mstate.esp+8)), op(0x3c))
		mstate.esp -= 4;FSM__UTF8_wcrtomb.start()
	__asm(lbl("___vfprintf_state66"))
		i17 = mstate.eax
		mstate.esp += 12
		i20 =  (i17 + -1)
		__asm(push(uint(i20)<uint(-2)), iftrue, target("___vfprintf__XprivateX__BB59_1002_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1001_F"))
		i10 = i19
		i15 = i17
		__asm(jump, target("___vfprintf__XprivateX__BB59_1006_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1002_F"))
		i12 =  (i12 + i17)
		i19 =  (i16 + i12)
		i20 =  (i19 - i10)
		__asm(push(uint(i20)<uint(i15)), iftrue, target("___vfprintf__XprivateX__BB59_1004_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1003_F"))
		i10 = i19
		i15 = i17
		__asm(jump, target("___vfprintf__XprivateX__BB59_1006_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1004_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1000_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1005_F"))
		i10 = i16
		i15 = i12
		__asm(jump, target("___vfprintf__XprivateX__BB59_1006_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1006_F"))
		__asm(push(i15!=-1), iftrue, target("___vfprintf__XprivateX__BB59_1008_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1007_F"))
		i3 =  (0)
		mstate.esp -= 8
		__asm(push(i16), push(mstate.esp), op(0x3c))
		__asm(push(i3), push((mstate.esp+4)), op(0x3c))
		state = 67
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("___vfprintf_state67"))
		i1 = mstate.eax
		mstate.esp += 8
		__asm(jump, target("___vfprintf__XprivateX__BB59_1012_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1008_F"))
		i12 =  (0)
		__asm(push(i12), push(i10), op(0x3a))
		i10 = i16
	__asm(jump, target("___vfprintf__XprivateX__BB59_1009_F"), lbl("___vfprintf__XprivateX__BB59_1009_B"), label, lbl("___vfprintf__XprivateX__BB59_1009_F")); 
		i12 = i15
		i15 = i10
		__asm(push(i15==0), iftrue, target("___vfprintf__XprivateX__BB59_1011_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1010_F"))
		i10 = i15
		__asm(jump, target("___vfprintf__XprivateX__BB59_1019_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1011_F"))
		i3 = i15
	__asm(lbl("___vfprintf__XprivateX__BB59_1012_F"))
		i1 =  ((__xasm<int>(push((mstate.ebp+-1971)), op(0x37))))
		i1 =  ((__xasm<int>(push(i1), op(0x36))))
		i1 =  (i1 | 64)
		i0 =  ((__xasm<int>(push((mstate.ebp+-1971)), op(0x37))))
		__asm(push(i1), push(i0), op(0x3b))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2277)), op(0x37))))
		i6 = i1
		i8 = i14
		i0 = i3
		__asm(jump, target("___vfprintf__XprivateX__BB59_1449_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1013_F"))
		i10 =  ((__xasm<int>(push((mstate.ebp+-1540)), op(0x37))))
		__asm(push(i10==0), iftrue, target("___vfprintf__XprivateX__BB59_1015_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1014_F"))
		i15 =  (i9 << 3)
		i10 =  (i10 + i15)
		__asm(jump, target("___vfprintf__XprivateX__BB59_1016_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1015_F"))
		i15 =  (i1 + 4)
		i10 = i1
		i1 = i15
	__asm(lbl("___vfprintf__XprivateX__BB59_1016_F"))
		i10 =  ((__xasm<int>(push(i10), op(0x37))))
		i9 =  (i9 + 1)
		__asm(push(i10==0), iftrue, target("___vfprintf__XprivateX__BB59_1018_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1017_F"))
		i15 =  ((__xasm<int>(push((mstate.ebp+-2367)), op(0x37))))
		i12 =  ((__xasm<int>(push((mstate.ebp+-2322)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1019_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1018_F"))
		i10 =  (__2E_str522)
		i15 =  ((__xasm<int>(push((mstate.ebp+-2367)), op(0x37))))
		i12 =  ((__xasm<int>(push((mstate.ebp+-2322)), op(0x37))))
	__asm(lbl("___vfprintf__XprivateX__BB59_1019_F"))
		i27 = i15
		i28 = i12
		i15 = i10
		__asm(push(i11<0), iftrue, target("___vfprintf__XprivateX__BB59_1032_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1020_F"))
		__asm(push(i11!=0), iftrue, target("___vfprintf__XprivateX__BB59_1026_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_1021_F"), lbl("___vfprintf__XprivateX__BB59_1021_B"), label, lbl("___vfprintf__XprivateX__BB59_1021_F")); 
		i15 =  (0)
		__asm(jump, target("___vfprintf__XprivateX__BB59_1022_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_1022_F"), lbl("___vfprintf__XprivateX__BB59_1022_B"), label, lbl("___vfprintf__XprivateX__BB59_1022_F")); 
		__asm(push(i15==0), iftrue, target("___vfprintf__XprivateX__BB59_1031_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1023_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1023_F"))
		i15 =  (i15 - i10)
		__asm(push(i15>i11), iftrue, target("___vfprintf__XprivateX__BB59_1031_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1024_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1024_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1025_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_1025_F"), lbl("___vfprintf__XprivateX__BB59_1025_B"), label, lbl("___vfprintf__XprivateX__BB59_1025_F")); 
		i12 = i15
		i29 =  (0)
		__asm(push(i29), push((mstate.ebp+-1746)), op(0x3a))
		i15 = i10
		i16 = i11
		i17 = i25
		i10 =  ((__xasm<int>(push((mstate.ebp+-2295)), op(0x37))))
		i19 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2286)), op(0x37))))
		i20 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2268)), op(0x37))))
		i21 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2313)), op(0x37))))
		i22 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2304)), op(0x37))))
		i23 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2457)), op(0x37))))
		i24 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2448)), op(0x37))))
		i25 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2439)), op(0x37))))
		i26 = i10
		i11 = i29
		i10 = i12
		i12 =  ((__xasm<int>(push((mstate.ebp+-2475)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1158_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1026_F"))
		i12 =  (i11 + 1)
	__asm(jump, target("___vfprintf__XprivateX__BB59_1027_F"), lbl("___vfprintf__XprivateX__BB59_1027_B"), label, lbl("___vfprintf__XprivateX__BB59_1027_F")); 
		i16 =  ((__xasm<int>(push(i15), op(0x35))))
		i17 = i15
		__asm(push(i16!=0), iftrue, target("___vfprintf__XprivateX__BB59_1029_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1028_F"))
		i15 = i17
		__asm(jump, target("___vfprintf__XprivateX__BB59_1022_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1029_F"))
		i12 =  (i12 + -1)
		i15 =  (i15 + 1)
		__asm(push(i12==1), iftrue, target("___vfprintf__XprivateX__BB59_1021_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1030_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1027_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1031_F"))
		i15 = i11
		__asm(jump, target("___vfprintf__XprivateX__BB59_1025_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1032_F"))
		i12 =  ((__xasm<int>(push(i10), op(0x35))))
		__asm(push(i12==0), iftrue, target("___vfprintf__XprivateX__BB59_1485_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1033_F"))
		i12 = i15
		__asm(jump, target("___vfprintf__XprivateX__BB59_1034_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_1034_F"), lbl("___vfprintf__XprivateX__BB59_1034_B"), label, lbl("___vfprintf__XprivateX__BB59_1034_F")); 
		i16 =  ((__xasm<int>(push((i12+1)), op(0x35))))
		i12 =  (i12 + 1)
		i17 = i12
		__asm(push(i16==0), iftrue, target("___vfprintf__XprivateX__BB59_1486_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1035_F"))
		i12 = i17
		__asm(jump, target("___vfprintf__XprivateX__BB59_1034_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1036_F"))
		i10 =  (0)
		i15 =  ((__xasm<int>(push(i1), op(0x37))))
		i16 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		__asm(push(i10), push((mstate.ebp+-1746)), op(0x3a))
		i19 =  (10)
		i9 =  (i9 + 1)
		i1 =  (i1 + 8)
		i10 =  ((__xasm<int>(push((mstate.ebp+-2457)), op(0x37))))
		i17 = i10
		i10 = i16
		i16 = i19
		i19 =  ((__xasm<int>(push((mstate.ebp+-2475)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1103_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1037_F"))
		i10 =  (i3 & 1024)
		__asm(push(i10==0), iftrue, target("___vfprintf__XprivateX__BB59_1041_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1038_F"))
		i10 =  ((__xasm<int>(push((mstate.ebp+-1540)), op(0x37))))
		__asm(push(i10==0), iftrue, target("___vfprintf__XprivateX__BB59_1040_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1039_F"))
		i16 =  (0)
		i15 =  (i9 << 3)
		i10 =  (i10 + i15)
		i10 =  ((__xasm<int>(push(i10), op(0x37))))
		__asm(push(i16), push((mstate.ebp+-1746)), op(0x3a))
		i19 =  (10)
		i9 =  (i9 + 1)
		i15 =  ((__xasm<int>(push((mstate.ebp+-2457)), op(0x37))))
		i17 = i15
		i15 = i10
		i10 = i16
		i16 = i19
		i19 =  ((__xasm<int>(push((mstate.ebp+-2475)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1103_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1040_F"))
		i10 =  (0)
		i15 =  ((__xasm<int>(push(i1), op(0x37))))
		__asm(push(i10), push((mstate.ebp+-1746)), op(0x3a))
		i16 =  (10)
		i9 =  (i9 + 1)
		i1 =  (i1 + 4)
		i17 =  ((__xasm<int>(push((mstate.ebp+-2457)), op(0x37))))
		i19 =  ((__xasm<int>(push((mstate.ebp+-2475)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1103_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1041_F"))
		i10 =  ((__xasm<int>(push((mstate.ebp+-1540)), op(0x37))))
		i15 =  (i3 & 2048)
		__asm(push(i15==0), iftrue, target("___vfprintf__XprivateX__BB59_1045_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1042_F"))
		__asm(push(i10==0), iftrue, target("___vfprintf__XprivateX__BB59_1044_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1043_F"))
		i15 =  (0)
		i16 =  (i9 << 3)
		i10 =  (i10 + i16)
		i10 =  ((__xasm<int>(push(i10), op(0x37))))
		__asm(push(i15), push((mstate.ebp+-1746)), op(0x3a))
		i16 =  (i10 >> 31)
		i19 =  (10)
		i9 =  (i9 + 1)
		i15 =  ((__xasm<int>(push((mstate.ebp+-2457)), op(0x37))))
		i17 = i15
		i15 = i10
		i10 = i16
		i16 = i19
		i19 =  ((__xasm<int>(push((mstate.ebp+-2475)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1103_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1044_F"))
		i10 =  (0)
		i15 =  ((__xasm<int>(push(i1), op(0x37))))
		__asm(push(i10), push((mstate.ebp+-1746)), op(0x3a))
		i10 =  (i15 >> 31)
		i16 =  (10)
		i9 =  (i9 + 1)
		i1 =  (i1 + 4)
		i17 =  ((__xasm<int>(push((mstate.ebp+-2457)), op(0x37))))
		i19 =  ((__xasm<int>(push((mstate.ebp+-2475)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1103_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1045_F"))
		__asm(push(i10==0), iftrue, target("___vfprintf__XprivateX__BB59_1047_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1046_F"))
		i15 =  (0)
		i16 =  (i9 << 3)
		i10 =  (i10 + i16)
		i16 =  ((__xasm<int>(push(i10), op(0x37))))
		i10 =  ((__xasm<int>(push((i10+4)), op(0x37))))
		__asm(push(i15), push((mstate.ebp+-1746)), op(0x3a))
		i19 =  (10)
		i9 =  (i9 + 1)
		i15 =  ((__xasm<int>(push((mstate.ebp+-2457)), op(0x37))))
		i17 = i15
		i15 = i16
		i16 = i19
		i19 =  ((__xasm<int>(push((mstate.ebp+-2475)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1103_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1047_F"))
		i10 =  (0)
		i15 =  ((__xasm<int>(push(i1), op(0x37))))
		i16 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		__asm(push(i10), push((mstate.ebp+-1746)), op(0x3a))
		i19 =  (10)
		i9 =  (i9 + 1)
		i1 =  (i1 + 8)
		i10 =  ((__xasm<int>(push((mstate.ebp+-2457)), op(0x37))))
		i17 = i10
		i10 = i16
		i16 = i19
		i19 =  ((__xasm<int>(push((mstate.ebp+-2475)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1103_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1048_F"))
		i10 =  (i3 & 16)
		__asm(push(i10==0), iftrue, target("___vfprintf__XprivateX__BB59_1052_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1049_F"))
		i10 =  ((__xasm<int>(push((mstate.ebp+-1540)), op(0x37))))
		__asm(push(i10==0), iftrue, target("___vfprintf__XprivateX__BB59_1051_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1050_F"))
		i15 =  (0)
		i16 =  (i9 << 3)
		i10 =  (i10 + i16)
		i10 =  ((__xasm<int>(push(i10), op(0x37))))
		__asm(push(i15), push((mstate.ebp+-1746)), op(0x3a))
		i16 =  (10)
		i9 =  (i9 + 1)
		i17 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2448)), op(0x37))))
		i15 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2439)), op(0x37))))
		i19 =  ((__xasm<int>(push((mstate.ebp+-2475)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1103_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1051_F"))
		i10 =  (0)
		i15 =  ((__xasm<int>(push(i1), op(0x37))))
		__asm(push(i10), push((mstate.ebp+-1746)), op(0x3a))
		i16 =  (10)
		i9 =  (i9 + 1)
		i1 =  (i1 + 4)
		i17 = i15
		i10 =  ((__xasm<int>(push((mstate.ebp+-2448)), op(0x37))))
		i15 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2439)), op(0x37))))
		i19 =  ((__xasm<int>(push((mstate.ebp+-2475)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1103_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1052_F"))
		i10 =  (i3 & 64)
		__asm(push(i10==0), iftrue, target("___vfprintf__XprivateX__BB59_1056_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1053_F"))
		i10 =  ((__xasm<int>(push((mstate.ebp+-1540)), op(0x37))))
		__asm(push(i10==0), iftrue, target("___vfprintf__XprivateX__BB59_1055_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1054_F"))
		i15 =  (0)
		i16 =  (i9 << 3)
		i10 =  (i10 + i16)
		i10 =  ((__xasm<int>(push(i10), op(0x36))))
		__asm(push(i15), push((mstate.ebp+-1746)), op(0x3a))
		i16 =  (10)
		i9 =  (i9 + 1)
		i17 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2448)), op(0x37))))
		i15 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2439)), op(0x37))))
		i19 =  ((__xasm<int>(push((mstate.ebp+-2475)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1103_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1055_F"))
		i10 =  (0)
		i15 =  ((__xasm<int>(push(i1), op(0x36))))
		__asm(push(i10), push((mstate.ebp+-1746)), op(0x3a))
		i16 =  (10)
		i9 =  (i9 + 1)
		i1 =  (i1 + 4)
		i17 = i15
		i10 =  ((__xasm<int>(push((mstate.ebp+-2448)), op(0x37))))
		i15 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2439)), op(0x37))))
		i19 =  ((__xasm<int>(push((mstate.ebp+-2475)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1103_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1056_F"))
		i10 =  ((__xasm<int>(push((mstate.ebp+-1540)), op(0x37))))
		i15 =  (i3 & 8192)
		__asm(push(i15==0), iftrue, target("___vfprintf__XprivateX__BB59_1060_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1057_F"))
		__asm(push(i10==0), iftrue, target("___vfprintf__XprivateX__BB59_1059_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1058_F"))
		i15 =  (0)
		i16 =  (i9 << 3)
		i10 =  (i10 + i16)
		i10 =  ((__xasm<int>(push(i10), op(0x35))))
		__asm(push(i15), push((mstate.ebp+-1746)), op(0x3a))
		i16 =  (10)
		i9 =  (i9 + 1)
		i17 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2448)), op(0x37))))
		i15 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2439)), op(0x37))))
		i19 =  ((__xasm<int>(push((mstate.ebp+-2475)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1103_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1059_F"))
		i10 =  (0)
		i15 =  ((__xasm<int>(push(i1), op(0x35))))
		__asm(push(i10), push((mstate.ebp+-1746)), op(0x3a))
		i16 =  (10)
		i9 =  (i9 + 1)
		i1 =  (i1 + 4)
		i17 = i15
		i10 =  ((__xasm<int>(push((mstate.ebp+-2448)), op(0x37))))
		i15 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2439)), op(0x37))))
		i19 =  ((__xasm<int>(push((mstate.ebp+-2475)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1103_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1060_F"))
		__asm(push(i10==0), iftrue, target("___vfprintf__XprivateX__BB59_1062_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1061_F"))
		i15 =  (0)
		i16 =  (i9 << 3)
		i10 =  (i10 + i16)
		i10 =  ((__xasm<int>(push(i10), op(0x37))))
		__asm(push(i15), push((mstate.ebp+-1746)), op(0x3a))
		i16 =  (10)
		i9 =  (i9 + 1)
		i17 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2448)), op(0x37))))
		i15 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2439)), op(0x37))))
		i19 =  ((__xasm<int>(push((mstate.ebp+-2475)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1103_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1062_F"))
		i10 =  (0)
		i15 =  ((__xasm<int>(push(i1), op(0x37))))
		__asm(push(i10), push((mstate.ebp+-1746)), op(0x3a))
		i16 =  (10)
		i9 =  (i9 + 1)
		i1 =  (i1 + 4)
		i17 = i15
		i10 =  ((__xasm<int>(push((mstate.ebp+-2448)), op(0x37))))
		i15 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2439)), op(0x37))))
		i19 =  ((__xasm<int>(push((mstate.ebp+-2475)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1103_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1063_F"))
		i3 =  (_xdigs_lower_2E_4528)
	__asm(lbl("___vfprintf__XprivateX__BB59_1064_F"))
		i19 = i3
		i3 =  (i10 & 7200)
		__asm(push(i3==0), iftrue, target("___vfprintf__XprivateX__BB59_1082_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1065_F"))
		i16 =  (i10 & 4096)
		__asm(push(i16==0), iftrue, target("___vfprintf__XprivateX__BB59_1071_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1066_F"))
		i16 =  ((__xasm<int>(push((mstate.ebp+-1540)), op(0x37))))
		__asm(push(i16==0), iftrue, target("___vfprintf__XprivateX__BB59_1070_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1067_F"))
		i17 =  (i9 << 3)
		i16 =  (i16 + i17)
		i17 =  ((__xasm<int>(push(i16), op(0x37))))
		i16 =  ((__xasm<int>(push((i16+4)), op(0x37))))
		i20 =  (i10 & 1)
		__asm(push(i20==0), iftrue, target("___vfprintf__XprivateX__BB59_1069_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1068_F"))
		i20 =  ((__xasm<int>(push((mstate.ebp+-2457)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1099_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1069_F"))
		i3 =  ((__xasm<int>(push((mstate.ebp+-2457)), op(0x37))))
		i15 = i17
		__asm(jump, target("___vfprintf__XprivateX__BB59_1102_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1070_F"))
		i16 =  ((__xasm<int>(push(i1), op(0x37))))
		i17 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		i1 =  (i1 + 8)
		i20 =  ((__xasm<int>(push((mstate.ebp+-2457)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1097_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1071_F"))
		i16 =  (i10 & 1024)
		__asm(push(i16==0), iftrue, target("___vfprintf__XprivateX__BB59_1075_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1072_F"))
		i16 =  ((__xasm<int>(push((mstate.ebp+-1540)), op(0x37))))
		__asm(push(i16==0), iftrue, target("___vfprintf__XprivateX__BB59_1074_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1073_F"))
		i17 =  (0)
		i20 =  (i9 << 3)
		i16 =  (i16 + i20)
		i16 =  ((__xasm<int>(push(i16), op(0x37))))
		i20 =  ((__xasm<int>(push((mstate.ebp+-2457)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1097_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1074_F"))
		i17 =  (0)
		i16 =  ((__xasm<int>(push(i1), op(0x37))))
		i1 =  (i1 + 4)
		i20 =  ((__xasm<int>(push((mstate.ebp+-2457)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1097_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1075_F"))
		i16 =  ((__xasm<int>(push((mstate.ebp+-1540)), op(0x37))))
		i17 =  (i10 & 2048)
		__asm(push(i17==0), iftrue, target("___vfprintf__XprivateX__BB59_1079_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1076_F"))
		__asm(push(i16==0), iftrue, target("___vfprintf__XprivateX__BB59_1078_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1077_F"))
		i17 =  (i9 << 3)
		i16 =  (i16 + i17)
		i16 =  ((__xasm<int>(push(i16), op(0x37))))
		i17 =  (i16 >> 31)
		i20 =  ((__xasm<int>(push((mstate.ebp+-2457)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1097_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1078_F"))
		i16 =  ((__xasm<int>(push(i1), op(0x37))))
		i17 =  (i16 >> 31)
		i1 =  (i1 + 4)
		i20 =  ((__xasm<int>(push((mstate.ebp+-2457)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1097_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1079_F"))
		__asm(push(i16==0), iftrue, target("___vfprintf__XprivateX__BB59_1081_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1080_F"))
		i17 =  (i9 << 3)
		i16 =  (i16 + i17)
		i17 =  ((__xasm<int>(push(i16), op(0x37))))
		i21 =  ((__xasm<int>(push((i16+4)), op(0x37))))
		i16 =  ((__xasm<int>(push((mstate.ebp+-2457)), op(0x37))))
		i20 = i16
		i16 = i17
		i17 = i21
		__asm(jump, target("___vfprintf__XprivateX__BB59_1097_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1081_F"))
		i16 =  ((__xasm<int>(push(i1), op(0x37))))
		i17 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		i1 =  (i1 + 8)
		i20 =  ((__xasm<int>(push((mstate.ebp+-2457)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1097_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1082_F"))
		i16 =  (i10 & 16)
		__asm(push(i16==0), iftrue, target("___vfprintf__XprivateX__BB59_1086_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1083_F"))
		i16 =  ((__xasm<int>(push((mstate.ebp+-1540)), op(0x37))))
		__asm(push(i16==0), iftrue, target("___vfprintf__XprivateX__BB59_1085_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1084_F"))
		i17 =  (i9 << 3)
		i16 =  (i16 + i17)
		i16 =  ((__xasm<int>(push(i16), op(0x37))))
		i20 = i16
		i16 =  ((__xasm<int>(push((mstate.ebp+-2448)), op(0x37))))
		i17 =  ((__xasm<int>(push((mstate.ebp+-2439)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1097_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1085_F"))
		i16 =  ((__xasm<int>(push(i1), op(0x37))))
		i1 =  (i1 + 4)
		i20 = i16
		i16 =  ((__xasm<int>(push((mstate.ebp+-2448)), op(0x37))))
		i17 =  ((__xasm<int>(push((mstate.ebp+-2439)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1097_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1086_F"))
		i16 =  (i10 & 64)
		__asm(push(i16==0), iftrue, target("___vfprintf__XprivateX__BB59_1090_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1087_F"))
		i16 =  ((__xasm<int>(push((mstate.ebp+-1540)), op(0x37))))
		__asm(push(i16==0), iftrue, target("___vfprintf__XprivateX__BB59_1089_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1088_F"))
		i17 =  (i9 << 3)
		i16 =  (i16 + i17)
		i16 =  ((__xasm<int>(push(i16), op(0x36))))
		i20 = i16
		i16 =  ((__xasm<int>(push((mstate.ebp+-2448)), op(0x37))))
		i17 =  ((__xasm<int>(push((mstate.ebp+-2439)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1097_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1089_F"))
		i16 =  ((__xasm<int>(push(i1), op(0x36))))
		i1 =  (i1 + 4)
		i20 = i16
		i16 =  ((__xasm<int>(push((mstate.ebp+-2448)), op(0x37))))
		i17 =  ((__xasm<int>(push((mstate.ebp+-2439)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1097_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1090_F"))
		i16 =  ((__xasm<int>(push((mstate.ebp+-1540)), op(0x37))))
		i17 =  (i10 & 8192)
		__asm(push(i17==0), iftrue, target("___vfprintf__XprivateX__BB59_1094_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1091_F"))
		__asm(push(i16==0), iftrue, target("___vfprintf__XprivateX__BB59_1093_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1092_F"))
		i17 =  (i9 << 3)
		i16 =  (i16 + i17)
		i16 =  ((__xasm<int>(push(i16), op(0x35))))
		i20 = i16
		i16 =  ((__xasm<int>(push((mstate.ebp+-2448)), op(0x37))))
		i17 =  ((__xasm<int>(push((mstate.ebp+-2439)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1097_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1093_F"))
		i16 =  ((__xasm<int>(push(i1), op(0x35))))
		i1 =  (i1 + 4)
		i20 = i16
		i16 =  ((__xasm<int>(push((mstate.ebp+-2448)), op(0x37))))
		i17 =  ((__xasm<int>(push((mstate.ebp+-2439)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1097_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1094_F"))
		__asm(push(i16==0), iftrue, target("___vfprintf__XprivateX__BB59_1096_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1095_F"))
		i17 =  (i9 << 3)
		i16 =  (i16 + i17)
		i16 =  ((__xasm<int>(push(i16), op(0x37))))
		i20 = i16
		i16 =  ((__xasm<int>(push((mstate.ebp+-2448)), op(0x37))))
		i17 =  ((__xasm<int>(push((mstate.ebp+-2439)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1097_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1096_F"))
		i16 =  ((__xasm<int>(push(i1), op(0x37))))
		i1 =  (i1 + 4)
		i20 = i16
		i16 =  ((__xasm<int>(push((mstate.ebp+-2448)), op(0x37))))
		i17 =  ((__xasm<int>(push((mstate.ebp+-2439)), op(0x37))))
	__asm(lbl("___vfprintf__XprivateX__BB59_1097_F"))
		i21 = i17
		i17 =  (i10 & 1)
		__asm(push(i17==0), iftrue, target("___vfprintf__XprivateX__BB59_1487_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1098_F"))
		i17 = i16
		i16 = i21
		__asm(jump, target("___vfprintf__XprivateX__BB59_1099_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1099_F"))
		i21 =  (i17 | i16)
		i22 =  ((i20!=0) ? 1 : 0)
		i21 =  ((i21!=0) ? 1 : 0)
		i3 =  ((i3==0) ? i22 : i21)
		i3 =  (i3 & 1)
		__asm(push(i3!=0), iftrue, target("___vfprintf__XprivateX__BB59_1101_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1100_F"))
		i3 = i20
		i15 = i17
		__asm(jump, target("___vfprintf__XprivateX__BB59_1102_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1101_F"))
		i3 =  ((__xasm<int>(push((mstate.ebp+-2178)), op(0x37))))
		__asm(push(i15), push(i3), op(0x3a))
		i3 = i20
		i15 = i17
	__asm(jump, target("___vfprintf__XprivateX__BB59_1102_F"), lbl("___vfprintf__XprivateX__BB59_1102_B"), label, lbl("___vfprintf__XprivateX__BB59_1102_F")); 
		i17 = i3
		i3 =  (0)
		__asm(push(i3), push((mstate.ebp+-1746)), op(0x3a))
		i20 =  (16)
		i9 =  (i9 + 1)
		i3 =  (i10 & -513)
		i10 = i16
		i16 = i20
	__asm(lbl("___vfprintf__XprivateX__BB59_1103_F"))
		i24 = i17
		i26 = i15
		i15 = i16
		i27 = i19
		i16 =  ((i11>-1) ? -129 : -1)
		i3 =  (i3 & i16)
		i16 =  (i3 & 7200)
		__asm(push(i16==0), iftrue, target("___vfprintf__XprivateX__BB59_1148_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1104_F"))
		i16 =  (i26 | i10)
		__asm(push(i16!=0), iftrue, target("___vfprintf__XprivateX__BB59_1109_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1105_F"))
		__asm(push(i11!=0), iftrue, target("___vfprintf__XprivateX__BB59_1109_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1106_F"))
		i16 =  (i3 & 1)
		__asm(push(i15!=8), iftrue, target("___vfprintf__XprivateX__BB59_1108_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1107_F"))
		__asm(push(i16!=0), iftrue, target("___vfprintf__XprivateX__BB59_1109_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_1108_F"), lbl("___vfprintf__XprivateX__BB59_1108_B"), label, lbl("___vfprintf__XprivateX__BB59_1108_F")); 
		i15 =  ((__xasm<int>(push((mstate.ebp+-2160)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1154_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1109_F"))
		i16 =  ((__xasm<int>(push((mstate.ebp+-1745)), op(0x35))))
		i17 =  (i3 & 1)
		i19 =  (i3 & 512)
		i20 =  ((i10!=0) ? 1 : 0)
		__asm(push(i20!=0), iftrue, target("___vfprintf__XprivateX__BB59_1111_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1110_F"))
		i12 =  (i16 << 24)
		mstate.esp -= 32
		i12 =  (i12 >> 24)
		__asm(push(i26), push(mstate.esp), op(0x3c))
		i16 =  ((__xasm<int>(push((mstate.ebp+-2160)), op(0x37))))
		__asm(push(i16), push((mstate.esp+4)), op(0x3c))
		__asm(push(i15), push((mstate.esp+8)), op(0x3c))
		__asm(push(i17), push((mstate.esp+12)), op(0x3c))
		__asm(push(i27), push((mstate.esp+16)), op(0x3c))
		__asm(push(i19), push((mstate.esp+20)), op(0x3c))
		__asm(push(i12), push((mstate.esp+24)), op(0x3c))
		__asm(push(i7), push((mstate.esp+28)), op(0x3c))
		state = 68
		mstate.esp -= 4;FSM___ultoa.start()
		return
	__asm(lbl("___vfprintf_state68"))
		i15 = mstate.eax
		mstate.esp += 32
		__asm(jump, target("___vfprintf__XprivateX__BB59_1154_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1111_F"))
		__asm(push(i15==8), iftrue, target("___vfprintf__XprivateX__BB59_1140_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1112_F"))
		__asm(push(i15==10), iftrue, target("___vfprintf__XprivateX__BB59_1117_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1113_F"))
		__asm(push(i15!=16), iftrue, target("___vfprintf__XprivateX__BB59_1147_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1114_F"))
		i15 =  ((__xasm<int>(push((mstate.ebp+-2034)), op(0x37))))
		i12 = i26
		i16 = i10
		__asm(jump, target("___vfprintf__XprivateX__BB59_1115_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_1115_F"), lbl("___vfprintf__XprivateX__BB59_1115_B"), label, lbl("___vfprintf__XprivateX__BB59_1115_F")); 
		i17 =  (i12 & 15)
		i17 =  (i27 + i17)
		i17 =  ((__xasm<int>(push(i17), op(0x35))))
		i19 =  (i12 >>> 4)
		i20 =  (i16 << 28)
		__asm(push(i17), push((i15+99)), op(0x3a))
		i17 =  (i16 >>> 4)
		i19 =  (i19 | i20)
		i15 =  (i15 + -1)
		i12 =  ((uint(i12)<uint(16)) ? 1 : 0)
		i16 =  ((i16==0) ? 1 : 0)
		i12 =  ((i16!=0) ? i12 : 0)
		__asm(push(i12!=0), iftrue, target("___vfprintf__XprivateX__BB59_1153_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1116_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1116_F"))
		i12 = i19
		i16 = i17
		__asm(jump, target("___vfprintf__XprivateX__BB59_1115_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1117_F"))
		i15 =  ((i10!=0) ? 1 : 0)
		i17 =  ((uint(i26)>uint(9)) ? 1 : 0)
		i20 =  ((i10==0) ? 1 : 0)
		i15 =  ((i20!=0) ? i17 : i15)
		__asm(push(i15!=0), iftrue, target("___vfprintf__XprivateX__BB59_1119_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1118_F"))
		i15 =  (0)
		mstate.esp -= 16
		i12 =  (10)
		__asm(push(i26), push(mstate.esp), op(0x3c))
		__asm(push(i10), push((mstate.esp+4)), op(0x3c))
		__asm(push(i12), push((mstate.esp+8)), op(0x3c))
		__asm(push(i15), push((mstate.esp+12)), op(0x3c))
		mstate.esp -= 4;(mstate.funcs[___udivdi3])()
	__asm(lbl("___vfprintf_state69"))
		i16 = mstate.eax
		i19 = mstate.edx
		mstate.esp += 16
		mstate.esp -= 16
		__asm(push(i16), push(mstate.esp), op(0x3c))
		__asm(push(i19), push((mstate.esp+4)), op(0x3c))
		__asm(push(i12), push((mstate.esp+8)), op(0x3c))
		__asm(push(i15), push((mstate.esp+12)), op(0x3c))
		mstate.esp -= 4;(mstate.funcs[___muldi3])()
	__asm(lbl("___vfprintf_state70"))
		i15 = mstate.eax
		i12 = mstate.edx
		i15 =  __subc(i26, i15)
		i15 =  (i15 + 48)
		i12 =  ((__xasm<int>(push((mstate.ebp+-2142)), op(0x37))))
		__asm(push(i15), push(i12), op(0x3a))
		mstate.esp += 16
		i15 = i12
		__asm(jump, target("___vfprintf__XprivateX__BB59_1154_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1119_F"))
		__asm(push(i10<0), iftrue, target("___vfprintf__XprivateX__BB59_1121_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1120_F"))
		i15 =  (0)
		i17 = i26
		i20 = i10
		i21 =  ((__xasm<int>(push((mstate.ebp+-2160)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1122_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1121_F"))
		i15 =  (10)
		mstate.esp -= 16
		i17 =  (0)
		__asm(push(i26), push(mstate.esp), op(0x3c))
		__asm(push(i10), push((mstate.esp+4)), op(0x3c))
		__asm(push(i15), push((mstate.esp+8)), op(0x3c))
		__asm(push(i17), push((mstate.esp+12)), op(0x3c))
		mstate.esp -= 4;(mstate.funcs[___udivdi3])()
	__asm(lbl("___vfprintf_state71"))
		i20 = mstate.eax
		i21 = mstate.edx
		mstate.esp += 16
		mstate.esp -= 16
		__asm(push(i20), push(mstate.esp), op(0x3c))
		__asm(push(i21), push((mstate.esp+4)), op(0x3c))
		__asm(push(i15), push((mstate.esp+8)), op(0x3c))
		__asm(push(i17), push((mstate.esp+12)), op(0x3c))
		mstate.esp -= 4;(mstate.funcs[___muldi3])()
	__asm(lbl("___vfprintf_state72"))
		i15 = mstate.eax
		i15 =  __subc(i26, i15)
		i15 =  (i15 + 48)
		i17 =  ((__xasm<int>(push((mstate.ebp+-2142)), op(0x37))))
		__asm(push(i15), push(i17), op(0x3a))
		i15 =  (1)
		i17 = i20
		i20 = i21
		i21 =  ((__xasm<int>(push((mstate.ebp+-2142)), op(0x37))))
	__asm(jump, target("___vfprintf__XprivateX__BB59_1122_F"), lbl("___vfprintf__XprivateX__BB59_1122_B"), label, lbl("___vfprintf__XprivateX__BB59_1122_F")); 
		i22 =  (i12 + 1)
		i23 = i12
		__asm(push(i19==0), iftrue, target("___vfprintf__XprivateX__BB59_1128_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1123_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1124_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_1124_F"), lbl("___vfprintf__XprivateX__BB59_1124_B"), label, lbl("___vfprintf__XprivateX__BB59_1124_F")); 
		i28 =  (0)
		mstate.esp -= 16
		i29 =  (10)
		__asm(push(i17), push(mstate.esp), op(0x3c))
		__asm(push(i20), push((mstate.esp+4)), op(0x3c))
		__asm(push(i29), push((mstate.esp+8)), op(0x3c))
		__asm(push(i28), push((mstate.esp+12)), op(0x3c))
		mstate.esp -= 4;(mstate.funcs[___divdi3])()
	__asm(lbl("___vfprintf_state73"))
		i30 = mstate.eax
		i31 = mstate.edx
		mstate.esp += 16
		mstate.esp -= 16
		__asm(push(i30), push(mstate.esp), op(0x3c))
		__asm(push(i31), push((mstate.esp+4)), op(0x3c))
		__asm(push(i29), push((mstate.esp+8)), op(0x3c))
		__asm(push(i28), push((mstate.esp+12)), op(0x3c))
		mstate.esp -= 4;(mstate.funcs[___muldi3])()
	__asm(lbl("___vfprintf_state74"))
		i28 = mstate.eax
		i29 = mstate.edx
		i28 =  __subc(i17, i28)
		i28 =  (i28 + 48)
		__asm(push(i28), push((i21+-1)), op(0x3a))
		i28 =  ((__xasm<int>(push(i23), op(0x35))))
		i15 =  (i15 + 1)
		i29 =  (i21 + -1)
		mstate.esp += 16
		__asm(push(i28!=127), iftrue, target("___vfprintf__XprivateX__BB59_1132_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1125_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_1125_F"), lbl("___vfprintf__XprivateX__BB59_1125_B"), label, lbl("___vfprintf__XprivateX__BB59_1125_F")); 
		i21 = i29
		__asm(jump, target("___vfprintf__XprivateX__BB59_1126_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_1126_F"), lbl("___vfprintf__XprivateX__BB59_1126_B"), label, lbl("___vfprintf__XprivateX__BB59_1126_F")); 
		i28 =  (10)
		mstate.esp -= 16
		i29 =  (0)
		__asm(push(i17), push(mstate.esp), op(0x3c))
		__asm(push(i20), push((mstate.esp+4)), op(0x3c))
		__asm(push(i28), push((mstate.esp+8)), op(0x3c))
		__asm(push(i29), push((mstate.esp+12)), op(0x3c))
		i28 =  (9)
		i17 =  __addc(i17, i28)
		i20 =  __adde(i20, i29)
		mstate.esp -= 4;(mstate.funcs[___divdi3])()
	__asm(lbl("___vfprintf_state75"))
		i28 = mstate.eax
		i29 = mstate.edx
		mstate.esp += 16
		i30 =  ((i20!=0) ? 1 : 0)
		i17 =  ((uint(i17)>uint(18)) ? 1 : 0)
		i20 =  ((i20==0) ? 1 : 0)
		i17 =  ((i20!=0) ? i17 : i30)
		__asm(push(i17!=0), iftrue, target("___vfprintf__XprivateX__BB59_1139_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1127_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1127_F"))
		i15 = i21
		__asm(jump, target("___vfprintf__XprivateX__BB59_1154_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1128_F"))
		i15 = i17
		i12 = i20
		i16 = i21
	__asm(jump, target("___vfprintf__XprivateX__BB59_1129_F"), lbl("___vfprintf__XprivateX__BB59_1129_B"), label, lbl("___vfprintf__XprivateX__BB59_1129_F")); 
		i17 =  (10)
		mstate.esp -= 16
		i19 =  (0)
		__asm(push(i15), push(mstate.esp), op(0x3c))
		__asm(push(i12), push((mstate.esp+4)), op(0x3c))
		__asm(push(i17), push((mstate.esp+8)), op(0x3c))
		__asm(push(i19), push((mstate.esp+12)), op(0x3c))
		mstate.esp -= 4;(mstate.funcs[___divdi3])()
	__asm(lbl("___vfprintf_state76"))
		i20 = mstate.eax
		i21 = mstate.edx
		mstate.esp += 16
		mstate.esp -= 16
		__asm(push(i20), push(mstate.esp), op(0x3c))
		__asm(push(i21), push((mstate.esp+4)), op(0x3c))
		__asm(push(i17), push((mstate.esp+8)), op(0x3c))
		__asm(push(i19), push((mstate.esp+12)), op(0x3c))
		mstate.esp -= 4;(mstate.funcs[___muldi3])()
	__asm(lbl("___vfprintf_state77"))
		i17 = mstate.eax
		i22 = mstate.edx
		i17 =  __subc(i15, i17)
		i22 =  (9)
		i17 =  (i17 + 48)
		i15 =  __addc(i15, i22)
		i12 =  __adde(i12, i19)
		__asm(push(i17), push((i16+-1)), op(0x3a))
		i16 =  (i16 + -1)
		mstate.esp += 16
		i17 =  ((i12!=0) ? 1 : 0)
		i15 =  ((uint(i15)>uint(18)) ? 1 : 0)
		i12 =  ((i12==0) ? 1 : 0)
		i15 =  ((i12!=0) ? i15 : i17)
		__asm(push(i15!=0), iftrue, target("___vfprintf__XprivateX__BB59_1131_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1130_F"))
		i15 = i16
		__asm(jump, target("___vfprintf__XprivateX__BB59_1154_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1131_F"))
		i15 = i20
		i12 = i21
		__asm(jump, target("___vfprintf__XprivateX__BB59_1129_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1132_F"))
		i28 =  (i28 << 24)
		i28 =  (i28 >> 24)
		__asm(push(i28!=i15), iftrue, target("___vfprintf__XprivateX__BB59_1125_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1133_F"))
		i28 =  ((i20<0) ? 1 : 0)
		i30 =  ((uint(i17)<uint(10)) ? 1 : 0)
		i31 =  ((i20==0) ? 1 : 0)
		i28 =  ((i31!=0) ? i30 : i28)
		__asm(push(i28!=0), iftrue, target("___vfprintf__XprivateX__BB59_1125_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1134_F"))
		__asm(push(i16), push((i21+-2)), op(0x3a))
		i15 =  ((__xasm<int>(push(i22), op(0x35))))
		i21 =  (i21 + -2)
		__asm(push(i15!=0), iftrue, target("___vfprintf__XprivateX__BB59_1136_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1135_F"))
		i15 =  (0)
		__asm(jump, target("___vfprintf__XprivateX__BB59_1126_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1136_F"))
		i15 =  (10)
		mstate.esp -= 16
		i22 =  (0)
		__asm(push(i17), push(mstate.esp), op(0x3c))
		__asm(push(i20), push((mstate.esp+4)), op(0x3c))
		__asm(push(i15), push((mstate.esp+8)), op(0x3c))
		__asm(push(i22), push((mstate.esp+12)), op(0x3c))
		i15 =  (9)
		i15 =  __addc(i17, i15)
		i17 =  __adde(i20, i22)
		mstate.esp -= 4;(mstate.funcs[___divdi3])()
	__asm(lbl("___vfprintf_state78"))
		i20 = mstate.eax
		i22 = mstate.edx
		i12 =  (i12 + 1)
		mstate.esp += 16
		i23 =  ((i17!=0) ? 1 : 0)
		i15 =  ((uint(i15)>uint(18)) ? 1 : 0)
		i17 =  ((i17==0) ? 1 : 0)
		i15 =  ((i17!=0) ? i15 : i23)
		__asm(push(i15!=0), iftrue, target("___vfprintf__XprivateX__BB59_1138_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1137_F"))
		i15 = i21
		__asm(jump, target("___vfprintf__XprivateX__BB59_1154_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1138_F"))
		i15 =  (0)
		i17 = i20
		i20 = i22
		__asm(jump, target("___vfprintf__XprivateX__BB59_1122_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1139_F"))
		i17 = i28
		i20 = i29
		__asm(jump, target("___vfprintf__XprivateX__BB59_1124_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1140_F"))
		i15 =  (-1)
		i12 =  ((__xasm<int>(push((mstate.ebp+-2034)), op(0x37))))
		i16 = i26
		i19 = i10
		__asm(jump, target("___vfprintf__XprivateX__BB59_1141_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_1141_F"), lbl("___vfprintf__XprivateX__BB59_1141_B"), label, lbl("___vfprintf__XprivateX__BB59_1141_F")); 
		i20 =  (i16 | 48)
		i20 =  (i20 & 55)
		i21 =  (i16 >>> 3)
		i22 =  (i19 << 29)
		__asm(push(i20), push((i12+99)), op(0x3a))
		i23 =  (i19 >>> 3)
		i21 =  (i21 | i22)
		i12 =  (i12 + -1)
		i15 =  (i15 + 1)
		i16 =  ((uint(i16)<uint(8)) ? 1 : 0)
		i19 =  ((i19==0) ? 1 : 0)
		i16 =  ((i19!=0) ? i16 : 0)
		__asm(push(i16!=0), iftrue, target("___vfprintf__XprivateX__BB59_1143_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1142_F"))
		i16 = i21
		i19 = i23
		__asm(jump, target("___vfprintf__XprivateX__BB59_1141_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1143_F"))
		__asm(push(i17==0), iftrue, target("___vfprintf__XprivateX__BB59_1145_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1144_F"))
		i16 =  (i20 & 255)
		__asm(push(i16!=48), iftrue, target("___vfprintf__XprivateX__BB59_1146_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1145_F"))
		i15 =  (i12 + 100)
		__asm(jump, target("___vfprintf__XprivateX__BB59_1154_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1146_F"))
		i12 =  ((mstate.ebp+-1648))
		i15 =  (98 - i15)
		i16 =  (48)
		i15 =  (i12 + i15)
		__asm(push(i16), push(i15), op(0x3a))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1154_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1147_F"))
		state = 79
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("___vfprintf_state79"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1148_F"))
		__asm(push(i24!=0), iftrue, target("___vfprintf__XprivateX__BB59_1152_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1149_F"))
		__asm(push(i11!=0), iftrue, target("___vfprintf__XprivateX__BB59_1152_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1150_F"))
		i12 =  (i3 & 1)
		__asm(push(i15!=8), iftrue, target("___vfprintf__XprivateX__BB59_1108_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1151_F"))
		__asm(push(i12==0), iftrue, target("___vfprintf__XprivateX__BB59_1108_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1152_F"))
		i12 =  ((__xasm<int>(push((mstate.ebp+-1745)), op(0x35), op(0x51))))
		mstate.esp -= 32
		i16 =  (i3 & 1)
		i17 =  (i3 & 512)
		__asm(push(i24), push(mstate.esp), op(0x3c))
		i19 =  ((__xasm<int>(push((mstate.ebp+-2160)), op(0x37))))
		__asm(push(i19), push((mstate.esp+4)), op(0x3c))
		__asm(push(i15), push((mstate.esp+8)), op(0x3c))
		__asm(push(i16), push((mstate.esp+12)), op(0x3c))
		__asm(push(i27), push((mstate.esp+16)), op(0x3c))
		__asm(push(i17), push((mstate.esp+20)), op(0x3c))
		__asm(push(i12), push((mstate.esp+24)), op(0x3c))
		__asm(push(i7), push((mstate.esp+28)), op(0x3c))
		state = 80
		mstate.esp -= 4;FSM___ultoa.start()
		return
	__asm(lbl("___vfprintf_state80"))
		i15 = mstate.eax
		mstate.esp += 32
		__asm(jump, target("___vfprintf__XprivateX__BB59_1154_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1153_F"))
		i15 =  (i15 + 100)
	__asm(lbl("___vfprintf__XprivateX__BB59_1154_F"))
		i12 =  ((__xasm<int>(push((mstate.ebp+-2070)), op(0x37))))
		i12 =  (i12 - i15)
		__asm(push(i12>100), iftrue, target("___vfprintf__XprivateX__BB59_1156_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1155_F"))
		i16 = i11
		i17 = i25
		i19 =  ((__xasm<int>(push((mstate.ebp+-2295)), op(0x37))))
		i20 =  ((__xasm<int>(push((mstate.ebp+-2286)), op(0x37))))
		i21 =  ((__xasm<int>(push((mstate.ebp+-2268)), op(0x37))))
		i22 =  ((__xasm<int>(push((mstate.ebp+-2313)), op(0x37))))
		i23 =  ((__xasm<int>(push((mstate.ebp+-2304)), op(0x37))))
		i25 = i26
		i26 = i10
		i10 = i12
		i12 = i27
		i27 =  ((__xasm<int>(push((mstate.ebp+-2367)), op(0x37))))
		i28 =  ((__xasm<int>(push((mstate.ebp+-2322)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1158_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1156_F"))
		state = 81
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("___vfprintf_state81"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1157_F"))
		i12 =  (0)
		i3 =  ((__xasm<int>(push((mstate.ebp+-2187)), op(0x37))))
		__asm(push(i15), push(i3), op(0x3a))
		__asm(push(i12), push((mstate.ebp+-1746)), op(0x3a))
		i27 =  (1)
		i15 = i3
		i3 = i10
		i16 = i11
		i17 = i25
		i10 =  ((__xasm<int>(push((mstate.ebp+-2295)), op(0x37))))
		i19 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2286)), op(0x37))))
		i20 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2268)), op(0x37))))
		i21 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2313)), op(0x37))))
		i22 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2304)), op(0x37))))
		i23 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2457)), op(0x37))))
		i24 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2448)), op(0x37))))
		i25 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2439)), op(0x37))))
		i26 = i10
		i11 = i12
		i10 = i27
		i12 =  ((__xasm<int>(push((mstate.ebp+-2475)), op(0x37))))
		i27 =  ((__xasm<int>(push((mstate.ebp+-2367)), op(0x37))))
		i28 =  ((__xasm<int>(push((mstate.ebp+-2322)), op(0x37))))
	__asm(jump, target("___vfprintf__XprivateX__BB59_1158_F"), lbl("___vfprintf__XprivateX__BB59_1158_B"), label, lbl("___vfprintf__XprivateX__BB59_1158_F")); 
		i29 = i20
		i20 = i22
		i22 = i23
		i23 = i24
		__asm(push(i23), push((mstate.ebp+-2502)), op(0x3c))
		i23 = i25
		__asm(push(i23), push((mstate.ebp+-2511)), op(0x3c))
		i23 = i26
		__asm(push(i23), push((mstate.ebp+-2520)), op(0x3c))
		__asm(push(i12), push((mstate.ebp+-2547)), op(0x3c))
		__asm(push(i9), push((mstate.ebp+-2538)), op(0x3c))
		i25 = i27
		i9 = i28
		__asm(push(i9), push((mstate.ebp+-2556)), op(0x3c))
		__asm(push(i1), push((mstate.ebp+-2529)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-1746)), op(0x35))))
		i9 =  ((i1!=0) ? 1 : 0)
		i12 =  ((__xasm<int>(push((mstate.ebp+-2178)), op(0x37))))
		i12 =  ((__xasm<int>(push(i12), op(0x35))))
		i23 =  ((i10>=i11) ? i10 : i11)
		i9 =  (i9 & 1)
		i12 =  ((i12==0) ? 0 : 2)
		i9 =  (i9 + i23)
		i9 =  (i9 + i12)
		i24 =  ((i9>=i8) ? i9 : i8)
		i26 =  ((__xasm<int>(push((mstate.ebp+-2277)), op(0x37))))
		i24 =  (i24 + i26)
		__asm(push(i24>-1), iftrue, target("___vfprintf__XprivateX__BB59_1160_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1159_F"))
		i0 =  (-1)
		i6 = i0
		i8 = i14
		i0 = i25
		__asm(jump, target("___vfprintf__XprivateX__BB59_1449_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1160_F"))
		i26 =  (i3 & 132)
		__asm(push(i26==0), iftrue, target("___vfprintf__XprivateX__BB59_1162_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_1161_F"), lbl("___vfprintf__XprivateX__BB59_1161_B"), label, lbl("___vfprintf__XprivateX__BB59_1161_F")); 
		i27 =  ((__xasm<int>(push((mstate.ebp+-2259)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1179_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1162_F"))
		i27 =  (i8 - i9)
		__asm(push(i27<1), iftrue, target("___vfprintf__XprivateX__BB59_1161_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1163_F"))
		i27 =  (i1 & 255)
		i27 =  ((i27!=0) ? 1 : 0)
		i27 =  (i27 & 1)
		i28 =  (i12 + i23)
		i27 =  (i28 + i27)
		i27 =  (i8 - i27)
		i28 =  ((__xasm<int>(push((mstate.ebp+-2259)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1172_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1164_B"), label)
		i31 =  (16)
		__asm(push(i31), push(i30), op(0x3c))
		i30 =  ((__xasm<int>(push(i4), op(0x37))))
		i30 =  (i30 + 16)
		__asm(push(i30), push(i4), op(0x3c))
		i31 =  ((__xasm<int>(push(i5), op(0x37))))
		i31 =  (i31 + 1)
		__asm(push(i31), push(i5), op(0x3c))
		i28 =  (i28 + 8)
		__asm(push(i31>7), iftrue, target("___vfprintf__XprivateX__BB59_1166_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1165_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1171_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1166_F"))
		__asm(push(i30!=0), iftrue, target("___vfprintf__XprivateX__BB59_1168_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1167_F"))
		i28 =  (0)
		__asm(push(i28), push(i5), op(0x3c))
		i28 = i2
		__asm(jump, target("___vfprintf__XprivateX__BB59_1171_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1168_F"))
		i28 =  ((mstate.ebp+-1728))
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i28), push((mstate.esp+4)), op(0x3c))
		state = 82
		mstate.esp -= 4;FSM___sfvwrite.start()
		return
	__asm(lbl("___vfprintf_state82"))
		i28 = mstate.eax
		mstate.esp += 8
		i30 =  (0)
		__asm(push(i30), push(i4), op(0x3c))
		__asm(push(i30), push(i5), op(0x3c))
		__asm(push(i28==0), iftrue, target("___vfprintf__XprivateX__BB59_1170_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_1169_F"), lbl("___vfprintf__XprivateX__BB59_1169_B"), label, lbl("___vfprintf__XprivateX__BB59_1169_F")); 
		i0 =  ((__xasm<int>(push((mstate.ebp+-2277)), op(0x37))))
		i6 = i0
		i8 = i14
		i0 = i25
		__asm(jump, target("___vfprintf__XprivateX__BB59_1449_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1170_F"))
		i28 = i2
	__asm(lbl("___vfprintf__XprivateX__BB59_1171_F"))
		i27 =  (i27 + -16)
	__asm(lbl("___vfprintf__XprivateX__BB59_1172_F"))
		i30 =  (_blanks_2E_4526)
		__asm(push(i30), push(i28), op(0x3c))
		i30 =  (i28 + 4)
		__asm(push(i27>16), iftrue, target("___vfprintf__XprivateX__BB59_1164_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1173_F"))
		__asm(push(i27), push(i30), op(0x3c))
		i30 =  ((__xasm<int>(push(i4), op(0x37))))
		i27 =  (i30 + i27)
		__asm(push(i27), push(i4), op(0x3c))
		i30 =  ((__xasm<int>(push(i5), op(0x37))))
		i30 =  (i30 + 1)
		__asm(push(i30), push(i5), op(0x3c))
		i28 =  (i28 + 8)
		__asm(push(i30>7), iftrue, target("___vfprintf__XprivateX__BB59_1175_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1174_F"))
		i27 = i28
		__asm(jump, target("___vfprintf__XprivateX__BB59_1179_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1175_F"))
		__asm(push(i27!=0), iftrue, target("___vfprintf__XprivateX__BB59_1177_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1176_F"))
		i27 =  (0)
		__asm(push(i27), push(i5), op(0x3c))
		i27 = i2
		__asm(jump, target("___vfprintf__XprivateX__BB59_1179_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1177_F"))
		i27 =  ((mstate.ebp+-1728))
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i27), push((mstate.esp+4)), op(0x3c))
		state = 83
		mstate.esp -= 4;FSM___sfvwrite.start()
		return
	__asm(lbl("___vfprintf_state83"))
		i27 = mstate.eax
		mstate.esp += 8
		i28 =  (0)
		__asm(push(i28), push(i4), op(0x3c))
		__asm(push(i28), push(i5), op(0x3c))
		__asm(push(i27!=0), iftrue, target("___vfprintf__XprivateX__BB59_1169_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1178_F"))
		i27 = i2
	__asm(lbl("___vfprintf__XprivateX__BB59_1179_F"))
		i28 =  ((__xasm<int>(push((mstate.ebp+-1746)), op(0x35))))
		__asm(push(i28!=0), iftrue, target("___vfprintf__XprivateX__BB59_1181_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1180_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1187_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1181_F"))
		i28 =  ((mstate.ebp+-1746))
		__asm(push(i28), push(i27), op(0x3c))
		i28 =  (1)
		__asm(push(i28), push((i27+4)), op(0x3c))
		i28 =  ((__xasm<int>(push(i4), op(0x37))))
		i28 =  (i28 + 1)
		__asm(push(i28), push(i4), op(0x3c))
		i30 =  ((__xasm<int>(push(i5), op(0x37))))
		i30 =  (i30 + 1)
		__asm(push(i30), push(i5), op(0x3c))
		i27 =  (i27 + 8)
		__asm(push(i30>7), iftrue, target("___vfprintf__XprivateX__BB59_1183_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1182_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1187_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1183_F"))
		__asm(push(i28!=0), iftrue, target("___vfprintf__XprivateX__BB59_1185_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1184_F"))
		i27 =  (0)
		__asm(push(i27), push(i5), op(0x3c))
		i27 = i2
		__asm(jump, target("___vfprintf__XprivateX__BB59_1187_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1185_F"))
		i27 =  ((mstate.ebp+-1728))
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i27), push((mstate.esp+4)), op(0x3c))
		state = 84
		mstate.esp -= 4;FSM___sfvwrite.start()
		return
	__asm(lbl("___vfprintf_state84"))
		i27 = mstate.eax
		mstate.esp += 8
		i28 =  (0)
		__asm(push(i28), push(i4), op(0x3c))
		__asm(push(i28), push(i5), op(0x3c))
		__asm(push(i27!=0), iftrue, target("___vfprintf__XprivateX__BB59_1169_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1186_F"))
		i27 = i2
	__asm(lbl("___vfprintf__XprivateX__BB59_1187_F"))
		i28 =  ((__xasm<int>(push((mstate.ebp+-2178)), op(0x37))))
		i28 =  ((__xasm<int>(push(i28), op(0x35))))
		__asm(push(i28!=0), iftrue, target("___vfprintf__XprivateX__BB59_1189_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1188_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1195_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1189_F"))
		i28 =  (48)
		i30 =  ((__xasm<int>(push((mstate.ebp+-2088)), op(0x37))))
		__asm(push(i28), push(i30), op(0x3a))
		__asm(push(i30), push(i27), op(0x3c))
		i28 =  (2)
		__asm(push(i28), push((i27+4)), op(0x3c))
		i28 =  ((__xasm<int>(push(i4), op(0x37))))
		i28 =  (i28 + 2)
		__asm(push(i28), push(i4), op(0x3c))
		i30 =  ((__xasm<int>(push(i5), op(0x37))))
		i30 =  (i30 + 1)
		__asm(push(i30), push(i5), op(0x3c))
		i27 =  (i27 + 8)
		__asm(push(i30>7), iftrue, target("___vfprintf__XprivateX__BB59_1191_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1190_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1195_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1191_F"))
		__asm(push(i28!=0), iftrue, target("___vfprintf__XprivateX__BB59_1193_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1192_F"))
		i27 =  (0)
		__asm(push(i27), push(i5), op(0x3c))
		i27 = i2
		__asm(jump, target("___vfprintf__XprivateX__BB59_1195_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1193_F"))
		i27 =  ((mstate.ebp+-1728))
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i27), push((mstate.esp+4)), op(0x3c))
		state = 85
		mstate.esp -= 4;FSM___sfvwrite.start()
		return
	__asm(lbl("___vfprintf_state85"))
		i27 = mstate.eax
		mstate.esp += 8
		i28 =  (0)
		__asm(push(i28), push(i4), op(0x3c))
		__asm(push(i28), push(i5), op(0x3c))
		__asm(push(i27!=0), iftrue, target("___vfprintf__XprivateX__BB59_1169_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1194_F"))
		i27 = i2
	__asm(lbl("___vfprintf__XprivateX__BB59_1195_F"))
		__asm(push(i26==128), iftrue, target("___vfprintf__XprivateX__BB59_1199_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_1196_F"), lbl("___vfprintf__XprivateX__BB59_1196_B"), label, lbl("___vfprintf__XprivateX__BB59_1196_F")); 
		__asm(jump, target("___vfprintf__XprivateX__BB59_1197_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_1197_F"), lbl("___vfprintf__XprivateX__BB59_1197_B"), label, lbl("___vfprintf__XprivateX__BB59_1197_F")); 
		i11 =  (i11 - i10)
		__asm(push(i11>0), iftrue, target("___vfprintf__XprivateX__BB59_1217_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1198_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1198_F"))
		i11 = i27
		__asm(jump, target("___vfprintf__XprivateX__BB59_1230_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1199_F"))
		i26 =  (i8 - i9)
		__asm(push(i26<1), iftrue, target("___vfprintf__XprivateX__BB59_1196_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1200_F"))
		i26 =  (i1 & 255)
		i26 =  ((i26!=0) ? 1 : 0)
		i26 =  (i26 & 1)
		i28 =  (i12 + i23)
		i26 =  (i28 + i26)
		i26 =  (i8 - i26)
		__asm(jump, target("___vfprintf__XprivateX__BB59_1208_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1201_B"), label)
		i30 =  (16)
		__asm(push(i30), push(i27), op(0x3c))
		i27 =  ((__xasm<int>(push(i4), op(0x37))))
		i27 =  (i27 + 16)
		__asm(push(i27), push(i4), op(0x3c))
		i30 =  ((__xasm<int>(push(i5), op(0x37))))
		i30 =  (i30 + 1)
		__asm(push(i30), push(i5), op(0x3c))
		i28 =  (i28 + 8)
		__asm(push(i30>7), iftrue, target("___vfprintf__XprivateX__BB59_1203_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1202_F"))
		i27 = i28
		__asm(jump, target("___vfprintf__XprivateX__BB59_1207_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1203_F"))
		__asm(push(i27!=0), iftrue, target("___vfprintf__XprivateX__BB59_1205_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1204_F"))
		i27 =  (0)
		__asm(push(i27), push(i5), op(0x3c))
		i27 = i2
		__asm(jump, target("___vfprintf__XprivateX__BB59_1207_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1205_F"))
		i27 =  ((mstate.ebp+-1728))
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i27), push((mstate.esp+4)), op(0x3c))
		state = 86
		mstate.esp -= 4;FSM___sfvwrite.start()
		return
	__asm(lbl("___vfprintf_state86"))
		i27 = mstate.eax
		mstate.esp += 8
		i28 =  (0)
		__asm(push(i28), push(i4), op(0x3c))
		__asm(push(i28), push(i5), op(0x3c))
		__asm(push(i27!=0), iftrue, target("___vfprintf__XprivateX__BB59_1169_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1206_F"))
		i27 = i2
	__asm(lbl("___vfprintf__XprivateX__BB59_1207_F"))
		i26 =  (i26 + -16)
	__asm(lbl("___vfprintf__XprivateX__BB59_1208_F"))
		i28 = i27
		i27 =  (_zeroes_2E_4527)
		__asm(push(i27), push(i28), op(0x3c))
		i27 =  (i28 + 4)
		__asm(push(i26>16), iftrue, target("___vfprintf__XprivateX__BB59_1201_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1209_F"))
		__asm(push(i26), push(i27), op(0x3c))
		i27 =  ((__xasm<int>(push(i4), op(0x37))))
		i27 =  (i27 + i26)
		__asm(push(i27), push(i4), op(0x3c))
		i26 =  ((__xasm<int>(push(i5), op(0x37))))
		i26 =  (i26 + 1)
		__asm(push(i26), push(i5), op(0x3c))
		i28 =  (i28 + 8)
		__asm(push(i26>7), iftrue, target("___vfprintf__XprivateX__BB59_1211_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1210_F"))
		i27 = i28
		__asm(jump, target("___vfprintf__XprivateX__BB59_1197_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1211_F"))
		__asm(push(i27!=0), iftrue, target("___vfprintf__XprivateX__BB59_1213_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1212_F"))
		i27 =  (0)
		__asm(push(i27), push(i5), op(0x3c))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1214_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1213_F"))
		i27 =  ((mstate.ebp+-1728))
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i27), push((mstate.esp+4)), op(0x3c))
		state = 87
		mstate.esp -= 4;FSM___sfvwrite.start()
		return
	__asm(lbl("___vfprintf_state87"))
		i27 = mstate.eax
		mstate.esp += 8
		i26 =  (0)
		__asm(push(i26), push(i4), op(0x3c))
		__asm(push(i26), push(i5), op(0x3c))
		__asm(push(i27!=0), iftrue, target("___vfprintf__XprivateX__BB59_1169_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1214_F"))
		i11 =  (i11 - i10)
		__asm(push(i11>0), iftrue, target("___vfprintf__XprivateX__BB59_1216_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_1215_F"), lbl("___vfprintf__XprivateX__BB59_1215_B"), label, lbl("___vfprintf__XprivateX__BB59_1215_F")); 
		i11 = i2
		__asm(jump, target("___vfprintf__XprivateX__BB59_1230_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1216_F"))
		i27 = i2
		__asm(jump, target("___vfprintf__XprivateX__BB59_1225_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1217_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1225_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1218_B"), label)
		i28 =  (16)
		__asm(push(i28), push(i11), op(0x3c))
		i11 =  ((__xasm<int>(push(i4), op(0x37))))
		i11 =  (i11 + 16)
		__asm(push(i11), push(i4), op(0x3c))
		i28 =  ((__xasm<int>(push(i5), op(0x37))))
		i28 =  (i28 + 1)
		__asm(push(i28), push(i5), op(0x3c))
		i27 =  (i27 + 8)
		__asm(push(i28>7), iftrue, target("___vfprintf__XprivateX__BB59_1220_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1219_F"))
		i11 = i27
		__asm(jump, target("___vfprintf__XprivateX__BB59_1224_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1220_F"))
		__asm(push(i11!=0), iftrue, target("___vfprintf__XprivateX__BB59_1222_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1221_F"))
		i11 =  (0)
		__asm(push(i11), push(i5), op(0x3c))
		i11 = i2
		__asm(jump, target("___vfprintf__XprivateX__BB59_1224_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1222_F"))
		i11 =  ((mstate.ebp+-1728))
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i11), push((mstate.esp+4)), op(0x3c))
		state = 88
		mstate.esp -= 4;FSM___sfvwrite.start()
		return
	__asm(lbl("___vfprintf_state88"))
		i11 = mstate.eax
		mstate.esp += 8
		i27 =  (0)
		__asm(push(i27), push(i4), op(0x3c))
		__asm(push(i27), push(i5), op(0x3c))
		__asm(push(i11!=0), iftrue, target("___vfprintf__XprivateX__BB59_1169_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1223_F"))
		i11 = i2
	__asm(lbl("___vfprintf__XprivateX__BB59_1224_F"))
		i27 = i11
		i11 =  (i26 + -16)
	__asm(lbl("___vfprintf__XprivateX__BB59_1225_F"))
		i26 = i11
		i11 =  (_zeroes_2E_4527)
		__asm(push(i11), push(i27), op(0x3c))
		i11 =  (i27 + 4)
		__asm(push(i26>16), iftrue, target("___vfprintf__XprivateX__BB59_1218_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1226_F"))
		__asm(push(i26), push(i11), op(0x3c))
		i11 =  ((__xasm<int>(push(i4), op(0x37))))
		i11 =  (i11 + i26)
		__asm(push(i11), push(i4), op(0x3c))
		i26 =  ((__xasm<int>(push(i5), op(0x37))))
		i26 =  (i26 + 1)
		__asm(push(i26), push(i5), op(0x3c))
		i27 =  (i27 + 8)
		__asm(push(i26>7), iftrue, target("___vfprintf__XprivateX__BB59_1228_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1227_F"))
		i11 = i27
		__asm(jump, target("___vfprintf__XprivateX__BB59_1230_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1228_F"))
		__asm(push(i11!=0), iftrue, target("___vfprintf__XprivateX__BB59_1488_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1229_F"))
		i11 =  (0)
		__asm(push(i11), push(i5), op(0x3c))
		i11 = i2
		__asm(jump, target("___vfprintf__XprivateX__BB59_1230_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1230_F"))
		i26 =  (i3 & 256)
		__asm(push(i26!=0), iftrue, target("___vfprintf__XprivateX__BB59_1238_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1231_F"))
		__asm(push(i15), push(i11), op(0x3c))
		__asm(push(i10), push((i11+4)), op(0x3c))
		i15 =  ((__xasm<int>(push(i4), op(0x37))))
		i15 =  (i15 + i10)
		__asm(push(i15), push(i4), op(0x3c))
		i16 =  ((__xasm<int>(push(i5), op(0x37))))
		i16 =  (i16 + 1)
		__asm(push(i16), push(i5), op(0x3c))
		i11 =  (i11 + 8)
		__asm(push(i16>7), iftrue, target("___vfprintf__XprivateX__BB59_1233_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1232_F"))
		i15 = i11
		i11 = i20
		i16 = i22
		__asm(jump, target("___vfprintf__XprivateX__BB59_1424_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1233_F"))
		__asm(push(i15!=0), iftrue, target("___vfprintf__XprivateX__BB59_1235_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1234_F"))
		i11 =  (0)
		__asm(push(i11), push(i5), op(0x3c))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1236_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1235_F"))
		i11 =  ((mstate.ebp+-1728))
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i11), push((mstate.esp+4)), op(0x3c))
		state = 89
		mstate.esp -= 4;FSM___sfvwrite.start()
		return
	__asm(lbl("___vfprintf_state89"))
		i11 = mstate.eax
		mstate.esp += 8
		i15 =  (0)
		__asm(push(i15), push(i4), op(0x3c))
		__asm(push(i15), push(i5), op(0x3c))
		__asm(push(i11!=0), iftrue, target("___vfprintf__XprivateX__BB59_1169_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1236_F"))
		i3 =  (i3 & 4)
		__asm(push(i3==0), iftrue, target("___vfprintf__XprivateX__BB59_1441_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1237_F"))
		i3 = i2
		i11 = i20
		i15 = i22
		__asm(jump, target("___vfprintf__XprivateX__BB59_1426_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1238_F"))
		i10 =  (i17 & 255)
		__asm(push(i10!=0), iftrue, target("___vfprintf__XprivateX__BB59_1383_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1239_F"))
		i10 =  ((__xasm<int>(push((mstate.ebp+-1744)), op(0x37))))
		__asm(push(i10>0), iftrue, target("___vfprintf__XprivateX__BB59_1275_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1240_F"))
		i10 =  (_zeroes_2E_4527)
		__asm(push(i10), push(i11), op(0x3c))
		i10 =  (1)
		__asm(push(i10), push((i11+4)), op(0x3c))
		i10 =  ((__xasm<int>(push(i4), op(0x37))))
		i10 =  (i10 + 1)
		__asm(push(i10), push(i4), op(0x3c))
		i26 =  ((__xasm<int>(push(i5), op(0x37))))
		i26 =  (i26 + 1)
		__asm(push(i26), push(i5), op(0x3c))
		i11 =  (i11 + 8)
		__asm(push(i26>7), iftrue, target("___vfprintf__XprivateX__BB59_1242_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1241_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1246_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1242_F"))
		__asm(push(i10!=0), iftrue, target("___vfprintf__XprivateX__BB59_1244_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1243_F"))
		i11 =  (0)
		__asm(push(i11), push(i5), op(0x3c))
		i11 = i2
		__asm(jump, target("___vfprintf__XprivateX__BB59_1246_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1244_F"))
		i11 =  ((mstate.ebp+-1728))
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i11), push((mstate.esp+4)), op(0x3c))
		state = 90
		mstate.esp -= 4;FSM___sfvwrite.start()
		return
	__asm(lbl("___vfprintf_state90"))
		i11 = mstate.eax
		mstate.esp += 8
		i10 =  (0)
		__asm(push(i10), push(i4), op(0x3c))
		__asm(push(i10), push(i5), op(0x3c))
		__asm(push(i11!=0), iftrue, target("___vfprintf__XprivateX__BB59_1169_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1245_F"))
		i11 = i2
	__asm(lbl("___vfprintf__XprivateX__BB59_1246_F"))
		__asm(push(i16!=0), iftrue, target("___vfprintf__XprivateX__BB59_1251_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1247_F"))
		i10 =  (i3 & 1)
		__asm(push(i10!=0), iftrue, target("___vfprintf__XprivateX__BB59_1251_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1248_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1249_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_1249_F"), lbl("___vfprintf__XprivateX__BB59_1249_B"), label, lbl("___vfprintf__XprivateX__BB59_1249_F")); 
		i10 = i11
		i11 =  ((__xasm<int>(push((mstate.ebp+-1744)), op(0x37))))
		i11 =  (0 - i11)
		__asm(push(i11>0), iftrue, target("___vfprintf__XprivateX__BB59_1260_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1250_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1250_F"))
		i11 = i10
		__asm(jump, target("___vfprintf__XprivateX__BB59_1258_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1251_F"))
		i10 =  (1)
		i26 =  ((__xasm<int>(push((mstate.ebp+-2097)), op(0x37))))
		__asm(push(i26), push(i11), op(0x3c))
		__asm(push(i10), push((i11+4)), op(0x3c))
		i10 =  ((__xasm<int>(push(i4), op(0x37))))
		i10 =  (i10 + 1)
		__asm(push(i10), push(i4), op(0x3c))
		i26 =  ((__xasm<int>(push(i5), op(0x37))))
		i26 =  (i26 + 1)
		__asm(push(i26), push(i5), op(0x3c))
		i11 =  (i11 + 8)
		__asm(push(i26>7), iftrue, target("___vfprintf__XprivateX__BB59_1253_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1252_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1249_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1253_F"))
		__asm(push(i10!=0), iftrue, target("___vfprintf__XprivateX__BB59_1255_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1254_F"))
		i11 =  (0)
		__asm(push(i11), push(i5), op(0x3c))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1256_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1255_F"))
		i11 =  ((mstate.ebp+-1728))
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i11), push((mstate.esp+4)), op(0x3c))
		state = 91
		mstate.esp -= 4;FSM___sfvwrite.start()
		return
	__asm(lbl("___vfprintf_state91"))
		i11 = mstate.eax
		mstate.esp += 8
		i10 =  (0)
		__asm(push(i10), push(i4), op(0x3c))
		__asm(push(i10), push(i5), op(0x3c))
		__asm(push(i11!=0), iftrue, target("___vfprintf__XprivateX__BB59_1169_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1256_F"))
		i11 =  ((__xasm<int>(push((mstate.ebp+-1744)), op(0x37))))
		i11 =  (0 - i11)
		__asm(push(i11>0), iftrue, target("___vfprintf__XprivateX__BB59_1259_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1257_F"))
		i11 = i2
		__asm(jump, target("___vfprintf__XprivateX__BB59_1258_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_1258_F"), lbl("___vfprintf__XprivateX__BB59_1258_B"), label, lbl("___vfprintf__XprivateX__BB59_1258_F")); 
		i10 =  ((__xasm<int>(push((mstate.ebp+-1744)), op(0x37))))
		i16 =  (i10 + i16)
		i10 = i11
		i11 = i16
		i16 = i20
		i20 = i22
		__asm(jump, target("___vfprintf__XprivateX__BB59_1357_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1259_F"))
		i10 = i2
		__asm(jump, target("___vfprintf__XprivateX__BB59_1268_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1260_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1268_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1261_B"), label)
		i27 =  (16)
		__asm(push(i27), push(i11), op(0x3c))
		i11 =  ((__xasm<int>(push(i4), op(0x37))))
		i11 =  (i11 + 16)
		__asm(push(i11), push(i4), op(0x3c))
		i27 =  ((__xasm<int>(push(i5), op(0x37))))
		i27 =  (i27 + 1)
		__asm(push(i27), push(i5), op(0x3c))
		i10 =  (i10 + 8)
		__asm(push(i27>7), iftrue, target("___vfprintf__XprivateX__BB59_1263_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1262_F"))
		i11 = i10
		__asm(jump, target("___vfprintf__XprivateX__BB59_1267_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1263_F"))
		__asm(push(i11!=0), iftrue, target("___vfprintf__XprivateX__BB59_1265_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1264_F"))
		i11 =  (0)
		__asm(push(i11), push(i5), op(0x3c))
		i11 = i2
		__asm(jump, target("___vfprintf__XprivateX__BB59_1267_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1265_F"))
		i11 =  ((mstate.ebp+-1728))
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i11), push((mstate.esp+4)), op(0x3c))
		state = 92
		mstate.esp -= 4;FSM___sfvwrite.start()
		return
	__asm(lbl("___vfprintf_state92"))
		i11 = mstate.eax
		mstate.esp += 8
		i10 =  (0)
		__asm(push(i10), push(i4), op(0x3c))
		__asm(push(i10), push(i5), op(0x3c))
		__asm(push(i11!=0), iftrue, target("___vfprintf__XprivateX__BB59_1169_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1266_F"))
		i11 = i2
	__asm(lbl("___vfprintf__XprivateX__BB59_1267_F"))
		i10 = i11
		i11 =  (i26 + -16)
	__asm(lbl("___vfprintf__XprivateX__BB59_1268_F"))
		i26 = i11
		i11 =  (_zeroes_2E_4527)
		__asm(push(i11), push(i10), op(0x3c))
		i11 =  (i10 + 4)
		__asm(push(i26>16), iftrue, target("___vfprintf__XprivateX__BB59_1261_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1269_F"))
		__asm(push(i26), push(i11), op(0x3c))
		i11 =  ((__xasm<int>(push(i4), op(0x37))))
		i11 =  (i11 + i26)
		__asm(push(i11), push(i4), op(0x3c))
		i26 =  ((__xasm<int>(push(i5), op(0x37))))
		i26 =  (i26 + 1)
		__asm(push(i26), push(i5), op(0x3c))
		i10 =  (i10 + 8)
		__asm(push(i26>7), iftrue, target("___vfprintf__XprivateX__BB59_1271_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1270_F"))
		i11 = i10
		__asm(jump, target("___vfprintf__XprivateX__BB59_1258_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1271_F"))
		__asm(push(i11!=0), iftrue, target("___vfprintf__XprivateX__BB59_1273_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1272_F"))
		i11 =  (0)
		__asm(push(i11), push(i5), op(0x3c))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1274_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1273_F"))
		i11 =  ((mstate.ebp+-1728))
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i11), push((mstate.esp+4)), op(0x3c))
		state = 93
		mstate.esp -= 4;FSM___sfvwrite.start()
		return
	__asm(lbl("___vfprintf_state93"))
		i11 = mstate.eax
		mstate.esp += 8
		i10 =  (0)
		__asm(push(i10), push(i4), op(0x3c))
		__asm(push(i10), push(i5), op(0x3c))
		__asm(push(i11!=0), iftrue, target("___vfprintf__XprivateX__BB59_1169_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1274_F"))
		i11 =  ((__xasm<int>(push((mstate.ebp+-1744)), op(0x37))))
		i11 =  (i11 + i16)
		i10 = i2
		i16 = i20
		i20 = i22
		__asm(jump, target("___vfprintf__XprivateX__BB59_1357_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1275_F"))
		i10 =  ((__xasm<int>(push((mstate.ebp+-1740)), op(0x37))))
		i10 =  (i10 - i15)
		i10 =  ((i10>i29) ? i29 : i10)
		__asm(push(i10>0), iftrue, target("___vfprintf__XprivateX__BB59_1279_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1276_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1277_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_1277_F"), lbl("___vfprintf__XprivateX__BB59_1277_B"), label, lbl("___vfprintf__XprivateX__BB59_1277_F")); 
		i26 = i11
		i11 =  (i29 - i10)
		i11 =  ((i10<0) ? i29 : i11)
		__asm(push(i11>0), iftrue, target("___vfprintf__XprivateX__BB59_1289_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1278_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1278_F"))
		i11 = i26
		__asm(jump, target("___vfprintf__XprivateX__BB59_1286_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1279_F"))
		__asm(push(i15), push(i11), op(0x3c))
		__asm(push(i10), push((i11+4)), op(0x3c))
		i26 =  ((__xasm<int>(push(i4), op(0x37))))
		i26 =  (i26 + i10)
		__asm(push(i26), push(i4), op(0x3c))
		i27 =  ((__xasm<int>(push(i5), op(0x37))))
		i27 =  (i27 + 1)
		__asm(push(i27), push(i5), op(0x3c))
		i11 =  (i11 + 8)
		__asm(push(i27>7), iftrue, target("___vfprintf__XprivateX__BB59_1281_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1280_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1277_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1281_F"))
		__asm(push(i26!=0), iftrue, target("___vfprintf__XprivateX__BB59_1283_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1282_F"))
		i11 =  (0)
		__asm(push(i11), push(i5), op(0x3c))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1284_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1283_F"))
		i11 =  ((mstate.ebp+-1728))
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i11), push((mstate.esp+4)), op(0x3c))
		state = 94
		mstate.esp -= 4;FSM___sfvwrite.start()
		return
	__asm(lbl("___vfprintf_state94"))
		i11 = mstate.eax
		mstate.esp += 8
		i26 =  (0)
		__asm(push(i26), push(i4), op(0x3c))
		__asm(push(i26), push(i5), op(0x3c))
		__asm(push(i11!=0), iftrue, target("___vfprintf__XprivateX__BB59_1169_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1284_F"))
		i11 =  (i29 - i10)
		i11 =  ((i10<0) ? i29 : i11)
		__asm(push(i11>0), iftrue, target("___vfprintf__XprivateX__BB59_1288_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1285_F"))
		i11 = i2
		__asm(jump, target("___vfprintf__XprivateX__BB59_1286_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_1286_F"), lbl("___vfprintf__XprivateX__BB59_1286_B"), label, lbl("___vfprintf__XprivateX__BB59_1286_F")); 
		i10 = i11
		i11 =  (i15 + i29)
		__asm(push(i7==0), iftrue, target("___vfprintf__XprivateX__BB59_1307_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1287_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1287_F"))
		i15 = i10
		__asm(jump, target("___vfprintf__XprivateX__BB59_1305_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1288_F"))
		i10 = i2
		__asm(jump, target("___vfprintf__XprivateX__BB59_1297_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1289_F"))
		i10 = i26
		__asm(jump, target("___vfprintf__XprivateX__BB59_1297_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1290_B"), label)
		i27 =  (16)
		__asm(push(i27), push(i11), op(0x3c))
		i11 =  ((__xasm<int>(push(i4), op(0x37))))
		i11 =  (i11 + 16)
		__asm(push(i11), push(i4), op(0x3c))
		i27 =  ((__xasm<int>(push(i5), op(0x37))))
		i27 =  (i27 + 1)
		__asm(push(i27), push(i5), op(0x3c))
		i10 =  (i10 + 8)
		__asm(push(i27>7), iftrue, target("___vfprintf__XprivateX__BB59_1292_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1291_F"))
		i11 = i10
		__asm(jump, target("___vfprintf__XprivateX__BB59_1296_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1292_F"))
		__asm(push(i11!=0), iftrue, target("___vfprintf__XprivateX__BB59_1294_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1293_F"))
		i11 =  (0)
		__asm(push(i11), push(i5), op(0x3c))
		i11 = i2
		__asm(jump, target("___vfprintf__XprivateX__BB59_1296_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1294_F"))
		i11 =  ((mstate.ebp+-1728))
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i11), push((mstate.esp+4)), op(0x3c))
		state = 95
		mstate.esp -= 4;FSM___sfvwrite.start()
		return
	__asm(lbl("___vfprintf_state95"))
		i11 = mstate.eax
		mstate.esp += 8
		i10 =  (0)
		__asm(push(i10), push(i4), op(0x3c))
		__asm(push(i10), push(i5), op(0x3c))
		__asm(push(i11!=0), iftrue, target("___vfprintf__XprivateX__BB59_1169_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1295_F"))
		i11 = i2
	__asm(lbl("___vfprintf__XprivateX__BB59_1296_F"))
		i10 = i11
		i11 =  (i26 + -16)
	__asm(lbl("___vfprintf__XprivateX__BB59_1297_F"))
		i26 = i11
		i11 =  (_zeroes_2E_4527)
		__asm(push(i11), push(i10), op(0x3c))
		i11 =  (i10 + 4)
		__asm(push(i26>16), iftrue, target("___vfprintf__XprivateX__BB59_1290_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1298_F"))
		__asm(push(i26), push(i11), op(0x3c))
		i11 =  ((__xasm<int>(push(i4), op(0x37))))
		i11 =  (i11 + i26)
		__asm(push(i11), push(i4), op(0x3c))
		i26 =  ((__xasm<int>(push(i5), op(0x37))))
		i26 =  (i26 + 1)
		__asm(push(i26), push(i5), op(0x3c))
		i10 =  (i10 + 8)
		__asm(push(i26>7), iftrue, target("___vfprintf__XprivateX__BB59_1300_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1299_F"))
		i11 = i10
		__asm(jump, target("___vfprintf__XprivateX__BB59_1286_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1300_F"))
		__asm(push(i11!=0), iftrue, target("___vfprintf__XprivateX__BB59_1302_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1301_F"))
		i11 =  (0)
		__asm(push(i11), push(i5), op(0x3c))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1303_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1302_F"))
		i11 =  ((mstate.ebp+-1728))
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i11), push((mstate.esp+4)), op(0x3c))
		state = 96
		mstate.esp -= 4;FSM___sfvwrite.start()
		return
	__asm(lbl("___vfprintf_state96"))
		i11 = mstate.eax
		mstate.esp += 8
		i10 =  (0)
		__asm(push(i10), push(i4), op(0x3c))
		__asm(push(i10), push(i5), op(0x3c))
		__asm(push(i11!=0), iftrue, target("___vfprintf__XprivateX__BB59_1169_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1303_F"))
		i11 =  (i15 + i29)
		__asm(push(i7==0), iftrue, target("___vfprintf__XprivateX__BB59_1306_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1304_F"))
		i15 = i2
		__asm(jump, target("___vfprintf__XprivateX__BB59_1305_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1305_F"))
		i10 =  (0)
		__asm(jump, target("___vfprintf__XprivateX__BB59_1343_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1306_F"))
		i15 = i2
		i10 = i22
		__asm(jump, target("___vfprintf__XprivateX__BB59_1348_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1307_F"))
		i15 = i10
		i10 = i22
		__asm(jump, target("___vfprintf__XprivateX__BB59_1348_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1308_B"), label)
		__asm(push(i22<1), iftrue, target("___vfprintf__XprivateX__BB59_1310_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1309_F"))
		i22 =  (i22 + -1)
		__asm(jump, target("___vfprintf__XprivateX__BB59_1311_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1310_F"))
		i20 =  (i20 + -1)
		i7 =  (i7 + -1)
	__asm(lbl("___vfprintf__XprivateX__BB59_1311_F"))
		i27 =  ((mstate.ebp+-1745))
		__asm(push(i27), push(i26), op(0x3c))
		i27 =  (1)
		__asm(push(i27), push((i26+4)), op(0x3c))
		i27 =  ((__xasm<int>(push(i4), op(0x37))))
		i27 =  (i27 + 1)
		__asm(push(i27), push(i4), op(0x3c))
		i28 =  ((__xasm<int>(push(i5), op(0x37))))
		i28 =  (i28 + 1)
		__asm(push(i28), push(i5), op(0x3c))
		i26 =  (i26 + 8)
		__asm(push(i28>7), iftrue, target("___vfprintf__XprivateX__BB59_1313_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1312_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1317_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1313_F"))
		__asm(push(i27!=0), iftrue, target("___vfprintf__XprivateX__BB59_1315_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1314_F"))
		i26 =  (0)
		__asm(push(i26), push(i5), op(0x3c))
		i26 = i2
		__asm(jump, target("___vfprintf__XprivateX__BB59_1317_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1315_F"))
		i26 =  ((mstate.ebp+-1728))
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i26), push((mstate.esp+4)), op(0x3c))
		state = 97
		mstate.esp -= 4;FSM___sfvwrite.start()
		return
	__asm(lbl("___vfprintf_state97"))
		i26 = mstate.eax
		mstate.esp += 8
		i27 =  (0)
		__asm(push(i27), push(i4), op(0x3c))
		__asm(push(i27), push(i5), op(0x3c))
		__asm(push(i26!=0), iftrue, target("___vfprintf__XprivateX__BB59_1169_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1316_F"))
		i26 = i2
	__asm(lbl("___vfprintf__XprivateX__BB59_1317_F"))
		i27 =  ((__xasm<int>(push((mstate.ebp+-1740)), op(0x37))))
		i28 =  ((__xasm<int>(push(i7), op(0x35), op(0x51))))
		i27 =  (i27 - i15)
		i27 =  ((i28<i27) ? i28 : i27)
		__asm(push(i27>0), iftrue, target("___vfprintf__XprivateX__BB59_1319_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1318_F"))
		i15 = i26
		__asm(jump, target("___vfprintf__XprivateX__BB59_1325_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1319_F"))
		__asm(push(i15), push(i26), op(0x3c))
		__asm(push(i27), push((i26+4)), op(0x3c))
		i15 =  ((__xasm<int>(push(i4), op(0x37))))
		i15 =  (i15 + i27)
		__asm(push(i15), push(i4), op(0x3c))
		i28 =  ((__xasm<int>(push(i5), op(0x37))))
		i28 =  (i28 + 1)
		__asm(push(i28), push(i5), op(0x3c))
		i26 =  (i26 + 8)
		__asm(push(i28>7), iftrue, target("___vfprintf__XprivateX__BB59_1321_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1320_F"))
		i15 = i26
		__asm(jump, target("___vfprintf__XprivateX__BB59_1325_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1321_F"))
		__asm(push(i15!=0), iftrue, target("___vfprintf__XprivateX__BB59_1323_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1322_F"))
		i15 =  (0)
		__asm(push(i15), push(i5), op(0x3c))
		i15 = i2
		__asm(jump, target("___vfprintf__XprivateX__BB59_1325_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1323_F"))
		i15 =  ((mstate.ebp+-1728))
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i15), push((mstate.esp+4)), op(0x3c))
		state = 98
		mstate.esp -= 4;FSM___sfvwrite.start()
		return
	__asm(lbl("___vfprintf_state98"))
		i15 = mstate.eax
		mstate.esp += 8
		i26 =  (0)
		__asm(push(i26), push(i4), op(0x3c))
		__asm(push(i26), push(i5), op(0x3c))
		__asm(push(i15!=0), iftrue, target("___vfprintf__XprivateX__BB59_1169_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1324_F"))
		i15 = i2
	__asm(lbl("___vfprintf__XprivateX__BB59_1325_F"))
		i26 =  ((__xasm<int>(push(i7), op(0x35))))
		i28 =  (i26 << 24)
		i27 =  ((i27>-1) ? i27 : 0)
		i28 =  (i28 >> 24)
		i28 =  (i28 - i27)
		__asm(push(i28>0), iftrue, target("___vfprintf__XprivateX__BB59_1327_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1326_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1342_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1327_F"))
		i26 =  (i26 << 24)
		i26 =  (i26 >> 24)
		i26 =  (i26 - i27)
		__asm(jump, target("___vfprintf__XprivateX__BB59_1335_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1328_B"), label)
		i28 =  (16)
		__asm(push(i28), push(i15), op(0x3c))
		i15 =  ((__xasm<int>(push(i4), op(0x37))))
		i15 =  (i15 + 16)
		__asm(push(i15), push(i4), op(0x3c))
		i28 =  ((__xasm<int>(push(i5), op(0x37))))
		i28 =  (i28 + 1)
		__asm(push(i28), push(i5), op(0x3c))
		i27 =  (i27 + 8)
		__asm(push(i28>7), iftrue, target("___vfprintf__XprivateX__BB59_1330_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1329_F"))
		i15 = i27
		__asm(jump, target("___vfprintf__XprivateX__BB59_1334_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1330_F"))
		__asm(push(i15!=0), iftrue, target("___vfprintf__XprivateX__BB59_1332_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1331_F"))
		i15 =  (0)
		__asm(push(i15), push(i5), op(0x3c))
		i15 = i2
		__asm(jump, target("___vfprintf__XprivateX__BB59_1334_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1332_F"))
		i15 =  ((mstate.ebp+-1728))
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i15), push((mstate.esp+4)), op(0x3c))
		state = 99
		mstate.esp -= 4;FSM___sfvwrite.start()
		return
	__asm(lbl("___vfprintf_state99"))
		i15 = mstate.eax
		mstate.esp += 8
		i27 =  (0)
		__asm(push(i27), push(i4), op(0x3c))
		__asm(push(i27), push(i5), op(0x3c))
		__asm(push(i15!=0), iftrue, target("___vfprintf__XprivateX__BB59_1169_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1333_F"))
		i15 = i2
	__asm(lbl("___vfprintf__XprivateX__BB59_1334_F"))
		i26 =  (i26 + -16)
	__asm(lbl("___vfprintf__XprivateX__BB59_1335_F"))
		i27 = i15
		i15 =  (_zeroes_2E_4527)
		__asm(push(i15), push(i27), op(0x3c))
		i15 =  (i27 + 4)
		__asm(push(i26>16), iftrue, target("___vfprintf__XprivateX__BB59_1328_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1336_F"))
		__asm(push(i26), push(i15), op(0x3c))
		i15 =  ((__xasm<int>(push(i4), op(0x37))))
		i15 =  (i15 + i26)
		__asm(push(i15), push(i4), op(0x3c))
		i26 =  ((__xasm<int>(push(i5), op(0x37))))
		i26 =  (i26 + 1)
		__asm(push(i26), push(i5), op(0x3c))
		i27 =  (i27 + 8)
		__asm(push(i26>7), iftrue, target("___vfprintf__XprivateX__BB59_1338_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1337_F"))
		i15 = i27
		__asm(jump, target("___vfprintf__XprivateX__BB59_1342_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1338_F"))
		__asm(push(i15!=0), iftrue, target("___vfprintf__XprivateX__BB59_1340_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1339_F"))
		i15 =  (0)
		__asm(push(i15), push(i5), op(0x3c))
		i15 = i2
		__asm(jump, target("___vfprintf__XprivateX__BB59_1342_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1340_F"))
		i15 =  ((mstate.ebp+-1728))
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i15), push((mstate.esp+4)), op(0x3c))
		state = 100
		mstate.esp -= 4;FSM___sfvwrite.start()
		return
	__asm(lbl("___vfprintf_state100"))
		i15 = mstate.eax
		mstate.esp += 8
		i26 =  (0)
		__asm(push(i26), push(i4), op(0x3c))
		__asm(push(i26), push(i5), op(0x3c))
		__asm(push(i15!=0), iftrue, target("___vfprintf__XprivateX__BB59_1169_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1341_F"))
		i15 = i2
	__asm(lbl("___vfprintf__XprivateX__BB59_1342_F"))
		i26 =  ((__xasm<int>(push(i7), op(0x35), op(0x51))))
		i10 =  (i10 + i26)
	__asm(lbl("___vfprintf__XprivateX__BB59_1343_F"))
		i26 = i15
		i15 =  (i11 + i10)
		__asm(push(i22>0), iftrue, target("___vfprintf__XprivateX__BB59_1308_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1344_F"))
		__asm(push(i20>0), iftrue, target("___vfprintf__XprivateX__BB59_1308_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1345_F"))
		i11 =  ((__xasm<int>(push((mstate.ebp+-1740)), op(0x37))))
		__asm(push(uint(i15)>uint(i11)), iftrue, target("___vfprintf__XprivateX__BB59_1347_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1346_F"))
		i11 = i15
		i15 = i26
		i10 = i22
		__asm(jump, target("___vfprintf__XprivateX__BB59_1348_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1347_F"))
		i15 = i26
		i10 = i22
	__asm(lbl("___vfprintf__XprivateX__BB59_1348_F"))
		i22 = i15
		i26 = i10
		__asm(push(i16!=0), iftrue, target("___vfprintf__XprivateX__BB59_1351_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1349_F"))
		i15 =  (i3 & 1)
		__asm(push(i15!=0), iftrue, target("___vfprintf__XprivateX__BB59_1351_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1350_F"))
		i15 = i11
		i10 = i22
		i11 = i16
		i16 = i20
		i20 = i26
		__asm(jump, target("___vfprintf__XprivateX__BB59_1357_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1351_F"))
		i15 =  (1)
		i10 =  ((__xasm<int>(push((mstate.ebp+-2097)), op(0x37))))
		__asm(push(i10), push(i22), op(0x3c))
		__asm(push(i15), push((i22+4)), op(0x3c))
		i15 =  ((__xasm<int>(push(i4), op(0x37))))
		i15 =  (i15 + 1)
		__asm(push(i15), push(i4), op(0x3c))
		i10 =  ((__xasm<int>(push(i5), op(0x37))))
		i10 =  (i10 + 1)
		__asm(push(i10), push(i5), op(0x3c))
		i22 =  (i22 + 8)
		__asm(push(i10>7), iftrue, target("___vfprintf__XprivateX__BB59_1353_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1352_F"))
		i15 = i11
		i10 = i22
		i11 = i16
		i16 = i20
		i20 = i26
		__asm(jump, target("___vfprintf__XprivateX__BB59_1357_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1353_F"))
		__asm(push(i15!=0), iftrue, target("___vfprintf__XprivateX__BB59_1355_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1354_F"))
		i15 =  (0)
		__asm(push(i15), push(i5), op(0x3c))
		i15 = i11
		i10 = i2
		i11 = i16
		i16 = i20
		i20 = i26
		__asm(jump, target("___vfprintf__XprivateX__BB59_1357_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1355_F"))
		i15 =  ((mstate.ebp+-1728))
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i15), push((mstate.esp+4)), op(0x3c))
		state = 101
		mstate.esp -= 4;FSM___sfvwrite.start()
		return
	__asm(lbl("___vfprintf_state101"))
		i15 = mstate.eax
		mstate.esp += 8
		i10 =  (0)
		__asm(push(i10), push(i4), op(0x3c))
		__asm(push(i10), push(i5), op(0x3c))
		__asm(push(i15!=0), iftrue, target("___vfprintf__XprivateX__BB59_1169_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1356_F"))
		i15 = i11
		i10 = i2
		i11 = i16
		i16 = i20
		i20 = i26
	__asm(lbl("___vfprintf__XprivateX__BB59_1357_F"))
		i22 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-1740)), op(0x37))))
		i10 =  (i10 - i15)
		i10 =  ((i10>i11) ? i11 : i10)
		__asm(push(i10>0), iftrue, target("___vfprintf__XprivateX__BB59_1361_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1358_F"))
		i15 = i22
		__asm(jump, target("___vfprintf__XprivateX__BB59_1359_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_1359_F"), lbl("___vfprintf__XprivateX__BB59_1359_B"), label, lbl("___vfprintf__XprivateX__BB59_1359_F")); 
		i22 =  (i11 - i10)
		i11 =  ((i10<0) ? i11 : i22)
		__asm(push(i11>0), iftrue, target("___vfprintf__XprivateX__BB59_1369_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1360_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1360_F"))
		i11 = i16
		i16 = i20
		__asm(jump, target("___vfprintf__XprivateX__BB59_1424_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1361_F"))
		__asm(push(i15), push(i22), op(0x3c))
		__asm(push(i10), push((i22+4)), op(0x3c))
		i15 =  ((__xasm<int>(push(i4), op(0x37))))
		i15 =  (i15 + i10)
		__asm(push(i15), push(i4), op(0x3c))
		i26 =  ((__xasm<int>(push(i5), op(0x37))))
		i26 =  (i26 + 1)
		__asm(push(i26), push(i5), op(0x3c))
		i22 =  (i22 + 8)
		__asm(push(i26>7), iftrue, target("___vfprintf__XprivateX__BB59_1363_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1362_F"))
		i15 = i22
		__asm(jump, target("___vfprintf__XprivateX__BB59_1359_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1363_F"))
		__asm(push(i15!=0), iftrue, target("___vfprintf__XprivateX__BB59_1365_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1364_F"))
		i15 =  (0)
		__asm(push(i15), push(i5), op(0x3c))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1366_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1365_F"))
		i15 =  ((mstate.ebp+-1728))
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i15), push((mstate.esp+4)), op(0x3c))
		state = 102
		mstate.esp -= 4;FSM___sfvwrite.start()
		return
	__asm(lbl("___vfprintf_state102"))
		i15 = mstate.eax
		mstate.esp += 8
		i22 =  (0)
		__asm(push(i22), push(i4), op(0x3c))
		__asm(push(i22), push(i5), op(0x3c))
		__asm(push(i15!=0), iftrue, target("___vfprintf__XprivateX__BB59_1169_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1366_F"))
		i15 =  (i11 - i10)
		i11 =  ((i10<0) ? i11 : i15)
		__asm(push(i11>0), iftrue, target("___vfprintf__XprivateX__BB59_1368_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_1367_F"), lbl("___vfprintf__XprivateX__BB59_1367_B"), label, lbl("___vfprintf__XprivateX__BB59_1367_F")); 
		i15 = i2
		i11 = i16
		i16 = i20
		__asm(jump, target("___vfprintf__XprivateX__BB59_1424_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1368_F"))
		i15 = i2
		__asm(jump, target("___vfprintf__XprivateX__BB59_1377_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1369_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1377_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1370_B"), label)
		i10 =  (16)
		__asm(push(i10), push(i15), op(0x3c))
		i15 =  ((__xasm<int>(push(i4), op(0x37))))
		i15 =  (i15 + 16)
		__asm(push(i15), push(i4), op(0x3c))
		i10 =  ((__xasm<int>(push(i5), op(0x37))))
		i10 =  (i10 + 1)
		__asm(push(i10), push(i5), op(0x3c))
		i11 =  (i11 + 8)
		__asm(push(i10>7), iftrue, target("___vfprintf__XprivateX__BB59_1372_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1371_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1376_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1372_F"))
		__asm(push(i15!=0), iftrue, target("___vfprintf__XprivateX__BB59_1374_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1373_F"))
		i11 =  (0)
		__asm(push(i11), push(i5), op(0x3c))
		i11 = i2
		__asm(jump, target("___vfprintf__XprivateX__BB59_1376_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1374_F"))
		i11 =  ((mstate.ebp+-1728))
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i11), push((mstate.esp+4)), op(0x3c))
		state = 103
		mstate.esp -= 4;FSM___sfvwrite.start()
		return
	__asm(lbl("___vfprintf_state103"))
		i11 = mstate.eax
		mstate.esp += 8
		i15 =  (0)
		__asm(push(i15), push(i4), op(0x3c))
		__asm(push(i15), push(i5), op(0x3c))
		__asm(push(i11!=0), iftrue, target("___vfprintf__XprivateX__BB59_1169_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1375_F"))
		i11 = i2
	__asm(lbl("___vfprintf__XprivateX__BB59_1376_F"))
		i15 = i11
		i11 =  (i22 + -16)
	__asm(lbl("___vfprintf__XprivateX__BB59_1377_F"))
		i22 = i11
		i11 = i15
		i15 =  (_zeroes_2E_4527)
		__asm(push(i15), push(i11), op(0x3c))
		i15 =  (i11 + 4)
		__asm(push(i22>16), iftrue, target("___vfprintf__XprivateX__BB59_1370_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1378_F"))
		__asm(push(i22), push(i15), op(0x3c))
		i15 =  ((__xasm<int>(push(i4), op(0x37))))
		i15 =  (i15 + i22)
		__asm(push(i15), push(i4), op(0x3c))
		i22 =  ((__xasm<int>(push(i5), op(0x37))))
		i22 =  (i22 + 1)
		__asm(push(i22), push(i5), op(0x3c))
		i11 =  (i11 + 8)
		__asm(push(i22>7), iftrue, target("___vfprintf__XprivateX__BB59_1380_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1379_F"))
		i15 = i11
		i11 = i16
		i16 = i20
		__asm(jump, target("___vfprintf__XprivateX__BB59_1424_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1380_F"))
		__asm(push(i15!=0), iftrue, target("___vfprintf__XprivateX__BB59_1382_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1381_F"))
		i11 =  (0)
		__asm(push(i11), push(i5), op(0x3c))
		i15 = i2
		i11 = i16
		i16 = i20
		__asm(jump, target("___vfprintf__XprivateX__BB59_1424_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1382_F"))
		i11 =  ((mstate.ebp+-1728))
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i11), push((mstate.esp+4)), op(0x3c))
		state = 104
		mstate.esp -= 4;FSM___sfvwrite.start()
		return
	__asm(lbl("___vfprintf_state104"))
		i11 = mstate.eax
		mstate.esp += 8
		i15 =  (0)
		__asm(push(i15), push(i4), op(0x3c))
		__asm(push(i15), push(i5), op(0x3c))
		__asm(push(i11==0), iftrue, target("___vfprintf__XprivateX__BB59_1367_B"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1169_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1383_F"))
		__asm(push(i16>1), iftrue, target("___vfprintf__XprivateX__BB59_1385_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1384_F"))
		i10 =  (i3 & 1)
		__asm(push(i10==0), iftrue, target("___vfprintf__XprivateX__BB59_1414_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1385_F"))
		i10 =  (2)
		i26 =  ((__xasm<int>(push(i15), op(0x35))))
		i27 =  ((__xasm<int>(push((mstate.ebp+-2187)), op(0x37))))
		__asm(push(i26), push(i27), op(0x3a))
		i26 =  ((__xasm<int>(push((mstate.ebp+-2097)), op(0x37))))
		i26 =  ((__xasm<int>(push(i26), op(0x35))))
		i27 =  ((__xasm<int>(push((mstate.ebp+-2043)), op(0x37))))
		__asm(push(i26), push(i27), op(0x3a))
		i26 =  ((__xasm<int>(push((mstate.ebp+-2187)), op(0x37))))
		__asm(push(i26), push(i11), op(0x3c))
		__asm(push(i10), push((i11+4)), op(0x3c))
		i10 =  ((__xasm<int>(push(i4), op(0x37))))
		i10 =  (i10 + 2)
		__asm(push(i10), push(i4), op(0x3c))
		i26 =  ((__xasm<int>(push(i5), op(0x37))))
		i26 =  (i26 + 1)
		__asm(push(i26), push(i5), op(0x3c))
		i11 =  (i11 + 8)
		i15 =  (i15 + 1)
		__asm(push(i26>7), iftrue, target("___vfprintf__XprivateX__BB59_1387_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1386_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1391_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1387_F"))
		__asm(push(i10!=0), iftrue, target("___vfprintf__XprivateX__BB59_1389_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1388_F"))
		i11 =  (0)
		__asm(push(i11), push(i5), op(0x3c))
		i11 = i2
		__asm(jump, target("___vfprintf__XprivateX__BB59_1391_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1389_F"))
		i11 =  ((mstate.ebp+-1728))
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i11), push((mstate.esp+4)), op(0x3c))
		state = 105
		mstate.esp -= 4;FSM___sfvwrite.start()
		return
	__asm(lbl("___vfprintf_state105"))
		i11 = mstate.eax
		mstate.esp += 8
		i10 =  (0)
		__asm(push(i10), push(i4), op(0x3c))
		__asm(push(i10), push(i5), op(0x3c))
		__asm(push(i11!=0), iftrue, target("___vfprintf__XprivateX__BB59_1169_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1390_F"))
		i11 = i2
	__asm(lbl("___vfprintf__XprivateX__BB59_1391_F"))
		__asm(push(i15), push(i11), op(0x3c))
		i15 =  (i21 + -1)
		__asm(push(i15), push((i11+4)), op(0x3c))
		i10 =  ((__xasm<int>(push(i4), op(0x37))))
		i15 =  (i15 + i10)
		__asm(push(i15), push(i4), op(0x3c))
		i10 =  ((__xasm<int>(push(i5), op(0x37))))
		i10 =  (i10 + 1)
		__asm(push(i10), push(i5), op(0x3c))
		i11 =  (i11 + 8)
		__asm(push(i10<8), iftrue, target("___vfprintf__XprivateX__BB59_1398_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1392_F"))
		__asm(push(i15!=0), iftrue, target("___vfprintf__XprivateX__BB59_1394_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1393_F"))
		i11 =  (0)
		__asm(push(i11), push(i5), op(0x3c))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1395_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1394_F"))
		i11 =  ((mstate.ebp+-1728))
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i11), push((mstate.esp+4)), op(0x3c))
		state = 106
		mstate.esp -= 4;FSM___sfvwrite.start()
		return
	__asm(lbl("___vfprintf_state106"))
		i11 = mstate.eax
		mstate.esp += 8
		i15 =  (0)
		__asm(push(i15), push(i4), op(0x3c))
		__asm(push(i15), push(i5), op(0x3c))
		__asm(push(i11!=0), iftrue, target("___vfprintf__XprivateX__BB59_1169_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1395_F"))
		i11 =  (i16 - i21)
		__asm(push(i11>0), iftrue, target("___vfprintf__XprivateX__BB59_1397_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_1396_F"), lbl("___vfprintf__XprivateX__BB59_1396_B"), label, lbl("___vfprintf__XprivateX__BB59_1396_F")); 
		i11 = i2
		__asm(jump, target("___vfprintf__XprivateX__BB59_1418_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1397_F"))
		i15 = i11
		i11 = i2
		__asm(jump, target("___vfprintf__XprivateX__BB59_1408_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1398_F"))
		i15 =  (i16 - i21)
		__asm(push(i15>0), iftrue, target("___vfprintf__XprivateX__BB59_1400_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1399_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1418_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1400_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1408_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1401_B"), label)
		i10 =  (16)
		__asm(push(i10), push(i16), op(0x3c))
		i16 =  ((__xasm<int>(push(i4), op(0x37))))
		i16 =  (i16 + 16)
		__asm(push(i16), push(i4), op(0x3c))
		i10 =  ((__xasm<int>(push(i5), op(0x37))))
		i10 =  (i10 + 1)
		__asm(push(i10), push(i5), op(0x3c))
		i11 =  (i11 + 8)
		__asm(push(i10>7), iftrue, target("___vfprintf__XprivateX__BB59_1403_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1402_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1407_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1403_F"))
		__asm(push(i16!=0), iftrue, target("___vfprintf__XprivateX__BB59_1405_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1404_F"))
		i11 =  (0)
		__asm(push(i11), push(i5), op(0x3c))
		i11 = i2
		__asm(jump, target("___vfprintf__XprivateX__BB59_1407_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1405_F"))
		i11 =  ((mstate.ebp+-1728))
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i11), push((mstate.esp+4)), op(0x3c))
		state = 107
		mstate.esp -= 4;FSM___sfvwrite.start()
		return
	__asm(lbl("___vfprintf_state107"))
		i11 = mstate.eax
		mstate.esp += 8
		i16 =  (0)
		__asm(push(i16), push(i4), op(0x3c))
		__asm(push(i16), push(i5), op(0x3c))
		__asm(push(i11!=0), iftrue, target("___vfprintf__XprivateX__BB59_1169_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1406_F"))
		i11 = i2
	__asm(lbl("___vfprintf__XprivateX__BB59_1407_F"))
		i15 =  (i15 + -16)
	__asm(lbl("___vfprintf__XprivateX__BB59_1408_F"))
		i16 =  (_zeroes_2E_4527)
		__asm(push(i16), push(i11), op(0x3c))
		i16 =  (i11 + 4)
		__asm(push(i15>16), iftrue, target("___vfprintf__XprivateX__BB59_1401_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1409_F"))
		__asm(push(i15), push(i16), op(0x3c))
		i16 =  ((__xasm<int>(push(i4), op(0x37))))
		i15 =  (i16 + i15)
		__asm(push(i15), push(i4), op(0x3c))
		i16 =  ((__xasm<int>(push(i5), op(0x37))))
		i16 =  (i16 + 1)
		__asm(push(i16), push(i5), op(0x3c))
		i11 =  (i11 + 8)
		__asm(push(i16>7), iftrue, target("___vfprintf__XprivateX__BB59_1411_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1410_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1418_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1411_F"))
		__asm(push(i15!=0), iftrue, target("___vfprintf__XprivateX__BB59_1413_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1412_F"))
		i11 =  (0)
		__asm(push(i11), push(i5), op(0x3c))
		i11 = i2
		__asm(jump, target("___vfprintf__XprivateX__BB59_1418_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1413_F"))
		i11 =  ((mstate.ebp+-1728))
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i11), push((mstate.esp+4)), op(0x3c))
		state = 108
		mstate.esp -= 4;FSM___sfvwrite.start()
		return
	__asm(lbl("___vfprintf_state108"))
		i11 = mstate.eax
		mstate.esp += 8
		i15 =  (0)
		__asm(push(i15), push(i4), op(0x3c))
		__asm(push(i15), push(i5), op(0x3c))
		__asm(push(i11==0), iftrue, target("___vfprintf__XprivateX__BB59_1396_B"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1169_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1414_F"))
		i16 =  (1)
		__asm(push(i15), push(i11), op(0x3c))
		__asm(push(i16), push((i11+4)), op(0x3c))
		i15 =  ((__xasm<int>(push(i4), op(0x37))))
		i15 =  (i15 + 1)
		__asm(push(i15), push(i4), op(0x3c))
		i16 =  ((__xasm<int>(push(i5), op(0x37))))
		i16 =  (i16 + 1)
		__asm(push(i16), push(i5), op(0x3c))
		i11 =  (i11 + 8)
		__asm(push(i16>7), iftrue, target("___vfprintf__XprivateX__BB59_1416_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1415_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1418_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1416_F"))
		__asm(push(i15!=0), iftrue, target("___vfprintf__XprivateX__BB59_1489_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1417_F"))
		i11 =  (0)
		__asm(push(i11), push(i5), op(0x3c))
		i11 = i2
		__asm(jump, target("___vfprintf__XprivateX__BB59_1418_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1418_F"))
		i15 =  ((__xasm<int>(push((mstate.ebp+-2124)), op(0x37))))
		__asm(push(i15), push(i11), op(0x3c))
		__asm(push(i19), push((i11+4)), op(0x3c))
		i15 =  ((__xasm<int>(push(i4), op(0x37))))
		i15 =  (i15 + i19)
		__asm(push(i15), push(i4), op(0x3c))
		i16 =  ((__xasm<int>(push(i5), op(0x37))))
		i16 =  (i16 + 1)
		__asm(push(i16), push(i5), op(0x3c))
		i11 =  (i11 + 8)
		__asm(push(i16>7), iftrue, target("___vfprintf__XprivateX__BB59_1420_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1419_F"))
		i15 = i11
		i11 = i20
		i16 = i22
		__asm(jump, target("___vfprintf__XprivateX__BB59_1424_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1420_F"))
		__asm(push(i15!=0), iftrue, target("___vfprintf__XprivateX__BB59_1422_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1421_F"))
		i11 =  (0)
		__asm(push(i11), push(i5), op(0x3c))
		i15 = i2
		i11 = i20
		i16 = i22
		__asm(jump, target("___vfprintf__XprivateX__BB59_1424_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1422_F"))
		i11 =  ((mstate.ebp+-1728))
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i11), push((mstate.esp+4)), op(0x3c))
		state = 109
		mstate.esp -= 4;FSM___sfvwrite.start()
		return
	__asm(lbl("___vfprintf_state109"))
		i11 = mstate.eax
		mstate.esp += 8
		i15 =  (0)
		__asm(push(i15), push(i4), op(0x3c))
		__asm(push(i15), push(i5), op(0x3c))
		__asm(push(i11!=0), iftrue, target("___vfprintf__XprivateX__BB59_1169_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1423_F"))
		i15 = i2
		i11 = i20
		i16 = i22
	__asm(lbl("___vfprintf__XprivateX__BB59_1424_F"))
		i10 = i16
		i3 =  (i3 & 4)
		__asm(push(i3==0), iftrue, target("___vfprintf__XprivateX__BB59_1490_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1425_F"))
		i3 = i15
		i15 = i10
		__asm(jump, target("___vfprintf__XprivateX__BB59_1426_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1426_F"))
		i10 = i15
		i9 =  (i8 - i9)
		__asm(push(i9>0), iftrue, target("___vfprintf__XprivateX__BB59_1428_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_1427_F"), lbl("___vfprintf__XprivateX__BB59_1427_B"), label, lbl("___vfprintf__XprivateX__BB59_1427_F")); 
		i3 = i7
		i7 = i11
		i11 = i10
		__asm(jump, target("___vfprintf__XprivateX__BB59_1442_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1428_F"))
		i1 =  (i1 & 255)
		i1 =  ((i1!=0) ? 1 : 0)
		i1 =  (i1 & 1)
		i9 =  (i12 + i23)
		i1 =  (i9 + i1)
		i1 =  (i8 - i1)
		__asm(jump, target("___vfprintf__XprivateX__BB59_1436_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1429_B"), label)
		i9 =  (16)
		__asm(push(i9), push(i8), op(0x3c))
		i8 =  ((__xasm<int>(push(i4), op(0x37))))
		i8 =  (i8 + 16)
		__asm(push(i8), push(i4), op(0x3c))
		i9 =  ((__xasm<int>(push(i5), op(0x37))))
		i9 =  (i9 + 1)
		__asm(push(i9), push(i5), op(0x3c))
		i3 =  (i3 + 8)
		__asm(push(i9>7), iftrue, target("___vfprintf__XprivateX__BB59_1431_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1430_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1435_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1431_F"))
		__asm(push(i8!=0), iftrue, target("___vfprintf__XprivateX__BB59_1433_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1432_F"))
		i3 =  (0)
		__asm(push(i3), push(i5), op(0x3c))
		i3 = i2
		__asm(jump, target("___vfprintf__XprivateX__BB59_1435_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1433_F"))
		i3 =  ((mstate.ebp+-1728))
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i3), push((mstate.esp+4)), op(0x3c))
		state = 110
		mstate.esp -= 4;FSM___sfvwrite.start()
		return
	__asm(lbl("___vfprintf_state110"))
		i3 = mstate.eax
		mstate.esp += 8
		i8 =  (0)
		__asm(push(i8), push(i4), op(0x3c))
		__asm(push(i8), push(i5), op(0x3c))
		__asm(push(i3!=0), iftrue, target("___vfprintf__XprivateX__BB59_1169_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1434_F"))
		i3 = i2
	__asm(lbl("___vfprintf__XprivateX__BB59_1435_F"))
		i1 =  (i1 + -16)
	__asm(lbl("___vfprintf__XprivateX__BB59_1436_F"))
		i8 =  (_blanks_2E_4526)
		__asm(push(i8), push(i3), op(0x3c))
		i8 =  (i3 + 4)
		__asm(push(i1>16), iftrue, target("___vfprintf__XprivateX__BB59_1429_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1437_F"))
		__asm(push(i1), push(i8), op(0x3c))
		i3 =  ((__xasm<int>(push(i4), op(0x37))))
		i3 =  (i3 + i1)
		__asm(push(i3), push(i4), op(0x3c))
		i1 =  ((__xasm<int>(push(i5), op(0x37))))
		i1 =  (i1 + 1)
		__asm(push(i1), push(i5), op(0x3c))
		__asm(push(i1<8), iftrue, target("___vfprintf__XprivateX__BB59_1427_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1438_F"))
		__asm(push(i3!=0), iftrue, target("___vfprintf__XprivateX__BB59_1440_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1439_F"))
		i3 =  (0)
		__asm(push(i3), push(i5), op(0x3c))
		i3 = i7
		i7 = i11
		i11 = i10
		__asm(jump, target("___vfprintf__XprivateX__BB59_1442_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1440_F"))
		i3 =  ((mstate.ebp+-1728))
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i3), push((mstate.esp+4)), op(0x3c))
		state = 111
		mstate.esp -= 4;FSM___sfvwrite.start()
		return
	__asm(lbl("___vfprintf_state111"))
		i3 = mstate.eax
		mstate.esp += 8
		i1 =  (0)
		__asm(push(i1), push(i4), op(0x3c))
		__asm(push(i1), push(i5), op(0x3c))
		__asm(push(i3==0), iftrue, target("___vfprintf__XprivateX__BB59_1427_B"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1169_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1441_F"))
		i3 = i7
		i7 = i20
		i11 = i22
		__asm(jump, target("___vfprintf__XprivateX__BB59_1442_F"))
	__asm(jump, target("___vfprintf__XprivateX__BB59_1442_F"), lbl("___vfprintf__XprivateX__BB59_1442_B"), label, lbl("___vfprintf__XprivateX__BB59_1442_F")); 
		i1 = i7
		i9 = i11
		i8 =  ((__xasm<int>(push(i4), op(0x37))))
		__asm(push(i8==0), iftrue, target("___vfprintf__XprivateX__BB59_18_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1443_F"))
		i8 =  ((mstate.ebp+-1728))
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i8), push((mstate.esp+4)), op(0x3c))
		state = 112
		mstate.esp -= 4;FSM___sfvwrite.start()
		return
	__asm(lbl("___vfprintf_state112"))
		i8 = mstate.eax
		mstate.esp += 8
		i7 =  (0)
		__asm(push(i7), push(i4), op(0x3c))
		__asm(push(i7), push(i5), op(0x3c))
		__asm(push(i8==0), iftrue, target("___vfprintf__XprivateX__BB59_18_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1444_F"))
		i6 = i24
		i8 = i14
		i0 = i25
		__asm(jump, target("___vfprintf__XprivateX__BB59_1449_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1445_F"))
		i3 =  ((__xasm<int>(push(i4), op(0x37))))
		__asm(push(i3==0), iftrue, target("___vfprintf__XprivateX__BB59_1448_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1446_F"))
		i3 =  ((mstate.ebp+-1728))
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i3), push((mstate.esp+4)), op(0x3c))
		state = 113
		mstate.esp -= 4;FSM___sfvwrite.start()
		return
	__asm(lbl("___vfprintf_state113"))
		i0 = mstate.eax
		mstate.esp += 8
		i3 =  (0)
		__asm(push(i3), push(i4), op(0x3c))
		__asm(push(i3), push(i5), op(0x3c))
		__asm(push(i0==0), iftrue, target("___vfprintf__XprivateX__BB59_1448_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1447_F"))
		i0 =  ((__xasm<int>(push((mstate.ebp+-2277)), op(0x37))))
		i6 = i0
		i8 = i14
		i0 =  ((__xasm<int>(push((mstate.ebp+-2367)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1449_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1448_F"))
		i0 =  (0)
		__asm(push(i0), push(i5), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+-2277)), op(0x37))))
		i6 = i0
		i8 = i14
		i0 =  ((__xasm<int>(push((mstate.ebp+-2367)), op(0x37))))
	__asm(lbl("___vfprintf__XprivateX__BB59_1449_F"))
		i3 = i6
		i1 = i8
		i2 = i0
		__asm(push(i1==0), iftrue, target("___vfprintf__XprivateX__BB59_1491_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1450_F"))
		i0 = i1
		i1 = i2
		__asm(jump, target("___vfprintf__XprivateX__BB59_1451_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1451_F"))
		i2 =  (1)
		i4 =  ((__xasm<int>(push((i0+-4)), op(0x37))))
		__asm(push(i4), push(i0), op(0x3c))
		i2 =  (i2 << i4)
		__asm(push(i2), push((i0+4)), op(0x3c))
		i0 =  (i0 + -4)
		i2 = i0
		__asm(push(i0!=0), iftrue, target("___vfprintf__XprivateX__BB59_1453_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1452_F"))
		i0 = i1
		__asm(jump, target("___vfprintf__XprivateX__BB59_1454_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1453_F"))
		i5 =  (_freelist)
		i4 =  (i4 << 2)
		i4 =  (i5 + i4)
		i5 =  ((__xasm<int>(push(i4), op(0x37))))
		__asm(push(i5), push(i0), op(0x3c))
		__asm(push(i2), push(i4), op(0x3c))
		i0 = i1
	__asm(jump, target("___vfprintf__XprivateX__BB59_1454_F"), lbl("___vfprintf__XprivateX__BB59_1454_B"), label, lbl("___vfprintf__XprivateX__BB59_1454_F")); 
		i1 = i3
		__asm(push(i0==0), iftrue, target("___vfprintf__XprivateX__BB59_1456_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1455_F"))
		i2 =  (0)
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i2), push((mstate.esp+4)), op(0x3c))
		state = 114
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("___vfprintf_state114"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("___vfprintf__XprivateX__BB59_1456_F"))
		i0 =  ((__xasm<int>(push((mstate.ebp+-1971)), op(0x37))))
		i0 =  ((__xasm<int>(push(i0), op(0x36))))
		i2 =  ((__xasm<int>(push((mstate.ebp+-1540)), op(0x37))))
		i0 =  (i0 & 64)
		i0 =  ((i0==0) ? i1 : -1)
		__asm(push(i2==0), iftrue, target("___vfprintf__XprivateX__BB59_1458_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1457_F"))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2223)), op(0x37))))
		__asm(push(i1!=i2), iftrue, target("___vfprintf__XprivateX__BB59_1459_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1458_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1460_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1459_F"))
		i1 =  (0)
		mstate.esp -= 8
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 115
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("___vfprintf_state115"))
		i1 = mstate.eax
		mstate.esp += 8
	__asm(lbl("___vfprintf__XprivateX__BB59_1460_F"))
		mstate.eax = i0
	__asm(lbl("___vfprintf__XprivateX__BB59_1461_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("___vfprintf__XprivateX__BB59_1462_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_24_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1463_F"))
		i8 = i11
		i9 = i15
		__asm(jump, target("___vfprintf__XprivateX__BB59_42_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1464_F"))
		i11 =  (0)
		i15 = i11
		__asm(jump, target("___vfprintf__XprivateX__BB59_165_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1465_F"))
		i17 =  (0)
		__asm(jump, target("___vfprintf__XprivateX__BB59_292_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1466_F"))
		i21 =  (0)
		__asm(jump, target("___vfprintf__XprivateX__BB59_309_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1467_F"))
		i21 =  (0)
		__asm(jump, target("___vfprintf__XprivateX__BB59_376_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1468_F"))
		i26 =  (0)
		i21 = i14
		i14 = i26
		__asm(jump, target("___vfprintf__XprivateX__BB59_393_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1469_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_430_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1470_F"))
		i9 =  (0)
		__asm(jump, target("___vfprintf__XprivateX__BB59_552_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1471_F"))
		i16 =  (3)
		__asm(jump, target("___vfprintf__XprivateX__BB59_565_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1472_F"))
		i16 =  (2)
		__asm(jump, target("___vfprintf__XprivateX__BB59_578_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1473_F"))
		i23 = i21
		i24 = i12
		__asm(jump, target("___vfprintf__XprivateX__BB59_585_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1474_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_709_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1475_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_725_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1476_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_753_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1477_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_762_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1478_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_784_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1479_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_812_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1480_F"))
		i3 = i1
		i1 = i16
		__asm(jump, target("___vfprintf__XprivateX__BB59_842_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1481_F"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_852_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1482_F"))
		i15 =  (0)
		i16 = i20
		i17 = i15
		__asm(jump, target("___vfprintf__XprivateX__BB59_1483_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1483_F"))
		i20 = i16
		i22 = i17
		i23 = i15
		i29 =  (0)
		i15 =  (i22 + i28)
		i28 =  (i15 + i23)
		i15 = i14
		i16 = i10
		i17 = i11
		i10 =  ((__xasm<int>(push((mstate.ebp+-2295)), op(0x37))))
		i19 = i10
		i14 = i12
		i10 =  ((__xasm<int>(push((mstate.ebp+-2457)), op(0x37))))
		i24 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2448)), op(0x37))))
		i25 = i10
		i10 =  ((__xasm<int>(push((mstate.ebp+-2439)), op(0x37))))
		i26 = i10
		i11 = i29
		i10 = i28
		i12 = i27
		i27 =  ((__xasm<int>(push((mstate.ebp+-2367)), op(0x37))))
		i28 =  ((__xasm<int>(push((mstate.ebp+-2322)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1158_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1484_F"))
		i10 =  (0)
		i15 =  ((__xasm<int>(push((mstate.ebp+-2322)), op(0x37))))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1009_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1485_F"))
		i12 = i10
		__asm(jump, target("___vfprintf__XprivateX__BB59_1486_F"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1486_F"))
		i15 =  (i12 - i15)
		__asm(jump, target("___vfprintf__XprivateX__BB59_1025_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1487_F"))
		i3 = i20
		i15 = i16
		i16 = i21
		__asm(jump, target("___vfprintf__XprivateX__BB59_1102_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1488_F"))
		i11 =  ((mstate.ebp+-1728))
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i11), push((mstate.esp+4)), op(0x3c))
		state = 116
		mstate.esp -= 4;FSM___sfvwrite.start()
		return
	__asm(lbl("___vfprintf_state116"))
		i11 = mstate.eax
		mstate.esp += 8
		i26 =  (0)
		__asm(push(i26), push(i4), op(0x3c))
		__asm(push(i26), push(i5), op(0x3c))
		__asm(push(i11==0), iftrue, target("___vfprintf__XprivateX__BB59_1215_B"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1169_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1489_F"))
		i11 =  ((mstate.ebp+-1728))
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i11), push((mstate.esp+4)), op(0x3c))
		state = 117
		mstate.esp -= 4;FSM___sfvwrite.start()
		return
	__asm(lbl("___vfprintf_state117"))
		i11 = mstate.eax
		mstate.esp += 8
		i15 =  (0)
		__asm(push(i15), push(i4), op(0x3c))
		__asm(push(i15), push(i5), op(0x3c))
		__asm(push(i11==0), iftrue, target("___vfprintf__XprivateX__BB59_1396_B"))
		__asm(jump, target("___vfprintf__XprivateX__BB59_1169_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1490_F"))
		i3 = i7
		i7 = i11
		i11 = i10
		__asm(jump, target("___vfprintf__XprivateX__BB59_1442_B"))
	__asm(lbl("___vfprintf__XprivateX__BB59_1491_F"))
		i0 = i2
		__asm(jump, target("___vfprintf__XprivateX__BB59_1454_B"))
	__asm(lbl("___vfprintf_errState"))
		throw("Invalid state in ___vfprintf")
	}
}



// Async
public const ___sflush:int = regFunc(FSM___sflush.start)

public final class FSM___sflush extends Machine {

	public static function start():void {
			var result:FSM___sflush = new FSM___sflush
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int

	public static const intRegCount:int = 7

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("___sflush_entry"))
		__asm(push(state), switchjump(
			"___sflush_errState",
			"___sflush_state0",
			"___sflush_state1"))
	__asm(lbl("___sflush_state0"))
	__asm(lbl("___sflush__XprivateX__BB60_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+12)), op(0x36), op(0x52))))
		i2 =  (i0 + 12)
		i3 =  (i1 & 8)
		__asm(push(i3==0), iftrue, target("___sflush__XprivateX__BB60_11_F"))
	__asm(lbl("___sflush__XprivateX__BB60_1_F"))
		i3 =  ((__xasm<int>(push((i0+16)), op(0x37))))
		__asm(push(i3==0), iftrue, target("___sflush__XprivateX__BB60_11_F"))
	__asm(lbl("___sflush__XprivateX__BB60_2_F"))
		i4 =  ((__xasm<int>(push(i0), op(0x37))))
		__asm(push(i3), push(i0), op(0x3c))
		i5 =  (i0 + 8)
		i6 = i3
		i1 =  (i1 & 3)
		__asm(push(i1!=0), iftrue, target("___sflush__XprivateX__BB60_5_F"))
	__asm(lbl("___sflush__XprivateX__BB60_3_F"))
		i1 =  ((__xasm<int>(push((i0+20)), op(0x37))))
		__asm(push(i1), push(i5), op(0x3c))
		i4 =  (i4 - i6)
		__asm(push(i4<1), iftrue, target("___sflush__XprivateX__BB60_11_F"))
	__asm(lbl("___sflush__XprivateX__BB60_4_F"))
		i5 =  (0)
		__asm(jump, target("___sflush__XprivateX__BB60_7_F"))
	__asm(lbl("___sflush__XprivateX__BB60_5_F"))
		i1 =  (0)
		__asm(push(i1), push(i5), op(0x3c))
		i4 =  (i4 - i6)
		__asm(push(i4<1), iftrue, target("___sflush__XprivateX__BB60_11_F"))
	__asm(lbl("___sflush__XprivateX__BB60_6_F"))
		i5 =  (0)
	__asm(jump, target("___sflush__XprivateX__BB60_7_F"), lbl("___sflush__XprivateX__BB60_7_B"), label, lbl("___sflush__XprivateX__BB60_7_F")); 
		mstate.esp -= 12
		i1 =  (i3 + i5)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i4), push((mstate.esp+8)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM__swrite.start()
		return
	__asm(lbl("___sflush_state1"))
		i1 = mstate.eax
		mstate.esp += 12
		__asm(push(i1>0), iftrue, target("___sflush__XprivateX__BB60_9_F"))
	__asm(lbl("___sflush__XprivateX__BB60_8_F"))
		i4 =  (-1)
		i5 =  ((__xasm<int>(push(i2), op(0x36))))
		i5 =  (i5 | 64)
		__asm(push(i5), push(i2), op(0x3b))
		mstate.eax = i4
		__asm(jump, target("___sflush__XprivateX__BB60_12_F"))
	__asm(lbl("___sflush__XprivateX__BB60_9_F"))
		i4 =  (i4 - i1)
		i5 =  (i5 + i1)
		__asm(push(i4<1), iftrue, target("___sflush__XprivateX__BB60_11_F"))
	__asm(lbl("___sflush__XprivateX__BB60_10_F"))
		__asm(jump, target("___sflush__XprivateX__BB60_7_B"))
	__asm(lbl("___sflush__XprivateX__BB60_11_F"))
		i0 =  (0)
		mstate.eax = i0
	__asm(lbl("___sflush__XprivateX__BB60_12_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("___sflush_errState"))
		throw("Invalid state in ___sflush")
	}
}



// Async
public const ___sread:int = regFunc(FSM___sread.start)

public final class FSM___sread extends Machine {

	public static function start():void {
			var result:FSM___sread = new FSM___sread
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int

	public static const intRegCount:int = 3

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("___sread_entry"))
		__asm(push(state), switchjump(
			"___sread_errState",
			"___sread_state0",
			"___sread_state1"))
	__asm(lbl("___sread_state0"))
	__asm(lbl("___sread__XprivateX__BB61_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i0 =  ((__xasm<int>(push((i0+14)), op(0x36), op(0x52))))
				state = 1
	__asm(lbl("___sread_state1"))
//InlineAsmStart
	i0 =  mstate.system.read(i0, i1, i2);//!!ASYNC

	//InlineAsmEnd
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("___sread_errState"))
		throw("Invalid state in ___sread")
	}
}



// Async
public const ___swrite:int = regFunc(FSM___swrite.start)

public final class FSM___swrite extends Machine {

	public static function start():void {
			var result:FSM___swrite = new FSM___swrite
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int

	public static const intRegCount:int = 3

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("___swrite_entry"))
		__asm(push(state), switchjump(
			"___swrite_errState",
			"___swrite_state0",
			"___swrite_state1"))
	__asm(lbl("___swrite_state0"))
	__asm(lbl("___swrite__XprivateX__BB62_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i0 =  ((__xasm<int>(push((i0+14)), op(0x36), op(0x52))))
				state = 1
	__asm(lbl("___swrite_state1"))
//InlineAsmStart
	i0 =  mstate.system.write(i0, i1, i2);//!!ASYNC

	//InlineAsmEnd
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("___swrite_errState"))
		throw("Invalid state in ___swrite")
	}
}



// Async
public const ___sseek:int = regFunc(FSM___sseek.start)

public final class FSM___sseek extends Machine {

	public static function start():void {
			var result:FSM___sseek = new FSM___sseek
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int

	public static const intRegCount:int = 3

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("___sseek_entry"))
		__asm(push(state), switchjump(
			"___sseek_errState",
			"___sseek_state0",
			"___sseek_state1"))
	__asm(lbl("___sseek_state0"))
	__asm(lbl("___sseek__XprivateX__BB63_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+20)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i0 =  ((__xasm<int>(push((i0+14)), op(0x36), op(0x52))))
				state = 1
	__asm(lbl("___sseek_state1"))
//InlineAsmStart
	i0 =  mstate.system.lseek(i0, i1, i2);//!!ASYNC

	//InlineAsmEnd
		i1 =  (i0 >> 31)
		mstate.edx = i1
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("___sseek_errState"))
		throw("Invalid state in ___sseek")
	}
}



// Async
public const ___sclose:int = regFunc(FSM___sclose.start)

public final class FSM___sclose extends Machine {

	public static function start():void {
			var result:FSM___sclose = new FSM___sclose
		gstate.gworker = result
	}

	public var i0:int

	public static const intRegCount:int = 1

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("___sclose_entry"))
		__asm(push(state), switchjump(
			"___sclose_errState",
			"___sclose_state0",
			"___sclose_state1"))
	__asm(lbl("___sclose_state0"))
	__asm(lbl("___sclose__XprivateX__BB64_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  ((__xasm<int>(push((i0+14)), op(0x36), op(0x52))))
				state = 1
	__asm(lbl("___sclose_state1"))
//InlineAsmStart
	i0 =  mstate.system.close(i0);//!!ASYNC

	//InlineAsmEnd
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("___sclose_errState"))
		throw("Invalid state in ___sclose")
	}
}



// Async
public const __swrite:int = regFunc(FSM__swrite.start)

public final class FSM__swrite extends Machine {

	public static function start():void {
			var result:FSM__swrite = new FSM__swrite
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
	public var i8:int, i9:int, i10:int

	public static const intRegCount:int = 11

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__swrite_entry"))
		__asm(push(state), switchjump(
			"__swrite_errState",
			"__swrite_state0",
			"__swrite_state1",
			"__swrite_state2"))
	__asm(lbl("__swrite_state0"))
	__asm(lbl("__swrite__XprivateX__BB65_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+12)), op(0x36))))
		i2 =  (i0 + 12)
		i3 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i4 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i1 =  (i1 & 256)
		__asm(push(i1==0), iftrue, target("__swrite__XprivateX__BB65_5_F"))
	__asm(lbl("__swrite__XprivateX__BB65_1_F"))
		i1 =  (0)
		i5 =  ((__xasm<int>(push(_val_2E_1440), op(0x37))))
		mstate.esp -= 16
		i6 =  (2)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i1), push((mstate.esp+8)), op(0x3c))
		__asm(push(i6), push((mstate.esp+12)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM__sseek.start()
		return
	__asm(lbl("__swrite_state1"))
		i1 = mstate.eax
		i6 = mstate.edx
		mstate.esp += 16
		i1 =  (i1 & i6)
		__asm(push(i1!=-1), iftrue, target("__swrite__XprivateX__BB65_4_F"))
	__asm(lbl("__swrite__XprivateX__BB65_2_F"))
		i1 =  ((__xasm<int>(push(i2), op(0x36))))
		i1 =  (i1 & 1024)
		__asm(push(i1==0), iftrue, target("__swrite__XprivateX__BB65_4_F"))
	__asm(lbl("__swrite__XprivateX__BB65_3_F"))
		i0 =  (-1)
		__asm(jump, target("__swrite__XprivateX__BB65_14_F"))
	__asm(lbl("__swrite__XprivateX__BB65_4_F"))
		__asm(push(i5), push(_val_2E_1440), op(0x3c))
	__asm(lbl("__swrite__XprivateX__BB65_5_F"))
		i1 =  ((__xasm<int>(push((i0+44)), op(0x37))))
		i5 =  ((__xasm<int>(push((i0+28)), op(0x37))))
		mstate.esp -= 12
		__asm(push(i5), push(mstate.esp), op(0x3c))
		__asm(push(i3), push((mstate.esp+4)), op(0x3c))
		__asm(push(i4), push((mstate.esp+8)), op(0x3c))
		state = 2
		mstate.esp -= 4;(mstate.funcs[i1])()
		return
	__asm(lbl("__swrite_state2"))
		i1 = mstate.eax
		mstate.esp += 12
		__asm(push(i1<0), iftrue, target("__swrite__XprivateX__BB65_12_F"))
	__asm(lbl("__swrite__XprivateX__BB65_6_F"))
		i3 =  ((__xasm<int>(push(i2), op(0x36))))
		i4 =  (i3 & 4352)
		__asm(push(i4!=4352), iftrue, target("__swrite__XprivateX__BB65_9_F"))
	__asm(lbl("__swrite__XprivateX__BB65_7_F"))
		i4 =  (2147483647)
		i5 =  ((__xasm<int>(push((i0+80)), op(0x37))))
		i6 =  ((__xasm<int>(push((i0+84)), op(0x37))))
		i7 =  (i1 >> 31)
		i8 =  (-1)
		i8 =  __subc(i8, i1)
		i4 =  __sube(i4, i7)
		i0 =  (i0 + 80)
		i9 =  ((i6>i4) ? 1 : 0)
		i8 =  ((uint(i5)>uint(i8)) ? 1 : 0)
		i4 =  ((i6==i4) ? 1 : 0)
		i10 = i1
		i4 =  ((i4!=0) ? i8 : i9)
		__asm(push(i4!=0), iftrue, target("__swrite__XprivateX__BB65_9_F"))
	__asm(lbl("__swrite__XprivateX__BB65_8_F"))
		i2 =  __addc(i5, i10)
		i3 =  __adde(i6, i7)
		__asm(push(i2), push(i0), op(0x3c))
		__asm(push(i3), push((i0+4)), op(0x3c))
		__asm(jump, target("__swrite__XprivateX__BB65_11_F"))
	__asm(lbl("__swrite__XprivateX__BB65_9_F"))
		i0 =  (i3 & -4097)
	__asm(jump, target("__swrite__XprivateX__BB65_10_F"), lbl("__swrite__XprivateX__BB65_10_B"), label, lbl("__swrite__XprivateX__BB65_10_F")); 
		__asm(push(i0), push(i2), op(0x3b))
	__asm(lbl("__swrite__XprivateX__BB65_11_F"))
		mstate.eax = i1
		__asm(jump, target("__swrite__XprivateX__BB65_15_F"))
	__asm(lbl("__swrite__XprivateX__BB65_12_F"))
		__asm(push(i1<0), iftrue, target("__swrite__XprivateX__BB65_16_F"))
	__asm(lbl("__swrite__XprivateX__BB65_13_F"))
		i0 = i1
		__asm(jump, target("__swrite__XprivateX__BB65_14_F"))
	__asm(lbl("__swrite__XprivateX__BB65_14_F"))
		mstate.eax = i0
	__asm(lbl("__swrite__XprivateX__BB65_15_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__swrite__XprivateX__BB65_16_F"))
		i0 =  ((__xasm<int>(push(i2), op(0x36))))
		i0 =  (i0 & -4097)
		__asm(jump, target("__swrite__XprivateX__BB65_10_B"))
	__asm(lbl("__swrite_errState"))
		throw("Invalid state in __swrite")
	}
}



// Async
public const ___fflush:int = regFunc(FSM___fflush.start)

public final class FSM___fflush extends Machine {

	public static function start():void {
			var result:FSM___fflush = new FSM___fflush
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int

	public static const intRegCount:int = 6

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("___fflush_entry"))
		__asm(push(state), switchjump(
			"___fflush_errState",
			"___fflush_state0",
			"___fflush_state1",
			"___fflush_state2"))
	__asm(lbl("___fflush_state0"))
	__asm(lbl("___fflush__XprivateX__BB66_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		__asm(push(i0!=0), iftrue, target("___fflush__XprivateX__BB66_14_F"))
	__asm(lbl("___fflush__XprivateX__BB66_1_F"))
		i0 =  (___sglue)
		i1 =  (0)
	__asm(jump, target("___fflush__XprivateX__BB66_2_F"), lbl("___fflush__XprivateX__BB66_2_B"), label, lbl("___fflush__XprivateX__BB66_2_F")); 
		i2 =  ((__xasm<int>(push((i0+4)), op(0x37))))
		i3 =  ((__xasm<int>(push((i0+8)), op(0x37))))
		i4 =  (i2 + -1)
		__asm(push(i4>-1), iftrue, target("___fflush__XprivateX__BB66_4_F"))
	__asm(lbl("___fflush__XprivateX__BB66_3_F"))
		__asm(jump, target("___fflush__XprivateX__BB66_10_F"))
	__asm(lbl("___fflush__XprivateX__BB66_4_F"))
		i2 =  (i2 + -1)
	__asm(jump, target("___fflush__XprivateX__BB66_5_F"), lbl("___fflush__XprivateX__BB66_5_B"), label, lbl("___fflush__XprivateX__BB66_5_F")); 
		i4 =  ((__xasm<int>(push((i3+12)), op(0x36))))
		i4 =  (i4 << 16)
		i4 =  (i4 >> 16)
		i5 = i3
		__asm(push(i4>0), iftrue, target("___fflush__XprivateX__BB66_7_F"))
	__asm(lbl("___fflush__XprivateX__BB66_6_F"))
		__asm(jump, target("___fflush__XprivateX__BB66_8_F"))
	__asm(lbl("___fflush__XprivateX__BB66_7_F"))
		mstate.esp -= 4
		__asm(push(i5), push(mstate.esp), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM___sflush.start()
		return
	__asm(lbl("___fflush_state1"))
		i4 = mstate.eax
		mstate.esp += 4
		i1 =  (i4 | i1)
	__asm(lbl("___fflush__XprivateX__BB66_8_F"))
		i3 =  (i3 + 88)
		i2 =  (i2 + -1)
		__asm(push(i2>-1), iftrue, target("___fflush__XprivateX__BB66_18_F"))
	__asm(lbl("___fflush__XprivateX__BB66_9_F"))
		__asm(jump, target("___fflush__XprivateX__BB66_10_F"))
	__asm(lbl("___fflush__XprivateX__BB66_10_F"))
		i0 =  ((__xasm<int>(push(i0), op(0x37))))
		__asm(push(i0==0), iftrue, target("___fflush__XprivateX__BB66_12_F"))
	__asm(lbl("___fflush__XprivateX__BB66_11_F"))
		__asm(jump, target("___fflush__XprivateX__BB66_2_B"))
	__asm(lbl("___fflush__XprivateX__BB66_12_F"))
		mstate.eax = i1
	__asm(jump, target("___fflush__XprivateX__BB66_13_F"), lbl("___fflush__XprivateX__BB66_13_B"), label, lbl("___fflush__XprivateX__BB66_13_F")); 
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("___fflush__XprivateX__BB66_14_F"))
		i1 =  ((__xasm<int>(push((i0+12)), op(0x36))))
		i1 =  (i1 & 24)
		__asm(push(i1!=0), iftrue, target("___fflush__XprivateX__BB66_17_F"))
	__asm(lbl("___fflush__XprivateX__BB66_15_F"))
		i0 =  (9)
		__asm(push(i0), push(_val_2E_1440), op(0x3c))
		i0 =  (-1)
	__asm(jump, target("___fflush__XprivateX__BB66_16_F"), lbl("___fflush__XprivateX__BB66_16_B"), label, lbl("___fflush__XprivateX__BB66_16_F")); 
		mstate.eax = i0
		__asm(jump, target("___fflush__XprivateX__BB66_13_B"))
	__asm(lbl("___fflush__XprivateX__BB66_17_F"))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM___sflush.start()
		return
	__asm(lbl("___fflush_state2"))
		i0 = mstate.eax
		mstate.esp += 4
		__asm(jump, target("___fflush__XprivateX__BB66_16_B"))
	__asm(lbl("___fflush__XprivateX__BB66_18_F"))
		__asm(jump, target("___fflush__XprivateX__BB66_5_B"))
	__asm(lbl("___fflush_errState"))
		throw("Invalid state in ___fflush")
	}
}



// Async
public const __cleanup:int = regFunc(FSM__cleanup.start)

public final class FSM__cleanup extends Machine {

	public static function start():void {
			var result:FSM__cleanup = new FSM__cleanup
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int

	public static const intRegCount:int = 6

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__cleanup_entry"))
		__asm(push(state), switchjump(
			"__cleanup_errState",
			"__cleanup_state0",
			"__cleanup_state1"))
	__asm(lbl("__cleanup_state0"))
	__asm(lbl("__cleanup__XprivateX__BB67_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (___sglue)
		i1 =  (0)
	__asm(jump, target("__cleanup__XprivateX__BB67_1_F"), lbl("__cleanup__XprivateX__BB67_1_B"), label, lbl("__cleanup__XprivateX__BB67_1_F")); 
		i2 =  ((__xasm<int>(push((i0+4)), op(0x37))))
		i3 =  ((__xasm<int>(push((i0+8)), op(0x37))))
		i4 =  (i2 + -1)
		__asm(push(i4>-1), iftrue, target("__cleanup__XprivateX__BB67_3_F"))
	__asm(lbl("__cleanup__XprivateX__BB67_2_F"))
		__asm(jump, target("__cleanup__XprivateX__BB67_9_F"))
	__asm(lbl("__cleanup__XprivateX__BB67_3_F"))
		i2 =  (i2 + -1)
	__asm(jump, target("__cleanup__XprivateX__BB67_4_F"), lbl("__cleanup__XprivateX__BB67_4_B"), label, lbl("__cleanup__XprivateX__BB67_4_F")); 
		i4 =  ((__xasm<int>(push((i3+12)), op(0x36))))
		i4 =  (i4 << 16)
		i4 =  (i4 >> 16)
		i5 = i3
		__asm(push(i4>0), iftrue, target("__cleanup__XprivateX__BB67_6_F"))
	__asm(lbl("__cleanup__XprivateX__BB67_5_F"))
		__asm(jump, target("__cleanup__XprivateX__BB67_7_F"))
	__asm(lbl("__cleanup__XprivateX__BB67_6_F"))
		mstate.esp -= 4
		__asm(push(i5), push(mstate.esp), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM___sflush.start()
		return
	__asm(lbl("__cleanup_state1"))
		i4 = mstate.eax
		mstate.esp += 4
		i1 =  (i4 | i1)
	__asm(lbl("__cleanup__XprivateX__BB67_7_F"))
		i3 =  (i3 + 88)
		i2 =  (i2 + -1)
		__asm(push(i2>-1), iftrue, target("__cleanup__XprivateX__BB67_12_F"))
	__asm(lbl("__cleanup__XprivateX__BB67_8_F"))
		__asm(jump, target("__cleanup__XprivateX__BB67_9_F"))
	__asm(lbl("__cleanup__XprivateX__BB67_9_F"))
		i0 =  ((__xasm<int>(push(i0), op(0x37))))
		__asm(push(i0==0), iftrue, target("__cleanup__XprivateX__BB67_11_F"))
	__asm(lbl("__cleanup__XprivateX__BB67_10_F"))
		__asm(jump, target("__cleanup__XprivateX__BB67_1_B"))
	__asm(lbl("__cleanup__XprivateX__BB67_11_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__cleanup__XprivateX__BB67_12_F"))
		__asm(jump, target("__cleanup__XprivateX__BB67_4_B"))
	__asm(lbl("__cleanup_errState"))
		throw("Invalid state in __cleanup")
	}
}



// Async
public const __sseek:int = regFunc(FSM__sseek.start)

public final class FSM__sseek extends Machine {

	public static function start():void {
			var result:FSM__sseek = new FSM__sseek
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int

	public static const intRegCount:int = 8

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__sseek_entry"))
		__asm(push(state), switchjump(
			"__sseek_errState",
			"__sseek_state0",
			"__sseek_state1",
			"__sseek_state2"))
	__asm(lbl("__sseek_state0"))
	__asm(lbl("__sseek__XprivateX__BB68_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (0)
		i1 =  ((__xasm<int>(push(_val_2E_1440), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		__asm(push(i0), push(_val_2E_1440), op(0x3c))
		i0 =  ((__xasm<int>(push((i2+40)), op(0x37))))
		i3 =  ((__xasm<int>(push((i2+28)), op(0x37))))
		mstate.esp -= 16
		i4 =  ((__xasm<int>(push((mstate.ebp+20)), op(0x37))))
		i5 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i6 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		__asm(push(i3), push(mstate.esp), op(0x3c))
		__asm(push(i5), push((mstate.esp+4)), op(0x3c))
		__asm(push(i6), push((mstate.esp+8)), op(0x3c))
		__asm(push(i4), push((mstate.esp+12)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[i0])()
		return
	__asm(lbl("__sseek_state1"))
		i0 = mstate.eax
		i3 = mstate.edx
		mstate.esp += 16
		i7 =  ((__xasm<int>(push(_val_2E_1440), op(0x37))))
		__asm(push(i7!=0), iftrue, target("__sseek__XprivateX__BB68_2_F"))
	__asm(lbl("__sseek__XprivateX__BB68_1_F"))
		__asm(push(i1), push(_val_2E_1440), op(0x3c))
	__asm(lbl("__sseek__XprivateX__BB68_2_F"))
		i1 =  (i2 + 12)
		__asm(push(i3>-1), iftrue, target("__sseek__XprivateX__BB68_18_F"))
	__asm(lbl("__sseek__XprivateX__BB68_3_F"))
		__asm(push(i7==29), iftrue, target("__sseek__XprivateX__BB68_13_F"))
	__asm(lbl("__sseek__XprivateX__BB68_4_F"))
		__asm(push(i7!=0), iftrue, target("__sseek__XprivateX__BB68_17_F"))
	__asm(lbl("__sseek__XprivateX__BB68_5_F"))
		__asm(push(i4!=1), iftrue, target("__sseek__XprivateX__BB68_7_F"))
	__asm(lbl("__sseek__XprivateX__BB68_6_F"))
		i0 =  (i5 | i6)
		__asm(push(i0==0), iftrue, target("__sseek__XprivateX__BB68_12_F"))
	__asm(lbl("__sseek__XprivateX__BB68_7_F"))
		i0 =  ((__xasm<int>(push((i2+48)), op(0x37))))
		i3 =  (i2 + 48)
		__asm(push(i0==0), iftrue, target("__sseek__XprivateX__BB68_11_F"))
	__asm(lbl("__sseek__XprivateX__BB68_8_F"))
		i4 =  (i2 + 64)
		__asm(push(i0==i4), iftrue, target("__sseek__XprivateX__BB68_10_F"))
	__asm(lbl("__sseek__XprivateX__BB68_9_F"))
		i4 =  (0)
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i4), push((mstate.esp+4)), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__sseek_state2"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__sseek__XprivateX__BB68_10_F"))
		i0 =  (0)
		__asm(push(i0), push(i3), op(0x3c))
	__asm(lbl("__sseek__XprivateX__BB68_11_F"))
		i0 =  (0)
		i3 =  ((__xasm<int>(push((i2+16)), op(0x37))))
		__asm(push(i3), push(i2), op(0x3c))
		__asm(push(i0), push((i2+4)), op(0x3c))
		i0 =  ((__xasm<int>(push(i1), op(0x36))))
		i0 =  (i0 & -33)
		__asm(push(i0), push(i1), op(0x3b))
	__asm(lbl("__sseek__XprivateX__BB68_12_F"))
		i0 =  (22)
		i2 =  ((__xasm<int>(push(i1), op(0x36))))
		i2 =  (i2 | 64)
		__asm(push(i2), push(i1), op(0x3b))
		__asm(push(i0), push(_val_2E_1440), op(0x3c))
		i0 =  ((__xasm<int>(push(i1), op(0x36))))
		i0 =  (i0 & -4097)
		__asm(push(i0), push(i1), op(0x3b))
		i0 =  (-1)
		__asm(jump, target("__sseek__XprivateX__BB68_15_F"))
	__asm(lbl("__sseek__XprivateX__BB68_13_F"))
		i0 =  (-1)
		i2 =  ((__xasm<int>(push(i1), op(0x36))))
		i2 =  (i2 & -4353)
	__asm(jump, target("__sseek__XprivateX__BB68_14_F"), lbl("__sseek__XprivateX__BB68_14_B"), label, lbl("__sseek__XprivateX__BB68_14_F")); 
		__asm(push(i2), push(i1), op(0x3b))
	__asm(lbl("__sseek__XprivateX__BB68_15_F"))
		mstate.edx = i0
	__asm(jump, target("__sseek__XprivateX__BB68_16_F"), lbl("__sseek__XprivateX__BB68_16_B"), label, lbl("__sseek__XprivateX__BB68_16_F")); 
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__sseek__XprivateX__BB68_17_F"))
		i0 =  (-1)
		i2 =  ((__xasm<int>(push(i1), op(0x36))))
		i2 =  (i2 & -4097)
		__asm(jump, target("__sseek__XprivateX__BB68_14_B"))
	__asm(lbl("__sseek__XprivateX__BB68_18_F"))
		i4 =  ((__xasm<int>(push(i1), op(0x36))))
		i5 =  (i4 & 1024)
		__asm(push(i5==0), iftrue, target("__sseek__XprivateX__BB68_20_F"))
	__asm(lbl("__sseek__XprivateX__BB68_19_F"))
		i4 =  (i4 | 4096)
		__asm(push(i4), push(i1), op(0x3b))
		__asm(push(i0), push((i2+80)), op(0x3c))
		__asm(push(i3), push((i2+84)), op(0x3c))
	__asm(lbl("__sseek__XprivateX__BB68_20_F"))
		mstate.edx = i3
		__asm(jump, target("__sseek__XprivateX__BB68_16_B"))
	__asm(lbl("__sseek_errState"))
		throw("Invalid state in __sseek")
	}
}



// Async
public const ___swbuf:int = regFunc(FSM___swbuf.start)

public final class FSM___swbuf extends Machine {

	public static function start():void {
			var result:FSM___swbuf = new FSM___swbuf
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
	public var i8:int

	public static const intRegCount:int = 9

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("___swbuf_entry"))
		__asm(push(state), switchjump(
			"___swbuf_errState",
			"___swbuf_state0",
			"___swbuf_state1",
			"___swbuf_state2",
			"___swbuf_state3"))
	__asm(lbl("___swbuf_state0"))
	__asm(lbl("___swbuf__XprivateX__BB69_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+24)), op(0x37))))
		__asm(push(i1), push((i0+8)), op(0x3c))
		i1 =  ((__xasm<int>(push((i0+12)), op(0x36))))
		i2 =  (i0 + 12)
		i3 =  (i0 + 8)
		i4 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i5 =  (i1 & 8)
		__asm(push(i5==0), iftrue, target("___swbuf__XprivateX__BB69_3_F"))
	__asm(lbl("___swbuf__XprivateX__BB69_1_F"))
		i5 =  ((__xasm<int>(push((i0+16)), op(0x37))))
		__asm(push(i5!=0), iftrue, target("___swbuf__XprivateX__BB69_5_F"))
	__asm(lbl("___swbuf__XprivateX__BB69_2_F"))
		i1 =  (i1 & 512)
		__asm(push(i1!=0), iftrue, target("___swbuf__XprivateX__BB69_5_F"))
	__asm(lbl("___swbuf__XprivateX__BB69_3_F"))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM___swsetup.start()
		return
	__asm(lbl("___swbuf_state1"))
		i1 = mstate.eax
		mstate.esp += 4
		__asm(push(i1==0), iftrue, target("___swbuf__XprivateX__BB69_5_F"))
	__asm(jump, target("___swbuf__XprivateX__BB69_4_F"), lbl("___swbuf__XprivateX__BB69_4_B"), label, lbl("___swbuf__XprivateX__BB69_4_F")); 
		i0 =  (-1)
		__asm(jump, target("___swbuf__XprivateX__BB69_16_F"))
	__asm(lbl("___swbuf__XprivateX__BB69_5_F"))
		i1 =  ((__xasm<int>(push((i0+56)), op(0x37))))
		i5 =  ((__xasm<int>(push((i1+16)), op(0x37))))
		i1 =  (i1 + 16)
		i6 =  (i4 & 255)
		__asm(push(i5!=0), iftrue, target("___swbuf__XprivateX__BB69_7_F"))
	__asm(lbl("___swbuf__XprivateX__BB69_6_F"))
		i5 =  (-1)
		__asm(push(i5), push(i1), op(0x3c))
	__asm(lbl("___swbuf__XprivateX__BB69_7_F"))
		i1 =  ((__xasm<int>(push(i0), op(0x37))))
		i5 =  ((__xasm<int>(push((i0+16)), op(0x37))))
		i7 =  ((__xasm<int>(push((i0+20)), op(0x37))))
		i8 =  (i0 + 20)
		i1 =  (i1 - i5)
		i5 = i0
		__asm(push(i7<=i1), iftrue, target("___swbuf__XprivateX__BB69_9_F"))
	__asm(lbl("___swbuf__XprivateX__BB69_8_F"))
		__asm(jump, target("___swbuf__XprivateX__BB69_11_F"))
	__asm(lbl("___swbuf__XprivateX__BB69_9_F"))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM___fflush.start()
		return
	__asm(lbl("___swbuf_state2"))
		i1 = mstate.eax
		mstate.esp += 4
		__asm(push(i1!=0), iftrue, target("___swbuf__XprivateX__BB69_4_B"))
	__asm(lbl("___swbuf__XprivateX__BB69_10_F"))
		i1 =  (0)
	__asm(lbl("___swbuf__XprivateX__BB69_11_F"))
		i7 =  ((__xasm<int>(push(i3), op(0x37))))
		i7 =  (i7 + -1)
		__asm(push(i7), push(i3), op(0x3c))
		i3 =  ((__xasm<int>(push(i5), op(0x37))))
		__asm(push(i4), push(i3), op(0x3a))
		i3 =  (i3 + 1)
		__asm(push(i3), push(i5), op(0x3c))
		i3 =  ((__xasm<int>(push(i8), op(0x37))))
		i1 =  (i1 + 1)
		__asm(push(i1==i3), iftrue, target("___swbuf__XprivateX__BB69_15_F"))
	__asm(lbl("___swbuf__XprivateX__BB69_12_F"))
		i1 =  ((__xasm<int>(push(i2), op(0x36))))
		i1 =  (i1 & 1)
		__asm(push(i1==0), iftrue, target("___swbuf__XprivateX__BB69_14_F"))
	__asm(lbl("___swbuf__XprivateX__BB69_13_F"))
		i1 =  (i4 & 255)
		__asm(push(i1==10), iftrue, target("___swbuf__XprivateX__BB69_15_F"))
	__asm(lbl("___swbuf__XprivateX__BB69_14_F"))
		i0 = i6
		__asm(jump, target("___swbuf__XprivateX__BB69_16_F"))
	__asm(lbl("___swbuf__XprivateX__BB69_15_F"))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 3
		mstate.esp -= 4;FSM___fflush.start()
		return
	__asm(lbl("___swbuf_state3"))
		i0 = mstate.eax
		mstate.esp += 4
		i0 =  ((i0==0) ? i6 : -1)
	__asm(lbl("___swbuf__XprivateX__BB69_16_F"))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("___swbuf_errState"))
		throw("Invalid state in ___swbuf")
	}
}



// Async
public const ___sfvwrite:int = regFunc(FSM___sfvwrite.start)

public final class FSM___sfvwrite extends Machine {

	public static function start():void {
			var result:FSM___sfvwrite = new FSM___sfvwrite
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
	public var i8:int, i9:int, i10:int, i11:int, i12:int, i13:int, i14:int, i15:int
	public var i16:int, i17:int, i18:int, i19:int

	public static const intRegCount:int = 20

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("___sfvwrite_entry"))
		__asm(push(state), switchjump(
			"___sfvwrite_errState",
			"___sfvwrite_state0",
			"___sfvwrite_state1",
			"___sfvwrite_state2",
			"___sfvwrite_state3",
			"___sfvwrite_state4",
			"___sfvwrite_state5",
			"___sfvwrite_state6",
			"___sfvwrite_state7",
			"___sfvwrite_state8",
			"___sfvwrite_state9"))
	__asm(lbl("___sfvwrite_state0"))
	__asm(lbl("___sfvwrite__XprivateX__BB70_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i2 =  ((__xasm<int>(push((i0+8)), op(0x37))))
		i3 =  (i0 + 8)
		__asm(push(i2!=0), iftrue, target("___sfvwrite__XprivateX__BB70_2_F"))
	__asm(jump, target("___sfvwrite__XprivateX__BB70_1_F"), lbl("___sfvwrite__XprivateX__BB70_1_B"), label, lbl("___sfvwrite__XprivateX__BB70_1_F")); 
		i0 =  (0)
		__asm(jump, target("___sfvwrite__XprivateX__BB70_72_F"))
	__asm(lbl("___sfvwrite__XprivateX__BB70_2_F"))
		i2 =  ((__xasm<int>(push((i1+12)), op(0x36))))
		i4 =  (i1 + 12)
		i5 =  (i2 & 8)
		__asm(push(i5==0), iftrue, target("___sfvwrite__XprivateX__BB70_5_F"))
	__asm(lbl("___sfvwrite__XprivateX__BB70_3_F"))
		i5 =  ((__xasm<int>(push((i1+16)), op(0x37))))
		__asm(push(i5!=0), iftrue, target("___sfvwrite__XprivateX__BB70_7_F"))
	__asm(lbl("___sfvwrite__XprivateX__BB70_4_F"))
		i2 =  (i2 & 512)
		__asm(push(i2!=0), iftrue, target("___sfvwrite__XprivateX__BB70_7_F"))
	__asm(lbl("___sfvwrite__XprivateX__BB70_5_F"))
		mstate.esp -= 4
		__asm(push(i1), push(mstate.esp), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM___swsetup.start()
		return
	__asm(lbl("___sfvwrite_state1"))
		i2 = mstate.eax
		mstate.esp += 4
		__asm(push(i2==0), iftrue, target("___sfvwrite__XprivateX__BB70_7_F"))
	__asm(lbl("___sfvwrite__XprivateX__BB70_6_F"))
		i0 =  (-1)
		__asm(jump, target("___sfvwrite__XprivateX__BB70_72_F"))
	__asm(lbl("___sfvwrite__XprivateX__BB70_7_F"))
		i0 =  ((__xasm<int>(push(i0), op(0x37))))
		i2 =  ((__xasm<int>(push(i4), op(0x36))))
		i5 =  ((__xasm<int>(push(i0), op(0x37))))
		i6 =  ((__xasm<int>(push((i0+4)), op(0x37))))
		i7 =  (i2 & 2)
		__asm(push(i7==0), iftrue, target("___sfvwrite__XprivateX__BB70_15_F"))
	__asm(lbl("___sfvwrite__XprivateX__BB70_8_F"))
		i2 = i5
		i5 = i6
		__asm(jump, target("___sfvwrite__XprivateX__BB70_10_F"))
	__asm(lbl("___sfvwrite__XprivateX__BB70_9_B"), label)
		i2 =  ((__xasm<int>(push((i0+8)), op(0x37))))
		i5 =  ((__xasm<int>(push((i0+12)), op(0x37))))
		i0 =  (i0 + 8)
	__asm(lbl("___sfvwrite__XprivateX__BB70_10_F"))
		i6 =  (0)
	__asm(jump, target("___sfvwrite__XprivateX__BB70_11_F"), lbl("___sfvwrite__XprivateX__BB70_11_B"), label, lbl("___sfvwrite__XprivateX__BB70_11_F")); 
		__asm(push(i5==0), iftrue, target("___sfvwrite__XprivateX__BB70_9_B"))
	__asm(lbl("___sfvwrite__XprivateX__BB70_12_F"))
		mstate.esp -= 12
		i7 =  ((uint(i5)<uint(1025)) ? i5 : 1024)
		i8 =  (i2 + i6)
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i8), push((mstate.esp+4)), op(0x3c))
		__asm(push(i7), push((mstate.esp+8)), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM__swrite.start()
		return
	__asm(lbl("___sfvwrite_state2"))
		i7 = mstate.eax
		mstate.esp += 12
		__asm(push(i7<1), iftrue, target("___sfvwrite__XprivateX__BB70_71_F"))
	__asm(lbl("___sfvwrite__XprivateX__BB70_13_F"))
		i8 =  ((__xasm<int>(push(i3), op(0x37))))
		i9 =  (i8 - i7)
		__asm(push(i9), push(i3), op(0x3c))
		i5 =  (i5 - i7)
		i6 =  (i6 + i7)
		__asm(push(i8==i7), iftrue, target("___sfvwrite__XprivateX__BB70_1_B"))
	__asm(lbl("___sfvwrite__XprivateX__BB70_14_F"))
		__asm(jump, target("___sfvwrite__XprivateX__BB70_11_B"))
	__asm(lbl("___sfvwrite__XprivateX__BB70_15_F"))
		i7 =  (i1 + 8)
		i2 =  (i2 & 1)
		__asm(push(i2==0), iftrue, target("___sfvwrite__XprivateX__BB70_17_F"))
	__asm(lbl("___sfvwrite__XprivateX__BB70_16_F"))
		i2 =  (0)
		i8 =  (i1 + 20)
		i9 =  (i1 + 16)
		i10 = i1
		__asm(jump, target("___sfvwrite__XprivateX__BB70_43_F"))
	__asm(lbl("___sfvwrite__XprivateX__BB70_17_F"))
		i2 =  (i1 + 20)
		i8 =  (i1 + 16)
		i9 = i1
		__asm(jump, target("___sfvwrite__XprivateX__BB70_19_F"))
	__asm(lbl("___sfvwrite__XprivateX__BB70_18_B"), label)
		i5 =  ((__xasm<int>(push((i0+8)), op(0x37))))
		i6 =  ((__xasm<int>(push((i0+12)), op(0x37))))
		i0 =  (i0 + 8)
	__asm(lbl("___sfvwrite__XprivateX__BB70_19_F"))
		i10 =  (0)
	__asm(jump, target("___sfvwrite__XprivateX__BB70_20_F"), lbl("___sfvwrite__XprivateX__BB70_20_B"), label, lbl("___sfvwrite__XprivateX__BB70_20_F")); 
		i11 =  (i5 + i10)
		__asm(push(i6==0), iftrue, target("___sfvwrite__XprivateX__BB70_18_B"))
	__asm(lbl("___sfvwrite__XprivateX__BB70_21_F"))
		i12 =  ((__xasm<int>(push(i4), op(0x36))))
		i12 =  (i12 & 16896)
		__asm(push(i12!=16896), iftrue, target("___sfvwrite__XprivateX__BB70_28_F"))
	__asm(lbl("___sfvwrite__XprivateX__BB70_22_F"))
		i12 =  ((__xasm<int>(push(i7), op(0x37))))
		__asm(push(uint(i12)>=uint(i6)), iftrue, target("___sfvwrite__XprivateX__BB70_28_F"))
	__asm(lbl("___sfvwrite__XprivateX__BB70_23_F"))
		i12 =  ((__xasm<int>(push(i9), op(0x37))))
		i13 =  ((__xasm<int>(push(i8), op(0x37))))
		i14 =  (i6 + 128)
		i12 =  (i12 - i13)
		i15 =  (i14 + i12)
		__asm(push(i14), push(i7), op(0x3c))
		__asm(push(i15), push(i2), op(0x3c))
		mstate.esp -= 8
		i14 =  (i15 + 1)
		__asm(push(i13), push(mstate.esp), op(0x3c))
		__asm(push(i14), push((mstate.esp+4)), op(0x3c))
		state = 3
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("___sfvwrite_state3"))
		i14 = mstate.eax
		mstate.esp += 8
		__asm(push(i14!=0), iftrue, target("___sfvwrite__XprivateX__BB70_26_F"))
	__asm(lbl("___sfvwrite__XprivateX__BB70_24_F"))
		__asm(push(i13==0), iftrue, target("___sfvwrite__XprivateX__BB70_26_F"))
	__asm(lbl("___sfvwrite__XprivateX__BB70_25_F"))
		mstate.esp -= 4
		__asm(push(i13), push(mstate.esp), op(0x3c))
		state = 4
		mstate.esp -= 4;FSM_free.start()
		return
	__asm(lbl("___sfvwrite_state4"))
		mstate.esp += 4
	__asm(lbl("___sfvwrite__XprivateX__BB70_26_F"))
		__asm(push(i14), push(i8), op(0x3c))
		__asm(push(i14==0), iftrue, target("___sfvwrite__XprivateX__BB70_71_F"))
	__asm(lbl("___sfvwrite__XprivateX__BB70_27_F"))
		i12 =  (i14 + i12)
		__asm(push(i12), push(i9), op(0x3c))
	__asm(lbl("___sfvwrite__XprivateX__BB70_28_F"))
		i12 =  ((__xasm<int>(push(i4), op(0x36))))
		i13 =  ((__xasm<int>(push(i7), op(0x37))))
		i12 =  (i12 & 512)
		__asm(push(i12==0), iftrue, target("___sfvwrite__XprivateX__BB70_32_F"))
	__asm(lbl("___sfvwrite__XprivateX__BB70_29_F"))
		i13 =  ((uint(i13)>uint(i6)) ? i6 : i13)
		__asm(push(i13>0), iftrue, target("___sfvwrite__XprivateX__BB70_31_F"))
	__asm(lbl("___sfvwrite__XprivateX__BB70_30_F"))
		i13 = i6
		__asm(jump, target("___sfvwrite__XprivateX__BB70_40_F"))
	__asm(lbl("___sfvwrite__XprivateX__BB70_31_F"))
		i12 =  ((__xasm<int>(push(i9), op(0x37))))
		i14 = i13
		memcpy(i12, i11, i14)
		i11 =  ((__xasm<int>(push(i7), op(0x37))))
		i11 =  (i11 - i13)
		__asm(push(i11), push(i7), op(0x3c))
		i11 =  ((__xasm<int>(push(i9), op(0x37))))
		i13 =  (i11 + i13)
		__asm(push(i13), push(i9), op(0x3c))
		i13 = i6
		__asm(jump, target("___sfvwrite__XprivateX__BB70_40_F"))
	__asm(lbl("___sfvwrite__XprivateX__BB70_32_F"))
		i12 =  ((__xasm<int>(push(i9), op(0x37))))
		i14 =  ((__xasm<int>(push(i8), op(0x37))))
		__asm(push(uint(i12)<=uint(i14)), iftrue, target("___sfvwrite__XprivateX__BB70_36_F"))
	__asm(lbl("___sfvwrite__XprivateX__BB70_33_F"))
		__asm(push(uint(i13)>=uint(i6)), iftrue, target("___sfvwrite__XprivateX__BB70_36_F"))
	__asm(lbl("___sfvwrite__XprivateX__BB70_34_F"))
		i14 = i13
		memcpy(i12, i11, i14)
		i11 =  ((__xasm<int>(push(i9), op(0x37))))
		i11 =  (i11 + i13)
		__asm(push(i11), push(i9), op(0x3c))
		mstate.esp -= 4
		__asm(push(i1), push(mstate.esp), op(0x3c))
		state = 5
		mstate.esp -= 4;FSM___fflush.start()
		return
	__asm(lbl("___sfvwrite_state5"))
		i11 = mstate.eax
		mstate.esp += 4
		__asm(push(i11!=0), iftrue, target("___sfvwrite__XprivateX__BB70_71_F"))
	__asm(lbl("___sfvwrite__XprivateX__BB70_35_F"))
		__asm(jump, target("___sfvwrite__XprivateX__BB70_40_F"))
	__asm(lbl("___sfvwrite__XprivateX__BB70_36_F"))
		i13 =  ((__xasm<int>(push(i2), op(0x37))))
		__asm(push(uint(i13)>uint(i6)), iftrue, target("___sfvwrite__XprivateX__BB70_39_F"))
	__asm(lbl("___sfvwrite__XprivateX__BB70_37_F"))
		mstate.esp -= 12
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i11), push((mstate.esp+4)), op(0x3c))
		__asm(push(i13), push((mstate.esp+8)), op(0x3c))
		state = 6
		mstate.esp -= 4;FSM__swrite.start()
		return
	__asm(lbl("___sfvwrite_state6"))
		i11 = mstate.eax
		mstate.esp += 12
		__asm(push(i11<1), iftrue, target("___sfvwrite__XprivateX__BB70_71_F"))
	__asm(lbl("___sfvwrite__XprivateX__BB70_38_F"))
		i13 = i11
		__asm(jump, target("___sfvwrite__XprivateX__BB70_40_F"))
	__asm(lbl("___sfvwrite__XprivateX__BB70_39_F"))
		i13 = i12
		i12 = i6
		memcpy(i13, i11, i12)
		i13 =  ((__xasm<int>(push(i7), op(0x37))))
		i13 =  (i13 - i6)
		__asm(push(i13), push(i7), op(0x3c))
		i13 =  ((__xasm<int>(push(i9), op(0x37))))
		i13 =  (i13 + i6)
		__asm(push(i13), push(i9), op(0x3c))
		i13 = i6
	__asm(lbl("___sfvwrite__XprivateX__BB70_40_F"))
		i11 = i13
		i12 =  ((__xasm<int>(push(i3), op(0x37))))
		i13 =  (i12 - i11)
		__asm(push(i13), push(i3), op(0x3c))
		i6 =  (i6 - i11)
		i10 =  (i10 + i11)
		__asm(push(i12==i11), iftrue, target("___sfvwrite__XprivateX__BB70_1_B"))
	__asm(lbl("___sfvwrite__XprivateX__BB70_41_F"))
		__asm(jump, target("___sfvwrite__XprivateX__BB70_20_B"))
	__asm(lbl("___sfvwrite__XprivateX__BB70_42_B"), label)
		i5 =  ((__xasm<int>(push((i0+8)), op(0x37))))
		i6 =  ((__xasm<int>(push((i0+12)), op(0x37))))
		i0 =  (i0 + 8)
	__asm(lbl("___sfvwrite__XprivateX__BB70_43_F"))
		i11 =  (0)
		i12 = i5
		i13 = i11
	__asm(jump, target("___sfvwrite__XprivateX__BB70_44_F"), lbl("___sfvwrite__XprivateX__BB70_44_B"), label, lbl("___sfvwrite__XprivateX__BB70_44_F")); 
		i14 =  (i5 + i13)
		__asm(push(i6==0), iftrue, target("___sfvwrite__XprivateX__BB70_42_B"))
	__asm(lbl("___sfvwrite__XprivateX__BB70_45_F"))
		__asm(push(i11==0), iftrue, target("___sfvwrite__XprivateX__BB70_47_F"))
	__asm(lbl("___sfvwrite__XprivateX__BB70_46_F"))
		__asm(jump, target("___sfvwrite__XprivateX__BB70_57_F"))
	__asm(lbl("___sfvwrite__XprivateX__BB70_47_F"))
		__asm(push(i6!=0), iftrue, target("___sfvwrite__XprivateX__BB70_51_F"))
	__asm(jump, target("___sfvwrite__XprivateX__BB70_48_F"), lbl("___sfvwrite__XprivateX__BB70_48_B"), label, lbl("___sfvwrite__XprivateX__BB70_48_F")); 
		i2 =  (0)
		__asm(jump, target("___sfvwrite__XprivateX__BB70_49_F"))
	__asm(jump, target("___sfvwrite__XprivateX__BB70_49_F"), lbl("___sfvwrite__XprivateX__BB70_49_B"), label, lbl("___sfvwrite__XprivateX__BB70_49_F")); 
		__asm(push(i2==0), iftrue, target("___sfvwrite__XprivateX__BB70_56_F"))
		__asm(jump, target("___sfvwrite__XprivateX__BB70_50_F"))
	__asm(lbl("___sfvwrite__XprivateX__BB70_50_F"))
		i11 =  (1)
		i2 =  (i2 + 1)
		i2 =  (i2 - i14)
		__asm(jump, target("___sfvwrite__XprivateX__BB70_57_F"))
	__asm(lbl("___sfvwrite__XprivateX__BB70_51_F"))
		i2 =  (i6 + 1)
		i11 =  (i13 + i12)
	__asm(jump, target("___sfvwrite__XprivateX__BB70_52_F"), lbl("___sfvwrite__XprivateX__BB70_52_B"), label, lbl("___sfvwrite__XprivateX__BB70_52_F")); 
		i15 =  ((__xasm<int>(push(i11), op(0x35))))
		i16 = i11
		__asm(push(i15!=10), iftrue, target("___sfvwrite__XprivateX__BB70_54_F"))
	__asm(lbl("___sfvwrite__XprivateX__BB70_53_F"))
		i2 = i16
		__asm(jump, target("___sfvwrite__XprivateX__BB70_49_B"))
	__asm(lbl("___sfvwrite__XprivateX__BB70_54_F"))
		i2 =  (i2 + -1)
		i11 =  (i11 + 1)
		__asm(push(i2==1), iftrue, target("___sfvwrite__XprivateX__BB70_48_B"))
	__asm(lbl("___sfvwrite__XprivateX__BB70_55_F"))
		__asm(jump, target("___sfvwrite__XprivateX__BB70_52_B"))
	__asm(lbl("___sfvwrite__XprivateX__BB70_56_F"))
		i2 =  (1)
		i15 =  (i6 + 1)
		i11 = i2
		i2 = i15
	__asm(lbl("___sfvwrite__XprivateX__BB70_57_F"))
		i15 =  ((__xasm<int>(push(i7), op(0x37))))
		i16 =  ((__xasm<int>(push(i8), op(0x37))))
		i17 =  ((__xasm<int>(push(i10), op(0x37))))
		i18 =  ((__xasm<int>(push(i9), op(0x37))))
		i19 =  ((uint(i2)<=uint(i6)) ? i2 : i6)
		i15 =  (i16 + i15)
		__asm(push(uint(i17)<=uint(i18)), iftrue, target("___sfvwrite__XprivateX__BB70_61_F"))
	__asm(lbl("___sfvwrite__XprivateX__BB70_58_F"))
		__asm(push(i19<=i15), iftrue, target("___sfvwrite__XprivateX__BB70_61_F"))
	__asm(lbl("___sfvwrite__XprivateX__BB70_59_F"))
		i16 = i17
		i17 = i15
		memcpy(i16, i14, i17)
		i14 =  ((__xasm<int>(push(i10), op(0x37))))
		i14 =  (i14 + i15)
		__asm(push(i14), push(i10), op(0x3c))
		mstate.esp -= 4
		__asm(push(i1), push(mstate.esp), op(0x3c))
		state = 7
		mstate.esp -= 4;FSM___fflush.start()
		return
	__asm(lbl("___sfvwrite_state7"))
		i14 = mstate.eax
		mstate.esp += 4
		__asm(push(i14!=0), iftrue, target("___sfvwrite__XprivateX__BB70_71_F"))
	__asm(lbl("___sfvwrite__XprivateX__BB70_60_F"))
		i14 = i15
		__asm(jump, target("___sfvwrite__XprivateX__BB70_65_F"))
	__asm(lbl("___sfvwrite__XprivateX__BB70_61_F"))
		__asm(push(i16>i19), iftrue, target("___sfvwrite__XprivateX__BB70_64_F"))
	__asm(lbl("___sfvwrite__XprivateX__BB70_62_F"))
		mstate.esp -= 12
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i14), push((mstate.esp+4)), op(0x3c))
		__asm(push(i16), push((mstate.esp+8)), op(0x3c))
		state = 8
		mstate.esp -= 4;FSM__swrite.start()
		return
	__asm(lbl("___sfvwrite_state8"))
		i14 = mstate.eax
		mstate.esp += 12
		__asm(push(i14<1), iftrue, target("___sfvwrite__XprivateX__BB70_71_F"))
	__asm(lbl("___sfvwrite__XprivateX__BB70_63_F"))
		__asm(jump, target("___sfvwrite__XprivateX__BB70_65_F"))
	__asm(lbl("___sfvwrite__XprivateX__BB70_64_F"))
		i15 = i17
		i16 = i19
		memcpy(i15, i14, i16)
		i14 =  ((__xasm<int>(push(i7), op(0x37))))
		i14 =  (i14 - i19)
		__asm(push(i14), push(i7), op(0x3c))
		i14 =  ((__xasm<int>(push(i10), op(0x37))))
		i14 =  (i14 + i19)
		__asm(push(i14), push(i10), op(0x3c))
		i14 = i19
	__asm(lbl("___sfvwrite__XprivateX__BB70_65_F"))
		i15 =  (i2 - i14)
		__asm(push(i2==i14), iftrue, target("___sfvwrite__XprivateX__BB70_67_F"))
	__asm(lbl("___sfvwrite__XprivateX__BB70_66_F"))
		i2 = i11
		__asm(jump, target("___sfvwrite__XprivateX__BB70_69_F"))
	__asm(lbl("___sfvwrite__XprivateX__BB70_67_F"))
		mstate.esp -= 4
		__asm(push(i1), push(mstate.esp), op(0x3c))
		state = 9
		mstate.esp -= 4;FSM___fflush.start()
		return
	__asm(lbl("___sfvwrite_state9"))
		i2 = mstate.eax
		mstate.esp += 4
		__asm(push(i2!=0), iftrue, target("___sfvwrite__XprivateX__BB70_71_F"))
	__asm(lbl("___sfvwrite__XprivateX__BB70_68_F"))
		i2 =  (0)
	__asm(lbl("___sfvwrite__XprivateX__BB70_69_F"))
		i11 =  ((__xasm<int>(push(i3), op(0x37))))
		i16 =  (i11 - i14)
		__asm(push(i16), push(i3), op(0x3c))
		i6 =  (i6 - i14)
		i13 =  (i13 + i14)
		__asm(push(i11==i14), iftrue, target("___sfvwrite__XprivateX__BB70_1_B"))
	__asm(lbl("___sfvwrite__XprivateX__BB70_70_F"))
		i11 = i2
		i2 = i15
		__asm(jump, target("___sfvwrite__XprivateX__BB70_44_B"))
	__asm(lbl("___sfvwrite__XprivateX__BB70_71_F"))
		i0 =  (-1)
		i1 =  ((__xasm<int>(push(i4), op(0x36))))
		i1 =  (i1 | 64)
		__asm(push(i1), push(i4), op(0x3b))
	__asm(lbl("___sfvwrite__XprivateX__BB70_72_F"))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("___sfvwrite_errState"))
		throw("Invalid state in ___sfvwrite")
	}
}



// Async
public const ___swsetup:int = regFunc(FSM___swsetup.start)

public final class FSM___swsetup extends Machine {

	public static function start():void {
			var result:FSM___swsetup = new FSM___swsetup
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int

	public static const intRegCount:int = 5

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("___swsetup_entry"))
		__asm(push(state), switchjump(
			"___swsetup_errState",
			"___swsetup_state0",
			"___swsetup_state1",
			"___swsetup_state2"))
	__asm(lbl("___swsetup_state0"))
	__asm(lbl("___swsetup__XprivateX__BB71_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push(___sdidinit_2E_b), op(0x35))))
		__asm(push(i1!=0), iftrue, target("___swsetup__XprivateX__BB71_5_F"))
	__asm(lbl("___swsetup__XprivateX__BB71_1_F"))
		i1 =  (_usual)
		i2 =  (_usual_extra)
		i3 =  (0)
		i1 =  (i1 + 56)
	__asm(jump, target("___swsetup__XprivateX__BB71_2_F"), lbl("___swsetup__XprivateX__BB71_2_B"), label, lbl("___swsetup__XprivateX__BB71_2_F")); 
		__asm(push(i2), push(i1), op(0x3c))
		i2 =  (i2 + 148)
		i1 =  (i1 + 88)
		i3 =  (i3 + 1)
		__asm(push(i3==17), iftrue, target("___swsetup__XprivateX__BB71_4_F"))
	__asm(lbl("___swsetup__XprivateX__BB71_3_F"))
		__asm(jump, target("___swsetup__XprivateX__BB71_2_B"))
	__asm(lbl("___swsetup__XprivateX__BB71_4_F"))
		i1 =  (1)
		__asm(push(i1), push(___cleanup_2E_b), op(0x3a))
		__asm(push(i1), push(___sdidinit_2E_b), op(0x3a))
	__asm(lbl("___swsetup__XprivateX__BB71_5_F"))
		i1 =  ((__xasm<int>(push((i0+12)), op(0x36))))
		i2 =  (i0 + 12)
		i3 = i1
		i4 =  (i1 & 8)
		__asm(push(i4!=0), iftrue, target("___swsetup__XprivateX__BB71_16_F"))
	__asm(lbl("___swsetup__XprivateX__BB71_6_F"))
		i4 =  (i3 & 16)
		__asm(push(i4!=0), iftrue, target("___swsetup__XprivateX__BB71_8_F"))
	__asm(lbl("___swsetup__XprivateX__BB71_7_F"))
		i0 =  (9)
		__asm(push(i0), push(_val_2E_1440), op(0x3c))
		i0 =  (-1)
		__asm(jump, target("___swsetup__XprivateX__BB71_24_F"))
	__asm(lbl("___swsetup__XprivateX__BB71_8_F"))
		i3 =  (i3 & 4)
		__asm(push(i3!=0), iftrue, target("___swsetup__XprivateX__BB71_10_F"))
	__asm(lbl("___swsetup__XprivateX__BB71_9_F"))
		__asm(jump, target("___swsetup__XprivateX__BB71_15_F"))
	__asm(lbl("___swsetup__XprivateX__BB71_10_F"))
		i1 =  ((__xasm<int>(push((i0+48)), op(0x37))))
		i3 =  (i0 + 48)
		__asm(push(i1==0), iftrue, target("___swsetup__XprivateX__BB71_14_F"))
	__asm(lbl("___swsetup__XprivateX__BB71_11_F"))
		i4 =  (i0 + 64)
		__asm(push(i1==i4), iftrue, target("___swsetup__XprivateX__BB71_13_F"))
	__asm(lbl("___swsetup__XprivateX__BB71_12_F"))
		i4 =  (0)
		mstate.esp -= 8
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i4), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("___swsetup_state1"))
		i1 = mstate.eax
		mstate.esp += 8
	__asm(lbl("___swsetup__XprivateX__BB71_13_F"))
		i1 =  (0)
		__asm(push(i1), push(i3), op(0x3c))
	__asm(lbl("___swsetup__XprivateX__BB71_14_F"))
		i1 =  (0)
		i3 =  ((__xasm<int>(push(i2), op(0x36))))
		i3 =  (i3 & -37)
		__asm(push(i3), push(i2), op(0x3b))
		__asm(push(i1), push((i0+4)), op(0x3c))
		i1 =  ((__xasm<int>(push((i0+16)), op(0x37))))
		__asm(push(i1), push(i0), op(0x3c))
		i1 = i3
	__asm(lbl("___swsetup__XprivateX__BB71_15_F"))
		i1 =  (i1 | 8)
		__asm(push(i1), push(i2), op(0x3b))
	__asm(lbl("___swsetup__XprivateX__BB71_16_F"))
		i1 =  ((__xasm<int>(push((i0+16)), op(0x37))))
		__asm(push(i1!=0), iftrue, target("___swsetup__XprivateX__BB71_18_F"))
	__asm(lbl("___swsetup__XprivateX__BB71_17_F"))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM___smakebuf.start()
		return
	__asm(lbl("___swsetup_state2"))
		mstate.esp += 4
	__asm(lbl("___swsetup__XprivateX__BB71_18_F"))
		i1 =  ((__xasm<int>(push(i2), op(0x36))))
		i2 =  (i1 & 1)
		__asm(push(i2==0), iftrue, target("___swsetup__XprivateX__BB71_20_F"))
	__asm(lbl("___swsetup__XprivateX__BB71_19_F"))
		i1 =  (0)
		__asm(push(i1), push((i0+8)), op(0x3c))
		i2 =  ((__xasm<int>(push((i0+20)), op(0x37))))
		i2 =  (0 - i2)
		__asm(push(i2), push((i0+24)), op(0x3c))
		__asm(jump, target("___swsetup__XprivateX__BB71_22_F"))
	__asm(lbl("___swsetup__XprivateX__BB71_20_F"))
		i2 =  (i0 + 8)
		i1 =  (i1 & 2)
		__asm(push(i1!=0), iftrue, target("___swsetup__XprivateX__BB71_23_F"))
	__asm(lbl("___swsetup__XprivateX__BB71_21_F"))
		i1 =  (0)
		i0 =  ((__xasm<int>(push((i0+20)), op(0x37))))
		__asm(push(i0), push(i2), op(0x3c))
	__asm(lbl("___swsetup__XprivateX__BB71_22_F"))
		mstate.eax = i1
		__asm(jump, target("___swsetup__XprivateX__BB71_25_F"))
	__asm(lbl("___swsetup__XprivateX__BB71_23_F"))
		i0 =  (0)
		__asm(push(i0), push(i2), op(0x3c))
	__asm(lbl("___swsetup__XprivateX__BB71_24_F"))
		mstate.eax = i0
	__asm(lbl("___swsetup__XprivateX__BB71_25_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("___swsetup_errState"))
		throw("Invalid state in ___swsetup")
	}
}



// Async
public const ___smakebuf:int = regFunc(FSM___smakebuf.start)

public final class FSM___smakebuf extends Machine {

	public static function start():void {
			var result:FSM___smakebuf = new FSM___smakebuf
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int

	public static const intRegCount:int = 8

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("___smakebuf_entry"))
		__asm(push(state), switchjump(
			"___smakebuf_errState",
			"___smakebuf_state0",
			"___smakebuf_state1",
			"___smakebuf_state2",
			"___smakebuf_state3"))
	__asm(lbl("___smakebuf_state0"))
	__asm(lbl("___smakebuf__XprivateX__BB72_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 144
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+12)), op(0x36))))
		i2 =  (i0 + 12)
		i1 =  (i1 & 2)
		__asm(push(i1==0), iftrue, target("___smakebuf__XprivateX__BB72_2_F"))
	__asm(lbl("___smakebuf__XprivateX__BB72_1_F"))
		i2 =  (1)
		i1 =  (i0 + 67)
		__asm(push(i1), push(i0), op(0x3c))
		__asm(push(i1), push((i0+16)), op(0x3c))
		__asm(push(i2), push((i0+20)), op(0x3c))
		__asm(jump, target("___smakebuf__XprivateX__BB72_17_F"))
	__asm(lbl("___smakebuf__XprivateX__BB72_2_F"))
		i1 =  ((__xasm<int>(push((i0+14)), op(0x36))))
		i3 =  (i0 + 14)
		i4 =  (i1 << 16)
		i4 =  (i4 >> 16)
		__asm(push(i4>-1), iftrue, target("___smakebuf__XprivateX__BB72_4_F"))
	__asm(jump, target("___smakebuf__XprivateX__BB72_3_F"), lbl("___smakebuf__XprivateX__BB72_3_B"), label, lbl("___smakebuf__XprivateX__BB72_3_F")); 
		i1 =  (2048)
		i4 =  (0)
		i5 =  (1024)
		__asm(jump, target("___smakebuf__XprivateX__BB72_10_F"))
	__asm(lbl("___smakebuf__XprivateX__BB72_4_F"))
		i4 =  ((mstate.ebp+-96))
		i1 =  (i1 << 16)
		mstate.esp -= 8
		i1 =  (i1 >> 16)
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i4), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_fstat.start()
		return
	__asm(lbl("___smakebuf_state1"))
		i1 = mstate.eax
		mstate.esp += 8
		__asm(push(i1<0), iftrue, target("___smakebuf__XprivateX__BB72_3_B"))
	__asm(lbl("___smakebuf__XprivateX__BB72_5_F"))
		i1 =  ((__xasm<int>(push((mstate.ebp+-88)), op(0x36))))
		i1 =  (i1 & 61440)
		i4 =  ((__xasm<int>(push((mstate.ebp+-32)), op(0x37))))
		i5 =  ((i1==8192) ? 1 : 0)
		i6 =  (i5 & 1)
		__asm(push(i4!=0), iftrue, target("___smakebuf__XprivateX__BB72_7_F"))
	__asm(lbl("___smakebuf__XprivateX__BB72_6_F"))
		i1 =  (2048)
		i4 =  (1024)
		i5 = i4
		i4 = i6
		__asm(jump, target("___smakebuf__XprivateX__BB72_10_F"))
	__asm(lbl("___smakebuf__XprivateX__BB72_7_F"))
		__asm(push(i4), push((i0+76)), op(0x3c))
		__asm(push(i1==32768), iftrue, target("___smakebuf__XprivateX__BB72_9_F"))
	__asm(lbl("___smakebuf__XprivateX__BB72_8_F"))
		i1 =  (2048)
		i5 = i4
		i4 = i6
		__asm(jump, target("___smakebuf__XprivateX__BB72_10_F"))
	__asm(lbl("___smakebuf__XprivateX__BB72_9_F"))
		i1 =  (___sseek)
		i5 =  ((__xasm<int>(push((i0+40)), op(0x37))))
		i1 =  ((i5==i1) ? 1024 : 2048)
		i5 = i4
		i4 = i6
	__asm(lbl("___smakebuf__XprivateX__BB72_10_F"))
		i6 =  (0)
		mstate.esp -= 8
		__asm(push(i6), push(mstate.esp), op(0x3c))
		__asm(push(i5), push((mstate.esp+4)), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("___smakebuf_state2"))
		i6 = mstate.eax
		mstate.esp += 8
		__asm(push(i6!=0), iftrue, target("___smakebuf__XprivateX__BB72_12_F"))
	__asm(lbl("___smakebuf__XprivateX__BB72_11_F"))
		i1 =  (1)
		i3 =  ((__xasm<int>(push(i2), op(0x36))))
		i3 =  (i3 | 2)
		__asm(push(i3), push(i2), op(0x3b))
		i2 =  (i0 + 67)
		__asm(push(i2), push(i0), op(0x3c))
		__asm(push(i2), push((i0+16)), op(0x3c))
		__asm(push(i1), push((i0+20)), op(0x3c))
		__asm(jump, target("___smakebuf__XprivateX__BB72_17_F"))
	__asm(lbl("___smakebuf__XprivateX__BB72_12_F"))
		i7 =  (1)
		__asm(push(i7), push(___cleanup_2E_b), op(0x3a))
		__asm(push(i6), push(i0), op(0x3c))
		__asm(push(i6), push((i0+16)), op(0x3c))
		__asm(push(i5), push((i0+20)), op(0x3c))
		i0 =  (i1 | 128)
		__asm(push(i4!=0), iftrue, target("___smakebuf__XprivateX__BB72_14_F"))
	__asm(jump, target("___smakebuf__XprivateX__BB72_13_F"), lbl("___smakebuf__XprivateX__BB72_13_B"), label, lbl("___smakebuf__XprivateX__BB72_13_F")); 
		__asm(jump, target("___smakebuf__XprivateX__BB72_16_F"))
	__asm(lbl("___smakebuf__XprivateX__BB72_14_F"))
		i4 =  ((mstate.ebp+-144))
		i3 =  ((__xasm<int>(push(i3), op(0x36), op(0x52))))
		mstate.esp -= 12
		i5 =  (1076655123)
		__asm(push(i3), push(mstate.esp), op(0x3c))
		__asm(push(i5), push((mstate.esp+4)), op(0x3c))
		__asm(push(i4), push((mstate.esp+8)), op(0x3c))
		state = 3
		mstate.esp -= 4;FSM_ioctl.start()
		return
	__asm(lbl("___smakebuf_state3"))
		i3 = mstate.eax
		mstate.esp += 12
		__asm(push(i3==-1), iftrue, target("___smakebuf__XprivateX__BB72_13_B"))
	__asm(lbl("___smakebuf__XprivateX__BB72_15_F"))
		i0 =  (i1 | 129)
	__asm(lbl("___smakebuf__XprivateX__BB72_16_F"))
		i1 =  ((__xasm<int>(push(i2), op(0x36))))
		i0 =  (i1 | i0)
		__asm(push(i0), push(i2), op(0x3b))
	__asm(lbl("___smakebuf__XprivateX__BB72_17_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("___smakebuf_errState"))
		throw("Invalid state in ___smakebuf")
	}
}



// Async
public const _fwrite:int = regFunc(FSM_fwrite.start)

public final class FSM_fwrite extends Machine {

	public static function start():void {
			var result:FSM_fwrite = new FSM_fwrite
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int

	public static const intRegCount:int = 7

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("_fwrite_entry"))
		__asm(push(state), switchjump(
			"_fwrite_errState",
			"_fwrite_state0",
			"_fwrite_state1"))
	__asm(lbl("_fwrite_state0"))
	__asm(lbl("_fwrite__XprivateX__BB73_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 32
		i0 =  ((mstate.ebp+-8))
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i3 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		__asm(push(i3), push((mstate.ebp+-8)), op(0x3c))
		i3 =  (i2 * i1)
		__asm(push(i3), push((mstate.ebp+-4)), op(0x3c))
		__asm(push(i3), push((mstate.ebp+-24)), op(0x3c))
		__asm(push(i0), push((mstate.ebp+-32)), op(0x3c))
		i0 =  (1)
		i4 =  ((__xasm<int>(push((mstate.ebp+20)), op(0x37))))
		__asm(push(i0), push((mstate.ebp+-28)), op(0x3c))
		i0 =  ((__xasm<int>(push((i4+56)), op(0x37))))
		i5 =  ((__xasm<int>(push((i0+16)), op(0x37))))
		i6 =  ((mstate.ebp+-32))
		i0 =  (i0 + 16)
		i6 =  (i6 + 8)
		__asm(push(i5!=0), iftrue, target("_fwrite__XprivateX__BB73_2_F"))
	__asm(lbl("_fwrite__XprivateX__BB73_1_F"))
		i5 =  (-1)
		__asm(push(i5), push(i0), op(0x3c))
	__asm(lbl("_fwrite__XprivateX__BB73_2_F"))
		i0 =  ((mstate.ebp+-32))
		mstate.esp -= 8
		__asm(push(i4), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM___sfvwrite.start()
		return
	__asm(lbl("_fwrite_state1"))
		i0 = mstate.eax
		mstate.esp += 8
		__asm(push(i0==0), iftrue, target("_fwrite__XprivateX__BB73_4_F"))
	__asm(lbl("_fwrite__XprivateX__BB73_3_F"))
		i2 =  ((__xasm<int>(push(i6), op(0x37))))
		i2 =  (i3 - i2)
		i2 =  (uint(i2) / uint(i1))
	__asm(lbl("_fwrite__XprivateX__BB73_4_F"))
		mstate.eax = i2
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("_fwrite_errState"))
		throw("Invalid state in _fwrite")
	}
}



// Async
public const ___ultoa:int = regFunc(FSM___ultoa.start)

public final class FSM___ultoa extends Machine {

	public static function start():void {
			var result:FSM___ultoa = new FSM___ultoa
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
	public var i8:int, i9:int, i10:int

	public static const intRegCount:int = 11

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("___ultoa_entry"))
		__asm(push(state), switchjump(
			"___ultoa_errState",
			"___ultoa_state0",
			"___ultoa_state1"))
	__asm(lbl("___ultoa_state0"))
	__asm(lbl("___ultoa__XprivateX__BB74_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i3 =  ((__xasm<int>(push((mstate.ebp+20)), op(0x37))))
		i4 =  ((__xasm<int>(push((mstate.ebp+24)), op(0x37))))
		i5 =  ((__xasm<int>(push((mstate.ebp+28)), op(0x37))))
		i6 =  ((__xasm<int>(push((mstate.ebp+32)), op(0x35), op(0x51))))
		i7 =  ((__xasm<int>(push((mstate.ebp+36)), op(0x37))))
		__asm(push(i2==8), iftrue, target("___ultoa__XprivateX__BB74_30_F"))
	__asm(lbl("___ultoa__XprivateX__BB74_1_F"))
		__asm(push(i2==10), iftrue, target("___ultoa__XprivateX__BB74_6_F"))
	__asm(lbl("___ultoa__XprivateX__BB74_2_F"))
		__asm(push(i2!=16), iftrue, target("___ultoa__XprivateX__BB74_37_F"))
	__asm(lbl("___ultoa__XprivateX__BB74_3_F"))
		i3 =  (0)
		__asm(jump, target("___ultoa__XprivateX__BB74_4_F"))
	__asm(jump, target("___ultoa__XprivateX__BB74_4_F"), lbl("___ultoa__XprivateX__BB74_4_B"), label, lbl("___ultoa__XprivateX__BB74_4_F")); 
		i2 =  (i0 & 15)
		i2 =  (i4 + i2)
		i5 =  (i3 ^ -1)
		i2 =  ((__xasm<int>(push(i2), op(0x35))))
		i5 =  (i1 + i5)
		__asm(push(i2), push(i5), op(0x3a))
		i3 =  (i3 + 1)
		i2 =  (i0 >>> 4)
		__asm(push(uint(i0)<uint(16)), iftrue, target("___ultoa__XprivateX__BB74_38_F"))
		__asm(jump, target("___ultoa__XprivateX__BB74_5_F"))
	__asm(lbl("___ultoa__XprivateX__BB74_5_F"))
		i0 = i2
		__asm(jump, target("___ultoa__XprivateX__BB74_4_B"))
	__asm(lbl("___ultoa__XprivateX__BB74_6_F"))
		__asm(push(uint(i0)>uint(9)), iftrue, target("___ultoa__XprivateX__BB74_8_F"))
	__asm(lbl("___ultoa__XprivateX__BB74_7_F"))
		i0 =  (i0 + 48)
		__asm(push(i0), push((i1+-1)), op(0x3a))
		i0 =  (i1 + -1)
		__asm(jump, target("___ultoa__XprivateX__BB74_40_F"))
	__asm(lbl("___ultoa__XprivateX__BB74_8_F"))
		__asm(push(i0<0), iftrue, target("___ultoa__XprivateX__BB74_10_F"))
	__asm(lbl("___ultoa__XprivateX__BB74_9_F"))
		i3 =  (0)
		i4 = i1
		__asm(jump, target("___ultoa__XprivateX__BB74_11_F"))
	__asm(lbl("___ultoa__XprivateX__BB74_10_F"))
		i3 =  (1)
		i4 =  (uint(i0) / uint(10))
		i2 =  (i4 * 10)
		i0 =  (i0 - i2)
		i0 =  (i0 + 48)
		__asm(push(i0), push((i1+-1)), op(0x3a))
		i1 =  (i1 + -1)
		i0 = i4
		i4 = i1
	__asm(lbl("___ultoa__XprivateX__BB74_11_F"))
		i1 = i7
	__asm(jump, target("___ultoa__XprivateX__BB74_12_F"), lbl("___ultoa__XprivateX__BB74_12_B"), label, lbl("___ultoa__XprivateX__BB74_12_F")); 
		i2 =  (i1 + 1)
		i7 = i1
		__asm(push(i5==0), iftrue, target("___ultoa__XprivateX__BB74_18_F"))
	__asm(lbl("___ultoa__XprivateX__BB74_13_F"))
		__asm(jump, target("___ultoa__XprivateX__BB74_14_F"))
	__asm(jump, target("___ultoa__XprivateX__BB74_14_F"), lbl("___ultoa__XprivateX__BB74_14_B"), label, lbl("___ultoa__XprivateX__BB74_14_F")); 
		i8 =  (i0 / 10)
		i8 =  (i8 * 10)
		i8 =  (i0 - i8)
		i8 =  (i8 + 48)
		__asm(push(i8), push((i4+-1)), op(0x3a))
		i8 =  ((__xasm<int>(push(i7), op(0x35))))
		i3 =  (i3 + 1)
		i9 =  (i4 + -1)
		i10 =  (i8 << 24)
		i10 =  (i10 >> 24)
		__asm(push(i10==i3), iftrue, target("___ultoa__XprivateX__BB74_22_F"))
		__asm(jump, target("___ultoa__XprivateX__BB74_15_F"))
	__asm(jump, target("___ultoa__XprivateX__BB74_15_F"), lbl("___ultoa__XprivateX__BB74_15_B"), label, lbl("___ultoa__XprivateX__BB74_15_F")); 
		i4 = i9
		__asm(jump, target("___ultoa__XprivateX__BB74_16_F"))
	__asm(jump, target("___ultoa__XprivateX__BB74_16_F"), lbl("___ultoa__XprivateX__BB74_16_B"), label, lbl("___ultoa__XprivateX__BB74_16_F")); 
		i8 =  (i0 / 10)
		i0 =  (i0 + 9)
		__asm(push(uint(i0)>uint(18)), iftrue, target("___ultoa__XprivateX__BB74_29_F"))
		__asm(jump, target("___ultoa__XprivateX__BB74_17_F"))
	__asm(lbl("___ultoa__XprivateX__BB74_17_F"))
		i3 = i4
		__asm(jump, target("___ultoa__XprivateX__BB74_39_F"))
	__asm(lbl("___ultoa__XprivateX__BB74_18_F"))
		i3 = i4
	__asm(jump, target("___ultoa__XprivateX__BB74_19_F"), lbl("___ultoa__XprivateX__BB74_19_B"), label, lbl("___ultoa__XprivateX__BB74_19_F")); 
		i4 =  (i0 / 10)
		i1 =  (i4 * 10)
		i1 =  (i0 - i1)
		i1 =  (i1 + 48)
		__asm(push(i1), push((i3+-1)), op(0x3a))
		i3 =  (i3 + -1)
		i0 =  (i0 + 9)
		__asm(push(uint(i0)>uint(18)), iftrue, target("___ultoa__XprivateX__BB74_21_F"))
	__asm(lbl("___ultoa__XprivateX__BB74_20_F"))
		__asm(jump, target("___ultoa__XprivateX__BB74_39_F"))
	__asm(lbl("___ultoa__XprivateX__BB74_21_F"))
		i0 = i4
		__asm(jump, target("___ultoa__XprivateX__BB74_19_B"))
	__asm(lbl("___ultoa__XprivateX__BB74_22_F"))
		i8 =  (i8 & 255)
		__asm(push(i8==127), iftrue, target("___ultoa__XprivateX__BB74_15_B"))
	__asm(lbl("___ultoa__XprivateX__BB74_23_F"))
		__asm(push(i0<10), iftrue, target("___ultoa__XprivateX__BB74_15_B"))
	__asm(lbl("___ultoa__XprivateX__BB74_24_F"))
		__asm(push(i6), push((i4+-2)), op(0x3a))
		i3 =  ((__xasm<int>(push(i2), op(0x35))))
		i4 =  (i4 + -2)
		__asm(push(i3!=0), iftrue, target("___ultoa__XprivateX__BB74_26_F"))
	__asm(lbl("___ultoa__XprivateX__BB74_25_F"))
		i3 =  (0)
		__asm(jump, target("___ultoa__XprivateX__BB74_16_B"))
	__asm(lbl("___ultoa__XprivateX__BB74_26_F"))
		i3 =  (i1 + 1)
		i2 =  (i0 / 10)
		i0 =  (i0 + 9)
		__asm(push(uint(i0)>uint(18)), iftrue, target("___ultoa__XprivateX__BB74_28_F"))
	__asm(lbl("___ultoa__XprivateX__BB74_27_F"))
		i3 = i4
		__asm(jump, target("___ultoa__XprivateX__BB74_39_F"))
	__asm(lbl("___ultoa__XprivateX__BB74_28_F"))
		i0 =  (0)
		i1 = i3
		i3 = i0
		i0 = i2
		__asm(jump, target("___ultoa__XprivateX__BB74_12_B"))
	__asm(lbl("___ultoa__XprivateX__BB74_29_F"))
		i0 = i8
		__asm(jump, target("___ultoa__XprivateX__BB74_14_B"))
	__asm(lbl("___ultoa__XprivateX__BB74_30_F"))
		i4 =  (0)
		__asm(jump, target("___ultoa__XprivateX__BB74_31_F"))
	__asm(jump, target("___ultoa__XprivateX__BB74_31_F"), lbl("___ultoa__XprivateX__BB74_31_B"), label, lbl("___ultoa__XprivateX__BB74_31_F")); 
		i2 =  (i0 | 48)
		i5 =  (i4 ^ -1)
		i2 =  (i2 & 55)
		i5 =  (i1 + i5)
		__asm(push(i2), push(i5), op(0x3a))
		i4 =  (i4 + 1)
		i6 =  (i0 >>> 3)
		__asm(push(uint(i0)<uint(8)), iftrue, target("___ultoa__XprivateX__BB74_33_F"))
	__asm(lbl("___ultoa__XprivateX__BB74_32_F"))
		i0 = i6
		__asm(jump, target("___ultoa__XprivateX__BB74_31_B"))
	__asm(lbl("___ultoa__XprivateX__BB74_33_F"))
		__asm(push(i3==0), iftrue, target("___ultoa__XprivateX__BB74_35_F"))
	__asm(lbl("___ultoa__XprivateX__BB74_34_F"))
		i3 =  (i2 & 255)
		__asm(push(i3!=48), iftrue, target("___ultoa__XprivateX__BB74_36_F"))
	__asm(lbl("___ultoa__XprivateX__BB74_35_F"))
		i3 = i5
		__asm(jump, target("___ultoa__XprivateX__BB74_39_F"))
	__asm(lbl("___ultoa__XprivateX__BB74_36_F"))
		i3 =  (48)
		i0 =  (i4 + -1)
		i0 =  (-2 - i0)
		i0 =  (i1 + i0)
		__asm(push(i3), push(i0), op(0x3a))
		__asm(jump, target("___ultoa__XprivateX__BB74_40_F"))
	__asm(lbl("___ultoa__XprivateX__BB74_37_F"))
		state = 1
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("___ultoa_state1"))
	__asm(lbl("___ultoa__XprivateX__BB74_38_F"))
		i3 = i5
		__asm(jump, target("___ultoa__XprivateX__BB74_39_F"))
	__asm(lbl("___ultoa__XprivateX__BB74_39_F"))
		i0 = i3
	__asm(lbl("___ultoa__XprivateX__BB74_40_F"))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("___ultoa_errState"))
		throw("Invalid state in ___ultoa")
	}
}



// Async
public const ___grow_type_table:int = regFunc(FSM___grow_type_table.start)

public final class FSM___grow_type_table extends Machine {

	public static function start():void {
			var result:FSM___grow_type_table = new FSM___grow_type_table
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int

	public static const intRegCount:int = 8

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("___grow_type_table_entry"))
		__asm(push(state), switchjump(
			"___grow_type_table_errState",
			"___grow_type_table_state0",
			"___grow_type_table_state1",
			"___grow_type_table_state2",
			"___grow_type_table_state3",
			"___grow_type_table_state4",
			"___grow_type_table_state5",
			"___grow_type_table_state6"))
	__asm(lbl("___grow_type_table_state0"))
	__asm(lbl("___grow_type_table__XprivateX__BB75_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i1 =  ((__xasm<int>(push(i0), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i3 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i4 =  ((__xasm<int>(push(i3), op(0x37))))
		i2 =  (i2 + 1)
		i5 =  (i1 << 1)
		i2 =  ((i2>i5) ? i2 : i5)
		__asm(push(i1!=8), iftrue, target("___grow_type_table__XprivateX__BB75_9_F"))
	__asm(lbl("___grow_type_table__XprivateX__BB75_1_F"))
		i5 =  (0)
		mstate.esp -= 8
		i6 =  (i2 << 2)
		__asm(push(i5), push(mstate.esp), op(0x3c))
		__asm(push(i6), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("___grow_type_table_state1"))
		i5 = mstate.eax
		mstate.esp += 8
		i6 = i5
		__asm(push(i5!=0), iftrue, target("___grow_type_table__XprivateX__BB75_3_F"))
	__asm(lbl("___grow_type_table__XprivateX__BB75_2_F"))
		state = 2
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("___grow_type_table_state2"))
	__asm(lbl("___grow_type_table__XprivateX__BB75_3_F"))
		mstate.esp -= 12
		i7 =  (i1 << 2)
		__asm(push(i4), push(mstate.esp), op(0x3c))
		__asm(push(i5), push((mstate.esp+4)), op(0x3c))
		__asm(push(i7), push((mstate.esp+8)), op(0x3c))
		mstate.esp -= 4;FSM_bcopy.start()
	__asm(lbl("___grow_type_table_state3"))
		mstate.esp += 12
		__asm(push(i1<i2), iftrue, target("___grow_type_table__XprivateX__BB75_5_F"))
	__asm(lbl("___grow_type_table__XprivateX__BB75_4_F"))
		i1 = i6
		__asm(jump, target("___grow_type_table__XprivateX__BB75_16_F"))
	__asm(lbl("___grow_type_table__XprivateX__BB75_5_F"))
		i4 = i6
		__asm(jump, target("___grow_type_table__XprivateX__BB75_6_F"))
	__asm(jump, target("___grow_type_table__XprivateX__BB75_6_F"), lbl("___grow_type_table__XprivateX__BB75_6_B"), label, lbl("___grow_type_table__XprivateX__BB75_6_F")); 
		i5 =  (i1 << 2)
		i5 =  (i4 + i5)
		__asm(jump, target("___grow_type_table__XprivateX__BB75_7_F"))
	__asm(jump, target("___grow_type_table__XprivateX__BB75_7_F"), lbl("___grow_type_table__XprivateX__BB75_7_B"), label, lbl("___grow_type_table__XprivateX__BB75_7_F")); 
		i6 =  (0)
		__asm(push(i6), push(i5), op(0x3c))
		i5 =  (i5 + 4)
		i1 =  (i1 + 1)
		__asm(push(i1<i2), iftrue, target("___grow_type_table__XprivateX__BB75_17_F"))
		__asm(jump, target("___grow_type_table__XprivateX__BB75_8_F"))
	__asm(lbl("___grow_type_table__XprivateX__BB75_8_F"))
		i1 = i4
		__asm(jump, target("___grow_type_table__XprivateX__BB75_16_F"))
	__asm(lbl("___grow_type_table__XprivateX__BB75_9_F"))
		mstate.esp -= 8
		i5 =  (i2 << 2)
		__asm(push(i4), push(mstate.esp), op(0x3c))
		__asm(push(i5), push((mstate.esp+4)), op(0x3c))
		state = 4
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("___grow_type_table_state4"))
		i5 = mstate.eax
		mstate.esp += 8
		i6 = i4
		__asm(push(i5!=0), iftrue, target("___grow_type_table__XprivateX__BB75_12_F"))
	__asm(lbl("___grow_type_table__XprivateX__BB75_10_F"))
		__asm(push(i4==0), iftrue, target("___grow_type_table__XprivateX__BB75_12_F"))
	__asm(lbl("___grow_type_table__XprivateX__BB75_11_F"))
		i4 =  (0)
		mstate.esp -= 8
		__asm(push(i6), push(mstate.esp), op(0x3c))
		__asm(push(i4), push((mstate.esp+4)), op(0x3c))
		state = 5
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("___grow_type_table_state5"))
		i4 = mstate.eax
		mstate.esp += 8
	__asm(lbl("___grow_type_table__XprivateX__BB75_12_F"))
		__asm(push(i5!=0), iftrue, target("___grow_type_table__XprivateX__BB75_14_F"))
	__asm(lbl("___grow_type_table__XprivateX__BB75_13_F"))
		state = 6
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("___grow_type_table_state6"))
	__asm(lbl("___grow_type_table__XprivateX__BB75_14_F"))
		i4 = i5
		__asm(push(i1<i2), iftrue, target("___grow_type_table__XprivateX__BB75_6_B"))
	__asm(lbl("___grow_type_table__XprivateX__BB75_15_F"))
		i1 = i4
		__asm(jump, target("___grow_type_table__XprivateX__BB75_16_F"))
	__asm(lbl("___grow_type_table__XprivateX__BB75_16_F"))
		__asm(push(i1), push(i3), op(0x3c))
		__asm(push(i2), push(i0), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("___grow_type_table__XprivateX__BB75_17_F"))
		__asm(jump, target("___grow_type_table__XprivateX__BB75_7_B"))
	__asm(lbl("___grow_type_table_errState"))
		throw("Invalid state in ___grow_type_table")
	}
}



// Async
public const ___find_arguments:int = regFunc(FSM___find_arguments.start)

public final class FSM___find_arguments extends Machine {

	public static function start():void {
			var result:FSM___find_arguments = new FSM___find_arguments
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
	public var i8:int, i9:int, i10:int, i11:int, i12:int

	public static const intRegCount:int = 13
	public var f0:Number

	public static const NumberRegCount:int = 1
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("___find_arguments_entry"))
		__asm(push(state), switchjump(
			"___find_arguments_errState",
			"___find_arguments_state0",
			"___find_arguments_state1",
			"___find_arguments_state2",
			"___find_arguments_state3",
			"___find_arguments_state4",
			"___find_arguments_state5",
			"___find_arguments_state6",
			"___find_arguments_state7",
			"___find_arguments_state8",
			"___find_arguments_state9",
			"___find_arguments_state10",
			"___find_arguments_state11",
			"___find_arguments_state12",
			"___find_arguments_state13",
			"___find_arguments_state14",
			"___find_arguments_state15",
			"___find_arguments_state16",
			"___find_arguments_state17",
			"___find_arguments_state18",
			"___find_arguments_state19",
			"___find_arguments_state20",
			"___find_arguments_state21",
			"___find_arguments_state22",
			"___find_arguments_state23",
			"___find_arguments_state24",
			"___find_arguments_state25",
			"___find_arguments_state26",
			"___find_arguments_state27",
			"___find_arguments_state28",
			"___find_arguments_state29",
			"___find_arguments_state30",
			"___find_arguments_state31",
			"___find_arguments_state32",
			"___find_arguments_state33",
			"___find_arguments_state34",
			"___find_arguments_state35",
			"___find_arguments_state36",
			"___find_arguments_state37",
			"___find_arguments_state38",
			"___find_arguments_state39"))
	__asm(lbl("___find_arguments_state0"))
	__asm(lbl("___find_arguments__XprivateX__BB76_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 52
		i0 =  ((mstate.ebp+-48))
		__asm(push(i0), push((mstate.ebp+-52)), op(0x3c))
		i1 =  (8)
		__asm(push(i1), push((mstate.ebp+-4)), op(0x3c))
		i1 =  (0)
		__asm(push(i1), push((mstate.ebp+-48)), op(0x3c))
		__asm(push(i1), push((mstate.ebp+-44)), op(0x3c))
		__asm(push(i1), push((mstate.ebp+-40)), op(0x3c))
		__asm(push(i1), push((mstate.ebp+-36)), op(0x3c))
		__asm(push(i1), push((mstate.ebp+-32)), op(0x3c))
		__asm(push(i1), push((mstate.ebp+-28)), op(0x3c))
		__asm(push(i1), push((mstate.ebp+-24)), op(0x3c))
		__asm(push(i1), push((mstate.ebp+-20)), op(0x3c))
		i2 =  (1)
		i3 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i4 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i5 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
	__asm(jump, target("___find_arguments__XprivateX__BB76_1_F"), lbl("___find_arguments__XprivateX__BB76_1_B"), label, lbl("___find_arguments__XprivateX__BB76_1_F")); 
		i6 =  ((__xasm<int>(push(i3), op(0x35))))
		__asm(push(i6==0), iftrue, target("___find_arguments__XprivateX__BB76_12_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_2_F"))
		i6 =  (i6 & 255)
		__asm(push(i6!=37), iftrue, target("___find_arguments__XprivateX__BB76_24_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_3_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_4_F"))
	__asm(jump, target("___find_arguments__XprivateX__BB76_4_F"), lbl("___find_arguments__XprivateX__BB76_4_B"), label, lbl("___find_arguments__XprivateX__BB76_4_F")); 
		i6 =  (0)
		i3 =  (i3 + 1)
		__asm(jump, target("___find_arguments__XprivateX__BB76_5_F"))
	__asm(jump, target("___find_arguments__XprivateX__BB76_5_F"), lbl("___find_arguments__XprivateX__BB76_5_B"), label, lbl("___find_arguments__XprivateX__BB76_5_F")); 
		i7 =  ((__xasm<int>(push(i3), op(0x35), op(0x51))))
		i3 =  (i3 + 1)
		__asm(push(i7>87), iftrue, target("___find_arguments__XprivateX__BB76_62_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_6_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_6_F"))
		__asm(push(i7>64), iftrue, target("___find_arguments__XprivateX__BB76_41_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_7_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_7_F"))
		__asm(push(i7>42), iftrue, target("___find_arguments__XprivateX__BB76_33_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_8_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_8_F"))
		__asm(push(i7>38), iftrue, target("___find_arguments__XprivateX__BB76_28_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_9_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_9_F"))
		__asm(push(i7==32), iftrue, target("___find_arguments__XprivateX__BB76_11_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_10_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_10_F"))
		__asm(push(i7==35), iftrue, target("___find_arguments__XprivateX__BB76_11_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_49_F"))
	__asm(jump, target("___find_arguments__XprivateX__BB76_11_F"), lbl("___find_arguments__XprivateX__BB76_11_B"), label, lbl("___find_arguments__XprivateX__BB76_11_F")); 
		__asm(jump, target("___find_arguments__XprivateX__BB76_5_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_12_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_13_F"))
	__asm(jump, target("___find_arguments__XprivateX__BB76_13_F"), lbl("___find_arguments__XprivateX__BB76_13_B"), label, lbl("___find_arguments__XprivateX__BB76_13_F")); 
		__asm(push(i1<8), iftrue, target("___find_arguments__XprivateX__BB76_354_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_14_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_14_F"))
		i2 =  (0)
		i3 =  (i1 << 3)
		mstate.esp -= 8
		i3 =  (i3 + 8)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i3), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("___find_arguments_state1"))
		i3 = mstate.eax
		mstate.esp += 8
		__asm(push(i3), push(i5), op(0x3c))
		__asm(push(i2), push(i3), op(0x3c))
		i2 =  ((__xasm<int>(push((mstate.ebp+-52)), op(0x37))))
		__asm(push(i1<1), iftrue, target("___find_arguments__XprivateX__BB76_353_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_15_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_15_F"))
		i3 =  (1)
		__asm(jump, target("___find_arguments__XprivateX__BB76_16_F"))
	__asm(jump, target("___find_arguments__XprivateX__BB76_16_F"), lbl("___find_arguments__XprivateX__BB76_16_B"), label, lbl("___find_arguments__XprivateX__BB76_16_F")); 
		i6 =  (i3 << 2)
		i2 =  (i2 + i6)
		i2 =  ((__xasm<int>(push(i2), op(0x37))))
		__asm(push(i2>11), iftrue, target("___find_arguments__XprivateX__BB76_368_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_17_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_17_F"))
		__asm(push(i2>5), iftrue, target("___find_arguments__XprivateX__BB76_359_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_18_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_18_F"))
		__asm(push(i2>2), iftrue, target("___find_arguments__XprivateX__BB76_355_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_19_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_19_F"))
		__asm(push(i2==0), iftrue, target("___find_arguments__XprivateX__BB76_390_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_20_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_20_F"))
		__asm(push(i2==1), iftrue, target("___find_arguments__XprivateX__BB76_391_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_21_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_21_F"))
		__asm(push(i2==2), iftrue, target("___find_arguments__XprivateX__BB76_22_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_389_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_22_F"))
		i2 =  ((__xasm<int>(push(i5), op(0x37))))
		i6 =  ((__xasm<int>(push(i4), op(0x37))))
		i7 =  (i3 << 3)
		i2 =  (i2 + i7)
		__asm(push(i6), push(i2), op(0x3c))
		i2 =  (i3 + 1)
		i4 =  (i4 + 4)
		__asm(jump, target("___find_arguments__XprivateX__BB76_408_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_23_B"), label)
		i3 = i7
		__asm(jump, target("___find_arguments__XprivateX__BB76_24_F"))
	__asm(jump, target("___find_arguments__XprivateX__BB76_24_F"), lbl("___find_arguments__XprivateX__BB76_24_B"), label, lbl("___find_arguments__XprivateX__BB76_24_F")); 
		i6 =  ((__xasm<int>(push((i3+1)), op(0x35))))
		i3 =  (i3 + 1)
		i7 = i3
		__asm(push(i6==0), iftrue, target("___find_arguments__XprivateX__BB76_27_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_25_F"))
		i6 =  (i6 & 255)
		__asm(push(i6!=37), iftrue, target("___find_arguments__XprivateX__BB76_23_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_26_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_4_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_27_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_13_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_28_F"))
		__asm(push(i7==39), iftrue, target("___find_arguments__XprivateX__BB76_11_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_29_F"))
		__asm(push(i7==42), iftrue, target("___find_arguments__XprivateX__BB76_30_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_49_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_30_F"))
		i7 = i3
		__asm(jump, target("___find_arguments__XprivateX__BB76_31_F"))
	__asm(jump, target("___find_arguments__XprivateX__BB76_31_F"), lbl("___find_arguments__XprivateX__BB76_31_B"), label, lbl("___find_arguments__XprivateX__BB76_31_F")); 
		i8 =  ((__xasm<int>(push(i3), op(0x35), op(0x51))))
		i9 = i3
		i8 =  (i8 + -48)
		__asm(push(uint(i8)<uint(10)), iftrue, target("___find_arguments__XprivateX__BB76_198_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_32_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_32_F"))
		i8 =  (0)
		__asm(jump, target("___find_arguments__XprivateX__BB76_201_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_33_F"))
		i8 =  (1)
		i9 =  (i7 + -43)
		i8 =  (i8 << i9)
		__asm(push(uint(i9)>uint(14)), iftrue, target("___find_arguments__XprivateX__BB76_49_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_34_F"))
		i9 =  (i8 & 32704)
		__asm(push(i9!=0), iftrue, target("___find_arguments__XprivateX__BB76_194_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_35_F"))
		i9 =  (i8 & 37)
		__asm(push(i9!=0), iftrue, target("___find_arguments__XprivateX__BB76_11_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_36_F"))
		i8 =  (i8 & 8)
		__asm(push(i8!=0), iftrue, target("___find_arguments__XprivateX__BB76_37_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_49_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_37_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_38_F"))
	__asm(jump, target("___find_arguments__XprivateX__BB76_38_F"), lbl("___find_arguments__XprivateX__BB76_38_B"), label, lbl("___find_arguments__XprivateX__BB76_38_F")); 
		i7 =  ((__xasm<int>(push(i3), op(0x35))))
		i8 =  (i3 + 1)
		i9 = i3
		__asm(push(i7!=42), iftrue, target("___find_arguments__XprivateX__BB76_222_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_39_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_39_F"))
		i3 =  ((__xasm<int>(push(i8), op(0x35), op(0x51))))
		i3 =  (i3 + -48)
		__asm(push(uint(i3)<uint(10)), iftrue, target("___find_arguments__XprivateX__BB76_208_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_40_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_40_F"))
		i3 =  (0)
		i7 = i8
		__asm(jump, target("___find_arguments__XprivateX__BB76_212_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_41_F"))
		__asm(push(i7>70), iftrue, target("___find_arguments__XprivateX__BB76_52_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_42_F"))
		__asm(push(i7>67), iftrue, target("___find_arguments__XprivateX__BB76_47_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_43_F"))
		__asm(push(i7==65), iftrue, target("___find_arguments__XprivateX__BB76_67_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_44_F"))
		__asm(push(i7==67), iftrue, target("___find_arguments__XprivateX__BB76_45_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_49_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_45_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_46_F"))
	__asm(jump, target("___find_arguments__XprivateX__BB76_46_F"), lbl("___find_arguments__XprivateX__BB76_46_B"), label, lbl("___find_arguments__XprivateX__BB76_46_F")); 
		i6 =  (i6 | 16)
		__asm(jump, target("___find_arguments__XprivateX__BB76_108_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_47_F"))
		__asm(push(i7==68), iftrue, target("___find_arguments__XprivateX__BB76_236_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_48_F"))
		__asm(push(i7==69), iftrue, target("___find_arguments__XprivateX__BB76_67_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_49_F"))
	__asm(jump, target("___find_arguments__XprivateX__BB76_49_F"), lbl("___find_arguments__XprivateX__BB76_49_B"), label, lbl("___find_arguments__XprivateX__BB76_49_F")); 
		i6 = i7
		__asm(jump, target("___find_arguments__XprivateX__BB76_50_F"))
	__asm(jump, target("___find_arguments__XprivateX__BB76_50_F"), lbl("___find_arguments__XprivateX__BB76_50_B"), label, lbl("___find_arguments__XprivateX__BB76_50_F")); 
		__asm(push(i6==0), iftrue, target("___find_arguments__XprivateX__BB76_13_B"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_51_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_51_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_1_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_52_F"))
		__asm(push(i7>78), iftrue, target("___find_arguments__XprivateX__BB76_57_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_53_F"))
		__asm(push(i7==71), iftrue, target("___find_arguments__XprivateX__BB76_67_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_54_F"))
		__asm(push(i7==76), iftrue, target("___find_arguments__XprivateX__BB76_55_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_49_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_55_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_56_F"))
	__asm(jump, target("___find_arguments__XprivateX__BB76_56_F"), lbl("___find_arguments__XprivateX__BB76_56_B"), label, lbl("___find_arguments__XprivateX__BB76_56_F")); 
		i6 =  (i6 | 8)
		__asm(jump, target("___find_arguments__XprivateX__BB76_5_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_57_F"))
		__asm(push(i7==79), iftrue, target("___find_arguments__XprivateX__BB76_296_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_58_F"))
		__asm(push(i7==83), iftrue, target("___find_arguments__XprivateX__BB76_325_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_59_F"))
		__asm(push(i7==85), iftrue, target("___find_arguments__XprivateX__BB76_60_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_49_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_60_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_61_F"))
	__asm(jump, target("___find_arguments__XprivateX__BB76_61_F"), lbl("___find_arguments__XprivateX__BB76_61_B"), label, lbl("___find_arguments__XprivateX__BB76_61_F")); 
		i6 =  (i6 | 16)
		__asm(jump, target("___find_arguments__XprivateX__BB76_115_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_62_F"))
		__asm(push(i7>109), iftrue, target("___find_arguments__XprivateX__BB76_87_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_63_F"))
		__asm(push(i7>100), iftrue, target("___find_arguments__XprivateX__BB76_75_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_64_F"))
		__asm(push(i7>98), iftrue, target("___find_arguments__XprivateX__BB76_72_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_65_F"))
		__asm(push(i7==88), iftrue, target("___find_arguments__XprivateX__BB76_114_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_66_F"))
		__asm(push(i7==97), iftrue, target("___find_arguments__XprivateX__BB76_67_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_49_B"))
	__asm(jump, target("___find_arguments__XprivateX__BB76_67_F"), lbl("___find_arguments__XprivateX__BB76_67_B"), label, lbl("___find_arguments__XprivateX__BB76_67_F")); 
		__asm(jump, target("___find_arguments__XprivateX__BB76_68_F"))
	__asm(jump, target("___find_arguments__XprivateX__BB76_68_F"), lbl("___find_arguments__XprivateX__BB76_68_B"), label, lbl("___find_arguments__XprivateX__BB76_68_F")); 
		i7 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		i6 =  (i6 & 8)
		__asm(push(i6==0), iftrue, target("___find_arguments__XprivateX__BB76_261_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_69_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_69_F"))
		__asm(push(i2<i7), iftrue, target("___find_arguments__XprivateX__BB76_71_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_70_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_70_F"))
		i6 =  ((mstate.ebp+-4))
		mstate.esp -= 12
		i7 =  ((mstate.ebp+-52))
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i7), push((mstate.esp+4)), op(0x3c))
		__asm(push(i6), push((mstate.esp+8)), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM___grow_type_table.start()
		return
	__asm(lbl("___find_arguments_state2"))
		mstate.esp += 12
		__asm(jump, target("___find_arguments__XprivateX__BB76_71_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_71_F"))
		i6 =  (22)
		i7 =  ((__xasm<int>(push((mstate.ebp+-52)), op(0x37))))
		i8 =  (i2 << 2)
		i7 =  (i7 + i8)
		__asm(push(i6), push(i7), op(0x3c))
		i6 =  ((i2>i1) ? i2 : i1)
		i2 =  (i2 + 1)
		i1 = i6
		__asm(jump, target("___find_arguments__XprivateX__BB76_1_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_72_F"))
		__asm(push(i7==99), iftrue, target("___find_arguments__XprivateX__BB76_107_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_73_F"))
		__asm(push(i7==100), iftrue, target("___find_arguments__XprivateX__BB76_74_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_49_B"))
	__asm(jump, target("___find_arguments__XprivateX__BB76_74_F"), lbl("___find_arguments__XprivateX__BB76_74_B"), label, lbl("___find_arguments__XprivateX__BB76_74_F")); 
		__asm(jump, target("___find_arguments__XprivateX__BB76_238_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_75_F"))
		__asm(push(i7>104), iftrue, target("___find_arguments__XprivateX__BB76_81_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_76_F"))
		i8 =  (i7 + -101)
		__asm(push(uint(i8)<uint(3)), iftrue, target("___find_arguments__XprivateX__BB76_67_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_77_F"))
		__asm(push(i7==104), iftrue, target("___find_arguments__XprivateX__BB76_78_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_49_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_78_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_79_F"))
	__asm(jump, target("___find_arguments__XprivateX__BB76_79_F"), lbl("___find_arguments__XprivateX__BB76_79_B"), label, lbl("___find_arguments__XprivateX__BB76_79_F")); 
		i7 =  (i6 & 64)
		__asm(push(i7==0), iftrue, target("___find_arguments__XprivateX__BB76_227_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_80_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_80_F"))
		i6 =  (i6 | 8192)
		i6 =  (i6 & -65)
		__asm(jump, target("___find_arguments__XprivateX__BB76_5_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_81_F"))
		__asm(push(i7==105), iftrue, target("___find_arguments__XprivateX__BB76_74_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_82_F"))
		__asm(push(i7==106), iftrue, target("___find_arguments__XprivateX__BB76_228_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_83_F"))
		__asm(push(i7==108), iftrue, target("___find_arguments__XprivateX__BB76_84_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_49_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_84_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_85_F"))
	__asm(jump, target("___find_arguments__XprivateX__BB76_85_F"), lbl("___find_arguments__XprivateX__BB76_85_B"), label, lbl("___find_arguments__XprivateX__BB76_85_F")); 
		i7 =  (i6 & 16)
		__asm(push(i7==0), iftrue, target("___find_arguments__XprivateX__BB76_230_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_86_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_86_F"))
		i6 =  (i6 | 32)
		i6 =  (i6 & -17)
		__asm(jump, target("___find_arguments__XprivateX__BB76_5_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_87_F"))
		__asm(push(i7>114), iftrue, target("___find_arguments__XprivateX__BB76_96_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_88_F"))
		__asm(push(i7>111), iftrue, target("___find_arguments__XprivateX__BB76_92_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_89_F"))
		__asm(push(i7==110), iftrue, target("___find_arguments__XprivateX__BB76_264_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_90_F"))
		__asm(push(i7==111), iftrue, target("___find_arguments__XprivateX__BB76_91_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_49_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_91_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_298_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_92_F"))
		__asm(push(i7==112), iftrue, target("___find_arguments__XprivateX__BB76_321_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_93_F"))
		__asm(push(i7==113), iftrue, target("___find_arguments__XprivateX__BB76_94_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_49_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_94_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_95_F"))
	__asm(jump, target("___find_arguments__XprivateX__BB76_95_F"), lbl("___find_arguments__XprivateX__BB76_95_B"), label, lbl("___find_arguments__XprivateX__BB76_95_F")); 
		i6 =  (i6 | 32)
		__asm(jump, target("___find_arguments__XprivateX__BB76_5_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_96_F"))
		__asm(push(i7>116), iftrue, target("___find_arguments__XprivateX__BB76_101_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_97_F"))
		__asm(push(i7==115), iftrue, target("___find_arguments__XprivateX__BB76_106_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_98_F"))
		__asm(push(i7==116), iftrue, target("___find_arguments__XprivateX__BB76_99_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_49_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_99_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_100_F"))
	__asm(jump, target("___find_arguments__XprivateX__BB76_100_F"), lbl("___find_arguments__XprivateX__BB76_100_B"), label, lbl("___find_arguments__XprivateX__BB76_100_F")); 
		i6 =  (i6 | 2048)
		__asm(jump, target("___find_arguments__XprivateX__BB76_5_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_101_F"))
		__asm(push(i7==117), iftrue, target("___find_arguments__XprivateX__BB76_114_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_102_F"))
		__asm(push(i7==120), iftrue, target("___find_arguments__XprivateX__BB76_114_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_103_F"))
		__asm(push(i7!=122), iftrue, target("___find_arguments__XprivateX__BB76_49_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_104_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_105_F"))
	__asm(jump, target("___find_arguments__XprivateX__BB76_105_F"), lbl("___find_arguments__XprivateX__BB76_105_B"), label, lbl("___find_arguments__XprivateX__BB76_105_F")); 
		i6 =  (i6 | 1024)
		__asm(jump, target("___find_arguments__XprivateX__BB76_5_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_106_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_327_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_107_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_108_F"))
	__asm(jump, target("___find_arguments__XprivateX__BB76_108_F"), lbl("___find_arguments__XprivateX__BB76_108_B"), label, lbl("___find_arguments__XprivateX__BB76_108_F")); 
		i7 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		i6 =  (i6 & 16)
		__asm(push(i6==0), iftrue, target("___find_arguments__XprivateX__BB76_233_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_109_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_109_F"))
		__asm(push(i2<i7), iftrue, target("___find_arguments__XprivateX__BB76_111_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_110_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_110_F"))
		i6 =  ((mstate.ebp+-4))
		mstate.esp -= 12
		i7 =  ((mstate.ebp+-52))
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i7), push((mstate.esp+4)), op(0x3c))
		__asm(push(i6), push((mstate.esp+8)), op(0x3c))
		state = 3
		mstate.esp -= 4;FSM___grow_type_table.start()
		return
	__asm(lbl("___find_arguments_state3"))
		mstate.esp += 12
		__asm(jump, target("___find_arguments__XprivateX__BB76_111_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_111_F"))
		i6 =  (23)
		i7 =  ((__xasm<int>(push((mstate.ebp+-52)), op(0x37))))
		i8 =  (i2 << 2)
		i7 =  (i7 + i8)
		__asm(push(i6), push(i7), op(0x3c))
		i6 =  ((__xasm<int>(push(i3), op(0x35))))
		i1 =  ((i2>i1) ? i2 : i1)
		i2 =  (i2 + 1)
		__asm(push(i6==0), iftrue, target("___find_arguments__XprivateX__BB76_231_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_112_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_112_F"))
		i6 =  (i6 & 255)
		__asm(push(i6!=37), iftrue, target("___find_arguments__XprivateX__BB76_232_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_113_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_113_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_4_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_114_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_115_F"))
	__asm(jump, target("___find_arguments__XprivateX__BB76_115_F"), lbl("___find_arguments__XprivateX__BB76_115_B"), label, lbl("___find_arguments__XprivateX__BB76_115_F")); 
		i7 =  (i6 & 4096)
		__asm(push(i7==0), iftrue, target("___find_arguments__XprivateX__BB76_334_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_116_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_116_F"))
		i6 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		__asm(push(i2<i6), iftrue, target("___find_arguments__XprivateX__BB76_118_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_117_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_117_F"))
		i6 =  ((mstate.ebp+-4))
		mstate.esp -= 12
		i7 =  ((mstate.ebp+-52))
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i7), push((mstate.esp+4)), op(0x3c))
		__asm(push(i6), push((mstate.esp+8)), op(0x3c))
		state = 4
		mstate.esp -= 4;FSM___grow_type_table.start()
		return
	__asm(lbl("___find_arguments_state4"))
		mstate.esp += 12
		__asm(jump, target("___find_arguments__XprivateX__BB76_118_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_118_F"))
		i6 =  (16)
		i7 =  ((__xasm<int>(push((mstate.ebp+-52)), op(0x37))))
		i8 =  (i2 << 2)
		i7 =  (i7 + i8)
		__asm(push(i6), push(i7), op(0x3c))
		i1 =  ((i2>i1) ? i2 : i1)
		i2 =  (i2 + 1)
		__asm(jump, target("___find_arguments__XprivateX__BB76_1_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_119_B"), label)
		i7 =  (i7 << 0)
		i3 =  (i7 + i3)
		i3 =  (i3 + 1)
		i7 = i8
	__asm(jump, target("___find_arguments__XprivateX__BB76_120_F"), lbl("___find_arguments__XprivateX__BB76_120_B"), label, lbl("___find_arguments__XprivateX__BB76_120_F")); 
		__asm(push(i7>87), iftrue, target("___find_arguments__XprivateX__BB76_151_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_121_F"))
		__asm(push(i7>64), iftrue, target("___find_arguments__XprivateX__BB76_135_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_122_F"))
		__asm(push(i7>42), iftrue, target("___find_arguments__XprivateX__BB76_130_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_123_F"))
		__asm(push(i7>38), iftrue, target("___find_arguments__XprivateX__BB76_127_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_124_F"))
		__asm(push(i7==32), iftrue, target("___find_arguments__XprivateX__BB76_126_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_125_F"))
		__asm(push(i7==35), iftrue, target("___find_arguments__XprivateX__BB76_126_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_142_F"))
	__asm(jump, target("___find_arguments__XprivateX__BB76_126_F"), lbl("___find_arguments__XprivateX__BB76_126_B"), label, lbl("___find_arguments__XprivateX__BB76_126_F")); 
		__asm(jump, target("___find_arguments__XprivateX__BB76_5_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_127_F"))
		__asm(push(i7==39), iftrue, target("___find_arguments__XprivateX__BB76_126_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_128_F"))
		__asm(push(i7==42), iftrue, target("___find_arguments__XprivateX__BB76_129_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_142_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_129_F"))
		i7 = i3
		__asm(jump, target("___find_arguments__XprivateX__BB76_31_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_130_F"))
		i8 =  (1)
		i9 =  (i7 + -43)
		i8 =  (i8 << i9)
		__asm(push(uint(i9)>uint(14)), iftrue, target("___find_arguments__XprivateX__BB76_142_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_131_F"))
		i9 =  (i8 & 32704)
		__asm(push(i9!=0), iftrue, target("___find_arguments__XprivateX__BB76_193_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_132_F"))
		i9 =  (i8 & 37)
		__asm(push(i9!=0), iftrue, target("___find_arguments__XprivateX__BB76_126_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_133_F"))
		i8 =  (i8 & 8)
		__asm(push(i8!=0), iftrue, target("___find_arguments__XprivateX__BB76_134_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_142_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_134_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_38_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_135_F"))
		__asm(push(i7>70), iftrue, target("___find_arguments__XprivateX__BB76_143_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_136_F"))
		__asm(push(i7>67), iftrue, target("___find_arguments__XprivateX__BB76_140_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_137_F"))
		__asm(push(i7==65), iftrue, target("___find_arguments__XprivateX__BB76_156_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_138_F"))
		__asm(push(i7==67), iftrue, target("___find_arguments__XprivateX__BB76_139_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_142_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_139_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_46_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_140_F"))
		__asm(push(i7==68), iftrue, target("___find_arguments__XprivateX__BB76_192_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_141_F"))
		__asm(push(i7==69), iftrue, target("___find_arguments__XprivateX__BB76_156_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_142_F"))
	__asm(jump, target("___find_arguments__XprivateX__BB76_142_F"), lbl("___find_arguments__XprivateX__BB76_142_B"), label, lbl("___find_arguments__XprivateX__BB76_142_F")); 
		i6 = i7
		__asm(jump, target("___find_arguments__XprivateX__BB76_50_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_143_F"))
		__asm(push(i7>78), iftrue, target("___find_arguments__XprivateX__BB76_147_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_144_F"))
		__asm(push(i7==71), iftrue, target("___find_arguments__XprivateX__BB76_156_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_145_F"))
		__asm(push(i7==76), iftrue, target("___find_arguments__XprivateX__BB76_146_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_142_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_146_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_56_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_147_F"))
		__asm(push(i7==79), iftrue, target("___find_arguments__XprivateX__BB76_191_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_148_F"))
		__asm(push(i7==83), iftrue, target("___find_arguments__XprivateX__BB76_190_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_149_F"))
		__asm(push(i7==85), iftrue, target("___find_arguments__XprivateX__BB76_150_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_142_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_150_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_61_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_151_F"))
		__asm(push(i7>109), iftrue, target("___find_arguments__XprivateX__BB76_168_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_152_F"))
		__asm(push(i7>100), iftrue, target("___find_arguments__XprivateX__BB76_160_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_153_F"))
		__asm(push(i7>98), iftrue, target("___find_arguments__XprivateX__BB76_157_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_154_F"))
		__asm(push(i7==88), iftrue, target("___find_arguments__XprivateX__BB76_189_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_155_F"))
		__asm(push(i7==97), iftrue, target("___find_arguments__XprivateX__BB76_156_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_142_B"))
	__asm(jump, target("___find_arguments__XprivateX__BB76_156_F"), lbl("___find_arguments__XprivateX__BB76_156_B"), label, lbl("___find_arguments__XprivateX__BB76_156_F")); 
		__asm(jump, target("___find_arguments__XprivateX__BB76_68_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_157_F"))
		__asm(push(i7==99), iftrue, target("___find_arguments__XprivateX__BB76_188_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_158_F"))
		__asm(push(i7==100), iftrue, target("___find_arguments__XprivateX__BB76_159_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_142_B"))
	__asm(jump, target("___find_arguments__XprivateX__BB76_159_F"), lbl("___find_arguments__XprivateX__BB76_159_B"), label, lbl("___find_arguments__XprivateX__BB76_159_F")); 
		__asm(jump, target("___find_arguments__XprivateX__BB76_238_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_160_F"))
		__asm(push(i7>104), iftrue, target("___find_arguments__XprivateX__BB76_164_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_161_F"))
		i8 =  (i7 + -101)
		__asm(push(uint(i8)<uint(3)), iftrue, target("___find_arguments__XprivateX__BB76_156_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_162_F"))
		__asm(push(i7==104), iftrue, target("___find_arguments__XprivateX__BB76_163_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_142_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_163_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_79_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_164_F"))
		__asm(push(i7==105), iftrue, target("___find_arguments__XprivateX__BB76_159_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_165_F"))
		__asm(push(i7==106), iftrue, target("___find_arguments__XprivateX__BB76_187_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_166_F"))
		__asm(push(i7==108), iftrue, target("___find_arguments__XprivateX__BB76_167_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_142_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_167_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_85_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_168_F"))
		__asm(push(i7>114), iftrue, target("___find_arguments__XprivateX__BB76_176_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_169_F"))
		__asm(push(i7>111), iftrue, target("___find_arguments__XprivateX__BB76_173_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_170_F"))
		__asm(push(i7==110), iftrue, target("___find_arguments__XprivateX__BB76_186_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_171_F"))
		__asm(push(i7==111), iftrue, target("___find_arguments__XprivateX__BB76_172_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_142_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_172_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_298_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_173_F"))
		__asm(push(i7==112), iftrue, target("___find_arguments__XprivateX__BB76_185_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_174_F"))
		__asm(push(i7==113), iftrue, target("___find_arguments__XprivateX__BB76_175_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_142_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_175_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_95_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_176_F"))
		__asm(push(i7>116), iftrue, target("___find_arguments__XprivateX__BB76_180_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_177_F"))
		__asm(push(i7==115), iftrue, target("___find_arguments__XprivateX__BB76_184_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_178_F"))
		__asm(push(i7==116), iftrue, target("___find_arguments__XprivateX__BB76_179_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_142_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_179_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_100_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_180_F"))
		__asm(push(i7==117), iftrue, target("___find_arguments__XprivateX__BB76_189_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_181_F"))
		__asm(push(i7==120), iftrue, target("___find_arguments__XprivateX__BB76_189_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_182_F"))
		__asm(push(i7!=122), iftrue, target("___find_arguments__XprivateX__BB76_142_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_183_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_105_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_184_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_327_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_185_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_322_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_186_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_265_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_187_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_229_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_188_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_108_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_189_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_115_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_190_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_326_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_191_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_297_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_192_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_237_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_193_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_195_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_194_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_195_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_195_F"))
		i8 =  (0)
		i9 = i3
		i10 = i8
		__asm(jump, target("___find_arguments__XprivateX__BB76_196_F"))
	__asm(jump, target("___find_arguments__XprivateX__BB76_196_F"), lbl("___find_arguments__XprivateX__BB76_196_B"), label, lbl("___find_arguments__XprivateX__BB76_196_F")); 
		i11 =  (i9 + i10)
		i11 =  ((__xasm<int>(push(i11), op(0x35))))
		i8 =  (i8 * 10)
		i12 =  (i11 << 24)
		i7 =  (i7 + i8)
		i8 =  (i12 >> 24)
		i12 =  (i7 + -48)
		i7 =  (i10 + 1)
		i10 =  (i8 + -48)
		__asm(push(uint(i10)>uint(9)), iftrue, target("___find_arguments__XprivateX__BB76_224_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_197_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_197_F"))
		i10 = i7
		i7 = i8
		i8 = i12
		__asm(jump, target("___find_arguments__XprivateX__BB76_196_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_198_F"))
		i3 =  (0)
		i8 = i9
	__asm(jump, target("___find_arguments__XprivateX__BB76_199_F"), lbl("___find_arguments__XprivateX__BB76_199_B"), label, lbl("___find_arguments__XprivateX__BB76_199_F")); 
		i9 =  ((__xasm<int>(push(i8), op(0x35), op(0x51))))
		i3 =  (i3 * 10)
		i10 =  ((__xasm<int>(push((i8+1)), op(0x35), op(0x51))))
		i3 =  (i3 + i9)
		i9 =  (i3 + -48)
		i3 =  (i8 + 1)
		i8 = i3
		i10 =  (i10 + -48)
		__asm(push(uint(i10)<uint(10)), iftrue, target("___find_arguments__XprivateX__BB76_415_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_200_F"))
		i8 = i9
		__asm(jump, target("___find_arguments__XprivateX__BB76_201_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_201_F"))
		i9 =  ((__xasm<int>(push(i3), op(0x35))))
		i10 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		__asm(push(i9!=36), iftrue, target("___find_arguments__XprivateX__BB76_205_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_202_F"))
		__asm(push(i8<i10), iftrue, target("___find_arguments__XprivateX__BB76_204_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_203_F"))
		i7 =  ((mstate.ebp+-4))
		mstate.esp -= 12
		i10 =  ((mstate.ebp+-52))
		__asm(push(i8), push(mstate.esp), op(0x3c))
		__asm(push(i10), push((mstate.esp+4)), op(0x3c))
		__asm(push(i7), push((mstate.esp+8)), op(0x3c))
		state = 5
		mstate.esp -= 4;FSM___grow_type_table.start()
		return
	__asm(lbl("___find_arguments_state5"))
		mstate.esp += 12
	__asm(lbl("___find_arguments__XprivateX__BB76_204_F"))
		i7 =  (2)
		i10 =  ((__xasm<int>(push((mstate.ebp+-52)), op(0x37))))
		i9 =  (i8 << 2)
		i10 =  (i10 + i9)
		__asm(push(i7), push(i10), op(0x3c))
		i1 =  ((i8>i1) ? i8 : i1)
		i3 =  (i3 + 1)
		__asm(jump, target("___find_arguments__XprivateX__BB76_5_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_205_F"))
		__asm(push(i2<i10), iftrue, target("___find_arguments__XprivateX__BB76_207_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_206_F"))
		i3 =  ((mstate.ebp+-4))
		mstate.esp -= 12
		i8 =  ((mstate.ebp+-52))
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i8), push((mstate.esp+4)), op(0x3c))
		__asm(push(i3), push((mstate.esp+8)), op(0x3c))
		state = 6
		mstate.esp -= 4;FSM___grow_type_table.start()
		return
	__asm(lbl("___find_arguments_state6"))
		mstate.esp += 12
	__asm(lbl("___find_arguments__XprivateX__BB76_207_F"))
		i3 =  (2)
		i8 =  ((__xasm<int>(push((mstate.ebp+-52)), op(0x37))))
		i9 =  (i2 << 2)
		i8 =  (i8 + i9)
		__asm(push(i3), push(i8), op(0x3c))
		i1 =  ((i2>i1) ? i2 : i1)
		i2 =  (i2 + 1)
		i3 = i7
		__asm(jump, target("___find_arguments__XprivateX__BB76_5_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_208_F"))
		i3 =  (0)
		i7 = i9
	__asm(jump, target("___find_arguments__XprivateX__BB76_209_F"), lbl("___find_arguments__XprivateX__BB76_209_B"), label, lbl("___find_arguments__XprivateX__BB76_209_F")); 
		i9 =  ((__xasm<int>(push((i7+1)), op(0x35), op(0x51))))
		i3 =  (i3 * 10)
		i10 =  ((__xasm<int>(push((i7+2)), op(0x35), op(0x51))))
		i3 =  (i3 + i9)
		i3 =  (i3 + -48)
		i7 =  (i7 + 1)
		i9 =  (i10 + -48)
		__asm(push(uint(i9)>uint(9)), iftrue, target("___find_arguments__XprivateX__BB76_211_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_210_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_209_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_211_F"))
		i7 =  (i7 + 1)
	__asm(lbl("___find_arguments__XprivateX__BB76_212_F"))
		i9 =  ((__xasm<int>(push(i7), op(0x35))))
		i10 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		__asm(push(i9!=36), iftrue, target("___find_arguments__XprivateX__BB76_216_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_213_F"))
		__asm(push(i3<i10), iftrue, target("___find_arguments__XprivateX__BB76_215_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_214_F"))
		i8 =  ((mstate.ebp+-4))
		mstate.esp -= 12
		i9 =  ((mstate.ebp+-52))
		__asm(push(i3), push(mstate.esp), op(0x3c))
		__asm(push(i9), push((mstate.esp+4)), op(0x3c))
		__asm(push(i8), push((mstate.esp+8)), op(0x3c))
		state = 7
		mstate.esp -= 4;FSM___grow_type_table.start()
		return
	__asm(lbl("___find_arguments_state7"))
		mstate.esp += 12
	__asm(lbl("___find_arguments__XprivateX__BB76_215_F"))
		i8 =  (2)
		i9 =  ((__xasm<int>(push((mstate.ebp+-52)), op(0x37))))
		i10 =  (i3 << 2)
		i9 =  (i9 + i10)
		__asm(push(i8), push(i9), op(0x3c))
		i1 =  ((i3>i1) ? i3 : i1)
		i3 =  (i7 + 1)
		__asm(jump, target("___find_arguments__XprivateX__BB76_5_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_216_F"))
		__asm(push(i2<i10), iftrue, target("___find_arguments__XprivateX__BB76_218_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_217_F"))
		i3 =  ((mstate.ebp+-4))
		mstate.esp -= 12
		i7 =  ((mstate.ebp+-52))
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i7), push((mstate.esp+4)), op(0x3c))
		__asm(push(i3), push((mstate.esp+8)), op(0x3c))
		state = 8
		mstate.esp -= 4;FSM___grow_type_table.start()
		return
	__asm(lbl("___find_arguments_state8"))
		mstate.esp += 12
	__asm(lbl("___find_arguments__XprivateX__BB76_218_F"))
		i3 =  (2)
		i7 =  ((__xasm<int>(push((mstate.ebp+-52)), op(0x37))))
		i9 =  (i2 << 2)
		i7 =  (i7 + i9)
		__asm(push(i3), push(i7), op(0x3c))
		i1 =  ((i2>i1) ? i2 : i1)
		i2 =  (i2 + 1)
		i3 = i8
		__asm(jump, target("___find_arguments__XprivateX__BB76_5_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_219_B"), label)
		i7 =  (0)
		__asm(jump, target("___find_arguments__XprivateX__BB76_220_F"))
	__asm(jump, target("___find_arguments__XprivateX__BB76_220_F"), lbl("___find_arguments__XprivateX__BB76_220_B"), label, lbl("___find_arguments__XprivateX__BB76_220_F")); 
		i8 =  (i9 + i7)
		i8 =  ((__xasm<int>(push((i8+1)), op(0x35), op(0x51))))
		i7 =  (i7 + 1)
		i10 =  (i8 + -48)
		__asm(push(uint(i10)>uint(9)), iftrue, target("___find_arguments__XprivateX__BB76_119_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_221_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_220_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_222_F"))
		i7 =  (i7 << 24)
		i7 =  (i7 >> 24)
		i10 =  (i7 + -48)
		__asm(push(uint(i10)<uint(10)), iftrue, target("___find_arguments__XprivateX__BB76_219_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_223_F"))
		i3 = i8
		__asm(jump, target("___find_arguments__XprivateX__BB76_120_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_224_F"))
		i3 =  (i3 + i7)
		i7 =  (i11 & 255)
		__asm(push(i7==36), iftrue, target("___find_arguments__XprivateX__BB76_226_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_225_F"))
		i7 = i8
		__asm(jump, target("___find_arguments__XprivateX__BB76_120_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_226_F"))
		i2 = i12
		__asm(jump, target("___find_arguments__XprivateX__BB76_5_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_227_F"))
		i6 =  (i6 | 64)
		__asm(jump, target("___find_arguments__XprivateX__BB76_5_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_228_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_229_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_229_F"))
		i6 =  (i6 | 4096)
		__asm(jump, target("___find_arguments__XprivateX__BB76_5_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_230_F"))
		i6 =  (i6 | 16)
		__asm(jump, target("___find_arguments__XprivateX__BB76_5_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_231_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_13_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_232_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_24_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_233_F"))
		__asm(push(i2<i7), iftrue, target("___find_arguments__XprivateX__BB76_235_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_234_F"))
		i6 =  ((mstate.ebp+-4))
		mstate.esp -= 12
		i7 =  ((mstate.ebp+-52))
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i7), push((mstate.esp+4)), op(0x3c))
		__asm(push(i6), push((mstate.esp+8)), op(0x3c))
		state = 9
		mstate.esp -= 4;FSM___grow_type_table.start()
		return
	__asm(lbl("___find_arguments_state9"))
		mstate.esp += 12
	__asm(lbl("___find_arguments__XprivateX__BB76_235_F"))
		i6 =  (2)
		i7 =  ((__xasm<int>(push((mstate.ebp+-52)), op(0x37))))
		i8 =  (i2 << 2)
		i7 =  (i7 + i8)
		__asm(push(i6), push(i7), op(0x3c))
		i6 =  ((i2>i1) ? i2 : i1)
		i2 =  (i2 + 1)
		i1 = i6
		__asm(jump, target("___find_arguments__XprivateX__BB76_1_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_236_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_237_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_237_F"))
		i6 =  (i6 | 16)
	__asm(lbl("___find_arguments__XprivateX__BB76_238_F"))
		i7 =  (i6 & 4096)
		__asm(push(i7==0), iftrue, target("___find_arguments__XprivateX__BB76_242_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_239_F"))
		i6 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		__asm(push(i2<i6), iftrue, target("___find_arguments__XprivateX__BB76_241_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_240_F"))
		i6 =  ((mstate.ebp+-4))
		mstate.esp -= 12
		i7 =  ((mstate.ebp+-52))
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i7), push((mstate.esp+4)), op(0x3c))
		__asm(push(i6), push((mstate.esp+8)), op(0x3c))
		state = 10
		mstate.esp -= 4;FSM___grow_type_table.start()
		return
	__asm(lbl("___find_arguments_state10"))
		mstate.esp += 12
	__asm(lbl("___find_arguments__XprivateX__BB76_241_F"))
		i6 =  (15)
		i7 =  ((__xasm<int>(push((mstate.ebp+-52)), op(0x37))))
		i8 =  (i2 << 2)
		i7 =  (i7 + i8)
		__asm(push(i6), push(i7), op(0x3c))
		i6 =  ((i2>i1) ? i2 : i1)
		i2 =  (i2 + 1)
		i1 = i6
		__asm(jump, target("___find_arguments__XprivateX__BB76_1_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_242_F"))
		i7 =  (i6 & 1024)
		__asm(push(i7==0), iftrue, target("___find_arguments__XprivateX__BB76_246_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_243_F"))
		i6 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		i1 =  ((i2>i1) ? i2 : i1)
		__asm(push(i2<i6), iftrue, target("___find_arguments__XprivateX__BB76_245_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_244_F"))
		i6 =  ((mstate.ebp+-4))
		mstate.esp -= 12
		i7 =  ((mstate.ebp+-52))
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i7), push((mstate.esp+4)), op(0x3c))
		__asm(push(i6), push((mstate.esp+8)), op(0x3c))
		state = 11
		mstate.esp -= 4;FSM___grow_type_table.start()
		return
	__asm(lbl("___find_arguments_state11"))
		mstate.esp += 12
		i6 =  ((__xasm<int>(push((mstate.ebp+-52)), op(0x37))))
		i7 =  (i2 << 2)
		i8 =  (13)
		i6 =  (i6 + i7)
		__asm(push(i8), push(i6), op(0x3c))
		i6 =  (i2 + 1)
		i2 = i6
		__asm(jump, target("___find_arguments__XprivateX__BB76_1_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_245_F"))
		i6 =  (13)
		i7 =  ((__xasm<int>(push((mstate.ebp+-52)), op(0x37))))
		i8 =  (i2 << 2)
		i7 =  (i7 + i8)
		__asm(push(i6), push(i7), op(0x3c))
		i6 =  (i2 + 1)
		i2 = i6
		__asm(jump, target("___find_arguments__XprivateX__BB76_1_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_246_F"))
		i7 =  (i6 & 2048)
		__asm(push(i7==0), iftrue, target("___find_arguments__XprivateX__BB76_250_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_247_F"))
		i6 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		i1 =  ((i2>i1) ? i2 : i1)
		__asm(push(i2<i6), iftrue, target("___find_arguments__XprivateX__BB76_249_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_248_F"))
		i6 =  ((mstate.ebp+-4))
		mstate.esp -= 12
		i7 =  ((mstate.ebp+-52))
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i7), push((mstate.esp+4)), op(0x3c))
		__asm(push(i6), push((mstate.esp+8)), op(0x3c))
		state = 12
		mstate.esp -= 4;FSM___grow_type_table.start()
		return
	__asm(lbl("___find_arguments_state12"))
		mstate.esp += 12
		i6 =  ((__xasm<int>(push((mstate.ebp+-52)), op(0x37))))
		i7 =  (i2 << 2)
		i8 =  (11)
		i6 =  (i6 + i7)
		__asm(push(i8), push(i6), op(0x3c))
		i6 =  (i2 + 1)
		i2 = i6
		__asm(jump, target("___find_arguments__XprivateX__BB76_1_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_249_F"))
		i6 =  (11)
		i7 =  ((__xasm<int>(push((mstate.ebp+-52)), op(0x37))))
		i8 =  (i2 << 2)
		i7 =  (i7 + i8)
		__asm(push(i6), push(i7), op(0x3c))
		i6 =  (i2 + 1)
		i2 = i6
		__asm(jump, target("___find_arguments__XprivateX__BB76_1_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_250_F"))
		i7 =  (i6 & 32)
		__asm(push(i7==0), iftrue, target("___find_arguments__XprivateX__BB76_254_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_251_F"))
		i6 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		i1 =  ((i2>i1) ? i2 : i1)
		__asm(push(i2<i6), iftrue, target("___find_arguments__XprivateX__BB76_253_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_252_F"))
		i6 =  ((mstate.ebp+-4))
		mstate.esp -= 12
		i7 =  ((mstate.ebp+-52))
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i7), push((mstate.esp+4)), op(0x3c))
		__asm(push(i6), push((mstate.esp+8)), op(0x3c))
		state = 13
		mstate.esp -= 4;FSM___grow_type_table.start()
		return
	__asm(lbl("___find_arguments_state13"))
		mstate.esp += 12
		i6 =  ((__xasm<int>(push((mstate.ebp+-52)), op(0x37))))
		i7 =  (i2 << 2)
		i6 =  (i6 + i7)
		i7 =  (8)
		__asm(push(i7), push(i6), op(0x3c))
		i6 =  (i2 + 1)
		i2 = i6
		__asm(jump, target("___find_arguments__XprivateX__BB76_1_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_253_F"))
		i6 =  (8)
		i7 =  ((__xasm<int>(push((mstate.ebp+-52)), op(0x37))))
		i8 =  (i2 << 2)
		i7 =  (i7 + i8)
		__asm(push(i6), push(i7), op(0x3c))
		i6 =  (i2 + 1)
		i2 = i6
		__asm(jump, target("___find_arguments__XprivateX__BB76_1_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_254_F"))
		i7 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		i6 =  (i6 & 16)
		__asm(push(i6==0), iftrue, target("___find_arguments__XprivateX__BB76_258_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_255_F"))
		i6 =  ((i2>i1) ? i2 : i1)
		__asm(push(i2<i7), iftrue, target("___find_arguments__XprivateX__BB76_257_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_256_F"))
		i1 =  ((mstate.ebp+-4))
		mstate.esp -= 12
		i7 =  ((mstate.ebp+-52))
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i7), push((mstate.esp+4)), op(0x3c))
		__asm(push(i1), push((mstate.esp+8)), op(0x3c))
		state = 14
		mstate.esp -= 4;FSM___grow_type_table.start()
		return
	__asm(lbl("___find_arguments_state14"))
		mstate.esp += 12
		i1 =  ((__xasm<int>(push((mstate.ebp+-52)), op(0x37))))
		i7 =  (i2 << 2)
		i8 =  (5)
		i1 =  (i1 + i7)
		__asm(push(i8), push(i1), op(0x3c))
		i2 =  (i2 + 1)
		i1 = i6
		__asm(jump, target("___find_arguments__XprivateX__BB76_1_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_257_F"))
		i1 =  (5)
		i7 =  ((__xasm<int>(push((mstate.ebp+-52)), op(0x37))))
		i8 =  (i2 << 2)
		i7 =  (i7 + i8)
		__asm(push(i1), push(i7), op(0x3c))
		i2 =  (i2 + 1)
		i1 = i6
		__asm(jump, target("___find_arguments__XprivateX__BB76_1_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_258_F"))
		__asm(push(i2<i7), iftrue, target("___find_arguments__XprivateX__BB76_260_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_259_F"))
		i6 =  ((mstate.ebp+-4))
		mstate.esp -= 12
		i7 =  ((mstate.ebp+-52))
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i7), push((mstate.esp+4)), op(0x3c))
		__asm(push(i6), push((mstate.esp+8)), op(0x3c))
		state = 15
		mstate.esp -= 4;FSM___grow_type_table.start()
		return
	__asm(lbl("___find_arguments_state15"))
		mstate.esp += 12
	__asm(lbl("___find_arguments__XprivateX__BB76_260_F"))
		i6 =  (2)
		i7 =  ((__xasm<int>(push((mstate.ebp+-52)), op(0x37))))
		i8 =  (i2 << 2)
		i7 =  (i7 + i8)
		__asm(push(i6), push(i7), op(0x3c))
		i6 =  ((i2>i1) ? i2 : i1)
		i2 =  (i2 + 1)
		i1 = i6
		__asm(jump, target("___find_arguments__XprivateX__BB76_1_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_261_F"))
		__asm(push(i2<i7), iftrue, target("___find_arguments__XprivateX__BB76_263_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_262_F"))
		i6 =  ((mstate.ebp+-4))
		mstate.esp -= 12
		i7 =  ((mstate.ebp+-52))
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i7), push((mstate.esp+4)), op(0x3c))
		__asm(push(i6), push((mstate.esp+8)), op(0x3c))
		state = 16
		mstate.esp -= 4;FSM___grow_type_table.start()
		return
	__asm(lbl("___find_arguments_state16"))
		mstate.esp += 12
	__asm(lbl("___find_arguments__XprivateX__BB76_263_F"))
		i6 =  (21)
		i7 =  ((__xasm<int>(push((mstate.ebp+-52)), op(0x37))))
		i8 =  (i2 << 2)
		i7 =  (i7 + i8)
		__asm(push(i6), push(i7), op(0x3c))
		i6 =  ((i2>i1) ? i2 : i1)
		i2 =  (i2 + 1)
		i1 = i6
		__asm(jump, target("___find_arguments__XprivateX__BB76_1_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_264_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_265_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_265_F"))
		i7 =  (i6 & 4096)
		__asm(push(i7==0), iftrue, target("___find_arguments__XprivateX__BB76_269_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_266_F"))
		i6 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		__asm(push(i2<i6), iftrue, target("___find_arguments__XprivateX__BB76_268_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_267_F"))
		i6 =  ((mstate.ebp+-4))
		mstate.esp -= 12
		i7 =  ((mstate.ebp+-52))
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i7), push((mstate.esp+4)), op(0x3c))
		__asm(push(i6), push((mstate.esp+8)), op(0x3c))
		state = 17
		mstate.esp -= 4;FSM___grow_type_table.start()
		return
	__asm(lbl("___find_arguments_state17"))
		mstate.esp += 12
	__asm(lbl("___find_arguments__XprivateX__BB76_268_F"))
		i6 =  (17)
		i7 =  ((__xasm<int>(push((mstate.ebp+-52)), op(0x37))))
		i8 =  (i2 << 2)
		i7 =  (i7 + i8)
		__asm(push(i6), push(i7), op(0x3c))
		i6 =  ((i2>i1) ? i2 : i1)
		i2 =  (i2 + 1)
		i1 = i6
		__asm(jump, target("___find_arguments__XprivateX__BB76_1_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_269_F"))
		i7 =  (i6 & 2048)
		__asm(push(i7==0), iftrue, target("___find_arguments__XprivateX__BB76_273_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_270_F"))
		i6 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		__asm(push(i2<i6), iftrue, target("___find_arguments__XprivateX__BB76_272_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_271_F"))
		i6 =  ((mstate.ebp+-4))
		mstate.esp -= 12
		i7 =  ((mstate.ebp+-52))
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i7), push((mstate.esp+4)), op(0x3c))
		__asm(push(i6), push((mstate.esp+8)), op(0x3c))
		state = 18
		mstate.esp -= 4;FSM___grow_type_table.start()
		return
	__asm(lbl("___find_arguments_state18"))
		mstate.esp += 12
	__asm(lbl("___find_arguments__XprivateX__BB76_272_F"))
		i6 =  (12)
		i7 =  ((__xasm<int>(push((mstate.ebp+-52)), op(0x37))))
		i8 =  (i2 << 2)
		i7 =  (i7 + i8)
		__asm(push(i6), push(i7), op(0x3c))
		i6 =  ((i2>i1) ? i2 : i1)
		i2 =  (i2 + 1)
		i1 = i6
		__asm(jump, target("___find_arguments__XprivateX__BB76_1_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_273_F"))
		i7 =  (i6 & 1024)
		__asm(push(i7==0), iftrue, target("___find_arguments__XprivateX__BB76_277_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_274_F"))
		i6 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		__asm(push(i2<i6), iftrue, target("___find_arguments__XprivateX__BB76_276_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_275_F"))
		i6 =  ((mstate.ebp+-4))
		mstate.esp -= 12
		i7 =  ((mstate.ebp+-52))
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i7), push((mstate.esp+4)), op(0x3c))
		__asm(push(i6), push((mstate.esp+8)), op(0x3c))
		state = 19
		mstate.esp -= 4;FSM___grow_type_table.start()
		return
	__asm(lbl("___find_arguments_state19"))
		mstate.esp += 12
	__asm(lbl("___find_arguments__XprivateX__BB76_276_F"))
		i6 =  (14)
		i7 =  ((__xasm<int>(push((mstate.ebp+-52)), op(0x37))))
		i8 =  (i2 << 2)
		i7 =  (i7 + i8)
		__asm(push(i6), push(i7), op(0x3c))
		i6 =  ((i2>i1) ? i2 : i1)
		i2 =  (i2 + 1)
		i1 = i6
		__asm(jump, target("___find_arguments__XprivateX__BB76_1_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_277_F"))
		i7 =  (i6 & 32)
		__asm(push(i7==0), iftrue, target("___find_arguments__XprivateX__BB76_281_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_278_F"))
		i6 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		__asm(push(i2<i6), iftrue, target("___find_arguments__XprivateX__BB76_280_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_279_F"))
		i6 =  ((mstate.ebp+-4))
		mstate.esp -= 12
		i7 =  ((mstate.ebp+-52))
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i7), push((mstate.esp+4)), op(0x3c))
		__asm(push(i6), push((mstate.esp+8)), op(0x3c))
		state = 20
		mstate.esp -= 4;FSM___grow_type_table.start()
		return
	__asm(lbl("___find_arguments_state20"))
		mstate.esp += 12
	__asm(lbl("___find_arguments__XprivateX__BB76_280_F"))
		i6 =  (10)
		i7 =  ((__xasm<int>(push((mstate.ebp+-52)), op(0x37))))
		i8 =  (i2 << 2)
		i7 =  (i7 + i8)
		__asm(push(i6), push(i7), op(0x3c))
		i6 =  ((i2>i1) ? i2 : i1)
		i2 =  (i2 + 1)
		i1 = i6
		__asm(jump, target("___find_arguments__XprivateX__BB76_1_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_281_F"))
		i7 =  (i6 & 16)
		__asm(push(i7==0), iftrue, target("___find_arguments__XprivateX__BB76_285_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_282_F"))
		i6 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		__asm(push(i2<i6), iftrue, target("___find_arguments__XprivateX__BB76_284_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_283_F"))
		i6 =  ((mstate.ebp+-4))
		mstate.esp -= 12
		i7 =  ((mstate.ebp+-52))
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i7), push((mstate.esp+4)), op(0x3c))
		__asm(push(i6), push((mstate.esp+8)), op(0x3c))
		state = 21
		mstate.esp -= 4;FSM___grow_type_table.start()
		return
	__asm(lbl("___find_arguments_state21"))
		mstate.esp += 12
	__asm(lbl("___find_arguments__XprivateX__BB76_284_F"))
		i6 =  (7)
		i7 =  ((__xasm<int>(push((mstate.ebp+-52)), op(0x37))))
		i8 =  (i2 << 2)
		i7 =  (i7 + i8)
		__asm(push(i6), push(i7), op(0x3c))
		i6 =  ((i2>i1) ? i2 : i1)
		i2 =  (i2 + 1)
		i1 = i6
		__asm(jump, target("___find_arguments__XprivateX__BB76_1_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_285_F"))
		i7 =  (i6 & 64)
		__asm(push(i7==0), iftrue, target("___find_arguments__XprivateX__BB76_289_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_286_F"))
		i6 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		__asm(push(i2<i6), iftrue, target("___find_arguments__XprivateX__BB76_288_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_287_F"))
		i6 =  ((mstate.ebp+-4))
		mstate.esp -= 12
		i7 =  ((mstate.ebp+-52))
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i7), push((mstate.esp+4)), op(0x3c))
		__asm(push(i6), push((mstate.esp+8)), op(0x3c))
		state = 22
		mstate.esp -= 4;FSM___grow_type_table.start()
		return
	__asm(lbl("___find_arguments_state22"))
		mstate.esp += 12
	__asm(lbl("___find_arguments__XprivateX__BB76_288_F"))
		i6 =  (1)
		i7 =  ((__xasm<int>(push((mstate.ebp+-52)), op(0x37))))
		i8 =  (i2 << 2)
		i7 =  (i7 + i8)
		__asm(push(i6), push(i7), op(0x3c))
		i6 =  ((i2>i1) ? i2 : i1)
		i2 =  (i2 + 1)
		i1 = i6
		__asm(jump, target("___find_arguments__XprivateX__BB76_1_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_289_F"))
		i7 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		i6 =  (i6 & 8192)
		__asm(push(i6==0), iftrue, target("___find_arguments__XprivateX__BB76_293_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_290_F"))
		__asm(push(i2<i7), iftrue, target("___find_arguments__XprivateX__BB76_292_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_291_F"))
		i6 =  ((mstate.ebp+-4))
		mstate.esp -= 12
		i7 =  ((mstate.ebp+-52))
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i7), push((mstate.esp+4)), op(0x3c))
		__asm(push(i6), push((mstate.esp+8)), op(0x3c))
		state = 23
		mstate.esp -= 4;FSM___grow_type_table.start()
		return
	__asm(lbl("___find_arguments_state23"))
		mstate.esp += 12
	__asm(lbl("___find_arguments__XprivateX__BB76_292_F"))
		i6 =  (20)
		i7 =  ((__xasm<int>(push((mstate.ebp+-52)), op(0x37))))
		i8 =  (i2 << 2)
		i7 =  (i7 + i8)
		__asm(push(i6), push(i7), op(0x3c))
		i6 =  ((i2>i1) ? i2 : i1)
		i2 =  (i2 + 1)
		i1 = i6
		__asm(jump, target("___find_arguments__XprivateX__BB76_1_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_293_F"))
		__asm(push(i2<i7), iftrue, target("___find_arguments__XprivateX__BB76_295_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_294_F"))
		i6 =  ((mstate.ebp+-4))
		mstate.esp -= 12
		i7 =  ((mstate.ebp+-52))
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i7), push((mstate.esp+4)), op(0x3c))
		__asm(push(i6), push((mstate.esp+8)), op(0x3c))
		state = 24
		mstate.esp -= 4;FSM___grow_type_table.start()
		return
	__asm(lbl("___find_arguments_state24"))
		mstate.esp += 12
	__asm(lbl("___find_arguments__XprivateX__BB76_295_F"))
		i6 =  (4)
		i7 =  ((__xasm<int>(push((mstate.ebp+-52)), op(0x37))))
		i8 =  (i2 << 2)
		i7 =  (i7 + i8)
		__asm(push(i6), push(i7), op(0x3c))
		i6 =  ((i2>i1) ? i2 : i1)
		i2 =  (i2 + 1)
		i1 = i6
		__asm(jump, target("___find_arguments__XprivateX__BB76_1_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_296_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_297_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_297_F"))
		i6 =  (i6 | 16)
	__asm(lbl("___find_arguments__XprivateX__BB76_298_F"))
		i7 =  (i6 & 4096)
		__asm(push(i7==0), iftrue, target("___find_arguments__XprivateX__BB76_302_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_299_F"))
		i6 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		__asm(push(i2<i6), iftrue, target("___find_arguments__XprivateX__BB76_301_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_300_F"))
		i6 =  ((mstate.ebp+-4))
		mstate.esp -= 12
		i7 =  ((mstate.ebp+-52))
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i7), push((mstate.esp+4)), op(0x3c))
		__asm(push(i6), push((mstate.esp+8)), op(0x3c))
		state = 25
		mstate.esp -= 4;FSM___grow_type_table.start()
		return
	__asm(lbl("___find_arguments_state25"))
		mstate.esp += 12
	__asm(lbl("___find_arguments__XprivateX__BB76_301_F"))
		i6 =  (16)
		i7 =  ((__xasm<int>(push((mstate.ebp+-52)), op(0x37))))
		i8 =  (i2 << 2)
		i7 =  (i7 + i8)
		__asm(push(i6), push(i7), op(0x3c))
		i6 =  ((i2>i1) ? i2 : i1)
		i2 =  (i2 + 1)
		i1 = i6
		__asm(jump, target("___find_arguments__XprivateX__BB76_1_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_302_F"))
		i7 =  (i6 & 1024)
		__asm(push(i7==0), iftrue, target("___find_arguments__XprivateX__BB76_306_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_303_F"))
		i6 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		i1 =  ((i2>i1) ? i2 : i1)
		__asm(push(i2<i6), iftrue, target("___find_arguments__XprivateX__BB76_305_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_304_F"))
		i6 =  ((mstate.ebp+-4))
		mstate.esp -= 12
		i7 =  ((mstate.ebp+-52))
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i7), push((mstate.esp+4)), op(0x3c))
		__asm(push(i6), push((mstate.esp+8)), op(0x3c))
		state = 26
		mstate.esp -= 4;FSM___grow_type_table.start()
		return
	__asm(lbl("___find_arguments_state26"))
		mstate.esp += 12
		i6 =  ((__xasm<int>(push((mstate.ebp+-52)), op(0x37))))
		i7 =  (i2 << 2)
		i8 =  (13)
		i6 =  (i6 + i7)
		__asm(push(i8), push(i6), op(0x3c))
		i6 =  (i2 + 1)
		i2 = i6
		__asm(jump, target("___find_arguments__XprivateX__BB76_1_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_305_F"))
		i6 =  (13)
		i7 =  ((__xasm<int>(push((mstate.ebp+-52)), op(0x37))))
		i8 =  (i2 << 2)
		i7 =  (i7 + i8)
		__asm(push(i6), push(i7), op(0x3c))
		i6 =  (i2 + 1)
		i2 = i6
		__asm(jump, target("___find_arguments__XprivateX__BB76_1_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_306_F"))
		i7 =  (i6 & 2048)
		__asm(push(i7==0), iftrue, target("___find_arguments__XprivateX__BB76_310_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_307_F"))
		i6 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		i1 =  ((i2>i1) ? i2 : i1)
		__asm(push(i2<i6), iftrue, target("___find_arguments__XprivateX__BB76_309_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_308_F"))
		i6 =  ((mstate.ebp+-4))
		mstate.esp -= 12
		i7 =  ((mstate.ebp+-52))
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i7), push((mstate.esp+4)), op(0x3c))
		__asm(push(i6), push((mstate.esp+8)), op(0x3c))
		state = 27
		mstate.esp -= 4;FSM___grow_type_table.start()
		return
	__asm(lbl("___find_arguments_state27"))
		mstate.esp += 12
		i6 =  ((__xasm<int>(push((mstate.ebp+-52)), op(0x37))))
		i7 =  (i2 << 2)
		i8 =  (11)
		i6 =  (i6 + i7)
		__asm(push(i8), push(i6), op(0x3c))
		i6 =  (i2 + 1)
		i2 = i6
		__asm(jump, target("___find_arguments__XprivateX__BB76_1_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_309_F"))
		i6 =  (11)
		i7 =  ((__xasm<int>(push((mstate.ebp+-52)), op(0x37))))
		i8 =  (i2 << 2)
		i7 =  (i7 + i8)
		__asm(push(i6), push(i7), op(0x3c))
		i6 =  (i2 + 1)
		i2 = i6
		__asm(jump, target("___find_arguments__XprivateX__BB76_1_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_310_F"))
		i7 =  (i6 & 32)
		__asm(push(i7==0), iftrue, target("___find_arguments__XprivateX__BB76_314_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_311_F"))
		i6 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		i1 =  ((i2>i1) ? i2 : i1)
		__asm(push(i2<i6), iftrue, target("___find_arguments__XprivateX__BB76_313_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_312_F"))
		i6 =  ((mstate.ebp+-4))
		mstate.esp -= 12
		i7 =  ((mstate.ebp+-52))
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i7), push((mstate.esp+4)), op(0x3c))
		__asm(push(i6), push((mstate.esp+8)), op(0x3c))
		state = 28
		mstate.esp -= 4;FSM___grow_type_table.start()
		return
	__asm(lbl("___find_arguments_state28"))
		mstate.esp += 12
		i6 =  ((__xasm<int>(push((mstate.ebp+-52)), op(0x37))))
		i7 =  (i2 << 2)
		i8 =  (9)
		i6 =  (i6 + i7)
		__asm(push(i8), push(i6), op(0x3c))
		i6 =  (i2 + 1)
		i2 = i6
		__asm(jump, target("___find_arguments__XprivateX__BB76_1_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_313_F"))
		i6 =  (9)
		i7 =  ((__xasm<int>(push((mstate.ebp+-52)), op(0x37))))
		i8 =  (i2 << 2)
		i7 =  (i7 + i8)
		__asm(push(i6), push(i7), op(0x3c))
		i6 =  (i2 + 1)
		i2 = i6
		__asm(jump, target("___find_arguments__XprivateX__BB76_1_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_314_F"))
		i7 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		i6 =  (i6 & 16)
		__asm(push(i6==0), iftrue, target("___find_arguments__XprivateX__BB76_318_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_315_F"))
		i6 =  ((i2>i1) ? i2 : i1)
		__asm(push(i2<i7), iftrue, target("___find_arguments__XprivateX__BB76_317_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_316_F"))
		i1 =  ((mstate.ebp+-4))
		mstate.esp -= 12
		i7 =  ((mstate.ebp+-52))
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i7), push((mstate.esp+4)), op(0x3c))
		__asm(push(i1), push((mstate.esp+8)), op(0x3c))
		state = 29
		mstate.esp -= 4;FSM___grow_type_table.start()
		return
	__asm(lbl("___find_arguments_state29"))
		mstate.esp += 12
		i1 =  ((__xasm<int>(push((mstate.ebp+-52)), op(0x37))))
		i7 =  (i2 << 2)
		i8 =  (6)
		i1 =  (i1 + i7)
		__asm(push(i8), push(i1), op(0x3c))
		i2 =  (i2 + 1)
		i1 = i6
		__asm(jump, target("___find_arguments__XprivateX__BB76_1_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_317_F"))
		i1 =  (6)
		i7 =  ((__xasm<int>(push((mstate.ebp+-52)), op(0x37))))
		i8 =  (i2 << 2)
		i7 =  (i7 + i8)
		__asm(push(i1), push(i7), op(0x3c))
		i2 =  (i2 + 1)
		i1 = i6
		__asm(jump, target("___find_arguments__XprivateX__BB76_1_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_318_F"))
		__asm(push(i2<i7), iftrue, target("___find_arguments__XprivateX__BB76_320_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_319_F"))
		i6 =  ((mstate.ebp+-4))
		mstate.esp -= 12
		i7 =  ((mstate.ebp+-52))
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i7), push((mstate.esp+4)), op(0x3c))
		__asm(push(i6), push((mstate.esp+8)), op(0x3c))
		state = 30
		mstate.esp -= 4;FSM___grow_type_table.start()
		return
	__asm(lbl("___find_arguments_state30"))
		mstate.esp += 12
	__asm(lbl("___find_arguments__XprivateX__BB76_320_F"))
		i6 =  (3)
		i7 =  ((__xasm<int>(push((mstate.ebp+-52)), op(0x37))))
		i8 =  (i2 << 2)
		i7 =  (i7 + i8)
		__asm(push(i6), push(i7), op(0x3c))
		i6 =  ((i2>i1) ? i2 : i1)
		i2 =  (i2 + 1)
		i1 = i6
		__asm(jump, target("___find_arguments__XprivateX__BB76_1_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_321_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_322_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_322_F"))
		i6 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		__asm(push(i2<i6), iftrue, target("___find_arguments__XprivateX__BB76_324_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_323_F"))
		i6 =  ((mstate.ebp+-4))
		mstate.esp -= 12
		i7 =  ((mstate.ebp+-52))
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i7), push((mstate.esp+4)), op(0x3c))
		__asm(push(i6), push((mstate.esp+8)), op(0x3c))
		state = 31
		mstate.esp -= 4;FSM___grow_type_table.start()
		return
	__asm(lbl("___find_arguments_state31"))
		mstate.esp += 12
	__asm(lbl("___find_arguments__XprivateX__BB76_324_F"))
		i6 =  (18)
		i7 =  ((__xasm<int>(push((mstate.ebp+-52)), op(0x37))))
		i8 =  (i2 << 2)
		i7 =  (i7 + i8)
		__asm(push(i6), push(i7), op(0x3c))
		i6 =  ((i2>i1) ? i2 : i1)
		i2 =  (i2 + 1)
		i1 = i6
		__asm(jump, target("___find_arguments__XprivateX__BB76_1_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_325_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_326_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_326_F"))
		i6 =  (i6 | 16)
	__asm(lbl("___find_arguments__XprivateX__BB76_327_F"))
		i7 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		i6 =  (i6 & 16)
		__asm(push(i6==0), iftrue, target("___find_arguments__XprivateX__BB76_331_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_328_F"))
		__asm(push(i2<i7), iftrue, target("___find_arguments__XprivateX__BB76_330_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_329_F"))
		i6 =  ((mstate.ebp+-4))
		mstate.esp -= 12
		i7 =  ((mstate.ebp+-52))
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i7), push((mstate.esp+4)), op(0x3c))
		__asm(push(i6), push((mstate.esp+8)), op(0x3c))
		state = 32
		mstate.esp -= 4;FSM___grow_type_table.start()
		return
	__asm(lbl("___find_arguments_state32"))
		mstate.esp += 12
	__asm(lbl("___find_arguments__XprivateX__BB76_330_F"))
		i6 =  (24)
		i7 =  ((__xasm<int>(push((mstate.ebp+-52)), op(0x37))))
		i8 =  (i2 << 2)
		i7 =  (i7 + i8)
		__asm(push(i6), push(i7), op(0x3c))
		i1 =  ((i2>i1) ? i2 : i1)
		i6 =  (i2 + 1)
		i2 = i6
		__asm(jump, target("___find_arguments__XprivateX__BB76_1_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_331_F"))
		__asm(push(i2<i7), iftrue, target("___find_arguments__XprivateX__BB76_333_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_332_F"))
		i6 =  ((mstate.ebp+-4))
		mstate.esp -= 12
		i7 =  ((mstate.ebp+-52))
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i7), push((mstate.esp+4)), op(0x3c))
		__asm(push(i6), push((mstate.esp+8)), op(0x3c))
		state = 33
		mstate.esp -= 4;FSM___grow_type_table.start()
		return
	__asm(lbl("___find_arguments_state33"))
		mstate.esp += 12
	__asm(lbl("___find_arguments__XprivateX__BB76_333_F"))
		i6 =  (19)
		i7 =  ((__xasm<int>(push((mstate.ebp+-52)), op(0x37))))
		i8 =  (i2 << 2)
		i7 =  (i7 + i8)
		__asm(push(i6), push(i7), op(0x3c))
		i1 =  ((i2>i1) ? i2 : i1)
		i6 =  (i2 + 1)
		i2 = i6
		__asm(jump, target("___find_arguments__XprivateX__BB76_1_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_334_F"))
		i7 =  (i6 & 1024)
		__asm(push(i7==0), iftrue, target("___find_arguments__XprivateX__BB76_338_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_335_F"))
		i6 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		i1 =  ((i2>i1) ? i2 : i1)
		__asm(push(i2<i6), iftrue, target("___find_arguments__XprivateX__BB76_337_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_336_F"))
		i6 =  ((mstate.ebp+-4))
		mstate.esp -= 12
		i7 =  ((mstate.ebp+-52))
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i7), push((mstate.esp+4)), op(0x3c))
		__asm(push(i6), push((mstate.esp+8)), op(0x3c))
		state = 34
		mstate.esp -= 4;FSM___grow_type_table.start()
		return
	__asm(lbl("___find_arguments_state34"))
		mstate.esp += 12
		i6 =  ((__xasm<int>(push((mstate.ebp+-52)), op(0x37))))
		i7 =  (i2 << 2)
		i8 =  (13)
		i6 =  (i6 + i7)
		__asm(push(i8), push(i6), op(0x3c))
		i2 =  (i2 + 1)
		__asm(jump, target("___find_arguments__XprivateX__BB76_1_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_337_F"))
		i6 =  (13)
		i7 =  ((__xasm<int>(push((mstate.ebp+-52)), op(0x37))))
		i8 =  (i2 << 2)
		i7 =  (i7 + i8)
		__asm(push(i6), push(i7), op(0x3c))
		i2 =  (i2 + 1)
		__asm(jump, target("___find_arguments__XprivateX__BB76_1_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_338_F"))
		i7 =  (i6 & 2048)
		__asm(push(i7==0), iftrue, target("___find_arguments__XprivateX__BB76_342_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_339_F"))
		i6 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		i1 =  ((i2>i1) ? i2 : i1)
		__asm(push(i2<i6), iftrue, target("___find_arguments__XprivateX__BB76_341_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_340_F"))
		i6 =  ((mstate.ebp+-4))
		mstate.esp -= 12
		i7 =  ((mstate.ebp+-52))
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i7), push((mstate.esp+4)), op(0x3c))
		__asm(push(i6), push((mstate.esp+8)), op(0x3c))
		state = 35
		mstate.esp -= 4;FSM___grow_type_table.start()
		return
	__asm(lbl("___find_arguments_state35"))
		mstate.esp += 12
		i6 =  ((__xasm<int>(push((mstate.ebp+-52)), op(0x37))))
		i7 =  (i2 << 2)
		i8 =  (11)
		i6 =  (i6 + i7)
		__asm(push(i8), push(i6), op(0x3c))
		i2 =  (i2 + 1)
		__asm(jump, target("___find_arguments__XprivateX__BB76_1_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_341_F"))
		i6 =  (11)
		i7 =  ((__xasm<int>(push((mstate.ebp+-52)), op(0x37))))
		i8 =  (i2 << 2)
		i7 =  (i7 + i8)
		__asm(push(i6), push(i7), op(0x3c))
		i2 =  (i2 + 1)
		__asm(jump, target("___find_arguments__XprivateX__BB76_1_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_342_F"))
		i7 =  (i6 & 32)
		__asm(push(i7==0), iftrue, target("___find_arguments__XprivateX__BB76_346_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_343_F"))
		i6 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		i1 =  ((i2>i1) ? i2 : i1)
		__asm(push(i2<i6), iftrue, target("___find_arguments__XprivateX__BB76_345_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_344_F"))
		i6 =  ((mstate.ebp+-4))
		mstate.esp -= 12
		i7 =  ((mstate.ebp+-52))
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i7), push((mstate.esp+4)), op(0x3c))
		__asm(push(i6), push((mstate.esp+8)), op(0x3c))
		state = 36
		mstate.esp -= 4;FSM___grow_type_table.start()
		return
	__asm(lbl("___find_arguments_state36"))
		mstate.esp += 12
		i6 =  ((__xasm<int>(push((mstate.ebp+-52)), op(0x37))))
		i7 =  (i2 << 2)
		i8 =  (9)
		i6 =  (i6 + i7)
		__asm(push(i8), push(i6), op(0x3c))
		i2 =  (i2 + 1)
		__asm(jump, target("___find_arguments__XprivateX__BB76_1_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_345_F"))
		i6 =  (9)
		i7 =  ((__xasm<int>(push((mstate.ebp+-52)), op(0x37))))
		i8 =  (i2 << 2)
		i7 =  (i7 + i8)
		__asm(push(i6), push(i7), op(0x3c))
		i2 =  (i2 + 1)
		__asm(jump, target("___find_arguments__XprivateX__BB76_1_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_346_F"))
		i7 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		i6 =  (i6 & 16)
		__asm(push(i6==0), iftrue, target("___find_arguments__XprivateX__BB76_350_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_347_F"))
		i1 =  ((i2>i1) ? i2 : i1)
		__asm(push(i2<i7), iftrue, target("___find_arguments__XprivateX__BB76_349_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_348_F"))
		i6 =  ((mstate.ebp+-4))
		mstate.esp -= 12
		i7 =  ((mstate.ebp+-52))
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i7), push((mstate.esp+4)), op(0x3c))
		__asm(push(i6), push((mstate.esp+8)), op(0x3c))
		state = 37
		mstate.esp -= 4;FSM___grow_type_table.start()
		return
	__asm(lbl("___find_arguments_state37"))
		mstate.esp += 12
		i6 =  ((__xasm<int>(push((mstate.ebp+-52)), op(0x37))))
		i7 =  (i2 << 2)
		i8 =  (6)
		i6 =  (i6 + i7)
		__asm(push(i8), push(i6), op(0x3c))
		i2 =  (i2 + 1)
		__asm(jump, target("___find_arguments__XprivateX__BB76_1_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_349_F"))
		i6 =  (6)
		i7 =  ((__xasm<int>(push((mstate.ebp+-52)), op(0x37))))
		i8 =  (i2 << 2)
		i7 =  (i7 + i8)
		__asm(push(i6), push(i7), op(0x3c))
		i2 =  (i2 + 1)
		__asm(jump, target("___find_arguments__XprivateX__BB76_1_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_350_F"))
		__asm(push(i2<i7), iftrue, target("___find_arguments__XprivateX__BB76_352_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_351_F"))
		i6 =  ((mstate.ebp+-4))
		mstate.esp -= 12
		i7 =  ((mstate.ebp+-52))
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i7), push((mstate.esp+4)), op(0x3c))
		__asm(push(i6), push((mstate.esp+8)), op(0x3c))
		state = 38
		mstate.esp -= 4;FSM___grow_type_table.start()
		return
	__asm(lbl("___find_arguments_state38"))
		mstate.esp += 12
	__asm(lbl("___find_arguments__XprivateX__BB76_352_F"))
		i6 =  (3)
		i7 =  ((__xasm<int>(push((mstate.ebp+-52)), op(0x37))))
		i8 =  (i2 << 2)
		i7 =  (i7 + i8)
		__asm(push(i6), push(i7), op(0x3c))
		i1 =  ((i2>i1) ? i2 : i1)
		i2 =  (i2 + 1)
		__asm(jump, target("___find_arguments__XprivateX__BB76_1_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_353_F"))
		i4 = i2
		i1 = i2
		__asm(jump, target("___find_arguments__XprivateX__BB76_411_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_354_F"))
		i2 =  (0)
		i3 =  ((__xasm<int>(push(i5), op(0x37))))
		__asm(push(i2), push(i3), op(0x3c))
		i2 =  (1)
		__asm(jump, target("___find_arguments__XprivateX__BB76_408_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_355_F"))
		__asm(push(i2==3), iftrue, target("___find_arguments__XprivateX__BB76_392_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_356_F"))
		__asm(push(i2==4), iftrue, target("___find_arguments__XprivateX__BB76_393_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_357_F"))
		__asm(push(i2==5), iftrue, target("___find_arguments__XprivateX__BB76_358_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_389_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_358_F"))
		i2 =  ((__xasm<int>(push(i5), op(0x37))))
		i6 =  ((__xasm<int>(push(i4), op(0x37))))
		i7 =  (i3 << 3)
		i2 =  (i2 + i7)
		__asm(push(i6), push(i2), op(0x3c))
		i2 =  (i3 + 1)
		i4 =  (i4 + 4)
		__asm(jump, target("___find_arguments__XprivateX__BB76_408_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_359_F"))
		__asm(push(i2>8), iftrue, target("___find_arguments__XprivateX__BB76_364_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_360_F"))
		__asm(push(i2==6), iftrue, target("___find_arguments__XprivateX__BB76_394_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_361_F"))
		__asm(push(i2==7), iftrue, target("___find_arguments__XprivateX__BB76_395_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_362_F"))
		__asm(push(i2==8), iftrue, target("___find_arguments__XprivateX__BB76_363_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_389_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_363_F"))
		i2 =  ((__xasm<int>(push(i5), op(0x37))))
		i6 =  (i3 << 3)
		i7 =  ((__xasm<int>(push(i4), op(0x37))))
		i8 =  ((__xasm<int>(push((i4+4)), op(0x37))))
		i2 =  (i2 + i6)
		__asm(push(i7), push(i2), op(0x3c))
		__asm(push(i8), push((i2+4)), op(0x3c))
		i2 =  (i3 + 1)
		i4 =  (i4 + 8)
		__asm(jump, target("___find_arguments__XprivateX__BB76_408_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_364_F"))
		__asm(push(i2==9), iftrue, target("___find_arguments__XprivateX__BB76_396_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_365_F"))
		__asm(push(i2==10), iftrue, target("___find_arguments__XprivateX__BB76_397_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_366_F"))
		__asm(push(i2==11), iftrue, target("___find_arguments__XprivateX__BB76_367_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_389_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_367_F"))
		i2 =  ((__xasm<int>(push(i5), op(0x37))))
		i6 =  ((__xasm<int>(push(i4), op(0x37))))
		i7 =  (i3 << 3)
		i2 =  (i2 + i7)
		__asm(push(i6), push(i2), op(0x3c))
		i2 =  (i3 + 1)
		i4 =  (i4 + 4)
		__asm(jump, target("___find_arguments__XprivateX__BB76_408_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_368_F"))
		__asm(push(i2>17), iftrue, target("___find_arguments__XprivateX__BB76_378_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_369_F"))
		__asm(push(i2>14), iftrue, target("___find_arguments__XprivateX__BB76_374_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_370_F"))
		__asm(push(i2==12), iftrue, target("___find_arguments__XprivateX__BB76_398_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_371_F"))
		__asm(push(i2==13), iftrue, target("___find_arguments__XprivateX__BB76_399_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_372_F"))
		__asm(push(i2==14), iftrue, target("___find_arguments__XprivateX__BB76_373_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_389_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_373_F"))
		i2 =  ((__xasm<int>(push(i5), op(0x37))))
		i6 =  ((__xasm<int>(push(i4), op(0x37))))
		i7 =  (i3 << 3)
		i2 =  (i2 + i7)
		__asm(push(i6), push(i2), op(0x3c))
		i2 =  (i3 + 1)
		i4 =  (i4 + 4)
		__asm(jump, target("___find_arguments__XprivateX__BB76_408_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_374_F"))
		__asm(push(i2==15), iftrue, target("___find_arguments__XprivateX__BB76_400_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_375_F"))
		__asm(push(i2==16), iftrue, target("___find_arguments__XprivateX__BB76_401_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_376_F"))
		__asm(push(i2==17), iftrue, target("___find_arguments__XprivateX__BB76_377_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_389_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_377_F"))
		i2 =  ((__xasm<int>(push(i5), op(0x37))))
		i6 =  ((__xasm<int>(push(i4), op(0x37))))
		i7 =  (i3 << 3)
		i2 =  (i2 + i7)
		__asm(push(i6), push(i2), op(0x3c))
		i2 =  (i3 + 1)
		i4 =  (i4 + 4)
		__asm(jump, target("___find_arguments__XprivateX__BB76_408_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_378_F"))
		__asm(push(i2>20), iftrue, target("___find_arguments__XprivateX__BB76_383_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_379_F"))
		__asm(push(i2==18), iftrue, target("___find_arguments__XprivateX__BB76_404_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_380_F"))
		__asm(push(i2==19), iftrue, target("___find_arguments__XprivateX__BB76_403_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_381_F"))
		__asm(push(i2==20), iftrue, target("___find_arguments__XprivateX__BB76_382_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_389_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_382_F"))
		i2 =  ((__xasm<int>(push(i5), op(0x37))))
		i6 =  ((__xasm<int>(push(i4), op(0x37))))
		i7 =  (i3 << 3)
		i2 =  (i2 + i7)
		__asm(push(i6), push(i2), op(0x3c))
		i2 =  (i3 + 1)
		i4 =  (i4 + 4)
		__asm(jump, target("___find_arguments__XprivateX__BB76_408_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_383_F"))
		__asm(push(i2>22), iftrue, target("___find_arguments__XprivateX__BB76_387_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_384_F"))
		__asm(push(i2==21), iftrue, target("___find_arguments__XprivateX__BB76_402_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_385_F"))
		__asm(push(i2==22), iftrue, target("___find_arguments__XprivateX__BB76_386_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_389_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_386_F"))
		i2 =  ((__xasm<int>(push(i5), op(0x37))))
		f0 =  ((__xasm<Number>(push(i4), op(0x39))))
		i6 =  (i3 << 3)
		i2 =  (i2 + i6)
		__asm(push(f0), push(i2), op(0x3e))
		i2 =  (i3 + 1)
		i4 =  (i4 + 8)
		__asm(jump, target("___find_arguments__XprivateX__BB76_408_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_387_F"))
		__asm(push(i2==23), iftrue, target("___find_arguments__XprivateX__BB76_405_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_388_F"))
		__asm(push(i2==24), iftrue, target("___find_arguments__XprivateX__BB76_406_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_389_F"))
		__asm(jump, target("___find_arguments__XprivateX__BB76_407_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_390_F"))
		i2 =  ((__xasm<int>(push(i5), op(0x37))))
		i6 =  ((__xasm<int>(push(i4), op(0x37))))
		i7 =  (i3 << 3)
		i2 =  (i2 + i7)
		__asm(push(i6), push(i2), op(0x3c))
		i2 =  (i3 + 1)
		i4 =  (i4 + 4)
		__asm(jump, target("___find_arguments__XprivateX__BB76_408_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_391_F"))
		i2 =  ((__xasm<int>(push(i5), op(0x37))))
		i6 =  ((__xasm<int>(push(i4), op(0x37))))
		i7 =  (i3 << 3)
		i2 =  (i2 + i7)
		__asm(push(i6), push(i2), op(0x3c))
		i2 =  (i3 + 1)
		i4 =  (i4 + 4)
		__asm(jump, target("___find_arguments__XprivateX__BB76_408_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_392_F"))
		i2 =  ((__xasm<int>(push(i5), op(0x37))))
		i6 =  ((__xasm<int>(push(i4), op(0x37))))
		i7 =  (i3 << 3)
		i2 =  (i2 + i7)
		__asm(push(i6), push(i2), op(0x3c))
		i2 =  (i3 + 1)
		i4 =  (i4 + 4)
		__asm(jump, target("___find_arguments__XprivateX__BB76_408_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_393_F"))
		i2 =  ((__xasm<int>(push(i5), op(0x37))))
		i6 =  ((__xasm<int>(push(i4), op(0x37))))
		i7 =  (i3 << 3)
		i2 =  (i2 + i7)
		__asm(push(i6), push(i2), op(0x3c))
		i2 =  (i3 + 1)
		i4 =  (i4 + 4)
		__asm(jump, target("___find_arguments__XprivateX__BB76_408_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_394_F"))
		i2 =  ((__xasm<int>(push(i5), op(0x37))))
		i6 =  ((__xasm<int>(push(i4), op(0x37))))
		i7 =  (i3 << 3)
		i2 =  (i2 + i7)
		__asm(push(i6), push(i2), op(0x3c))
		i2 =  (i3 + 1)
		i4 =  (i4 + 4)
		__asm(jump, target("___find_arguments__XprivateX__BB76_408_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_395_F"))
		i2 =  ((__xasm<int>(push(i5), op(0x37))))
		i6 =  ((__xasm<int>(push(i4), op(0x37))))
		i7 =  (i3 << 3)
		i2 =  (i2 + i7)
		__asm(push(i6), push(i2), op(0x3c))
		i2 =  (i3 + 1)
		i4 =  (i4 + 4)
		__asm(jump, target("___find_arguments__XprivateX__BB76_408_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_396_F"))
		i2 =  ((__xasm<int>(push(i5), op(0x37))))
		i6 =  (i3 << 3)
		i7 =  ((__xasm<int>(push(i4), op(0x37))))
		i8 =  ((__xasm<int>(push((i4+4)), op(0x37))))
		i2 =  (i2 + i6)
		__asm(push(i7), push(i2), op(0x3c))
		__asm(push(i8), push((i2+4)), op(0x3c))
		i2 =  (i3 + 1)
		i4 =  (i4 + 8)
		__asm(jump, target("___find_arguments__XprivateX__BB76_408_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_397_F"))
		i2 =  ((__xasm<int>(push(i5), op(0x37))))
		i6 =  ((__xasm<int>(push(i4), op(0x37))))
		i7 =  (i3 << 3)
		i2 =  (i2 + i7)
		__asm(push(i6), push(i2), op(0x3c))
		i2 =  (i3 + 1)
		i4 =  (i4 + 4)
		__asm(jump, target("___find_arguments__XprivateX__BB76_408_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_398_F"))
		i2 =  ((__xasm<int>(push(i5), op(0x37))))
		i6 =  ((__xasm<int>(push(i4), op(0x37))))
		i7 =  (i3 << 3)
		i2 =  (i2 + i7)
		__asm(push(i6), push(i2), op(0x3c))
		i2 =  (i3 + 1)
		i4 =  (i4 + 4)
		__asm(jump, target("___find_arguments__XprivateX__BB76_408_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_399_F"))
		i2 =  ((__xasm<int>(push(i5), op(0x37))))
		i6 =  ((__xasm<int>(push(i4), op(0x37))))
		i7 =  (i3 << 3)
		i2 =  (i2 + i7)
		__asm(push(i6), push(i2), op(0x3c))
		i2 =  (i3 + 1)
		i4 =  (i4 + 4)
		__asm(jump, target("___find_arguments__XprivateX__BB76_408_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_400_F"))
		i2 =  ((__xasm<int>(push(i5), op(0x37))))
		i6 =  (i3 << 3)
		i7 =  ((__xasm<int>(push(i4), op(0x37))))
		i8 =  ((__xasm<int>(push((i4+4)), op(0x37))))
		i2 =  (i2 + i6)
		__asm(push(i7), push(i2), op(0x3c))
		__asm(push(i8), push((i2+4)), op(0x3c))
		i2 =  (i3 + 1)
		i4 =  (i4 + 8)
		__asm(jump, target("___find_arguments__XprivateX__BB76_408_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_401_F"))
		i2 =  ((__xasm<int>(push(i5), op(0x37))))
		i6 =  (i3 << 3)
		i7 =  ((__xasm<int>(push(i4), op(0x37))))
		i8 =  ((__xasm<int>(push((i4+4)), op(0x37))))
		i2 =  (i2 + i6)
		__asm(push(i7), push(i2), op(0x3c))
		__asm(push(i8), push((i2+4)), op(0x3c))
		i2 =  (i3 + 1)
		i4 =  (i4 + 8)
		__asm(jump, target("___find_arguments__XprivateX__BB76_408_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_402_F"))
		i2 =  ((__xasm<int>(push(i5), op(0x37))))
		f0 =  ((__xasm<Number>(push(i4), op(0x39))))
		i6 =  (i3 << 3)
		i2 =  (i2 + i6)
		__asm(push(f0), push(i2), op(0x3e))
		i2 =  (i3 + 1)
		i4 =  (i4 + 8)
		__asm(jump, target("___find_arguments__XprivateX__BB76_408_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_403_F"))
		i2 =  ((__xasm<int>(push(i5), op(0x37))))
		i6 =  ((__xasm<int>(push(i4), op(0x37))))
		i7 =  (i3 << 3)
		i2 =  (i2 + i7)
		__asm(push(i6), push(i2), op(0x3c))
		i2 =  (i3 + 1)
		i4 =  (i4 + 4)
		__asm(jump, target("___find_arguments__XprivateX__BB76_408_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_404_F"))
		i2 =  ((__xasm<int>(push(i5), op(0x37))))
		i6 =  ((__xasm<int>(push(i4), op(0x37))))
		i7 =  (i3 << 3)
		i2 =  (i2 + i7)
		__asm(push(i6), push(i2), op(0x3c))
		i2 =  (i3 + 1)
		i4 =  (i4 + 4)
		__asm(jump, target("___find_arguments__XprivateX__BB76_408_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_405_F"))
		i2 =  ((__xasm<int>(push(i5), op(0x37))))
		i6 =  ((__xasm<int>(push(i4), op(0x37))))
		i7 =  (i3 << 3)
		i2 =  (i2 + i7)
		__asm(push(i6), push(i2), op(0x3c))
		i2 =  (i3 + 1)
		i4 =  (i4 + 4)
		__asm(jump, target("___find_arguments__XprivateX__BB76_408_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_406_F"))
		i2 =  ((__xasm<int>(push(i5), op(0x37))))
		i6 =  ((__xasm<int>(push(i4), op(0x37))))
		i7 =  (i3 << 3)
		i2 =  (i2 + i7)
		__asm(push(i6), push(i2), op(0x3c))
		i4 =  (i4 + 4)
	__asm(lbl("___find_arguments__XprivateX__BB76_407_F"))
		i2 =  (i3 + 1)
	__asm(lbl("___find_arguments__XprivateX__BB76_408_F"))
		i6 =  ((__xasm<int>(push((mstate.ebp+-52)), op(0x37))))
		__asm(push(i2>i1), iftrue, target("___find_arguments__XprivateX__BB76_410_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_409_F"))
		i3 = i2
		i2 = i6
		__asm(jump, target("___find_arguments__XprivateX__BB76_16_B"))
	__asm(lbl("___find_arguments__XprivateX__BB76_410_F"))
		i4 = i6
		i1 = i6
	__asm(lbl("___find_arguments__XprivateX__BB76_411_F"))
		i2 = i4
		__asm(push(i1==0), iftrue, target("___find_arguments__XprivateX__BB76_414_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_412_F"))
		__asm(push(i0==i2), iftrue, target("___find_arguments__XprivateX__BB76_414_F"))
	__asm(lbl("___find_arguments__XprivateX__BB76_413_F"))
		i0 =  (0)
		mstate.esp -= 8
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 39
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("___find_arguments_state39"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("___find_arguments__XprivateX__BB76_414_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("___find_arguments__XprivateX__BB76_415_F"))
		i3 = i9
		__asm(jump, target("___find_arguments__XprivateX__BB76_199_B"))
	__asm(lbl("___find_arguments_errState"))
		throw("Invalid state in ___find_arguments")
	}
}



// Sync
public const _malloc_pages:int = regFunc(FSM_malloc_pages.start)

public final class FSM_malloc_pages extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
		var i8:int, i9:int


		__asm(label, lbl("_malloc_pages_entry"))
	__asm(lbl("_malloc_pages__XprivateX__BB77_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 4095)
		i1 =  ((__xasm<int>(push(_free_list), op(0x37))))
		i2 =  (i0 & -4096)
		__asm(push(i1==0), iftrue, target("_malloc_pages__XprivateX__BB77_14_F"))
	__asm(lbl("_malloc_pages__XprivateX__BB77_1_F"))
		i0 = i1
	__asm(jump, target("_malloc_pages__XprivateX__BB77_2_F"), lbl("_malloc_pages__XprivateX__BB77_2_B"), label, lbl("_malloc_pages__XprivateX__BB77_2_F")); 
		i1 =  ((__xasm<int>(push((i0+16)), op(0x37))))
		i3 =  (i0 + 16)
		__asm(push(uint(i1)<uint(i2)), iftrue, target("_malloc_pages__XprivateX__BB77_12_F"))
	__asm(lbl("_malloc_pages__XprivateX__BB77_3_F"))
		i4 =  ((__xasm<int>(push((i0+8)), op(0x37))))
		i5 =  (i0 + 8)
		__asm(push(i1!=i2), iftrue, target("_malloc_pages__XprivateX__BB77_9_F"))
	__asm(lbl("_malloc_pages__XprivateX__BB77_4_F"))
		i1 =  ((__xasm<int>(push(i0), op(0x37))))
		i3 = i0
		__asm(push(i1==0), iftrue, target("_malloc_pages__XprivateX__BB77_6_F"))
	__asm(lbl("_malloc_pages__XprivateX__BB77_5_F"))
		i5 =  ((__xasm<int>(push((i0+4)), op(0x37))))
		__asm(push(i5), push((i1+4)), op(0x3c))
	__asm(lbl("_malloc_pages__XprivateX__BB77_6_F"))
		i1 =  ((__xasm<int>(push((i0+4)), op(0x37))))
		i3 =  ((__xasm<int>(push(i3), op(0x37))))
		__asm(push(i3), push(i1), op(0x3c))
		i1 =  (i2 >>> 12)
		__asm(push(i4==0), iftrue, target("_malloc_pages__XprivateX__BB77_8_F"))
	__asm(lbl("_malloc_pages__XprivateX__BB77_7_F"))
		i3 = i4
		__asm(jump, target("_malloc_pages__XprivateX__BB77_22_F"))
	__asm(lbl("_malloc_pages__XprivateX__BB77_8_F"))
		__asm(jump, target("_malloc_pages__XprivateX__BB77_15_F"))
	__asm(lbl("_malloc_pages__XprivateX__BB77_9_F"))
		i0 =  (i4 + i2)
		__asm(push(i0), push(i5), op(0x3c))
		i0 =  (i1 - i2)
		__asm(push(i0), push(i3), op(0x3c))
		i1 =  (i2 >>> 12)
		__asm(push(i4==0), iftrue, target("_malloc_pages__XprivateX__BB77_11_F"))
	__asm(lbl("_malloc_pages__XprivateX__BB77_10_F"))
		i0 =  (0)
		i3 = i4
		__asm(jump, target("_malloc_pages__XprivateX__BB77_22_F"))
	__asm(lbl("_malloc_pages__XprivateX__BB77_11_F"))
		i0 =  (0)
		__asm(jump, target("_malloc_pages__XprivateX__BB77_15_F"))
	__asm(lbl("_malloc_pages__XprivateX__BB77_12_F"))
		i0 =  ((__xasm<int>(push(i0), op(0x37))))
		__asm(push(i0==0), iftrue, target("_malloc_pages__XprivateX__BB77_14_F"))
	__asm(lbl("_malloc_pages__XprivateX__BB77_13_F"))
		__asm(jump, target("_malloc_pages__XprivateX__BB77_2_B"))
	__asm(lbl("_malloc_pages__XprivateX__BB77_14_F"))
		i0 =  (0)
		i1 =  (i2 >>> 12)
	__asm(lbl("_malloc_pages__XprivateX__BB77_15_F"))
		i3 = i0
		i4 = i1
		i0 =  (0)
		i0 = _sbrk(i0)
		i0 =  (i0 + 4095)
		i5 =  (i0 & -4096)
		i0 =  (i5 + i2)
		__asm(push(uint(i0)>=uint(i5)), iftrue, target("_malloc_pages__XprivateX__BB77_17_F"))
	__asm(jump, target("_malloc_pages__XprivateX__BB77_16_F"), lbl("_malloc_pages__XprivateX__BB77_16_B"), label, lbl("_malloc_pages__XprivateX__BB77_16_F")); 
		i5 =  (0)
		i0 = i3
		i1 = i4
		i3 = i5
		__asm(jump, target("_malloc_pages__XprivateX__BB77_22_F"))
	__asm(lbl("_malloc_pages__XprivateX__BB77_17_F"))
		i1 = i0
		i1 = _brk(i1)
		__asm(push(i1!=0), iftrue, target("_malloc_pages__XprivateX__BB77_16_B"))
	__asm(lbl("_malloc_pages__XprivateX__BB77_18_F"))
		i1 =  (i0 >>> 12)
		i6 =  ((__xasm<int>(push(_malloc_origo), op(0x37))))
		i1 =  (i1 + -1)
		i6 =  (i1 - i6)
		__asm(push(i6), push(_last_index), op(0x3c))
		__asm(push(i0), push(_malloc_brk), op(0x3c))
		i0 =  ((__xasm<int>(push(_malloc_ninfo), op(0x37))))
		i1 =  (i6 + 1)
		__asm(push(uint(i1)>=uint(i0)), iftrue, target("_malloc_pages__XprivateX__BB77_20_F"))
	__asm(lbl("_malloc_pages__XprivateX__BB77_19_F"))
		i0 = i3
		i1 = i4
		i3 = i5
		__asm(jump, target("_malloc_pages__XprivateX__BB77_22_F"))
	__asm(lbl("_malloc_pages__XprivateX__BB77_20_F"))
		i0 =  (__2E_str210)
		i1 =  (4)
		i7 =  (0)
		//InlineAsmStart
	log(i1, mstate.gworker.stringFromPtr(i0))
	//InlineAsmEnd
		i0 = _sbrk(i7)
		i0 =  (i0 & 4095)
		i0 =  (4096 - i0)
		i1 =  (i6 >>> 9)
		i0 =  (i0 & 4095)
		i1 =  (i1 & 1048575)
		i1 =  (i1 + 2)
		i0 = _sbrk(i0)
		i0 =  (i1 << 12)
		i0 = _sbrk(i0)
		i6 = i0
		__asm(push(i0==-1), iftrue, target("_malloc_pages__XprivateX__BB77_16_B"))
	__asm(lbl("_malloc_pages__XprivateX__BB77_21_F"))
		i7 =  (__2E_str19)
		i8 =  ((__xasm<int>(push(_malloc_ninfo), op(0x37))))
		i9 =  ((__xasm<int>(push(_page_dir), op(0x37))))
		i8 =  (i8 << 2)
		i1 =  (i1 << 10)
		memcpy(i0, i9, i8)
		i0 =  (i1 & 1073740800)
		__asm(push(i0), push(_malloc_ninfo), op(0x3c))
		__asm(push(i6), push(_page_dir), op(0x3c))
		i1 =  (4)
		i0 = i7
		//InlineAsmStart
	log(i1, mstate.gworker.stringFromPtr(i0))
	//InlineAsmEnd
		i0 = i3
		i1 = i4
		i3 = i5
	__asm(lbl("_malloc_pages__XprivateX__BB77_22_F"))
		__asm(push(i3==0), iftrue, target("_malloc_pages__XprivateX__BB77_29_F"))
	__asm(lbl("_malloc_pages__XprivateX__BB77_23_F"))
		i4 =  (2)
		i5 =  ((__xasm<int>(push(_malloc_origo), op(0x37))))
		i6 =  (i3 >>> 12)
		i7 =  (i6 - i5)
		i8 =  ((__xasm<int>(push(_page_dir), op(0x37))))
		i7 =  (i7 << 2)
		i7 =  (i8 + i7)
		__asm(push(i4), push(i7), op(0x3c))
		__asm(push(uint(i1)<uint(2)), iftrue, target("_malloc_pages__XprivateX__BB77_27_F"))
	__asm(lbl("_malloc_pages__XprivateX__BB77_24_F"))
		i4 =  (0)
		i5 =  (i6 - i5)
		i5 =  (i5 << 2)
		i5 =  (i5 + i8)
		i5 =  (i5 + 4)
		i1 =  (i1 + -1)
	__asm(jump, target("_malloc_pages__XprivateX__BB77_25_F"), lbl("_malloc_pages__XprivateX__BB77_25_B"), label, lbl("_malloc_pages__XprivateX__BB77_25_F")); 
		i6 =  (3)
		__asm(push(i6), push(i5), op(0x3c))
		i5 =  (i5 + 4)
		i4 =  (i4 + 1)
		__asm(push(i4==i1), iftrue, target("_malloc_pages__XprivateX__BB77_27_F"))
	__asm(lbl("_malloc_pages__XprivateX__BB77_26_F"))
		__asm(jump, target("_malloc_pages__XprivateX__BB77_25_B"))
	__asm(lbl("_malloc_pages__XprivateX__BB77_27_F"))
		i1 =  ((__xasm<int>(push(_malloc_junk_2E_b), op(0x35))))
		i1 =  (i1 ^ 1)
		i1 =  (i1 & 1)
		__asm(push(i1!=0), iftrue, target("_malloc_pages__XprivateX__BB77_29_F"))
	__asm(lbl("_malloc_pages__XprivateX__BB77_28_F"))
		i1 =  (-48)
		i4 = i3
		memset(i4, i1, i2)
	__asm(lbl("_malloc_pages__XprivateX__BB77_29_F"))
		__asm(push(i0==0), iftrue, target("_malloc_pages__XprivateX__BB77_33_F"))
	__asm(lbl("_malloc_pages__XprivateX__BB77_30_F"))
		i1 =  ((__xasm<int>(push(_px), op(0x37))))
		__asm(push(i1!=0), iftrue, target("_malloc_pages__XprivateX__BB77_32_F"))
	__asm(lbl("_malloc_pages__XprivateX__BB77_31_F"))
		__asm(push(i0), push(_px), op(0x3c))
		__asm(jump, target("_malloc_pages__XprivateX__BB77_33_F"))
	__asm(lbl("_malloc_pages__XprivateX__BB77_32_F"))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		mstate.esp -= 4;FSM_ifree.start()
	__asm(lbl("_malloc_pages_state1"))
		mstate.esp += 4
	__asm(lbl("_malloc_pages__XprivateX__BB77_33_F"))
		mstate.eax = i3
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const _ifree:int = regFunc(FSM_ifree.start)

public final class FSM_ifree extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
		var i8:int


		__asm(label, lbl("_ifree_entry"))
	__asm(lbl("_ifree__XprivateX__BB78_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
	__asm(jump, target("_ifree__XprivateX__BB78_1_F"), lbl("_ifree__XprivateX__BB78_1_B"), label, lbl("_ifree__XprivateX__BB78_1_F")); 
		i2 = i0
		__asm(push(i2==0), iftrue, target("_ifree__XprivateX__BB78_74_F"))
	__asm(lbl("_ifree__XprivateX__BB78_2_F"))
		i0 =  ((__xasm<int>(push(_malloc_origo), op(0x37))))
		i1 =  (i2 >>> 12)
		i3 =  (i1 - i0)
		i4 = i2
		__asm(push(uint(i3)<uint(12)), iftrue, target("_ifree__XprivateX__BB78_74_F"))
	__asm(lbl("_ifree__XprivateX__BB78_3_F"))
		i5 =  ((__xasm<int>(push(_last_index), op(0x37))))
		__asm(push(uint(i3)>uint(i5)), iftrue, target("_ifree__XprivateX__BB78_74_F"))
	__asm(lbl("_ifree__XprivateX__BB78_4_F"))
		i5 =  ((__xasm<int>(push(_page_dir), op(0x37))))
		i6 =  (i3 << 2)
		i6 =  (i5 + i6)
		i7 =  ((__xasm<int>(push(i6), op(0x37))))
		i8 = i5
		__asm(push(uint(i7)>uint(3)), iftrue, target("_ifree__XprivateX__BB78_59_F"))
	__asm(lbl("_ifree__XprivateX__BB78_5_F"))
		__asm(push(i7!=2), iftrue, target("_ifree__XprivateX__BB78_74_F"))
	__asm(lbl("_ifree__XprivateX__BB78_6_F"))
		__asm(push(i7==1), iftrue, target("_ifree__XprivateX__BB78_74_F"))
	__asm(lbl("_ifree__XprivateX__BB78_7_F"))
		i4 =  (i4 & 4095)
		__asm(push(i4!=0), iftrue, target("_ifree__XprivateX__BB78_74_F"))
	__asm(lbl("_ifree__XprivateX__BB78_8_F"))
		i4 =  (1)
		i7 =  (i3 << 2)
		__asm(push(i4), push(i6), op(0x3c))
		i4 =  (i7 + i8)
		i4 =  ((__xasm<int>(push((i4+4)), op(0x37))))
		__asm(push(i4==3), iftrue, target("_ifree__XprivateX__BB78_10_F"))
	__asm(lbl("_ifree__XprivateX__BB78_9_F"))
		i0 =  (4096)
		__asm(jump, target("_ifree__XprivateX__BB78_14_F"))
	__asm(lbl("_ifree__XprivateX__BB78_10_F"))
		i4 =  (1)
		i0 =  (i1 - i0)
		i0 =  (i0 << 2)
		i7 = i5
	__asm(jump, target("_ifree__XprivateX__BB78_11_F"), lbl("_ifree__XprivateX__BB78_11_B"), label, lbl("_ifree__XprivateX__BB78_11_F")); 
		i1 =  (1)
		i3 =  (i0 + i7)
		__asm(push(i1), push((i3+4)), op(0x3c))
		i1 =  ((__xasm<int>(push((i3+8)), op(0x37))))
		i7 =  (i7 + 4)
		i4 =  (i4 + 1)
		__asm(push(i1!=3), iftrue, target("_ifree__XprivateX__BB78_13_F"))
	__asm(lbl("_ifree__XprivateX__BB78_12_F"))
		__asm(jump, target("_ifree__XprivateX__BB78_11_B"))
	__asm(lbl("_ifree__XprivateX__BB78_13_F"))
		i0 =  (i4 << 12)
	__asm(lbl("_ifree__XprivateX__BB78_14_F"))
		i4 = i0
		i0 =  ((__xasm<int>(push(_malloc_junk_2E_b), op(0x35))))
		i0 =  (i0 ^ 1)
		i0 =  (i0 & 1)
		__asm(push(i0!=0), iftrue, target("_ifree__XprivateX__BB78_16_F"))
	__asm(lbl("_ifree__XprivateX__BB78_15_F"))
		i0 =  (-48)
		i7 = i2
		i1 = i4
		memset(i7, i0, i1)
	__asm(lbl("_ifree__XprivateX__BB78_16_F"))
		i0 =  ((__xasm<int>(push(_malloc_hint_2E_b), op(0x35))))
		i0 =  (i0 ^ 1)
		i0 =  (i0 & 1)
		__asm(push(i0!=0), iftrue, target("_ifree__XprivateX__BB78_18_F"))
	__asm(lbl("_ifree__XprivateX__BB78_17_F"))
		i0 =  (__2E_str8)
		i7 =  (4)
		i1 = i7
		//InlineAsmStart
	log(i1, mstate.gworker.stringFromPtr(i0))
	//InlineAsmEnd
	__asm(lbl("_ifree__XprivateX__BB78_18_F"))
		i0 =  ((__xasm<int>(push(_px), op(0x37))))
		i7 =  (i2 + i4)
		__asm(push(i0==0), iftrue, target("_ifree__XprivateX__BB78_20_F"))
	__asm(lbl("_ifree__XprivateX__BB78_19_F"))
		i1 = i0
		__asm(jump, target("_ifree__XprivateX__BB78_21_F"))
	__asm(lbl("_ifree__XprivateX__BB78_20_F"))
		i0 =  (20)
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		mstate.esp -= 4;FSM_imalloc.start()
	__asm(lbl("_ifree_state1"))
		i0 = mstate.eax
		mstate.esp += 4
		__asm(push(i0), push(_px), op(0x3c))
		i1 = i0
	__asm(lbl("_ifree__XprivateX__BB78_21_F"))
		__asm(push(i2), push((i0+8)), op(0x3c))
		__asm(push(i7), push((i1+12)), op(0x3c))
		__asm(push(i4), push((i1+16)), op(0x3c))
		i0 =  ((__xasm<int>(push(_free_list), op(0x37))))
		__asm(push(i0!=0), iftrue, target("_ifree__XprivateX__BB78_25_F"))
	__asm(lbl("_ifree__XprivateX__BB78_22_F"))
		i4 =  (_free_list)
		__asm(push(i0), push(i1), op(0x3c))
		__asm(push(i4), push((i1+4)), op(0x3c))
		__asm(push(i1), push(_free_list), op(0x3c))
		i0 =  (0)
		__asm(push(i0), push(_px), op(0x3c))
		i0 =  ((__xasm<int>(push(i1), op(0x37))))
		__asm(push(i0==0), iftrue, target("_ifree__XprivateX__BB78_24_F"))
	__asm(lbl("_ifree__XprivateX__BB78_23_F"))
		i0 =  (0)
		__asm(jump, target("_ifree__XprivateX__BB78_57_F"))
	__asm(lbl("_ifree__XprivateX__BB78_24_F"))
		i0 =  (0)
		i4 = i1
		__asm(jump, target("_ifree__XprivateX__BB78_48_F"))
	__asm(lbl("_ifree__XprivateX__BB78_25_F"))
		i3 =  ((__xasm<int>(push((i0+12)), op(0x37))))
		__asm(push(uint(i3)<uint(i2)), iftrue, target("_ifree__XprivateX__BB78_27_F"))
	__asm(lbl("_ifree__XprivateX__BB78_26_F"))
		__asm(jump, target("_ifree__XprivateX__BB78_32_F"))
	__asm(lbl("_ifree__XprivateX__BB78_27_F"))
		__asm(jump, target("_ifree__XprivateX__BB78_28_F"))
	__asm(jump, target("_ifree__XprivateX__BB78_28_F"), lbl("_ifree__XprivateX__BB78_28_B"), label, lbl("_ifree__XprivateX__BB78_28_F")); 
		i3 = i0
		i0 =  ((__xasm<int>(push(i3), op(0x37))))
		__asm(push(i0!=0), iftrue, target("_ifree__XprivateX__BB78_29_F"))
		__asm(jump, target("_ifree__XprivateX__BB78_31_F"))
	__asm(lbl("_ifree__XprivateX__BB78_29_F"))
		i3 =  ((__xasm<int>(push((i0+12)), op(0x37))))
		__asm(push(uint(i3)<uint(i2)), iftrue, target("_ifree__XprivateX__BB78_28_B"))
	__asm(lbl("_ifree__XprivateX__BB78_30_F"))
		__asm(jump, target("_ifree__XprivateX__BB78_32_F"))
	__asm(lbl("_ifree__XprivateX__BB78_31_F"))
		i0 = i3
	__asm(lbl("_ifree__XprivateX__BB78_32_F"))
		i3 =  ((__xasm<int>(push((i0+8)), op(0x37))))
		i5 =  (i0 + 8)
		__asm(push(uint(i3)<=uint(i7)), iftrue, target("_ifree__XprivateX__BB78_34_F"))
	__asm(lbl("_ifree__XprivateX__BB78_33_F"))
		i4 =  (0)
		__asm(push(i0), push(i1), op(0x3c))
		i7 =  ((__xasm<int>(push((i0+4)), op(0x37))))
		__asm(push(i7), push((i1+4)), op(0x3c))
		__asm(push(i1), push((i0+4)), op(0x3c))
		i0 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		__asm(push(i1), push(i0), op(0x3c))
		__asm(push(i4), push(_px), op(0x3c))
		i0 = i1
		__asm(jump, target("_ifree__XprivateX__BB78_45_F"))
	__asm(lbl("_ifree__XprivateX__BB78_34_F"))
		i6 =  ((__xasm<int>(push((i0+12)), op(0x37))))
		i8 =  (i0 + 12)
		__asm(push(i6!=i2), iftrue, target("_ifree__XprivateX__BB78_41_F"))
	__asm(lbl("_ifree__XprivateX__BB78_35_F"))
		i7 =  (i6 + i4)
		__asm(push(i7), push(i8), op(0x3c))
		i1 =  ((__xasm<int>(push((i0+16)), op(0x37))))
		i4 =  (i1 + i4)
		__asm(push(i4), push((i0+16)), op(0x3c))
		i1 =  ((__xasm<int>(push(i0), op(0x37))))
		i2 =  (i0 + 16)
		i3 = i0
		__asm(push(i1!=0), iftrue, target("_ifree__XprivateX__BB78_37_F"))
	__asm(jump, target("_ifree__XprivateX__BB78_36_F"), lbl("_ifree__XprivateX__BB78_36_B"), label, lbl("_ifree__XprivateX__BB78_36_F")); 
		i4 =  (0)
		__asm(jump, target("_ifree__XprivateX__BB78_45_F"))
	__asm(lbl("_ifree__XprivateX__BB78_37_F"))
		i5 =  ((__xasm<int>(push((i1+8)), op(0x37))))
		__asm(push(i7!=i5), iftrue, target("_ifree__XprivateX__BB78_36_B"))
	__asm(lbl("_ifree__XprivateX__BB78_38_F"))
		i7 =  ((__xasm<int>(push((i1+12)), op(0x37))))
		__asm(push(i7), push(i8), op(0x3c))
		i7 =  ((__xasm<int>(push((i1+16)), op(0x37))))
		i4 =  (i7 + i4)
		__asm(push(i4), push(i2), op(0x3c))
		i4 =  ((__xasm<int>(push(i1), op(0x37))))
		__asm(push(i4), push(i3), op(0x3c))
		__asm(push(i4!=0), iftrue, target("_ifree__XprivateX__BB78_40_F"))
	__asm(lbl("_ifree__XprivateX__BB78_39_F"))
		i4 = i1
		__asm(jump, target("_ifree__XprivateX__BB78_45_F"))
	__asm(lbl("_ifree__XprivateX__BB78_40_F"))
		__asm(push(i0), push((i4+4)), op(0x3c))
		i4 = i1
		__asm(jump, target("_ifree__XprivateX__BB78_45_F"))
	__asm(lbl("_ifree__XprivateX__BB78_41_F"))
		__asm(push(i3!=i7), iftrue, target("_ifree__XprivateX__BB78_43_F"))
	__asm(lbl("_ifree__XprivateX__BB78_42_F"))
		i1 =  (0)
		i7 =  ((__xasm<int>(push((i0+16)), op(0x37))))
		i4 =  (i7 + i4)
		__asm(push(i4), push((i0+16)), op(0x3c))
		__asm(push(i2), push(i5), op(0x3c))
		i4 = i1
		__asm(jump, target("_ifree__XprivateX__BB78_45_F"))
	__asm(lbl("_ifree__XprivateX__BB78_43_F"))
		i4 =  ((__xasm<int>(push(i0), op(0x37))))
		i2 = i0
		__asm(push(i4!=0), iftrue, target("_ifree__XprivateX__BB78_36_B"))
	__asm(lbl("_ifree__XprivateX__BB78_44_F"))
		i4 =  (0)
		__asm(push(i4), push(i1), op(0x3c))
		__asm(push(i0), push((i1+4)), op(0x3c))
		__asm(push(i1), push(i2), op(0x3c))
		__asm(push(i4), push(_px), op(0x3c))
		i0 = i1
	__asm(lbl("_ifree__XprivateX__BB78_45_F"))
		i2 = i4
		i4 =  ((__xasm<int>(push(i0), op(0x37))))
		__asm(push(i4==0), iftrue, target("_ifree__XprivateX__BB78_47_F"))
	__asm(lbl("_ifree__XprivateX__BB78_46_F"))
		i0 = i2
		__asm(jump, target("_ifree__XprivateX__BB78_57_F"))
	__asm(lbl("_ifree__XprivateX__BB78_47_F"))
		i4 = i0
		i0 = i2
	__asm(lbl("_ifree__XprivateX__BB78_48_F"))
		i2 = i4
		i4 =  ((__xasm<int>(push((i2+16)), op(0x37))))
		i7 =  ((__xasm<int>(push(_malloc_cache), op(0x37))))
		i1 =  (i2 + 16)
		__asm(push(uint(i4)>uint(i7)), iftrue, target("_ifree__XprivateX__BB78_50_F"))
	__asm(jump, target("_ifree__XprivateX__BB78_49_F"), lbl("_ifree__XprivateX__BB78_49_B"), label, lbl("_ifree__XprivateX__BB78_49_F")); 
		__asm(jump, target("_ifree__XprivateX__BB78_57_F"))
	__asm(lbl("_ifree__XprivateX__BB78_50_F"))
		i4 =  ((__xasm<int>(push((i2+12)), op(0x37))))
		i7 =  ((__xasm<int>(push(_malloc_brk), op(0x37))))
		i3 =  (i2 + 12)
		__asm(push(i4!=i7), iftrue, target("_ifree__XprivateX__BB78_49_B"))
	__asm(lbl("_ifree__XprivateX__BB78_51_F"))
		i4 =  (0)
		i4 = _sbrk(i4)
		i7 =  ((__xasm<int>(push(_malloc_brk), op(0x37))))
		__asm(push(i4!=i7), iftrue, target("_ifree__XprivateX__BB78_49_B"))
	__asm(lbl("_ifree__XprivateX__BB78_52_F"))
		i2 =  ((__xasm<int>(push((i2+8)), op(0x37))))
		i4 =  ((__xasm<int>(push(_malloc_cache), op(0x37))))
		i2 =  (i2 + i4)
		__asm(push(i2), push(i3), op(0x3c))
		__asm(push(i4), push(i1), op(0x3c))
		i2 = _brk(i2)
		i2 =  ((__xasm<int>(push(i3), op(0x37))))
		__asm(push(i2), push(_malloc_brk), op(0x3c))
		i4 =  ((__xasm<int>(push(_malloc_origo), op(0x37))))
		i7 =  ((__xasm<int>(push(_last_index), op(0x37))))
		i2 =  (i2 >>> 12)
		i1 =  (i2 - i4)
		__asm(push(uint(i1)>uint(i7)), iftrue, target("_ifree__XprivateX__BB78_56_F"))
	__asm(lbl("_ifree__XprivateX__BB78_53_F"))
		i2 =  (i2 - i4)
		i4 =  ((__xasm<int>(push(_page_dir), op(0x37))))
		i3 =  (i2 << 2)
		i4 =  (i4 + i3)
	__asm(jump, target("_ifree__XprivateX__BB78_54_F"), lbl("_ifree__XprivateX__BB78_54_B"), label, lbl("_ifree__XprivateX__BB78_54_F")); 
		i3 =  (0)
		__asm(push(i3), push(i4), op(0x3c))
		i4 =  (i4 + 4)
		i2 =  (i2 + 1)
		__asm(push(uint(i2)>uint(i7)), iftrue, target("_ifree__XprivateX__BB78_56_F"))
	__asm(lbl("_ifree__XprivateX__BB78_55_F"))
		__asm(jump, target("_ifree__XprivateX__BB78_54_B"))
	__asm(lbl("_ifree__XprivateX__BB78_56_F"))
		i2 =  (i1 + -1)
		__asm(push(i2), push(_last_index), op(0x3c))
	__asm(lbl("_ifree__XprivateX__BB78_57_F"))
		__asm(push(i0==0), iftrue, target("_ifree__XprivateX__BB78_74_F"))
	__asm(lbl("_ifree__XprivateX__BB78_58_F"))
		__asm(jump, target("_ifree__XprivateX__BB78_1_B"))
	__asm(lbl("_ifree__XprivateX__BB78_59_F"))
		i0 =  ((__xasm<int>(push((i7+8)), op(0x36))))
		i1 =  ((__xasm<int>(push((i7+10)), op(0x36))))
		i3 =  (i4 & 4095)
		i1 =  (i3 >>> i1)
		i3 =  (i7 + 10)
		i5 =  (i0 + -1)
		i4 =  (i5 & i4)
		__asm(push(i4!=0), iftrue, target("_ifree__XprivateX__BB78_74_F"))
	__asm(lbl("_ifree__XprivateX__BB78_60_F"))
		i4 =  (1)
		i5 =  (i1 & -32)
		i5 =  (i5 >>> 3)
		i5 =  (i7 + i5)
		i1 =  (i1 & 31)
		i6 =  ((__xasm<int>(push((i5+16)), op(0x37))))
		i1 =  (i4 << i1)
		i4 =  (i5 + 16)
		i5 =  (i6 & i1)
		__asm(push(i5!=0), iftrue, target("_ifree__XprivateX__BB78_74_F"))
	__asm(lbl("_ifree__XprivateX__BB78_61_F"))
		i5 =  ((__xasm<int>(push(_malloc_junk_2E_b), op(0x35))))
		i5 =  (i5 ^ 1)
		i5 =  (i5 & 1)
		__asm(push(i5!=0), iftrue, target("_ifree__XprivateX__BB78_63_F"))
	__asm(lbl("_ifree__XprivateX__BB78_62_F"))
		i5 =  (-48)
		memset(i2, i5, i0)
	__asm(lbl("_ifree__XprivateX__BB78_63_F"))
		i0 =  ((__xasm<int>(push(i4), op(0x37))))
		i0 =  (i0 | i1)
		__asm(push(i0), push(i4), op(0x3c))
		i0 =  ((__xasm<int>(push((i7+12)), op(0x36))))
		i1 =  (i0 + 1)
		__asm(push(i1), push((i7+12)), op(0x3b))
		i2 =  ((__xasm<int>(push(i3), op(0x36))))
		i3 =  ((__xasm<int>(push(_page_dir), op(0x37))))
		i2 =  (i2 << 2)
		i2 =  (i3 + i2)
		__asm(push(i0!=0), iftrue, target("_ifree__XprivateX__BB78_75_F"))
	__asm(lbl("_ifree__XprivateX__BB78_64_F"))
		i0 =  ((__xasm<int>(push(i2), op(0x37))))
		__asm(push(i0!=0), iftrue, target("_ifree__XprivateX__BB78_66_F"))
	__asm(lbl("_ifree__XprivateX__BB78_65_F"))
		i0 = i2
		__asm(jump, target("_ifree__XprivateX__BB78_73_F"))
	__asm(lbl("_ifree__XprivateX__BB78_66_F"))
		i0 =  (i7 + 4)
		i1 = i2
	__asm(jump, target("_ifree__XprivateX__BB78_67_F"), lbl("_ifree__XprivateX__BB78_67_B"), label, lbl("_ifree__XprivateX__BB78_67_F")); 
		i2 =  ((__xasm<int>(push(i1), op(0x37))))
		i3 =  ((__xasm<int>(push(i2), op(0x37))))
		__asm(push(i3!=0), iftrue, target("_ifree__XprivateX__BB78_69_F"))
	__asm(lbl("_ifree__XprivateX__BB78_68_F"))
		i0 = i1
		__asm(jump, target("_ifree__XprivateX__BB78_73_F"))
	__asm(lbl("_ifree__XprivateX__BB78_69_F"))
		i4 =  ((__xasm<int>(push((i3+4)), op(0x37))))
		i5 =  ((__xasm<int>(push(i0), op(0x37))))
		i1 =  ((uint(i4)<uint(i5)) ? i2 : i1)
		i4 =  ((uint(i4)>=uint(i5)) ? 1 : 0)
		__asm(push(i3==0), iftrue, target("_ifree__XprivateX__BB78_72_F"))
	__asm(lbl("_ifree__XprivateX__BB78_70_F"))
		i3 =  (i4 & 1)
		__asm(push(i3!=0), iftrue, target("_ifree__XprivateX__BB78_72_F"))
	__asm(lbl("_ifree__XprivateX__BB78_71_F"))
		i1 = i2
		__asm(jump, target("_ifree__XprivateX__BB78_67_B"))
	__asm(lbl("_ifree__XprivateX__BB78_72_F"))
		i0 = i1
	__asm(lbl("_ifree__XprivateX__BB78_73_F"))
		i1 =  ((__xasm<int>(push(i0), op(0x37))))
		__asm(push(i1), push(i7), op(0x3c))
		__asm(push(i7), push(i0), op(0x3c))
		__asm(jump, target("_ifree__XprivateX__BB78_74_F"))
	__asm(jump, target("_ifree__XprivateX__BB78_74_F"), lbl("_ifree__XprivateX__BB78_74_B"), label, lbl("_ifree__XprivateX__BB78_74_F")); 
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	__asm(lbl("_ifree__XprivateX__BB78_75_F"))
		i0 =  ((__xasm<int>(push((i7+14)), op(0x36))))
		i1 =  (i1 & 65535)
		__asm(push(i1!=i0), iftrue, target("_ifree__XprivateX__BB78_74_B"))
	__asm(lbl("_ifree__XprivateX__BB78_76_F"))
		i0 =  ((__xasm<int>(push(i2), op(0x37))))
		__asm(push(i0==i7), iftrue, target("_ifree__XprivateX__BB78_81_F"))
	__asm(lbl("_ifree__XprivateX__BB78_77_F"))
		i0 = i2
		__asm(jump, target("_ifree__XprivateX__BB78_78_F"))
	__asm(jump, target("_ifree__XprivateX__BB78_78_F"), lbl("_ifree__XprivateX__BB78_78_B"), label, lbl("_ifree__XprivateX__BB78_78_F")); 
		i0 =  ((__xasm<int>(push(i0), op(0x37))))
		i1 =  ((__xasm<int>(push(i0), op(0x37))))
		__asm(push(i1==i7), iftrue, target("_ifree__XprivateX__BB78_82_F"))
	__asm(lbl("_ifree__XprivateX__BB78_79_F"))
		__asm(jump, target("_ifree__XprivateX__BB78_78_B"))
	__asm(lbl("_ifree__XprivateX__BB78_80_B"), label)
		mstate.esp -= 4
		__asm(push(i1), push(mstate.esp), op(0x3c))
		mstate.esp -= 4;FSM_ifree.start()
	__asm(lbl("_ifree_state2"))
		mstate.esp += 4
		__asm(jump, target("_ifree__XprivateX__BB78_1_B"))
	__asm(lbl("_ifree__XprivateX__BB78_81_F"))
		i0 = i2
		__asm(jump, target("_ifree__XprivateX__BB78_82_F"))
	__asm(lbl("_ifree__XprivateX__BB78_82_F"))
		i1 =  (2)
		i2 =  ((__xasm<int>(push(i7), op(0x37))))
		__asm(push(i2), push(i0), op(0x3c))
		i0 =  ((__xasm<int>(push((i7+4)), op(0x37))))
		i2 =  ((__xasm<int>(push(_malloc_origo), op(0x37))))
		i0 =  (i0 >>> 12)
		i0 =  (i0 - i2)
		i0 =  (i0 << 2)
		i0 =  (i3 + i0)
		__asm(push(i1), push(i0), op(0x3c))
		i0 =  ((__xasm<int>(push((i7+4)), op(0x37))))
		i1 = i7
		__asm(push(i0!=i7), iftrue, target("_ifree__XprivateX__BB78_80_B"))
		__asm(jump, target("_ifree__XprivateX__BB78_83_F"))
	__asm(lbl("_ifree__XprivateX__BB78_83_F"))
		__asm(jump, target("_ifree__XprivateX__BB78_1_B"))
	}
}



// Sync
public const _imalloc:int = regFunc(FSM_imalloc.start)

public final class FSM_imalloc extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
		var i8:int, i9:int, i10:int, i11:int, i12:int, i13:int, i14:int, i15:int
		var i16:int, i17:int


		__asm(label, lbl("_imalloc_entry"))
	__asm(lbl("_imalloc__XprivateX__BB79_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  (i0 + 4096)
		__asm(push(uint(i1)>=uint(i0)), iftrue, target("_imalloc__XprivateX__BB79_2_F"))
	__asm(jump, target("_imalloc__XprivateX__BB79_1_F"), lbl("_imalloc__XprivateX__BB79_1_B"), label, lbl("_imalloc__XprivateX__BB79_1_F")); 
		i1 =  (0)
		__asm(jump, target("_imalloc__XprivateX__BB79_50_F"))
	__asm(lbl("_imalloc__XprivateX__BB79_2_F"))
		__asm(push(uint(i0)>uint(2048)), iftrue, target("_imalloc__XprivateX__BB79_49_F"))
	__asm(lbl("_imalloc__XprivateX__BB79_3_F"))
		i1 =  (i0 + -1)
		i1 =  ((uint(i0)<uint(16)) ? 15 : i1)
		__asm(push(uint(i1)<uint(2)), iftrue, target("_imalloc__XprivateX__BB79_54_F"))
	__asm(lbl("_imalloc__XprivateX__BB79_4_F"))
		i2 =  (-1)
		__asm(jump, target("_imalloc__XprivateX__BB79_5_F"))
	__asm(jump, target("_imalloc__XprivateX__BB79_5_F"), lbl("_imalloc__XprivateX__BB79_5_B"), label, lbl("_imalloc__XprivateX__BB79_5_F")); 
		i2 =  (i2 + 1)
		i1 =  (i1 >> 1)
		__asm(push(uint(i1)<uint(2)), iftrue, target("_imalloc__XprivateX__BB79_7_F"))
	__asm(lbl("_imalloc__XprivateX__BB79_6_F"))
		__asm(jump, target("_imalloc__XprivateX__BB79_5_B"))
	__asm(lbl("_imalloc__XprivateX__BB79_7_F"))
		i1 =  (i2 + 2)
	__asm(jump, target("_imalloc__XprivateX__BB79_8_F"), lbl("_imalloc__XprivateX__BB79_8_B"), label, lbl("_imalloc__XprivateX__BB79_8_F")); 
		i2 =  ((__xasm<int>(push(_page_dir), op(0x37))))
		i3 =  (i1 << 2)
		i3 =  (i2 + i3)
		i3 =  ((__xasm<int>(push(i3), op(0x37))))
		__asm(push(i3!=0), iftrue, target("_imalloc__XprivateX__BB79_35_F"))
	__asm(lbl("_imalloc__XprivateX__BB79_9_F"))
		i2 =  (4096)
		mstate.esp -= 4
		__asm(push(i2), push(mstate.esp), op(0x3c))
		mstate.esp -= 4;FSM_malloc_pages.start()
	__asm(lbl("_imalloc_state1"))
		i2 = mstate.eax
		mstate.esp += 4
		__asm(push(i2==0), iftrue, target("_imalloc__XprivateX__BB79_1_B"))
	__asm(lbl("_imalloc__XprivateX__BB79_10_F"))
		i3 =  (4096)
		i3 =  (i3 >>> i1)
		i4 =  (i3 + 31)
		i4 =  (i4 >>> 3)
		i5 =  (1)
		i4 =  (i4 & 536870908)
		i6 =  (i4 + 16)
		i5 =  (i5 << i1)
		i7 =  (i6 << 1)
		__asm(push(i5>i7), iftrue, target("_imalloc__XprivateX__BB79_12_F"))
	__asm(lbl("_imalloc__XprivateX__BB79_11_F"))
		i7 = i2
		__asm(jump, target("_imalloc__XprivateX__BB79_14_F"))
	__asm(lbl("_imalloc__XprivateX__BB79_12_F"))
		mstate.esp -= 4
		__asm(push(i6), push(mstate.esp), op(0x3c))
		mstate.esp -= 4;FSM_imalloc.start()
	__asm(lbl("_imalloc_state2"))
		i7 = mstate.eax
		mstate.esp += 4
		__asm(push(i7==0), iftrue, target("_imalloc__XprivateX__BB79_55_F"))
	__asm(lbl("_imalloc__XprivateX__BB79_13_F"))
		__asm(jump, target("_imalloc__XprivateX__BB79_14_F"))
	__asm(lbl("_imalloc__XprivateX__BB79_14_F"))
		__asm(push(i5), push((i7+8)), op(0x3b))
		__asm(push(i1), push((i7+10)), op(0x3b))
		__asm(push(i3), push((i7+12)), op(0x3b))
		__asm(push(i3), push((i7+14)), op(0x3b))
		__asm(push(i2), push((i7+4)), op(0x3c))
		i8 =  (i3 & 65535)
		i9 =  (i7 + 14)
		i10 =  (i7 + 12)
		i11 = i7
		__asm(push(uint(i8)>uint(31)), iftrue, target("_imalloc__XprivateX__BB79_22_F"))
	__asm(lbl("_imalloc__XprivateX__BB79_15_F"))
		i12 =  (0)
		__asm(jump, target("_imalloc__XprivateX__BB79_16_F"))
	__asm(jump, target("_imalloc__XprivateX__BB79_16_F"), lbl("_imalloc__XprivateX__BB79_16_B"), label, lbl("_imalloc__XprivateX__BB79_16_F")); 
		__asm(push(i12<i8), iftrue, target("_imalloc__XprivateX__BB79_26_F"))
		__asm(jump, target("_imalloc__XprivateX__BB79_17_F"))
	__asm(jump, target("_imalloc__XprivateX__BB79_17_F"), lbl("_imalloc__XprivateX__BB79_17_B"), label, lbl("_imalloc__XprivateX__BB79_17_F")); 
		__asm(push(i2!=i7), iftrue, target("_imalloc__XprivateX__BB79_30_F"))
		__asm(jump, target("_imalloc__XprivateX__BB79_18_F"))
	__asm(lbl("_imalloc__XprivateX__BB79_18_F"))
		__asm(push(i6<1), iftrue, target("_imalloc__XprivateX__BB79_30_F"))
		__asm(jump, target("_imalloc__XprivateX__BB79_19_F"))
	__asm(lbl("_imalloc__XprivateX__BB79_19_F"))
		i6 =  (0)
		i4 =  (i4 + 16)
		__asm(jump, target("_imalloc__XprivateX__BB79_20_F"))
	__asm(jump, target("_imalloc__XprivateX__BB79_20_F"), lbl("_imalloc__XprivateX__BB79_20_B"), label, lbl("_imalloc__XprivateX__BB79_20_F")); 
		i8 =  (1)
		i12 =  (i6 & -32)
		i13 =  (i6 & 31)
		i12 =  (i12 >>> 3)
		i8 =  (i8 << i13)
		i12 =  (i11 + i12)
		i13 =  ((__xasm<int>(push((i12+16)), op(0x37))))
		i8 =  (i8 ^ -1)
		i8 =  (i13 & i8)
		__asm(push(i8), push((i12+16)), op(0x3c))
		i8 =  ((__xasm<int>(push(i9), op(0x36))))
		i8 =  (i8 + -1)
		__asm(push(i8), push(i9), op(0x3b))
		i4 =  (i4 - i5)
		i6 =  (i6 + 1)
		__asm(push(i4<1), iftrue, target("_imalloc__XprivateX__BB79_29_F"))
		__asm(jump, target("_imalloc__XprivateX__BB79_21_F"))
	__asm(lbl("_imalloc__XprivateX__BB79_21_F"))
		__asm(jump, target("_imalloc__XprivateX__BB79_20_B"))
	__asm(lbl("_imalloc__XprivateX__BB79_22_F"))
		i12 =  (0)
		i13 = i8
		i14 = i12
	__asm(jump, target("_imalloc__XprivateX__BB79_23_F"), lbl("_imalloc__XprivateX__BB79_23_B"), label, lbl("_imalloc__XprivateX__BB79_23_F")); 
		i15 =  (-1)
		i16 =  (i12 & 134217727)
		i16 =  (i16 << 2)
		i16 =  (i11 + i16)
		__asm(push(i15), push((i16+16)), op(0x3c))
		i13 =  (i13 + -32)
		i14 =  (i14 + 32)
		i12 =  (i12 + 1)
		__asm(push(uint(i13)>uint(31)), iftrue, target("_imalloc__XprivateX__BB79_25_F"))
	__asm(lbl("_imalloc__XprivateX__BB79_24_F"))
		i12 = i14
		__asm(jump, target("_imalloc__XprivateX__BB79_16_B"))
	__asm(lbl("_imalloc__XprivateX__BB79_25_F"))
		__asm(jump, target("_imalloc__XprivateX__BB79_23_B"))
	__asm(lbl("_imalloc__XprivateX__BB79_26_F"))
		i13 =  (0)
		i8 =  (i8 - i12)
	__asm(jump, target("_imalloc__XprivateX__BB79_27_F"), lbl("_imalloc__XprivateX__BB79_27_B"), label, lbl("_imalloc__XprivateX__BB79_27_F")); 
		i14 =  (1)
		i15 =  (i12 + i13)
		i16 =  (i15 & -32)
		i16 =  (i16 >>> 3)
		i15 =  (i15 & 31)
		i16 =  (i11 + i16)
		i17 =  ((__xasm<int>(push((i16+16)), op(0x37))))
		i14 =  (i14 << i15)
		i14 =  (i17 | i14)
		__asm(push(i14), push((i16+16)), op(0x3c))
		i13 =  (i13 + 1)
		__asm(push(i13==i8), iftrue, target("_imalloc__XprivateX__BB79_17_B"))
	__asm(lbl("_imalloc__XprivateX__BB79_28_F"))
		__asm(jump, target("_imalloc__XprivateX__BB79_27_B"))
	__asm(lbl("_imalloc__XprivateX__BB79_29_F"))
		i4 =  (i6 + -1)
		i3 =  (i3 - i4)
		i3 =  (i3 + -1)
		__asm(push(i3), push(i10), op(0x3b))
	__asm(lbl("_imalloc__XprivateX__BB79_30_F"))
		i3 =  ((__xasm<int>(push(_malloc_origo), op(0x37))))
		i2 =  (i2 >>> 12)
		i2 =  (i2 - i3)
		i3 =  ((__xasm<int>(push(_page_dir), op(0x37))))
		i2 =  (i2 << 2)
		i4 =  (i1 << 2)
		i2 =  (i3 + i2)
		__asm(push(i11), push(i2), op(0x3c))
		i2 =  (i3 + i4)
		i4 =  ((__xasm<int>(push(i2), op(0x37))))
		__asm(push(i4), push(i7), op(0x3c))
		__asm(push(i11), push(i2), op(0x3c))
		i2 =  ((__xasm<int>(push((i11+16)), op(0x37))))
		i4 =  (i11 + 16)
		__asm(push(i2==0), iftrue, target("_imalloc__XprivateX__BB79_34_F"))
	__asm(lbl("_imalloc__XprivateX__BB79_31_F"))
		i2 = i3
		i3 = i11
		__asm(jump, target("_imalloc__XprivateX__BB79_32_F"))
	__asm(jump, target("_imalloc__XprivateX__BB79_32_F"), lbl("_imalloc__XprivateX__BB79_32_B"), label, lbl("_imalloc__XprivateX__BB79_32_F")); 
		i6 =  ((__xasm<int>(push(i4), op(0x37))))
		i5 =  (i6 & 1)
		__asm(push(i5==0), iftrue, target("_imalloc__XprivateX__BB79_56_F"))
		__asm(jump, target("_imalloc__XprivateX__BB79_33_F"))
	__asm(lbl("_imalloc__XprivateX__BB79_33_F"))
		i7 =  (1)
		i5 =  (0)
		__asm(jump, target("_imalloc__XprivateX__BB79_44_F"))
	__asm(lbl("_imalloc__XprivateX__BB79_34_F"))
		i2 = i3
		i3 = i11
		__asm(jump, target("_imalloc__XprivateX__BB79_38_F"))
	__asm(lbl("_imalloc__XprivateX__BB79_35_F"))
		i4 =  ((__xasm<int>(push((i3+16)), op(0x37))))
		i5 =  (i3 + 16)
		__asm(push(i4==0), iftrue, target("_imalloc__XprivateX__BB79_37_F"))
	__asm(lbl("_imalloc__XprivateX__BB79_36_F"))
		i4 = i5
		__asm(jump, target("_imalloc__XprivateX__BB79_32_B"))
	__asm(lbl("_imalloc__XprivateX__BB79_37_F"))
		i4 = i5
	__asm(jump, target("_imalloc__XprivateX__BB79_38_F"), lbl("_imalloc__XprivateX__BB79_38_B"), label, lbl("_imalloc__XprivateX__BB79_38_F")); 
		i5 =  ((__xasm<int>(push((i4+4)), op(0x37))))
		i4 =  (i4 + 4)
		i6 = i4
		__asm(push(i5==0), iftrue, target("_imalloc__XprivateX__BB79_40_F"))
	__asm(lbl("_imalloc__XprivateX__BB79_39_F"))
		__asm(jump, target("_imalloc__XprivateX__BB79_32_B"))
	__asm(lbl("_imalloc__XprivateX__BB79_40_F"))
		i4 = i6
		__asm(jump, target("_imalloc__XprivateX__BB79_38_B"))
	__asm(lbl("_imalloc__XprivateX__BB79_41_B"), label)
		__asm(jump, target("_imalloc__XprivateX__BB79_42_F"))
	__asm(jump, target("_imalloc__XprivateX__BB79_42_F"), lbl("_imalloc__XprivateX__BB79_42_B"), label, lbl("_imalloc__XprivateX__BB79_42_F")); 
		i5 =  (i5 + 1)
		i7 =  (i7 << 1)
		i8 =  (i6 & i7)
		__asm(push(i8==0), iftrue, target("_imalloc__XprivateX__BB79_41_B"))
	__asm(lbl("_imalloc__XprivateX__BB79_43_F"))
		__asm(jump, target("_imalloc__XprivateX__BB79_44_F"))
	__asm(lbl("_imalloc__XprivateX__BB79_44_F"))
		i6 =  (i6 ^ i7)
		__asm(push(i6), push(i4), op(0x3c))
		i6 =  ((__xasm<int>(push((i3+12)), op(0x36))))
		i6 =  (i6 + -1)
		__asm(push(i6), push((i3+12)), op(0x3b))
		i6 =  (i6 & 65535)
		__asm(push(i6!=0), iftrue, target("_imalloc__XprivateX__BB79_46_F"))
	__asm(lbl("_imalloc__XprivateX__BB79_45_F"))
		i6 =  (0)
		i1 =  (i1 << 2)
		i7 =  ((__xasm<int>(push(i3), op(0x37))))
		i1 =  (i2 + i1)
		__asm(push(i7), push(i1), op(0x3c))
		__asm(push(i6), push(i3), op(0x3c))
	__asm(lbl("_imalloc__XprivateX__BB79_46_F"))
		i1 =  (i3 + 16)
		i1 =  (i4 - i1)
		i1 =  (i1 << 3)
		i2 =  ((__xasm<int>(push(_malloc_junk_2E_b), op(0x35))))
		i4 =  ((__xasm<int>(push((i3+10)), op(0x36))))
		i1 =  (i1 + i5)
		i2 =  (i2 ^ 1)
		i1 =  (i1 << i4)
		i2 =  (i2 & 1)
		__asm(push(i2!=0), iftrue, target("_imalloc__XprivateX__BB79_48_F"))
	__asm(lbl("_imalloc__XprivateX__BB79_47_F"))
		i2 =  (-48)
		i4 =  ((__xasm<int>(push((i3+8)), op(0x36))))
		i5 =  ((__xasm<int>(push((i3+4)), op(0x37))))
		i5 =  (i5 + i1)
		memset(i5, i2, i4)
		i3 =  ((__xasm<int>(push((i3+4)), op(0x37))))
		i1 =  (i3 + i1)
		__asm(jump, target("_imalloc__XprivateX__BB79_50_F"))
	__asm(lbl("_imalloc__XprivateX__BB79_48_F"))
		i2 =  ((__xasm<int>(push((i3+4)), op(0x37))))
		i1 =  (i2 + i1)
		__asm(jump, target("_imalloc__XprivateX__BB79_50_F"))
	__asm(lbl("_imalloc__XprivateX__BB79_49_F"))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		mstate.esp -= 4;FSM_malloc_pages.start()
	__asm(lbl("_imalloc_state3"))
		i1 = mstate.eax
		mstate.esp += 4
	__asm(lbl("_imalloc__XprivateX__BB79_50_F"))
		i2 =  ((__xasm<int>(push(_malloc_zero_2E_b), op(0x35))))
		i2 =  (i2 ^ 1)
		__asm(push(i1==0), iftrue, target("_imalloc__XprivateX__BB79_53_F"))
	__asm(lbl("_imalloc__XprivateX__BB79_51_F"))
		i2 =  (i2 & 1)
		__asm(push(i2!=0), iftrue, target("_imalloc__XprivateX__BB79_53_F"))
	__asm(lbl("_imalloc__XprivateX__BB79_52_F"))
		i2 =  (0)
		i3 = i1
		memset(i3, i2, i0)
	__asm(jump, target("_imalloc__XprivateX__BB79_53_F"), lbl("_imalloc__XprivateX__BB79_53_B"), label, lbl("_imalloc__XprivateX__BB79_53_F")); 
		mstate.eax = i1
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	__asm(lbl("_imalloc__XprivateX__BB79_54_F"))
		i1 =  (1)
		__asm(jump, target("_imalloc__XprivateX__BB79_8_B"))
	__asm(lbl("_imalloc__XprivateX__BB79_55_F"))
		i1 =  (0)
		mstate.esp -= 4
		__asm(push(i2), push(mstate.esp), op(0x3c))
		mstate.esp -= 4;FSM_ifree.start()
	__asm(lbl("_imalloc_state4"))
		mstate.esp += 4
		__asm(jump, target("_imalloc__XprivateX__BB79_53_B"))
	__asm(lbl("_imalloc__XprivateX__BB79_56_F"))
		i7 =  (1)
		i5 =  (0)
		__asm(jump, target("_imalloc__XprivateX__BB79_42_B"))
	}
}



// Async
public const _pubrealloc:int = regFunc(FSM_pubrealloc.start)

public final class FSM_pubrealloc extends Machine {

	public static function start():void {
			var result:FSM_pubrealloc = new FSM_pubrealloc
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
	public var i8:int, i9:int, i10:int, i11:int, i12:int

	public static const intRegCount:int = 13

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("_pubrealloc_entry"))
		__asm(push(state), switchjump(
			"_pubrealloc_errState",
			"_pubrealloc_state0",
			"_pubrealloc_state1",
			"_pubrealloc_state2",
			"_pubrealloc_state3",
			"_pubrealloc_state4",
			"_pubrealloc_state5",
			"_pubrealloc_state6",
			"_pubrealloc_state7",
			"_pubrealloc_state8",
			"_pubrealloc_state9"))
	__asm(lbl("_pubrealloc_state0"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 4096
		i0 =  ((__xasm<int>(push(_malloc_active_2E_3509), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i3 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		__asm(push(i0<1), iftrue, target("_pubrealloc__XprivateX__BB80_5_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_1_F"))
		__asm(push(i0!=1), iftrue, target("_pubrealloc__XprivateX__BB80_3_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_2_F"))
		i2 =  (2)
		__asm(push(i2), push(_malloc_active_2E_3509), op(0x3c))
	__asm(lbl("_pubrealloc__XprivateX__BB80_3_F"))
		i2 =  (88)
		__asm(push(i2), push(_val_2E_1440), op(0x3c))
		i2 =  (0)
	__asm(jump, target("_pubrealloc__XprivateX__BB80_4_F"), lbl("_pubrealloc__XprivateX__BB80_4_B"), label, lbl("_pubrealloc__XprivateX__BB80_4_F")); 
		mstate.eax = i2
		__asm(jump, target("_pubrealloc__XprivateX__BB80_129_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_5_F"))
		i0 =  (1)
		__asm(push(i0), push(_malloc_active_2E_3509), op(0x3c))
		i0 =  ((__xasm<int>(push(_malloc_started_2E_3510_2E_b), op(0x35))))
		__asm(push(i0!=0), iftrue, target("_pubrealloc__XprivateX__BB80_77_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_6_F"))
		__asm(push(i2==0), iftrue, target("_pubrealloc__XprivateX__BB80_8_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_7_F"))
		i2 =  (0)
		__asm(push(i2), push(_malloc_active_2E_3509), op(0x3c))
		i3 =  (88)
		__asm(push(i3), push(_val_2E_1440), op(0x3c))
		__asm(jump, target("_pubrealloc__XprivateX__BB80_4_B"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_8_F"))
		i0 =  (0)
		i4 =  ((__xasm<int>(push(_val_2E_1440), op(0x37))))
		i5 =  ((mstate.ebp+-4096))
	__asm(jump, target("_pubrealloc__XprivateX__BB80_9_F"), lbl("_pubrealloc__XprivateX__BB80_9_B"), label, lbl("_pubrealloc__XprivateX__BB80_9_F")); 
		i6 = i0
		__asm(push(i6==1), iftrue, target("_pubrealloc__XprivateX__BB80_12_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_10_F"))
		__asm(push(i6!=0), iftrue, target("_pubrealloc__XprivateX__BB80_69_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_11_F"))
		i0 =  (__2E_str96)
		mstate.esp -= 20
		i1 =  (__2E_str13)
		i7 =  (99)
		i8 =  (22)
		__asm(push(i5), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i8), push((mstate.esp+8)), op(0x3c))
		__asm(push(i1), push((mstate.esp+12)), op(0x3c))
		__asm(push(i7), push((mstate.esp+16)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_sprintf.start()
		return
	__asm(lbl("_pubrealloc_state1"))
		mstate.esp += 20
		i1 =  (3)
		i0 = i5
		//InlineAsmStart
	log(i1, mstate.gworker.stringFromPtr(i0))
	//InlineAsmEnd
		__asm(push(i8), push(_val_2E_1440), op(0x3c))
		__asm(jump, target("_pubrealloc__XprivateX__BB80_69_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_12_F"))
		i0 =  (__2E_str876)
		i1 =  (4)
		//InlineAsmStart
	log(i1, mstate.gworker.stringFromPtr(i0))
	//InlineAsmEnd
		mstate.esp -= 4
		i0 =  (__2E_str113335)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		mstate.esp -= 4;FSM_getenv.start()
	__asm(lbl("_pubrealloc_state2"))
		i0 = mstate.eax
		mstate.esp += 4
		__asm(push(i0==0), iftrue, target("_pubrealloc__XprivateX__BB80_69_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_13_F"))
		i1 =  ((__xasm<int>(push(_malloc_cache), op(0x37))))
		i7 =  ((__xasm<int>(push(_malloc_hint_2E_b), op(0x35))))
		i8 =  ((__xasm<int>(push(_malloc_realloc_2E_b), op(0x35))))
		i9 =  ((__xasm<int>(push(_malloc_junk_2E_b), op(0x35))))
		i10 =  ((__xasm<int>(push(_malloc_sysv_2E_b), op(0x35))))
		i11 =  ((__xasm<int>(push(_malloc_zero_2E_b), op(0x35))))
		__asm(jump, target("_pubrealloc__XprivateX__BB80_66_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_14_B"), label)
		i1 =  (i1 << 24)
		i1 =  (i1 >> 24)
		__asm(push(i1>89), iftrue, target("_pubrealloc__XprivateX__BB80_26_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_15_F"))
		__asm(push(i1>73), iftrue, target("_pubrealloc__XprivateX__BB80_21_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_16_F"))
		__asm(push(i1==60), iftrue, target("_pubrealloc__XprivateX__BB80_39_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_17_F"))
		__asm(push(i1==62), iftrue, target("_pubrealloc__XprivateX__BB80_36_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_18_F"))
		__asm(push(i1==72), iftrue, target("_pubrealloc__XprivateX__BB80_19_F"))
		__asm(jump, target("_pubrealloc__XprivateX__BB80_35_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_19_F"))
		i0 =  (i0 + 1)
		__asm(push(i0==0), iftrue, target("_pubrealloc__XprivateX__BB80_45_F"))
		__asm(jump, target("_pubrealloc__XprivateX__BB80_20_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_20_F"))
		i1 =  (1)
		i7 = i1
		i1 = i12
		__asm(jump, target("_pubrealloc__XprivateX__BB80_66_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_21_F"))
		__asm(push(i1==74), iftrue, target("_pubrealloc__XprivateX__BB80_53_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_22_F"))
		__asm(push(i1==82), iftrue, target("_pubrealloc__XprivateX__BB80_49_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_23_F"))
		__asm(push(i1==86), iftrue, target("_pubrealloc__XprivateX__BB80_24_F"))
		__asm(jump, target("_pubrealloc__XprivateX__BB80_35_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_24_F"))
		i0 =  (i0 + 1)
		__asm(push(i0==0), iftrue, target("_pubrealloc__XprivateX__BB80_59_F"))
		__asm(jump, target("_pubrealloc__XprivateX__BB80_25_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_25_F"))
		i1 =  (1)
		i10 = i1
		i1 = i12
		__asm(jump, target("_pubrealloc__XprivateX__BB80_66_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_26_F"))
		__asm(push(i1>113), iftrue, target("_pubrealloc__XprivateX__BB80_32_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_27_F"))
		__asm(push(i1==90), iftrue, target("_pubrealloc__XprivateX__BB80_63_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_28_F"))
		__asm(push(i1==104), iftrue, target("_pubrealloc__XprivateX__BB80_42_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_29_F"))
		__asm(push(i1==106), iftrue, target("_pubrealloc__XprivateX__BB80_30_F"))
		__asm(jump, target("_pubrealloc__XprivateX__BB80_35_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_30_F"))
		i0 =  (i0 + 1)
		__asm(push(i0==0), iftrue, target("_pubrealloc__XprivateX__BB80_52_F"))
		__asm(jump, target("_pubrealloc__XprivateX__BB80_31_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_31_F"))
		i1 =  (0)
		i9 = i1
		i1 = i12
		__asm(jump, target("_pubrealloc__XprivateX__BB80_66_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_32_F"))
		__asm(push(i1==114), iftrue, target("_pubrealloc__XprivateX__BB80_46_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_33_F"))
		__asm(push(i1==118), iftrue, target("_pubrealloc__XprivateX__BB80_56_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_34_F"))
		__asm(push(i1==122), iftrue, target("_pubrealloc__XprivateX__BB80_60_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_35_F"))
		i1 = i11
		__asm(jump, target("_pubrealloc__XprivateX__BB80_64_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_36_F"))
		i0 =  (i0 + 1)
		i1 =  (i12 << 1)
		__asm(push(i0==0), iftrue, target("_pubrealloc__XprivateX__BB80_38_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_37_F"))
		__asm(jump, target("_pubrealloc__XprivateX__BB80_66_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_38_F"))
		i0 = i11
		__asm(jump, target("_pubrealloc__XprivateX__BB80_68_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_39_F"))
		i0 =  (i0 + 1)
		i1 =  (i12 >>> 1)
		__asm(push(i0==0), iftrue, target("_pubrealloc__XprivateX__BB80_41_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_40_F"))
		__asm(jump, target("_pubrealloc__XprivateX__BB80_66_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_41_F"))
		i0 = i11
		__asm(jump, target("_pubrealloc__XprivateX__BB80_68_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_42_F"))
		i0 =  (i0 + 1)
		__asm(push(i0==0), iftrue, target("_pubrealloc__XprivateX__BB80_44_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_43_F"))
		i1 =  (0)
		i7 = i1
		i1 = i12
		__asm(jump, target("_pubrealloc__XprivateX__BB80_66_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_44_F"))
		i1 =  (0)
		i0 = i11
		i7 = i1
		i1 = i12
		__asm(jump, target("_pubrealloc__XprivateX__BB80_68_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_45_F"))
		i1 =  (1)
		i0 = i11
		i7 = i1
		i1 = i12
		__asm(jump, target("_pubrealloc__XprivateX__BB80_68_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_46_F"))
		i0 =  (i0 + 1)
		__asm(push(i0==0), iftrue, target("_pubrealloc__XprivateX__BB80_48_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_47_F"))
		i1 =  (0)
		i8 = i1
		i1 = i12
		__asm(jump, target("_pubrealloc__XprivateX__BB80_66_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_48_F"))
		i1 =  (0)
		i0 = i11
		i8 = i1
		i1 = i12
		__asm(jump, target("_pubrealloc__XprivateX__BB80_68_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_49_F"))
		i0 =  (i0 + 1)
		__asm(push(i0==0), iftrue, target("_pubrealloc__XprivateX__BB80_51_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_50_F"))
		i1 =  (1)
		i8 = i1
		i1 = i12
		__asm(jump, target("_pubrealloc__XprivateX__BB80_66_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_51_F"))
		i1 =  (1)
		i0 = i11
		i8 = i1
		i1 = i12
		__asm(jump, target("_pubrealloc__XprivateX__BB80_68_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_52_F"))
		i1 =  (0)
		i0 = i11
		i9 = i1
		i1 = i12
		__asm(jump, target("_pubrealloc__XprivateX__BB80_68_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_53_F"))
		i0 =  (i0 + 1)
		__asm(push(i0==0), iftrue, target("_pubrealloc__XprivateX__BB80_55_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_54_F"))
		i1 =  (1)
		i9 = i1
		i1 = i12
		__asm(jump, target("_pubrealloc__XprivateX__BB80_66_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_55_F"))
		i1 =  (1)
		i0 = i11
		i9 = i1
		i1 = i12
		__asm(jump, target("_pubrealloc__XprivateX__BB80_68_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_56_F"))
		i0 =  (i0 + 1)
		__asm(push(i0==0), iftrue, target("_pubrealloc__XprivateX__BB80_58_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_57_F"))
		i1 =  (0)
		i10 = i1
		i1 = i12
		__asm(jump, target("_pubrealloc__XprivateX__BB80_66_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_58_F"))
		i1 =  (0)
		i0 = i11
		i10 = i1
		i1 = i12
		__asm(jump, target("_pubrealloc__XprivateX__BB80_68_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_59_F"))
		i1 =  (1)
		i0 = i11
		i10 = i1
		i1 = i12
		__asm(jump, target("_pubrealloc__XprivateX__BB80_68_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_60_F"))
		i0 =  (i0 + 1)
		__asm(push(i0==0), iftrue, target("_pubrealloc__XprivateX__BB80_62_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_61_F"))
		i1 =  (0)
		i11 = i1
		i1 = i12
		__asm(jump, target("_pubrealloc__XprivateX__BB80_66_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_62_F"))
		i0 =  (0)
		i1 = i12
		__asm(jump, target("_pubrealloc__XprivateX__BB80_68_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_63_F"))
		i1 =  (1)
	__asm(lbl("_pubrealloc__XprivateX__BB80_64_F"))
		i0 =  (i0 + 1)
		__asm(push(i0==0), iftrue, target("_pubrealloc__XprivateX__BB80_130_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_65_F"))
		i11 = i1
		i1 = i12
		__asm(jump, target("_pubrealloc__XprivateX__BB80_66_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_66_F"))
		i12 = i1
		i1 =  ((__xasm<int>(push(i0), op(0x35))))
		__asm(push(i1!=0), iftrue, target("_pubrealloc__XprivateX__BB80_14_B"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_67_F"))
		i0 = i11
		i1 = i12
	__asm(jump, target("_pubrealloc__XprivateX__BB80_68_F"), lbl("_pubrealloc__XprivateX__BB80_68_B"), label, lbl("_pubrealloc__XprivateX__BB80_68_F")); 
		__asm(push(i1), push(_malloc_cache), op(0x3c))
		__asm(push(i7), push(_malloc_hint_2E_b), op(0x3a))
		__asm(push(i8), push(_malloc_realloc_2E_b), op(0x3a))
		__asm(push(i9), push(_malloc_junk_2E_b), op(0x3a))
		__asm(push(i10), push(_malloc_sysv_2E_b), op(0x3a))
		__asm(push(i0), push(_malloc_zero_2E_b), op(0x3a))
	__asm(lbl("_pubrealloc__XprivateX__BB80_69_F"))
		i0 =  (i6 + 1)
		__asm(push(i0==3), iftrue, target("_pubrealloc__XprivateX__BB80_71_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_70_F"))
		__asm(jump, target("_pubrealloc__XprivateX__BB80_9_B"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_71_F"))
		i0 =  ((__xasm<int>(push(_malloc_zero_2E_b), op(0x35))))
		i0 =  (i0 ^ 1)
		i0 =  (i0 & 1)
		__asm(push(i0!=0), iftrue, target("_pubrealloc__XprivateX__BB80_73_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_72_F"))
		i0 =  (1)
		__asm(push(i0), push(_malloc_junk_2E_b), op(0x3a))
	__asm(lbl("_pubrealloc__XprivateX__BB80_73_F"))
		i0 =  (__2E_str210)
		i1 =  (4)
		i5 =  (0)
		//InlineAsmStart
	log(i1, mstate.gworker.stringFromPtr(i0))
	//InlineAsmEnd
		i0 = _sbrk(i5)
		i0 =  (i0 & 4095)
		i0 =  (4096 - i0)
		i0 =  (i0 & 4095)
		i0 = _sbrk(i0)
		i0 =  (4096)
		i0 = _sbrk(i0)
		__asm(push(i0), push(_page_dir), op(0x3c))
		i0 = i5
		i0 = _sbrk(i0)
		i0 =  (i0 + 4095)
		i0 =  (i0 >>> 12)
		i0 =  (i0 + -12)
		__asm(push(i0), push(_malloc_origo), op(0x3c))
		i0 =  (1024)
		__asm(push(i0), push(_malloc_ninfo), op(0x3c))
		i0 =  ((__xasm<int>(push(_malloc_cache), op(0x37))))
		__asm(push(i0==0), iftrue, target("_pubrealloc__XprivateX__BB80_75_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_74_F"))
		__asm(jump, target("_pubrealloc__XprivateX__BB80_76_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_75_F"))
		i0 =  (i0 + 1)
		__asm(push(i0), push(_malloc_cache), op(0x3c))
	__asm(lbl("_pubrealloc__XprivateX__BB80_76_F"))
		i1 =  (20)
		i0 =  (i0 << 12)
		__asm(push(i0), push(_malloc_cache), op(0x3c))
		mstate.esp -= 4
		__asm(push(i1), push(mstate.esp), op(0x3c))
		mstate.esp -= 4;FSM_imalloc.start()
	__asm(lbl("_pubrealloc_state3"))
		i0 = mstate.eax
		mstate.esp += 4
		__asm(push(i0), push(_px), op(0x3c))
		__asm(push(i4), push(_val_2E_1440), op(0x3c))
		i0 =  (1)
		__asm(push(i0), push(_malloc_started_2E_3510_2E_b), op(0x3a))
	__asm(lbl("_pubrealloc__XprivateX__BB80_77_F"))
		i0 =  ((__xasm<int>(push(_malloc_sysv_2E_b), op(0x35))))
		i1 =  ((i2==2048) ? 0 : i2)
		i0 =  (i0 ^ 1)
		i0 =  (i0 & 1)
		__asm(push(i0!=0), iftrue, target("_pubrealloc__XprivateX__BB80_82_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_78_F"))
		__asm(push(i3!=0), iftrue, target("_pubrealloc__XprivateX__BB80_82_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_79_F"))
		__asm(push(i1!=0), iftrue, target("_pubrealloc__XprivateX__BB80_81_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_80_F"))
		i1 =  (0)
		i3 = i1
		__asm(jump, target("_pubrealloc__XprivateX__BB80_125_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_81_F"))
		i3 =  (0)
		mstate.esp -= 4
		__asm(push(i1), push(mstate.esp), op(0x3c))
		mstate.esp -= 4;FSM_ifree.start()
	__asm(lbl("_pubrealloc_state4"))
		mstate.esp += 4
		__asm(push(i3), push(_malloc_active_2E_3509), op(0x3c))
		i1 = i3
		i0 = i1
		i1 = i3
		__asm(jump, target("_pubrealloc__XprivateX__BB80_126_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_82_F"))
		__asm(push(i3!=0), iftrue, target("_pubrealloc__XprivateX__BB80_86_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_83_F"))
		__asm(push(i1!=0), iftrue, target("_pubrealloc__XprivateX__BB80_85_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_84_F"))
		i3 =  (2048)
		i1 =  (0)
		__asm(jump, target("_pubrealloc__XprivateX__BB80_125_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_85_F"))
		i3 =  (0)
		mstate.esp -= 4
		__asm(push(i1), push(mstate.esp), op(0x3c))
		mstate.esp -= 4;FSM_ifree.start()
	__asm(lbl("_pubrealloc_state5"))
		mstate.esp += 4
		__asm(push(i3), push(_malloc_active_2E_3509), op(0x3c))
		i1 =  (2048)
		i0 = i3
		__asm(jump, target("_pubrealloc__XprivateX__BB80_126_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_86_F"))
		__asm(push(i1!=0), iftrue, target("_pubrealloc__XprivateX__BB80_88_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_87_F"))
		i1 =  (0)
		mstate.esp -= 4
		__asm(push(i3), push(mstate.esp), op(0x3c))
		mstate.esp -= 4;FSM_imalloc.start()
	__asm(lbl("_pubrealloc_state6"))
		i3 = mstate.eax
		mstate.esp += 4
		i0 =  ((i3==0) ? 1 : 0)
		__asm(push(i1), push(_malloc_active_2E_3509), op(0x3c))
		i1 =  (i0 & 1)
		i0 = i1
		i1 = i3
		__asm(jump, target("_pubrealloc__XprivateX__BB80_126_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_88_F"))
		i0 =  ((__xasm<int>(push(_malloc_origo), op(0x37))))
		i2 =  (i1 >>> 12)
		i4 =  (i2 - i0)
		i5 = i1
		__asm(push(uint(i4)>uint(11)), iftrue, target("_pubrealloc__XprivateX__BB80_90_F"))
	__asm(jump, target("_pubrealloc__XprivateX__BB80_89_F"), lbl("_pubrealloc__XprivateX__BB80_89_B"), label, lbl("_pubrealloc__XprivateX__BB80_89_F")); 
		i1 =  (0)
		__asm(jump, target("_pubrealloc__XprivateX__BB80_124_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_90_F"))
		i6 =  ((__xasm<int>(push(_last_index), op(0x37))))
		__asm(push(uint(i4)>uint(i6)), iftrue, target("_pubrealloc__XprivateX__BB80_89_B"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_91_F"))
		i6 =  ((__xasm<int>(push(_page_dir), op(0x37))))
		i7 =  (i4 << 2)
		i7 =  (i6 + i7)
		i7 =  ((__xasm<int>(push(i7), op(0x37))))
		i8 = i6
		__asm(push(i7!=2), iftrue, target("_pubrealloc__XprivateX__BB80_108_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_92_F"))
		i5 =  (i5 & 4095)
		__asm(push(i5!=0), iftrue, target("_pubrealloc__XprivateX__BB80_89_B"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_93_F"))
		i5 =  (i4 << 2)
		i5 =  (i5 + i8)
		i5 =  ((__xasm<int>(push((i5+4)), op(0x37))))
		__asm(push(i5==3), iftrue, target("_pubrealloc__XprivateX__BB80_95_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_94_F"))
		i0 =  (4096)
		__asm(jump, target("_pubrealloc__XprivateX__BB80_99_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_95_F"))
		i5 =  (-1)
		i0 =  (i2 - i0)
		i0 =  (i0 << 2)
		i0 =  (i0 + i6)
		i0 =  (i0 + 8)
	__asm(jump, target("_pubrealloc__XprivateX__BB80_96_F"), lbl("_pubrealloc__XprivateX__BB80_96_B"), label, lbl("_pubrealloc__XprivateX__BB80_96_F")); 
		i7 =  ((__xasm<int>(push(i0), op(0x37))))
		i0 =  (i0 + 4)
		i5 =  (i5 + 1)
		__asm(push(i7!=3), iftrue, target("_pubrealloc__XprivateX__BB80_98_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_97_F"))
		__asm(jump, target("_pubrealloc__XprivateX__BB80_96_B"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_98_F"))
		i0 =  (i5 << 12)
		i0 =  (i0 + 8192)
	__asm(lbl("_pubrealloc__XprivateX__BB80_99_F"))
		i5 =  ((__xasm<int>(push(_malloc_realloc_2E_b), op(0x35))))
		__asm(push(i5!=0), iftrue, target("_pubrealloc__XprivateX__BB80_101_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_100_F"))
		__asm(push(uint(i0)>=uint(i3)), iftrue, target("_pubrealloc__XprivateX__BB80_104_F"))
	__asm(jump, target("_pubrealloc__XprivateX__BB80_101_F"), lbl("_pubrealloc__XprivateX__BB80_101_B"), label, lbl("_pubrealloc__XprivateX__BB80_101_F")); 
		__asm(jump, target("_pubrealloc__XprivateX__BB80_102_F"))
	__asm(jump, target("_pubrealloc__XprivateX__BB80_102_F"), lbl("_pubrealloc__XprivateX__BB80_102_B"), label, lbl("_pubrealloc__XprivateX__BB80_102_F")); 
		mstate.esp -= 4
		__asm(push(i3), push(mstate.esp), op(0x3c))
		mstate.esp -= 4;FSM_imalloc.start()
	__asm(lbl("_pubrealloc_state7"))
		i2 = mstate.eax
		mstate.esp += 4
		__asm(push(i2!=0), iftrue, target("_pubrealloc__XprivateX__BB80_118_F"))
		__asm(jump, target("_pubrealloc__XprivateX__BB80_103_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_103_F"))
		i1 = i2
		__asm(jump, target("_pubrealloc__XprivateX__BB80_124_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_104_F"))
		i5 =  (i0 + -4096)
		__asm(push(uint(i5)>=uint(i3)), iftrue, target("_pubrealloc__XprivateX__BB80_101_B"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_105_F"))
		i5 =  ((__xasm<int>(push(_malloc_junk_2E_b), op(0x35))))
		__asm(push(i5!=0), iftrue, target("_pubrealloc__XprivateX__BB80_107_F"))
	__asm(jump, target("_pubrealloc__XprivateX__BB80_106_F"), lbl("_pubrealloc__XprivateX__BB80_106_B"), label, lbl("_pubrealloc__XprivateX__BB80_106_F")); 
		__asm(jump, target("_pubrealloc__XprivateX__BB80_124_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_107_F"))
		i5 =  (-48)
		i7 =  (i1 + i3)
		i0 =  (i0 - i3)
		i3 =  ((i1==0) ? 1 : 0)
		memset(i7, i5, i0)
		i0 =  (0)
		__asm(push(i0), push(_malloc_active_2E_3509), op(0x3c))
		i0 =  (i3 & 1)
		__asm(jump, target("_pubrealloc__XprivateX__BB80_126_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_108_F"))
		__asm(push(uint(i7)<uint(4)), iftrue, target("_pubrealloc__XprivateX__BB80_89_B"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_109_F"))
		i0 =  ((__xasm<int>(push((i7+8)), op(0x36))))
		i2 = i0
		i4 =  (i0 + -1)
		i4 =  (i4 & i5)
		__asm(push(i4!=0), iftrue, target("_pubrealloc__XprivateX__BB80_89_B"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_110_F"))
		i4 =  (1)
		i6 =  ((__xasm<int>(push((i7+10)), op(0x36))))
		i5 =  (i5 & 4095)
		i5 =  (i5 >>> i6)
		i6 =  (i5 & -32)
		i6 =  (i6 >>> 3)
		i5 =  (i5 & 31)
		i6 =  (i7 + i6)
		i6 =  ((__xasm<int>(push((i6+16)), op(0x37))))
		i4 =  (i4 << i5)
		i4 =  (i4 & i6)
		__asm(push(i4!=0), iftrue, target("_pubrealloc__XprivateX__BB80_89_B"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_111_F"))
		i4 =  ((__xasm<int>(push(_malloc_realloc_2E_b), op(0x35))))
		__asm(push(uint(i2)<uint(i3)), iftrue, target("_pubrealloc__XprivateX__BB80_113_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_112_F"))
		i4 =  (i4 ^ 1)
		i4 =  (i4 & 1)
		__asm(push(i4!=0), iftrue, target("_pubrealloc__XprivateX__BB80_114_F"))
	__asm(jump, target("_pubrealloc__XprivateX__BB80_113_F"), lbl("_pubrealloc__XprivateX__BB80_113_B"), label, lbl("_pubrealloc__XprivateX__BB80_113_F")); 
		i0 = i2
		__asm(jump, target("_pubrealloc__XprivateX__BB80_102_B"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_114_F"))
		i4 =  (i2 >>> 1)
		__asm(push(uint(i4)<uint(i3)), iftrue, target("_pubrealloc__XprivateX__BB80_116_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_115_F"))
		i0 =  (i0 & 65535)
		__asm(push(i0!=16), iftrue, target("_pubrealloc__XprivateX__BB80_113_B"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_116_F"))
		i0 =  ((__xasm<int>(push(_malloc_junk_2E_b), op(0x35))))
		i0 =  (i0 ^ 1)
		i0 =  (i0 & 1)
		__asm(push(i0!=0), iftrue, target("_pubrealloc__XprivateX__BB80_106_B"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_117_F"))
		i0 =  (-48)
		i4 =  (i1 + i3)
		i3 =  (i2 - i3)
		i2 =  ((i1==0) ? 1 : 0)
		memset(i4, i0, i3)
		i0 =  (0)
		__asm(push(i0), push(_malloc_active_2E_3509), op(0x3c))
		i0 =  (i2 & 1)
		__asm(jump, target("_pubrealloc__XprivateX__BB80_126_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_118_F"))
		__asm(push(i0==0), iftrue, target("_pubrealloc__XprivateX__BB80_123_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_119_F"))
		__asm(push(i3==0), iftrue, target("_pubrealloc__XprivateX__BB80_123_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_120_F"))
		__asm(push(uint(i0)>=uint(i3)), iftrue, target("_pubrealloc__XprivateX__BB80_122_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_121_F"))
		i3 =  (0)
		i4 = i2
		i5 = i1
		memcpy(i4, i5, i0)
		mstate.esp -= 4
		__asm(push(i1), push(mstate.esp), op(0x3c))
		mstate.esp -= 4;FSM_ifree.start()
	__asm(lbl("_pubrealloc_state8"))
		mstate.esp += 4
		i1 =  ((i2==0) ? 1 : 0)
		__asm(push(i3), push(_malloc_active_2E_3509), op(0x3c))
		i1 =  (i1 & 1)
		i0 = i1
		i1 = i2
		__asm(jump, target("_pubrealloc__XprivateX__BB80_126_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_122_F"))
		i0 = i2
		i4 = i1
		memcpy(i0, i4, i3)
	__asm(lbl("_pubrealloc__XprivateX__BB80_123_F"))
		mstate.esp -= 4
		__asm(push(i1), push(mstate.esp), op(0x3c))
		mstate.esp -= 4;FSM_ifree.start()
	__asm(lbl("_pubrealloc_state9"))
		mstate.esp += 4
		i1 = i2
	__asm(lbl("_pubrealloc__XprivateX__BB80_124_F"))
		i0 = i1
		i1 =  ((i0==0) ? 1 : 0)
		i1 =  (i1 & 1)
		i3 = i0
	__asm(lbl("_pubrealloc__XprivateX__BB80_125_F"))
		i0 = i1
		i1 = i3
		i2 =  (0)
		__asm(push(i2), push(_malloc_active_2E_3509), op(0x3c))
	__asm(lbl("_pubrealloc__XprivateX__BB80_126_F"))
		__asm(push(i0==0), iftrue, target("_pubrealloc__XprivateX__BB80_128_F"))
	__asm(lbl("_pubrealloc__XprivateX__BB80_127_F"))
		i0 =  (12)
		__asm(push(i0), push(_val_2E_1440), op(0x3c))
	__asm(lbl("_pubrealloc__XprivateX__BB80_128_F"))
		mstate.eax = i1
	__asm(lbl("_pubrealloc__XprivateX__BB80_129_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("_pubrealloc__XprivateX__BB80_130_F"))
		i0 = i1
		i1 = i12
		__asm(jump, target("_pubrealloc__XprivateX__BB80_68_B"))
	__asm(lbl("_pubrealloc_errState"))
		throw("Invalid state in _pubrealloc")
	}
}



// Async
public const _malloc:int = regFunc(FSM_malloc.start)

public final class FSM_malloc extends Machine {

	public static function start():void {
			var result:FSM_malloc = new FSM_malloc
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("_malloc_entry"))
		__asm(push(state), switchjump(
			"_malloc_errState",
			"_malloc_state0",
			"_malloc_state1"))
	__asm(lbl("_malloc_state0"))
	__asm(lbl("_malloc__XprivateX__BB81_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (0)
		mstate.esp -= 8
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("_malloc_state1"))
		i0 = mstate.eax
		mstate.esp += 8
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("_malloc_errState"))
		throw("Invalid state in _malloc")
	}
}



// Async
public const ___cxa_allocate_exception:int = regFunc(FSM___cxa_allocate_exception.start)

public final class FSM___cxa_allocate_exception extends Machine {

	public static function start():void {
			var result:FSM___cxa_allocate_exception = new FSM___cxa_allocate_exception
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int

	public static const intRegCount:int = 5

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("___cxa_allocate_exception_entry"))
		__asm(push(state), switchjump(
			"___cxa_allocate_exception_errState",
			"___cxa_allocate_exception_state0",
			"___cxa_allocate_exception_state1",
			"___cxa_allocate_exception_state2"))
	__asm(lbl("___cxa_allocate_exception_state0"))
	__asm(lbl("___cxa_allocate_exception__XprivateX__BB82_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (0)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		mstate.esp -= 8
		i1 =  (i1 + 80)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("___cxa_allocate_exception_state1"))
		i0 = mstate.eax
		mstate.esp += 8
		__asm(push(i0==0), iftrue, target("___cxa_allocate_exception__XprivateX__BB82_2_F"))
	__asm(lbl("___cxa_allocate_exception__XprivateX__BB82_1_F"))
		__asm(jump, target("___cxa_allocate_exception__XprivateX__BB82_11_F"))
	__asm(lbl("___cxa_allocate_exception__XprivateX__BB82_2_F"))
		i2 =  ((__xasm<int>(push(__ZL14emergency_used), op(0x37))))
		__asm(push(uint(i1)>uint(512)), iftrue, target("___cxa_allocate_exception__XprivateX__BB82_4_F"))
	__asm(lbl("___cxa_allocate_exception__XprivateX__BB82_3_F"))
		i1 =  (0)
		i3 = i2
		__asm(jump, target("___cxa_allocate_exception__XprivateX__BB82_7_F"))
	__asm(lbl("___cxa_allocate_exception__XprivateX__BB82_4_B"), label, lbl("___cxa_allocate_exception__XprivateX__BB82_4_F")); 
		__asm(jump, target("___cxa_allocate_exception__XprivateX__BB82_9_F"))
	__asm(lbl("___cxa_allocate_exception__XprivateX__BB82_5_B"), label)
		i3 =  (i4 + 1)
		i4 =  (i1 >>> 1)
		__asm(push(uint(i3)>uint(31)), iftrue, target("___cxa_allocate_exception__XprivateX__BB82_4_B"))
	__asm(lbl("___cxa_allocate_exception__XprivateX__BB82_6_F"))
		i1 = i3
		i3 = i4
	__asm(lbl("___cxa_allocate_exception__XprivateX__BB82_7_F"))
		i4 = i1
		i1 = i3
		i3 =  (i1 & 1)
		__asm(push(i3!=0), iftrue, target("___cxa_allocate_exception__XprivateX__BB82_5_B"))
	__asm(lbl("___cxa_allocate_exception__XprivateX__BB82_8_F"))
		i0 =  (1)
		i0 =  (i0 << i4)
		i1 =  (__ZL16emergency_buffer)
		i3 =  (i4 << 9)
		i0 =  (i2 | i0)
		__asm(push(i0), push(__ZL14emergency_used), op(0x3c))
		i0 =  (i1 + i3)
	__asm(lbl("___cxa_allocate_exception__XprivateX__BB82_9_F"))
		__asm(push(i0==0), iftrue, target("___cxa_allocate_exception__XprivateX__BB82_12_F"))
	__asm(lbl("___cxa_allocate_exception__XprivateX__BB82_10_F"))
		__asm(jump, target("___cxa_allocate_exception__XprivateX__BB82_11_F"))
	__asm(lbl("___cxa_allocate_exception__XprivateX__BB82_11_F"))
		i1 =  (0)
		i2 = i0
		i3 =  (80)
		memset(i2, i1, i3)
		i0 =  (i0 + 80)
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("___cxa_allocate_exception__XprivateX__BB82_12_F"))
		state = 2
		mstate.esp -= 4;FSM__ZSt9terminatev.start()
		return
	__asm(lbl("___cxa_allocate_exception_state2"))
		__asm(jump, target("___cxa_allocate_exception__XprivateX__BB82_13_F"))
	__asm(lbl("___cxa_allocate_exception__XprivateX__BB82_13_F"))
	__asm(lbl("___cxa_allocate_exception_errState"))
		throw("Invalid state in ___cxa_allocate_exception")
	}
}



// Async
public const __ZSt9terminatev:int = regFunc(FSM__ZSt9terminatev.start)

public final class FSM__ZSt9terminatev extends Machine {

	public static function start():void {
			var result:FSM__ZSt9terminatev = new FSM__ZSt9terminatev
		gstate.gworker = result
	}

	public var i0:int

	public static const intRegCount:int = 1

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZSt9terminatev_entry"))
		__asm(push(state), switchjump(
			"__ZSt9terminatev_errState",
			"__ZSt9terminatev_state0",
			"__ZSt9terminatev_state1"))
	__asm(lbl("__ZSt9terminatev_state0"))
	__asm(lbl("__ZSt9terminatev__XprivateX__BB83_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZN9__gnu_cxx27__verbose_terminate_handlerEv)
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM__ZN10__cxxabiv111__terminateEPFvvE.start()
		return
	__asm(lbl("__ZSt9terminatev_state1"))
		mstate.esp += 4
	__asm(lbl("__ZSt9terminatev_errState"))
		throw("Invalid state in __ZSt9terminatev")
	}
}



// Async
public const ___cxa_call_unexpected:int = regFunc(FSM___cxa_call_unexpected.start)

public final class FSM___cxa_call_unexpected extends Machine {

	public static function start():void {
			var result:FSM___cxa_call_unexpected = new FSM___cxa_call_unexpected
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("___cxa_call_unexpected_entry"))
		__asm(push(state), switchjump(
			"___cxa_call_unexpected_errState",
			"___cxa_call_unexpected_state0",
			"___cxa_call_unexpected_state1",
			"___cxa_call_unexpected_state2"))
	__asm(lbl("___cxa_call_unexpected_state0"))
	__asm(lbl("___cxa_call_unexpected__XprivateX__BB84_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 48
		mstate.esp -= 4
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM___cxa_begin_catch.start()
		return
	__asm(lbl("___cxa_call_unexpected_state1"))
		i1 = mstate.eax
		mstate.esp += 4
		i1 =  ((__xasm<int>(push((i0+-12)), op(0x37))))
		__asm(push(i1), push((mstate.ebp+-40)), op(0x3c))
		i0 =  ((__xasm<int>(push((i0+-40)), op(0x37))))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM__ZN10__cxxabiv112__unexpectedEPFvvE.start()
		return
	__asm(lbl("___cxa_call_unexpected_state2"))
		mstate.esp += 4
	__asm(lbl("___cxa_call_unexpected__XprivateX__BB84_1_F"))
	__asm(lbl("___cxa_call_unexpected_errState"))
		throw("Invalid state in ___cxa_call_unexpected")
	}
}



// Async
public const ___cxa_free_exception:int = regFunc(FSM___cxa_free_exception.start)

public final class FSM___cxa_free_exception extends Machine {

	public static function start():void {
			var result:FSM___cxa_free_exception = new FSM___cxa_free_exception
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("___cxa_free_exception_entry"))
		__asm(push(state), switchjump(
			"___cxa_free_exception_errState",
			"___cxa_free_exception_state0",
			"___cxa_free_exception_state1"))
	__asm(lbl("___cxa_free_exception_state0"))
	__asm(lbl("___cxa_free_exception__XprivateX__BB85_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZL16emergency_buffer)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 16384)
		__asm(push(uint(i1)>=uint(i0)), iftrue, target("___cxa_free_exception__XprivateX__BB85_4_F"))
	__asm(lbl("___cxa_free_exception__XprivateX__BB85_1_F"))
		i0 =  (__ZL16emergency_buffer)
		__asm(push(uint(i1)<uint(i0)), iftrue, target("___cxa_free_exception__XprivateX__BB85_4_F"))
	__asm(lbl("___cxa_free_exception__XprivateX__BB85_2_F"))
		i0 =  (__ZL16emergency_buffer)
		i1 =  (i1 - i0)
		i0 =  (1)
		i1 =  (i1 >>> 9)
		i1 =  (i0 << i1)
		i0 =  ((__xasm<int>(push(__ZL14emergency_used), op(0x37))))
		i1 =  (i1 ^ -1)
		i1 =  (i0 & i1)
		__asm(push(i1), push(__ZL14emergency_used), op(0x3c))
	__asm(jump, target("___cxa_free_exception__XprivateX__BB85_3_F"), lbl("___cxa_free_exception__XprivateX__BB85_3_B"), label, lbl("___cxa_free_exception__XprivateX__BB85_3_F")); 
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("___cxa_free_exception__XprivateX__BB85_4_F"))
		i0 =  (0)
		mstate.esp -= 8
		i1 =  (i1 + -80)
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("___cxa_free_exception_state1"))
		i0 = mstate.eax
		mstate.esp += 8
		__asm(jump, target("___cxa_free_exception__XprivateX__BB85_3_B"))
	__asm(lbl("___cxa_free_exception_errState"))
		throw("Invalid state in ___cxa_free_exception")
	}
}



// Async
public const ___cxa_begin_catch:int = regFunc(FSM___cxa_begin_catch.start)

public final class FSM___cxa_begin_catch extends Machine {

	public static function start():void {
			var result:FSM___cxa_begin_catch = new FSM___cxa_begin_catch
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int

	public static const intRegCount:int = 8

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("___cxa_begin_catch_entry"))
		__asm(push(state), switchjump(
			"___cxa_begin_catch_errState",
			"___cxa_begin_catch_state0",
			"___cxa_begin_catch_state1",
			"___cxa_begin_catch_state2"))
	__asm(lbl("___cxa_begin_catch_state0"))
	__asm(lbl("___cxa_begin_catch__XprivateX__BB86_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		state = 1
		mstate.esp -= 4;FSM___cxa_get_globals.start()
		return
	__asm(lbl("___cxa_begin_catch_state1"))
		i0 = mstate.eax
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i2 =  ((__xasm<int>(push(i1), op(0x37))))
		i3 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		i4 =  ((__xasm<int>(push(i0), op(0x37))))
		i5 =  (i1 + -48)
		i1 =  (i1 + 32)
		i3 =  (i3 ^ 1196315971)
		i2 =  (i2 ^ 1126902528)
		i6 = i0
		i2 =  (i2 | i3)
		__asm(push(i2==0), iftrue, target("___cxa_begin_catch__XprivateX__BB86_4_F"))
	__asm(lbl("___cxa_begin_catch__XprivateX__BB86_1_F"))
		__asm(push(i4==0), iftrue, target("___cxa_begin_catch__XprivateX__BB86_3_F"))
	__asm(lbl("___cxa_begin_catch__XprivateX__BB86_2_F"))
		state = 2
		mstate.esp -= 4;FSM__ZSt9terminatev.start()
		return
	__asm(lbl("___cxa_begin_catch_state2"))
		__asm(jump, target("___cxa_begin_catch__XprivateX__BB86_11_F"))
	__asm(lbl("___cxa_begin_catch__XprivateX__BB86_3_F"))
		i0 =  (0)
		__asm(push(i5), push(i6), op(0x3c))
		__asm(jump, target("___cxa_begin_catch__XprivateX__BB86_7_F"))
	__asm(lbl("___cxa_begin_catch__XprivateX__BB86_4_F"))
		i2 =  ((__xasm<int>(push((i1+-60)), op(0x37))))
		i3 =  (i1 + -60)
		__asm(push(i2>-1), iftrue, target("___cxa_begin_catch__XprivateX__BB86_8_F"))
	__asm(lbl("___cxa_begin_catch__XprivateX__BB86_5_F"))
		i0 =  (1 - i2)
		__asm(push(i0), push(i3), op(0x3c))
		__asm(push(i5==i4), iftrue, target("___cxa_begin_catch__XprivateX__BB86_6_F"))
		__asm(jump, target("___cxa_begin_catch__XprivateX__BB86_9_F"))
	__asm(jump, target("___cxa_begin_catch__XprivateX__BB86_6_F"), lbl("___cxa_begin_catch__XprivateX__BB86_6_B"), label, lbl("___cxa_begin_catch__XprivateX__BB86_6_F")); 
		i0 =  ((__xasm<int>(push((i1+-40)), op(0x37))))
		__asm(jump, target("___cxa_begin_catch__XprivateX__BB86_7_F"))
	__asm(lbl("___cxa_begin_catch__XprivateX__BB86_7_F"))
		mstate.eax = i0
		__asm(jump, target("___cxa_begin_catch__XprivateX__BB86_10_F"))
	__asm(lbl("___cxa_begin_catch__XprivateX__BB86_8_F"))
		i7 =  ((__xasm<int>(push((i0+4)), op(0x37))))
		i7 =  (i7 + -1)
		__asm(push(i7), push((i0+4)), op(0x3c))
		i0 =  (i2 + 1)
		__asm(push(i0), push(i3), op(0x3c))
		__asm(push(i5==i4), iftrue, target("___cxa_begin_catch__XprivateX__BB86_6_B"))
	__asm(lbl("___cxa_begin_catch__XprivateX__BB86_9_F"))
		__asm(push(i4), push((i1+-64)), op(0x3c))
		__asm(push(i5), push(i6), op(0x3c))
		i1 =  ((__xasm<int>(push((i1+-40)), op(0x37))))
		mstate.eax = i1
		__asm(jump, target("___cxa_begin_catch__XprivateX__BB86_10_F"))
	__asm(lbl("___cxa_begin_catch__XprivateX__BB86_10_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("___cxa_begin_catch__XprivateX__BB86_11_F"))
	__asm(lbl("___cxa_begin_catch_errState"))
		throw("Invalid state in ___cxa_begin_catch")
	}
}



// Async
public const ___cxa_get_globals:int = regFunc(FSM___cxa_get_globals.start)

public final class FSM___cxa_get_globals extends Machine {

	public static function start():void {
			var result:FSM___cxa_get_globals = new FSM___cxa_get_globals
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int

	public static const intRegCount:int = 3

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("___cxa_get_globals_entry"))
		__asm(push(state), switchjump(
			"___cxa_get_globals_errState",
			"___cxa_get_globals_state0",
			"___cxa_get_globals_state1",
			"___cxa_get_globals_state2"))
	__asm(lbl("___cxa_get_globals_state0"))
	__asm(lbl("___cxa_get_globals__XprivateX__BB87_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push(__ZL14use_thread_key_2E_b), op(0x35))))
		i0 =  ((i0!=0) ? 0 : -1)
		__asm(push(i0==0), iftrue, target("___cxa_get_globals__XprivateX__BB87_6_F"))
	__asm(lbl("___cxa_get_globals__XprivateX__BB87_1_F"))
		__asm(push(i0>-1), iftrue, target("___cxa_get_globals__XprivateX__BB87_3_F"))
	__asm(lbl("___cxa_get_globals__XprivateX__BB87_2_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZL14use_thread_key_2E_b), op(0x3a))
		__asm(jump, target("___cxa_get_globals__XprivateX__BB87_6_F"))
	__asm(lbl("___cxa_get_globals__XprivateX__BB87_3_F"))
		i0 =  (8)
		mstate.esp -= 8
		i1 =  (0)
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("___cxa_get_globals_state1"))
		i0 = mstate.eax
		mstate.esp += 8
		i1 = i0
		__asm(push(i0==0), iftrue, target("___cxa_get_globals__XprivateX__BB87_5_F"))
	__asm(lbl("___cxa_get_globals__XprivateX__BB87_4_F"))
		i2 =  (0)
		__asm(push(i2), push(i0), op(0x3c))
		__asm(push(i2), push((i1+4)), op(0x3c))
		mstate.eax = i1
		__asm(jump, target("___cxa_get_globals__XprivateX__BB87_7_F"))
	__asm(lbl("___cxa_get_globals__XprivateX__BB87_5_F"))
		state = 2
		mstate.esp -= 4;FSM__ZSt9terminatev.start()
		return
	__asm(lbl("___cxa_get_globals_state2"))
	__asm(lbl("___cxa_get_globals__XprivateX__BB87_6_F"))
		i0 =  (__ZL14globals_static)
		mstate.eax = i0
	__asm(lbl("___cxa_get_globals__XprivateX__BB87_7_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("___cxa_get_globals_errState"))
		throw("Invalid state in ___cxa_get_globals")
	}
}



// Async
public const ___cxa_end_catch:int = regFunc(FSM___cxa_end_catch.start)

public final class FSM___cxa_end_catch extends Machine {

	public static function start():void {
			var result:FSM___cxa_end_catch = new FSM___cxa_end_catch
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int

	public static const intRegCount:int = 6

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("___cxa_end_catch_entry"))
		__asm(push(state), switchjump(
			"___cxa_end_catch_errState",
			"___cxa_end_catch_state0",
			"___cxa_end_catch_state1"))
	__asm(lbl("___cxa_end_catch_state0"))
	__asm(lbl("___cxa_end_catch__XprivateX__BB88_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZL14globals_static)
		i1 =  ((__xasm<int>(push(__ZL14use_thread_key_2E_b), op(0x35))))
		i0 =  ((i1!=0) ? i0 : 0)
		i1 =  ((__xasm<int>(push(i0), op(0x37))))
		i2 = i0
		__asm(push(i1==0), iftrue, target("___cxa_end_catch__XprivateX__BB88_13_F"))
	__asm(lbl("___cxa_end_catch__XprivateX__BB88_1_F"))
		i3 =  ((__xasm<int>(push((i1+48)), op(0x37))))
		i4 =  ((__xasm<int>(push((i1+52)), op(0x37))))
		i4 =  (i4 ^ 1196315971)
		i3 =  (i3 ^ 1126902528)
		i3 =  (i3 | i4)
		__asm(push(i3==0), iftrue, target("___cxa_end_catch__XprivateX__BB88_4_F"))
	__asm(lbl("___cxa_end_catch__XprivateX__BB88_2_F"))
		i1 =  (0)
		__asm(push(i1), push(i0), op(0x3c))
		i0 =  (__2E_str11107)
		i1 =  (4)
	__asm(jump, target("___cxa_end_catch__XprivateX__BB88_3_F"), lbl("___cxa_end_catch__XprivateX__BB88_3_B"), label, lbl("___cxa_end_catch__XprivateX__BB88_3_F")); 
		//InlineAsmStart
	log(i1, mstate.gworker.stringFromPtr(i0))
	//InlineAsmEnd
		__asm(jump, target("___cxa_end_catch__XprivateX__BB88_13_F"))
	__asm(lbl("___cxa_end_catch__XprivateX__BB88_4_F"))
		i3 =  ((__xasm<int>(push((i1+20)), op(0x37))))
		i4 =  (i1 + 20)
		__asm(push(i3>-1), iftrue, target("___cxa_end_catch__XprivateX__BB88_8_F"))
	__asm(lbl("___cxa_end_catch__XprivateX__BB88_5_F"))
		i3 =  (i3 + 1)
		__asm(push(i3==0), iftrue, target("___cxa_end_catch__XprivateX__BB88_7_F"))
	__asm(lbl("___cxa_end_catch__XprivateX__BB88_6_F"))
		__asm(jump, target("___cxa_end_catch__XprivateX__BB88_12_F"))
	__asm(lbl("___cxa_end_catch__XprivateX__BB88_7_F"))
		i5 =  ((__xasm<int>(push((i2+4)), op(0x37))))
		i5 =  (i5 + 1)
		__asm(push(i5), push((i2+4)), op(0x3c))
		i1 =  ((__xasm<int>(push((i1+16)), op(0x37))))
		__asm(push(i1), push(i0), op(0x3c))
		__asm(push(i3), push(i4), op(0x3c))
		__asm(jump, target("___cxa_end_catch__XprivateX__BB88_13_F"))
	__asm(lbl("___cxa_end_catch__XprivateX__BB88_8_F"))
		i2 =  (i3 + -1)
		__asm(push(i3!=1), iftrue, target("___cxa_end_catch__XprivateX__BB88_10_F"))
	__asm(lbl("___cxa_end_catch__XprivateX__BB88_9_F"))
		i2 =  (__2E_str11107)
		i3 =  ((__xasm<int>(push((i1+16)), op(0x37))))
		__asm(push(i3), push(i0), op(0x3c))
		i3 =  (4)
		i0 = i2
		i1 = i3
		__asm(jump, target("___cxa_end_catch__XprivateX__BB88_3_B"))
	__asm(lbl("___cxa_end_catch__XprivateX__BB88_10_F"))
		__asm(push(i2<0), iftrue, target("___cxa_end_catch__XprivateX__BB88_14_F"))
	__asm(lbl("___cxa_end_catch__XprivateX__BB88_11_F"))
		i3 = i2
		__asm(jump, target("___cxa_end_catch__XprivateX__BB88_12_F"))
	__asm(lbl("___cxa_end_catch__XprivateX__BB88_12_F"))
		i0 = i3
		__asm(push(i0), push(i4), op(0x3c))
	__asm(lbl("___cxa_end_catch__XprivateX__BB88_13_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("___cxa_end_catch__XprivateX__BB88_14_F"))
		state = 1
		mstate.esp -= 4;FSM__ZSt9terminatev.start()
		return
	__asm(lbl("___cxa_end_catch_state1"))
	__asm(lbl("___cxa_end_catch_errState"))
		throw("Invalid state in ___cxa_end_catch")
	}
}



// Sync
public const __ZNKSt9exception4whatEv:int = regFunc(FSM__ZNKSt9exception4whatEv.start)

public final class FSM__ZNKSt9exception4whatEv extends Machine {

	public static function start():void {
		var i0:int


		__asm(label, lbl("__ZNKSt9exception4whatEv_entry"))
	__asm(lbl("__ZNKSt9exception4whatEv__XprivateX__BB89_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  ((__xasm<int>(push(i0), op(0x37))))
		i0 =  ((__xasm<int>(push((i0+-4)), op(0x37))))
		i0 =  ((__xasm<int>(push((i0+4)), op(0x37))))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Async
public const __ZNSt9exceptionD0Ev:int = regFunc(FSM__ZNSt9exceptionD0Ev.start)

public final class FSM__ZNSt9exceptionD0Ev extends Machine {

	public static function start():void {
			var result:FSM__ZNSt9exceptionD0Ev = new FSM__ZNSt9exceptionD0Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZNSt9exceptionD0Ev_entry"))
		__asm(push(state), switchjump(
			"__ZNSt9exceptionD0Ev_errState",
			"__ZNSt9exceptionD0Ev_state0",
			"__ZNSt9exceptionD0Ev_state1"))
	__asm(lbl("__ZNSt9exceptionD0Ev_state0"))
	__asm(lbl("__ZNSt9exceptionD0Ev__XprivateX__BB90_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTVSt9exception)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		__asm(push(i1==0), iftrue, target("__ZNSt9exceptionD0Ev__XprivateX__BB90_2_F"))
	__asm(lbl("__ZNSt9exceptionD0Ev__XprivateX__BB90_1_F"))
		i0 =  (0)
		mstate.esp -= 8
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZNSt9exceptionD0Ev_state1"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__ZNSt9exceptionD0Ev__XprivateX__BB90_2_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZNSt9exceptionD0Ev_errState"))
		throw("Invalid state in __ZNSt9exceptionD0Ev")
	}
}



// Async
public const __ZNSt9exceptionD1Ev:int = regFunc(FSM__ZNSt9exceptionD1Ev.start)

public final class FSM__ZNSt9exceptionD1Ev extends Machine {

	public static function start():void {
			var result:FSM__ZNSt9exceptionD1Ev = new FSM__ZNSt9exceptionD1Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZNSt9exceptionD1Ev_entry"))
		__asm(push(state), switchjump(
			"__ZNSt9exceptionD1Ev_errState",
			"__ZNSt9exceptionD1Ev_state0"))
	__asm(lbl("__ZNSt9exceptionD1Ev_state0"))
	__asm(lbl("__ZNSt9exceptionD1Ev__XprivateX__BB91_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTVSt9exception)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZNSt9exceptionD1Ev_errState"))
		throw("Invalid state in __ZNSt9exceptionD1Ev")
	}
}



// Async
public const __ZNSt13bad_exceptionD0Ev:int = regFunc(FSM__ZNSt13bad_exceptionD0Ev.start)

public final class FSM__ZNSt13bad_exceptionD0Ev extends Machine {

	public static function start():void {
			var result:FSM__ZNSt13bad_exceptionD0Ev = new FSM__ZNSt13bad_exceptionD0Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZNSt13bad_exceptionD0Ev_entry"))
		__asm(push(state), switchjump(
			"__ZNSt13bad_exceptionD0Ev_errState",
			"__ZNSt13bad_exceptionD0Ev_state0",
			"__ZNSt13bad_exceptionD0Ev_state1"))
	__asm(lbl("__ZNSt13bad_exceptionD0Ev_state0"))
	__asm(lbl("__ZNSt13bad_exceptionD0Ev__XprivateX__BB92_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTVSt9exception)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		__asm(push(i1==0), iftrue, target("__ZNSt13bad_exceptionD0Ev__XprivateX__BB92_2_F"))
	__asm(lbl("__ZNSt13bad_exceptionD0Ev__XprivateX__BB92_1_F"))
		i0 =  (0)
		mstate.esp -= 8
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZNSt13bad_exceptionD0Ev_state1"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__ZNSt13bad_exceptionD0Ev__XprivateX__BB92_2_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZNSt13bad_exceptionD0Ev_errState"))
		throw("Invalid state in __ZNSt13bad_exceptionD0Ev")
	}
}



// Async
public const __ZNSt13bad_exceptionD1Ev:int = regFunc(FSM__ZNSt13bad_exceptionD1Ev.start)

public final class FSM__ZNSt13bad_exceptionD1Ev extends Machine {

	public static function start():void {
			var result:FSM__ZNSt13bad_exceptionD1Ev = new FSM__ZNSt13bad_exceptionD1Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZNSt13bad_exceptionD1Ev_entry"))
		__asm(push(state), switchjump(
			"__ZNSt13bad_exceptionD1Ev_errState",
			"__ZNSt13bad_exceptionD1Ev_state0"))
	__asm(lbl("__ZNSt13bad_exceptionD1Ev_state0"))
	__asm(lbl("__ZNSt13bad_exceptionD1Ev__XprivateX__BB93_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTVSt9exception)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZNSt13bad_exceptionD1Ev_errState"))
		throw("Invalid state in __ZNSt13bad_exceptionD1Ev")
	}
}



// Async
public const ___gxx_personality_v0:int = regFunc(FSM___gxx_personality_v0.start)

public final class FSM___gxx_personality_v0 extends Machine {

	public static function start():void {
			var result:FSM___gxx_personality_v0 = new FSM___gxx_personality_v0
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
	public var i8:int, i9:int

	public static const intRegCount:int = 10

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("___gxx_personality_v0_entry"))
		__asm(push(state), switchjump(
			"___gxx_personality_v0_errState",
			"___gxx_personality_v0_state0",
			"___gxx_personality_v0_state1",
			"___gxx_personality_v0_state2",
			"___gxx_personality_v0_state3",
			"___gxx_personality_v0_state4",
			"___gxx_personality_v0_state5",
			"___gxx_personality_v0_state6"))
	__asm(lbl("___gxx_personality_v0_state0"))
	__asm(lbl("___gxx_personality_v0__XprivateX__BB94_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 32
		i0 =  ((__xasm<int>(push((mstate.ebp+24)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+28)), op(0x37))))
		i3 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i4 =  ((__xasm<int>(push((mstate.ebp+20)), op(0x37))))
		i5 =  (i0 + 32)
		i6 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		__asm(push(i6!=1), iftrue, target("___gxx_personality_v0__XprivateX__BB94_25_F"))
	__asm(lbl("___gxx_personality_v0__XprivateX__BB94_1_F"))
		i6 =  (i4 ^ 1196315971)
		i7 =  (i3 ^ 1126902528)
		i6 =  (i7 | i6)
		__asm(push(i6!=0), iftrue, target("___gxx_personality_v0__XprivateX__BB94_27_F"))
	__asm(lbl("___gxx_personality_v0__XprivateX__BB94_2_F"))
		__asm(push(i1!=6), iftrue, target("___gxx_personality_v0__XprivateX__BB94_27_F"))
	__asm(lbl("___gxx_personality_v0__XprivateX__BB94_3_F"))
		i6 =  ((__xasm<int>(push((i5+-56)), op(0x37))))
		i7 =  ((__xasm<int>(push((i5+-48)), op(0x37))))
		i8 =  ((__xasm<int>(push((i5+-44)), op(0x37))))
		i9 =  (i5 + -44)
		i1 =  (i1 & 8)
		__asm(push(i1!=0), iftrue, target("___gxx_personality_v0__XprivateX__BB94_5_F"))
	__asm(lbl("___gxx_personality_v0__XprivateX__BB94_4_F"))
		i1 =  (i4 ^ 1196315971)
		i3 =  (i3 ^ 1126902528)
		i1 =  (i3 | i1)
		__asm(push(i1==0), iftrue, target("___gxx_personality_v0__XprivateX__BB94_9_F"))
		__asm(jump, target("___gxx_personality_v0__XprivateX__BB94_5_F"))
	__asm(lbl("___gxx_personality_v0__XprivateX__BB94_5_F"))
		__asm(push(i8!=0), iftrue, target("___gxx_personality_v0__XprivateX__BB94_7_F"))
	__asm(lbl("___gxx_personality_v0__XprivateX__BB94_6_F"))
		state = 1
		mstate.esp -= 4;FSM__ZSt9terminatev.start()
		return
	__asm(lbl("___gxx_personality_v0_state1"))
	__asm(lbl("___gxx_personality_v0__XprivateX__BB94_7_F"))
		__asm(push(i6>-1), iftrue, target("___gxx_personality_v0__XprivateX__BB94_24_F"))
	__asm(lbl("___gxx_personality_v0__XprivateX__BB94_8_F"))
		i0 =  (__ZSt9terminatev)
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM__ZN10__cxxabiv112__unexpectedEPFvvE.start()
		return
	__asm(lbl("___gxx_personality_v0_state2"))
		mstate.esp += 4
	__asm(lbl("___gxx_personality_v0__XprivateX__BB94_9_F"))
		__asm(push(i8!=0), iftrue, target("___gxx_personality_v0__XprivateX__BB94_11_F"))
	__asm(lbl("___gxx_personality_v0__XprivateX__BB94_10_F"))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 3
		mstate.esp -= 4;FSM___cxa_begin_catch.start()
		return
	__asm(lbl("___gxx_personality_v0_state3"))
		i2 = mstate.eax
		mstate.esp += 4
		i2 =  ((__xasm<int>(push((i5+-68)), op(0x37))))
		mstate.esp -= 4
		__asm(push(i2), push(mstate.esp), op(0x3c))
		state = 4
		mstate.esp -= 4;FSM__ZN10__cxxabiv111__terminateEPFvvE.start()
		return
	__asm(lbl("___gxx_personality_v0_state4"))
		mstate.esp += 4
	__asm(lbl("___gxx_personality_v0__XprivateX__BB94_11_F"))
		__asm(push(i6>-1), iftrue, target("___gxx_personality_v0__XprivateX__BB94_24_F"))
	__asm(lbl("___gxx_personality_v0__XprivateX__BB94_12_F"))
		i0 =  ((mstate.ebp+-32))
		mstate.esp -= 12
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i7), push((mstate.esp+4)), op(0x3c))
		__asm(push(i0), push((mstate.esp+8)), op(0x3c))
		state = 5
		mstate.esp -= 4;FSM__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.start()
		return
	__asm(lbl("___gxx_personality_v0_state5"))
		mstate.esp += 12
		i0 =  ((__xasm<int>(push((mstate.ebp+-12)), op(0x35))))
		__asm(push(i0==255), iftrue, target("___gxx_personality_v0__XprivateX__BB94_23_F"))
	__asm(lbl("___gxx_personality_v0__XprivateX__BB94_13_F"))
		i0 =  (i0 & 112)
		__asm(push(i0>47), iftrue, target("___gxx_personality_v0__XprivateX__BB94_18_F"))
	__asm(lbl("___gxx_personality_v0__XprivateX__BB94_14_F"))
		__asm(push(i0==0), iftrue, target("___gxx_personality_v0__XprivateX__BB94_23_F"))
	__asm(lbl("___gxx_personality_v0__XprivateX__BB94_15_F"))
		__asm(push(i0==16), iftrue, target("___gxx_personality_v0__XprivateX__BB94_23_F"))
	__asm(lbl("___gxx_personality_v0__XprivateX__BB94_16_F"))
		__asm(push(i0==32), iftrue, target("___gxx_personality_v0__XprivateX__BB94_17_F"))
		__asm(jump, target("___gxx_personality_v0__XprivateX__BB94_21_F"))
	__asm(lbl("___gxx_personality_v0__XprivateX__BB94_17_F"))
		i0 =  (__2E_str7103)
		i1 =  (4)
		//InlineAsmStart
	log(i1, mstate.gworker.stringFromPtr(i0))
	//InlineAsmEnd
		__asm(jump, target("___gxx_personality_v0__XprivateX__BB94_23_F"))
	__asm(lbl("___gxx_personality_v0__XprivateX__BB94_18_F"))
		__asm(push(i0==48), iftrue, target("___gxx_personality_v0__XprivateX__BB94_22_F"))
	__asm(lbl("___gxx_personality_v0__XprivateX__BB94_19_F"))
		__asm(push(i0==64), iftrue, target("___gxx_personality_v0__XprivateX__BB94_28_F"))
	__asm(lbl("___gxx_personality_v0__XprivateX__BB94_20_F"))
		__asm(push(i0==80), iftrue, target("___gxx_personality_v0__XprivateX__BB94_23_F"))
		__asm(jump, target("___gxx_personality_v0__XprivateX__BB94_21_F"))
	__asm(lbl("___gxx_personality_v0__XprivateX__BB94_21_F"))
		state = 6
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("___gxx_personality_v0_state6"))
	__asm(lbl("___gxx_personality_v0__XprivateX__BB94_22_F"))
		i0 =  (__2E_str10106)
		i1 =  (4)
		//InlineAsmStart
	log(i1, mstate.gworker.stringFromPtr(i0))
	//InlineAsmEnd
		__asm(jump, target("___gxx_personality_v0__XprivateX__BB94_23_F"))
	__asm(jump, target("___gxx_personality_v0__XprivateX__BB94_23_F"), lbl("___gxx_personality_v0__XprivateX__BB94_23_B"), label, lbl("___gxx_personality_v0__XprivateX__BB94_23_F")); 
		i0 =  (0)
		__asm(push(i0), push(i9), op(0x3c))
	__asm(lbl("___gxx_personality_v0__XprivateX__BB94_24_F"))
		i2 =  (__2E_str399)
		i3 =  (4)
		i0 = i2
		i1 = i3
		//InlineAsmStart
	log(i1, mstate.gworker.stringFromPtr(i0))
	//InlineAsmEnd
		i4 =  (__2E_str197)
		i0 = i2
		i1 = i3
		//InlineAsmStart
	log(i1, mstate.gworker.stringFromPtr(i0))
	//InlineAsmEnd
		i2 =  (7)
		i0 = i4
		i1 = i3
		//InlineAsmStart
	log(i1, mstate.gworker.stringFromPtr(i0))
	//InlineAsmEnd
		mstate.eax = i2
		__asm(jump, target("___gxx_personality_v0__XprivateX__BB94_26_F"))
	__asm(lbl("___gxx_personality_v0__XprivateX__BB94_25_F"))
		i0 =  (3)
		mstate.eax = i0
	__asm(jump, target("___gxx_personality_v0__XprivateX__BB94_26_F"), lbl("___gxx_personality_v0__XprivateX__BB94_26_B"), label, lbl("___gxx_personality_v0__XprivateX__BB94_26_F")); 
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("___gxx_personality_v0__XprivateX__BB94_27_F"))
		i0 =  (__2E_str9105)
		i2 =  (4)
		i5 =  (8)
		i1 = i2
		//InlineAsmStart
	log(i1, mstate.gworker.stringFromPtr(i0))
	//InlineAsmEnd
		mstate.eax = i5
		__asm(jump, target("___gxx_personality_v0__XprivateX__BB94_26_B"))
	__asm(lbl("___gxx_personality_v0__XprivateX__BB94_28_F"))
		i0 =  (__2E_str8104)
		i1 =  (4)
		//InlineAsmStart
	log(i1, mstate.gworker.stringFromPtr(i0))
	//InlineAsmEnd
		__asm(jump, target("___gxx_personality_v0__XprivateX__BB94_23_B"))
	__asm(lbl("___gxx_personality_v0_errState"))
		throw("Invalid state in ___gxx_personality_v0")
	}
}



// Async
public const __ZL28read_encoded_value_with_basehjPKhPj:int = regFunc(FSM__ZL28read_encoded_value_with_basehjPKhPj.start)

public final class FSM__ZL28read_encoded_value_with_basehjPKhPj extends Machine {

	public static function start():void {
			var result:FSM__ZL28read_encoded_value_with_basehjPKhPj = new FSM__ZL28read_encoded_value_with_basehjPKhPj
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
	public var i8:int, i9:int, i10:int

	public static const intRegCount:int = 11

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZL28read_encoded_value_with_basehjPKhPj_entry"))
		__asm(push(state), switchjump(
			"__ZL28read_encoded_value_with_basehjPKhPj_errState",
			"__ZL28read_encoded_value_with_basehjPKhPj_state0",
			"__ZL28read_encoded_value_with_basehjPKhPj_state1"))
	__asm(lbl("__ZL28read_encoded_value_with_basehjPKhPj_state0"))
	__asm(lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x35), op(0x51))))
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i3 =  ((__xasm<int>(push((mstate.ebp+20)), op(0x37))))
		i4 = i2
		i5 =  (i0 & 255)
		__asm(push(i5!=80), iftrue, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_2_F"))
	__asm(lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_1_F"))
		i0 =  (i2 + 3)
		i0 =  (i0 & -4)
		i1 =  ((__xasm<int>(push(i0), op(0x37))))
		__asm(push(i1), push(i3), op(0x3c))
		i0 =  (i0 + 4)
		__asm(jump, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_57_F"))
	__asm(lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_2_F"))
		i5 =  (i0 & 15)
		i6 =  (i0 & 255)
		__asm(push(i5>3), iftrue, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_13_F"))
	__asm(lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_3_F"))
		__asm(push(i5>1), iftrue, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_9_F"))
	__asm(lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_4_F"))
		__asm(push(i5==0), iftrue, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_23_F"))
	__asm(lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_5_F"))
		__asm(push(i5==1), iftrue, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_6_F"))
		__asm(jump, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_22_F"))
	__asm(lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_6_F"))
		i5 =  (0)
		i7 = i5
		i8 = i5
		__asm(jump, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_7_F"))
	__asm(jump, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_7_F"), lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_7_B"), label, lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_7_F")); 
		i9 =  (i4 + i8)
		i9 =  ((__xasm<int>(push(i9), op(0x35))))
		i10 =  (i9 & 127)
		i10 =  (i10 << i7)
		i7 =  (i7 + 7)
		i8 =  (i8 + 1)
		i5 =  (i10 | i5)
		i9 =  (i9 << 24)
		i9 =  (i9 >> 24)
		__asm(push(i9>-1), iftrue, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_25_F"))
		__asm(jump, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_8_F"))
	__asm(lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_8_F"))
		__asm(jump, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_7_B"))
	__asm(lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_9_F"))
		__asm(push(i5==2), iftrue, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_35_F"))
	__asm(lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_10_F"))
		__asm(push(i5==3), iftrue, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_11_F"))
		__asm(jump, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_22_F"))
	__asm(lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_11_F"))
		i5 =  ((__xasm<int>(push((i2+3)), op(0x35))))
		i7 =  ((__xasm<int>(push((i2+1)), op(0x35))))
		i8 =  ((__xasm<int>(push((i2+2)), op(0x35))))
		i5 =  (i5 << 8)
		i9 =  ((__xasm<int>(push(i2), op(0x35))))
		i7 =  (i7 << 8)
		i5 =  (i5 | i8)
		i7 =  (i7 | i9)
		i5 =  (i5 << 16)
		i5 =  (i5 | i7)
		i7 =  (i2 + 4)
		__asm(push(i5==0), iftrue, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_38_F"))
		__asm(jump, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_12_F"))
	__asm(lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_12_F"))
		__asm(jump, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_50_F"))
	__asm(lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_13_F"))
		__asm(push(i5>9), iftrue, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_19_F"))
	__asm(lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_14_F"))
		__asm(push(i5==4), iftrue, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_39_F"))
	__asm(lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_15_F"))
		__asm(push(i5==9), iftrue, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_16_F"))
		__asm(jump, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_22_F"))
	__asm(lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_16_F"))
		i5 =  (0)
		i7 = i5
		i8 = i5
		__asm(jump, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_17_F"))
	__asm(jump, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_17_F"), lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_17_B"), label, lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_17_F")); 
		i9 =  (i4 + i8)
		i9 =  ((__xasm<int>(push(i9), op(0x35))))
		i10 =  (i9 & 127)
		i10 =  (i10 << i7)
		i7 =  (i7 + 7)
		i8 =  (i8 + 1)
		i5 =  (i10 | i5)
		i10 =  (i9 << 24)
		i10 =  (i10 >> 24)
		__asm(push(i10>-1), iftrue, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_28_F"))
		__asm(jump, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_18_F"))
	__asm(lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_18_F"))
		__asm(jump, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_17_B"))
	__asm(lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_19_F"))
		__asm(push(i5==10), iftrue, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_42_F"))
	__asm(lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_20_F"))
		__asm(push(i5==11), iftrue, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_45_F"))
	__asm(lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_21_F"))
		__asm(push(i5==12), iftrue, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_48_F"))
		__asm(jump, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_22_F"))
	__asm(lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_22_F"))
		state = 1
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZL28read_encoded_value_with_basehjPKhPj_state1"))
	__asm(lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_23_F"))
		i5 =  ((__xasm<int>(push((i2+3)), op(0x35))))
		i7 =  ((__xasm<int>(push((i2+1)), op(0x35))))
		i8 =  ((__xasm<int>(push((i2+2)), op(0x35))))
		i5 =  (i5 << 8)
		i9 =  ((__xasm<int>(push(i2), op(0x35))))
		i7 =  (i7 << 8)
		i5 =  (i5 | i8)
		i7 =  (i7 | i9)
		i5 =  (i5 << 16)
		i5 =  (i5 | i7)
		i7 =  (i2 + 4)
		__asm(push(i5==0), iftrue, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_55_F"))
	__asm(lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_24_F"))
		__asm(jump, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_50_F"))
	__asm(lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_25_F"))
		i7 =  (i2 + i8)
		__asm(push(i5==0), iftrue, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_27_F"))
	__asm(lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_26_F"))
		__asm(jump, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_50_F"))
	__asm(lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_27_F"))
		__asm(jump, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_56_F"))
	__asm(lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_28_F"))
		i2 =  (i2 + i8)
		i8 = i7
		__asm(push(uint(i7)<uint(32)), iftrue, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_30_F"))
	__asm(jump, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_29_F"), lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_29_B"), label, lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_29_F")); 
		__asm(jump, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_32_F"))
	__asm(lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_30_F"))
		i7 =  (i9 & 64)
		__asm(push(i7==0), iftrue, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_29_B"))
	__asm(lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_31_F"))
		i7 =  (1)
		i7 =  (i7 << i8)
		i7 =  (0 - i7)
		i5 =  (i5 | i7)
	__asm(lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_32_F"))
		__asm(push(i5==0), iftrue, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_34_F"))
	__asm(lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_33_F"))
		i7 = i2
		__asm(jump, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_50_F"))
	__asm(lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_34_F"))
		i7 = i2
		__asm(jump, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_56_F"))
	__asm(lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_35_F"))
		i5 =  ((__xasm<int>(push((i2+1)), op(0x35))))
		i7 =  ((__xasm<int>(push(i2), op(0x35))))
		i5 =  (i5 << 8)
		i5 =  (i5 | i7)
		i5 =  (i5 & 65535)
		i7 =  (i2 + 2)
		__asm(push(i5==0), iftrue, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_37_F"))
	__asm(lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_36_F"))
		__asm(jump, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_50_F"))
	__asm(lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_37_F"))
		__asm(jump, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_56_F"))
	__asm(lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_38_F"))
		__asm(jump, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_56_F"))
	__asm(lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_39_F"))
		i5 =  ((__xasm<int>(push((i2+3)), op(0x35))))
		i7 =  ((__xasm<int>(push((i2+1)), op(0x35))))
		i8 =  ((__xasm<int>(push((i2+2)), op(0x35))))
		i5 =  (i5 << 8)
		i9 =  ((__xasm<int>(push(i2), op(0x35))))
		i7 =  (i7 << 8)
		i5 =  (i5 | i8)
		i7 =  (i7 | i9)
		i5 =  (i5 << 16)
		i5 =  (i5 | i7)
		i7 =  (i2 + 8)
		__asm(push(i5==0), iftrue, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_41_F"))
	__asm(lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_40_F"))
		__asm(jump, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_50_F"))
	__asm(lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_41_F"))
		__asm(jump, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_56_F"))
	__asm(lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_42_F"))
		i5 =  ((__xasm<int>(push((i2+1)), op(0x35))))
		i7 =  ((__xasm<int>(push(i2), op(0x35))))
		i5 =  (i5 << 8)
		i5 =  (i5 | i7)
		i7 =  (i5 << 16)
		i8 =  (i7 >> 16)
		i7 =  (i2 + 2)
		i5 =  (i5 & 65535)
		__asm(push(i5==0), iftrue, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_44_F"))
	__asm(lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_43_F"))
		i5 = i8
		__asm(jump, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_50_F"))
	__asm(lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_44_F"))
		i5 = i8
		__asm(jump, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_56_F"))
	__asm(lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_45_F"))
		i5 =  ((__xasm<int>(push((i2+3)), op(0x35))))
		i7 =  ((__xasm<int>(push((i2+1)), op(0x35))))
		i8 =  ((__xasm<int>(push((i2+2)), op(0x35))))
		i5 =  (i5 << 8)
		i9 =  ((__xasm<int>(push(i2), op(0x35))))
		i7 =  (i7 << 8)
		i5 =  (i5 | i8)
		i7 =  (i7 | i9)
		i5 =  (i5 << 16)
		i5 =  (i5 | i7)
		i7 =  (i2 + 4)
		__asm(push(i5==0), iftrue, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_47_F"))
	__asm(lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_46_F"))
		__asm(jump, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_50_F"))
	__asm(lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_47_F"))
		__asm(jump, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_56_F"))
	__asm(lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_48_F"))
		i5 =  ((__xasm<int>(push((i2+3)), op(0x35))))
		i7 =  ((__xasm<int>(push((i2+1)), op(0x35))))
		i8 =  ((__xasm<int>(push((i2+2)), op(0x35))))
		i5 =  (i5 << 8)
		i9 =  ((__xasm<int>(push(i2), op(0x35))))
		i7 =  (i7 << 8)
		i5 =  (i5 | i8)
		i7 =  (i7 | i9)
		i5 =  (i5 << 16)
		i5 =  (i5 | i7)
		i7 =  (i2 + 8)
		__asm(push(i5==0), iftrue, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_59_F"))
	__asm(lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_49_F"))
		__asm(jump, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_50_F"))
	__asm(lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_50_F"))
		i2 =  (i6 & 112)
		__asm(push(i2==16), iftrue, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_52_F"))
	__asm(lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_51_F"))
		i4 = i1
		__asm(jump, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_52_F"))
	__asm(lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_52_F"))
		i1 = i4
		i0 =  (i0 << 24)
		i5 =  (i1 + i5)
		i0 =  (i0 >> 24)
		__asm(push(i0<0), iftrue, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_54_F"))
	__asm(lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_53_F"))
		__asm(jump, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_56_F"))
	__asm(lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_54_F"))
		i5 =  ((__xasm<int>(push(i5), op(0x37))))
		__asm(push(i5), push(i3), op(0x3c))
		mstate.eax = i7
		__asm(jump, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_58_F"))
	__asm(lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_55_F"))
		__asm(jump, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_56_F"))
	__asm(jump, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_56_F"), lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_56_B"), label, lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_56_F")); 
		i0 = i7
		i1 = i5
		__asm(push(i1), push(i3), op(0x3c))
	__asm(lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_57_F"))
		mstate.eax = i0
	__asm(lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_58_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_59_F"))
		__asm(jump, target("__ZL28read_encoded_value_with_basehjPKhPj__XprivateX__BB95_56_B"))
	__asm(lbl("__ZL28read_encoded_value_with_basehjPKhPj_errState"))
		throw("Invalid state in __ZL28read_encoded_value_with_basehjPKhPj")
	}
}



// Async
public const __ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info:int = regFunc(FSM__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.start)

public final class FSM__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info extends Machine {

	public static function start():void {
			var result:FSM__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info = new FSM__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int

	public static const intRegCount:int = 8

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info_entry"))
		__asm(push(state), switchjump(
			"__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info_errState",
			"__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info_state0",
			"__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info_state1",
			"__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info_state2"))
	__asm(lbl("__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info_state0"))
	__asm(lbl("__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info__XprivateX__BB96_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i2 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i3 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info__XprivateX__BB96_2_F"))
	__asm(lbl("__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info__XprivateX__BB96_1_F"))
		i0 =  (__2E_str8104)
		i1 =  (4)
		//InlineAsmStart
	log(i1, mstate.gworker.stringFromPtr(i0))
	//InlineAsmEnd
	__asm(lbl("__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info__XprivateX__BB96_2_F"))
		i0 =  (0)
		__asm(push(i0), push(i3), op(0x3c))
		i4 =  ((__xasm<int>(push(i2), op(0x35))))
		i5 =  (i3 + 4)
		i2 =  (i2 + 1)
		__asm(push(i4==255), iftrue, target("__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info__XprivateX__BB96_14_F"))
	__asm(lbl("__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info__XprivateX__BB96_3_F"))
		i0 =  (i4 & 112)
		__asm(push(i0>47), iftrue, target("__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info__XprivateX__BB96_8_F"))
	__asm(lbl("__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info__XprivateX__BB96_4_F"))
		__asm(push(i0==0), iftrue, target("__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info__XprivateX__BB96_13_F"))
	__asm(lbl("__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info__XprivateX__BB96_5_F"))
		__asm(push(i0==16), iftrue, target("__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info__XprivateX__BB96_13_F"))
	__asm(lbl("__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info__XprivateX__BB96_6_F"))
		__asm(push(i0==32), iftrue, target("__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info__XprivateX__BB96_7_F"))
		__asm(jump, target("__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info__XprivateX__BB96_11_F"))
	__asm(lbl("__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info__XprivateX__BB96_7_F"))
		i0 =  (__2E_str7103)
		i1 =  (4)
		//InlineAsmStart
	log(i1, mstate.gworker.stringFromPtr(i0))
	//InlineAsmEnd
		__asm(jump, target("__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info__XprivateX__BB96_13_F"))
	__asm(lbl("__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info__XprivateX__BB96_8_F"))
		__asm(push(i0==48), iftrue, target("__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info__XprivateX__BB96_12_F"))
	__asm(lbl("__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info__XprivateX__BB96_9_F"))
		__asm(push(i0==64), iftrue, target("__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info__XprivateX__BB96_25_F"))
	__asm(lbl("__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info__XprivateX__BB96_10_F"))
		__asm(push(i0==80), iftrue, target("__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info__XprivateX__BB96_13_F"))
		__asm(jump, target("__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info__XprivateX__BB96_11_F"))
	__asm(lbl("__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info__XprivateX__BB96_11_F"))
		state = 1
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info_state1"))
	__asm(lbl("__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info__XprivateX__BB96_12_F"))
		i0 =  (__2E_str10106)
		i1 =  (4)
		//InlineAsmStart
	log(i1, mstate.gworker.stringFromPtr(i0))
	//InlineAsmEnd
		__asm(jump, target("__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info__XprivateX__BB96_13_F"))
	__asm(jump, target("__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info__XprivateX__BB96_13_F"), lbl("__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info__XprivateX__BB96_13_B"), label, lbl("__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info__XprivateX__BB96_13_F")); 
		i0 =  (0)
		mstate.esp -= 16
		i1 =  (i4 & 255)
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i5), push((mstate.esp+12)), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM__ZL28read_encoded_value_with_basehjPKhPj.start()
		return
	__asm(lbl("__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info_state2"))
		i2 = mstate.eax
		mstate.esp += 16
		__asm(jump, target("__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info__XprivateX__BB96_15_F"))
	__asm(lbl("__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info__XprivateX__BB96_14_F"))
		i0 =  (0)
		__asm(push(i0), push(i5), op(0x3c))
	__asm(lbl("__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info__XprivateX__BB96_15_F"))
		i0 = i2
		i1 =  ((__xasm<int>(push(i0), op(0x35))))
		__asm(push(i1), push((i3+20)), op(0x3a))
		i2 =  (i0 + 1)
		i4 = i0
		__asm(push(i1==255), iftrue, target("__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info__XprivateX__BB96_20_F"))
	__asm(lbl("__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info__XprivateX__BB96_16_F"))
		i2 =  (0)
		i1 = i2
		i5 = i2
	__asm(jump, target("__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info__XprivateX__BB96_17_F"), lbl("__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info__XprivateX__BB96_17_B"), label, lbl("__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info__XprivateX__BB96_17_F")); 
		i6 =  (i4 + i5)
		i6 =  ((__xasm<int>(push((i6+1)), op(0x35))))
		i7 =  (i6 & 127)
		i7 =  (i7 << i1)
		i1 =  (i1 + 7)
		i5 =  (i5 + 1)
		i2 =  (i7 | i2)
		i6 =  (i6 << 24)
		i6 =  (i6 >> 24)
		__asm(push(i6>-1), iftrue, target("__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info__XprivateX__BB96_19_F"))
	__asm(lbl("__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info__XprivateX__BB96_18_F"))
		__asm(jump, target("__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info__XprivateX__BB96_17_B"))
	__asm(lbl("__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info__XprivateX__BB96_19_F"))
		i1 =  (i5 + 1)
		i2 =  (i1 + i2)
		i2 =  (i0 + i2)
		__asm(push(i2), push((i3+12)), op(0x3c))
		i2 =  (i0 + i1)
		__asm(jump, target("__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info__XprivateX__BB96_21_F"))
	__asm(lbl("__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info__XprivateX__BB96_20_F"))
		i0 =  (0)
		__asm(push(i0), push((i3+12)), op(0x3c))
	__asm(lbl("__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info__XprivateX__BB96_21_F"))
		i0 = i2
		i1 =  (0)
		i2 =  ((__xasm<int>(push(i0), op(0x35))))
		__asm(push(i2), push((i3+21)), op(0x3a))
		i2 = i0
		i4 = i1
		i5 = i1
	__asm(jump, target("__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info__XprivateX__BB96_22_F"), lbl("__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info__XprivateX__BB96_22_B"), label, lbl("__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info__XprivateX__BB96_22_F")); 
		i6 =  (i2 + i5)
		i6 =  ((__xasm<int>(push((i6+1)), op(0x35))))
		i7 =  (i6 & 127)
		i7 =  (i7 << i4)
		i4 =  (i4 + 7)
		i5 =  (i5 + 1)
		i1 =  (i7 | i1)
		i6 =  (i6 << 24)
		i6 =  (i6 >> 24)
		__asm(push(i6>-1), iftrue, target("__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info__XprivateX__BB96_24_F"))
	__asm(lbl("__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info__XprivateX__BB96_23_F"))
		__asm(jump, target("__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info__XprivateX__BB96_22_B"))
	__asm(lbl("__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info__XprivateX__BB96_24_F"))
		i1 =  (i5 + i1)
		i0 =  (i1 + i0)
		i0 =  (i0 + 1)
		__asm(push(i0), push((i3+16)), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info__XprivateX__BB96_25_F"))
		i0 =  (__2E_str8104)
		i1 =  (4)
		//InlineAsmStart
	log(i1, mstate.gworker.stringFromPtr(i0))
	//InlineAsmEnd
		__asm(jump, target("__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info__XprivateX__BB96_13_B"))
	__asm(lbl("__ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info_errState"))
		throw("Invalid state in __ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info")
	}
}



// Async
public const __ZN10__cxxabiv112__unexpectedEPFvvE:int = regFunc(FSM__ZN10__cxxabiv112__unexpectedEPFvvE.start)

public final class FSM__ZN10__cxxabiv112__unexpectedEPFvvE extends Machine {

	public static function start():void {
			var result:FSM__ZN10__cxxabiv112__unexpectedEPFvvE = new FSM__ZN10__cxxabiv112__unexpectedEPFvvE
		gstate.gworker = result
	}

	public var i0:int

	public static const intRegCount:int = 1

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN10__cxxabiv112__unexpectedEPFvvE_entry"))
		__asm(push(state), switchjump(
			"__ZN10__cxxabiv112__unexpectedEPFvvE_errState",
			"__ZN10__cxxabiv112__unexpectedEPFvvE_state0",
			"__ZN10__cxxabiv112__unexpectedEPFvvE_state1",
			"__ZN10__cxxabiv112__unexpectedEPFvvE_state2"))
	__asm(lbl("__ZN10__cxxabiv112__unexpectedEPFvvE_state0"))
	__asm(lbl("__ZN10__cxxabiv112__unexpectedEPFvvE__XprivateX__BB97_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		state = 1
		mstate.esp -= 4;(mstate.funcs[i0])()
		return
	__asm(lbl("__ZN10__cxxabiv112__unexpectedEPFvvE_state1"))
		state = 2
		mstate.esp -= 4;FSM__ZSt9terminatev.start()
		return
	__asm(lbl("__ZN10__cxxabiv112__unexpectedEPFvvE_state2"))
	__asm(lbl("__ZN10__cxxabiv112__unexpectedEPFvvE_errState"))
		throw("Invalid state in __ZN10__cxxabiv112__unexpectedEPFvvE")
	}
}



// Async
public const ___cxa_rethrow:int = regFunc(FSM___cxa_rethrow.start)

public final class FSM___cxa_rethrow extends Machine {

	public static function start():void {
			var result:FSM___cxa_rethrow = new FSM___cxa_rethrow
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int

	public static const intRegCount:int = 5

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("___cxa_rethrow_entry"))
		__asm(push(state), switchjump(
			"___cxa_rethrow_errState",
			"___cxa_rethrow_state0",
			"___cxa_rethrow_state1",
			"___cxa_rethrow_state2",
			"___cxa_rethrow_state3",
			"___cxa_rethrow_state4",
			"___cxa_rethrow_state5"))
	__asm(lbl("___cxa_rethrow_state0"))
	__asm(lbl("___cxa_rethrow__XprivateX__BB98_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		state = 1
		mstate.esp -= 4;FSM___cxa_get_globals.start()
		return
	__asm(lbl("___cxa_rethrow_state1"))
		i0 = mstate.eax
		i1 =  ((__xasm<int>(push(i0), op(0x37))))
		__asm(push(i1==0), iftrue, target("___cxa_rethrow__XprivateX__BB98_5_F"))
	__asm(lbl("___cxa_rethrow__XprivateX__BB98_1_F"))
		i2 =  ((__xasm<int>(push((i1+48)), op(0x37))))
		i3 =  ((__xasm<int>(push((i1+52)), op(0x37))))
		i3 =  (i3 ^ 1196315971)
		i2 =  (i2 ^ 1126902528)
		i4 =  (i1 + 48)
		i2 =  (i2 | i3)
		__asm(push(i2==0), iftrue, target("___cxa_rethrow__XprivateX__BB98_3_F"))
	__asm(lbl("___cxa_rethrow__XprivateX__BB98_2_F"))
		i1 =  (0)
		__asm(push(i1), push(i0), op(0x3c))
		i1 =  (__2E_str5101)
		i2 =  (4)
		i0 = i1
		i1 = i2
		//InlineAsmStart
	log(i1, mstate.gworker.stringFromPtr(i0))
	//InlineAsmEnd
		mstate.esp -= 4
		__asm(push(i4), push(mstate.esp), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM___cxa_begin_catch.start()
		return
	__asm(lbl("___cxa_rethrow_state2"))
		i1 = mstate.eax
		__asm(jump, target("___cxa_rethrow__XprivateX__BB98_4_F"))
	__asm(lbl("___cxa_rethrow__XprivateX__BB98_3_F"))
		i0 =  (__2E_str5101)
		i2 =  ((__xasm<int>(push((i1+20)), op(0x37))))
		i2 =  (0 - i2)
		__asm(push(i2), push((i1+20)), op(0x3c))
		i1 =  (4)
		//InlineAsmStart
	log(i1, mstate.gworker.stringFromPtr(i0))
	//InlineAsmEnd
		mstate.esp -= 4
		__asm(push(i4), push(mstate.esp), op(0x3c))
		state = 3
		mstate.esp -= 4;FSM___cxa_begin_catch.start()
		return
	__asm(lbl("___cxa_rethrow_state3"))
		i0 = mstate.eax
	__asm(lbl("___cxa_rethrow__XprivateX__BB98_4_F"))
		mstate.esp += 4
		state = 4
		mstate.esp -= 4;FSM__ZSt9terminatev.start()
		return
	__asm(lbl("___cxa_rethrow_state4"))
	__asm(lbl("___cxa_rethrow__XprivateX__BB98_5_F"))
		state = 5
		mstate.esp -= 4;FSM__ZSt9terminatev.start()
		return
	__asm(lbl("___cxa_rethrow_state5"))
	__asm(lbl("___cxa_rethrow_errState"))
		throw("Invalid state in ___cxa_rethrow")
	}
}



// Async
public const __ZN10__cxxabiv111__terminateEPFvvE:int = regFunc(FSM__ZN10__cxxabiv111__terminateEPFvvE.start)

public final class FSM__ZN10__cxxabiv111__terminateEPFvvE extends Machine {

	public static function start():void {
			var result:FSM__ZN10__cxxabiv111__terminateEPFvvE = new FSM__ZN10__cxxabiv111__terminateEPFvvE
		gstate.gworker = result
	}

	public var i0:int

	public static const intRegCount:int = 1

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN10__cxxabiv111__terminateEPFvvE_entry"))
		__asm(push(state), switchjump(
			"__ZN10__cxxabiv111__terminateEPFvvE_errState",
			"__ZN10__cxxabiv111__terminateEPFvvE_state0",
			"__ZN10__cxxabiv111__terminateEPFvvE_state1",
			"__ZN10__cxxabiv111__terminateEPFvvE_state2"))
	__asm(lbl("__ZN10__cxxabiv111__terminateEPFvvE_state0"))
	__asm(lbl("__ZN10__cxxabiv111__terminateEPFvvE__XprivateX__BB99_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		state = 1
		mstate.esp -= 4;(mstate.funcs[i0])()
		return
	__asm(lbl("__ZN10__cxxabiv111__terminateEPFvvE_state1"))
	__asm(lbl("__ZN10__cxxabiv111__terminateEPFvvE__XprivateX__BB99_1_F"))
		state = 2
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZN10__cxxabiv111__terminateEPFvvE_state2"))
	__asm(lbl("__ZN10__cxxabiv111__terminateEPFvvE__XprivateX__BB99_2_F"))
	__asm(lbl("__ZN10__cxxabiv111__terminateEPFvvE_errState"))
		throw("Invalid state in __ZN10__cxxabiv111__terminateEPFvvE")
	}
}



// Async
public const __ZN9__gnu_cxx27__verbose_terminate_handlerEv:int = regFunc(FSM__ZN9__gnu_cxx27__verbose_terminate_handlerEv.start)

public final class FSM__ZN9__gnu_cxx27__verbose_terminate_handlerEv extends Machine {

	public static function start():void {
			var result:FSM__ZN9__gnu_cxx27__verbose_terminate_handlerEv = new FSM__ZN9__gnu_cxx27__verbose_terminate_handlerEv
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int

	public static const intRegCount:int = 4

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN9__gnu_cxx27__verbose_terminate_handlerEv_entry"))
		__asm(push(state), switchjump(
			"__ZN9__gnu_cxx27__verbose_terminate_handlerEv_errState",
			"__ZN9__gnu_cxx27__verbose_terminate_handlerEv_state0",
			"__ZN9__gnu_cxx27__verbose_terminate_handlerEv_state1",
			"__ZN9__gnu_cxx27__verbose_terminate_handlerEv_state2",
			"__ZN9__gnu_cxx27__verbose_terminate_handlerEv_state3",
			"__ZN9__gnu_cxx27__verbose_terminate_handlerEv_state4",
			"__ZN9__gnu_cxx27__verbose_terminate_handlerEv_state5",
			"__ZN9__gnu_cxx27__verbose_terminate_handlerEv_state6",
			"__ZN9__gnu_cxx27__verbose_terminate_handlerEv_state7"))
	__asm(lbl("__ZN9__gnu_cxx27__verbose_terminate_handlerEv_state0"))
	__asm(lbl("__ZN9__gnu_cxx27__verbose_terminate_handlerEv__XprivateX__BB100_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 224
		i0 =  ((__xasm<int>(push(__ZZN9__gnu_cxx27__verbose_terminate_handlerEvE11terminating_2E_b), op(0x35))))
		i0 =  (i0 ^ 1)
		i0 =  (i0 & 1)
		__asm(push(i0!=0), iftrue, target("__ZN9__gnu_cxx27__verbose_terminate_handlerEv__XprivateX__BB100_5_F"))
	__asm(lbl("__ZN9__gnu_cxx27__verbose_terminate_handlerEv__XprivateX__BB100_1_F"))
		i0 =  (__2E_str3100)
		__asm(push(i0), push((mstate.ebp+-200)), op(0x3c))
		i0 =  (29)
		__asm(push(i0), push((mstate.ebp+-196)), op(0x3c))
		__asm(push(i0), push((mstate.ebp+-216)), op(0x3c))
		i0 =  ((mstate.ebp+-200))
		__asm(push(i0), push((mstate.ebp+-224)), op(0x3c))
		i0 =  (1)
		__asm(push(i0), push((mstate.ebp+-220)), op(0x3c))
		i0 =  ((__xasm<int>(push((___sF+232)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+16)), op(0x37))))
		i0 =  (i0 + 16)
		__asm(push(i1!=0), iftrue, target("__ZN9__gnu_cxx27__verbose_terminate_handlerEv__XprivateX__BB100_3_F"))
	__asm(lbl("__ZN9__gnu_cxx27__verbose_terminate_handlerEv__XprivateX__BB100_2_F"))
		i1 =  (-1)
		__asm(push(i1), push(i0), op(0x3c))
	__asm(lbl("__ZN9__gnu_cxx27__verbose_terminate_handlerEv__XprivateX__BB100_3_F"))
		i0 =  (___sF)
		mstate.esp -= 8
		i1 =  ((mstate.ebp+-224))
	__asm(jump, target("__ZN9__gnu_cxx27__verbose_terminate_handlerEv__XprivateX__BB100_4_F"), lbl("__ZN9__gnu_cxx27__verbose_terminate_handlerEv__XprivateX__BB100_4_B"), label, lbl("__ZN9__gnu_cxx27__verbose_terminate_handlerEv__XprivateX__BB100_4_F")); 
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM___sfvwrite.start()
		return
	__asm(lbl("__ZN9__gnu_cxx27__verbose_terminate_handlerEv_state1"))
		i0 = mstate.eax
		mstate.esp += 8
		state = 2
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZN9__gnu_cxx27__verbose_terminate_handlerEv_state2"))
	__asm(lbl("__ZN9__gnu_cxx27__verbose_terminate_handlerEv__XprivateX__BB100_5_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZZN9__gnu_cxx27__verbose_terminate_handlerEvE11terminating_2E_b), op(0x3a))
		state = 3
		mstate.esp -= 4;FSM___cxa_get_globals.start()
		return
	__asm(lbl("__ZN9__gnu_cxx27__verbose_terminate_handlerEv_state3"))
		i0 = mstate.eax
		i0 =  ((__xasm<int>(push(i0), op(0x37))))
		__asm(push(i0!=0), iftrue, target("__ZN9__gnu_cxx27__verbose_terminate_handlerEv__XprivateX__BB100_7_F"))
	__asm(lbl("__ZN9__gnu_cxx27__verbose_terminate_handlerEv__XprivateX__BB100_6_F"))
		i0 =  (0)
		__asm(jump, target("__ZN9__gnu_cxx27__verbose_terminate_handlerEv__XprivateX__BB100_8_F"))
	__asm(lbl("__ZN9__gnu_cxx27__verbose_terminate_handlerEv__XprivateX__BB100_7_F"))
		i0 =  ((__xasm<int>(push(i0), op(0x37))))
	__asm(lbl("__ZN9__gnu_cxx27__verbose_terminate_handlerEv__XprivateX__BB100_8_F"))
		__asm(push(i0==0), iftrue, target("__ZN9__gnu_cxx27__verbose_terminate_handlerEv__XprivateX__BB100_15_F"))
	__asm(lbl("__ZN9__gnu_cxx27__verbose_terminate_handlerEv__XprivateX__BB100_9_F"))
		i1 =  (__2E_str1101)
		i0 =  ((__xasm<int>(push((i0+4)), op(0x37))))
		__asm(push(i1), push((mstate.ebp+-168)), op(0x3c))
		i1 =  (48)
		__asm(push(i1), push((mstate.ebp+-164)), op(0x3c))
		__asm(push(i1), push((mstate.ebp+-184)), op(0x3c))
		i1 =  ((mstate.ebp+-168))
		__asm(push(i1), push((mstate.ebp+-192)), op(0x3c))
		i1 =  (1)
		__asm(push(i1), push((mstate.ebp+-188)), op(0x3c))
		i1 =  ((__xasm<int>(push((___sF+232)), op(0x37))))
		i2 =  ((__xasm<int>(push((i1+16)), op(0x37))))
		i1 =  (i1 + 16)
		i3 = i0
		__asm(push(i2!=0), iftrue, target("__ZN9__gnu_cxx27__verbose_terminate_handlerEv__XprivateX__BB100_11_F"))
	__asm(lbl("__ZN9__gnu_cxx27__verbose_terminate_handlerEv__XprivateX__BB100_10_F"))
		i2 =  (-1)
		__asm(push(i2), push(i1), op(0x3c))
	__asm(lbl("__ZN9__gnu_cxx27__verbose_terminate_handlerEv__XprivateX__BB100_11_F"))
		i1 =  (___sF)
		mstate.esp -= 8
		i2 =  ((mstate.ebp+-192))
		i1 =  (i1 + 176)
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i2), push((mstate.esp+4)), op(0x3c))
		state = 4
		mstate.esp -= 4;FSM___sfvwrite.start()
		return
	__asm(lbl("__ZN9__gnu_cxx27__verbose_terminate_handlerEv_state4"))
		i1 = mstate.eax
		mstate.esp += 8
		__asm(push(i3), push((mstate.ebp+-136)), op(0x3c))
		i1 =  ((__xasm<int>(push(i3), op(0x35))))
		__asm(push(i1==0), iftrue, target("__ZN9__gnu_cxx27__verbose_terminate_handlerEv__XprivateX__BB100_18_F"))
	__asm(lbl("__ZN9__gnu_cxx27__verbose_terminate_handlerEv__XprivateX__BB100_12_F"))
		i3 = i0
		__asm(jump, target("__ZN9__gnu_cxx27__verbose_terminate_handlerEv__XprivateX__BB100_13_F"))
	__asm(jump, target("__ZN9__gnu_cxx27__verbose_terminate_handlerEv__XprivateX__BB100_13_F"), lbl("__ZN9__gnu_cxx27__verbose_terminate_handlerEv__XprivateX__BB100_13_B"), label, lbl("__ZN9__gnu_cxx27__verbose_terminate_handlerEv__XprivateX__BB100_13_F")); 
		i1 =  ((__xasm<int>(push((i3+1)), op(0x35))))
		i3 =  (i3 + 1)
		i2 = i3
		__asm(push(i1==0), iftrue, target("__ZN9__gnu_cxx27__verbose_terminate_handlerEv__XprivateX__BB100_19_F"))
	__asm(lbl("__ZN9__gnu_cxx27__verbose_terminate_handlerEv__XprivateX__BB100_14_F"))
		i3 = i2
		__asm(jump, target("__ZN9__gnu_cxx27__verbose_terminate_handlerEv__XprivateX__BB100_13_B"))
	__asm(lbl("__ZN9__gnu_cxx27__verbose_terminate_handlerEv__XprivateX__BB100_15_F"))
		i0 =  (__2E_str4104)
		__asm(push(i0), push((mstate.ebp+-104)), op(0x3c))
		i0 =  (45)
		__asm(push(i0), push((mstate.ebp+-100)), op(0x3c))
		__asm(push(i0), push((mstate.ebp+-120)), op(0x3c))
		i0 =  ((mstate.ebp+-104))
		__asm(push(i0), push((mstate.ebp+-128)), op(0x3c))
		i0 =  (1)
		__asm(push(i0), push((mstate.ebp+-124)), op(0x3c))
		i0 =  ((__xasm<int>(push((___sF+232)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+16)), op(0x37))))
		i0 =  (i0 + 16)
		__asm(push(i1!=0), iftrue, target("__ZN9__gnu_cxx27__verbose_terminate_handlerEv__XprivateX__BB100_17_F"))
	__asm(lbl("__ZN9__gnu_cxx27__verbose_terminate_handlerEv__XprivateX__BB100_16_F"))
		i1 =  (-1)
		__asm(push(i1), push(i0), op(0x3c))
	__asm(lbl("__ZN9__gnu_cxx27__verbose_terminate_handlerEv__XprivateX__BB100_17_F"))
		i0 =  (___sF)
		mstate.esp -= 8
		i1 =  ((mstate.ebp+-128))
		__asm(jump, target("__ZN9__gnu_cxx27__verbose_terminate_handlerEv__XprivateX__BB100_4_B"))
	__asm(lbl("__ZN9__gnu_cxx27__verbose_terminate_handlerEv__XprivateX__BB100_18_B"), label, lbl("__ZN9__gnu_cxx27__verbose_terminate_handlerEv__XprivateX__BB100_18_F")); 
		__asm(jump, target("__ZN9__gnu_cxx27__verbose_terminate_handlerEv__XprivateX__BB100_19_F"))
	__asm(lbl("__ZN9__gnu_cxx27__verbose_terminate_handlerEv__XprivateX__BB100_19_F"))
		i1 = i3
		i2 =  ((mstate.ebp+-136))
		i0 =  (i1 - i0)
		__asm(push(i0), push((mstate.ebp+-152)), op(0x3c))
		__asm(push(i0), push((mstate.ebp+-132)), op(0x3c))
		__asm(push(i2), push((mstate.ebp+-160)), op(0x3c))
		i0 =  (1)
		__asm(push(i0), push((mstate.ebp+-156)), op(0x3c))
		i0 =  ((__xasm<int>(push((___sF+232)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+16)), op(0x37))))
		i0 =  (i0 + 16)
		__asm(push(i1!=0), iftrue, target("__ZN9__gnu_cxx27__verbose_terminate_handlerEv__XprivateX__BB100_21_F"))
		__asm(jump, target("__ZN9__gnu_cxx27__verbose_terminate_handlerEv__XprivateX__BB100_20_F"))
	__asm(lbl("__ZN9__gnu_cxx27__verbose_terminate_handlerEv__XprivateX__BB100_20_F"))
		i1 =  (-1)
		__asm(push(i1), push(i0), op(0x3c))
		__asm(jump, target("__ZN9__gnu_cxx27__verbose_terminate_handlerEv__XprivateX__BB100_21_F"))
	__asm(lbl("__ZN9__gnu_cxx27__verbose_terminate_handlerEv__XprivateX__BB100_21_F"))
		i0 =  (___sF)
		mstate.esp -= 8
		i1 =  ((mstate.ebp+-160))
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 5
		mstate.esp -= 4;FSM___sfvwrite.start()
		return
	__asm(lbl("__ZN9__gnu_cxx27__verbose_terminate_handlerEv_state5"))
		i0 = mstate.eax
		mstate.esp += 8
		i0 =  (__2E_str2102)
		__asm(push(i0), push((mstate.ebp+-72)), op(0x3c))
		i0 =  (2)
		__asm(push(i0), push((mstate.ebp+-68)), op(0x3c))
		__asm(push(i0), push((mstate.ebp+-88)), op(0x3c))
		i0 =  ((mstate.ebp+-72))
		__asm(push(i0), push((mstate.ebp+-96)), op(0x3c))
		i0 =  (1)
		__asm(push(i0), push((mstate.ebp+-92)), op(0x3c))
		i0 =  ((__xasm<int>(push((___sF+232)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+16)), op(0x37))))
		i0 =  (i0 + 16)
		__asm(push(i1!=0), iftrue, target("__ZN9__gnu_cxx27__verbose_terminate_handlerEv__XprivateX__BB100_23_F"))
		__asm(jump, target("__ZN9__gnu_cxx27__verbose_terminate_handlerEv__XprivateX__BB100_22_F"))
	__asm(lbl("__ZN9__gnu_cxx27__verbose_terminate_handlerEv__XprivateX__BB100_22_F"))
		i1 =  (-1)
		__asm(push(i1), push(i0), op(0x3c))
		__asm(jump, target("__ZN9__gnu_cxx27__verbose_terminate_handlerEv__XprivateX__BB100_23_F"))
	__asm(lbl("__ZN9__gnu_cxx27__verbose_terminate_handlerEv__XprivateX__BB100_23_F"))
		i0 =  (___sF)
		mstate.esp -= 8
		i1 =  ((mstate.ebp+-96))
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 6
		mstate.esp -= 4;FSM___sfvwrite.start()
		return
	__asm(lbl("__ZN9__gnu_cxx27__verbose_terminate_handlerEv_state6"))
		i0 = mstate.eax
		mstate.esp += 8
		state = 7
		mstate.esp -= 4;FSM___cxa_rethrow.start()
		return
	__asm(lbl("__ZN9__gnu_cxx27__verbose_terminate_handlerEv_state7"))
		__asm(jump, target("__ZN9__gnu_cxx27__verbose_terminate_handlerEv__XprivateX__BB100_18_B"))
	__asm(lbl("__ZN9__gnu_cxx27__verbose_terminate_handlerEv_errState"))
		throw("Invalid state in __ZN9__gnu_cxx27__verbose_terminate_handlerEv")
	}
}



// Async
public const ___cxa_throw:int = regFunc(FSM___cxa_throw.start)

public final class FSM___cxa_throw extends Machine {

	public static function start():void {
			var result:FSM___cxa_throw = new FSM___cxa_throw
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int

	public static const intRegCount:int = 3

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("___cxa_throw_entry"))
		__asm(push(state), switchjump(
			"___cxa_throw_errState",
			"___cxa_throw_state0",
			"___cxa_throw_state1",
			"___cxa_throw_state2",
			"___cxa_throw_state3"))
	__asm(lbl("___cxa_throw_state0"))
	__asm(lbl("___cxa_throw__XprivateX__BB101_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZSt9terminatev)
		i2 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		__asm(push(i1), push((i2+-80)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		__asm(push(i1), push((i2+-76)), op(0x3c))
		__asm(push(i0), push((i2+-72)), op(0x3c))
		i0 =  (__ZN9__gnu_cxx27__verbose_terminate_handlerEv)
		__asm(push(i0), push((i2+-68)), op(0x3c))
		i0 =  (1196315971)
		i1 =  (1126902528)
		__asm(push(i1), push((i2+-32)), op(0x3c))
		__asm(push(i0), push((i2+-28)), op(0x3c))
		i0 =  (__ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception)
		__asm(push(i0), push((i2+-24)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM___cxa_get_globals.start()
		return
	__asm(lbl("___cxa_throw_state1"))
		i0 = mstate.eax
		i1 =  ((__xasm<int>(push((i0+4)), op(0x37))))
		i1 =  (i1 + 1)
		__asm(push(i1), push((i0+4)), op(0x3c))
		i0 =  (__2E_str6102)
		i1 =  (4)
		//InlineAsmStart
	log(i1, mstate.gworker.stringFromPtr(i0))
	//InlineAsmEnd
		mstate.esp -= 4
		i0 =  (i2 + -32)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM___cxa_begin_catch.start()
		return
	__asm(lbl("___cxa_throw_state2"))
		i0 = mstate.eax
		mstate.esp += 4
		state = 3
		mstate.esp -= 4;FSM__ZSt9terminatev.start()
		return
	__asm(lbl("___cxa_throw_state3"))
	__asm(lbl("___cxa_throw_errState"))
		throw("Invalid state in ___cxa_throw")
	}
}



// Async
public const __ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception:int = regFunc(FSM__ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception.start)

public final class FSM__ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception extends Machine {

	public static function start():void {
			var result:FSM__ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception = new FSM__ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int

	public static const intRegCount:int = 3

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception_entry"))
		__asm(push(state), switchjump(
			"__ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception_errState",
			"__ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception_state0",
			"__ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception_state1",
			"__ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception_state2",
			"__ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception_state3"))
	__asm(lbl("__ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception_state0"))
	__asm(lbl("__ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception__XprivateX__BB102_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i0 =  (i0 + 32)
		i1 = i0
		i2 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		__asm(push(uint(i2)<uint(2)), iftrue, target("__ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception__XprivateX__BB102_2_F"))
	__asm(lbl("__ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception__XprivateX__BB102_1_F"))
		i0 =  ((__xasm<int>(push((i1+-68)), op(0x37))))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM__ZN10__cxxabiv111__terminateEPFvvE.start()
		return
	__asm(lbl("__ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception_state1"))
		mstate.esp += 4
	__asm(lbl("__ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception__XprivateX__BB102_2_F"))
		i1 =  ((__xasm<int>(push((i1+-76)), op(0x37))))
		__asm(push(i1==0), iftrue, target("__ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception__XprivateX__BB102_4_F"))
	__asm(lbl("__ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception__XprivateX__BB102_3_F"))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 2
		mstate.esp -= 4;(mstate.funcs[i1])()
		return
	__asm(lbl("__ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception_state2"))
		mstate.esp += 4
	__asm(lbl("__ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception__XprivateX__BB102_4_F"))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 3
		mstate.esp -= 4;FSM___cxa_free_exception.start()
		return
	__asm(lbl("__ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception_state3"))
		mstate.esp += 4
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception_errState"))
		throw("Invalid state in __ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception")
	}
}



// Async
public const __ZNSt9bad_allocD0Ev:int = regFunc(FSM__ZNSt9bad_allocD0Ev.start)

public final class FSM__ZNSt9bad_allocD0Ev extends Machine {

	public static function start():void {
			var result:FSM__ZNSt9bad_allocD0Ev = new FSM__ZNSt9bad_allocD0Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZNSt9bad_allocD0Ev_entry"))
		__asm(push(state), switchjump(
			"__ZNSt9bad_allocD0Ev_errState",
			"__ZNSt9bad_allocD0Ev_state0",
			"__ZNSt9bad_allocD0Ev_state1"))
	__asm(lbl("__ZNSt9bad_allocD0Ev_state0"))
	__asm(lbl("__ZNSt9bad_allocD0Ev__XprivateX__BB103_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTVSt9exception)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		__asm(push(i1==0), iftrue, target("__ZNSt9bad_allocD0Ev__XprivateX__BB103_2_F"))
	__asm(lbl("__ZNSt9bad_allocD0Ev__XprivateX__BB103_1_F"))
		i0 =  (0)
		mstate.esp -= 8
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZNSt9bad_allocD0Ev_state1"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__ZNSt9bad_allocD0Ev__XprivateX__BB103_2_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZNSt9bad_allocD0Ev_errState"))
		throw("Invalid state in __ZNSt9bad_allocD0Ev")
	}
}



// Async
public const __ZNSt9bad_allocD1Ev:int = regFunc(FSM__ZNSt9bad_allocD1Ev.start)

public final class FSM__ZNSt9bad_allocD1Ev extends Machine {

	public static function start():void {
			var result:FSM__ZNSt9bad_allocD1Ev = new FSM__ZNSt9bad_allocD1Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZNSt9bad_allocD1Ev_entry"))
		__asm(push(state), switchjump(
			"__ZNSt9bad_allocD1Ev_errState",
			"__ZNSt9bad_allocD1Ev_state0"))
	__asm(lbl("__ZNSt9bad_allocD1Ev_state0"))
	__asm(lbl("__ZNSt9bad_allocD1Ev__XprivateX__BB104_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTVSt9exception)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZNSt9bad_allocD1Ev_errState"))
		throw("Invalid state in __ZNSt9bad_allocD1Ev")
	}
}



// Async
public const __Znwm:int = regFunc(FSM__Znwm.start)

public final class FSM__Znwm extends Machine {

	public static function start():void {
			var result:FSM__Znwm = new FSM__Znwm
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int

	public static const intRegCount:int = 3

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Znwm_entry"))
		__asm(push(state), switchjump(
			"__Znwm_errState",
			"__Znwm_state0",
			"__Znwm_state1",
			"__Znwm_state2",
			"__Znwm_state3"))
	__asm(lbl("__Znwm_state0"))
	__asm(lbl("__Znwm__XprivateX__BB105_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (0)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		mstate.esp -= 8
		i1 =  ((i1==0) ? 1 : i1)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Znwm_state1"))
		i0 = mstate.eax
		mstate.esp += 8
		__asm(push(i0!=0), iftrue, target("__Znwm__XprivateX__BB105_2_F"))
	__asm(lbl("__Znwm__XprivateX__BB105_1_F"))
		i0 =  (4)
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		i0 =  (__ZTVSt9bad_alloc)
		state = 2
		mstate.esp -= 4;FSM___cxa_allocate_exception.start()
		return
	__asm(lbl("__Znwm_state2"))
		i1 = mstate.eax
		mstate.esp += 4
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		mstate.esp -= 12
		i0 =  (__ZTISt9bad_alloc)
		i2 =  (__ZNSt9bad_allocD1Ev)
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		state = 3
		mstate.esp -= 4;FSM___cxa_throw.start()
		return
	__asm(lbl("__Znwm_state3"))
		mstate.esp += 12
		__asm(jump, target("__Znwm__XprivateX__BB105_2_F"))
	__asm(lbl("__Znwm__XprivateX__BB105_2_F"))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Znwm_errState"))
		throw("Invalid state in __Znwm")
	}
}



// Async
public const ___cxa_pure_virtual:int = regFunc(FSM___cxa_pure_virtual.start)

public final class FSM___cxa_pure_virtual extends Machine {

	public static function start():void {
			var result:FSM___cxa_pure_virtual = new FSM___cxa_pure_virtual
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int

	public static const intRegCount:int = 3

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("___cxa_pure_virtual_entry"))
		__asm(push(state), switchjump(
			"___cxa_pure_virtual_errState",
			"___cxa_pure_virtual_state0",
			"___cxa_pure_virtual_state1",
			"___cxa_pure_virtual_state2"))
	__asm(lbl("___cxa_pure_virtual_state0"))
	__asm(lbl("___cxa_pure_virtual__XprivateX__BB106_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i1 =  (__2E_str99)
		i2 =  (27)
		i0 =  (2)
				state = 1
	__asm(lbl("___cxa_pure_virtual_state1"))
//InlineAsmStart
	i0 =  mstate.system.write(i0, i1, i2);//!!ASYNC

	//InlineAsmEnd
		state = 2
		mstate.esp -= 4;FSM__ZSt9terminatev.start()
		return
	__asm(lbl("___cxa_pure_virtual_state2"))
	__asm(lbl("___cxa_pure_virtual_errState"))
		throw("Invalid state in ___cxa_pure_virtual")
	}
}



// Sync
public const __ZNKSt9type_info14__is_pointer_pEv:int = regFunc(FSM__ZNKSt9type_info14__is_pointer_pEv.start)

public final class FSM__ZNKSt9type_info14__is_pointer_pEv extends Machine {

	public static function start():void {
		var i0:int


		__asm(label, lbl("__ZNKSt9type_info14__is_pointer_pEv_entry"))
	__asm(lbl("__ZNKSt9type_info14__is_pointer_pEv__XprivateX__BB107_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (0)
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZNKSt9type_info15__is_function_pEv:int = regFunc(FSM__ZNKSt9type_info15__is_function_pEv.start)

public final class FSM__ZNKSt9type_info15__is_function_pEv extends Machine {

	public static function start():void {
		var i0:int


		__asm(label, lbl("__ZNKSt9type_info15__is_function_pEv_entry"))
	__asm(lbl("__ZNKSt9type_info15__is_function_pEv__XprivateX__BB108_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (0)
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv:int = regFunc(FSM__ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv.start)

public final class FSM__ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv extends Machine {

	public static function start():void {
		var i0:int


		__asm(label, lbl("__ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv_entry"))
	__asm(lbl("__ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv__XprivateX__BB109_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (0)
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Async
public const __ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj:int = regFunc(FSM__ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj.start)

public final class FSM__ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj extends Machine {

	public static function start():void {
			var result:FSM__ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj = new FSM__ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int

	public static const intRegCount:int = 6

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj_entry"))
		__asm(push(state), switchjump(
			"__ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj_errState",
			"__ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj_state0",
			"__ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj_state1"))
	__asm(lbl("__ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj_state0"))
	__asm(lbl("__ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj__XprivateX__BB110_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i3 =  ((__xasm<int>(push((mstate.ebp+20)), op(0x37))))
		i4 =  ((__xasm<int>(push((i0+4)), op(0x37))))
		i5 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		__asm(push(i4!=i5), iftrue, target("__ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj__XprivateX__BB110_2_F"))
	__asm(lbl("__ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj__XprivateX__BB110_1_F"))
		i0 =  (1)
		__asm(jump, target("__ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj__XprivateX__BB110_4_F"))
	__asm(lbl("__ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj__XprivateX__BB110_2_F"))
		__asm(push(uint(i3)<uint(4)), iftrue, target("__ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj__XprivateX__BB110_6_F"))
	__asm(lbl("__ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj__XprivateX__BB110_3_F"))
		i0 =  (0)
		__asm(jump, target("__ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj__XprivateX__BB110_4_F"))
	__asm(lbl("__ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj__XprivateX__BB110_4_F"))
		i0 =  (i0 & 255)
	__asm(jump, target("__ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj__XprivateX__BB110_5_F"), lbl("__ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj__XprivateX__BB110_5_B"), label, lbl("__ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj__XprivateX__BB110_5_F")); 
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj__XprivateX__BB110_6_F"))
		i3 =  ((__xasm<int>(push(i1), op(0x37))))
		i3 =  ((__xasm<int>(push((i3+20)), op(0x37))))
		mstate.esp -= 12
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[i3])()
		return
	__asm(lbl("__ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj_state1"))
		i0 = mstate.eax
		mstate.esp += 12
		__asm(jump, target("__ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj__XprivateX__BB110_5_B"))
	__asm(lbl("__ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj_errState"))
		throw("Invalid state in __ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj")
	}
}



// Async
public const __ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv:int = regFunc(FSM__ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv.start)

public final class FSM__ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv extends Machine {

	public static function start():void {
			var result:FSM__ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv = new FSM__ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int

	public static const intRegCount:int = 6

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv_entry"))
		__asm(push(state), switchjump(
			"__ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv_errState",
			"__ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv_state0",
			"__ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv_state1"))
	__asm(lbl("__ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv_state0"))
	__asm(lbl("__ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv__XprivateX__BB111_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 16
		i0 =  (0)
		__asm(push(i0), push((mstate.ebp+-16)), op(0x3c))
		__asm(push(i0), push((mstate.ebp+-12)), op(0x3c))
		i1 =  (16)
		__asm(push(i1), push((mstate.ebp+-8)), op(0x3c))
		__asm(push(i0), push((mstate.ebp+-4)), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i2 =  ((__xasm<int>(push(i0), op(0x37))))
		i2 =  ((__xasm<int>(push((i2+24)), op(0x37))))
		i3 =  ((__xasm<int>(push(i1), op(0x37))))
		mstate.esp -= 16
		i4 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i5 =  ((mstate.ebp+-16))
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i4), push((mstate.esp+4)), op(0x3c))
		__asm(push(i3), push((mstate.esp+8)), op(0x3c))
		__asm(push(i5), push((mstate.esp+12)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[i2])()
		return
	__asm(lbl("__ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv_state1"))
		i0 = mstate.eax
		mstate.esp += 16
		i0 =  ((__xasm<int>(push((mstate.ebp+-12)), op(0x37))))
		i0 =  (i0 & 6)
		__asm(push(i0!=6), iftrue, target("__ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv__XprivateX__BB111_2_F"))
	__asm(lbl("__ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv__XprivateX__BB111_1_F"))
		i0 =  (1)
		i2 =  ((__xasm<int>(push(i5), op(0x37))))
		__asm(push(i2), push(i1), op(0x3c))
		__asm(jump, target("__ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv__XprivateX__BB111_3_F"))
	__asm(lbl("__ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv__XprivateX__BB111_2_F"))
		i0 =  (0)
	__asm(lbl("__ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv__XprivateX__BB111_3_F"))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv_errState"))
		throw("Invalid state in __ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv")
	}
}



// Sync
public const __ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_:int = regFunc(FSM__ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_.start)

public final class FSM__ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_ extends Machine {

	public static function start():void {
		var i0:int, i1:int


		__asm(label, lbl("__ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2__entry"))
	__asm(lbl("__ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2___XprivateX__BB112_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+24)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i0 =  ((i0==i1) ? 6 : 1)
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE:int = regFunc(FSM__ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE.start)

public final class FSM__ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int


		__asm(label, lbl("__ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE_entry"))
	__asm(lbl("__ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE__XprivateX__BB113_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+20)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i3 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((__xasm<int>(push((i2+4)), op(0x37))))
		i3 =  ((__xasm<int>(push((i3+4)), op(0x37))))
		__asm(push(i2!=i3), iftrue, target("__ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE__XprivateX__BB113_2_F"))
	__asm(lbl("__ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE__XprivateX__BB113_1_F"))
		i2 =  (8)
		__asm(push(i0), push(i1), op(0x3c))
		__asm(push(i2), push((i1+12)), op(0x3c))
		i0 =  (6)
		__asm(push(i0), push((i1+4)), op(0x3c))
		i0 =  (1)
		__asm(jump, target("__ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE__XprivateX__BB113_3_F"))
	__asm(lbl("__ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE__XprivateX__BB113_2_F"))
		i0 =  (0)
	__asm(lbl("__ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE__XprivateX__BB113_3_F"))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Async
public const __ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE:int = regFunc(FSM__ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE.start)

public final class FSM__ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE extends Machine {

	public static function start():void {
			var result:FSM__ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE = new FSM__ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int

	public static const intRegCount:int = 6

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE_entry"))
		__asm(push(state), switchjump(
			"__ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE_errState",
			"__ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE_state0",
			"__ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE_state1"))
	__asm(lbl("__ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE_state0"))
	__asm(lbl("__ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB114_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i3 =  ((__xasm<int>(push((mstate.ebp+20)), op(0x37))))
		i4 =  ((__xasm<int>(push((i0+4)), op(0x37))))
		i5 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		__asm(push(i4!=i5), iftrue, target("__ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB114_3_F"))
	__asm(lbl("__ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB114_1_F"))
		i0 =  (8)
		__asm(push(i2), push(i3), op(0x3c))
		__asm(push(i0), push((i3+12)), op(0x3c))
		i0 =  (6)
		__asm(push(i0), push((i3+4)), op(0x3c))
		i0 =  (1)
	__asm(jump, target("__ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB114_2_F"), lbl("__ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB114_2_B"), label, lbl("__ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB114_2_F")); 
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB114_3_F"))
		i0 =  ((__xasm<int>(push((i0+8)), op(0x37))))
		i4 =  ((__xasm<int>(push(i0), op(0x37))))
		i4 =  ((__xasm<int>(push((i4+24)), op(0x37))))
		mstate.esp -= 16
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[i4])()
		return
	__asm(lbl("__ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE_state1"))
		i0 = mstate.eax
		mstate.esp += 16
		__asm(jump, target("__ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB114_2_B"))
	__asm(lbl("__ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE_errState"))
		throw("Invalid state in __ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE")
	}
}



// Async
public const __ZNSt9type_infoD0Ev:int = regFunc(FSM__ZNSt9type_infoD0Ev.start)

public final class FSM__ZNSt9type_infoD0Ev extends Machine {

	public static function start():void {
			var result:FSM__ZNSt9type_infoD0Ev = new FSM__ZNSt9type_infoD0Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZNSt9type_infoD0Ev_entry"))
		__asm(push(state), switchjump(
			"__ZNSt9type_infoD0Ev_errState",
			"__ZNSt9type_infoD0Ev_state0",
			"__ZNSt9type_infoD0Ev_state1"))
	__asm(lbl("__ZNSt9type_infoD0Ev_state0"))
	__asm(lbl("__ZNSt9type_infoD0Ev__XprivateX__BB115_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTVSt9type_info)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		__asm(push(i1==0), iftrue, target("__ZNSt9type_infoD0Ev__XprivateX__BB115_2_F"))
	__asm(lbl("__ZNSt9type_infoD0Ev__XprivateX__BB115_1_F"))
		i0 =  (0)
		mstate.esp -= 8
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZNSt9type_infoD0Ev_state1"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__ZNSt9type_infoD0Ev__XprivateX__BB115_2_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZNSt9type_infoD0Ev_errState"))
		throw("Invalid state in __ZNSt9type_infoD0Ev")
	}
}



// Async
public const __ZN10__cxxabiv120__si_class_type_infoD1Ev:int = regFunc(FSM__ZN10__cxxabiv120__si_class_type_infoD1Ev.start)

public final class FSM__ZN10__cxxabiv120__si_class_type_infoD1Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN10__cxxabiv120__si_class_type_infoD1Ev = new FSM__ZN10__cxxabiv120__si_class_type_infoD1Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN10__cxxabiv120__si_class_type_infoD1Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN10__cxxabiv120__si_class_type_infoD1Ev_errState",
			"__ZN10__cxxabiv120__si_class_type_infoD1Ev_state0"))
	__asm(lbl("__ZN10__cxxabiv120__si_class_type_infoD1Ev_state0"))
	__asm(lbl("__ZN10__cxxabiv120__si_class_type_infoD1Ev__XprivateX__BB116_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTVSt9type_info)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN10__cxxabiv120__si_class_type_infoD1Ev_errState"))
		throw("Invalid state in __ZN10__cxxabiv120__si_class_type_infoD1Ev")
	}
}



// Async
public const __ZN10__cxxabiv120__si_class_type_infoD0Ev:int = regFunc(FSM__ZN10__cxxabiv120__si_class_type_infoD0Ev.start)

public final class FSM__ZN10__cxxabiv120__si_class_type_infoD0Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN10__cxxabiv120__si_class_type_infoD0Ev = new FSM__ZN10__cxxabiv120__si_class_type_infoD0Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN10__cxxabiv120__si_class_type_infoD0Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN10__cxxabiv120__si_class_type_infoD0Ev_errState",
			"__ZN10__cxxabiv120__si_class_type_infoD0Ev_state0",
			"__ZN10__cxxabiv120__si_class_type_infoD0Ev_state1"))
	__asm(lbl("__ZN10__cxxabiv120__si_class_type_infoD0Ev_state0"))
	__asm(lbl("__ZN10__cxxabiv120__si_class_type_infoD0Ev__XprivateX__BB117_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTVSt9type_info)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		__asm(push(i1==0), iftrue, target("__ZN10__cxxabiv120__si_class_type_infoD0Ev__XprivateX__BB117_2_F"))
	__asm(lbl("__ZN10__cxxabiv120__si_class_type_infoD0Ev__XprivateX__BB117_1_F"))
		i0 =  (0)
		mstate.esp -= 8
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN10__cxxabiv120__si_class_type_infoD0Ev_state1"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__ZN10__cxxabiv120__si_class_type_infoD0Ev__XprivateX__BB117_2_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN10__cxxabiv120__si_class_type_infoD0Ev_errState"))
		throw("Invalid state in __ZN10__cxxabiv120__si_class_type_infoD0Ev")
	}
}



// Async
public const __ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE:int = regFunc(FSM__ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE.start)

public final class FSM__ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE extends Machine {

	public static function start():void {
			var result:FSM__ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE = new FSM__ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
	public var i8:int, i9:int

	public static const intRegCount:int = 10

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE_entry"))
		__asm(push(state), switchjump(
			"__ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE_errState",
			"__ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE_state0",
			"__ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE_state1"))
	__asm(lbl("__ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE_state0"))
	__asm(lbl("__ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB118_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+20)), op(0x37))))
		i2 =  ((__xasm<int>(push((i0+4)), op(0x37))))
		i3 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		i4 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i5 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i6 =  ((__xasm<int>(push((mstate.ebp+24)), op(0x37))))
		i7 =  ((__xasm<int>(push((mstate.ebp+28)), op(0x37))))
		i8 =  ((__xasm<int>(push((mstate.ebp+32)), op(0x37))))
		i9 =  ((__xasm<int>(push((mstate.ebp+36)), op(0x37))))
		__asm(push(i2!=i3), iftrue, target("__ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB118_6_F"))
	__asm(lbl("__ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB118_1_F"))
		__asm(push(i6), push(i9), op(0x3c))
		__asm(push(i5), push((i9+4)), op(0x3c))
		__asm(push(i4<0), iftrue, target("__ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB118_3_F"))
	__asm(lbl("__ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB118_2_F"))
		i0 =  (0)
		i1 =  (i6 + i4)
		i1 =  ((i1==i8) ? 6 : 1)
		__asm(push(i1), push((i9+12)), op(0x3c))
		__asm(jump, target("__ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB118_10_F"))
	__asm(lbl("__ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB118_3_F"))
		__asm(push(i4!=-2), iftrue, target("__ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB118_5_F"))
	__asm(lbl("__ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB118_4_F"))
		i0 =  (1)
		__asm(push(i0), push((i9+12)), op(0x3c))
		__asm(jump, target("__ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB118_5_F"))
	__asm(lbl("__ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB118_5_F"))
		i0 =  (0)
		__asm(jump, target("__ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB118_10_F"))
	__asm(lbl("__ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB118_6_F"))
		__asm(push(i6!=i8), iftrue, target("__ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB118_8_F"))
	__asm(lbl("__ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB118_7_F"))
		i3 =  ((__xasm<int>(push((i7+4)), op(0x37))))
		__asm(push(i2==i3), iftrue, target("__ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB118_9_F"))
	__asm(lbl("__ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB118_8_F"))
		i0 =  ((__xasm<int>(push((i0+8)), op(0x37))))
		i2 =  ((__xasm<int>(push(i0), op(0x37))))
		i2 =  ((__xasm<int>(push((i2+28)), op(0x37))))
		mstate.esp -= 32
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i4), push((mstate.esp+4)), op(0x3c))
		__asm(push(i5), push((mstate.esp+8)), op(0x3c))
		__asm(push(i1), push((mstate.esp+12)), op(0x3c))
		__asm(push(i6), push((mstate.esp+16)), op(0x3c))
		__asm(push(i7), push((mstate.esp+20)), op(0x3c))
		__asm(push(i8), push((mstate.esp+24)), op(0x3c))
		__asm(push(i9), push((mstate.esp+28)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[i2])()
		return
	__asm(lbl("__ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE_state1"))
		i5 = mstate.eax
		mstate.esp += 32
		mstate.eax = i5
		__asm(jump, target("__ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB118_11_F"))
	__asm(lbl("__ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB118_9_F"))
		i0 =  (0)
		__asm(push(i5), push((i9+8)), op(0x3c))
		__asm(jump, target("__ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB118_10_F"))
	__asm(lbl("__ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB118_10_F"))
		mstate.eax = i0
	__asm(lbl("__ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB118_11_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE_errState"))
		throw("Invalid state in __ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE")
	}
}



// Async
public const __ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_:int = regFunc(FSM__ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_.start)

public final class FSM__ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_ extends Machine {

	public static function start():void {
			var result:FSM__ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_ = new FSM__ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int

	public static const intRegCount:int = 7

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2__entry"))
		__asm(push(state), switchjump(
			"__ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2__errState",
			"__ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2__state0",
			"__ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2__state1"))
	__asm(lbl("__ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2__state0"))
	__asm(lbl("__ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB119_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i3 =  ((__xasm<int>(push((mstate.ebp+20)), op(0x37))))
		i4 =  ((__xasm<int>(push((mstate.ebp+24)), op(0x37))))
		__asm(push(i4!=i2), iftrue, target("__ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB119_2_F"))
	__asm(lbl("__ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB119_1_F"))
		i5 =  ((__xasm<int>(push((i0+4)), op(0x37))))
		i6 =  ((__xasm<int>(push((i3+4)), op(0x37))))
		__asm(push(i5==i6), iftrue, target("__ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB119_3_F"))
	__asm(lbl("__ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB119_2_F"))
		i0 =  ((__xasm<int>(push((i0+8)), op(0x37))))
		i5 =  ((__xasm<int>(push(i0), op(0x37))))
		i5 =  ((__xasm<int>(push((i5+32)), op(0x37))))
		mstate.esp -= 20
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[i5])()
		return
	__asm(lbl("__ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2__state1"))
		i0 = mstate.eax
		mstate.esp += 20
		__asm(jump, target("__ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB119_4_F"))
	__asm(lbl("__ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB119_3_F"))
		i0 =  (6)
	__asm(lbl("__ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB119_4_F"))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2__errState"))
		throw("Invalid state in __ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_")
	}
}



// Async
public const __ZN10__cxxabiv117__class_type_infoD1Ev:int = regFunc(FSM__ZN10__cxxabiv117__class_type_infoD1Ev.start)

public final class FSM__ZN10__cxxabiv117__class_type_infoD1Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN10__cxxabiv117__class_type_infoD1Ev = new FSM__ZN10__cxxabiv117__class_type_infoD1Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN10__cxxabiv117__class_type_infoD1Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN10__cxxabiv117__class_type_infoD1Ev_errState",
			"__ZN10__cxxabiv117__class_type_infoD1Ev_state0"))
	__asm(lbl("__ZN10__cxxabiv117__class_type_infoD1Ev_state0"))
	__asm(lbl("__ZN10__cxxabiv117__class_type_infoD1Ev__XprivateX__BB120_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTVSt9type_info)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN10__cxxabiv117__class_type_infoD1Ev_errState"))
		throw("Invalid state in __ZN10__cxxabiv117__class_type_infoD1Ev")
	}
}



// Async
public const __ZN10__cxxabiv117__class_type_infoD0Ev:int = regFunc(FSM__ZN10__cxxabiv117__class_type_infoD0Ev.start)

public final class FSM__ZN10__cxxabiv117__class_type_infoD0Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN10__cxxabiv117__class_type_infoD0Ev = new FSM__ZN10__cxxabiv117__class_type_infoD0Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN10__cxxabiv117__class_type_infoD0Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN10__cxxabiv117__class_type_infoD0Ev_errState",
			"__ZN10__cxxabiv117__class_type_infoD0Ev_state0",
			"__ZN10__cxxabiv117__class_type_infoD0Ev_state1"))
	__asm(lbl("__ZN10__cxxabiv117__class_type_infoD0Ev_state0"))
	__asm(lbl("__ZN10__cxxabiv117__class_type_infoD0Ev__XprivateX__BB121_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTVSt9type_info)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		__asm(push(i1==0), iftrue, target("__ZN10__cxxabiv117__class_type_infoD0Ev__XprivateX__BB121_2_F"))
	__asm(lbl("__ZN10__cxxabiv117__class_type_infoD0Ev__XprivateX__BB121_1_F"))
		i0 =  (0)
		mstate.esp -= 8
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN10__cxxabiv117__class_type_infoD0Ev_state1"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__ZN10__cxxabiv117__class_type_infoD0Ev__XprivateX__BB121_2_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN10__cxxabiv117__class_type_infoD0Ev_errState"))
		throw("Invalid state in __ZN10__cxxabiv117__class_type_infoD0Ev")
	}
}



// Sync
public const __ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE:int = regFunc(FSM__ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE.start)

public final class FSM__ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int


		__asm(label, lbl("__ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE_entry"))
	__asm(lbl("__ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE__XprivateX__BB122_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+20)), op(0x37))))
		i3 =  ((__xasm<int>(push((mstate.ebp+24)), op(0x37))))
		i4 =  ((__xasm<int>(push((mstate.ebp+28)), op(0x37))))
		i5 =  ((__xasm<int>(push((mstate.ebp+36)), op(0x37))))
		i6 =  ((__xasm<int>(push((mstate.ebp+32)), op(0x37))))
		__asm(push(i3!=i6), iftrue, target("__ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE__XprivateX__BB122_2_F"))
	__asm(lbl("__ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE__XprivateX__BB122_1_F"))
		i6 =  ((__xasm<int>(push((i0+4)), op(0x37))))
		i4 =  ((__xasm<int>(push((i4+4)), op(0x37))))
		__asm(push(i6==i4), iftrue, target("__ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE__XprivateX__BB122_6_F"))
	__asm(lbl("__ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE__XprivateX__BB122_2_F"))
		i0 =  ((__xasm<int>(push((i0+4)), op(0x37))))
		i2 =  ((__xasm<int>(push((i2+4)), op(0x37))))
		__asm(push(i0==i2), iftrue, target("__ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE__XprivateX__BB122_3_F"))
		__asm(jump, target("__ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE__XprivateX__BB122_4_F"))
	__asm(lbl("__ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE__XprivateX__BB122_3_F"))
		i0 =  (1)
		__asm(push(i3), push(i5), op(0x3c))
		__asm(push(i1), push((i5+4)), op(0x3c))
		__asm(push(i0), push((i5+12)), op(0x3c))
	__asm(lbl("__ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE__XprivateX__BB122_4_F"))
		i0 =  (0)
		mstate.eax = i0
	__asm(jump, target("__ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE__XprivateX__BB122_5_F"), lbl("__ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE__XprivateX__BB122_5_B"), label, lbl("__ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE__XprivateX__BB122_5_F")); 
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	__asm(lbl("__ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE__XprivateX__BB122_6_F"))
		i3 =  (0)
		__asm(push(i1), push((i5+8)), op(0x3c))
		mstate.eax = i3
		__asm(jump, target("__ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE__XprivateX__BB122_5_B"))
	}
}



// Async
public const __ZNSt9type_infoD1Ev:int = regFunc(FSM__ZNSt9type_infoD1Ev.start)

public final class FSM__ZNSt9type_infoD1Ev extends Machine {

	public static function start():void {
			var result:FSM__ZNSt9type_infoD1Ev = new FSM__ZNSt9type_infoD1Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZNSt9type_infoD1Ev_entry"))
		__asm(push(state), switchjump(
			"__ZNSt9type_infoD1Ev_errState",
			"__ZNSt9type_infoD1Ev_state0"))
	__asm(lbl("__ZNSt9type_infoD1Ev_state0"))
	__asm(lbl("__ZNSt9type_infoD1Ev__XprivateX__BB123_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTVSt9type_info)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZNSt9type_infoD1Ev_errState"))
		throw("Invalid state in __ZNSt9type_infoD1Ev")
	}
}



// Sync
public const __ZNKSt9type_info10__do_catchEPKS_PPvj:int = regFunc(FSM__ZNKSt9type_info10__do_catchEPKS_PPvj.start)

public final class FSM__ZNKSt9type_info10__do_catchEPKS_PPvj extends Machine {

	public static function start():void {
		var i0:int, i1:int


		__asm(label, lbl("__ZNKSt9type_info10__do_catchEPKS_PPvj_entry"))
	__asm(lbl("__ZNKSt9type_info10__do_catchEPKS_PPvj__XprivateX__BB124_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i0 =  ((__xasm<int>(push((i0+4)), op(0x37))))
		i1 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		i0 =  ((i0==i1) ? 1 : 0)
		i0 =  (i0 & 1)
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Async
public const __ZN10__cxxabiv121__vmi_class_type_infoD0Ev:int = regFunc(FSM__ZN10__cxxabiv121__vmi_class_type_infoD0Ev.start)

public final class FSM__ZN10__cxxabiv121__vmi_class_type_infoD0Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN10__cxxabiv121__vmi_class_type_infoD0Ev = new FSM__ZN10__cxxabiv121__vmi_class_type_infoD0Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN10__cxxabiv121__vmi_class_type_infoD0Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN10__cxxabiv121__vmi_class_type_infoD0Ev_errState",
			"__ZN10__cxxabiv121__vmi_class_type_infoD0Ev_state0",
			"__ZN10__cxxabiv121__vmi_class_type_infoD0Ev_state1"))
	__asm(lbl("__ZN10__cxxabiv121__vmi_class_type_infoD0Ev_state0"))
	__asm(lbl("__ZN10__cxxabiv121__vmi_class_type_infoD0Ev__XprivateX__BB125_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTVSt9type_info)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		__asm(push(i1==0), iftrue, target("__ZN10__cxxabiv121__vmi_class_type_infoD0Ev__XprivateX__BB125_2_F"))
	__asm(lbl("__ZN10__cxxabiv121__vmi_class_type_infoD0Ev__XprivateX__BB125_1_F"))
		i0 =  (0)
		mstate.esp -= 8
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN10__cxxabiv121__vmi_class_type_infoD0Ev_state1"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__ZN10__cxxabiv121__vmi_class_type_infoD0Ev__XprivateX__BB125_2_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN10__cxxabiv121__vmi_class_type_infoD0Ev_errState"))
		throw("Invalid state in __ZN10__cxxabiv121__vmi_class_type_infoD0Ev")
	}
}



// Async
public const __ZN10__cxxabiv121__vmi_class_type_infoD1Ev:int = regFunc(FSM__ZN10__cxxabiv121__vmi_class_type_infoD1Ev.start)

public final class FSM__ZN10__cxxabiv121__vmi_class_type_infoD1Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN10__cxxabiv121__vmi_class_type_infoD1Ev = new FSM__ZN10__cxxabiv121__vmi_class_type_infoD1Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN10__cxxabiv121__vmi_class_type_infoD1Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN10__cxxabiv121__vmi_class_type_infoD1Ev_errState",
			"__ZN10__cxxabiv121__vmi_class_type_infoD1Ev_state0"))
	__asm(lbl("__ZN10__cxxabiv121__vmi_class_type_infoD1Ev_state0"))
	__asm(lbl("__ZN10__cxxabiv121__vmi_class_type_infoD1Ev__XprivateX__BB126_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTVSt9type_info)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN10__cxxabiv121__vmi_class_type_infoD1Ev_errState"))
		throw("Invalid state in __ZN10__cxxabiv121__vmi_class_type_infoD1Ev")
	}
}



// Async
public const __ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE:int = regFunc(FSM__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE.start)

public final class FSM__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE extends Machine {

	public static function start():void {
			var result:FSM__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE = new FSM__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
	public var i8:int, i9:int, i10:int, i11:int, i12:int, i13:int, i14:int, i15:int
	public var i16:int, i17:int, i18:int, i19:int, i20:int, i21:int, i22:int, i23:int

	public static const intRegCount:int = 24

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE_entry"))
		__asm(push(state), switchjump(
			"__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE_errState",
			"__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE_state0",
			"__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE_state1"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE_state0"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 16
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i3 =  ((__xasm<int>(push((mstate.ebp+20)), op(0x37))))
		i4 =  ((__xasm<int>(push((i0+4)), op(0x37))))
		i5 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		__asm(push(i4!=i5), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_2_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_1_F"))
		i0 =  (8)
		__asm(push(i2), push(i3), op(0x3c))
		__asm(push(i0), push((i3+12)), op(0x3c))
		i0 =  (6)
		__asm(push(i0), push((i3+4)), op(0x3c))
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_29_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_2_F"))
		i4 =  ((__xasm<int>(push((i3+8)), op(0x37))))
		i5 =  (i0 + 12)
		i6 =  (i3 + 8)
		i7 =  (i4 & 16)
		__asm(push(i7==0), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_5_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_3_F"))
		i4 =  ((__xasm<int>(push(i5), op(0x37))))
		i5 =  ((__xasm<int>(push((i0+8)), op(0x37))))
		i7 =  (i4 + -1)
		__asm(push(i4==0), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_44_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_4_F"))
		i4 = i5
		i5 = i7
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_7_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_5_F"))
		i5 =  ((__xasm<int>(push(i5), op(0x37))))
		i7 =  (i5 + -1)
		__asm(push(i5==0), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_44_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_6_F"))
		i5 = i7
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_7_F"))
		i7 =  ((mstate.ebp+-16))
		i8 =  (i0 + 8)
		i9 =  (i3 + 4)
		i10 =  (i3 + 12)
		i11 =  (i4 & 1)
		i12 =  (i7 + 12)
		i13 =  (i7 + 8)
		i14 =  (i7 + 4)
		i15 = i3
		i16 = i2
	__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_8_F"), lbl("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_8_B"), label, lbl("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_8_F")); 
		i17 =  (0)
		__asm(push(i17), push(i7), op(0x3c))
		__asm(push(i17), push(i14), op(0x3c))
		__asm(push(i4), push(i13), op(0x3c))
		i18 =  (i5 << 3)
		__asm(push(i17), push(i12), op(0x3c))
		i17 =  (i0 + i18)
		i17 =  ((__xasm<int>(push((i17+20)), op(0x37))))
		i18 =  (i17 & 1)
		i19 =  (i17 & 2)
		i17 =  (i17 >> 8)
		__asm(push(i19!=0), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_10_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_9_F"))
		__asm(push(i11==0), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_42_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_10_F"))
		__asm(push(i2!=0), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_12_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_11_F"))
		i17 = i2
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_16_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_12_F"))
		i20 =  (i18 & 255)
		__asm(push(i20!=0), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_14_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_13_F"))
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_15_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_14_F"))
		i20 =  ((__xasm<int>(push(i16), op(0x37))))
		i17 =  (i20 + i17)
		i17 =  ((__xasm<int>(push(i17), op(0x37))))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_15_F"))
		i17 =  (i2 + i17)
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_16_F"))
		i20 =  ((mstate.ebp+-16))
		i21 =  (i5 << 3)
		i21 =  (i0 + i21)
		i22 =  ((__xasm<int>(push((i21+16)), op(0x37))))
		i23 =  ((__xasm<int>(push(i22), op(0x37))))
		i23 =  ((__xasm<int>(push((i23+24)), op(0x37))))
		mstate.esp -= 16
		__asm(push(i22), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i17), push((mstate.esp+8)), op(0x3c))
		__asm(push(i20), push((mstate.esp+12)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[i23])()
		return
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE_state1"))
		i17 = mstate.eax
		mstate.esp += 16
		i20 =  (i21 + 16)
		__asm(push(i17==0), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_42_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_17_F"))
		i17 =  ((__xasm<int>(push(i12), op(0x37))))
		__asm(push(i17!=8), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_19_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_18_F"))
		i18 =  (i18 & 255)
		__asm(push(i18!=0), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_20_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_19_F"))
		i20 = i17
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_21_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_20_F"))
		i20 =  ((__xasm<int>(push(i20), op(0x37))))
		__asm(push(i20), push(i12), op(0x3c))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_21_F"))
		i17 = i20
		i18 =  ((__xasm<int>(push(i14), op(0x37))))
		__asm(push(i18<4), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_23_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_22_F"))
		__asm(push(i19==0), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_24_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_23_F"))
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_25_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_24_F"))
		i18 =  (i18 & -3)
		__asm(push(i18), push(i14), op(0x3c))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_25_F"))
		i19 =  ((__xasm<int>(push(i10), op(0x37))))
		__asm(push(i19!=0), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_32_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_26_F"))
		i19 =  ((__xasm<int>(push(i7), op(0x37))))
		__asm(push(i19), push(i15), op(0x3c))
		__asm(push(i18), push(i9), op(0x3c))
		i19 =  ((__xasm<int>(push(i13), op(0x37))))
		__asm(push(i19), push(i6), op(0x3c))
		__asm(push(i17), push(i10), op(0x3c))
		__asm(push(i18<4), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_29_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_27_F"))
		i17 =  (i18 & 2)
		__asm(push(i17==0), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_30_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_28_F"))
		i17 =  ((__xasm<int>(push(i8), op(0x37))))
		i17 =  (i17 & 1)
		__asm(push(i17==0), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_29_F"))
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_42_F"))
	__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_29_F"), lbl("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_29_B"), label, lbl("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_29_F")); 
		i0 =  (1)
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_45_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_30_F"))
		i17 =  (i18 & 1)
		__asm(push(i17==0), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_29_B"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_31_F"))
		i17 =  ((__xasm<int>(push(i8), op(0x37))))
		i17 =  (i17 & 2)
		__asm(push(i17==0), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_29_B"))
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_42_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_32_F"))
		i20 =  ((__xasm<int>(push(i15), op(0x37))))
		i21 =  ((__xasm<int>(push(i7), op(0x37))))
		__asm(push(i20==i21), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_35_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_33_F"))
		i5 =  (0)
		__asm(push(i5), push(i15), op(0x3c))
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_34_F"))
	__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_34_F"), lbl("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_34_B"), label, lbl("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_34_F")); 
		i5 =  (2)
		__asm(push(i5), push(i9), op(0x3c))
		i5 =  (1)
		mstate.eax = i5
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_46_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_35_F"))
		__asm(push(i20==0), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_38_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_36_F"))
		i17 =  ((__xasm<int>(push(i9), op(0x37))))
		i17 =  (i18 | i17)
		__asm(push(i17), push(i9), op(0x3c))
		i17 =  (i5 + -1)
		__asm(push(i5==0), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_44_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_37_F"))
		i5 = i17
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_8_B"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_38_F"))
		__asm(push(i17==8), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_34_B"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_39_F"))
		__asm(push(i19==8), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_34_B"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_40_F"))
		i17 =  ((__xasm<int>(push((i17+4)), op(0x37))))
		i19 =  ((__xasm<int>(push((i19+4)), op(0x37))))
		__asm(push(i17!=i19), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_34_B"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_41_F"))
		i17 =  ((__xasm<int>(push(i9), op(0x37))))
		i17 =  (i18 | i17)
		__asm(push(i17), push(i9), op(0x3c))
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_42_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_42_F"))
		i17 =  (i5 + -1)
		__asm(push(i5==0), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_44_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_43_F"))
		i5 = i17
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_8_B"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_44_F"))
		i0 =  ((__xasm<int>(push((i3+4)), op(0x37))))
		i0 =  ((i0!=0) ? 1 : 0)
		i0 =  (i0 & 1)
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_45_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_45_F"))
		mstate.eax = i0
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE__XprivateX__BB127_46_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE_errState"))
		throw("Invalid state in __ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE")
	}
}



// Async
public const __ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE:int = regFunc(FSM__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE.start)

public final class FSM__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE extends Machine {

	public static function start():void {
			var result:FSM__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE = new FSM__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
	public var i8:int, i9:int, i10:int, i11:int, i12:int, i13:int, i14:int, i15:int
	public var i16:int, i17:int, i18:int, i19:int, i20:int, i21:int, i22:int, i23:int
	public var i24:int, i25:int, i26:int, i27:int, i28:int
	public static const intRegCount:int = 29

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE_entry"))
		__asm(push(state), switchjump(
			"__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE_errState",
			"__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE_state0",
			"__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE_state1",
			"__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE_state2",
			"__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE_state3"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE_state0"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 32
		i0 =  ((__xasm<int>(push((mstate.ebp+36)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+16)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i3 =  (i0 + 16)
		i4 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i5 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i6 =  ((__xasm<int>(push((mstate.ebp+20)), op(0x37))))
		i7 =  ((__xasm<int>(push((mstate.ebp+24)), op(0x37))))
		i8 =  ((__xasm<int>(push((mstate.ebp+28)), op(0x37))))
		i9 =  ((__xasm<int>(push((mstate.ebp+32)), op(0x37))))
		i10 = i2
		i1 =  (i1 & 16)
		__asm(push(i1==0), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_2_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_1_F"))
		i1 =  ((__xasm<int>(push((i2+8)), op(0x37))))
		__asm(push(i1), push(i3), op(0x3c))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_2_F"))
		__asm(push(i7!=i9), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_4_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_3_F"))
		i1 =  ((__xasm<int>(push((i2+4)), op(0x37))))
		i11 =  ((__xasm<int>(push((i8+4)), op(0x37))))
		__asm(push(i1==i11), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_7_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_4_F"))
		i1 =  ((__xasm<int>(push((i2+4)), op(0x37))))
		i11 =  ((__xasm<int>(push((i6+4)), op(0x37))))
		__asm(push(i1==i11), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_5_F"))
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_12_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_5_F"))
		__asm(push(i7), push(i0), op(0x3c))
		__asm(push(i5), push((i0+4)), op(0x3c))
		__asm(push(i4<0), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_9_F"))
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_6_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_6_F"))
		i2 =  (0)
		i3 =  (i7 + i4)
		i3 =  ((i3==i9) ? 6 : 1)
		__asm(push(i3), push((i0+12)), op(0x3c))
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_8_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_7_F"))
		i2 =  (0)
		__asm(push(i5), push((i0+8)), op(0x3c))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_8_F"))
		mstate.eax = i2
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_54_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_9_F"))
		__asm(push(i4==-2), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_11_F"))
	__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_10_F"), lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_10_B"), label, lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_10_F")); 
		i0 =  (0)
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_93_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_11_F"))
		i2 =  (1)
		__asm(push(i2), push((i0+12)), op(0x3c))
		i0 =  (0)
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_94_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_12_F"))
		i1 =  ((__xasm<int>(push((i2+12)), op(0x37))))
		__asm(push(i1==0), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_10_B"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_13_F"))
		i11 =  ((mstate.ebp+-32))
		i12 =  (i1 << 3)
		i13 =  (0)
		i10 =  (i10 + i12)
		i1 =  (i1 + -1)
		i12 =  (-1)
		i14 =  (i0 + 12)
		i2 =  (i2 + 8)
		i15 =  (i0 + 4)
		i16 =  (i0 + 8)
		i17 =  (i11 + 16)
		i18 =  (i11 + 12)
		i19 =  (i11 + 8)
		i20 =  (i11 + 4)
		i21 = i6
		i22 = i7
	__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_14_F"), lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_14_B"), label, lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_14_F")); 
		i23 =  (0)
		i24 =  ((__xasm<int>(push(i3), op(0x37))))
		__asm(push(i23), push(i11), op(0x3c))
		__asm(push(i23), push(i20), op(0x3c))
		__asm(push(i23), push(i19), op(0x3c))
		__asm(push(i23), push(i18), op(0x3c))
		__asm(push(i24), push(i17), op(0x3c))
		i23 =  ((__xasm<int>(push((i10+12)), op(0x37))))
		i25 =  (i23 & 1)
		i26 =  (i25 | i5)
		i27 =  (i23 >> 8)
		__asm(push(i25!=0), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_16_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_15_F"))
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_17_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_16_F"))
		i25 =  ((__xasm<int>(push(i22), op(0x37))))
		i27 =  (i25 + i27)
		i27 =  ((__xasm<int>(push(i27), op(0x37))))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_17_F"))
		i25 = i27
		i25 =  (i7 + i25)
		i23 =  (i23 & 2)
		__asm(push(i23==0), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_19_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_18_F"))
		i24 = i26
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_23_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_19_F"))
		__asm(push(i4!=-2), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_22_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_20_F"))
		i24 =  (i24 & 3)
		__asm(push(i24!=0), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_22_F"))
	__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_21_F"), lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_21_B"), label, lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_21_F")); 
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_90_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_22_F"))
		i24 =  (i26 & -3)
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_23_F"))
		i23 = i24
		i24 =  ((mstate.ebp+-32))
		i26 =  ((__xasm<int>(push((i10+8)), op(0x37))))
		i27 =  ((__xasm<int>(push(i26), op(0x37))))
		i27 =  ((__xasm<int>(push((i27+28)), op(0x37))))
		mstate.esp -= 32
		__asm(push(i26), push(mstate.esp), op(0x3c))
		__asm(push(i4), push((mstate.esp+4)), op(0x3c))
		__asm(push(i23), push((mstate.esp+8)), op(0x3c))
		__asm(push(i6), push((mstate.esp+12)), op(0x3c))
		__asm(push(i25), push((mstate.esp+16)), op(0x3c))
		__asm(push(i8), push((mstate.esp+20)), op(0x3c))
		__asm(push(i9), push((mstate.esp+24)), op(0x3c))
		__asm(push(i24), push((mstate.esp+28)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[i27])()
		return
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE_state1"))
		i23 = mstate.eax
		mstate.esp += 32
		i24 =  ((__xasm<int>(push(i16), op(0x37))))
		i25 =  ((__xasm<int>(push(i19), op(0x37))))
		i24 =  (i25 | i24)
		__asm(push(i24), push(i16), op(0x3c))
		i25 =  ((__xasm<int>(push(i18), op(0x37))))
		__asm(push(i25==2), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_25_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_24_F"))
		__asm(push(i25!=6), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_26_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_25_F"))
		i13 =  ((__xasm<int>(push(i11), op(0x37))))
		__asm(push(i13), push(i0), op(0x3c))
		i13 =  ((__xasm<int>(push(i20), op(0x37))))
		__asm(push(i13), push(i15), op(0x3c))
		__asm(push(i25), push(i14), op(0x3c))
		i13 =  (i23 & 255)
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_53_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_26_F"))
		i26 =  (i13 & 255)
		__asm(push(i26!=0), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_33_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_27_F"))
		i26 =  ((__xasm<int>(push(i0), op(0x37))))
		__asm(push(i26!=0), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_33_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_28_F"))
		i13 =  ((__xasm<int>(push(i11), op(0x37))))
		__asm(push(i13), push(i0), op(0x3c))
		i25 =  ((__xasm<int>(push(i20), op(0x37))))
		__asm(push(i25), push(i15), op(0x3c))
		__asm(push(i13==0), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_30_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_29_F"))
		__asm(push(i24!=0), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_31_F"))
	__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_30_F"), lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_30_B"), label, lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_30_F")); 
		i13 = i23
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_88_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_31_F"))
		i13 =  ((__xasm<int>(push(i2), op(0x37))))
		i13 =  (i13 & 1)
		__asm(push(i13!=0), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_30_B"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_32_F"))
		i0 = i23
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_93_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_33_F"))
		i26 =  ((__xasm<int>(push(i0), op(0x37))))
		__asm(push(i26==0), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_37_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_34_F"))
		i27 =  ((__xasm<int>(push(i11), op(0x37))))
		__asm(push(i26!=i27), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_37_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_35_F"))
		i23 =  ((__xasm<int>(push(i15), op(0x37))))
		i25 =  ((__xasm<int>(push(i20), op(0x37))))
		i23 =  (i25 | i23)
		__asm(push(i23), push(i15), op(0x3c))
		__asm(push(i24!=4), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_21_B"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_36_F"))
		i0 = i13
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_93_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_37_F"))
		i27 =  ((__xasm<int>(push(i11), op(0x37))))
		__asm(push(i27==0), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_39_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_38_F"))
		__asm(push(i26!=0), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_42_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_39_F"))
		i28 =  ((i26!=0) ? 1 : 0)
		i23 =  (i28 & i23)
		i23 =  (i23 & 1)
		__asm(push(i23!=0), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_42_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_40_F"))
		i23 =  ((i27!=0) ? 1 : 0)
		i23 =  (i23 & i13)
		i23 =  (i23 & 1)
		__asm(push(i23!=0), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_42_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_41_F"))
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_88_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_42_F"))
		i23 =  ((__xasm<int>(push(i14), op(0x37))))
		__asm(push(i24<4), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_45_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_43_F"))
		i24 =  (i24 & 1)
		__asm(push(i24==0), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_47_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_44_F"))
		i24 =  ((__xasm<int>(push(i3), op(0x37))))
		i24 =  (i24 & 2)
		__asm(push(i24==0), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_47_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_45_F"))
		__asm(push(i23<1), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_58_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_46_F"))
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_76_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_47_F"))
		i23 =  ((i23==0) ? 1 : i23)
		__asm(push(i25==0), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_49_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_48_F"))
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_81_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_49_F"))
		i25 =  (i23 ^ 1)
		__asm(push(i25>3), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_55_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_50_F"))
		i13 =  (1)
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_51_F"))
	__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_51_F"), lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_51_B"), label, lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_51_F")); 
		i24 =  (0)
		__asm(push(i24), push(i0), op(0x3c))
		i13 =  (i13 & i23)
		__asm(push(i13<4), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_87_F"))
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_52_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_52_F"))
		i13 =  (2)
		__asm(push(i13), push(i14), op(0x3c))
		i13 =  (1)
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_53_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_53_F"))
		mstate.eax = i13
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_54_F"))
	__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_54_F"), lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_54_B"), label, lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_54_F")); 
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_55_F"))
		i25 =  (1)
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_56_F"))
	__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_56_F"), lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_56_B"), label, lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_56_F")); 
		i24 = i25
		__asm(push(i24>3), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_83_F"))
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_57_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_57_F"))
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_84_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_58_F"))
		__asm(push(i25<4), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_62_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_59_F"))
		i23 =  (i25 & 1)
		__asm(push(i23!=0), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_61_F"))
	__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_60_F"), lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_60_B"), label, lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_60_F")); 
		i23 =  (1)
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_76_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_61_F"))
		i23 =  ((__xasm<int>(push(i2), op(0x37))))
		i23 =  (i23 & 2)
		__asm(push(i23==0), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_60_B"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_62_F"))
		__asm(push(i4<0), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_74_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_63_F"))
		i23 =  (i26 + i4)
		__asm(push(i23!=i9), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_65_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_64_F"))
		i23 =  (6)
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_76_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_65_F"))
		__asm(push(i25<1), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_67_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_66_F"))
		i23 =  (1)
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_81_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_67_F"))
		i23 =  (1)
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_68_F"))
	__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_68_F"), lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_68_B"), label, lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_68_F")); 
		__asm(push(i23<4), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_71_F"))
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_69_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_69_F"))
		i25 =  (i23 & 1)
		__asm(push(i25==0), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_78_F"))
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_70_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_70_F"))
		i25 =  ((__xasm<int>(push(i2), op(0x37))))
		i25 =  (i25 & 2)
		__asm(push(i25==0), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_78_F"))
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_71_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_71_F"))
		i25 =  ((__xasm<int>(push(i11), op(0x37))))
		__asm(push(i4<0), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_79_F"))
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_72_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_72_F"))
		i25 =  (i25 + i4)
		__asm(push(i25!=i9), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_78_F"))
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_73_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_73_F"))
		i25 =  (6)
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_81_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_74_F"))
		__asm(push(i4==-2), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_60_B"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_75_F"))
		i23 =  ((__xasm<int>(push(i21), op(0x37))))
		i23 =  ((__xasm<int>(push((i23+32)), op(0x37))))
		mstate.esp -= 20
		__asm(push(i6), push(mstate.esp), op(0x3c))
		__asm(push(i4), push((mstate.esp+4)), op(0x3c))
		__asm(push(i26), push((mstate.esp+8)), op(0x3c))
		__asm(push(i8), push((mstate.esp+12)), op(0x3c))
		__asm(push(i9), push((mstate.esp+16)), op(0x3c))
		state = 2
		mstate.esp -= 4;(mstate.funcs[i23])()
		return
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE_state2"))
		i23 = mstate.eax
		mstate.esp += 20
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_76_F"))
		__asm(push(i25<1), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_68_B"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_77_F"))
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_81_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_78_B"), label, lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_78_F")); 
		i25 =  (1)
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_81_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_79_F"))
		__asm(push(i4==-2), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_78_B"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_80_F"))
		i24 =  ((__xasm<int>(push(i21), op(0x37))))
		i24 =  ((__xasm<int>(push((i24+32)), op(0x37))))
		mstate.esp -= 20
		__asm(push(i6), push(mstate.esp), op(0x3c))
		__asm(push(i4), push((mstate.esp+4)), op(0x3c))
		__asm(push(i25), push((mstate.esp+8)), op(0x3c))
		__asm(push(i8), push((mstate.esp+12)), op(0x3c))
		__asm(push(i9), push((mstate.esp+16)), op(0x3c))
		state = 3
		mstate.esp -= 4;(mstate.funcs[i24])()
		return
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE_state3"))
		i25 = mstate.eax
		mstate.esp += 20
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_81_F"))
		i24 =  (i25 ^ i23)
		__asm(push(i24>3), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_56_B"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_82_F"))
		i13 = i25
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_51_B"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_83_F"))
		i13 =  (0)
		i23 =  ((__xasm<int>(push(i11), op(0x37))))
		__asm(push(i23), push(i0), op(0x3c))
		i23 =  ((__xasm<int>(push(i20), op(0x37))))
		__asm(push(i23), push(i15), op(0x3c))
		i23 = i24
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_84_F"))
		__asm(push(i23), push(i14), op(0x3c))
		i24 =  (i23 & 2)
		__asm(push(i24!=0), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_10_B"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_85_F"))
		i23 =  (i23 & 1)
		__asm(push(i23==0), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_10_B"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_86_F"))
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_88_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_87_F"))
		i13 =  (1)
		__asm(push(i13), push(i14), op(0x3c))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_88_F"))
		i23 =  ((__xasm<int>(push(i16), op(0x37))))
		__asm(push(i23==4), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_95_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_89_F"))
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_90_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_90_F"))
		i10 =  (i10 + -8)
		i12 =  (i12 + 1)
		__asm(push(i1==i12), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_92_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_91_F"))
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_14_B"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_92_F"))
		i0 = i13
	__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_93_F"), lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_93_B"), label, lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_93_F")); 
		i0 =  (i0 & 255)
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_94_F"))
		mstate.eax = i0
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_54_B"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_95_F"))
		i0 = i13
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE__XprivateX__BB128_93_B"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE_errState"))
		throw("Invalid state in __ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE")
	}
}



// Async
public const __ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_:int = regFunc(FSM__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_.start)

public final class FSM__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_ extends Machine {

	public static function start():void {
			var result:FSM__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_ = new FSM__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
	public var i8:int, i9:int, i10:int, i11:int

	public static const intRegCount:int = 12

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2__entry"))
		__asm(push(state), switchjump(
			"__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2__errState",
			"__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2__state0",
			"__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2__state1",
			"__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2__state2"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2__state0"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB129_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i3 =  ((__xasm<int>(push((mstate.ebp+20)), op(0x37))))
		i4 =  ((__xasm<int>(push((mstate.ebp+24)), op(0x37))))
		i5 = i0
		__asm(push(i2!=i4), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB129_3_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB129_1_F"))
		i6 =  ((__xasm<int>(push((i0+4)), op(0x37))))
		i7 =  ((__xasm<int>(push((i3+4)), op(0x37))))
		__asm(push(i6!=i7), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB129_3_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB129_2_F"))
		i0 =  (6)
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB129_25_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB129_3_F"))
		i0 =  ((__xasm<int>(push((i0+12)), op(0x37))))
		__asm(push(i0!=0), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB129_5_F"))
	__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB129_4_F"), lbl("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB129_4_B"), label, lbl("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB129_4_F")); 
		i0 =  (1)
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB129_25_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB129_5_F"))
		i6 =  (i0 + -1)
		i7 = i2
		__asm(push(i1==-3), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB129_10_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB129_6_F"))
		i8 =  (-1)
		i0 =  (i0 << 3)
		i0 =  (i5 + i0)
		i5 = i8
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB129_7_F"))
	__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB129_7_F"), lbl("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB129_7_B"), label, lbl("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB129_7_F")); 
		i8 =  ((__xasm<int>(push((i0+12)), op(0x37))))
		i9 =  (i8 & 2)
		__asm(push(i9==0), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB129_22_F"))
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB129_8_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB129_8_F"))
		i9 =  (i8 & 1)
		i8 =  (i8 >> 8)
		__asm(push(i9!=0), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB129_17_F"))
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB129_9_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB129_9_F"))
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB129_18_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB129_10_F"))
		i7 =  (-1)
		i0 =  (i0 << 3)
		i0 =  (i5 + i0)
		i5 = i7
	__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB129_11_F"), lbl("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB129_11_B"), label, lbl("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB129_11_F")); 
		i7 =  ((__xasm<int>(push((i0+12)), op(0x37))))
		i8 =  (i7 & 2)
		__asm(push(i8!=0), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB129_14_F"))
	__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB129_12_F"), lbl("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB129_12_B"), label, lbl("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB129_12_F")); 
		i0 =  (i0 + -8)
		i5 =  (i5 + 1)
		__asm(push(i6==i5), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB129_4_B"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB129_13_F"))
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB129_11_B"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB129_14_F"))
		i8 =  (i7 & 1)
		__asm(push(i8!=0), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB129_12_B"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB129_15_F"))
		i9 =  ((__xasm<int>(push((i0+8)), op(0x37))))
		i10 =  ((__xasm<int>(push(i9), op(0x37))))
		i10 =  ((__xasm<int>(push((i10+32)), op(0x37))))
		i7 =  (i7 >> 8)
		mstate.esp -= 20
		i7 =  (i2 + i7)
		__asm(push(i9), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i7), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[i10])()
		return
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2__state1"))
		i7 = mstate.eax
		mstate.esp += 20
		__asm(push(i7<4), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB129_12_B"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB129_16_F"))
		i0 = i7
		i1 = i8
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB129_20_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB129_17_F"))
		i10 =  ((__xasm<int>(push(i7), op(0x37))))
		i8 =  (i10 + i8)
		i8 =  ((__xasm<int>(push(i8), op(0x37))))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB129_18_F"))
		i10 =  ((__xasm<int>(push((i0+8)), op(0x37))))
		i11 =  ((__xasm<int>(push(i10), op(0x37))))
		i11 =  ((__xasm<int>(push((i11+32)), op(0x37))))
		mstate.esp -= 20
		i8 =  (i2 + i8)
		__asm(push(i10), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i8), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		state = 2
		mstate.esp -= 4;(mstate.funcs[i11])()
		return
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2__state2"))
		i8 = mstate.eax
		mstate.esp += 20
		__asm(push(i8<4), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB129_22_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB129_19_F"))
		i0 = i8
		i1 = i9
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB129_20_F"))
		i5 = i1
		i5 =  (i5 & 255)
		__asm(push(i5!=0), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB129_24_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB129_21_F"))
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB129_25_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB129_22_F"))
		i0 =  (i0 + -8)
		i5 =  (i5 + 1)
		__asm(push(i6==i5), iftrue, target("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB129_4_B"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB129_23_F"))
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB129_7_B"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB129_24_F"))
		i0 =  (i0 | 1)
		__asm(jump, target("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB129_25_F"))
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2___XprivateX__BB129_25_F"))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2__errState"))
		throw("Invalid state in __ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_")
	}
}



// Sync
public const __GLOBAL__I__ZN9__gnu_cxx10__mt_allocIcE7_S_onceE:int = regFunc(FSM__GLOBAL__I__ZN9__gnu_cxx10__mt_allocIcE7_S_onceE.start)

public final class FSM__GLOBAL__I__ZN9__gnu_cxx10__mt_allocIcE7_S_onceE extends Machine {

	public static function start():void {
		var i0:int


		__asm(label, lbl("__GLOBAL__I__ZN9__gnu_cxx10__mt_allocIcE7_S_onceE_entry"))
	__asm(lbl("__GLOBAL__I__ZN9__gnu_cxx10__mt_allocIcE7_S_onceE__XprivateX__BB130_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push(__ZGVN9__gnu_cxx10__mt_allocIcE10_S_optionsE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZN9__gnu_cxx10__mt_allocIcE7_S_onceE__XprivateX__BB130_2_F"))
	__asm(lbl("__GLOBAL__I__ZN9__gnu_cxx10__mt_allocIcE7_S_onceE__XprivateX__BB130_1_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVN9__gnu_cxx10__mt_allocIcE10_S_optionsE), op(0x3a))
		mstate.esp -= 4
		i0 =  (__2E_str18192)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		mstate.esp -= 4;FSM_getenv.start()
	__asm(lbl("__GLOBAL__I__ZN9__gnu_cxx10__mt_allocIcE7_S_onceE_state1"))
		i0 = mstate.eax
		mstate.esp += 4
	__asm(lbl("__GLOBAL__I__ZN9__gnu_cxx10__mt_allocIcE7_S_onceE__XprivateX__BB130_2_F"))
		i0 =  ((__xasm<int>(push(__ZGVN9__gnu_cxx10__mt_allocIwE10_S_optionsE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZN9__gnu_cxx10__mt_allocIcE7_S_onceE__XprivateX__BB130_4_F"))
	__asm(lbl("__GLOBAL__I__ZN9__gnu_cxx10__mt_allocIcE7_S_onceE__XprivateX__BB130_3_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVN9__gnu_cxx10__mt_allocIwE10_S_optionsE), op(0x3a))
		mstate.esp -= 4
		i0 =  (__2E_str18192)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		mstate.esp -= 4;FSM_getenv.start()
	__asm(lbl("__GLOBAL__I__ZN9__gnu_cxx10__mt_allocIcE7_S_onceE_state2"))
		i0 = mstate.eax
		mstate.esp += 4
	__asm(lbl("__GLOBAL__I__ZN9__gnu_cxx10__mt_allocIcE7_S_onceE__XprivateX__BB130_4_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __GLOBAL__I__ZStrsIfcSt11char_traitsIcEERSt13basic_istreamIT0_T1_ES6_RSt7complexIT_E:int = regFunc(FSM__GLOBAL__I__ZStrsIfcSt11char_traitsIcEERSt13basic_istreamIT0_T1_ES6_RSt7complexIT_E.start)

public final class FSM__GLOBAL__I__ZStrsIfcSt11char_traitsIcEERSt13basic_istreamIT0_T1_ES6_RSt7complexIT_E extends Machine {

	public static function start():void {
		var i0:int


		__asm(label, lbl("__GLOBAL__I__ZStrsIfcSt11char_traitsIcEERSt13basic_istreamIT0_T1_ES6_RSt7complexIT_E_entry"))
	__asm(lbl("__GLOBAL__I__ZStrsIfcSt11char_traitsIcEERSt13basic_istreamIT0_T1_ES6_RSt7complexIT_E__XprivateX__BB131_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push(__ZGVNSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZStrsIfcSt11char_traitsIcEERSt13basic_istreamIT0_T1_ES6_RSt7complexIT_E__XprivateX__BB131_2_F"))
	__asm(lbl("__GLOBAL__I__ZStrsIfcSt11char_traitsIcEERSt13basic_istreamIT0_T1_ES6_RSt7complexIT_E__XprivateX__BB131_1_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZStrsIfcSt11char_traitsIcEERSt13basic_istreamIT0_T1_ES6_RSt7complexIT_E__XprivateX__BB131_2_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZStrsIfcSt11char_traitsIcEERSt13basic_istreamIT0_T1_ES6_RSt7complexIT_E__XprivateX__BB131_4_F"))
	__asm(lbl("__GLOBAL__I__ZStrsIfcSt11char_traitsIcEERSt13basic_istreamIT0_T1_ES6_RSt7complexIT_E__XprivateX__BB131_3_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZStrsIfcSt11char_traitsIcEERSt13basic_istreamIT0_T1_ES6_RSt7complexIT_E__XprivateX__BB131_4_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZStrsIfcSt11char_traitsIcEERSt13basic_istreamIT0_T1_ES6_RSt7complexIT_E__XprivateX__BB131_6_F"))
	__asm(lbl("__GLOBAL__I__ZStrsIfcSt11char_traitsIcEERSt13basic_istreamIT0_T1_ES6_RSt7complexIT_E__XprivateX__BB131_5_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZStrsIfcSt11char_traitsIcEERSt13basic_istreamIT0_T1_ES6_RSt7complexIT_E__XprivateX__BB131_6_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZStrsIfcSt11char_traitsIcEERSt13basic_istreamIT0_T1_ES6_RSt7complexIT_E__XprivateX__BB131_8_F"))
	__asm(lbl("__GLOBAL__I__ZStrsIfcSt11char_traitsIcEERSt13basic_istreamIT0_T1_ES6_RSt7complexIT_E__XprivateX__BB131_7_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZStrsIfcSt11char_traitsIcEERSt13basic_istreamIT0_T1_ES6_RSt7complexIT_E__XprivateX__BB131_8_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt8numpunctIcE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZStrsIfcSt11char_traitsIcEERSt13basic_istreamIT0_T1_ES6_RSt7complexIT_E__XprivateX__BB131_10_F"))
	__asm(lbl("__GLOBAL__I__ZStrsIfcSt11char_traitsIcEERSt13basic_istreamIT0_T1_ES6_RSt7complexIT_E__XprivateX__BB131_9_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt8numpunctIcE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZStrsIfcSt11char_traitsIcEERSt13basic_istreamIT0_T1_ES6_RSt7complexIT_E__XprivateX__BB131_10_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt8numpunctIwE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZStrsIfcSt11char_traitsIcEERSt13basic_istreamIT0_T1_ES6_RSt7complexIT_E__XprivateX__BB131_12_F"))
	__asm(lbl("__GLOBAL__I__ZStrsIfcSt11char_traitsIcEERSt13basic_istreamIT0_T1_ES6_RSt7complexIT_E__XprivateX__BB131_11_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt8numpunctIwE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZStrsIfcSt11char_traitsIcEERSt13basic_istreamIT0_T1_ES6_RSt7complexIT_E__XprivateX__BB131_12_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __GLOBAL__I__ZNSt13basic_filebufIcSt11char_traitsIcEE15_M_create_pbackEv:int = regFunc(FSM__GLOBAL__I__ZNSt13basic_filebufIcSt11char_traitsIcEE15_M_create_pbackEv.start)

public final class FSM__GLOBAL__I__ZNSt13basic_filebufIcSt11char_traitsIcEE15_M_create_pbackEv extends Machine {

	public static function start():void {
		var i0:int


		__asm(label, lbl("__GLOBAL__I__ZNSt13basic_filebufIcSt11char_traitsIcEE15_M_create_pbackEv_entry"))
	__asm(lbl("__GLOBAL__I__ZNSt13basic_filebufIcSt11char_traitsIcEE15_M_create_pbackEv__XprivateX__BB132_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push(__ZGVNSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt13basic_filebufIcSt11char_traitsIcEE15_M_create_pbackEv__XprivateX__BB132_2_F"))
	__asm(lbl("__GLOBAL__I__ZNSt13basic_filebufIcSt11char_traitsIcEE15_M_create_pbackEv__XprivateX__BB132_1_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt13basic_filebufIcSt11char_traitsIcEE15_M_create_pbackEv__XprivateX__BB132_2_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt13basic_filebufIcSt11char_traitsIcEE15_M_create_pbackEv__XprivateX__BB132_4_F"))
	__asm(lbl("__GLOBAL__I__ZNSt13basic_filebufIcSt11char_traitsIcEE15_M_create_pbackEv__XprivateX__BB132_3_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt13basic_filebufIcSt11char_traitsIcEE15_M_create_pbackEv__XprivateX__BB132_4_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt13basic_filebufIcSt11char_traitsIcEE15_M_create_pbackEv__XprivateX__BB132_6_F"))
	__asm(lbl("__GLOBAL__I__ZNSt13basic_filebufIcSt11char_traitsIcEE15_M_create_pbackEv__XprivateX__BB132_5_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt13basic_filebufIcSt11char_traitsIcEE15_M_create_pbackEv__XprivateX__BB132_6_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt13basic_filebufIcSt11char_traitsIcEE15_M_create_pbackEv__XprivateX__BB132_8_F"))
	__asm(lbl("__GLOBAL__I__ZNSt13basic_filebufIcSt11char_traitsIcEE15_M_create_pbackEv__XprivateX__BB132_7_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt13basic_filebufIcSt11char_traitsIcEE15_M_create_pbackEv__XprivateX__BB132_8_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __GLOBAL__I__ZNKSt9basic_iosIcSt11char_traitsIcEEcvPvEv:int = regFunc(FSM__GLOBAL__I__ZNKSt9basic_iosIcSt11char_traitsIcEEcvPvEv.start)

public final class FSM__GLOBAL__I__ZNKSt9basic_iosIcSt11char_traitsIcEEcvPvEv extends Machine {

	public static function start():void {
		var i0:int


		__asm(label, lbl("__GLOBAL__I__ZNKSt9basic_iosIcSt11char_traitsIcEEcvPvEv_entry"))
	__asm(lbl("__GLOBAL__I__ZNKSt9basic_iosIcSt11char_traitsIcEEcvPvEv__XprivateX__BB133_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push(__ZGVNSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNKSt9basic_iosIcSt11char_traitsIcEEcvPvEv__XprivateX__BB133_2_F"))
	__asm(lbl("__GLOBAL__I__ZNKSt9basic_iosIcSt11char_traitsIcEEcvPvEv__XprivateX__BB133_1_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNKSt9basic_iosIcSt11char_traitsIcEEcvPvEv__XprivateX__BB133_2_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNKSt9basic_iosIcSt11char_traitsIcEEcvPvEv__XprivateX__BB133_4_F"))
	__asm(lbl("__GLOBAL__I__ZNKSt9basic_iosIcSt11char_traitsIcEEcvPvEv__XprivateX__BB133_3_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNKSt9basic_iosIcSt11char_traitsIcEEcvPvEv__XprivateX__BB133_4_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNKSt9basic_iosIcSt11char_traitsIcEEcvPvEv__XprivateX__BB133_6_F"))
	__asm(lbl("__GLOBAL__I__ZNKSt9basic_iosIcSt11char_traitsIcEEcvPvEv__XprivateX__BB133_5_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNKSt9basic_iosIcSt11char_traitsIcEEcvPvEv__XprivateX__BB133_6_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNKSt9basic_iosIcSt11char_traitsIcEEcvPvEv__XprivateX__BB133_8_F"))
	__asm(lbl("__GLOBAL__I__ZNKSt9basic_iosIcSt11char_traitsIcEEcvPvEv__XprivateX__BB133_7_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNKSt9basic_iosIcSt11char_traitsIcEEcvPvEv__XprivateX__BB133_8_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __GLOBAL__I__ZNSt8ios_base4InitC2Ev:int = regFunc(FSM__GLOBAL__I__ZNSt8ios_base4InitC2Ev.start)

public final class FSM__GLOBAL__I__ZNSt8ios_base4InitC2Ev extends Machine {

	public static function start():void {
		var i0:int


		__asm(label, lbl("__GLOBAL__I__ZNSt8ios_base4InitC2Ev_entry"))
	__asm(lbl("__GLOBAL__I__ZNSt8ios_base4InitC2Ev__XprivateX__BB134_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push(__ZGVNSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt8ios_base4InitC2Ev__XprivateX__BB134_2_F"))
	__asm(lbl("__GLOBAL__I__ZNSt8ios_base4InitC2Ev__XprivateX__BB134_1_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt8ios_base4InitC2Ev__XprivateX__BB134_2_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt8ios_base4InitC2Ev__XprivateX__BB134_4_F"))
	__asm(lbl("__GLOBAL__I__ZNSt8ios_base4InitC2Ev__XprivateX__BB134_3_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt8ios_base4InitC2Ev__XprivateX__BB134_4_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt8ios_base4InitC2Ev__XprivateX__BB134_6_F"))
	__asm(lbl("__GLOBAL__I__ZNSt8ios_base4InitC2Ev__XprivateX__BB134_5_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt8ios_base4InitC2Ev__XprivateX__BB134_6_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt8ios_base4InitC2Ev__XprivateX__BB134_8_F"))
	__asm(lbl("__GLOBAL__I__ZNSt8ios_base4InitC2Ev__XprivateX__BB134_7_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt8ios_base4InitC2Ev__XprivateX__BB134_8_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __GLOBAL__I__ZNSiC2EPSt15basic_streambufIcSt11char_traitsIcEE:int = regFunc(FSM__GLOBAL__I__ZNSiC2EPSt15basic_streambufIcSt11char_traitsIcEE.start)

public final class FSM__GLOBAL__I__ZNSiC2EPSt15basic_streambufIcSt11char_traitsIcEE extends Machine {

	public static function start():void {
		var i0:int


		__asm(label, lbl("__GLOBAL__I__ZNSiC2EPSt15basic_streambufIcSt11char_traitsIcEE_entry"))
	__asm(lbl("__GLOBAL__I__ZNSiC2EPSt15basic_streambufIcSt11char_traitsIcEE__XprivateX__BB135_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push(__ZGVNSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSiC2EPSt15basic_streambufIcSt11char_traitsIcEE__XprivateX__BB135_2_F"))
	__asm(lbl("__GLOBAL__I__ZNSiC2EPSt15basic_streambufIcSt11char_traitsIcEE__XprivateX__BB135_1_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSiC2EPSt15basic_streambufIcSt11char_traitsIcEE__XprivateX__BB135_2_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSiC2EPSt15basic_streambufIcSt11char_traitsIcEE__XprivateX__BB135_4_F"))
	__asm(lbl("__GLOBAL__I__ZNSiC2EPSt15basic_streambufIcSt11char_traitsIcEE__XprivateX__BB135_3_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSiC2EPSt15basic_streambufIcSt11char_traitsIcEE__XprivateX__BB135_4_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt8numpunctIcE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSiC2EPSt15basic_streambufIcSt11char_traitsIcEE__XprivateX__BB135_6_F"))
	__asm(lbl("__GLOBAL__I__ZNSiC2EPSt15basic_streambufIcSt11char_traitsIcEE__XprivateX__BB135_5_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt8numpunctIcE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSiC2EPSt15basic_streambufIcSt11char_traitsIcEE__XprivateX__BB135_6_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSiC2EPSt15basic_streambufIcSt11char_traitsIcEE__XprivateX__BB135_8_F"))
	__asm(lbl("__GLOBAL__I__ZNSiC2EPSt15basic_streambufIcSt11char_traitsIcEE__XprivateX__BB135_7_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSiC2EPSt15basic_streambufIcSt11char_traitsIcEE__XprivateX__BB135_8_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSiC2EPSt15basic_streambufIcSt11char_traitsIcEE__XprivateX__BB135_10_F"))
	__asm(lbl("__GLOBAL__I__ZNSiC2EPSt15basic_streambufIcSt11char_traitsIcEE__XprivateX__BB135_9_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSiC2EPSt15basic_streambufIcSt11char_traitsIcEE__XprivateX__BB135_10_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt8numpunctIwE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSiC2EPSt15basic_streambufIcSt11char_traitsIcEE__XprivateX__BB135_12_F"))
	__asm(lbl("__GLOBAL__I__ZNSiC2EPSt15basic_streambufIcSt11char_traitsIcEE__XprivateX__BB135_11_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt8numpunctIwE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSiC2EPSt15basic_streambufIcSt11char_traitsIcEE__XprivateX__BB135_12_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __GLOBAL__I__ZNSt10moneypunctIcLb0EE4intlE:int = regFunc(FSM__GLOBAL__I__ZNSt10moneypunctIcLb0EE4intlE.start)

public final class FSM__GLOBAL__I__ZNSt10moneypunctIcLb0EE4intlE extends Machine {

	public static function start():void {
		var i0:int


		__asm(label, lbl("__GLOBAL__I__ZNSt10moneypunctIcLb0EE4intlE_entry"))
	__asm(lbl("__GLOBAL__I__ZNSt10moneypunctIcLb0EE4intlE__XprivateX__BB136_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push(__ZGVNSt10moneypunctIcLb0EE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt10moneypunctIcLb0EE4intlE__XprivateX__BB136_2_F"))
	__asm(lbl("__GLOBAL__I__ZNSt10moneypunctIcLb0EE4intlE__XprivateX__BB136_1_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt10moneypunctIcLb0EE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt10moneypunctIcLb0EE4intlE__XprivateX__BB136_2_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt10moneypunctIcLb1EE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt10moneypunctIcLb0EE4intlE__XprivateX__BB136_4_F"))
	__asm(lbl("__GLOBAL__I__ZNSt10moneypunctIcLb0EE4intlE__XprivateX__BB136_3_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt10moneypunctIcLb1EE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt10moneypunctIcLb0EE4intlE__XprivateX__BB136_4_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt9money_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt10moneypunctIcLb0EE4intlE__XprivateX__BB136_6_F"))
	__asm(lbl("__GLOBAL__I__ZNSt10moneypunctIcLb0EE4intlE__XprivateX__BB136_5_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt9money_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt10moneypunctIcLb0EE4intlE__XprivateX__BB136_6_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt9money_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt10moneypunctIcLb0EE4intlE__XprivateX__BB136_8_F"))
	__asm(lbl("__GLOBAL__I__ZNSt10moneypunctIcLb0EE4intlE__XprivateX__BB136_7_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt9money_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt10moneypunctIcLb0EE4intlE__XprivateX__BB136_8_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt8numpunctIcE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt10moneypunctIcLb0EE4intlE__XprivateX__BB136_10_F"))
	__asm(lbl("__GLOBAL__I__ZNSt10moneypunctIcLb0EE4intlE__XprivateX__BB136_9_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt8numpunctIcE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt10moneypunctIcLb0EE4intlE__XprivateX__BB136_10_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt10moneypunctIcLb0EE4intlE__XprivateX__BB136_12_F"))
	__asm(lbl("__GLOBAL__I__ZNSt10moneypunctIcLb0EE4intlE__XprivateX__BB136_11_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt10moneypunctIcLb0EE4intlE__XprivateX__BB136_12_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt10moneypunctIcLb0EE4intlE__XprivateX__BB136_14_F"))
	__asm(lbl("__GLOBAL__I__ZNSt10moneypunctIcLb0EE4intlE__XprivateX__BB136_13_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt10moneypunctIcLb0EE4intlE__XprivateX__BB136_14_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt11__timepunctIcE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt10moneypunctIcLb0EE4intlE__XprivateX__BB136_16_F"))
	__asm(lbl("__GLOBAL__I__ZNSt10moneypunctIcLb0EE4intlE__XprivateX__BB136_15_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt11__timepunctIcE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt10moneypunctIcLb0EE4intlE__XprivateX__BB136_16_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt8time_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt10moneypunctIcLb0EE4intlE__XprivateX__BB136_18_F"))
	__asm(lbl("__GLOBAL__I__ZNSt10moneypunctIcLb0EE4intlE__XprivateX__BB136_17_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt8time_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt10moneypunctIcLb0EE4intlE__XprivateX__BB136_18_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt8time_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt10moneypunctIcLb0EE4intlE__XprivateX__BB136_20_F"))
	__asm(lbl("__GLOBAL__I__ZNSt10moneypunctIcLb0EE4intlE__XprivateX__BB136_19_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt8time_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt10moneypunctIcLb0EE4intlE__XprivateX__BB136_20_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt8messagesIcE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt10moneypunctIcLb0EE4intlE__XprivateX__BB136_22_F"))
	__asm(lbl("__GLOBAL__I__ZNSt10moneypunctIcLb0EE4intlE__XprivateX__BB136_21_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt8messagesIcE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt10moneypunctIcLb0EE4intlE__XprivateX__BB136_22_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt7collateIcE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt10moneypunctIcLb0EE4intlE__XprivateX__BB136_24_F"))
	__asm(lbl("__GLOBAL__I__ZNSt10moneypunctIcLb0EE4intlE__XprivateX__BB136_23_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt7collateIcE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt10moneypunctIcLb0EE4intlE__XprivateX__BB136_24_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __GLOBAL__I__ZN14__gnu_internal12locale_mutexE:int = regFunc(FSM__GLOBAL__I__ZN14__gnu_internal12locale_mutexE.start)

public final class FSM__GLOBAL__I__ZN14__gnu_internal12locale_mutexE extends Machine {

	public static function start():void {
		var i0:int


		__asm(label, lbl("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE_entry"))
	__asm(lbl("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push(__ZGVNSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_2_F"))
	__asm(lbl("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_1_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_2_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_4_F"))
	__asm(lbl("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_3_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_4_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt8numpunctIcE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_6_F"))
	__asm(lbl("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_5_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt8numpunctIcE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_6_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_8_F"))
	__asm(lbl("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_7_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_8_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_10_F"))
	__asm(lbl("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_9_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_10_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt8numpunctIwE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_12_F"))
	__asm(lbl("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_11_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt8numpunctIwE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_12_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt7collateIcE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_14_F"))
	__asm(lbl("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_13_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt7collateIcE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_14_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt7collateIwE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_16_F"))
	__asm(lbl("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_15_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt7collateIwE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_16_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt11__timepunctIcE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_18_F"))
	__asm(lbl("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_17_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt11__timepunctIcE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_18_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt8time_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_20_F"))
	__asm(lbl("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_19_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt8time_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_20_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt8time_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_22_F"))
	__asm(lbl("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_21_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt8time_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_22_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt11__timepunctIwE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_24_F"))
	__asm(lbl("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_23_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt11__timepunctIwE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_24_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt8time_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_26_F"))
	__asm(lbl("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_25_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt8time_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_26_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt8time_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_28_F"))
	__asm(lbl("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_27_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt8time_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_28_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt9money_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_30_F"))
	__asm(lbl("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_29_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt9money_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_30_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt9money_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_32_F"))
	__asm(lbl("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_31_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt9money_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_32_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt10moneypunctIcLb0EE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_34_F"))
	__asm(lbl("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_33_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt10moneypunctIcLb0EE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_34_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt10moneypunctIcLb1EE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_36_F"))
	__asm(lbl("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_35_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt10moneypunctIcLb1EE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_36_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt9money_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_38_F"))
	__asm(lbl("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_37_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt9money_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_38_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt9money_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_40_F"))
	__asm(lbl("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_39_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt9money_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_40_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt10moneypunctIwLb0EE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_42_F"))
	__asm(lbl("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_41_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt10moneypunctIwLb0EE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_42_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt10moneypunctIwLb1EE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_44_F"))
	__asm(lbl("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_43_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt10moneypunctIwLb1EE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_44_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt8messagesIcE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_46_F"))
	__asm(lbl("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_45_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt8messagesIcE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_46_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt8messagesIwE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_48_F"))
	__asm(lbl("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_47_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt8messagesIwE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZN14__gnu_internal12locale_mutexE__XprivateX__BB137_48_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __GLOBAL__I__ZNSt6localeC2EPKc:int = regFunc(FSM__GLOBAL__I__ZNSt6localeC2EPKc.start)

public final class FSM__GLOBAL__I__ZNSt6localeC2EPKc extends Machine {

	public static function start():void {
		var i0:int


		__asm(label, lbl("__GLOBAL__I__ZNSt6localeC2EPKc_entry"))
	__asm(lbl("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push(__ZGVNSt8numpunctIcE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_2_F"))
	__asm(lbl("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_1_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt8numpunctIcE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_2_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_4_F"))
	__asm(lbl("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_3_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_4_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_6_F"))
	__asm(lbl("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_5_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_6_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt7collateIcE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_8_F"))
	__asm(lbl("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_7_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt7collateIcE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_8_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt10moneypunctIcLb0EE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_10_F"))
	__asm(lbl("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_9_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt10moneypunctIcLb0EE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_10_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt10moneypunctIcLb1EE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_12_F"))
	__asm(lbl("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_11_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt10moneypunctIcLb1EE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_12_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt9money_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_14_F"))
	__asm(lbl("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_13_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt9money_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_14_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt9money_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_16_F"))
	__asm(lbl("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_15_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt9money_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_16_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt11__timepunctIcE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_18_F"))
	__asm(lbl("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_17_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt11__timepunctIcE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_18_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt8time_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_20_F"))
	__asm(lbl("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_19_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt8time_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_20_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt8time_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_22_F"))
	__asm(lbl("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_21_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt8time_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_22_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt8messagesIcE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_24_F"))
	__asm(lbl("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_23_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt8messagesIcE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_24_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt8numpunctIwE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_26_F"))
	__asm(lbl("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_25_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt8numpunctIwE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_26_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_28_F"))
	__asm(lbl("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_27_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_28_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_30_F"))
	__asm(lbl("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_29_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_30_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt7collateIwE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_32_F"))
	__asm(lbl("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_31_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt7collateIwE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_32_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt10moneypunctIwLb0EE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_34_F"))
	__asm(lbl("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_33_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt10moneypunctIwLb0EE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_34_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt10moneypunctIwLb1EE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_36_F"))
	__asm(lbl("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_35_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt10moneypunctIwLb1EE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_36_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt9money_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_38_F"))
	__asm(lbl("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_37_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt9money_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_38_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt9money_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_40_F"))
	__asm(lbl("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_39_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt9money_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_40_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt11__timepunctIwE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_42_F"))
	__asm(lbl("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_41_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt11__timepunctIwE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_42_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt8time_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_44_F"))
	__asm(lbl("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_43_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt8time_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_44_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt8time_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_46_F"))
	__asm(lbl("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_45_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt8time_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_46_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt8messagesIwE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_48_F"))
	__asm(lbl("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_47_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt8messagesIwE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt6localeC2EPKc__XprivateX__BB138_48_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __GLOBAL__I__ZNSoC2EPSt15basic_streambufIcSt11char_traitsIcEE:int = regFunc(FSM__GLOBAL__I__ZNSoC2EPSt15basic_streambufIcSt11char_traitsIcEE.start)

public final class FSM__GLOBAL__I__ZNSoC2EPSt15basic_streambufIcSt11char_traitsIcEE extends Machine {

	public static function start():void {
		var i0:int


		__asm(label, lbl("__GLOBAL__I__ZNSoC2EPSt15basic_streambufIcSt11char_traitsIcEE_entry"))
	__asm(lbl("__GLOBAL__I__ZNSoC2EPSt15basic_streambufIcSt11char_traitsIcEE__XprivateX__BB139_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push(__ZGVNSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSoC2EPSt15basic_streambufIcSt11char_traitsIcEE__XprivateX__BB139_2_F"))
	__asm(lbl("__GLOBAL__I__ZNSoC2EPSt15basic_streambufIcSt11char_traitsIcEE__XprivateX__BB139_1_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSoC2EPSt15basic_streambufIcSt11char_traitsIcEE__XprivateX__BB139_2_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSoC2EPSt15basic_streambufIcSt11char_traitsIcEE__XprivateX__BB139_4_F"))
	__asm(lbl("__GLOBAL__I__ZNSoC2EPSt15basic_streambufIcSt11char_traitsIcEE__XprivateX__BB139_3_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSoC2EPSt15basic_streambufIcSt11char_traitsIcEE__XprivateX__BB139_4_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt8numpunctIcE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSoC2EPSt15basic_streambufIcSt11char_traitsIcEE__XprivateX__BB139_6_F"))
	__asm(lbl("__GLOBAL__I__ZNSoC2EPSt15basic_streambufIcSt11char_traitsIcEE__XprivateX__BB139_5_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt8numpunctIcE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSoC2EPSt15basic_streambufIcSt11char_traitsIcEE__XprivateX__BB139_6_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSoC2EPSt15basic_streambufIcSt11char_traitsIcEE__XprivateX__BB139_8_F"))
	__asm(lbl("__GLOBAL__I__ZNSoC2EPSt15basic_streambufIcSt11char_traitsIcEE__XprivateX__BB139_7_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSoC2EPSt15basic_streambufIcSt11char_traitsIcEE__XprivateX__BB139_8_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSoC2EPSt15basic_streambufIcSt11char_traitsIcEE__XprivateX__BB139_10_F"))
	__asm(lbl("__GLOBAL__I__ZNSoC2EPSt15basic_streambufIcSt11char_traitsIcEE__XprivateX__BB139_9_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSoC2EPSt15basic_streambufIcSt11char_traitsIcEE__XprivateX__BB139_10_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt8numpunctIwE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSoC2EPSt15basic_streambufIcSt11char_traitsIcEE__XprivateX__BB139_12_F"))
	__asm(lbl("__GLOBAL__I__ZNSoC2EPSt15basic_streambufIcSt11char_traitsIcEE__XprivateX__BB139_11_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt8numpunctIwE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSoC2EPSt15basic_streambufIcSt11char_traitsIcEE__XprivateX__BB139_12_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __GLOBAL__I__ZNSt15basic_stringbufIcSt11char_traitsIcESaIcEEC2ESt13_Ios_Openmode:int = regFunc(FSM__GLOBAL__I__ZNSt15basic_stringbufIcSt11char_traitsIcESaIcEEC2ESt13_Ios_Openmode.start)

public final class FSM__GLOBAL__I__ZNSt15basic_stringbufIcSt11char_traitsIcESaIcEEC2ESt13_Ios_Openmode extends Machine {

	public static function start():void {
		var i0:int


		__asm(label, lbl("__GLOBAL__I__ZNSt15basic_stringbufIcSt11char_traitsIcESaIcEEC2ESt13_Ios_Openmode_entry"))
	__asm(lbl("__GLOBAL__I__ZNSt15basic_stringbufIcSt11char_traitsIcESaIcEEC2ESt13_Ios_Openmode__XprivateX__BB140_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push(__ZGVNSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt15basic_stringbufIcSt11char_traitsIcESaIcEEC2ESt13_Ios_Openmode__XprivateX__BB140_2_F"))
	__asm(lbl("__GLOBAL__I__ZNSt15basic_stringbufIcSt11char_traitsIcESaIcEEC2ESt13_Ios_Openmode__XprivateX__BB140_1_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt15basic_stringbufIcSt11char_traitsIcESaIcEEC2ESt13_Ios_Openmode__XprivateX__BB140_2_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt15basic_stringbufIcSt11char_traitsIcESaIcEEC2ESt13_Ios_Openmode__XprivateX__BB140_4_F"))
	__asm(lbl("__GLOBAL__I__ZNSt15basic_stringbufIcSt11char_traitsIcESaIcEEC2ESt13_Ios_Openmode__XprivateX__BB140_3_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt15basic_stringbufIcSt11char_traitsIcESaIcEEC2ESt13_Ios_Openmode__XprivateX__BB140_4_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt15basic_stringbufIcSt11char_traitsIcESaIcEEC2ESt13_Ios_Openmode__XprivateX__BB140_6_F"))
	__asm(lbl("__GLOBAL__I__ZNSt15basic_stringbufIcSt11char_traitsIcESaIcEEC2ESt13_Ios_Openmode__XprivateX__BB140_5_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt15basic_stringbufIcSt11char_traitsIcESaIcEEC2ESt13_Ios_Openmode__XprivateX__BB140_6_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt15basic_stringbufIcSt11char_traitsIcESaIcEEC2ESt13_Ios_Openmode__XprivateX__BB140_8_F"))
	__asm(lbl("__GLOBAL__I__ZNSt15basic_stringbufIcSt11char_traitsIcESaIcEEC2ESt13_Ios_Openmode__XprivateX__BB140_7_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt15basic_stringbufIcSt11char_traitsIcESaIcEEC2ESt13_Ios_Openmode__XprivateX__BB140_8_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __GLOBAL__I__ZNSt12strstreambufC2Ei:int = regFunc(FSM__GLOBAL__I__ZNSt12strstreambufC2Ei.start)

public final class FSM__GLOBAL__I__ZNSt12strstreambufC2Ei extends Machine {

	public static function start():void {
		var i0:int


		__asm(label, lbl("__GLOBAL__I__ZNSt12strstreambufC2Ei_entry"))
	__asm(lbl("__GLOBAL__I__ZNSt12strstreambufC2Ei__XprivateX__BB141_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push(__ZGVNSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt12strstreambufC2Ei__XprivateX__BB141_2_F"))
	__asm(lbl("__GLOBAL__I__ZNSt12strstreambufC2Ei__XprivateX__BB141_1_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt12strstreambufC2Ei__XprivateX__BB141_2_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt12strstreambufC2Ei__XprivateX__BB141_4_F"))
	__asm(lbl("__GLOBAL__I__ZNSt12strstreambufC2Ei__XprivateX__BB141_3_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt12strstreambufC2Ei__XprivateX__BB141_4_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __GLOBAL__I__ZNSt10moneypunctIwLb0EE4intlE:int = regFunc(FSM__GLOBAL__I__ZNSt10moneypunctIwLb0EE4intlE.start)

public final class FSM__GLOBAL__I__ZNSt10moneypunctIwLb0EE4intlE extends Machine {

	public static function start():void {
		var i0:int


		__asm(label, lbl("__GLOBAL__I__ZNSt10moneypunctIwLb0EE4intlE_entry"))
	__asm(lbl("__GLOBAL__I__ZNSt10moneypunctIwLb0EE4intlE__XprivateX__BB142_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push(__ZGVNSt10moneypunctIwLb0EE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt10moneypunctIwLb0EE4intlE__XprivateX__BB142_2_F"))
	__asm(lbl("__GLOBAL__I__ZNSt10moneypunctIwLb0EE4intlE__XprivateX__BB142_1_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt10moneypunctIwLb0EE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt10moneypunctIwLb0EE4intlE__XprivateX__BB142_2_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt10moneypunctIwLb1EE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt10moneypunctIwLb0EE4intlE__XprivateX__BB142_4_F"))
	__asm(lbl("__GLOBAL__I__ZNSt10moneypunctIwLb0EE4intlE__XprivateX__BB142_3_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt10moneypunctIwLb1EE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt10moneypunctIwLb0EE4intlE__XprivateX__BB142_4_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt9money_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt10moneypunctIwLb0EE4intlE__XprivateX__BB142_6_F"))
	__asm(lbl("__GLOBAL__I__ZNSt10moneypunctIwLb0EE4intlE__XprivateX__BB142_5_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt9money_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt10moneypunctIwLb0EE4intlE__XprivateX__BB142_6_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt9money_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt10moneypunctIwLb0EE4intlE__XprivateX__BB142_8_F"))
	__asm(lbl("__GLOBAL__I__ZNSt10moneypunctIwLb0EE4intlE__XprivateX__BB142_7_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt9money_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt10moneypunctIwLb0EE4intlE__XprivateX__BB142_8_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt8numpunctIwE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt10moneypunctIwLb0EE4intlE__XprivateX__BB142_10_F"))
	__asm(lbl("__GLOBAL__I__ZNSt10moneypunctIwLb0EE4intlE__XprivateX__BB142_9_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt8numpunctIwE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt10moneypunctIwLb0EE4intlE__XprivateX__BB142_10_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt10moneypunctIwLb0EE4intlE__XprivateX__BB142_12_F"))
	__asm(lbl("__GLOBAL__I__ZNSt10moneypunctIwLb0EE4intlE__XprivateX__BB142_11_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt10moneypunctIwLb0EE4intlE__XprivateX__BB142_12_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt10moneypunctIwLb0EE4intlE__XprivateX__BB142_14_F"))
	__asm(lbl("__GLOBAL__I__ZNSt10moneypunctIwLb0EE4intlE__XprivateX__BB142_13_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt10moneypunctIwLb0EE4intlE__XprivateX__BB142_14_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt11__timepunctIwE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt10moneypunctIwLb0EE4intlE__XprivateX__BB142_16_F"))
	__asm(lbl("__GLOBAL__I__ZNSt10moneypunctIwLb0EE4intlE__XprivateX__BB142_15_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt11__timepunctIwE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt10moneypunctIwLb0EE4intlE__XprivateX__BB142_16_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt8time_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt10moneypunctIwLb0EE4intlE__XprivateX__BB142_18_F"))
	__asm(lbl("__GLOBAL__I__ZNSt10moneypunctIwLb0EE4intlE__XprivateX__BB142_17_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt8time_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt10moneypunctIwLb0EE4intlE__XprivateX__BB142_18_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt8time_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt10moneypunctIwLb0EE4intlE__XprivateX__BB142_20_F"))
	__asm(lbl("__GLOBAL__I__ZNSt10moneypunctIwLb0EE4intlE__XprivateX__BB142_19_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt8time_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt10moneypunctIwLb0EE4intlE__XprivateX__BB142_20_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt8messagesIwE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt10moneypunctIwLb0EE4intlE__XprivateX__BB142_22_F"))
	__asm(lbl("__GLOBAL__I__ZNSt10moneypunctIwLb0EE4intlE__XprivateX__BB142_21_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt8messagesIwE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt10moneypunctIwLb0EE4intlE__XprivateX__BB142_22_F"))
		i0 =  ((__xasm<int>(push(__ZGVNSt7collateIwE2idE), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__GLOBAL__I__ZNSt10moneypunctIwLb0EE4intlE__XprivateX__BB142_24_F"))
	__asm(lbl("__GLOBAL__I__ZNSt10moneypunctIwLb0EE4intlE__XprivateX__BB142_23_F"))
		i0 =  (1)
		__asm(push(i0), push(__ZGVNSt7collateIwE2idE), op(0x3a))
	__asm(lbl("__GLOBAL__I__ZNSt10moneypunctIwLb0EE4intlE__XprivateX__BB142_24_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Async
public const __ZN13b2CircleShapeD1Ev:int = regFunc(FSM__ZN13b2CircleShapeD1Ev.start)

public final class FSM__ZN13b2CircleShapeD1Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN13b2CircleShapeD1Ev = new FSM__ZN13b2CircleShapeD1Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN13b2CircleShapeD1Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN13b2CircleShapeD1Ev_errState",
			"__ZN13b2CircleShapeD1Ev_state0"))
	__asm(lbl("__ZN13b2CircleShapeD1Ev_state0"))
	__asm(lbl("__ZN13b2CircleShapeD1Ev__XprivateX__BB143_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV7b2Shape)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN13b2CircleShapeD1Ev_errState"))
		throw("Invalid state in __ZN13b2CircleShapeD1Ev")
	}
}



// Async
public const __ZN13b2CircleShapeD0Ev:int = regFunc(FSM__ZN13b2CircleShapeD0Ev.start)

public final class FSM__ZN13b2CircleShapeD0Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN13b2CircleShapeD0Ev = new FSM__ZN13b2CircleShapeD0Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN13b2CircleShapeD0Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN13b2CircleShapeD0Ev_errState",
			"__ZN13b2CircleShapeD0Ev_state0",
			"__ZN13b2CircleShapeD0Ev_state1"))
	__asm(lbl("__ZN13b2CircleShapeD0Ev_state0"))
	__asm(lbl("__ZN13b2CircleShapeD0Ev__XprivateX__BB144_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV7b2Shape)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		__asm(push(i1==0), iftrue, target("__ZN13b2CircleShapeD0Ev__XprivateX__BB144_2_F"))
	__asm(lbl("__ZN13b2CircleShapeD0Ev__XprivateX__BB144_1_F"))
		i0 =  (0)
		mstate.esp -= 8
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN13b2CircleShapeD0Ev_state1"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__ZN13b2CircleShapeD0Ev__XprivateX__BB144_2_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN13b2CircleShapeD0Ev_errState"))
		throw("Invalid state in __ZN13b2CircleShapeD0Ev")
	}
}



// Async
public const __ZNK13b2CircleShape5CloneEP16b2BlockAllocator:int = regFunc(FSM__ZNK13b2CircleShape5CloneEP16b2BlockAllocator.start)

public final class FSM__ZNK13b2CircleShape5CloneEP16b2BlockAllocator extends Machine {

	public static function start():void {
			var result:FSM__ZNK13b2CircleShape5CloneEP16b2BlockAllocator = new FSM__ZNK13b2CircleShape5CloneEP16b2BlockAllocator
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int

	public static const intRegCount:int = 4
	public var f0:Number, f1:Number

	public static const NumberRegCount:int = 2
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZNK13b2CircleShape5CloneEP16b2BlockAllocator_entry"))
		__asm(push(state), switchjump(
			"__ZNK13b2CircleShape5CloneEP16b2BlockAllocator_errState",
			"__ZNK13b2CircleShape5CloneEP16b2BlockAllocator_state0",
			"__ZNK13b2CircleShape5CloneEP16b2BlockAllocator_state1"))
	__asm(lbl("__ZNK13b2CircleShape5CloneEP16b2BlockAllocator_state0"))
	__asm(lbl("__ZNK13b2CircleShape5CloneEP16b2BlockAllocator__XprivateX__BB145_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (24)
		mstate.esp -= 8
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM__ZN16b2BlockAllocator8AllocateEi.start()
		return
	__asm(lbl("__ZNK13b2CircleShape5CloneEP16b2BlockAllocator_state1"))
		i0 = mstate.eax
		mstate.esp += 8
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i2 = i0
		__asm(push(i0==0), iftrue, target("__ZNK13b2CircleShape5CloneEP16b2BlockAllocator__XprivateX__BB145_2_F"))
	__asm(lbl("__ZNK13b2CircleShape5CloneEP16b2BlockAllocator__XprivateX__BB145_1_F"))
		i3 =  (__ZTV13b2CircleShape)
		i3 =  (i3 + 8)
		__asm(push(i3), push(i0), op(0x3c))
		i3 =  (0)
		__asm(push(i3), push((i2+4)), op(0x3c))
		__asm(push(i3), push((i2+8)), op(0x3c))
		__asm(push(i3), push((i2+16)), op(0x3c))
		__asm(push(i3), push((i2+20)), op(0x3c))
	__asm(lbl("__ZNK13b2CircleShape5CloneEP16b2BlockAllocator__XprivateX__BB145_2_F"))
		i3 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		__asm(push(i3), push((i2+4)), op(0x3c))
		f0 =  ((__xasm<Number>(push((i1+8)), op(0x38))))
		__asm(push(f0), push((i2+8)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i1+12)), op(0x38))))
		__asm(push(f0), push((i2+12)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i1+16)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i1+20)), op(0x38))))
		__asm(push(f0), push((i2+16)), op(0x3d))
		__asm(push(f1), push((i2+20)), op(0x3d))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZNK13b2CircleShape5CloneEP16b2BlockAllocator_errState"))
		throw("Invalid state in __ZNK13b2CircleShape5CloneEP16b2BlockAllocator")
	}
}



// Sync
public const __ZNK13b2CircleShape13GetChildCountEv:int = regFunc(FSM__ZNK13b2CircleShape13GetChildCountEv.start)

public final class FSM__ZNK13b2CircleShape13GetChildCountEv extends Machine {

	public static function start():void {
		var i0:int


		__asm(label, lbl("__ZNK13b2CircleShape13GetChildCountEv_entry"))
	__asm(lbl("__ZNK13b2CircleShape13GetChildCountEv__XprivateX__BB146_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (1)
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZNK13b2CircleShape9TestPointERK11b2TransformRK6b2Vec2:int = regFunc(FSM__ZNK13b2CircleShape9TestPointERK11b2TransformRK6b2Vec2.start)

public final class FSM__ZNK13b2CircleShape9TestPointERK11b2TransformRK6b2Vec2 extends Machine {

	public static function start():void {
		var i0:int, i1:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number

		__asm(label, lbl("__ZNK13b2CircleShape9TestPointERK11b2TransformRK6b2Vec2_entry"))
	__asm(lbl("__ZNK13b2CircleShape9TestPointERK11b2TransformRK6b2Vec2__XprivateX__BB147_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i0+12)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i1+16)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i0+8)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i0+20)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i1+20)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i0+16)), op(0x38))))
		f0 =  (f0 * f1)
		f1 =  (f2 * f1)
		f2 =  (f3 * f4)
		f3 =  (f5 * f4)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f2 =  f2/*fround*/
		f3 =  f3/*fround*/
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  (f0 + f2)
		f1 =  (f1 + f3)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f2 =  ((__xasm<Number>(push((i0+4)), op(0x38))))
		f0 =  f0/*fextend*/
		f3 =  ((__xasm<Number>(push(i0), op(0x38))))
		f1 =  f1/*fextend*/
		f0 =  (f2 + f0)
		f1 =  (f3 + f1)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		i0 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		f2 =  ((__xasm<Number>(push((i0+4)), op(0x38))))
		f0 =  f0/*fextend*/
		f3 =  ((__xasm<Number>(push(i0), op(0x38))))
		f1 =  f1/*fextend*/
		f0 =  (f2 - f0)
		f1 =  (f3 - f1)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  (f0 * f0)
		f1 =  (f1 * f1)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f2 =  ((__xasm<Number>(push((i1+8)), op(0x38))))
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  (f1 + f0)
		f1 =  (f2 * f2)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f1 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		i0 =  ((f0<=f1) ? 1 : 0)
		i0 =  (i0 & 1)
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZNK13b2CircleShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi:int = regFunc(FSM__ZNK13b2CircleShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi.start)

public final class FSM__ZNK13b2CircleShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi extends Machine {

	public static function start():void {
		var i0:int, i1:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number
		var f8:Number, f9:Number, f10:Number, f11:Number

		__asm(label, lbl("__ZNK13b2CircleShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi_entry"))
	__asm(lbl("__ZNK13b2CircleShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB148_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		f0 =  (0)
		i0 =  ((__xasm<int>(push((mstate.ebp+20)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		f1 =  ((__xasm<Number>(push((i0+12)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i1+16)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i0+8)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i0+20)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i1+20)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i0+16)), op(0x38))))
		f1 =  (f1 * f2)
		f2 =  (f3 * f2)
		f3 =  (f4 * f5)
		f4 =  (f6 * f5)
		f1 =  f1/*fround*/
		f2 =  f2/*fround*/
		f3 =  f3/*fround*/
		f4 =  f4/*fround*/
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f4 =  f4/*fextend*/
		f2 =  f2/*fextend*/
		f1 =  (f1 + f3)
		f2 =  (f2 + f4)
		f1 =  f1/*fround*/
		f2 =  f2/*fround*/
		f3 =  ((__xasm<Number>(push((i0+4)), op(0x38))))
		f1 =  f1/*fextend*/
		f4 =  ((__xasm<Number>(push(i0), op(0x38))))
		f2 =  f2/*fextend*/
		f1 =  (f3 + f1)
		f2 =  (f4 + f2)
		f1 =  f1/*fround*/
		f2 =  f2/*fround*/
		i0 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		f3 =  ((__xasm<Number>(push((i0+4)), op(0x38))))
		f1 =  f1/*fextend*/
		f4 =  ((__xasm<Number>(push(i0), op(0x38))))
		f2 =  f2/*fextend*/
		f1 =  (f3 - f1)
		f2 =  (f4 - f2)
		f1 =  f1/*fround*/
		f2 =  f2/*fround*/
		f5 =  ((__xasm<Number>(push((i0+12)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i0+8)), op(0x38))))
		f7 =  f1/*fextend*/
		f8 =  f2/*fextend*/
		f9 =  (f7 * f7)
		f10 =  (f8 * f8)
		f3 =  (f5 - f3)
		f4 =  (f6 - f4)
		f5 =  f9/*fround*/
		f6 =  f10/*fround*/
		f3 =  f3/*fround*/
		f4 =  f4/*fround*/
		f9 =  ((__xasm<Number>(push((i1+8)), op(0x38))))
		f10 =  f3/*fextend*/
		f11 =  f4/*fextend*/
		f5 =  f5/*fextend*/
		f6 =  f6/*fextend*/
		f5 =  (f6 + f5)
		f6 =  (f7 * f10)
		f7 =  (f8 * f11)
		f8 =  (f9 * f9)
		f9 =  (f10 * f10)
		f10 =  (f11 * f11)
		f5 =  f5/*fround*/
		f6 =  f6/*fround*/
		f7 =  f7/*fround*/
		f8 =  f8/*fround*/
		f9 =  f9/*fround*/
		f10 =  f10/*fround*/
		f8 =  f8/*fextend*/
		f5 =  f5/*fextend*/
		f6 =  f6/*fextend*/
		f7 =  f7/*fextend*/
		f9 =  f9/*fextend*/
		f10 =  f10/*fextend*/
		f5 =  (f5 - f8)
		f6 =  (f7 + f6)
		f7 =  (f10 + f9)
		f5 =  f5/*fround*/
		f6 =  f6/*fround*/
		f7 =  f7/*fround*/
		f8 =  f6/*fextend*/
		f5 =  f5/*fextend*/
		f9 =  f7/*fextend*/
		f5 =  (f9 * f5)
		f8 =  (f8 * f8)
		f5 =  f5/*fround*/
		f8 =  f8/*fround*/
		f5 =  f5/*fextend*/
		f8 =  f8/*fextend*/
		f5 =  (f8 - f5)
		f5 =  f5/*fround*/
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f8 =  f5/*fextend*/
		__asm(push(f8<f0), iftrue, target("__ZNK13b2CircleShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB148_2_F"))
	__asm(lbl("__ZNK13b2CircleShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB148_1_F"))
		f0 =  (1.19209e-07)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f8 =  f7/*fextend*/
		__asm(push(f8>=f0), iftrue, target("__ZNK13b2CircleShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB148_3_F"))
	__asm(jump, target("__ZNK13b2CircleShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB148_2_F"), lbl("__ZNK13b2CircleShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB148_2_B"), label, lbl("__ZNK13b2CircleShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB148_2_F")); 
		i0 =  (0)
		__asm(jump, target("__ZNK13b2CircleShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB148_7_F"))
	__asm(lbl("__ZNK13b2CircleShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB148_3_F"))
		f0 =  (0)
		f5 =  f5/*fextend*/
		f5 =  Math.sqrt(f5)
		f5 =  f5/*fround*/
		f6 =  f6/*fextend*/
		f5 =  f5/*fextend*/
		f5 =  (f5 + f6)
		f5 =  f5/*fround*/
		f5 =  f5/*fextend*/
		f5 =  -f5
		f5 =  f5/*fround*/
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f6 =  f5/*fextend*/
		__asm(push(f6<f0), iftrue, target("__ZNK13b2CircleShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB148_2_B"))
	__asm(lbl("__ZNK13b2CircleShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB148_4_F"))
		f0 =  ((__xasm<Number>(push((i0+16)), op(0x38))))
		f6 =  f7/*fextend*/
		f0 =  (f0 * f6)
		f0 =  f0/*fround*/
		f6 =  f5/*fextend*/
		f0 =  f0/*fextend*/
		__asm(push(f0<f6), iftrue, target("__ZNK13b2CircleShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB148_2_B"))
	__asm(lbl("__ZNK13b2CircleShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB148_5_F"))
		f0 =  (1.19209e-07)
		f6 =  f7/*fextend*/
		f5 =  f5/*fextend*/
		f5 =  (f5 / f6)
		f5 =  f5/*fround*/
		f3 =  f3/*fextend*/
		f6 =  f5/*fextend*/
		f4 =  f4/*fextend*/
		f3 =  (f3 * f6)
		f4 =  (f4 * f6)
		f3 =  f3/*fround*/
		f4 =  f4/*fround*/
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f4 =  f4/*fextend*/
		f2 =  f2/*fextend*/
		f1 =  (f1 + f3)
		f2 =  (f2 + f4)
		f1 =  f1/*fround*/
		f2 =  f2/*fround*/
		f3 =  f1/*fextend*/
		f4 =  f2/*fextend*/
		f3 =  (f3 * f3)
		f4 =  (f4 * f4)
		f3 =  f3/*fround*/
		f4 =  f4/*fround*/
		f3 =  f3/*fextend*/
		f4 =  f4/*fextend*/
		f3 =  (f4 + f3)
		f3 =  f3/*fround*/
		__asm(push(f5), push((i1+8)), op(0x3d))
		f3 =  f3/*fextend*/
		__asm(push(f2), push(i1), op(0x3d))
		f3 =  Math.sqrt(f3)
		__asm(push(f1), push((i1+4)), op(0x3d))
		f3 =  f3/*fround*/
		i0 =  (i1 + 4)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f4 =  f3/*fextend*/
		__asm(push(f4>=f0), iftrue, target("__ZNK13b2CircleShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB148_9_F"))
	__asm(lbl("__ZNK13b2CircleShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB148_6_F"))
		i0 =  (1)
		__asm(jump, target("__ZNK13b2CircleShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB148_7_F"))
	__asm(lbl("__ZNK13b2CircleShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB148_7_F"))
		i0 =  (i0 & 255)
	__asm(jump, target("__ZNK13b2CircleShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB148_8_F"), lbl("__ZNK13b2CircleShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB148_8_B"), label, lbl("__ZNK13b2CircleShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB148_8_F")); 
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	__asm(lbl("__ZNK13b2CircleShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB148_9_F"))
		f0 =  (1)
		f0 =  f0/*fround*/
		f3 =  f3/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 / f3)
		f0 =  f0/*fround*/
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f2 =  (f2 * f0)
		f1 =  f1/*fextend*/
		f0 =  (f1 * f0)
		f1 =  f2/*fround*/
		__asm(push(f1), push(i1), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push(i0), op(0x3d))
		i0 =  (1)
		__asm(jump, target("__ZNK13b2CircleShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB148_8_B"))
	}
}



// Sync
public const __ZNK13b2CircleShape11ComputeAABBEP6b2AABBRK11b2Transformi:int = regFunc(FSM__ZNK13b2CircleShape11ComputeAABBEP6b2AABBRK11b2Transformi.start)

public final class FSM__ZNK13b2CircleShape11ComputeAABBEP6b2AABBRK11b2Transformi extends Machine {

	public static function start():void {
		var i0:int, i1:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number

		__asm(label, lbl("__ZNK13b2CircleShape11ComputeAABBEP6b2AABBRK11b2Transformi_entry"))
	__asm(lbl("__ZNK13b2CircleShape11ComputeAABBEP6b2AABBRK11b2Transformi__XprivateX__BB149_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i1+16)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i0+8)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i1+20)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i0+16)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i0+12)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i0+20)), op(0x38))))
		f1 =  (f1 * f0)
		f3 =  (f3 * f2)
		f0 =  (f4 * f0)
		f1 =  f1/*fround*/
		f2 =  (f5 * f2)
		f3 =  f3/*fround*/
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f1 =  (f1 + f3)
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 + f2)
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		f2 =  ((__xasm<Number>(push(i0), op(0x38))))
		f1 =  f1/*fextend*/
		f1 =  (f2 + f1)
		f2 =  ((__xasm<Number>(push((i0+4)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f2 + f0)
		f1 =  f1/*fround*/
		f2 =  ((__xasm<Number>(push((i1+8)), op(0x38))))
		f0 =  f0/*fround*/
		f1 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		f3 =  (f1 - f2)
		f2 =  (f0 - f2)
		i0 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		f3 =  f3/*fround*/
		__asm(push(f3), push(i0), op(0x3d))
		f2 =  f2/*fround*/
		__asm(push(f2), push((i0+4)), op(0x3d))
		f2 =  ((__xasm<Number>(push((i1+8)), op(0x38))))
		f1 =  (f1 + f2)
		f0 =  (f0 + f2)
		f1 =  f1/*fround*/
		__asm(push(f1), push((i0+8)), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push((i0+12)), op(0x3d))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZN13b2CircleShape11ComputeMassEP10b2MassDataf:int = regFunc(FSM__ZN13b2CircleShape11ComputeMassEP10b2MassDataf.start)

public final class FSM__ZN13b2CircleShape11ComputeMassEP10b2MassDataf extends Machine {

	public static function start():void {
		var i0:int, i1:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number

		__asm(label, lbl("__ZN13b2CircleShape11ComputeMassEP10b2MassDataf_entry"))
	__asm(lbl("__ZN13b2CircleShape11ComputeMassEP10b2MassDataf__XprivateX__BB150_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		f0 =  (3.14159)
		f0 =  f0/*fround*/
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		f1 =  ((__xasm<Number>(push((i0+8)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f1 * f0)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f0 =  (f0 * f1)
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push((mstate.ebp+16)), op(0x38))))
		f2 =  f0/*fextend*/
		f1 =  (f2 * f1)
		f1 =  f1/*fround*/
		__asm(push(f0), push((i0+12)), op(0x3d))
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		__asm(push(f1), push(i1), op(0x3d))
		f0 =  ((__xasm<Number>(push((i0+16)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i0+20)), op(0x38))))
		__asm(push(f0), push((i1+4)), op(0x3d))
		f0 =  (0.5)
		__asm(push(f2), push((i1+8)), op(0x3d))
		f0 =  f0/*fround*/
		f2 =  ((__xasm<Number>(push((i0+16)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i0+20)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i0+8)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f4 * f0)
		f2 =  (f2 * f2)
		f3 =  (f3 * f3)
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f3 =  f3/*fround*/
		f0 =  f0/*fextend*/
		f3 =  f3/*fextend*/
		f2 =  f2/*fextend*/
		f0 =  (f0 * f4)
		f2 =  (f2 + f3)
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 + f2)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  (f1 * f0)
		f0 =  f0/*fround*/
		__asm(push(f0), push((i1+12)), op(0x3d))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Async
public const __ZN14b2PolygonShapeD1Ev:int = regFunc(FSM__ZN14b2PolygonShapeD1Ev.start)

public final class FSM__ZN14b2PolygonShapeD1Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN14b2PolygonShapeD1Ev = new FSM__ZN14b2PolygonShapeD1Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN14b2PolygonShapeD1Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN14b2PolygonShapeD1Ev_errState",
			"__ZN14b2PolygonShapeD1Ev_state0"))
	__asm(lbl("__ZN14b2PolygonShapeD1Ev_state0"))
	__asm(lbl("__ZN14b2PolygonShapeD1Ev__XprivateX__BB151_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV7b2Shape)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN14b2PolygonShapeD1Ev_errState"))
		throw("Invalid state in __ZN14b2PolygonShapeD1Ev")
	}
}



// Async
public const __ZN14b2PolygonShapeD0Ev:int = regFunc(FSM__ZN14b2PolygonShapeD0Ev.start)

public final class FSM__ZN14b2PolygonShapeD0Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN14b2PolygonShapeD0Ev = new FSM__ZN14b2PolygonShapeD0Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN14b2PolygonShapeD0Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN14b2PolygonShapeD0Ev_errState",
			"__ZN14b2PolygonShapeD0Ev_state0",
			"__ZN14b2PolygonShapeD0Ev_state1"))
	__asm(lbl("__ZN14b2PolygonShapeD0Ev_state0"))
	__asm(lbl("__ZN14b2PolygonShapeD0Ev__XprivateX__BB152_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV7b2Shape)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		__asm(push(i1==0), iftrue, target("__ZN14b2PolygonShapeD0Ev__XprivateX__BB152_2_F"))
	__asm(lbl("__ZN14b2PolygonShapeD0Ev__XprivateX__BB152_1_F"))
		i0 =  (0)
		mstate.esp -= 8
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN14b2PolygonShapeD0Ev_state1"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__ZN14b2PolygonShapeD0Ev__XprivateX__BB152_2_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN14b2PolygonShapeD0Ev_errState"))
		throw("Invalid state in __ZN14b2PolygonShapeD0Ev")
	}
}



// Async
public const __ZNK14b2PolygonShape5CloneEP16b2BlockAllocator:int = regFunc(FSM__ZNK14b2PolygonShape5CloneEP16b2BlockAllocator.start)

public final class FSM__ZNK14b2PolygonShape5CloneEP16b2BlockAllocator extends Machine {

	public static function start():void {
			var result:FSM__ZNK14b2PolygonShape5CloneEP16b2BlockAllocator = new FSM__ZNK14b2PolygonShape5CloneEP16b2BlockAllocator
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int

	public static const intRegCount:int = 6
	public var f0:Number, f1:Number

	public static const NumberRegCount:int = 2
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZNK14b2PolygonShape5CloneEP16b2BlockAllocator_entry"))
		__asm(push(state), switchjump(
			"__ZNK14b2PolygonShape5CloneEP16b2BlockAllocator_errState",
			"__ZNK14b2PolygonShape5CloneEP16b2BlockAllocator_state0",
			"__ZNK14b2PolygonShape5CloneEP16b2BlockAllocator_state1"))
	__asm(lbl("__ZNK14b2PolygonShape5CloneEP16b2BlockAllocator_state0"))
	__asm(lbl("__ZNK14b2PolygonShape5CloneEP16b2BlockAllocator__XprivateX__BB153_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (156)
		mstate.esp -= 8
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM__ZN16b2BlockAllocator8AllocateEi.start()
		return
	__asm(lbl("__ZNK14b2PolygonShape5CloneEP16b2BlockAllocator_state1"))
		i0 = mstate.eax
		mstate.esp += 8
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i2 = i0
		__asm(push(i0==0), iftrue, target("__ZNK14b2PolygonShape5CloneEP16b2BlockAllocator__XprivateX__BB153_2_F"))
	__asm(lbl("__ZNK14b2PolygonShape5CloneEP16b2BlockAllocator__XprivateX__BB153_1_F"))
		i3 =  (__ZTV14b2PolygonShape)
		i3 =  (i3 + 8)
		__asm(push(i3), push(i0), op(0x3c))
		i3 =  (2)
		__asm(push(i3), push((i2+4)), op(0x3c))
		f0 =  ((__xasm<Number>(push(_b2_polygonRadius), op(0x38))))
		__asm(push(f0), push((i2+8)), op(0x3d))
		i3 =  (0)
		__asm(push(i3), push((i2+152)), op(0x3c))
		__asm(push(i3), push((i2+16)), op(0x3c))
		__asm(push(i3), push((i2+20)), op(0x3c))
	__asm(lbl("__ZNK14b2PolygonShape5CloneEP16b2BlockAllocator__XprivateX__BB153_2_F"))
		i3 =  (64)
		i4 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		__asm(push(i4), push((i2+4)), op(0x3c))
		f0 =  ((__xasm<Number>(push((i1+8)), op(0x38))))
		__asm(push(f0), push((i2+8)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i1+12)), op(0x38))))
		__asm(push(f0), push((i2+12)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i1+16)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i1+20)), op(0x38))))
		__asm(push(f0), push((i2+16)), op(0x3d))
		__asm(push(f1), push((i2+20)), op(0x3d))
		i4 =  (i0 + 24)
		i5 =  (i1 + 24)
		memcpy(i4, i5, i3)
		i4 =  (i0 + 88)
		i5 =  (i1 + 88)
		memcpy(i4, i5, i3)
		i1 =  ((__xasm<int>(push((i1+152)), op(0x37))))
		__asm(push(i1), push((i2+152)), op(0x3c))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZNK14b2PolygonShape5CloneEP16b2BlockAllocator_errState"))
		throw("Invalid state in __ZNK14b2PolygonShape5CloneEP16b2BlockAllocator")
	}
}



// Sync
public const __ZNK14b2PolygonShape13GetChildCountEv:int = regFunc(FSM__ZNK14b2PolygonShape13GetChildCountEv.start)

public final class FSM__ZNK14b2PolygonShape13GetChildCountEv extends Machine {

	public static function start():void {
		var i0:int


		__asm(label, lbl("__ZNK14b2PolygonShape13GetChildCountEv_entry"))
	__asm(lbl("__ZNK14b2PolygonShape13GetChildCountEv__XprivateX__BB154_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (1)
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZNK14b2PolygonShape9TestPointERK11b2TransformRK6b2Vec2:int = regFunc(FSM__ZNK14b2PolygonShape9TestPointERK11b2TransformRK6b2Vec2.start)

public final class FSM__ZNK14b2PolygonShape9TestPointERK11b2TransformRK6b2Vec2 extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number

		__asm(label, lbl("__ZNK14b2PolygonShape9TestPointERK11b2TransformRK6b2Vec2_entry"))
	__asm(lbl("__ZNK14b2PolygonShape9TestPointERK11b2TransformRK6b2Vec2__XprivateX__BB155_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i0+4)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i1+4)), op(0x38))))
		f2 =  ((__xasm<Number>(push(i0), op(0x38))))
		f3 =  ((__xasm<Number>(push(i1), op(0x38))))
		f0 =  (f0 - f1)
		f1 =  (f2 - f3)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f2 =  ((__xasm<Number>(push((i1+16)), op(0x38))))
		f1 =  f1/*fextend*/
		f3 =  ((__xasm<Number>(push((i1+8)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i1+20)), op(0x38))))
		f0 =  f0/*fextend*/
		f5 =  ((__xasm<Number>(push((i1+12)), op(0x38))))
		f4 =  (f0 * f4)
		f0 =  (f0 * f5)
		f2 =  (f1 * f2)
		f1 =  (f1 * f3)
		f3 =  f4/*fround*/
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		f3 =  f3/*fextend*/
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		i1 =  ((__xasm<int>(push((i0+152)), op(0x37))))
		f2 =  (f2 + f3)
		f0 =  (f1 + f0)
		f1 =  f2/*fround*/
		f0 =  f0/*fround*/
		__asm(push(i1>0), iftrue, target("__ZNK14b2PolygonShape9TestPointERK11b2TransformRK6b2Vec2__XprivateX__BB155_3_F"))
	__asm(jump, target("__ZNK14b2PolygonShape9TestPointERK11b2TransformRK6b2Vec2__XprivateX__BB155_1_F"), lbl("__ZNK14b2PolygonShape9TestPointERK11b2TransformRK6b2Vec2__XprivateX__BB155_1_B"), label, lbl("__ZNK14b2PolygonShape9TestPointERK11b2TransformRK6b2Vec2__XprivateX__BB155_1_F")); 
		i0 =  (1)
		__asm(jump, target("__ZNK14b2PolygonShape9TestPointERK11b2TransformRK6b2Vec2__XprivateX__BB155_2_F"))
	__asm(jump, target("__ZNK14b2PolygonShape9TestPointERK11b2TransformRK6b2Vec2__XprivateX__BB155_2_F"), lbl("__ZNK14b2PolygonShape9TestPointERK11b2TransformRK6b2Vec2__XprivateX__BB155_2_B"), label, lbl("__ZNK14b2PolygonShape9TestPointERK11b2TransformRK6b2Vec2__XprivateX__BB155_2_F")); 
		i0 =  (i0 & 255)
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	__asm(lbl("__ZNK14b2PolygonShape9TestPointERK11b2TransformRK6b2Vec2__XprivateX__BB155_3_F"))
		i2 =  (0)
	__asm(jump, target("__ZNK14b2PolygonShape9TestPointERK11b2TransformRK6b2Vec2__XprivateX__BB155_4_F"), lbl("__ZNK14b2PolygonShape9TestPointERK11b2TransformRK6b2Vec2__XprivateX__BB155_4_B"), label, lbl("__ZNK14b2PolygonShape9TestPointERK11b2TransformRK6b2Vec2__XprivateX__BB155_4_F")); 
		f2 =  (0)
		f3 =  ((__xasm<Number>(push((i0+28)), op(0x38))))
		f4 =  f1/*fextend*/
		f5 =  ((__xasm<Number>(push((i0+24)), op(0x38))))
		f6 =  f0/*fextend*/
		f3 =  (f4 - f3)
		f4 =  (f6 - f5)
		f3 =  f3/*fround*/
		f4 =  f4/*fround*/
		f5 =  ((__xasm<Number>(push((i0+88)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i0+92)), op(0x38))))
		f3 =  f3/*fextend*/
		f4 =  f4/*fextend*/
		f3 =  (f6 * f3)
		f4 =  (f5 * f4)
		f3 =  f3/*fround*/
		f4 =  f4/*fround*/
		f3 =  f3/*fextend*/
		f4 =  f4/*fextend*/
		f3 =  (f4 + f3)
		f3 =  f3/*fround*/
		f2 =  f2/*fround*/
		f2 =  f2/*fextend*/
		f3 =  f3/*fextend*/
		__asm(push(f3<=f2), iftrue, target("__ZNK14b2PolygonShape9TestPointERK11b2TransformRK6b2Vec2__XprivateX__BB155_6_F"))
	__asm(lbl("__ZNK14b2PolygonShape9TestPointERK11b2TransformRK6b2Vec2__XprivateX__BB155_5_F"))
		i0 =  (0)
		__asm(jump, target("__ZNK14b2PolygonShape9TestPointERK11b2TransformRK6b2Vec2__XprivateX__BB155_2_B"))
	__asm(lbl("__ZNK14b2PolygonShape9TestPointERK11b2TransformRK6b2Vec2__XprivateX__BB155_6_F"))
		i0 =  (i0 + 8)
		i2 =  (i2 + 1)
		__asm(push(i1<=i2), iftrue, target("__ZNK14b2PolygonShape9TestPointERK11b2TransformRK6b2Vec2__XprivateX__BB155_1_B"))
	__asm(lbl("__ZNK14b2PolygonShape9TestPointERK11b2TransformRK6b2Vec2__XprivateX__BB155_7_F"))
		__asm(jump, target("__ZNK14b2PolygonShape9TestPointERK11b2TransformRK6b2Vec2__XprivateX__BB155_4_B"))
	}
}



// Async
public const __ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi:int = regFunc(FSM__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi.start)

public final class FSM__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi extends Machine {

	public static function start():void {
			var result:FSM__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi = new FSM__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
	public var i8:int, i9:int

	public static const intRegCount:int = 10
	public var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number
	public var f8:Number, f9:Number, f10:Number, f11:Number, f12:Number, f13:Number

	public static const NumberRegCount:int = 14
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi_entry"))
		__asm(push(state), switchjump(
			"__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi_errState",
			"__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi_state0",
			"__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi_state1",
			"__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi_state2"))
	__asm(lbl("__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi_state0"))
	__asm(lbl("__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB156_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+20)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i1+4)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i0+4)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i1+12)), op(0x38))))
		f3 =  ((__xasm<Number>(push(i1), op(0x38))))
		f4 =  ((__xasm<Number>(push(i0), op(0x38))))
		f5 =  ((__xasm<Number>(push((i1+8)), op(0x38))))
		f0 =  (f0 - f1)
		f3 =  (f3 - f4)
		f4 =  (f5 - f4)
		f1 =  (f2 - f1)
		f0 =  f0/*fround*/
		f2 =  f3/*fround*/
		f3 =  f4/*fround*/
		f1 =  f1/*fround*/
		f4 =  ((__xasm<Number>(push((i0+16)), op(0x38))))
		f2 =  f2/*fextend*/
		f5 =  ((__xasm<Number>(push((i0+8)), op(0x38))))
		f3 =  f3/*fextend*/
		f6 =  ((__xasm<Number>(push((i0+20)), op(0x38))))
		f0 =  f0/*fextend*/
		f7 =  ((__xasm<Number>(push((i0+12)), op(0x38))))
		f1 =  f1/*fextend*/
		f8 =  (f0 * f6)
		f0 =  (f0 * f7)
		f9 =  (f2 * f4)
		f2 =  (f2 * f5)
		f4 =  (f3 * f4)
		f3 =  (f3 * f5)
		f5 =  (f1 * f6)
		f1 =  (f1 * f7)
		f6 =  f8/*fround*/
		f0 =  f0/*fround*/
		f7 =  f9/*fround*/
		f2 =  f2/*fround*/
		f4 =  f4/*fround*/
		f3 =  f3/*fround*/
		f5 =  f5/*fround*/
		f1 =  f1/*fround*/
		f6 =  f6/*fextend*/
		f7 =  f7/*fextend*/
		f0 =  f0/*fextend*/
		f2 =  f2/*fextend*/
		f5 =  f5/*fextend*/
		f4 =  f4/*fextend*/
		f1 =  f1/*fextend*/
		f3 =  f3/*fextend*/
		f6 =  (f7 + f6)
		f0 =  (f2 + f0)
		f2 =  (f4 + f5)
		f1 =  (f3 + f1)
		f3 =  f6/*fround*/
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		i2 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		f4 =  f3/*fextend*/
		f2 =  f2/*fextend*/
		f5 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		f2 =  (f2 - f4)
		f1 =  (f1 - f5)
		f4 =  ((__xasm<Number>(push((i1+16)), op(0x38))))
		i1 =  ((__xasm<int>(push((i2+152)), op(0x37))))
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		i3 =  (i0 + 16)
		i4 =  (i0 + 20)
		i5 =  (i0 + 12)
		i0 =  (i0 + 8)
		i6 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i7 = i2
		__asm(push(i1>0), iftrue, target("__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB156_2_F"))
	__asm(lbl("__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB156_1_F"))
		f0 =  (0)
		f0 =  f0/*fround*/
		i1 =  (-1)
		__asm(jump, target("__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB156_16_F"))
	__asm(lbl("__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB156_2_F"))
		f5 =  (0)
		f5 =  f5/*fround*/
		i8 =  (-1)
		i9 =  (0)
		f6 = f4
	__asm(jump, target("__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB156_3_F"), lbl("__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB156_3_B"), label, lbl("__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB156_3_F")); 
		f7 =  (0)
		f8 =  ((__xasm<Number>(push((i7+28)), op(0x38))))
		f9 =  f3/*fextend*/
		f10 =  ((__xasm<Number>(push((i7+24)), op(0x38))))
		f11 =  f0/*fextend*/
		f8 =  (f8 - f9)
		f9 =  (f10 - f11)
		f8 =  f8/*fround*/
		f9 =  f9/*fround*/
		f10 =  ((__xasm<Number>(push((i7+88)), op(0x38))))
		f11 =  ((__xasm<Number>(push((i7+92)), op(0x38))))
		f8 =  f8/*fextend*/
		f9 =  f9/*fextend*/
		f12 =  f1/*fextend*/
		f13 =  f2/*fextend*/
		f8 =  (f11 * f8)
		f9 =  (f10 * f9)
		f10 =  (f10 * f12)
		f11 =  (f11 * f13)
		f8 =  f8/*fround*/
		f9 =  f9/*fround*/
		f10 =  f10/*fround*/
		f11 =  f11/*fround*/
		f8 =  f8/*fextend*/
		f9 =  f9/*fextend*/
		f11 =  f11/*fextend*/
		f10 =  f10/*fextend*/
		f8 =  (f9 + f8)
		f9 =  (f10 + f11)
		f9 =  f9/*fround*/
		f8 =  f8/*fround*/
		f7 =  f7/*fround*/
		f7 =  f7/*fextend*/
		f10 =  f9/*fextend*/
		__asm(push(f10!=f7), iftrue, target("__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB156_6_F"))
	__asm(lbl("__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB156_4_F"))
		f7 =  (0)
		f9 =  f7/*fround*/
		f7 =  f9/*fextend*/
		f8 =  f8/*fextend*/
		__asm(push(f8<f7), iftrue, target("__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB156_21_F"))
	__asm(jump, target("__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB156_5_F"), lbl("__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB156_5_B"), label, lbl("__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB156_5_F")); 
		__asm(jump, target("__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB156_13_F"))
	__asm(lbl("__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB156_6_F"))
		f7 =  (0)
		f7 =  f7/*fround*/
		f7 =  f7/*fextend*/
		f10 =  f9/*fextend*/
		__asm(push(f10>=f7), iftrue, target("__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB156_10_F"))
	__asm(lbl("__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB156_7_F"))
		f7 =  f9/*fextend*/
		f10 =  f5/*fextend*/
		f7 =  (f10 * f7)
		f7 =  f7/*fround*/
		f10 =  f8/*fextend*/
		f7 =  f7/*fextend*/
		__asm(push(f7<=f10), iftrue, target("__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB156_10_F"))
	__asm(lbl("__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB156_8_F"))
		f5 =  f9/*fextend*/
		f7 =  f8/*fextend*/
		f5 =  (f7 / f5)
		f5 =  f5/*fround*/
		f7 =  f5/*fextend*/
		f8 =  f6/*fextend*/
		__asm(push(f8<f7), iftrue, target("__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB156_21_F"))
	__asm(lbl("__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB156_9_F"))
		i8 = i9
		__asm(jump, target("__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB156_14_F"))
	__asm(lbl("__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB156_10_F"))
		f7 =  (0)
		f7 =  f7/*fround*/
		f7 =  f7/*fextend*/
		f10 =  f9/*fextend*/
		__asm(push(f10<=f7), iftrue, target("__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB156_5_B"))
	__asm(lbl("__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB156_11_F"))
		f7 =  f9/*fextend*/
		f10 =  f6/*fextend*/
		f7 =  (f10 * f7)
		f7 =  f7/*fround*/
		f10 =  f8/*fextend*/
		f7 =  f7/*fextend*/
		__asm(push(f7<=f10), iftrue, target("__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB156_5_B"))
	__asm(lbl("__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB156_12_F"))
		f6 =  f9/*fextend*/
		f7 =  f8/*fextend*/
		f6 =  (f7 / f6)
		f6 =  f6/*fround*/
	__asm(lbl("__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB156_13_F"))
		f7 =  f5/*fextend*/
		f8 =  f6/*fextend*/
		__asm(push(f8<f7), iftrue, target("__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB156_21_F"))
	__asm(lbl("__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB156_14_F"))
		i7 =  (i7 + 8)
		i9 =  (i9 + 1)
		__asm(push(i1>i9), iftrue, target("__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB156_23_F"))
	__asm(lbl("__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB156_15_F"))
		f0 = f5
		i1 = i8
		__asm(jump, target("__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB156_16_F"))
	__asm(lbl("__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB156_16_F"))
		f1 =  (0)
		f1 =  f1/*fround*/
		f1 =  f1/*fextend*/
		f2 =  f0/*fextend*/
		__asm(push(f2<f1), iftrue, target("__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB156_18_F"))
	__asm(lbl("__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB156_17_F"))
		f1 =  f0/*fextend*/
		f2 =  f4/*fextend*/
		__asm(push(f2>=f1), iftrue, target("__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB156_19_F"))
	__asm(lbl("__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB156_18_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str59266)
		i3 =  (__ZZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2TransformiE8__func__)
		i4 =  (__2E_str49256)
		i5 =  (249)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi_state1"))
		mstate.esp += 24
		state = 2
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi_state2"))
	__asm(lbl("__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB156_19_F"))
		__asm(push(i1<0), iftrue, target("__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB156_21_F"))
	__asm(lbl("__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB156_20_F"))
		i7 =  (1)
		i1 =  (i1 << 3)
		__asm(push(f0), push((i6+8)), op(0x3d))
		i1 =  (i2 + i1)
		f0 =  ((__xasm<Number>(push((i1+88)), op(0x38))))
		f1 =  ((__xasm<Number>(push(i0), op(0x38))))
		f2 =  ((__xasm<Number>(push((i1+92)), op(0x38))))
		f3 =  ((__xasm<Number>(push(i3), op(0x38))))
		f4 =  ((__xasm<Number>(push(i5), op(0x38))))
		f5 =  ((__xasm<Number>(push(i4), op(0x38))))
		f1 =  (f1 * f0)
		f3 =  (f3 * f2)
		f0 =  (f4 * f0)
		f1 =  f1/*fround*/
		f2 =  (f5 * f2)
		f3 =  f3/*fround*/
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f1 =  (f1 + f3)
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 + f2)
		f1 =  f1/*fround*/
		__asm(push(f1), push(i6), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push((i6+4)), op(0x3d))
		mstate.eax = i7
		__asm(jump, target("__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB156_22_F"))
	__asm(lbl("__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB156_21_F"))
		i0 =  (0)
		mstate.eax = i0
	__asm(lbl("__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB156_22_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB156_23_F"))
		__asm(jump, target("__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB156_3_B"))
	__asm(lbl("__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi_errState"))
		throw("Invalid state in __ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi")
	}
}



// Sync
public const __ZNK14b2PolygonShape11ComputeAABBEP6b2AABBRK11b2Transformi:int = regFunc(FSM__ZNK14b2PolygonShape11ComputeAABBEP6b2AABBRK11b2Transformi.start)

public final class FSM__ZNK14b2PolygonShape11ComputeAABBEP6b2AABBRK11b2Transformi extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int, i4:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number
		var f8:Number, f9:Number, f10:Number, f11:Number, f12:Number, f13:Number, f14:Number, f15:Number
		var f16:Number

		__asm(label, lbl("__ZNK14b2PolygonShape11ComputeAABBEP6b2AABBRK11b2Transformi_entry"))
	__asm(lbl("__ZNK14b2PolygonShape11ComputeAABBEP6b2AABBRK11b2Transformi__XprivateX__BB157_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i0+8)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i0+12)), op(0x38))))
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		f2 =  ((__xasm<Number>(push((i1+24)), op(0x38))))
		f3 =  f0/*fextend*/
		f4 =  f1/*fextend*/
		f3 =  (f3 * f2)
		f2 =  (f4 * f2)
		f4 =  ((__xasm<Number>(push(i0), op(0x38))))
		f5 =  ((__xasm<Number>(push((i0+16)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i0+4)), op(0x38))))
		f7 =  ((__xasm<Number>(push((i0+20)), op(0x38))))
		f3 =  f3/*fround*/
		f2 =  f2/*fround*/
		f8 =  ((__xasm<Number>(push((i1+28)), op(0x38))))
		f9 =  f5/*fextend*/
		f10 =  f7/*fextend*/
		f3 =  f3/*fextend*/
		f11 =  f4/*fextend*/
		f2 =  f2/*fextend*/
		f12 =  f6/*fextend*/
		f3 =  (f11 + f3)
		f2 =  (f12 + f2)
		f9 =  (f9 * f8)
		f8 =  (f10 * f8)
		f3 =  f3/*fround*/
		f2 =  f2/*fround*/
		f9 =  f9/*fround*/
		f8 =  f8/*fround*/
		f9 =  f9/*fextend*/
		f3 =  f3/*fextend*/
		f8 =  f8/*fextend*/
		f2 =  f2/*fextend*/
		i0 =  ((__xasm<int>(push((i1+152)), op(0x37))))
		f3 =  (f3 + f9)
		f2 =  (f2 + f8)
		f3 =  f3/*fround*/
		f2 =  f2/*fround*/
		i2 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i3 = i1
		__asm(push(i0>1), iftrue, target("__ZNK14b2PolygonShape11ComputeAABBEP6b2AABBRK11b2Transformi__XprivateX__BB157_2_F"))
	__asm(lbl("__ZNK14b2PolygonShape11ComputeAABBEP6b2AABBRK11b2Transformi__XprivateX__BB157_1_F"))
		f0 = f3
		f1 = f2
		__asm(jump, target("__ZNK14b2PolygonShape11ComputeAABBEP6b2AABBRK11b2Transformi__XprivateX__BB157_5_F"))
	__asm(lbl("__ZNK14b2PolygonShape11ComputeAABBEP6b2AABBRK11b2Transformi__XprivateX__BB157_2_F"))
		i4 =  (1)
		f8 = f3
		f9 = f2
	__asm(jump, target("__ZNK14b2PolygonShape11ComputeAABBEP6b2AABBRK11b2Transformi__XprivateX__BB157_3_F"), lbl("__ZNK14b2PolygonShape11ComputeAABBEP6b2AABBRK11b2Transformi__XprivateX__BB157_3_B"), label, lbl("__ZNK14b2PolygonShape11ComputeAABBEP6b2AABBRK11b2Transformi__XprivateX__BB157_3_F")); 
		f10 =  ((__xasm<Number>(push((i3+32)), op(0x38))))
		f11 =  f0/*fextend*/
		f12 =  f1/*fextend*/
		f11 =  (f11 * f10)
		f10 =  (f12 * f10)
		f11 =  f11/*fround*/
		f10 =  f10/*fround*/
		f12 =  ((__xasm<Number>(push((i3+36)), op(0x38))))
		f13 =  f5/*fextend*/
		f14 =  f7/*fextend*/
		f11 =  f11/*fextend*/
		f15 =  f4/*fextend*/
		f10 =  f10/*fextend*/
		f16 =  f6/*fextend*/
		f11 =  (f15 + f11)
		f10 =  (f16 + f10)
		f13 =  (f13 * f12)
		f12 =  (f14 * f12)
		f11 =  f11/*fround*/
		f10 =  f10/*fround*/
		f13 =  f13/*fround*/
		f12 =  f12/*fround*/
		f13 =  f13/*fextend*/
		f11 =  f11/*fextend*/
		f12 =  f12/*fextend*/
		f10 =  f10/*fextend*/
		f11 =  (f11 + f13)
		f10 =  (f10 + f12)
		f11 =  f11/*fround*/
		f10 =  f10/*fround*/
		f8 =  f8/*fextend*/
		f11 =  f11/*fextend*/
		f3 =  f3/*fextend*/
		f9 =  f9/*fextend*/
		f10 =  f10/*fextend*/
		f2 =  f2/*fextend*/
		f8 =  ((f8<f11) ? f8 : f11)
		f3 =  ((f3>f11) ? f3 : f11)
		f9 =  ((f9<f10) ? f9 : f10)
		f2 =  ((f2>f10) ? f2 : f10)
		f8 =  f8/*fround*/
		f3 =  f3/*fround*/
		f9 =  f9/*fround*/
		f2 =  f2/*fround*/
		i3 =  (i3 + 8)
		i4 =  (i4 + 1)
		__asm(push(i0>i4), iftrue, target("__ZNK14b2PolygonShape11ComputeAABBEP6b2AABBRK11b2Transformi__XprivateX__BB157_6_F"))
	__asm(lbl("__ZNK14b2PolygonShape11ComputeAABBEP6b2AABBRK11b2Transformi__XprivateX__BB157_4_F"))
		f0 = f8
		f1 = f9
		__asm(jump, target("__ZNK14b2PolygonShape11ComputeAABBEP6b2AABBRK11b2Transformi__XprivateX__BB157_5_F"))
	__asm(lbl("__ZNK14b2PolygonShape11ComputeAABBEP6b2AABBRK11b2Transformi__XprivateX__BB157_5_F"))
		f4 =  ((__xasm<Number>(push((i1+8)), op(0x38))))
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  (f0 - f4)
		f1 =  (f1 - f4)
		f3 =  f3/*fextend*/
		f0 =  f0/*fround*/
		f2 =  f2/*fextend*/
		f3 =  (f3 + f4)
		__asm(push(f0), push(i2), op(0x3d))
		f0 =  f1/*fround*/
		f1 =  (f2 + f4)
		__asm(push(f0), push((i2+4)), op(0x3d))
		f0 =  f3/*fround*/
		__asm(push(f0), push((i2+8)), op(0x3d))
		f0 =  f1/*fround*/
		__asm(push(f0), push((i2+12)), op(0x3d))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	__asm(lbl("__ZNK14b2PolygonShape11ComputeAABBEP6b2AABBRK11b2Transformi__XprivateX__BB157_6_F"))
		__asm(jump, target("__ZNK14b2PolygonShape11ComputeAABBEP6b2AABBRK11b2Transformi__XprivateX__BB157_3_B"))
	}
}



// Async
public const __ZN14b2PolygonShape11ComputeMassEP10b2MassDataf:int = regFunc(FSM__ZN14b2PolygonShape11ComputeMassEP10b2MassDataf.start)

public final class FSM__ZN14b2PolygonShape11ComputeMassEP10b2MassDataf extends Machine {

	public static function start():void {
			var result:FSM__ZN14b2PolygonShape11ComputeMassEP10b2MassDataf = new FSM__ZN14b2PolygonShape11ComputeMassEP10b2MassDataf
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int

	public static const intRegCount:int = 7
	public var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number
	public var f8:Number, f9:Number, f10:Number, f11:Number, f12:Number, f13:Number, f14:Number, f15:Number
	public var f16:Number, f17:Number

	public static const NumberRegCount:int = 18
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN14b2PolygonShape11ComputeMassEP10b2MassDataf_entry"))
		__asm(push(state), switchjump(
			"__ZN14b2PolygonShape11ComputeMassEP10b2MassDataf_errState",
			"__ZN14b2PolygonShape11ComputeMassEP10b2MassDataf_state0",
			"__ZN14b2PolygonShape11ComputeMassEP10b2MassDataf_state1",
			"__ZN14b2PolygonShape11ComputeMassEP10b2MassDataf_state2"))
	__asm(lbl("__ZN14b2PolygonShape11ComputeMassEP10b2MassDataf_state0"))
	__asm(lbl("__ZN14b2PolygonShape11ComputeMassEP10b2MassDataf__XprivateX__BB158_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+152)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		f0 =  ((__xasm<Number>(push((mstate.ebp+16)), op(0x38))))
		i3 = i0
		__asm(push(i1<3), iftrue, target("__ZN14b2PolygonShape11ComputeMassEP10b2MassDataf__XprivateX__BB158_2_F"))
	__asm(lbl("__ZN14b2PolygonShape11ComputeMassEP10b2MassDataf__XprivateX__BB158_1_F"))
		f1 =  (0)
		f1 =  f1/*fround*/
		i4 =  (0)
		i5 =  (i0 + 24)
		f2 = f1
		f3 = f1
		f4 = f1
		__asm(jump, target("__ZN14b2PolygonShape11ComputeMassEP10b2MassDataf__XprivateX__BB158_8_F"))
	__asm(lbl("__ZN14b2PolygonShape11ComputeMassEP10b2MassDataf__XprivateX__BB158_2_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str52259)
		i3 =  (__ZZN14b2PolygonShape11ComputeMassEP10b2MassDatafE8__func__)
		i4 =  (__2E_str49256)
		i5 =  (306)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
	__asm(jump, target("__ZN14b2PolygonShape11ComputeMassEP10b2MassDataf__XprivateX__BB158_3_F"), lbl("__ZN14b2PolygonShape11ComputeMassEP10b2MassDataf__XprivateX__BB158_3_B"), label, lbl("__ZN14b2PolygonShape11ComputeMassEP10b2MassDataf__XprivateX__BB158_3_F")); 
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__ZN14b2PolygonShape11ComputeMassEP10b2MassDataf_state1"))
		mstate.esp += 24
		state = 2
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZN14b2PolygonShape11ComputeMassEP10b2MassDataf_state2"))
	__asm(lbl("__ZN14b2PolygonShape11ComputeMassEP10b2MassDataf__XprivateX__BB158_4_B"), label)
		f4 =  ((__xasm<Number>(push((i6+24)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i6+28)), op(0x38))))
		i4 =  (i3 + 1)
		__asm(push(i4<i1), iftrue, target("__ZN14b2PolygonShape11ComputeMassEP10b2MassDataf__XprivateX__BB158_6_F"))
	__asm(lbl("__ZN14b2PolygonShape11ComputeMassEP10b2MassDataf__XprivateX__BB158_5_F"))
		i4 = i5
		__asm(jump, target("__ZN14b2PolygonShape11ComputeMassEP10b2MassDataf__XprivateX__BB158_7_F"))
	__asm(lbl("__ZN14b2PolygonShape11ComputeMassEP10b2MassDataf__XprivateX__BB158_6_F"))
		i4 =  (i6 + 32)
	__asm(lbl("__ZN14b2PolygonShape11ComputeMassEP10b2MassDataf__XprivateX__BB158_7_F"))
		f7 =  (0)
		f7 =  f7/*fround*/
		f8 =  ((__xasm<Number>(push(i4), op(0x38))))
		f9 =  ((__xasm<Number>(push((i4+4)), op(0x38))))
		f7 =  f7/*fextend*/
		f6 =  f6/*fextend*/
		f4 =  f4/*fextend*/
		f10 =  (f8 - f7)
		f11 =  (f9 - f7)
		f12 =  (f6 - f7)
		f13 =  (f4 - f7)
		f10 =  f10/*fround*/
		f11 =  f11/*fround*/
		f12 =  f12/*fround*/
		f13 =  f13/*fround*/
		f10 =  f10/*fextend*/
		f12 =  f12/*fextend*/
		f11 =  f11/*fextend*/
		f13 =  f13/*fextend*/
		f14 =  (f10 * f13)
		f15 =  (f11 * f12)
		f16 =  (f12 * f12)
		f17 =  (f13 * f13)
		f14 =  f14/*fround*/
		f15 =  f15/*fround*/
		f16 =  f16/*fround*/
		f17 =  f17/*fround*/
		f14 =  f14/*fextend*/
		f17 =  f17/*fextend*/
		f15 =  f15/*fextend*/
		f16 =  f16/*fextend*/
		f14 =  (f17 + f14)
		f17 =  (f10 * f10)
		f15 =  (f16 + f15)
		f16 =  (f11 * f11)
		f14 =  f14/*fround*/
		f17 =  f17/*fround*/
		f15 =  f15/*fround*/
		f16 =  f16/*fround*/
		f17 =  f17/*fextend*/
		f14 =  f14/*fextend*/
		f16 =  f16/*fextend*/
		f15 =  f15/*fextend*/
		f14 =  (f14 + f17)
		f15 =  (f15 + f16)
		f16 =  (0.25)
		f14 =  f14/*fround*/
		f15 =  f15/*fround*/
		f16 =  f16/*fround*/
		f14 =  f14/*fextend*/
		f16 =  f16/*fextend*/
		f15 =  f15/*fextend*/
		f14 =  (f14 * f16)
		f15 =  (f15 * f16)
		f14 =  f14/*fround*/
		f15 =  f15/*fround*/
		f14 =  f14/*fextend*/
		f15 =  f15/*fextend*/
		f10 =  (f12 * f10)
		f12 =  (f14 + f7)
		f11 =  (f13 * f11)
		f13 =  (f15 + f7)
		f14 =  (0.333333)
		f10 =  f10/*fround*/
		f12 =  f12/*fround*/
		f11 =  f11/*fround*/
		f13 =  f13/*fround*/
		f14 =  f14/*fround*/
		f10 =  f10/*fextend*/
		f11 =  f11/*fextend*/
		f12 =  f12/*fextend*/
		f14 =  f14/*fextend*/
		f13 =  f13/*fextend*/
		f10 =  (f11 - f10)
		f11 =  (f12 * f14)
		f12 =  (f13 * f14)
		f13 =  (0.5)
		f10 =  f10/*fround*/
		f11 =  f11/*fround*/
		f12 =  f12/*fround*/
		f13 =  f13/*fround*/
		f11 =  f11/*fextend*/
		f12 =  f12/*fextend*/
		f13 =  f13/*fextend*/
		f10 =  f10/*fextend*/
		f13 =  (f10 * f13)
		f11 =  (f11 + f7)
		f12 =  (f12 + f7)
		f6 =  (f6 + f7)
		f4 =  (f4 + f7)
		f7 =  f13/*fround*/
		f11 =  f11/*fround*/
		f12 =  f12/*fround*/
		f6 =  f6/*fround*/
		f4 =  f4/*fround*/
		f7 =  f7/*fextend*/
		f4 =  f4/*fextend*/
		f6 =  f6/*fextend*/
		f12 =  f12/*fextend*/
		f11 =  f11/*fextend*/
		f13 =  (f7 * f14)
		f11 =  (f11 + f12)
		f4 =  (f4 + f8)
		f6 =  (f6 + f9)
		f8 =  f13/*fround*/
		f9 =  f11/*fround*/
		f4 =  f4/*fround*/
		f6 =  f6/*fround*/
		f9 =  f9/*fextend*/
		f6 =  f6/*fextend*/
		f8 =  f8/*fextend*/
		f4 =  f4/*fextend*/
		f6 =  (f6 * f8)
		f4 =  (f4 * f8)
		f8 =  (f9 * f10)
		f6 =  f6/*fround*/
		f4 =  f4/*fround*/
		f8 =  f8/*fround*/
		f3 =  f3/*fextend*/
		f6 =  f6/*fextend*/
		f2 =  f2/*fextend*/
		f4 =  f4/*fextend*/
		f5 =  f5/*fextend*/
		f1 =  f1/*fextend*/
		f8 =  f8/*fextend*/
		f3 =  (f3 + f7)
		f2 =  (f2 + f6)
		f4 =  (f5 + f4)
		f1 =  (f8 + f1)
		f5 =  f3/*fround*/
		f3 =  f2/*fround*/
		f2 =  f4/*fround*/
		f1 =  f1/*fround*/
		i4 =  (i6 + 8)
		i6 =  (i3 + 1)
		i3 = i4
		i4 = i6
		f4 = f5
	__asm(lbl("__ZN14b2PolygonShape11ComputeMassEP10b2MassDataf__XprivateX__BB158_8_F"))
		i6 = i3
		i3 = i4
		f5 = f2
		f2 = f3
		f3 = f4
		__asm(push(i1>i3), iftrue, target("__ZN14b2PolygonShape11ComputeMassEP10b2MassDataf__XprivateX__BB158_4_B"))
	__asm(lbl("__ZN14b2PolygonShape11ComputeMassEP10b2MassDataf__XprivateX__BB158_9_F"))
		f4 =  (1.19209e-07)
		f6 =  f0/*fextend*/
		f7 =  f3/*fextend*/
		f6 =  (f7 * f6)
		f4 =  f4/*fround*/
		f6 =  f6/*fround*/
		__asm(push(f6), push(i2), op(0x3d))
		f4 =  f4/*fextend*/
		__asm(push(f7>f4), iftrue, target("__ZN14b2PolygonShape11ComputeMassEP10b2MassDataf__XprivateX__BB158_11_F"))
	__asm(lbl("__ZN14b2PolygonShape11ComputeMassEP10b2MassDataf__XprivateX__BB158_10_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i2 =  (__2E_str1670)
		i1 =  (__2E_str51258)
		i3 =  (__ZZN14b2PolygonShape11ComputeMassEP10b2MassDatafE8__func__)
		i4 =  (__2E_str49256)
		i5 =  (358)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i2), push((mstate.esp+4)), op(0x3c))
		__asm(push(i1), push((mstate.esp+8)), op(0x3c))
		__asm(jump, target("__ZN14b2PolygonShape11ComputeMassEP10b2MassDataf__XprivateX__BB158_3_B"))
	__asm(lbl("__ZN14b2PolygonShape11ComputeMassEP10b2MassDataf__XprivateX__BB158_11_F"))
		f4 =  (1)
		f4 =  f4/*fround*/
		f6 =  f3/*fextend*/
		f4 =  f4/*fextend*/
		f4 =  (f4 / f6)
		f4 =  f4/*fround*/
		f5 =  f5/*fextend*/
		f4 =  f4/*fextend*/
		f5 =  (f5 * f4)
		f2 =  f2/*fextend*/
		f2 =  (f2 * f4)
		f4 =  f5/*fround*/
		__asm(push(f4), push((i2+4)), op(0x3d))
		f2 =  f2/*fround*/
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  (f1 * f0)
		__asm(push(f2), push((i2+8)), op(0x3d))
		__asm(push(f3), push((i0+12)), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push((i2+12)), op(0x3d))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN14b2PolygonShape11ComputeMassEP10b2MassDataf_errState"))
		throw("Invalid state in __ZN14b2PolygonShape11ComputeMassEP10b2MassDataf")
	}
}



// Async
public const __ZN11b2LoopShapeD1Ev:int = regFunc(FSM__ZN11b2LoopShapeD1Ev.start)

public final class FSM__ZN11b2LoopShapeD1Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN11b2LoopShapeD1Ev = new FSM__ZN11b2LoopShapeD1Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int

	public static const intRegCount:int = 3

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN11b2LoopShapeD1Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN11b2LoopShapeD1Ev_errState",
			"__ZN11b2LoopShapeD1Ev_state0",
			"__ZN11b2LoopShapeD1Ev_state1"))
	__asm(lbl("__ZN11b2LoopShapeD1Ev_state0"))
	__asm(lbl("__ZN11b2LoopShapeD1Ev__XprivateX__BB159_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV11b2LoopShape)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		i0 =  ((__xasm<int>(push((i1+16)), op(0x37))))
		mstate.esp -= 8
		i2 =  (0)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i2), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN11b2LoopShapeD1Ev_state1"))
		i0 = mstate.eax
		mstate.esp += 8
		__asm(push(i2), push((i1+16)), op(0x3c))
		i0 =  (__ZTV7b2Shape)
		__asm(push(i2), push((i1+20)), op(0x3c))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN11b2LoopShapeD1Ev_errState"))
		throw("Invalid state in __ZN11b2LoopShapeD1Ev")
	}
}



// Async
public const __ZN11b2LoopShapeD0Ev:int = regFunc(FSM__ZN11b2LoopShapeD0Ev.start)

public final class FSM__ZN11b2LoopShapeD0Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN11b2LoopShapeD0Ev = new FSM__ZN11b2LoopShapeD0Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int

	public static const intRegCount:int = 3

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN11b2LoopShapeD0Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN11b2LoopShapeD0Ev_errState",
			"__ZN11b2LoopShapeD0Ev_state0",
			"__ZN11b2LoopShapeD0Ev_state1",
			"__ZN11b2LoopShapeD0Ev_state2"))
	__asm(lbl("__ZN11b2LoopShapeD0Ev_state0"))
	__asm(lbl("__ZN11b2LoopShapeD0Ev__XprivateX__BB160_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV11b2LoopShape)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		i0 =  ((__xasm<int>(push((i1+16)), op(0x37))))
		mstate.esp -= 8
		i2 =  (0)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i2), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN11b2LoopShapeD0Ev_state1"))
		i0 = mstate.eax
		mstate.esp += 8
		__asm(push(i2), push((i1+16)), op(0x3c))
		i0 =  (__ZTV7b2Shape)
		__asm(push(i2), push((i1+20)), op(0x3c))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		__asm(push(i1==0), iftrue, target("__ZN11b2LoopShapeD0Ev__XprivateX__BB160_2_F"))
	__asm(lbl("__ZN11b2LoopShapeD0Ev__XprivateX__BB160_1_F"))
		i0 =  (0)
		mstate.esp -= 8
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN11b2LoopShapeD0Ev_state2"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__ZN11b2LoopShapeD0Ev__XprivateX__BB160_2_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN11b2LoopShapeD0Ev_errState"))
		throw("Invalid state in __ZN11b2LoopShapeD0Ev")
	}
}



// Async
public const __ZNK11b2LoopShape5CloneEP16b2BlockAllocator:int = regFunc(FSM__ZNK11b2LoopShape5CloneEP16b2BlockAllocator.start)

public final class FSM__ZNK11b2LoopShape5CloneEP16b2BlockAllocator extends Machine {

	public static function start():void {
			var result:FSM__ZNK11b2LoopShape5CloneEP16b2BlockAllocator = new FSM__ZNK11b2LoopShape5CloneEP16b2BlockAllocator
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int

	public static const intRegCount:int = 6
	public var f0:Number

	public static const NumberRegCount:int = 1
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZNK11b2LoopShape5CloneEP16b2BlockAllocator_entry"))
		__asm(push(state), switchjump(
			"__ZNK11b2LoopShape5CloneEP16b2BlockAllocator_errState",
			"__ZNK11b2LoopShape5CloneEP16b2BlockAllocator_state0",
			"__ZNK11b2LoopShape5CloneEP16b2BlockAllocator_state1",
			"__ZNK11b2LoopShape5CloneEP16b2BlockAllocator_state2",
			"__ZNK11b2LoopShape5CloneEP16b2BlockAllocator_state3",
			"__ZNK11b2LoopShape5CloneEP16b2BlockAllocator_state4"))
	__asm(lbl("__ZNK11b2LoopShape5CloneEP16b2BlockAllocator_state0"))
	__asm(lbl("__ZNK11b2LoopShape5CloneEP16b2BlockAllocator__XprivateX__BB161_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (24)
		mstate.esp -= 8
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM__ZN16b2BlockAllocator8AllocateEi.start()
		return
	__asm(lbl("__ZNK11b2LoopShape5CloneEP16b2BlockAllocator_state1"))
		i0 = mstate.eax
		mstate.esp += 8
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i2 = i0
		__asm(push(i0==0), iftrue, target("__ZNK11b2LoopShape5CloneEP16b2BlockAllocator__XprivateX__BB161_2_F"))
	__asm(lbl("__ZNK11b2LoopShape5CloneEP16b2BlockAllocator__XprivateX__BB161_1_F"))
		i3 =  (__ZTV11b2LoopShape)
		i3 =  (i3 + 8)
		__asm(push(i3), push(i0), op(0x3c))
		i3 =  (3)
		__asm(push(i3), push((i2+4)), op(0x3c))
		f0 =  ((__xasm<Number>(push(_b2_polygonRadius), op(0x38))))
		__asm(push(f0), push((i2+8)), op(0x3d))
		i3 =  (0)
		__asm(push(i3), push((i2+16)), op(0x3c))
		__asm(push(i3), push((i2+20)), op(0x3c))
	__asm(lbl("__ZNK11b2LoopShape5CloneEP16b2BlockAllocator__XprivateX__BB161_2_F"))
		i3 =  ((__xasm<int>(push((i1+20)), op(0x37))))
		i1 =  ((__xasm<int>(push((i1+16)), op(0x37))))
		i4 =  ((__xasm<int>(push((i2+16)), op(0x37))))
		i5 =  (i2 + 16)
		__asm(push(i4!=0), iftrue, target("__ZNK11b2LoopShape5CloneEP16b2BlockAllocator__XprivateX__BB161_4_F"))
	__asm(lbl("__ZNK11b2LoopShape5CloneEP16b2BlockAllocator__XprivateX__BB161_3_F"))
		i4 =  ((__xasm<int>(push((i2+20)), op(0x37))))
		i2 =  (i2 + 20)
		__asm(push(i4==0), iftrue, target("__ZNK11b2LoopShape5CloneEP16b2BlockAllocator__XprivateX__BB161_6_F"))
	__asm(lbl("__ZNK11b2LoopShape5CloneEP16b2BlockAllocator__XprivateX__BB161_4_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str76283)
		i3 =  (__ZZN11b2LoopShape6CreateEPK6b2Vec2iE8__func__)
		i5 =  (__2E_str8215)
		i4 =  (34)
	__asm(jump, target("__ZNK11b2LoopShape5CloneEP16b2BlockAllocator__XprivateX__BB161_5_F"), lbl("__ZNK11b2LoopShape5CloneEP16b2BlockAllocator__XprivateX__BB161_5_B"), label, lbl("__ZNK11b2LoopShape5CloneEP16b2BlockAllocator__XprivateX__BB161_5_F")); 
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i5), push((mstate.esp+16)), op(0x3c))
		__asm(push(i4), push((mstate.esp+20)), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__ZNK11b2LoopShape5CloneEP16b2BlockAllocator_state2"))
		mstate.esp += 24
		state = 3
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZNK11b2LoopShape5CloneEP16b2BlockAllocator_state3"))
	__asm(lbl("__ZNK11b2LoopShape5CloneEP16b2BlockAllocator__XprivateX__BB161_6_F"))
		__asm(push(i3>1), iftrue, target("__ZNK11b2LoopShape5CloneEP16b2BlockAllocator__XprivateX__BB161_8_F"))
	__asm(lbl("__ZNK11b2LoopShape5CloneEP16b2BlockAllocator__XprivateX__BB161_7_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str77284)
		i3 =  (__ZZN11b2LoopShape6CreateEPK6b2Vec2iE8__func__)
		i5 =  (__2E_str8215)
		i4 =  (35)
		__asm(jump, target("__ZNK11b2LoopShape5CloneEP16b2BlockAllocator__XprivateX__BB161_5_B"))
	__asm(lbl("__ZNK11b2LoopShape5CloneEP16b2BlockAllocator__XprivateX__BB161_8_F"))
		i4 =  (0)
		__asm(push(i3), push(i2), op(0x3c))
		mstate.esp -= 8
		i3 =  (i3 << 3)
		__asm(push(i4), push(mstate.esp), op(0x3c))
		__asm(push(i3), push((mstate.esp+4)), op(0x3c))
		state = 4
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZNK11b2LoopShape5CloneEP16b2BlockAllocator_state4"))
		i3 = mstate.eax
		mstate.esp += 8
		__asm(push(i3), push(i5), op(0x3c))
		i2 =  ((__xasm<int>(push(i2), op(0x37))))
		i2 =  (i2 << 3)
		memcpy(i3, i1, i2)
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZNK11b2LoopShape5CloneEP16b2BlockAllocator_errState"))
		throw("Invalid state in __ZNK11b2LoopShape5CloneEP16b2BlockAllocator")
	}
}



// Sync
public const __ZNK11b2LoopShape13GetChildCountEv:int = regFunc(FSM__ZNK11b2LoopShape13GetChildCountEv.start)

public final class FSM__ZNK11b2LoopShape13GetChildCountEv extends Machine {

	public static function start():void {
		var i0:int


		__asm(label, lbl("__ZNK11b2LoopShape13GetChildCountEv_entry"))
	__asm(lbl("__ZNK11b2LoopShape13GetChildCountEv__XprivateX__BB162_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  ((__xasm<int>(push((i0+20)), op(0x37))))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZNK11b2LoopShape9TestPointERK11b2TransformRK6b2Vec2:int = regFunc(FSM__ZNK11b2LoopShape9TestPointERK11b2TransformRK6b2Vec2.start)

public final class FSM__ZNK11b2LoopShape9TestPointERK11b2TransformRK6b2Vec2 extends Machine {

	public static function start():void {
		var i0:int


		__asm(label, lbl("__ZNK11b2LoopShape9TestPointERK11b2TransformRK6b2Vec2_entry"))
	__asm(lbl("__ZNK11b2LoopShape9TestPointERK11b2TransformRK6b2Vec2__XprivateX__BB163_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (0)
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Async
public const __ZNK11b2LoopShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi:int = regFunc(FSM__ZNK11b2LoopShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi.start)

public final class FSM__ZNK11b2LoopShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi extends Machine {

	public static function start():void {
			var result:FSM__ZNK11b2LoopShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi = new FSM__ZNK11b2LoopShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int

	public static const intRegCount:int = 8
	public var f0:Number, f1:Number

	public static const NumberRegCount:int = 2
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZNK11b2LoopShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi_entry"))
		__asm(push(state), switchjump(
			"__ZNK11b2LoopShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi_errState",
			"__ZNK11b2LoopShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi_state0",
			"__ZNK11b2LoopShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi_state1",
			"__ZNK11b2LoopShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi_state2",
			"__ZNK11b2LoopShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi_state3"))
	__asm(lbl("__ZNK11b2LoopShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi_state0"))
	__asm(lbl("__ZNK11b2LoopShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB164_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 64
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i3 =  ((__xasm<int>(push((mstate.ebp+20)), op(0x37))))
		i4 =  ((__xasm<int>(push((mstate.ebp+24)), op(0x37))))
		i5 =  ((__xasm<int>(push((i0+20)), op(0x37))))
		i6 =  (i0 + 20)
		__asm(push(i5>i4), iftrue, target("__ZNK11b2LoopShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB164_2_F"))
	__asm(lbl("__ZNK11b2LoopShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB164_1_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str63270)
		i3 =  (__ZZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2TransformiE8__func__)
		i4 =  (__2E_str8215)
		i6 =  (88)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i6), push((mstate.esp+20)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__ZNK11b2LoopShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi_state1"))
		mstate.esp += 24
		state = 2
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZNK11b2LoopShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi_state2"))
	__asm(lbl("__ZNK11b2LoopShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB164_2_F"))
		i5 =  (__ZTV11b2EdgeShape)
		i5 =  (i5 + 8)
		__asm(push(i5), push((mstate.ebp+-64)), op(0x3c))
		i5 =  (1)
		__asm(push(i5), push((mstate.ebp+-60)), op(0x3c))
		f0 =  ((__xasm<Number>(push(_b2_polygonRadius), op(0x38))))
		__asm(push(f0), push((mstate.ebp+-56)), op(0x3d))
		i5 =  (0)
		__asm(push(i5), push((mstate.ebp+-16)), op(0x3a))
		__asm(push(i5), push((mstate.ebp+-15)), op(0x3a))
		i0 =  ((__xasm<int>(push((i0+16)), op(0x37))))
		i7 =  (i4 << 3)
		i7 =  (i0 + i7)
		i6 =  ((__xasm<int>(push(i6), op(0x37))))
		i4 =  (i4 + 1)
		f0 =  ((__xasm<Number>(push(i7), op(0x38))))
		f1 =  ((__xasm<Number>(push((i7+4)), op(0x38))))
		i4 =  ((i6==i4) ? 0 : i4)
		__asm(push(f0), push((mstate.ebp+-48)), op(0x3d))
		i4 =  (i4 << 3)
		__asm(push(f1), push((mstate.ebp+-44)), op(0x3d))
		i0 =  (i0 + i4)
		f0 =  ((__xasm<Number>(push(i0), op(0x38))))
		f1 =  ((__xasm<Number>(push((i0+4)), op(0x38))))
		__asm(push(f0), push((mstate.ebp+-40)), op(0x3d))
		__asm(push(f1), push((mstate.ebp+-36)), op(0x3d))
		mstate.esp -= 20
		i0 =  ((mstate.ebp+-64))
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i5), push((mstate.esp+16)), op(0x3c))
		mstate.esp -= 4;FSM__ZNK11b2EdgeShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi.start()
	__asm(lbl("__ZNK11b2LoopShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi_state3"))
		i0 = mstate.eax
		mstate.esp += 20
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZNK11b2LoopShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi_errState"))
		throw("Invalid state in __ZNK11b2LoopShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi")
	}
}



// Async
public const __ZNK11b2LoopShape11ComputeAABBEP6b2AABBRK11b2Transformi:int = regFunc(FSM__ZNK11b2LoopShape11ComputeAABBEP6b2AABBRK11b2Transformi.start)

public final class FSM__ZNK11b2LoopShape11ComputeAABBEP6b2AABBRK11b2Transformi extends Machine {

	public static function start():void {
			var result:FSM__ZNK11b2LoopShape11ComputeAABBEP6b2AABBRK11b2Transformi = new FSM__ZNK11b2LoopShape11ComputeAABBEP6b2AABBRK11b2Transformi
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int

	public static const intRegCount:int = 6
	public var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number
	public var f8:Number, f9:Number, f10:Number

	public static const NumberRegCount:int = 11
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZNK11b2LoopShape11ComputeAABBEP6b2AABBRK11b2Transformi_entry"))
		__asm(push(state), switchjump(
			"__ZNK11b2LoopShape11ComputeAABBEP6b2AABBRK11b2Transformi_errState",
			"__ZNK11b2LoopShape11ComputeAABBEP6b2AABBRK11b2Transformi_state0",
			"__ZNK11b2LoopShape11ComputeAABBEP6b2AABBRK11b2Transformi_state1",
			"__ZNK11b2LoopShape11ComputeAABBEP6b2AABBRK11b2Transformi_state2"))
	__asm(lbl("__ZNK11b2LoopShape11ComputeAABBEP6b2AABBRK11b2Transformi_state0"))
	__asm(lbl("__ZNK11b2LoopShape11ComputeAABBEP6b2AABBRK11b2Transformi__XprivateX__BB165_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i3 =  ((__xasm<int>(push((mstate.ebp+20)), op(0x37))))
		i4 =  ((__xasm<int>(push((i0+20)), op(0x37))))
		i5 =  (i0 + 20)
		__asm(push(i4>i3), iftrue, target("__ZNK11b2LoopShape11ComputeAABBEP6b2AABBRK11b2Transformi__XprivateX__BB165_2_F"))
	__asm(lbl("__ZNK11b2LoopShape11ComputeAABBEP6b2AABBRK11b2Transformi__XprivateX__BB165_1_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str63270)
		i3 =  (__ZZNK11b2LoopShape11ComputeAABBEP6b2AABBRK11b2TransformiE8__func__)
		i5 =  (__2E_str8215)
		i4 =  (107)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i5), push((mstate.esp+16)), op(0x3c))
		__asm(push(i4), push((mstate.esp+20)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__ZNK11b2LoopShape11ComputeAABBEP6b2AABBRK11b2Transformi_state1"))
		mstate.esp += 24
		state = 2
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZNK11b2LoopShape11ComputeAABBEP6b2AABBRK11b2Transformi_state2"))
	__asm(lbl("__ZNK11b2LoopShape11ComputeAABBEP6b2AABBRK11b2Transformi__XprivateX__BB165_2_F"))
		i4 =  ((__xasm<int>(push(i5), op(0x37))))
		i5 =  (i3 + 1)
		i4 =  ((i4==i5) ? 0 : i5)
		i0 =  ((__xasm<int>(push((i0+16)), op(0x37))))
		i4 =  (i4 << 3)
		i3 =  (i3 << 3)
		i4 =  (i0 + i4)
		i0 =  (i0 + i3)
		f0 =  ((__xasm<Number>(push((i2+8)), op(0x38))))
		f1 =  ((__xasm<Number>(push(i0), op(0x38))))
		f2 =  ((__xasm<Number>(push(i4), op(0x38))))
		f3 =  ((__xasm<Number>(push((i2+12)), op(0x38))))
		f4 =  (f0 * f2)
		f0 =  (f0 * f1)
		f4 =  f4/*fround*/
		f2 =  (f3 * f2)
		f0 =  f0/*fround*/
		f1 =  (f3 * f1)
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		f3 =  ((__xasm<Number>(push(i2), op(0x38))))
		f4 =  f4/*fextend*/
		f0 =  f0/*fextend*/
		f5 =  ((__xasm<Number>(push((i2+16)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i0+4)), op(0x38))))
		f7 =  ((__xasm<Number>(push((i4+4)), op(0x38))))
		f8 =  ((__xasm<Number>(push((i2+20)), op(0x38))))
		f9 =  ((__xasm<Number>(push((i2+4)), op(0x38))))
		f4 =  (f3 + f4)
		f2 =  f2/*fextend*/
		f10 =  (f5 * f7)
		f0 =  (f3 + f0)
		f1 =  f1/*fextend*/
		f3 =  (f5 * f6)
		f4 =  f4/*fround*/
		f2 =  (f9 + f2)
		f5 =  f10/*fround*/
		f7 =  (f8 * f7)
		f0 =  f0/*fround*/
		f1 =  (f9 + f1)
		f3 =  f3/*fround*/
		f6 =  (f8 * f6)
		f2 =  f2/*fround*/
		f7 =  f7/*fround*/
		f1 =  f1/*fround*/
		f6 =  f6/*fround*/
		f5 =  f5/*fextend*/
		f4 =  f4/*fextend*/
		f3 =  f3/*fextend*/
		f0 =  f0/*fextend*/
		f4 =  (f4 + f5)
		f0 =  (f0 + f3)
		f3 =  f7/*fextend*/
		f2 =  f2/*fextend*/
		f5 =  f6/*fextend*/
		f1 =  f1/*fextend*/
		f4 =  f4/*fround*/
		f2 =  (f2 + f3)
		f0 =  f0/*fround*/
		f1 =  (f1 + f5)
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		f3 =  f4/*fextend*/
		f0 =  f0/*fextend*/
		f4 =  ((f0<f3) ? f0 : f3)
		f2 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		f5 =  ((f1<f2) ? f1 : f2)
		f4 =  f4/*fround*/
		f0 =  ((f0>f3) ? f0 : f3)
		__asm(push(f4), push(i1), op(0x3d))
		f3 =  f5/*fround*/
		f1 =  ((f1>f2) ? f1 : f2)
		__asm(push(f3), push((i1+4)), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push((i1+8)), op(0x3d))
		f0 =  f1/*fround*/
		__asm(push(f0), push((i1+12)), op(0x3d))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZNK11b2LoopShape11ComputeAABBEP6b2AABBRK11b2Transformi_errState"))
		throw("Invalid state in __ZNK11b2LoopShape11ComputeAABBEP6b2AABBRK11b2Transformi")
	}
}



// Sync
public const __ZN11b2LoopShape11ComputeMassEP10b2MassDataf:int = regFunc(FSM__ZN11b2LoopShape11ComputeMassEP10b2MassDataf.start)

public final class FSM__ZN11b2LoopShape11ComputeMassEP10b2MassDataf extends Machine {

	public static function start():void {
		var i0:int, i1:int


		__asm(label, lbl("__ZN11b2LoopShape11ComputeMassEP10b2MassDataf_entry"))
	__asm(lbl("__ZN11b2LoopShape11ComputeMassEP10b2MassDataf__XprivateX__BB166_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (0)
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		__asm(push(i0), push(i1), op(0x3c))
		__asm(push(i0), push((i1+4)), op(0x3c))
		__asm(push(i0), push((i1+8)), op(0x3c))
		__asm(push(i0), push((i1+12)), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Async
public const __ZN11b2EdgeShapeD1Ev:int = regFunc(FSM__ZN11b2EdgeShapeD1Ev.start)

public final class FSM__ZN11b2EdgeShapeD1Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN11b2EdgeShapeD1Ev = new FSM__ZN11b2EdgeShapeD1Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN11b2EdgeShapeD1Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN11b2EdgeShapeD1Ev_errState",
			"__ZN11b2EdgeShapeD1Ev_state0"))
	__asm(lbl("__ZN11b2EdgeShapeD1Ev_state0"))
	__asm(lbl("__ZN11b2EdgeShapeD1Ev__XprivateX__BB167_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV7b2Shape)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN11b2EdgeShapeD1Ev_errState"))
		throw("Invalid state in __ZN11b2EdgeShapeD1Ev")
	}
}



// Async
public const __ZN11b2EdgeShapeD0Ev:int = regFunc(FSM__ZN11b2EdgeShapeD0Ev.start)

public final class FSM__ZN11b2EdgeShapeD0Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN11b2EdgeShapeD0Ev = new FSM__ZN11b2EdgeShapeD0Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN11b2EdgeShapeD0Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN11b2EdgeShapeD0Ev_errState",
			"__ZN11b2EdgeShapeD0Ev_state0",
			"__ZN11b2EdgeShapeD0Ev_state1"))
	__asm(lbl("__ZN11b2EdgeShapeD0Ev_state0"))
	__asm(lbl("__ZN11b2EdgeShapeD0Ev__XprivateX__BB168_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV7b2Shape)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		__asm(push(i1==0), iftrue, target("__ZN11b2EdgeShapeD0Ev__XprivateX__BB168_2_F"))
	__asm(lbl("__ZN11b2EdgeShapeD0Ev__XprivateX__BB168_1_F"))
		i0 =  (0)
		mstate.esp -= 8
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN11b2EdgeShapeD0Ev_state1"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__ZN11b2EdgeShapeD0Ev__XprivateX__BB168_2_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN11b2EdgeShapeD0Ev_errState"))
		throw("Invalid state in __ZN11b2EdgeShapeD0Ev")
	}
}



// Async
public const __ZNK11b2EdgeShape5CloneEP16b2BlockAllocator:int = regFunc(FSM__ZNK11b2EdgeShape5CloneEP16b2BlockAllocator.start)

public final class FSM__ZNK11b2EdgeShape5CloneEP16b2BlockAllocator extends Machine {

	public static function start():void {
			var result:FSM__ZNK11b2EdgeShape5CloneEP16b2BlockAllocator = new FSM__ZNK11b2EdgeShape5CloneEP16b2BlockAllocator
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int

	public static const intRegCount:int = 4
	public var f0:Number, f1:Number

	public static const NumberRegCount:int = 2
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZNK11b2EdgeShape5CloneEP16b2BlockAllocator_entry"))
		__asm(push(state), switchjump(
			"__ZNK11b2EdgeShape5CloneEP16b2BlockAllocator_errState",
			"__ZNK11b2EdgeShape5CloneEP16b2BlockAllocator_state0",
			"__ZNK11b2EdgeShape5CloneEP16b2BlockAllocator_state1"))
	__asm(lbl("__ZNK11b2EdgeShape5CloneEP16b2BlockAllocator_state0"))
	__asm(lbl("__ZNK11b2EdgeShape5CloneEP16b2BlockAllocator__XprivateX__BB169_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (52)
		mstate.esp -= 8
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM__ZN16b2BlockAllocator8AllocateEi.start()
		return
	__asm(lbl("__ZNK11b2EdgeShape5CloneEP16b2BlockAllocator_state1"))
		i0 = mstate.eax
		mstate.esp += 8
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i2 = i0
		__asm(push(i0==0), iftrue, target("__ZNK11b2EdgeShape5CloneEP16b2BlockAllocator__XprivateX__BB169_2_F"))
	__asm(lbl("__ZNK11b2EdgeShape5CloneEP16b2BlockAllocator__XprivateX__BB169_1_F"))
		i3 =  (__ZTV11b2EdgeShape)
		i3 =  (i3 + 8)
		__asm(push(i3), push(i0), op(0x3c))
		i3 =  (1)
		__asm(push(i3), push((i2+4)), op(0x3c))
		f0 =  ((__xasm<Number>(push(_b2_polygonRadius), op(0x38))))
		__asm(push(f0), push((i2+8)), op(0x3d))
		i3 =  (0)
		__asm(push(i3), push((i2+48)), op(0x3a))
		__asm(push(i3), push((i2+49)), op(0x3a))
	__asm(lbl("__ZNK11b2EdgeShape5CloneEP16b2BlockAllocator__XprivateX__BB169_2_F"))
		i3 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		__asm(push(i3), push((i2+4)), op(0x3c))
		f0 =  ((__xasm<Number>(push((i1+8)), op(0x38))))
		__asm(push(f0), push((i2+8)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i1+12)), op(0x38))))
		__asm(push(f0), push((i2+12)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i1+16)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i1+20)), op(0x38))))
		__asm(push(f0), push((i2+16)), op(0x3d))
		__asm(push(f1), push((i2+20)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i1+24)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i1+28)), op(0x38))))
		__asm(push(f0), push((i2+24)), op(0x3d))
		__asm(push(f1), push((i2+28)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i1+32)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i1+36)), op(0x38))))
		__asm(push(f0), push((i2+32)), op(0x3d))
		__asm(push(f1), push((i2+36)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i1+40)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i1+44)), op(0x38))))
		__asm(push(f0), push((i2+40)), op(0x3d))
		__asm(push(f1), push((i2+44)), op(0x3d))
		i3 =  ((__xasm<int>(push((i1+48)), op(0x35))))
		__asm(push(i3), push((i2+48)), op(0x3a))
		i1 =  ((__xasm<int>(push((i1+49)), op(0x35))))
		__asm(push(i1), push((i2+49)), op(0x3a))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZNK11b2EdgeShape5CloneEP16b2BlockAllocator_errState"))
		throw("Invalid state in __ZNK11b2EdgeShape5CloneEP16b2BlockAllocator")
	}
}



// Sync
public const __ZNK11b2EdgeShape13GetChildCountEv:int = regFunc(FSM__ZNK11b2EdgeShape13GetChildCountEv.start)

public final class FSM__ZNK11b2EdgeShape13GetChildCountEv extends Machine {

	public static function start():void {
		var i0:int


		__asm(label, lbl("__ZNK11b2EdgeShape13GetChildCountEv_entry"))
	__asm(lbl("__ZNK11b2EdgeShape13GetChildCountEv__XprivateX__BB170_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (1)
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZNK11b2EdgeShape9TestPointERK11b2TransformRK6b2Vec2:int = regFunc(FSM__ZNK11b2EdgeShape9TestPointERK11b2TransformRK6b2Vec2.start)

public final class FSM__ZNK11b2EdgeShape9TestPointERK11b2TransformRK6b2Vec2 extends Machine {

	public static function start():void {
		var i0:int


		__asm(label, lbl("__ZNK11b2EdgeShape9TestPointERK11b2TransformRK6b2Vec2_entry"))
	__asm(lbl("__ZNK11b2EdgeShape9TestPointERK11b2TransformRK6b2Vec2__XprivateX__BB171_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (0)
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZNK11b2EdgeShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi:int = regFunc(FSM__ZNK11b2EdgeShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi.start)

public final class FSM__ZNK11b2EdgeShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number
		var f8:Number, f9:Number, f10:Number, f11:Number, f12:Number, f13:Number, f14:Number, f15:Number
		var f16:Number, f17:Number, f18:Number

		__asm(label, lbl("__ZNK11b2EdgeShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi_entry"))
	__asm(lbl("__ZNK11b2EdgeShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB172_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		f0 =  (1.19209e-07)
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		f1 =  ((__xasm<Number>(push((i0+16)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i0+20)), op(0x38))))
		i1 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+20)), op(0x37))))
		f3 =  ((__xasm<Number>(push((i1+4)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i2+4)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i1+12)), op(0x38))))
		f6 =  ((__xasm<Number>(push(i1), op(0x38))))
		f7 =  ((__xasm<Number>(push(i2), op(0x38))))
		f8 =  ((__xasm<Number>(push((i1+8)), op(0x38))))
		f9 =  ((__xasm<Number>(push((i0+24)), op(0x38))))
		f10 =  f1/*fextend*/
		f11 =  ((__xasm<Number>(push((i0+28)), op(0x38))))
		f12 =  f2/*fextend*/
		f13 =  (f9 - f10)
		f11 =  (f11 - f12)
		f3 =  (f3 - f4)
		f6 =  (f6 - f7)
		f7 =  (f8 - f7)
		f4 =  (f5 - f4)
		f5 =  f13/*fround*/
		f8 =  f11/*fround*/
		f3 =  f3/*fround*/
		f6 =  f6/*fround*/
		f7 =  f7/*fround*/
		f4 =  f4/*fround*/
		f11 =  f5/*fextend*/
		f12 =  f8/*fextend*/
		f13 =  ((__xasm<Number>(push((i2+16)), op(0x38))))
		f6 =  f6/*fextend*/
		f14 =  ((__xasm<Number>(push((i2+8)), op(0x38))))
		f7 =  f7/*fextend*/
		f15 =  ((__xasm<Number>(push((i2+20)), op(0x38))))
		f16 =  ((__xasm<Number>(push((i2+12)), op(0x38))))
		f3 =  f3/*fextend*/
		f4 =  f4/*fextend*/
		f11 =  (f11 * f11)
		f12 =  (f12 * f12)
		f17 =  (f3 * f15)
		f3 =  (f3 * f16)
		f18 =  (f6 * f13)
		f6 =  (f6 * f14)
		f13 =  (f7 * f13)
		f7 =  (f7 * f14)
		f14 =  (f4 * f15)
		f4 =  (f4 * f16)
		f11 =  f11/*fround*/
		f12 =  f12/*fround*/
		f15 =  f17/*fround*/
		f3 =  f3/*fround*/
		f16 =  f18/*fround*/
		f6 =  f6/*fround*/
		f13 =  f13/*fround*/
		f7 =  f7/*fround*/
		f14 =  f14/*fround*/
		f4 =  f4/*fround*/
		f17 =  f11/*fextend*/
		f18 =  f12/*fextend*/
		f15 =  f15/*fextend*/
		f16 =  f16/*fextend*/
		f3 =  f3/*fextend*/
		f6 =  f6/*fextend*/
		f14 =  f14/*fextend*/
		f13 =  f13/*fextend*/
		f4 =  f4/*fextend*/
		f7 =  f7/*fextend*/
		f17 =  (f18 + f17)
		f15 =  (f16 + f15)
		f3 =  (f6 + f3)
		f6 =  (f13 + f14)
		f4 =  (f7 + f4)
		f7 =  f17/*fround*/
		f13 =  f15/*fround*/
		f3 =  f3/*fround*/
		f6 =  f6/*fround*/
		f4 =  f4/*fround*/
		f7 =  f7/*fextend*/
		f14 =  f13/*fextend*/
		f6 =  f6/*fextend*/
		f15 =  f3/*fextend*/
		f4 =  f4/*fextend*/
		f7 =  Math.sqrt(f7)
		f9 =  (f10 - f9)
		f6 =  (f6 - f14)
		f4 =  (f4 - f15)
		f7 =  f7/*fround*/
		f9 =  f9/*fround*/
		f6 =  f6/*fround*/
		f4 =  f4/*fround*/
		i0 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f10 =  f7/*fextend*/
		__asm(push(f10>=f0), iftrue, target("__ZNK11b2EdgeShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB172_2_F"))
	__asm(lbl("__ZNK11b2EdgeShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB172_1_F"))
		f7 = f8
		__asm(jump, target("__ZNK11b2EdgeShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB172_3_F"))
	__asm(lbl("__ZNK11b2EdgeShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB172_2_F"))
		f0 =  (1)
		f0 =  f0/*fround*/
		f7 =  f7/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 / f7)
		f7 =  f0/*fround*/
		f0 =  f8/*fextend*/
		f7 =  f7/*fextend*/
		f9 =  f9/*fextend*/
		f0 =  (f0 * f7)
		f7 =  (f7 * f9)
		f9 =  f0/*fround*/
		f0 =  f7/*fround*/
		f7 = f9
		f9 = f0
	__asm(lbl("__ZNK11b2EdgeShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB172_3_F"))
		f0 = f7
		f7 = f9
		f9 =  (0)
		f10 =  f13/*fextend*/
		f14 =  f2/*fextend*/
		f15 =  f3/*fextend*/
		f16 =  f1/*fextend*/
		f10 =  (f14 - f10)
		f14 =  (f16 - f15)
		f10 =  f10/*fround*/
		f14 =  f14/*fround*/
		f10 =  f10/*fextend*/
		f15 =  f7/*fextend*/
		f16 =  f6/*fextend*/
		f14 =  f14/*fextend*/
		f17 =  f0/*fextend*/
		f18 =  f4/*fextend*/
		f10 =  (f15 * f10)
		f14 =  (f17 * f14)
		f17 =  (f17 * f18)
		f15 =  (f15 * f16)
		f10 =  f10/*fround*/
		f14 =  f14/*fround*/
		f16 =  f17/*fround*/
		f15 =  f15/*fround*/
		f10 =  f10/*fextend*/
		f14 =  f14/*fextend*/
		f15 =  f15/*fextend*/
		f16 =  f16/*fextend*/
		f10 =  (f14 + f10)
		f14 =  (f16 + f15)
		f14 =  f14/*fround*/
		f10 =  f10/*fround*/
		f9 =  f9/*fround*/
		f9 =  f9/*fextend*/
		f15 =  f14/*fextend*/
		__asm(push(f15==f9), iftrue, target("__ZNK11b2EdgeShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB172_14_F"))
	__asm(lbl("__ZNK11b2EdgeShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB172_4_F"))
		f9 =  (0)
		f14 =  f14/*fextend*/
		f15 =  f10/*fextend*/
		f14 =  (f15 / f14)
		f14 =  f14/*fround*/
		f9 =  f9/*fround*/
		f9 =  f9/*fextend*/
		f15 =  f14/*fextend*/
		__asm(push(f15<f9), iftrue, target("__ZNK11b2EdgeShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB172_14_F"))
	__asm(lbl("__ZNK11b2EdgeShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB172_5_F"))
		f9 =  (1)
		f9 =  f9/*fround*/
		f9 =  f9/*fextend*/
		f15 =  f14/*fextend*/
		__asm(push(f15>f9), iftrue, target("__ZNK11b2EdgeShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB172_14_F"))
	__asm(lbl("__ZNK11b2EdgeShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB172_6_F"))
		f9 =  (0)
		f12 =  f12/*fextend*/
		f11 =  f11/*fextend*/
		f11 =  (f11 + f12)
		f11 =  f11/*fround*/
		f9 =  f9/*fround*/
		f9 =  f9/*fextend*/
		f12 =  f11/*fextend*/
		__asm(push(f12==f9), iftrue, target("__ZNK11b2EdgeShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB172_14_F"))
	__asm(lbl("__ZNK11b2EdgeShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB172_7_F"))
		f9 =  (0)
		f6 =  f6/*fextend*/
		f12 =  f14/*fextend*/
		f4 =  f4/*fextend*/
		f6 =  (f6 * f12)
		f4 =  (f4 * f12)
		f6 =  f6/*fround*/
		f4 =  f4/*fround*/
		f6 =  f6/*fextend*/
		f12 =  f13/*fextend*/
		f4 =  f4/*fextend*/
		f3 =  f3/*fextend*/
		f6 =  (f12 + f6)
		f3 =  (f3 + f4)
		f4 =  f6/*fround*/
		f3 =  f3/*fround*/
		f2 =  f2/*fextend*/
		f4 =  f4/*fextend*/
		f1 =  f1/*fextend*/
		f3 =  f3/*fextend*/
		f2 =  (f4 - f2)
		f1 =  (f3 - f1)
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		f3 =  f8/*fextend*/
		f2 =  f2/*fextend*/
		f4 =  f5/*fextend*/
		f1 =  f1/*fextend*/
		f2 =  (f2 * f3)
		f1 =  (f1 * f4)
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		f2 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		f1 =  (f1 + f2)
		f1 =  f1/*fround*/
		f2 =  f11/*fextend*/
		f1 =  f1/*fextend*/
		f1 =  (f1 / f2)
		f1 =  f1/*fround*/
		f2 =  f9/*fround*/
		f2 =  f2/*fextend*/
		f3 =  f1/*fextend*/
		__asm(push(f3<f2), iftrue, target("__ZNK11b2EdgeShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB172_14_F"))
	__asm(lbl("__ZNK11b2EdgeShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB172_8_F"))
		f2 =  (1)
		f2 =  f2/*fround*/
		f2 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		__asm(push(f1>f2), iftrue, target("__ZNK11b2EdgeShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB172_14_F"))
	__asm(lbl("__ZNK11b2EdgeShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB172_9_F"))
		f1 =  (0)
		f1 =  f1/*fround*/
		__asm(push(f14), push((i0+8)), op(0x3d))
		f1 =  f1/*fextend*/
		f2 =  f10/*fextend*/
		__asm(push(f2<=f1), iftrue, target("__ZNK11b2EdgeShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB172_11_F"))
	__asm(lbl("__ZNK11b2EdgeShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB172_10_F"))
		i1 =  (1)
		f0 =  f0/*fextend*/
		f1 =  f7/*fextend*/
		f0 =  -f0
		f1 =  -f1
		f0 =  f0/*fround*/
		__asm(push(f0), push(i0), op(0x3d))
		f0 =  f1/*fround*/
		__asm(push(f0), push((i0+4)), op(0x3d))
		__asm(jump, target("__ZNK11b2EdgeShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB172_12_F"))
	__asm(lbl("__ZNK11b2EdgeShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB172_11_F"))
		i1 =  (1)
		__asm(push(f0), push(i0), op(0x3d))
		__asm(push(f7), push((i0+4)), op(0x3d))
	__asm(lbl("__ZNK11b2EdgeShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB172_12_F"))
		mstate.eax = i1
	__asm(jump, target("__ZNK11b2EdgeShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB172_13_F"), lbl("__ZNK11b2EdgeShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB172_13_B"), label, lbl("__ZNK11b2EdgeShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB172_13_F")); 
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	__asm(lbl("__ZNK11b2EdgeShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB172_14_F"))
		i0 =  (0)
		mstate.eax = i0
		__asm(jump, target("__ZNK11b2EdgeShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi__XprivateX__BB172_13_B"))
	}
}



// Sync
public const __ZNK11b2EdgeShape11ComputeAABBEP6b2AABBRK11b2Transformi:int = regFunc(FSM__ZNK11b2EdgeShape11ComputeAABBEP6b2AABBRK11b2Transformi.start)

public final class FSM__ZNK11b2EdgeShape11ComputeAABBEP6b2AABBRK11b2Transformi extends Machine {

	public static function start():void {
		var i0:int, i1:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number
		var f8:Number, f9:Number

		__asm(label, lbl("__ZNK11b2EdgeShape11ComputeAABBEP6b2AABBRK11b2Transformi_entry"))
	__asm(lbl("__ZNK11b2EdgeShape11ComputeAABBEP6b2AABBRK11b2Transformi__XprivateX__BB173_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i0+8)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i1+16)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i1+24)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i0+12)), op(0x38))))
		f4 =  (f0 * f1)
		f0 =  (f0 * f2)
		f4 =  f4/*fround*/
		f1 =  (f3 * f1)
		f0 =  f0/*fround*/
		f2 =  (f3 * f2)
		f1 =  f1/*fround*/
		f2 =  f2/*fround*/
		f3 =  ((__xasm<Number>(push(i0), op(0x38))))
		f4 =  f4/*fextend*/
		f0 =  f0/*fextend*/
		f5 =  ((__xasm<Number>(push((i0+16)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i1+20)), op(0x38))))
		f7 =  ((__xasm<Number>(push((i1+28)), op(0x38))))
		f8 =  ((__xasm<Number>(push((i0+20)), op(0x38))))
		f4 =  (f3 + f4)
		f0 =  (f3 + f0)
		f3 =  (f5 * f7)
		f5 =  (f5 * f6)
		f9 =  ((__xasm<Number>(push((i0+4)), op(0x38))))
		f1 =  f1/*fextend*/
		f2 =  f2/*fextend*/
		f4 =  f4/*fround*/
		f1 =  (f9 + f1)
		f0 =  f0/*fround*/
		f2 =  (f9 + f2)
		f3 =  f3/*fround*/
		f7 =  (f8 * f7)
		f5 =  f5/*fround*/
		f6 =  (f8 * f6)
		f1 =  f1/*fround*/
		f2 =  f2/*fround*/
		f7 =  f7/*fround*/
		f6 =  f6/*fround*/
		f5 =  f5/*fextend*/
		f4 =  f4/*fextend*/
		f3 =  f3/*fextend*/
		f0 =  f0/*fextend*/
		f4 =  (f4 + f5)
		f0 =  (f0 + f3)
		f3 =  f6/*fextend*/
		f1 =  f1/*fextend*/
		f5 =  f7/*fextend*/
		f2 =  f2/*fextend*/
		f4 =  f4/*fround*/
		f1 =  (f1 + f3)
		f0 =  f0/*fround*/
		f2 =  (f2 + f5)
		f1 =  f1/*fround*/
		f2 =  f2/*fround*/
		f0 =  f0/*fextend*/
		f3 =  f4/*fextend*/
		f4 =  ((f3<f0) ? f3 : f0)
		f2 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		f4 =  f4/*fround*/
		f5 =  ((f1<f2) ? f1 : f2)
		f6 =  ((__xasm<Number>(push((i1+8)), op(0x38))))
		f4 =  f4/*fextend*/
		f0 =  ((f3>f0) ? f3 : f0)
		f3 =  f5/*fround*/
		f4 =  (f4 - f6)
		f0 =  f0/*fround*/
		f3 =  f3/*fextend*/
		f1 =  ((f1>f2) ? f1 : f2)
		f0 =  f0/*fextend*/
		f2 =  (f3 - f6)
		f1 =  f1/*fround*/
		i0 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		f3 =  f4/*fround*/
		f0 =  (f0 + f6)
		f1 =  f1/*fextend*/
		__asm(push(f3), push(i0), op(0x3d))
		f2 =  f2/*fround*/
		f1 =  (f1 + f6)
		__asm(push(f2), push((i0+4)), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push((i0+8)), op(0x3d))
		f0 =  f1/*fround*/
		__asm(push(f0), push((i0+12)), op(0x3d))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZN11b2EdgeShape11ComputeMassEP10b2MassDataf:int = regFunc(FSM__ZN11b2EdgeShape11ComputeMassEP10b2MassDataf.start)

public final class FSM__ZN11b2EdgeShape11ComputeMassEP10b2MassDataf extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int

		var f0:Number, f1:Number, f2:Number, f3:Number

		__asm(label, lbl("__ZN11b2EdgeShape11ComputeMassEP10b2MassDataf_entry"))
	__asm(lbl("__ZN11b2EdgeShape11ComputeMassEP10b2MassDataf__XprivateX__BB174_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (0)
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		__asm(push(i0), push(i1), op(0x3c))
		i2 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i2+16)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i2+24)), op(0x38))))
		f0 =  (f0 + f1)
		f1 =  (0.5)
		f2 =  ((__xasm<Number>(push((i2+20)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i2+28)), op(0x38))))
		f0 =  f0/*fround*/
		f2 =  (f2 + f3)
		f1 =  f1/*fround*/
		f2 =  f2/*fround*/
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  (f0 * f1)
		f2 =  f2/*fextend*/
		f1 =  (f2 * f1)
		f0 =  f0/*fround*/
		__asm(push(f0), push((i1+4)), op(0x3d))
		f0 =  f1/*fround*/
		__asm(push(f0), push((i1+8)), op(0x3d))
		__asm(push(i0), push((i1+12)), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Async
public const __ZN15b2ContactFilterD1Ev:int = regFunc(FSM__ZN15b2ContactFilterD1Ev.start)

public final class FSM__ZN15b2ContactFilterD1Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN15b2ContactFilterD1Ev = new FSM__ZN15b2ContactFilterD1Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN15b2ContactFilterD1Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN15b2ContactFilterD1Ev_errState",
			"__ZN15b2ContactFilterD1Ev_state0"))
	__asm(lbl("__ZN15b2ContactFilterD1Ev_state0"))
	__asm(lbl("__ZN15b2ContactFilterD1Ev__XprivateX__BB175_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV15b2ContactFilter)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN15b2ContactFilterD1Ev_errState"))
		throw("Invalid state in __ZN15b2ContactFilterD1Ev")
	}
}



// Async
public const __ZN15b2ContactFilterD0Ev:int = regFunc(FSM__ZN15b2ContactFilterD0Ev.start)

public final class FSM__ZN15b2ContactFilterD0Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN15b2ContactFilterD0Ev = new FSM__ZN15b2ContactFilterD0Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN15b2ContactFilterD0Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN15b2ContactFilterD0Ev_errState",
			"__ZN15b2ContactFilterD0Ev_state0",
			"__ZN15b2ContactFilterD0Ev_state1"))
	__asm(lbl("__ZN15b2ContactFilterD0Ev_state0"))
	__asm(lbl("__ZN15b2ContactFilterD0Ev__XprivateX__BB176_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV15b2ContactFilter)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		__asm(push(i1==0), iftrue, target("__ZN15b2ContactFilterD0Ev__XprivateX__BB176_2_F"))
	__asm(lbl("__ZN15b2ContactFilterD0Ev__XprivateX__BB176_1_F"))
		i0 =  (0)
		mstate.esp -= 8
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN15b2ContactFilterD0Ev_state1"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__ZN15b2ContactFilterD0Ev__XprivateX__BB176_2_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN15b2ContactFilterD0Ev_errState"))
		throw("Invalid state in __ZN15b2ContactFilterD0Ev")
	}
}



// Sync
public const __ZN15b2ContactFilter13ShouldCollideEP9b2FixtureS1_:int = regFunc(FSM__ZN15b2ContactFilter13ShouldCollideEP9b2FixtureS1_.start)

public final class FSM__ZN15b2ContactFilter13ShouldCollideEP9b2FixtureS1_ extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int, i4:int


		__asm(label, lbl("__ZN15b2ContactFilter13ShouldCollideEP9b2FixtureS1__entry"))
	__asm(lbl("__ZN15b2ContactFilter13ShouldCollideEP9b2FixtureS1___XprivateX__BB177_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i2 =  ((__xasm<int>(push((i0+40)), op(0x36))))
		i3 =  ((__xasm<int>(push((i1+40)), op(0x36))))
		__asm(push(i2==0), iftrue, target("__ZN15b2ContactFilter13ShouldCollideEP9b2FixtureS1___XprivateX__BB177_4_F"))
	__asm(lbl("__ZN15b2ContactFilter13ShouldCollideEP9b2FixtureS1___XprivateX__BB177_1_F"))
		i3 =  (i3 & 65535)
		i4 =  (i2 & 65535)
		__asm(push(i4!=i3), iftrue, target("__ZN15b2ContactFilter13ShouldCollideEP9b2FixtureS1___XprivateX__BB177_4_F"))
	__asm(lbl("__ZN15b2ContactFilter13ShouldCollideEP9b2FixtureS1___XprivateX__BB177_2_F"))
		i0 =  (i2 << 16)
		i0 =  (i0 >> 16)
		i0 =  ((i0>0) ? 1 : 0)
	__asm(jump, target("__ZN15b2ContactFilter13ShouldCollideEP9b2FixtureS1___XprivateX__BB177_3_F"), lbl("__ZN15b2ContactFilter13ShouldCollideEP9b2FixtureS1___XprivateX__BB177_3_B"), label, lbl("__ZN15b2ContactFilter13ShouldCollideEP9b2FixtureS1___XprivateX__BB177_3_F")); 
		i0 =  (i0 & 1)
		__asm(jump, target("__ZN15b2ContactFilter13ShouldCollideEP9b2FixtureS1___XprivateX__BB177_7_F"))
	__asm(lbl("__ZN15b2ContactFilter13ShouldCollideEP9b2FixtureS1___XprivateX__BB177_4_F"))
		i2 =  ((__xasm<int>(push((i0+38)), op(0x36))))
		i3 =  ((__xasm<int>(push((i1+36)), op(0x36))))
		i2 =  (i3 & i2)
		i2 =  (i2 & 65535)
		__asm(push(i2==0), iftrue, target("__ZN15b2ContactFilter13ShouldCollideEP9b2FixtureS1___XprivateX__BB177_6_F"))
	__asm(lbl("__ZN15b2ContactFilter13ShouldCollideEP9b2FixtureS1___XprivateX__BB177_5_F"))
		i0 =  ((__xasm<int>(push((i0+36)), op(0x36))))
		i1 =  ((__xasm<int>(push((i1+38)), op(0x36))))
		i0 =  (i1 & i0)
		i0 =  (i0 & 65535)
		i0 =  ((i0!=0) ? 1 : 0)
		__asm(jump, target("__ZN15b2ContactFilter13ShouldCollideEP9b2FixtureS1___XprivateX__BB177_3_B"))
	__asm(lbl("__ZN15b2ContactFilter13ShouldCollideEP9b2FixtureS1___XprivateX__BB177_6_F"))
		i0 =  (0)
	__asm(lbl("__ZN15b2ContactFilter13ShouldCollideEP9b2FixtureS1___XprivateX__BB177_7_F"))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZN15b2CircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_:int = regFunc(FSM__ZN15b2CircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_.start)

public final class FSM__ZN15b2CircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_ extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number
		var f8:Number, f9:Number, f10:Number, f11:Number, f12:Number, f13:Number

		__asm(label, lbl("__ZN15b2CircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4__entry"))
	__asm(lbl("__ZN15b2CircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB178_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (0)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i2 =  ((__xasm<int>(push((i1+52)), op(0x37))))
		i1 =  ((__xasm<int>(push((i1+48)), op(0x37))))
		i2 =  ((__xasm<int>(push((i2+16)), op(0x37))))
		i1 =  ((__xasm<int>(push((i1+16)), op(0x37))))
		i3 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		__asm(push(i0), push((i3+68)), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i4 =  ((__xasm<int>(push((mstate.ebp+20)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i0+8)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i1+16)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i0+12)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i4+8)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i2+16)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i4+12)), op(0x38))))
		f0 =  (f0 * f1)
		f1 =  (f2 * f1)
		f2 =  (f3 * f4)
		f3 =  (f5 * f4)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f2 =  f2/*fround*/
		f3 =  f3/*fround*/
		f4 =  ((__xasm<Number>(push(i0), op(0x38))))
		f0 =  f0/*fextend*/
		f5 =  ((__xasm<Number>(push((i0+16)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i1+20)), op(0x38))))
		f7 =  ((__xasm<Number>(push((i0+20)), op(0x38))))
		f8 =  ((__xasm<Number>(push((i0+4)), op(0x38))))
		f1 =  f1/*fextend*/
		f9 =  ((__xasm<Number>(push(i4), op(0x38))))
		f2 =  f2/*fextend*/
		f10 =  ((__xasm<Number>(push((i4+16)), op(0x38))))
		f11 =  ((__xasm<Number>(push((i2+20)), op(0x38))))
		f12 =  ((__xasm<Number>(push((i4+20)), op(0x38))))
		f13 =  ((__xasm<Number>(push((i4+4)), op(0x38))))
		f3 =  f3/*fextend*/
		f0 =  (f4 + f0)
		f1 =  (f8 + f1)
		f4 =  (f5 * f6)
		f5 =  (f7 * f6)
		f2 =  (f9 + f2)
		f3 =  (f13 + f3)
		f6 =  (f10 * f11)
		f7 =  (f12 * f11)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f4 =  f4/*fround*/
		f5 =  f5/*fround*/
		f2 =  f2/*fround*/
		f3 =  f3/*fround*/
		f6 =  f6/*fround*/
		f7 =  f7/*fround*/
		f4 =  f4/*fextend*/
		f0 =  f0/*fextend*/
		f5 =  f5/*fextend*/
		f1 =  f1/*fextend*/
		f6 =  f6/*fextend*/
		f2 =  f2/*fextend*/
		f7 =  f7/*fextend*/
		f3 =  f3/*fextend*/
		f0 =  (f0 + f4)
		f1 =  (f1 + f5)
		f2 =  (f2 + f6)
		f3 =  (f3 + f7)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f2 =  f2/*fround*/
		f3 =  f3/*fround*/
		f0 =  f0/*fextend*/
		f2 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		f3 =  f3/*fextend*/
		f0 =  (f2 - f0)
		f1 =  (f3 - f1)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		f2 =  ((__xasm<Number>(push((i1+8)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i2+8)), op(0x38))))
		f0 =  (f0 * f0)
		f1 =  (f1 * f1)
		f2 =  (f2 + f3)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f2 =  f2/*fround*/
		f2 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 + f1)
		f1 =  (f2 * f2)
		i0 =  (i1 + 20)
		i4 =  (i2 + 20)
		i2 =  (i2 + 16)
		i1 =  (i1 + 16)
		i5 =  (i3 + 68)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		__asm(push(f1<f0), iftrue, target("__ZN15b2CircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB178_2_F"))
	__asm(lbl("__ZN15b2CircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB178_1_F"))
		i6 =  (0)
		__asm(push(i6), push((i3+64)), op(0x3c))
		f0 =  ((__xasm<Number>(push(i1), op(0x38))))
		f1 =  ((__xasm<Number>(push(i0), op(0x38))))
		__asm(push(f0), push((i3+56)), op(0x3d))
		__asm(push(f1), push((i3+60)), op(0x3d))
		__asm(push(i6), push((i3+48)), op(0x3c))
		__asm(push(i6), push((i3+52)), op(0x3c))
		i0 =  (1)
		__asm(push(i0), push(i5), op(0x3c))
		f0 =  ((__xasm<Number>(push(i2), op(0x38))))
		f1 =  ((__xasm<Number>(push(i4), op(0x38))))
		__asm(push(f0), push(i3), op(0x3d))
		__asm(push(f1), push((i3+4)), op(0x3d))
		__asm(push(i6), push((i3+16)), op(0x3c))
	__asm(lbl("__ZN15b2CircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB178_2_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Async
public const __ZN15b2CircleContactD1Ev:int = regFunc(FSM__ZN15b2CircleContactD1Ev.start)

public final class FSM__ZN15b2CircleContactD1Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN15b2CircleContactD1Ev = new FSM__ZN15b2CircleContactD1Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN15b2CircleContactD1Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN15b2CircleContactD1Ev_errState",
			"__ZN15b2CircleContactD1Ev_state0"))
	__asm(lbl("__ZN15b2CircleContactD1Ev_state0"))
	__asm(lbl("__ZN15b2CircleContactD1Ev__XprivateX__BB179_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV9b2Contact)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN15b2CircleContactD1Ev_errState"))
		throw("Invalid state in __ZN15b2CircleContactD1Ev")
	}
}



// Async
public const __ZN15b2CircleContactD0Ev:int = regFunc(FSM__ZN15b2CircleContactD0Ev.start)

public final class FSM__ZN15b2CircleContactD0Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN15b2CircleContactD0Ev = new FSM__ZN15b2CircleContactD0Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN15b2CircleContactD0Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN15b2CircleContactD0Ev_errState",
			"__ZN15b2CircleContactD0Ev_state0",
			"__ZN15b2CircleContactD0Ev_state1"))
	__asm(lbl("__ZN15b2CircleContactD0Ev_state0"))
	__asm(lbl("__ZN15b2CircleContactD0Ev__XprivateX__BB180_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV9b2Contact)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		__asm(push(i1==0), iftrue, target("__ZN15b2CircleContactD0Ev__XprivateX__BB180_2_F"))
	__asm(lbl("__ZN15b2CircleContactD0Ev__XprivateX__BB180_1_F"))
		i0 =  (0)
		mstate.esp -= 8
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN15b2CircleContactD0Ev_state1"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__ZN15b2CircleContactD0Ev__XprivateX__BB180_2_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN15b2CircleContactD0Ev_errState"))
		throw("Invalid state in __ZN15b2CircleContactD0Ev")
	}
}



// Async
public const __ZN22b2EdgeAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_:int = regFunc(FSM__ZN22b2EdgeAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_.start)

public final class FSM__ZN22b2EdgeAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_ extends Machine {

	public static function start():void {
			var result:FSM__ZN22b2EdgeAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_ = new FSM__ZN22b2EdgeAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int

	public static const intRegCount:int = 5

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN22b2EdgeAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4__entry"))
		__asm(push(state), switchjump(
			"__ZN22b2EdgeAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4__errState",
			"__ZN22b2EdgeAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4__state0",
			"__ZN22b2EdgeAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4__state1"))
	__asm(lbl("__ZN22b2EdgeAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4__state0"))
	__asm(lbl("__ZN22b2EdgeAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB181_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+52)), op(0x37))))
		i0 =  ((__xasm<int>(push((i0+48)), op(0x37))))
		i1 =  ((__xasm<int>(push((i1+16)), op(0x37))))
		i0 =  ((__xasm<int>(push((i0+16)), op(0x37))))
		mstate.esp -= 20
		i2 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i3 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i4 =  ((__xasm<int>(push((mstate.ebp+20)), op(0x37))))
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i3), push((mstate.esp+8)), op(0x3c))
		__asm(push(i1), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM__Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6_.start()
		return
	__asm(lbl("__ZN22b2EdgeAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4__state1"))
		mstate.esp += 20
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN22b2EdgeAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4__errState"))
		throw("Invalid state in __ZN22b2EdgeAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_")
	}
}



// Async
public const __ZN22b2EdgeAndCircleContactD1Ev:int = regFunc(FSM__ZN22b2EdgeAndCircleContactD1Ev.start)

public final class FSM__ZN22b2EdgeAndCircleContactD1Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN22b2EdgeAndCircleContactD1Ev = new FSM__ZN22b2EdgeAndCircleContactD1Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN22b2EdgeAndCircleContactD1Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN22b2EdgeAndCircleContactD1Ev_errState",
			"__ZN22b2EdgeAndCircleContactD1Ev_state0"))
	__asm(lbl("__ZN22b2EdgeAndCircleContactD1Ev_state0"))
	__asm(lbl("__ZN22b2EdgeAndCircleContactD1Ev__XprivateX__BB182_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV9b2Contact)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN22b2EdgeAndCircleContactD1Ev_errState"))
		throw("Invalid state in __ZN22b2EdgeAndCircleContactD1Ev")
	}
}



// Async
public const __ZN22b2EdgeAndCircleContactD0Ev:int = regFunc(FSM__ZN22b2EdgeAndCircleContactD0Ev.start)

public final class FSM__ZN22b2EdgeAndCircleContactD0Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN22b2EdgeAndCircleContactD0Ev = new FSM__ZN22b2EdgeAndCircleContactD0Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN22b2EdgeAndCircleContactD0Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN22b2EdgeAndCircleContactD0Ev_errState",
			"__ZN22b2EdgeAndCircleContactD0Ev_state0",
			"__ZN22b2EdgeAndCircleContactD0Ev_state1"))
	__asm(lbl("__ZN22b2EdgeAndCircleContactD0Ev_state0"))
	__asm(lbl("__ZN22b2EdgeAndCircleContactD0Ev__XprivateX__BB183_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV9b2Contact)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		__asm(push(i1==0), iftrue, target("__ZN22b2EdgeAndCircleContactD0Ev__XprivateX__BB183_2_F"))
	__asm(lbl("__ZN22b2EdgeAndCircleContactD0Ev__XprivateX__BB183_1_F"))
		i0 =  (0)
		mstate.esp -= 8
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN22b2EdgeAndCircleContactD0Ev_state1"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__ZN22b2EdgeAndCircleContactD0Ev__XprivateX__BB183_2_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN22b2EdgeAndCircleContactD0Ev_errState"))
		throw("Invalid state in __ZN22b2EdgeAndCircleContactD0Ev")
	}
}



// Async
public const __ZN23b2EdgeAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_:int = regFunc(FSM__ZN23b2EdgeAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_.start)

public final class FSM__ZN23b2EdgeAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_ extends Machine {

	public static function start():void {
			var result:FSM__ZN23b2EdgeAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_ = new FSM__ZN23b2EdgeAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int

	public static const intRegCount:int = 5

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN23b2EdgeAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4__entry"))
		__asm(push(state), switchjump(
			"__ZN23b2EdgeAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4__errState",
			"__ZN23b2EdgeAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4__state0",
			"__ZN23b2EdgeAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4__state1",
			"__ZN23b2EdgeAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4__state2"))
	__asm(lbl("__ZN23b2EdgeAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4__state0"))
	__asm(lbl("__ZN23b2EdgeAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB184_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 400
		i0 =  ((mstate.ebp+-400))
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i2 =  ((__xasm<int>(push((i1+52)), op(0x37))))
		i1 =  ((__xasm<int>(push((i1+48)), op(0x37))))
		i2 =  ((__xasm<int>(push((i2+16)), op(0x37))))
		i1 =  ((__xasm<int>(push((i1+16)), op(0x37))))
		mstate.esp -= 20
		i3 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i4 =  ((__xasm<int>(push((mstate.ebp+20)), op(0x37))))
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i3), push((mstate.esp+8)), op(0x3c))
		__asm(push(i2), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		mstate.esp -= 4;FSM__ZN12b2EPColliderC1EPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS5_.start()
	__asm(lbl("__ZN23b2EdgeAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4__state1"))
		mstate.esp += 20
		mstate.esp -= 8
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM__ZN12b2EPCollider7CollideEP10b2Manifold.start()
		return
	__asm(lbl("__ZN23b2EdgeAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4__state2"))
		mstate.esp += 8
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN23b2EdgeAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4__errState"))
		throw("Invalid state in __ZN23b2EdgeAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_")
	}
}



// Async
public const __ZN23b2EdgeAndPolygonContactD1Ev:int = regFunc(FSM__ZN23b2EdgeAndPolygonContactD1Ev.start)

public final class FSM__ZN23b2EdgeAndPolygonContactD1Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN23b2EdgeAndPolygonContactD1Ev = new FSM__ZN23b2EdgeAndPolygonContactD1Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN23b2EdgeAndPolygonContactD1Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN23b2EdgeAndPolygonContactD1Ev_errState",
			"__ZN23b2EdgeAndPolygonContactD1Ev_state0"))
	__asm(lbl("__ZN23b2EdgeAndPolygonContactD1Ev_state0"))
	__asm(lbl("__ZN23b2EdgeAndPolygonContactD1Ev__XprivateX__BB185_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV9b2Contact)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN23b2EdgeAndPolygonContactD1Ev_errState"))
		throw("Invalid state in __ZN23b2EdgeAndPolygonContactD1Ev")
	}
}



// Async
public const __ZN23b2EdgeAndPolygonContactD0Ev:int = regFunc(FSM__ZN23b2EdgeAndPolygonContactD0Ev.start)

public final class FSM__ZN23b2EdgeAndPolygonContactD0Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN23b2EdgeAndPolygonContactD0Ev = new FSM__ZN23b2EdgeAndPolygonContactD0Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN23b2EdgeAndPolygonContactD0Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN23b2EdgeAndPolygonContactD0Ev_errState",
			"__ZN23b2EdgeAndPolygonContactD0Ev_state0",
			"__ZN23b2EdgeAndPolygonContactD0Ev_state1"))
	__asm(lbl("__ZN23b2EdgeAndPolygonContactD0Ev_state0"))
	__asm(lbl("__ZN23b2EdgeAndPolygonContactD0Ev__XprivateX__BB186_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV9b2Contact)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		__asm(push(i1==0), iftrue, target("__ZN23b2EdgeAndPolygonContactD0Ev__XprivateX__BB186_2_F"))
	__asm(lbl("__ZN23b2EdgeAndPolygonContactD0Ev__XprivateX__BB186_1_F"))
		i0 =  (0)
		mstate.esp -= 8
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN23b2EdgeAndPolygonContactD0Ev_state1"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__ZN23b2EdgeAndPolygonContactD0Ev__XprivateX__BB186_2_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN23b2EdgeAndPolygonContactD0Ev_errState"))
		throw("Invalid state in __ZN23b2EdgeAndPolygonContactD0Ev")
	}
}



// Async
public const __ZN22b2LoopAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_:int = regFunc(FSM__ZN22b2LoopAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_.start)

public final class FSM__ZN22b2LoopAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_ extends Machine {

	public static function start():void {
			var result:FSM__ZN22b2LoopAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_ = new FSM__ZN22b2LoopAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
	public var i8:int, i9:int, i10:int, i11:int

	public static const intRegCount:int = 12
	public var f0:Number, f1:Number

	public static const NumberRegCount:int = 2
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN22b2LoopAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4__entry"))
		__asm(push(state), switchjump(
			"__ZN22b2LoopAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4__errState",
			"__ZN22b2LoopAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4__state0",
			"__ZN22b2LoopAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4__state1",
			"__ZN22b2LoopAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4__state2",
			"__ZN22b2LoopAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4__state3",
			"__ZN22b2LoopAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4__state4",
			"__ZN22b2LoopAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4__state5"))
	__asm(lbl("__ZN22b2LoopAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4__state0"))
	__asm(lbl("__ZN22b2LoopAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB187_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 64
		i0 =  (__ZTV11b2EdgeShape)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i2 =  ((__xasm<int>(push((i1+48)), op(0x37))))
		i2 =  ((__xasm<int>(push((i2+16)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push((mstate.ebp+-64)), op(0x3c))
		i0 =  (1)
		__asm(push(i0), push((mstate.ebp+-60)), op(0x3c))
		f0 =  ((__xasm<Number>(push(_b2_polygonRadius), op(0x38))))
		__asm(push(f0), push((mstate.ebp+-56)), op(0x3d))
		i0 =  (0)
		__asm(push(i0), push((mstate.ebp+-16)), op(0x3a))
		__asm(push(i0), push((mstate.ebp+-15)), op(0x3a))
		i0 =  ((mstate.ebp+-64))
		i3 =  ((__xasm<int>(push((i1+56)), op(0x37))))
		i4 =  ((__xasm<int>(push((i2+20)), op(0x37))))
		i5 =  (i2 + 20)
		i6 =  (i0 + 49)
		i7 =  (i0 + 48)
		i8 =  (i0 + 8)
		i0 =  (i0 + 4)
		i9 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i10 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i11 =  ((__xasm<int>(push((mstate.ebp+20)), op(0x37))))
		__asm(push(i4>1), iftrue, target("__ZN22b2LoopAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB187_3_F"))
	__asm(lbl("__ZN22b2LoopAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB187_1_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str9216)
		i3 =  (__ZZNK11b2LoopShape12GetChildEdgeEP11b2EdgeShapeiE8__func__)
		i5 =  (__2E_str8215)
		i6 =  (56)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i5), push((mstate.esp+16)), op(0x3c))
		__asm(push(i6), push((mstate.esp+20)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__ZN22b2LoopAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4__state1"))
		mstate.esp += 24
	__asm(lbl("__ZN22b2LoopAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB187_2_F"))
		state = 2
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZN22b2LoopAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4__state2"))
	__asm(lbl("__ZN22b2LoopAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB187_3_F"))
		__asm(push(i3<0), iftrue, target("__ZN22b2LoopAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB187_5_F"))
	__asm(lbl("__ZN22b2LoopAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB187_4_F"))
		i4 =  ((__xasm<int>(push(i5), op(0x37))))
		__asm(push(i4>i3), iftrue, target("__ZN22b2LoopAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB187_7_F"))
	__asm(lbl("__ZN22b2LoopAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB187_5_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str1208)
		i3 =  (__ZZNK11b2LoopShape12GetChildEdgeEP11b2EdgeShapeiE8__func__)
		i5 =  (__2E_str8215)
		i6 =  (57)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i5), push((mstate.esp+16)), op(0x3c))
		__asm(push(i6), push((mstate.esp+20)), op(0x3c))
		state = 3
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__ZN22b2LoopAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4__state3"))
		mstate.esp += 24
	__asm(lbl("__ZN22b2LoopAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB187_6_F"))
		state = 4
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZN22b2LoopAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4__state4"))
	__asm(lbl("__ZN22b2LoopAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB187_7_F"))
		i4 =  (1)
		__asm(push(i4), push(i0), op(0x3c))
		f0 =  ((__xasm<Number>(push((i2+8)), op(0x38))))
		__asm(push(f0), push(i8), op(0x3d))
		__asm(push(i4), push(i7), op(0x3a))
		__asm(push(i4), push(i6), op(0x3a))
		i0 =  (i3 + -1)
		__asm(push(i0<0), iftrue, target("__ZN22b2LoopAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB187_9_F"))
	__asm(lbl("__ZN22b2LoopAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB187_8_F"))
		i0 = i3
		__asm(jump, target("__ZN22b2LoopAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB187_10_F"))
	__asm(lbl("__ZN22b2LoopAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB187_9_F"))
		i0 =  ((__xasm<int>(push(i5), op(0x37))))
	__asm(lbl("__ZN22b2LoopAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB187_10_F"))
		i4 =  ((__xasm<int>(push(i5), op(0x37))))
		i5 =  (i3 + 1)
		i5 =  ((i5<i4) ? i5 : 0)
		i6 =  (i3 + 2)
		i0 =  (i0 + -1)
		__asm(push(i4<=i6), iftrue, target("__ZN22b2LoopAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB187_12_F"))
	__asm(lbl("__ZN22b2LoopAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB187_11_F"))
		i4 = i6
		__asm(jump, target("__ZN22b2LoopAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB187_16_F"))
	__asm(lbl("__ZN22b2LoopAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB187_12_F"))
		i6 =  (i3 + 2)
	__asm(jump, target("__ZN22b2LoopAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB187_13_F"), lbl("__ZN22b2LoopAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB187_13_B"), label, lbl("__ZN22b2LoopAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB187_13_F")); 
		i6 =  (i6 - i4)
		__asm(push(i4>i6), iftrue, target("__ZN22b2LoopAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB187_15_F"))
	__asm(lbl("__ZN22b2LoopAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB187_14_F"))
		__asm(jump, target("__ZN22b2LoopAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB187_13_B"))
	__asm(lbl("__ZN22b2LoopAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB187_15_F"))
		i4 = i6
	__asm(lbl("__ZN22b2LoopAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB187_16_F"))
		i6 =  ((mstate.ebp+-64))
		i7 =  ((__xasm<int>(push((i2+16)), op(0x37))))
		i0 =  (i0 << 3)
		i0 =  (i7 + i0)
		f0 =  ((__xasm<Number>(push(i0), op(0x38))))
		f1 =  ((__xasm<Number>(push((i0+4)), op(0x38))))
		__asm(push(f0), push((mstate.ebp+-32)), op(0x3d))
		__asm(push(f1), push((mstate.ebp+-28)), op(0x3d))
		i0 =  ((__xasm<int>(push((i2+16)), op(0x37))))
		i3 =  (i3 << 3)
		i0 =  (i0 + i3)
		f0 =  ((__xasm<Number>(push(i0), op(0x38))))
		f1 =  ((__xasm<Number>(push((i0+4)), op(0x38))))
		__asm(push(f0), push((mstate.ebp+-48)), op(0x3d))
		__asm(push(f1), push((mstate.ebp+-44)), op(0x3d))
		i0 =  ((__xasm<int>(push((i2+16)), op(0x37))))
		i3 =  (i5 << 3)
		i0 =  (i0 + i3)
		f0 =  ((__xasm<Number>(push(i0), op(0x38))))
		f1 =  ((__xasm<Number>(push((i0+4)), op(0x38))))
		__asm(push(f0), push((mstate.ebp+-40)), op(0x3d))
		__asm(push(f1), push((mstate.ebp+-36)), op(0x3d))
		i0 =  ((__xasm<int>(push((i2+16)), op(0x37))))
		i2 =  (i4 << 3)
		i0 =  (i0 + i2)
		f0 =  ((__xasm<Number>(push(i0), op(0x38))))
		f1 =  ((__xasm<Number>(push((i0+4)), op(0x38))))
		__asm(push(f0), push((mstate.ebp+-24)), op(0x3d))
		__asm(push(f1), push((mstate.ebp+-20)), op(0x3d))
		i0 =  ((__xasm<int>(push((i1+52)), op(0x37))))
		i0 =  ((__xasm<int>(push((i0+16)), op(0x37))))
		mstate.esp -= 20
		__asm(push(i9), push(mstate.esp), op(0x3c))
		__asm(push(i6), push((mstate.esp+4)), op(0x3c))
		__asm(push(i10), push((mstate.esp+8)), op(0x3c))
		__asm(push(i0), push((mstate.esp+12)), op(0x3c))
		__asm(push(i11), push((mstate.esp+16)), op(0x3c))
		state = 5
		mstate.esp -= 4;FSM__Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6_.start()
		return
	__asm(lbl("__ZN22b2LoopAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4__state5"))
		mstate.esp += 20
	__asm(lbl("__ZN22b2LoopAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB187_17_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN22b2LoopAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4__errState"))
		throw("Invalid state in __ZN22b2LoopAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_")
	}
}



// Async
public const __ZN22b2LoopAndCircleContactD1Ev:int = regFunc(FSM__ZN22b2LoopAndCircleContactD1Ev.start)

public final class FSM__ZN22b2LoopAndCircleContactD1Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN22b2LoopAndCircleContactD1Ev = new FSM__ZN22b2LoopAndCircleContactD1Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN22b2LoopAndCircleContactD1Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN22b2LoopAndCircleContactD1Ev_errState",
			"__ZN22b2LoopAndCircleContactD1Ev_state0"))
	__asm(lbl("__ZN22b2LoopAndCircleContactD1Ev_state0"))
	__asm(lbl("__ZN22b2LoopAndCircleContactD1Ev__XprivateX__BB188_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV9b2Contact)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN22b2LoopAndCircleContactD1Ev_errState"))
		throw("Invalid state in __ZN22b2LoopAndCircleContactD1Ev")
	}
}



// Async
public const __ZN22b2LoopAndCircleContactD0Ev:int = regFunc(FSM__ZN22b2LoopAndCircleContactD0Ev.start)

public final class FSM__ZN22b2LoopAndCircleContactD0Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN22b2LoopAndCircleContactD0Ev = new FSM__ZN22b2LoopAndCircleContactD0Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN22b2LoopAndCircleContactD0Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN22b2LoopAndCircleContactD0Ev_errState",
			"__ZN22b2LoopAndCircleContactD0Ev_state0",
			"__ZN22b2LoopAndCircleContactD0Ev_state1"))
	__asm(lbl("__ZN22b2LoopAndCircleContactD0Ev_state0"))
	__asm(lbl("__ZN22b2LoopAndCircleContactD0Ev__XprivateX__BB189_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV9b2Contact)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		__asm(push(i1==0), iftrue, target("__ZN22b2LoopAndCircleContactD0Ev__XprivateX__BB189_2_F"))
	__asm(lbl("__ZN22b2LoopAndCircleContactD0Ev__XprivateX__BB189_1_F"))
		i0 =  (0)
		mstate.esp -= 8
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN22b2LoopAndCircleContactD0Ev_state1"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__ZN22b2LoopAndCircleContactD0Ev__XprivateX__BB189_2_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN22b2LoopAndCircleContactD0Ev_errState"))
		throw("Invalid state in __ZN22b2LoopAndCircleContactD0Ev")
	}
}



// Async
public const __ZN23b2LoopAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_:int = regFunc(FSM__ZN23b2LoopAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_.start)

public final class FSM__ZN23b2LoopAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_ extends Machine {

	public static function start():void {
			var result:FSM__ZN23b2LoopAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_ = new FSM__ZN23b2LoopAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
	public var i8:int, i9:int, i10:int, i11:int

	public static const intRegCount:int = 12
	public var f0:Number, f1:Number

	public static const NumberRegCount:int = 2
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN23b2LoopAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4__entry"))
		__asm(push(state), switchjump(
			"__ZN23b2LoopAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4__errState",
			"__ZN23b2LoopAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4__state0",
			"__ZN23b2LoopAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4__state1",
			"__ZN23b2LoopAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4__state2",
			"__ZN23b2LoopAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4__state3",
			"__ZN23b2LoopAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4__state4",
			"__ZN23b2LoopAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4__state5",
			"__ZN23b2LoopAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4__state6"))
	__asm(lbl("__ZN23b2LoopAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4__state0"))
	__asm(lbl("__ZN23b2LoopAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB190_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 464
		i0 =  (__ZTV11b2EdgeShape)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i2 =  ((__xasm<int>(push((i1+48)), op(0x37))))
		i2 =  ((__xasm<int>(push((i2+16)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push((mstate.ebp+-64)), op(0x3c))
		i0 =  (1)
		__asm(push(i0), push((mstate.ebp+-60)), op(0x3c))
		f0 =  ((__xasm<Number>(push(_b2_polygonRadius), op(0x38))))
		__asm(push(f0), push((mstate.ebp+-56)), op(0x3d))
		i0 =  (0)
		__asm(push(i0), push((mstate.ebp+-16)), op(0x3a))
		__asm(push(i0), push((mstate.ebp+-15)), op(0x3a))
		i0 =  ((mstate.ebp+-64))
		i3 =  ((__xasm<int>(push((i1+56)), op(0x37))))
		i4 =  ((__xasm<int>(push((i2+20)), op(0x37))))
		i5 =  (i2 + 20)
		i6 =  (i0 + 49)
		i7 =  (i0 + 48)
		i8 =  (i0 + 8)
		i0 =  (i0 + 4)
		i9 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i10 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i11 =  ((__xasm<int>(push((mstate.ebp+20)), op(0x37))))
		__asm(push(i4>1), iftrue, target("__ZN23b2LoopAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB190_3_F"))
	__asm(lbl("__ZN23b2LoopAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB190_1_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str9216)
		i3 =  (__ZZNK11b2LoopShape12GetChildEdgeEP11b2EdgeShapeiE8__func__)
		i5 =  (__2E_str8215)
		i6 =  (56)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i5), push((mstate.esp+16)), op(0x3c))
		__asm(push(i6), push((mstate.esp+20)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__ZN23b2LoopAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4__state1"))
		mstate.esp += 24
	__asm(lbl("__ZN23b2LoopAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB190_2_F"))
		state = 2
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZN23b2LoopAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4__state2"))
	__asm(lbl("__ZN23b2LoopAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB190_3_F"))
		__asm(push(i3<0), iftrue, target("__ZN23b2LoopAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB190_5_F"))
	__asm(lbl("__ZN23b2LoopAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB190_4_F"))
		i4 =  ((__xasm<int>(push(i5), op(0x37))))
		__asm(push(i4>i3), iftrue, target("__ZN23b2LoopAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB190_7_F"))
	__asm(lbl("__ZN23b2LoopAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB190_5_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str1208)
		i3 =  (__ZZNK11b2LoopShape12GetChildEdgeEP11b2EdgeShapeiE8__func__)
		i5 =  (__2E_str8215)
		i6 =  (57)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i5), push((mstate.esp+16)), op(0x3c))
		__asm(push(i6), push((mstate.esp+20)), op(0x3c))
		state = 3
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__ZN23b2LoopAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4__state3"))
		mstate.esp += 24
	__asm(lbl("__ZN23b2LoopAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB190_6_F"))
		state = 4
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZN23b2LoopAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4__state4"))
	__asm(lbl("__ZN23b2LoopAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB190_7_F"))
		i4 =  (1)
		__asm(push(i4), push(i0), op(0x3c))
		f0 =  ((__xasm<Number>(push((i2+8)), op(0x38))))
		__asm(push(f0), push(i8), op(0x3d))
		__asm(push(i4), push(i7), op(0x3a))
		__asm(push(i4), push(i6), op(0x3a))
		i0 =  (i3 + -1)
		__asm(push(i0<0), iftrue, target("__ZN23b2LoopAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB190_9_F"))
	__asm(lbl("__ZN23b2LoopAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB190_8_F"))
		i0 = i3
		__asm(jump, target("__ZN23b2LoopAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB190_10_F"))
	__asm(lbl("__ZN23b2LoopAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB190_9_F"))
		i0 =  ((__xasm<int>(push(i5), op(0x37))))
	__asm(lbl("__ZN23b2LoopAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB190_10_F"))
		i4 =  ((__xasm<int>(push(i5), op(0x37))))
		i5 =  (i3 + 1)
		i5 =  ((i5<i4) ? i5 : 0)
		i6 =  (i3 + 2)
		i0 =  (i0 + -1)
		__asm(push(i4<=i6), iftrue, target("__ZN23b2LoopAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB190_12_F"))
	__asm(lbl("__ZN23b2LoopAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB190_11_F"))
		i4 = i6
		__asm(jump, target("__ZN23b2LoopAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB190_16_F"))
	__asm(lbl("__ZN23b2LoopAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB190_12_F"))
		i6 =  (i3 + 2)
	__asm(jump, target("__ZN23b2LoopAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB190_13_F"), lbl("__ZN23b2LoopAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB190_13_B"), label, lbl("__ZN23b2LoopAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB190_13_F")); 
		i6 =  (i6 - i4)
		__asm(push(i4>i6), iftrue, target("__ZN23b2LoopAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB190_15_F"))
	__asm(lbl("__ZN23b2LoopAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB190_14_F"))
		__asm(jump, target("__ZN23b2LoopAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB190_13_B"))
	__asm(lbl("__ZN23b2LoopAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB190_15_F"))
		i4 = i6
	__asm(lbl("__ZN23b2LoopAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB190_16_F"))
		i6 =  ((mstate.ebp+-464))
		i7 =  ((__xasm<int>(push((i2+16)), op(0x37))))
		i0 =  (i0 << 3)
		i0 =  (i7 + i0)
		f0 =  ((__xasm<Number>(push(i0), op(0x38))))
		f1 =  ((__xasm<Number>(push((i0+4)), op(0x38))))
		__asm(push(f0), push((mstate.ebp+-32)), op(0x3d))
		__asm(push(f1), push((mstate.ebp+-28)), op(0x3d))
		i0 =  ((__xasm<int>(push((i2+16)), op(0x37))))
		i3 =  (i3 << 3)
		i0 =  (i0 + i3)
		f0 =  ((__xasm<Number>(push(i0), op(0x38))))
		f1 =  ((__xasm<Number>(push((i0+4)), op(0x38))))
		__asm(push(f0), push((mstate.ebp+-48)), op(0x3d))
		__asm(push(f1), push((mstate.ebp+-44)), op(0x3d))
		i0 =  ((__xasm<int>(push((i2+16)), op(0x37))))
		i3 =  (i5 << 3)
		i0 =  (i0 + i3)
		f0 =  ((__xasm<Number>(push(i0), op(0x38))))
		f1 =  ((__xasm<Number>(push((i0+4)), op(0x38))))
		__asm(push(f0), push((mstate.ebp+-40)), op(0x3d))
		__asm(push(f1), push((mstate.ebp+-36)), op(0x3d))
		i0 =  ((__xasm<int>(push((i2+16)), op(0x37))))
		i2 =  (i4 << 3)
		i0 =  (i0 + i2)
		f0 =  ((__xasm<Number>(push(i0), op(0x38))))
		f1 =  ((__xasm<Number>(push((i0+4)), op(0x38))))
		__asm(push(f0), push((mstate.ebp+-24)), op(0x3d))
		__asm(push(f1), push((mstate.ebp+-20)), op(0x3d))
		i0 =  ((__xasm<int>(push((i1+52)), op(0x37))))
		i0 =  ((__xasm<int>(push((i0+16)), op(0x37))))
		mstate.esp -= 20
		i1 =  ((mstate.ebp+-64))
		__asm(push(i6), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i10), push((mstate.esp+8)), op(0x3c))
		__asm(push(i0), push((mstate.esp+12)), op(0x3c))
		__asm(push(i11), push((mstate.esp+16)), op(0x3c))
		mstate.esp -= 4;FSM__ZN12b2EPColliderC1EPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS5_.start()
	__asm(lbl("__ZN23b2LoopAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4__state5"))
		mstate.esp += 20
		mstate.esp -= 8
		__asm(push(i6), push(mstate.esp), op(0x3c))
		__asm(push(i9), push((mstate.esp+4)), op(0x3c))
		state = 6
		mstate.esp -= 4;FSM__ZN12b2EPCollider7CollideEP10b2Manifold.start()
		return
	__asm(lbl("__ZN23b2LoopAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4__state6"))
		mstate.esp += 8
	__asm(lbl("__ZN23b2LoopAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB190_17_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN23b2LoopAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4__errState"))
		throw("Invalid state in __ZN23b2LoopAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_")
	}
}



// Async
public const __ZN23b2LoopAndPolygonContactD1Ev:int = regFunc(FSM__ZN23b2LoopAndPolygonContactD1Ev.start)

public final class FSM__ZN23b2LoopAndPolygonContactD1Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN23b2LoopAndPolygonContactD1Ev = new FSM__ZN23b2LoopAndPolygonContactD1Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN23b2LoopAndPolygonContactD1Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN23b2LoopAndPolygonContactD1Ev_errState",
			"__ZN23b2LoopAndPolygonContactD1Ev_state0"))
	__asm(lbl("__ZN23b2LoopAndPolygonContactD1Ev_state0"))
	__asm(lbl("__ZN23b2LoopAndPolygonContactD1Ev__XprivateX__BB191_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV9b2Contact)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN23b2LoopAndPolygonContactD1Ev_errState"))
		throw("Invalid state in __ZN23b2LoopAndPolygonContactD1Ev")
	}
}



// Async
public const __ZN23b2LoopAndPolygonContactD0Ev:int = regFunc(FSM__ZN23b2LoopAndPolygonContactD0Ev.start)

public final class FSM__ZN23b2LoopAndPolygonContactD0Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN23b2LoopAndPolygonContactD0Ev = new FSM__ZN23b2LoopAndPolygonContactD0Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN23b2LoopAndPolygonContactD0Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN23b2LoopAndPolygonContactD0Ev_errState",
			"__ZN23b2LoopAndPolygonContactD0Ev_state0",
			"__ZN23b2LoopAndPolygonContactD0Ev_state1"))
	__asm(lbl("__ZN23b2LoopAndPolygonContactD0Ev_state0"))
	__asm(lbl("__ZN23b2LoopAndPolygonContactD0Ev__XprivateX__BB192_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV9b2Contact)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		__asm(push(i1==0), iftrue, target("__ZN23b2LoopAndPolygonContactD0Ev__XprivateX__BB192_2_F"))
	__asm(lbl("__ZN23b2LoopAndPolygonContactD0Ev__XprivateX__BB192_1_F"))
		i0 =  (0)
		mstate.esp -= 8
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN23b2LoopAndPolygonContactD0Ev_state1"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__ZN23b2LoopAndPolygonContactD0Ev__XprivateX__BB192_2_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN23b2LoopAndPolygonContactD0Ev_errState"))
		throw("Invalid state in __ZN23b2LoopAndPolygonContactD0Ev")
	}
}



// Sync
public const __ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_:int = regFunc(FSM__ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_.start)

public final class FSM__ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_ extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
		var i8:int, i9:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number
		var f8:Number, f9:Number, f10:Number, f11:Number, f12:Number, f13:Number

		__asm(label, lbl("__ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4__entry"))
	__asm(lbl("__ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB193_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (0)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i2 =  ((__xasm<int>(push((i1+52)), op(0x37))))
		i1 =  ((__xasm<int>(push((i1+48)), op(0x37))))
		i2 =  ((__xasm<int>(push((i2+16)), op(0x37))))
		i1 =  ((__xasm<int>(push((i1+16)), op(0x37))))
		i3 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		__asm(push(i0), push((i3+68)), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+20)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i0+8)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i2+16)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i0+12)), op(0x38))))
		f0 =  (f0 * f1)
		f1 =  (f2 * f1)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f2 =  ((__xasm<Number>(push(i0), op(0x38))))
		f0 =  f0/*fextend*/
		f3 =  ((__xasm<Number>(push((i0+16)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i2+20)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i0+20)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i0+4)), op(0x38))))
		f1 =  f1/*fextend*/
		f0 =  (f2 + f0)
		f1 =  (f6 + f1)
		f2 =  (f3 * f4)
		f3 =  (f5 * f4)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f2 =  f2/*fround*/
		f3 =  f3/*fround*/
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  (f0 + f2)
		f1 =  (f1 + f3)
		i0 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f2 =  ((__xasm<Number>(push((i0+4)), op(0x38))))
		f1 =  f1/*fextend*/
		f3 =  ((__xasm<Number>(push(i0), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f0 - f3)
		f1 =  (f1 - f2)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f2 =  ((__xasm<Number>(push((i0+16)), op(0x38))))
		f0 =  f0/*fextend*/
		f3 =  ((__xasm<Number>(push((i0+8)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i0+20)), op(0x38))))
		f1 =  f1/*fextend*/
		f5 =  ((__xasm<Number>(push((i0+12)), op(0x38))))
		f2 =  (f0 * f2)
		f0 =  (f0 * f3)
		f3 =  (f1 * f4)
		f1 =  (f1 * f5)
		f2 =  f2/*fround*/
		f0 =  f0/*fround*/
		f3 =  f3/*fround*/
		f1 =  f1/*fround*/
		f4 =  ((__xasm<Number>(push((i1+8)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i2+8)), op(0x38))))
		f3 =  f3/*fextend*/
		f2 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		i0 =  ((__xasm<int>(push((i1+152)), op(0x37))))
		f2 =  (f2 + f3)
		f0 =  (f0 + f1)
		f1 =  (f4 + f5)
		f2 =  f2/*fround*/
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		i4 =  (i2 + 20)
		i2 =  (i2 + 16)
		i5 =  (i3 + 68)
		i6 = i1
		__asm(push(i0>0), iftrue, target("__ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB193_2_F"))
	__asm(lbl("__ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB193_1_F"))
		i1 =  (1)
		i7 =  (0)
		__asm(jump, target("__ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB193_7_F"))
	__asm(lbl("__ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB193_2_F"))
		f3 =  (-3.40282e+38)
		f3 =  f3/*fround*/
		i7 =  (0)
		i8 = i7
	__asm(jump, target("__ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB193_3_F"), lbl("__ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB193_3_B"), label, lbl("__ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB193_3_F")); 
		f4 =  ((__xasm<Number>(push((i1+28)), op(0x38))))
		f5 =  f2/*fextend*/
		f6 =  ((__xasm<Number>(push((i1+24)), op(0x38))))
		f7 =  f0/*fextend*/
		f4 =  (f5 - f4)
		f5 =  (f7 - f6)
		f4 =  f4/*fround*/
		f5 =  f5/*fround*/
		f6 =  ((__xasm<Number>(push((i1+88)), op(0x38))))
		f7 =  ((__xasm<Number>(push((i1+92)), op(0x38))))
		f4 =  f4/*fextend*/
		f5 =  f5/*fextend*/
		f4 =  (f7 * f4)
		f5 =  (f6 * f5)
		f4 =  f4/*fround*/
		f5 =  f5/*fround*/
		f4 =  f4/*fextend*/
		f5 =  f5/*fextend*/
		f4 =  (f5 + f4)
		f4 =  f4/*fround*/
		f5 =  f1/*fextend*/
		f6 =  f4/*fextend*/
		__asm(push(f6>f5), iftrue, target("__ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB193_22_F"))
	__asm(lbl("__ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB193_4_F"))
		f3 =  f3/*fextend*/
		f4 =  f4/*fextend*/
		f5 =  ((f4>f3) ? f4 : f3)
		i7 =  ((f4>f3) ? i8 : i7)
		f3 =  f5/*fround*/
		i1 =  (i1 + 8)
		i8 =  (i8 + 1)
		__asm(push(i8>=i0), iftrue, target("__ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB193_6_F"))
	__asm(lbl("__ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB193_5_F"))
		__asm(jump, target("__ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB193_3_B"))
	__asm(lbl("__ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB193_6_F"))
		f4 =  (1.19209e-07)
		f4 =  f4/*fround*/
		f4 =  f4/*fextend*/
		f3 =  f3/*fextend*/
		i1 =  ((f3<f4) ? 1 : 0)
	__asm(lbl("__ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB193_7_F"))
		i8 =  (i7 + 1)
		i0 =  ((i8<i0) ? i8 : 0)
		i0 =  (i0 << 3)
		i8 =  (i6 + 24)
		i9 =  (i7 << 3)
		i0 =  (i8 + i0)
		i8 =  (i8 + i9)
		f3 =  ((__xasm<Number>(push(i8), op(0x38))))
		f4 =  ((__xasm<Number>(push((i8+4)), op(0x38))))
		f5 =  ((__xasm<Number>(push(i0), op(0x38))))
		f6 =  ((__xasm<Number>(push((i0+4)), op(0x38))))
		i0 =  (i1 ^ 1)
		i0 =  (i0 & 1)
		__asm(push(i0!=0), iftrue, target("__ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB193_9_F"))
	__asm(lbl("__ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB193_8_F"))
		i0 =  (1)
		__asm(push(i0), push(i5), op(0x3c))
		f0 =  f5/*fextend*/
		f1 =  f3/*fextend*/
		i5 =  (i7 << 3)
		f0 =  (f1 + f0)
		f1 =  (0.5)
		__asm(push(i0), push((i3+64)), op(0x3c))
		i5 =  (i6 + i5)
		f2 =  f6/*fextend*/
		f3 =  f4/*fextend*/
		f2 =  (f3 + f2)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f3 =  ((__xasm<Number>(push((i5+88)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i5+92)), op(0x38))))
		f2 =  f2/*fround*/
		f1 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		__asm(push(f3), push((i3+48)), op(0x3d))
		f2 =  f2/*fextend*/
		f0 =  (f0 * f1)
		f1 =  (f2 * f1)
		__asm(push(f4), push((i3+52)), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push((i3+56)), op(0x3d))
		f0 =  f1/*fround*/
		__asm(push(f0), push((i3+60)), op(0x3d))
		f0 =  ((__xasm<Number>(push(i2), op(0x38))))
		f1 =  ((__xasm<Number>(push(i4), op(0x38))))
		__asm(push(f0), push(i3), op(0x3d))
		__asm(push(f1), push((i3+4)), op(0x3d))
		i2 =  (0)
		__asm(push(i2), push((i3+16)), op(0x3c))
		__asm(jump, target("__ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB193_22_F"))
	__asm(lbl("__ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB193_9_F"))
		f7 =  (0)
		f8 =  f6/*fextend*/
		f9 =  f4/*fextend*/
		f10 =  f2/*fextend*/
		f11 =  f5/*fextend*/
		f12 =  f3/*fextend*/
		f13 =  f0/*fextend*/
		f8 =  (f8 - f9)
		f9 =  (f10 - f9)
		f10 =  (f11 - f12)
		f11 =  (f13 - f12)
		f8 =  f8/*fround*/
		f9 =  f9/*fround*/
		f10 =  f10/*fround*/
		f11 =  f11/*fround*/
		f8 =  f8/*fextend*/
		f12 =  f9/*fextend*/
		f10 =  f10/*fextend*/
		f13 =  f11/*fextend*/
		f8 =  (f12 * f8)
		f10 =  (f13 * f10)
		f8 =  f8/*fround*/
		f10 =  f10/*fround*/
		f8 =  f8/*fextend*/
		f10 =  f10/*fextend*/
		f8 =  (f10 + f8)
		f8 =  f8/*fround*/
		f7 =  f7/*fround*/
		f7 =  f7/*fextend*/
		f8 =  f8/*fextend*/
		__asm(push(f8>f7), iftrue, target("__ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB193_15_F"))
	__asm(lbl("__ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB193_10_F"))
		f0 =  f11/*fextend*/
		f2 =  f9/*fextend*/
		f0 =  (f0 * f0)
		f2 =  (f2 * f2)
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f1 =  f1/*fextend*/
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 + f2)
		f1 =  (f1 * f1)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f1 =  f1/*fextend*/
		f2 =  f0/*fextend*/
		__asm(push(f2>f1), iftrue, target("__ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB193_22_F"))
	__asm(lbl("__ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB193_11_F"))
		i6 =  (1)
		__asm(push(i6), push(i5), op(0x3c))
		f0 =  f0/*fextend*/
		__asm(push(i6), push((i3+64)), op(0x3c))
		f0 =  Math.sqrt(f0)
		__asm(push(f11), push((i3+48)), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f9), push((i3+52)), op(0x3d))
		f1 =  (1.19209e-07)
		i5 =  (i3 + 52)
		i6 =  (i3 + 48)
		f1 =  f1/*fround*/
		f1 =  f1/*fextend*/
		f2 =  f0/*fextend*/
		__asm(push(f2<f1), iftrue, target("__ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB193_13_F"))
	__asm(lbl("__ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB193_12_F"))
		f1 =  (1)
		f1 =  f1/*fround*/
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  (f1 / f0)
		f0 =  f0/*fround*/
		f1 =  f11/*fextend*/
		f0 =  f0/*fextend*/
		f1 =  (f1 * f0)
		f2 =  f9/*fextend*/
		f0 =  (f2 * f0)
		f1 =  f1/*fround*/
		__asm(push(f1), push(i6), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push(i5), op(0x3d))
	__asm(lbl("__ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB193_13_F"))
		i5 =  (0)
		__asm(push(f3), push((i3+56)), op(0x3d))
		__asm(push(f4), push((i3+60)), op(0x3d))
	__asm(jump, target("__ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB193_14_F"), lbl("__ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB193_14_B"), label, lbl("__ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB193_14_F")); 
		f0 =  ((__xasm<Number>(push(i2), op(0x38))))
		f1 =  ((__xasm<Number>(push(i4), op(0x38))))
		__asm(push(f0), push(i3), op(0x3d))
		__asm(push(f1), push((i3+4)), op(0x3d))
		__asm(push(i5), push((i3+16)), op(0x3c))
		__asm(jump, target("__ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB193_22_F"))
	__asm(lbl("__ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB193_15_F"))
		f7 =  (0)
		f8 =  f4/*fextend*/
		f9 =  f6/*fextend*/
		f10 =  f2/*fextend*/
		f11 =  f3/*fextend*/
		f12 =  f5/*fextend*/
		f13 =  f0/*fextend*/
		f8 =  (f8 - f9)
		f9 =  (f10 - f9)
		f10 =  (f11 - f12)
		f11 =  (f13 - f12)
		f8 =  f8/*fround*/
		f9 =  f9/*fround*/
		f10 =  f10/*fround*/
		f11 =  f11/*fround*/
		f8 =  f8/*fextend*/
		f12 =  f9/*fextend*/
		f10 =  f10/*fextend*/
		f13 =  f11/*fextend*/
		f8 =  (f12 * f8)
		f10 =  (f13 * f10)
		f8 =  f8/*fround*/
		f10 =  f10/*fround*/
		f8 =  f8/*fextend*/
		f10 =  f10/*fextend*/
		f8 =  (f10 + f8)
		f8 =  f8/*fround*/
		f7 =  f7/*fround*/
		f7 =  f7/*fextend*/
		f8 =  f8/*fextend*/
		__asm(push(f8>f7), iftrue, target("__ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB193_20_F"))
	__asm(lbl("__ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB193_16_F"))
		f0 =  f11/*fextend*/
		f2 =  f9/*fextend*/
		f0 =  (f0 * f0)
		f2 =  (f2 * f2)
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f1 =  f1/*fextend*/
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 + f2)
		f1 =  (f1 * f1)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f1 =  f1/*fextend*/
		f2 =  f0/*fextend*/
		__asm(push(f2>f1), iftrue, target("__ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB193_22_F"))
	__asm(lbl("__ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB193_17_F"))
		i6 =  (1)
		__asm(push(i6), push(i5), op(0x3c))
		f0 =  f0/*fextend*/
		__asm(push(i6), push((i3+64)), op(0x3c))
		f0 =  Math.sqrt(f0)
		__asm(push(f11), push((i3+48)), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f9), push((i3+52)), op(0x3d))
		f1 =  (1.19209e-07)
		i5 =  (i3 + 52)
		i6 =  (i3 + 48)
		f1 =  f1/*fround*/
		f1 =  f1/*fextend*/
		f2 =  f0/*fextend*/
		__asm(push(f2<f1), iftrue, target("__ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB193_19_F"))
	__asm(lbl("__ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB193_18_F"))
		f1 =  (1)
		f1 =  f1/*fround*/
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  (f1 / f0)
		f0 =  f0/*fround*/
		f1 =  f11/*fextend*/
		f0 =  f0/*fextend*/
		f1 =  (f1 * f0)
		f2 =  f9/*fextend*/
		f0 =  (f2 * f0)
		f1 =  f1/*fround*/
		__asm(push(f1), push(i6), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push(i5), op(0x3d))
	__asm(lbl("__ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB193_19_F"))
		i5 =  (0)
		__asm(push(f5), push((i3+56)), op(0x3d))
		__asm(push(f6), push((i3+60)), op(0x3d))
		__asm(jump, target("__ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB193_14_B"))
	__asm(lbl("__ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB193_20_F"))
		f7 =  (0.5)
		f6 =  f6/*fextend*/
		f4 =  f4/*fextend*/
		f5 =  f5/*fextend*/
		f3 =  f3/*fextend*/
		f4 =  (f4 + f6)
		f3 =  (f3 + f5)
		f4 =  f4/*fround*/
		f3 =  f3/*fround*/
		f5 =  f7/*fround*/
		f4 =  f4/*fextend*/
		f5 =  f5/*fextend*/
		f3 =  f3/*fextend*/
		f4 =  (f4 * f5)
		f3 =  (f3 * f5)
		f4 =  f4/*fround*/
		f3 =  f3/*fround*/
		f5 =  f4/*fextend*/
		f2 =  f2/*fextend*/
		f6 =  f3/*fextend*/
		f0 =  f0/*fextend*/
		f2 =  (f2 - f5)
		f0 =  (f0 - f6)
		i0 =  (i7 << 3)
		i0 =  (i6 + i0)
		f2 =  f2/*fround*/
		f0 =  f0/*fround*/
		f5 =  ((__xasm<Number>(push((i0+88)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i0+92)), op(0x38))))
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f2 =  (f2 * f6)
		f0 =  (f0 * f5)
		f2 =  f2/*fround*/
		f0 =  f0/*fround*/
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 + f2)
		i1 =  (i0 + 92)
		i0 =  (i0 + 88)
		f0 =  f0/*fround*/
		f1 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		__asm(push(f0>f1), iftrue, target("__ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB193_22_F"))
	__asm(lbl("__ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB193_21_F"))
		i6 =  (1)
		__asm(push(i6), push(i5), op(0x3c))
		__asm(push(i6), push((i3+64)), op(0x3c))
		f0 =  ((__xasm<Number>(push(i0), op(0x38))))
		f1 =  ((__xasm<Number>(push(i1), op(0x38))))
		__asm(push(f0), push((i3+48)), op(0x3d))
		__asm(push(f1), push((i3+52)), op(0x3d))
		__asm(push(f3), push((i3+56)), op(0x3d))
		__asm(push(f4), push((i3+60)), op(0x3d))
		f0 =  ((__xasm<Number>(push(i2), op(0x38))))
		f1 =  ((__xasm<Number>(push(i4), op(0x38))))
		__asm(push(f0), push(i3), op(0x3d))
		__asm(push(f1), push((i3+4)), op(0x3d))
		i0 =  (0)
		__asm(push(i0), push((i3+16)), op(0x3c))
	__asm(lbl("__ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB193_22_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Async
public const __ZN25b2PolygonAndCircleContactD1Ev:int = regFunc(FSM__ZN25b2PolygonAndCircleContactD1Ev.start)

public final class FSM__ZN25b2PolygonAndCircleContactD1Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN25b2PolygonAndCircleContactD1Ev = new FSM__ZN25b2PolygonAndCircleContactD1Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN25b2PolygonAndCircleContactD1Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN25b2PolygonAndCircleContactD1Ev_errState",
			"__ZN25b2PolygonAndCircleContactD1Ev_state0"))
	__asm(lbl("__ZN25b2PolygonAndCircleContactD1Ev_state0"))
	__asm(lbl("__ZN25b2PolygonAndCircleContactD1Ev__XprivateX__BB194_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV9b2Contact)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN25b2PolygonAndCircleContactD1Ev_errState"))
		throw("Invalid state in __ZN25b2PolygonAndCircleContactD1Ev")
	}
}



// Async
public const __ZN25b2PolygonAndCircleContactD0Ev:int = regFunc(FSM__ZN25b2PolygonAndCircleContactD0Ev.start)

public final class FSM__ZN25b2PolygonAndCircleContactD0Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN25b2PolygonAndCircleContactD0Ev = new FSM__ZN25b2PolygonAndCircleContactD0Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN25b2PolygonAndCircleContactD0Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN25b2PolygonAndCircleContactD0Ev_errState",
			"__ZN25b2PolygonAndCircleContactD0Ev_state0",
			"__ZN25b2PolygonAndCircleContactD0Ev_state1"))
	__asm(lbl("__ZN25b2PolygonAndCircleContactD0Ev_state0"))
	__asm(lbl("__ZN25b2PolygonAndCircleContactD0Ev__XprivateX__BB195_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV9b2Contact)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		__asm(push(i1==0), iftrue, target("__ZN25b2PolygonAndCircleContactD0Ev__XprivateX__BB195_2_F"))
	__asm(lbl("__ZN25b2PolygonAndCircleContactD0Ev__XprivateX__BB195_1_F"))
		i0 =  (0)
		mstate.esp -= 8
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN25b2PolygonAndCircleContactD0Ev_state1"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__ZN25b2PolygonAndCircleContactD0Ev__XprivateX__BB195_2_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN25b2PolygonAndCircleContactD0Ev_errState"))
		throw("Invalid state in __ZN25b2PolygonAndCircleContactD0Ev")
	}
}



// Async
public const __ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_:int = regFunc(FSM__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_.start)

public final class FSM__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_ extends Machine {

	public static function start():void {
			var result:FSM__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_ = new FSM__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
	public var i8:int, i9:int, i10:int, i11:int

	public static const intRegCount:int = 12
	public var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number
	public var f8:Number, f9:Number, f10:Number, f11:Number, f12:Number, f13:Number, f14:Number, f15:Number
	public var f16:Number, f17:Number, f18:Number, f19:Number, f20:Number, f21:Number, f22:Number, f23:Number
	public var f24:Number, f25:Number, f26:Number, f27:Number, f28:Number, f29:Number, f30:Number
	public static const NumberRegCount:int = 31
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4__entry"))
		__asm(push(state), switchjump(
			"__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4__errState",
			"__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4__state0",
			"__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4__state1",
			"__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4__state2",
			"__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4__state3",
			"__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4__state4",
			"__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4__state5",
			"__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4__state6"))
	__asm(lbl("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4__state0"))
	__asm(lbl("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 96
		i0 =  (0)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i2 =  ((__xasm<int>(push((i1+52)), op(0x37))))
		i1 =  ((__xasm<int>(push((i1+48)), op(0x37))))
		i2 =  ((__xasm<int>(push((i2+16)), op(0x37))))
		i1 =  ((__xasm<int>(push((i1+16)), op(0x37))))
		i3 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		__asm(push(i0), push((i3+68)), op(0x3c))
		f0 =  ((__xasm<Number>(push((i1+8)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i2+8)), op(0x38))))
		__asm(push(i0), push((mstate.ebp+-4)), op(0x3c))
		mstate.esp -= 20
		i0 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i4 =  ((__xasm<int>(push((mstate.ebp+20)), op(0x37))))
		i5 =  ((mstate.ebp+-4))
		__asm(push(i5), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i0), push((mstate.esp+8)), op(0x3c))
		__asm(push(i2), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5_.start()
		return
	__asm(lbl("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4__state1"))
		f2 = mstate.st0
		f0 =  (f0 + f1)
		mstate.esp += 20
		f0 =  f0/*fround*/
		i5 =  (i3 + 68)
		i6 =  ((mstate.ebp+-96))
		f1 =  f0/*fextend*/
		f3 =  f2/*fextend*/
		__asm(push(f3>f1), iftrue, target("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_31_F"))
	__asm(lbl("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_1_F"))
		i7 =  (0)
		__asm(push(i7), push((mstate.ebp+-8)), op(0x3c))
		mstate.esp -= 20
		i7 =  ((mstate.ebp+-8))
		__asm(push(i7), push(mstate.esp), op(0x3c))
		__asm(push(i2), push((mstate.esp+4)), op(0x3c))
		__asm(push(i4), push((mstate.esp+8)), op(0x3c))
		__asm(push(i1), push((mstate.esp+12)), op(0x3c))
		__asm(push(i0), push((mstate.esp+16)), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5_.start()
		return
	__asm(lbl("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4__state2"))
		f1 = mstate.st0
		mstate.esp += 20
		f3 =  f0/*fextend*/
		f4 =  f1/*fextend*/
		__asm(push(f4>f3), iftrue, target("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_31_F"))
	__asm(lbl("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_2_F"))
		f3 =  (0.98)
		f3 =  f3/*fround*/
		f3 =  f3/*fextend*/
		f2 =  f2/*fextend*/
		f2 =  (f2 * f3)
		f3 =  (0.001)
		f2 =  f2/*fround*/
		f3 =  f3/*fround*/
		f3 =  f3/*fextend*/
		f2 =  f2/*fextend*/
		f2 =  (f2 + f3)
		f2 =  f2/*fround*/
		f1 =  f1/*fextend*/
		f2 =  f2/*fextend*/
		__asm(push(f2>=f1), iftrue, target("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_4_F"))
	__asm(lbl("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_3_F"))
		i7 =  (2)
		f1 =  ((__xasm<Number>(push(i4), op(0x38))))
		f2 =  ((__xasm<Number>(push((i4+4)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i4+8)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i4+12)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i4+16)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i4+20)), op(0x38))))
		f7 =  ((__xasm<Number>(push(i0), op(0x38))))
		f8 =  ((__xasm<Number>(push((i0+4)), op(0x38))))
		f9 =  ((__xasm<Number>(push((i0+8)), op(0x38))))
		f10 =  ((__xasm<Number>(push((i0+12)), op(0x38))))
		f11 =  ((__xasm<Number>(push((i0+16)), op(0x38))))
		f12 =  ((__xasm<Number>(push((i0+20)), op(0x38))))
		i0 =  ((__xasm<int>(push((mstate.ebp+-8)), op(0x37))))
		__asm(push(i7), push((i3+64)), op(0x3c))
		i4 =  (1)
		i7 = i2
		i2 = i4
		__asm(jump, target("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_5_F"))
	__asm(lbl("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_4_F"))
		i7 =  (1)
		f1 =  ((__xasm<Number>(push(i0), op(0x38))))
		f2 =  ((__xasm<Number>(push((i0+4)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i0+8)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i0+12)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i0+16)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i0+20)), op(0x38))))
		f7 =  ((__xasm<Number>(push(i4), op(0x38))))
		f8 =  ((__xasm<Number>(push((i4+4)), op(0x38))))
		f9 =  ((__xasm<Number>(push((i4+8)), op(0x38))))
		f10 =  ((__xasm<Number>(push((i4+12)), op(0x38))))
		f11 =  ((__xasm<Number>(push((i4+16)), op(0x38))))
		f12 =  ((__xasm<Number>(push((i4+20)), op(0x38))))
		i0 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		__asm(push(i7), push((i3+64)), op(0x3c))
		i4 =  (0)
		i7 = i1
		i1 = i2
		i2 = i4
	__asm(lbl("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_5_F"))
		i4 = i7
		i7 =  ((__xasm<int>(push((i4+152)), op(0x37))))
		i8 =  ((__xasm<int>(push((i1+152)), op(0x37))))
		i9 =  (i4 + 152)
		i10 = i1
		__asm(push(i7<=i0), iftrue, target("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_7_F"))
	__asm(lbl("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_6_F"))
		__asm(push(i0>-1), iftrue, target("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_8_F"))
	__asm(lbl("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_7_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str43250)
		i3 =  (__ZZ18b2FindIncidentEdgeP12b2ClipVertexPK14b2PolygonShapeRK11b2TransformiS3_S6_E8__func__)
		i4 =  (__2E_str58265)
		i5 =  (153)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 3
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4__state3"))
		mstate.esp += 24
		state = 4
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4__state4"))
	__asm(lbl("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_8_F"))
		i7 =  (i0 << 3)
		i7 =  (i4 + i7)
		f13 =  ((__xasm<Number>(push((i7+88)), op(0x38))))
		f14 =  ((__xasm<Number>(push((i7+92)), op(0x38))))
		f15 =  f4/*fextend*/
		f16 =  f3/*fextend*/
		f17 =  f6/*fextend*/
		f18 =  f5/*fextend*/
		f15 =  (f15 * f13)
		f13 =  (f16 * f13)
		f16 =  (f17 * f14)
		f14 =  (f18 * f14)
		f15 =  f15/*fround*/
		f13 =  f13/*fround*/
		f16 =  f16/*fround*/
		f14 =  f14/*fround*/
		f16 =  f16/*fextend*/
		f15 =  f15/*fextend*/
		f14 =  f14/*fextend*/
		f13 =  f13/*fextend*/
		f15 =  (f15 + f16)
		f13 =  (f13 + f14)
		f14 =  f15/*fround*/
		f13 =  f13/*fround*/
		f15 =  f12/*fextend*/
		f14 =  f14/*fextend*/
		f16 =  f10/*fextend*/
		f17 =  f11/*fextend*/
		f13 =  f13/*fextend*/
		f18 =  f9/*fextend*/
		f15 =  (f14 * f15)
		f14 =  (f14 * f16)
		f16 =  (f13 * f17)
		f13 =  (f13 * f18)
		f15 =  f15/*fround*/
		f14 =  f14/*fround*/
		f16 =  f16/*fround*/
		f13 =  f13/*fround*/
		f15 =  f15/*fextend*/
		f16 =  f16/*fextend*/
		f14 =  f14/*fextend*/
		f13 =  f13/*fextend*/
		f15 =  (f16 + f15)
		f13 =  (f13 + f14)
		f14 =  f15/*fround*/
		f13 =  f13/*fround*/
		__asm(push(i8>0), iftrue, target("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_10_F"))
	__asm(lbl("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_9_F"))
		i10 =  (0)
		__asm(jump, target("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_14_F"))
	__asm(lbl("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_10_F"))
		f15 =  (3.40282e+38)
		f15 =  f15/*fround*/
		i7 =  (0)
		i11 = i7
	__asm(jump, target("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_11_F"), lbl("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_11_B"), label, lbl("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_11_F")); 
		f16 =  ((__xasm<Number>(push((i10+88)), op(0x38))))
		f17 =  ((__xasm<Number>(push((i10+92)), op(0x38))))
		f18 =  f13/*fextend*/
		f19 =  f14/*fextend*/
		f16 =  (f18 * f16)
		f17 =  (f19 * f17)
		f16 =  f16/*fround*/
		f17 =  f17/*fround*/
		f17 =  f17/*fextend*/
		f16 =  f16/*fextend*/
		f16 =  (f16 + f17)
		f16 =  f16/*fround*/
		f15 =  f15/*fextend*/
		f16 =  f16/*fextend*/
		f17 =  ((f16<f15) ? f16 : f15)
		i7 =  ((f16<f15) ? i11 : i7)
		f15 =  f17/*fround*/
		i10 =  (i10 + 8)
		i11 =  (i11 + 1)
		__asm(push(i11==i8), iftrue, target("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_13_F"))
	__asm(lbl("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_12_F"))
		__asm(jump, target("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_11_B"))
	__asm(lbl("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_13_F"))
		i10 = i7
	__asm(lbl("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_14_F"))
		i7 = i10
		i10 =  (1)
		i11 =  (i7 << 3)
		i1 =  (i1 + 24)
		i11 =  (i1 + i11)
		f13 =  ((__xasm<Number>(push(i11), op(0x38))))
		f14 =  f9/*fextend*/
		f15 =  (f14 * f13)
		f16 =  f10/*fextend*/
		f15 =  f15/*fround*/
		f13 =  (f16 * f13)
		f17 =  ((__xasm<Number>(push((i11+4)), op(0x38))))
		f13 =  f13/*fround*/
		f18 =  f11/*fextend*/
		f15 =  f15/*fextend*/
		f19 =  f7/*fextend*/
		f15 =  (f19 + f15)
		f20 =  (f18 * f17)
		f21 =  f12/*fextend*/
		f13 =  f13/*fextend*/
		f22 =  f8/*fextend*/
		f15 =  f15/*fround*/
		f13 =  (f22 + f13)
		f20 =  f20/*fround*/
		f17 =  (f21 * f17)
		f13 =  f13/*fround*/
		f17 =  f17/*fround*/
		f20 =  f20/*fextend*/
		f15 =  f15/*fextend*/
		f15 =  (f15 + f20)
		f17 =  f17/*fextend*/
		f13 =  f13/*fextend*/
		f13 =  (f13 + f17)
		f15 =  f15/*fround*/
		__asm(push(f15), push((mstate.ebp+-32)), op(0x3d))
		f13 =  f13/*fround*/
		__asm(push(f13), push((mstate.ebp+-28)), op(0x3d))
		__asm(push(i0), push((mstate.ebp+-24)), op(0x3a))
		i11 =  (i7 + 1)
		__asm(push(i7), push((mstate.ebp+-23)), op(0x3a))
		i7 =  ((i11<i8) ? i11 : 0)
		i8 =  (i7 << 3)
		__asm(push(i10), push((mstate.ebp+-22)), op(0x3a))
		i11 =  (0)
		__asm(push(i11), push((mstate.ebp+-21)), op(0x3a))
		i1 =  (i1 + i8)
		f13 =  ((__xasm<Number>(push(i1), op(0x38))))
		f14 =  (f14 * f13)
		f14 =  f14/*fround*/
		f13 =  (f16 * f13)
		f15 =  ((__xasm<Number>(push((i1+4)), op(0x38))))
		f14 =  f14/*fextend*/
		f13 =  f13/*fround*/
		f14 =  (f19 + f14)
		f13 =  f13/*fextend*/
		f16 =  (f18 * f15)
		f14 =  f14/*fround*/
		f13 =  (f22 + f13)
		f16 =  f16/*fround*/
		f15 =  (f21 * f15)
		f13 =  f13/*fround*/
		f15 =  f15/*fround*/
		f16 =  f16/*fextend*/
		f14 =  f14/*fextend*/
		f14 =  (f14 + f16)
		f15 =  f15/*fextend*/
		f13 =  f13/*fextend*/
		f13 =  (f13 + f15)
		f14 =  f14/*fround*/
		__asm(push(f14), push((mstate.ebp+-20)), op(0x3d))
		f13 =  f13/*fround*/
		__asm(push(f13), push((mstate.ebp+-16)), op(0x3d))
		__asm(push(i0), push((mstate.ebp+-12)), op(0x3a))
		__asm(push(i7), push((mstate.ebp+-11)), op(0x3a))
		__asm(push(i10), push((mstate.ebp+-10)), op(0x3a))
		__asm(push(i11), push((mstate.ebp+-9)), op(0x3a))
		i1 =  ((__xasm<int>(push(i9), op(0x37))))
		i7 =  (i0 + 1)
		i1 =  ((i7<i1) ? i7 : 0)
		i7 =  (i1 << 3)
		i4 =  (i4 + 24)
		i8 =  (i0 << 3)
		i7 =  (i4 + i7)
		i4 =  (i4 + i8)
		f13 =  ((__xasm<Number>(push(i4), op(0x38))))
		f14 =  ((__xasm<Number>(push((i4+4)), op(0x38))))
		f15 =  ((__xasm<Number>(push(i7), op(0x38))))
		f16 =  ((__xasm<Number>(push((i7+4)), op(0x38))))
		f17 =  f13/*fextend*/
		f18 =  f15/*fextend*/
		f19 =  f14/*fextend*/
		f20 =  f16/*fextend*/
		f17 =  (f18 - f17)
		f18 =  (f20 - f19)
		f17 =  f17/*fround*/
		f18 =  f18/*fround*/
		f19 =  f17/*fextend*/
		f20 =  f18/*fextend*/
		f19 =  (f19 * f19)
		f20 =  (f20 * f20)
		f19 =  f19/*fround*/
		f20 =  f20/*fround*/
		f20 =  f20/*fextend*/
		f19 =  f19/*fextend*/
		f19 =  (f19 + f20)
		f19 =  f19/*fround*/
		f19 =  f19/*fextend*/
		f19 =  Math.sqrt(f19)
		f19 =  f19/*fround*/
		f20 =  (1.19209e-07)
		f20 =  f20/*fround*/
		f20 =  f20/*fextend*/
		f21 =  f19/*fextend*/
		__asm(push(f21>=f20), iftrue, target("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_16_F"))
	__asm(lbl("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_15_F"))
		__asm(jump, target("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_17_F"))
	__asm(lbl("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_16_F"))
		f20 =  (1)
		f20 =  f20/*fround*/
		f19 =  f19/*fextend*/
		f20 =  f20/*fextend*/
		f19 =  (f20 / f19)
		f19 =  f19/*fround*/
		f17 =  f17/*fextend*/
		f19 =  f19/*fextend*/
		f18 =  f18/*fextend*/
		f17 =  (f17 * f19)
		f18 =  (f18 * f19)
		f17 =  f17/*fround*/
		f18 =  f18/*fround*/
	__asm(lbl("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_17_F"))
		f19 =  (0.5)
		f13 =  f13/*fextend*/
		f20 =  f4/*fextend*/
		f21 =  f3/*fextend*/
		f22 =  (f20 * f13)
		f23 =  (f21 * f13)
		f22 =  f22/*fround*/
		f23 =  f23/*fround*/
		f17 =  f17/*fextend*/
		f22 =  f22/*fextend*/
		f24 =  f2/*fextend*/
		f14 =  f14/*fextend*/
		f25 =  f6/*fextend*/
		f26 =  f18/*fextend*/
		f27 =  f5/*fextend*/
		f23 =  f23/*fextend*/
		f28 =  f1/*fextend*/
		f29 =  (f25 * f14)
		f22 =  (f24 + f22)
		f24 =  (f27 * f14)
		f23 =  (f28 + f23)
		f25 =  (f25 * f26)
		f20 =  (f20 * f17)
		f26 =  (f27 * f26)
		f21 =  (f21 * f17)
		f27 =  f29/*fround*/
		f22 =  f22/*fround*/
		f24 =  f24/*fround*/
		f23 =  f23/*fround*/
		f25 =  f25/*fround*/
		f20 =  f20/*fround*/
		f26 =  f26/*fround*/
		f21 =  f21/*fround*/
		f27 =  f27/*fextend*/
		f22 =  f22/*fextend*/
		f24 =  f24/*fextend*/
		f23 =  f23/*fextend*/
		f25 =  f25/*fextend*/
		f20 =  f20/*fextend*/
		f26 =  f26/*fextend*/
		f21 =  f21/*fextend*/
		f22 =  (f22 + f27)
		f23 =  (f23 + f24)
		f20 =  (f20 + f25)
		f21 =  (f21 + f26)
		f22 =  f22/*fround*/
		f23 =  f23/*fround*/
		f20 =  f20/*fround*/
		f21 =  f21/*fround*/
		f24 =  f20/*fextend*/
		f22 =  f22/*fextend*/
		f23 =  f23/*fextend*/
		f25 =  f21/*fextend*/
		f26 =  (f24 * f22)
		f27 =  (f25 * f23)
		f26 =  f26/*fround*/
		f27 =  f27/*fround*/
		f26 =  f26/*fextend*/
		f27 =  f27/*fextend*/
		f26 =  (f27 + f26)
		f26 =  f26/*fround*/
		f25 =  -f25
		f25 =  f25/*fround*/
		f26 =  f26/*fextend*/
		f27 =  f0/*fextend*/
		f28 =  f25/*fextend*/
		f29 =  f16/*fextend*/
		f30 =  f15/*fextend*/
		f26 =  (f27 - f26)
		f27 =  -f24
		mstate.esp -= 24
		f23 =  (f24 * f23)
		f22 =  (f28 * f22)
		f14 =  (f14 + f29)
		f13 =  (f13 + f30)
		f24 =  f26/*fround*/
		f26 =  f27/*fround*/
		i4 =  ((mstate.ebp+-32))
		i7 =  ((mstate.ebp+-64))
		f23 =  f23/*fround*/
		f22 =  f22/*fround*/
		f14 =  f14/*fround*/
		f13 =  f13/*fround*/
		f19 =  f19/*fround*/
		__asm(push(i7), push(mstate.esp), op(0x3c))
		__asm(push(i4), push((mstate.esp+4)), op(0x3c))
		__asm(push(f25), push((mstate.esp+8)), op(0x3d))
		__asm(push(f26), push((mstate.esp+12)), op(0x3d))
		__asm(push(f24), push((mstate.esp+16)), op(0x3d))
		__asm(push(i0), push((mstate.esp+20)), op(0x3c))
		f22 =  f22/*fextend*/
		f23 =  f23/*fextend*/
		f14 =  f14/*fextend*/
		f19 =  f19/*fextend*/
		f13 =  f13/*fextend*/
		f17 =  -f17
		f22 =  (f23 + f22)
		f14 =  (f14 * f19)
		f13 =  (f13 * f19)
		mstate.esp -= 4;FSM__Z19b2ClipSegmentToLineP12b2ClipVertexPKS_RK6b2Vec2fi342.start()
	__asm(lbl("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4__state5"))
		i0 = mstate.eax
		mstate.esp += 24
		f17 =  f17/*fround*/
		f19 =  f22/*fround*/
		f14 =  f14/*fround*/
		f13 =  f13/*fround*/
		__asm(push(i0<2), iftrue, target("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_31_F"))
	__asm(lbl("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_18_F"))
		i0 =  ((mstate.ebp+-96))
		f4 =  f4/*fextend*/
		f15 =  f15/*fextend*/
		f3 =  f3/*fextend*/
		f4 =  (f4 * f15)
		f3 =  (f3 * f15)
		f4 =  f4/*fround*/
		f3 =  f3/*fround*/
		f6 =  f6/*fextend*/
		f15 =  f16/*fextend*/
		f5 =  f5/*fextend*/
		f4 =  f4/*fextend*/
		f2 =  f2/*fextend*/
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f6 =  (f6 * f15)
		f2 =  (f2 + f4)
		f4 =  (f5 * f15)
		f1 =  (f1 + f3)
		f3 =  f6/*fround*/
		f2 =  f2/*fround*/
		f4 =  f4/*fround*/
		f1 =  f1/*fround*/
		f3 =  f3/*fextend*/
		f2 =  f2/*fextend*/
		f4 =  f4/*fextend*/
		f1 =  f1/*fextend*/
		f2 =  (f2 + f3)
		f1 =  (f1 + f4)
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		f2 =  f2/*fextend*/
		f3 =  f20/*fextend*/
		f1 =  f1/*fextend*/
		f4 =  f21/*fextend*/
		f2 =  (f3 * f2)
		f1 =  (f4 * f1)
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		f2 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		f1 =  (f1 + f2)
		f1 =  f1/*fround*/
		f2 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		f1 =  (f1 + f2)
		mstate.esp -= 24
		f1 =  f1/*fround*/
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i7), push((mstate.esp+4)), op(0x3c))
		__asm(push(f21), push((mstate.esp+8)), op(0x3d))
		__asm(push(f20), push((mstate.esp+12)), op(0x3d))
		__asm(push(f1), push((mstate.esp+16)), op(0x3d))
		__asm(push(i1), push((mstate.esp+20)), op(0x3c))
		mstate.esp -= 4;FSM__Z19b2ClipSegmentToLineP12b2ClipVertexPKS_RK6b2Vec2fi342.start()
	__asm(lbl("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4__state6"))
		i0 = mstate.eax
		mstate.esp += 24
		__asm(push(i0<2), iftrue, target("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_31_F"))
	__asm(lbl("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_19_F"))
		__asm(push(f18), push((i3+48)), op(0x3d))
		__asm(push(f17), push((i3+52)), op(0x3d))
		i0 =  (i2 ^ 1)
		__asm(push(f13), push((i3+56)), op(0x3d))
		__asm(push(f14), push((i3+60)), op(0x3d))
		i0 =  (i0 & 1)
		__asm(push(i0!=0), iftrue, target("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_26_F"))
	__asm(lbl("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_20_F"))
		i0 =  (0)
		i1 = i6
		i2 = i0
	__asm(jump, target("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_21_F"), lbl("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_21_B"), label, lbl("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_21_F")); 
		f1 =  ((__xasm<Number>(push(i1), op(0x38))))
		f2 =  ((__xasm<Number>(push((i1+4)), op(0x38))))
		f3 =  f1/*fextend*/
		f4 =  f20/*fextend*/
		f5 =  f2/*fextend*/
		f6 =  f25/*fextend*/
		f3 =  (f4 * f3)
		f4 =  (f6 * f5)
		f3 =  f3/*fround*/
		f4 =  f4/*fround*/
		f4 =  f4/*fextend*/
		f3 =  f3/*fextend*/
		f3 =  (f3 + f4)
		f3 =  f3/*fround*/
		f4 =  f19/*fextend*/
		f3 =  f3/*fextend*/
		f3 =  (f3 - f4)
		f3 =  f3/*fround*/
		f4 =  f0/*fextend*/
		f3 =  f3/*fextend*/
		__asm(push(f3<=f4), iftrue, target("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_25_F"))
	__asm(jump, target("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_22_F"), lbl("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_22_B"), label, lbl("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_22_F")); 
		i1 =  (i1 + 12)
		i2 =  (i2 + 1)
		__asm(push(i2==2), iftrue, target("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_24_F"))
	__asm(lbl("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_23_F"))
		__asm(jump, target("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_21_B"))
	__asm(lbl("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_24_F"))
		__asm(jump, target("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_30_F"))
	__asm(lbl("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_25_F"))
		f3 =  f8/*fextend*/
		f2 =  f2/*fextend*/
		f4 =  f7/*fextend*/
		f1 =  f1/*fextend*/
		f2 =  (f2 - f3)
		f1 =  (f1 - f4)
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		f3 =  f10/*fextend*/
		f2 =  f2/*fextend*/
		f4 =  f9/*fextend*/
		f1 =  f1/*fextend*/
		f5 =  f12/*fextend*/
		f3 =  (f2 * f3)
		f6 =  f11/*fextend*/
		f4 =  (f1 * f4)
		f2 =  (f2 * f5)
		f3 =  f3/*fround*/
		f1 =  (f1 * f6)
		f4 =  f4/*fround*/
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		f3 =  f3/*fextend*/
		f4 =  f4/*fextend*/
		f3 =  (f4 + f3)
		f2 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		i4 =  (i0 * 24)
		f1 =  (f1 + f2)
		f2 =  f3/*fround*/
		i4 =  (i3 + i4)
		__asm(push(f2), push(i4), op(0x3d))
		f1 =  f1/*fround*/
		__asm(push(f1), push((i4+4)), op(0x3d))
		i6 =  ((__xasm<int>(push((i1+8)), op(0x37))))
		__asm(push(i6), push((i4+16)), op(0x3c))
		i6 =  ((__xasm<int>(push((i4+16)), op(0x35))))
		i7 =  ((__xasm<int>(push((i4+17)), op(0x35))))
		i8 =  ((__xasm<int>(push((i4+18)), op(0x35))))
		i9 =  ((__xasm<int>(push((i4+19)), op(0x35))))
		__asm(push(i7), push((i4+16)), op(0x3a))
		__asm(push(i6), push((i4+17)), op(0x3a))
		__asm(push(i9), push((i4+18)), op(0x3a))
		__asm(push(i8), push((i4+19)), op(0x3a))
		i0 =  (i0 + 1)
		__asm(jump, target("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_22_B"))
	__asm(lbl("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_26_F"))
		f1 =  ((__xasm<Number>(push((mstate.ebp+-96)), op(0x38))))
		f2 =  ((__xasm<Number>(push((mstate.ebp+-92)), op(0x38))))
		f3 =  f1/*fextend*/
		f4 =  f20/*fextend*/
		f5 =  f2/*fextend*/
		f6 =  f25/*fextend*/
		f3 =  (f4 * f3)
		f4 =  (f6 * f5)
		f3 =  f3/*fround*/
		f4 =  f4/*fround*/
		f4 =  f4/*fextend*/
		f3 =  f3/*fextend*/
		f3 =  (f3 + f4)
		f3 =  f3/*fround*/
		f4 =  f19/*fextend*/
		f3 =  f3/*fextend*/
		f3 =  (f3 - f4)
		f3 =  f3/*fround*/
		f4 =  f0/*fextend*/
		f3 =  f3/*fextend*/
		__asm(push(f3<=f4), iftrue, target("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_28_F"))
	__asm(lbl("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_27_F"))
		i0 =  (0)
		__asm(jump, target("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_29_F"))
	__asm(lbl("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_28_F"))
		i0 =  (1)
		f3 =  f8/*fextend*/
		f2 =  f2/*fextend*/
		f4 =  f7/*fextend*/
		f1 =  f1/*fextend*/
		f2 =  (f2 - f3)
		f1 =  (f1 - f4)
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		f3 =  f10/*fextend*/
		f2 =  f2/*fextend*/
		f4 =  f9/*fextend*/
		f1 =  f1/*fextend*/
		f5 =  f12/*fextend*/
		f3 =  (f2 * f3)
		f6 =  f11/*fextend*/
		f4 =  (f1 * f4)
		f2 =  (f2 * f5)
		f3 =  f3/*fround*/
		f1 =  (f1 * f6)
		f4 =  f4/*fround*/
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		f3 =  f3/*fextend*/
		f4 =  f4/*fextend*/
		f3 =  (f4 + f3)
		f2 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		f1 =  (f1 + f2)
		f2 =  f3/*fround*/
		__asm(push(f2), push(i3), op(0x3d))
		f1 =  f1/*fround*/
		__asm(push(f1), push((i3+4)), op(0x3d))
		i1 =  ((__xasm<int>(push((mstate.ebp+-88)), op(0x37))))
		__asm(push(i1), push((i3+16)), op(0x3c))
	__asm(lbl("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_29_F"))
		f1 =  ((__xasm<Number>(push((mstate.ebp+-84)), op(0x38))))
		f2 =  ((__xasm<Number>(push((mstate.ebp+-80)), op(0x38))))
		f3 =  f1/*fextend*/
		f4 =  f20/*fextend*/
		f5 =  f2/*fextend*/
		f6 =  f25/*fextend*/
		f3 =  (f4 * f3)
		f4 =  (f6 * f5)
		f3 =  f3/*fround*/
		f4 =  f4/*fround*/
		f4 =  f4/*fextend*/
		f3 =  f3/*fextend*/
		f3 =  (f3 + f4)
		f3 =  f3/*fround*/
		f4 =  f19/*fextend*/
		f3 =  f3/*fextend*/
		f3 =  (f3 - f4)
		f3 =  f3/*fround*/
		f0 =  f0/*fextend*/
		f3 =  f3/*fextend*/
		__asm(push(f3<=f0), iftrue, target("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_32_F"))
	__asm(jump, target("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_30_F"), lbl("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_30_B"), label, lbl("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_30_F")); 
		__asm(push(i0), push(i5), op(0x3c))
		__asm(jump, target("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_31_F"))
	__asm(lbl("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_31_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_32_F"))
		f0 =  f8/*fextend*/
		f2 =  f2/*fextend*/
		f3 =  f7/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  (f2 - f0)
		f1 =  (f1 - f3)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f2 =  f10/*fextend*/
		f0 =  f0/*fextend*/
		f3 =  f9/*fextend*/
		f1 =  f1/*fextend*/
		f4 =  f12/*fextend*/
		f2 =  (f0 * f2)
		f5 =  f11/*fextend*/
		f3 =  (f1 * f3)
		f0 =  (f0 * f4)
		f2 =  f2/*fround*/
		f1 =  (f1 * f5)
		f3 =  f3/*fround*/
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f2 =  f2/*fextend*/
		f3 =  f3/*fextend*/
		f2 =  (f3 + f2)
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		i1 =  (i0 * 24)
		f0 =  (f1 + f0)
		f1 =  f2/*fround*/
		i1 =  (i3 + i1)
		__asm(push(f1), push(i1), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push((i1+4)), op(0x3d))
		i2 =  ((__xasm<int>(push((mstate.ebp+-76)), op(0x37))))
		__asm(push(i2), push((i1+16)), op(0x3c))
		i0 =  (i0 + 1)
		__asm(jump, target("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4___XprivateX__BB196_30_B"))
	__asm(lbl("__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4__errState"))
		throw("Invalid state in __ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_")
	}
}



// Async
public const __ZN16b2PolygonContactD1Ev:int = regFunc(FSM__ZN16b2PolygonContactD1Ev.start)

public final class FSM__ZN16b2PolygonContactD1Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN16b2PolygonContactD1Ev = new FSM__ZN16b2PolygonContactD1Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN16b2PolygonContactD1Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN16b2PolygonContactD1Ev_errState",
			"__ZN16b2PolygonContactD1Ev_state0"))
	__asm(lbl("__ZN16b2PolygonContactD1Ev_state0"))
	__asm(lbl("__ZN16b2PolygonContactD1Ev__XprivateX__BB197_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV9b2Contact)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN16b2PolygonContactD1Ev_errState"))
		throw("Invalid state in __ZN16b2PolygonContactD1Ev")
	}
}



// Async
public const __ZN16b2PolygonContactD0Ev:int = regFunc(FSM__ZN16b2PolygonContactD0Ev.start)

public final class FSM__ZN16b2PolygonContactD0Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN16b2PolygonContactD0Ev = new FSM__ZN16b2PolygonContactD0Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN16b2PolygonContactD0Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN16b2PolygonContactD0Ev_errState",
			"__ZN16b2PolygonContactD0Ev_state0",
			"__ZN16b2PolygonContactD0Ev_state1"))
	__asm(lbl("__ZN16b2PolygonContactD0Ev_state0"))
	__asm(lbl("__ZN16b2PolygonContactD0Ev__XprivateX__BB198_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV9b2Contact)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		__asm(push(i1==0), iftrue, target("__ZN16b2PolygonContactD0Ev__XprivateX__BB198_2_F"))
	__asm(lbl("__ZN16b2PolygonContactD0Ev__XprivateX__BB198_1_F"))
		i0 =  (0)
		mstate.esp -= 8
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN16b2PolygonContactD0Ev_state1"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__ZN16b2PolygonContactD0Ev__XprivateX__BB198_2_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN16b2PolygonContactD0Ev_errState"))
		throw("Invalid state in __ZN16b2PolygonContactD0Ev")
	}
}



// Sync
public const __ZNK15b2DistanceJoint10GetAnchorAEv:int = regFunc(FSM__ZNK15b2DistanceJoint10GetAnchorAEv.start)

public final class FSM__ZNK15b2DistanceJoint10GetAnchorAEv extends Machine {

	public static function start():void {
		var i0:int, i1:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number

		__asm(label, lbl("__ZNK15b2DistanceJoint10GetAnchorAEv_entry"))
	__asm(lbl("__ZNK15b2DistanceJoint10GetAnchorAEv__XprivateX__BB199_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 8
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+48)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i1+20)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i0+96)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i1+24)), op(0x38))))
		f2 =  (f2 * f1)
		f0 =  (f0 * f1)
		f1 =  f2/*fround*/
		f0 =  f0/*fround*/
		f2 =  ((__xasm<Number>(push((i1+12)), op(0x38))))
		f0 =  f0/*fextend*/
		f3 =  ((__xasm<Number>(push((i1+28)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i0+100)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i1+32)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i1+16)), op(0x38))))
		f1 =  f1/*fextend*/
		f0 =  (f2 + f0)
		f2 =  (f5 * f4)
		f1 =  (f6 + f1)
		f3 =  (f3 * f4)
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		f3 =  f3/*fextend*/
		f0 =  f0/*fextend*/
		f2 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  (f0 + f3)
		f1 =  (f1 + f2)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		__asm(push(f0), push((mstate.ebp+-8)), op(0x3d))
		__asm(push(f1), push((mstate.ebp+-4)), op(0x3d))
		i0 =  ((__xasm<int>(push((mstate.ebp+-8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		mstate.edx = i1
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZNK15b2DistanceJoint10GetAnchorBEv:int = regFunc(FSM__ZNK15b2DistanceJoint10GetAnchorBEv.start)

public final class FSM__ZNK15b2DistanceJoint10GetAnchorBEv extends Machine {

	public static function start():void {
		var i0:int, i1:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number

		__asm(label, lbl("__ZNK15b2DistanceJoint10GetAnchorBEv_entry"))
	__asm(lbl("__ZNK15b2DistanceJoint10GetAnchorBEv__XprivateX__BB200_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 8
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+52)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i1+20)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i0+104)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i1+24)), op(0x38))))
		f2 =  (f2 * f1)
		f0 =  (f0 * f1)
		f1 =  f2/*fround*/
		f0 =  f0/*fround*/
		f2 =  ((__xasm<Number>(push((i1+12)), op(0x38))))
		f0 =  f0/*fextend*/
		f3 =  ((__xasm<Number>(push((i1+28)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i0+108)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i1+32)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i1+16)), op(0x38))))
		f1 =  f1/*fextend*/
		f0 =  (f2 + f0)
		f2 =  (f5 * f4)
		f1 =  (f6 + f1)
		f3 =  (f3 * f4)
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		f3 =  f3/*fextend*/
		f0 =  f0/*fextend*/
		f2 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  (f0 + f3)
		f1 =  (f1 + f2)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		__asm(push(f0), push((mstate.ebp+-8)), op(0x3d))
		__asm(push(f1), push((mstate.ebp+-4)), op(0x3d))
		i0 =  ((__xasm<int>(push((mstate.ebp+-8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		mstate.edx = i1
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZNK15b2DistanceJoint16GetReactionForceEf:int = regFunc(FSM__ZNK15b2DistanceJoint16GetReactionForceEf.start)

public final class FSM__ZNK15b2DistanceJoint16GetReactionForceEf extends Machine {

	public static function start():void {
		var i0:int, i1:int

		var f0:Number, f1:Number, f2:Number

		__asm(label, lbl("__ZNK15b2DistanceJoint16GetReactionForceEf_entry"))
	__asm(lbl("__ZNK15b2DistanceJoint16GetReactionForceEf__XprivateX__BB201_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 8
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i0+136)), op(0x38))))
		f1 =  ((__xasm<Number>(push((mstate.ebp+12)), op(0x38))))
		f0 =  (f0 * f1)
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push((i0+112)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i0+116)), op(0x38))))
		f0 =  f0/*fextend*/
		f2 =  (f2 * f0)
		f0 =  (f1 * f0)
		f1 =  f2/*fround*/
		f0 =  f0/*fround*/
		__asm(push(f0), push((mstate.ebp+-4)), op(0x3d))
		__asm(push(f1), push((mstate.ebp+-8)), op(0x3d))
		i0 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+-8)), op(0x37))))
		mstate.edx = i1
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZNK15b2DistanceJoint17GetReactionTorqueEf:int = regFunc(FSM__ZNK15b2DistanceJoint17GetReactionTorqueEf.start)

public final class FSM__ZNK15b2DistanceJoint17GetReactionTorqueEf extends Machine {

	public static function start():void {

		var f0:Number

		__asm(label, lbl("__ZNK15b2DistanceJoint17GetReactionTorqueEf_entry"))
	__asm(lbl("__ZNK15b2DistanceJoint17GetReactionTorqueEf__XprivateX__BB202_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		f0 =  (0)
		f0 =  f0/*fround*/
		mstate.st0 = f0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Async
public const __ZN15b2DistanceJointD1Ev:int = regFunc(FSM__ZN15b2DistanceJointD1Ev.start)

public final class FSM__ZN15b2DistanceJointD1Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN15b2DistanceJointD1Ev = new FSM__ZN15b2DistanceJointD1Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN15b2DistanceJointD1Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN15b2DistanceJointD1Ev_errState",
			"__ZN15b2DistanceJointD1Ev_state0"))
	__asm(lbl("__ZN15b2DistanceJointD1Ev_state0"))
	__asm(lbl("__ZN15b2DistanceJointD1Ev__XprivateX__BB203_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV7b2Joint)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN15b2DistanceJointD1Ev_errState"))
		throw("Invalid state in __ZN15b2DistanceJointD1Ev")
	}
}



// Async
public const __ZN15b2DistanceJointD0Ev:int = regFunc(FSM__ZN15b2DistanceJointD0Ev.start)

public final class FSM__ZN15b2DistanceJointD0Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN15b2DistanceJointD0Ev = new FSM__ZN15b2DistanceJointD0Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN15b2DistanceJointD0Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN15b2DistanceJointD0Ev_errState",
			"__ZN15b2DistanceJointD0Ev_state0",
			"__ZN15b2DistanceJointD0Ev_state1"))
	__asm(lbl("__ZN15b2DistanceJointD0Ev_state0"))
	__asm(lbl("__ZN15b2DistanceJointD0Ev__XprivateX__BB204_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV7b2Joint)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		__asm(push(i1==0), iftrue, target("__ZN15b2DistanceJointD0Ev__XprivateX__BB204_2_F"))
	__asm(lbl("__ZN15b2DistanceJointD0Ev__XprivateX__BB204_1_F"))
		i0 =  (0)
		mstate.esp -= 8
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN15b2DistanceJointD0Ev_state1"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__ZN15b2DistanceJointD0Ev__XprivateX__BB204_2_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN15b2DistanceJointD0Ev_errState"))
		throw("Invalid state in __ZN15b2DistanceJointD0Ev")
	}
}



// Sync
public const __ZN15b2DistanceJoint23InitVelocityConstraintsERK10b2TimeStep:int = regFunc(FSM__ZN15b2DistanceJoint23InitVelocityConstraintsERK10b2TimeStep.start)

public final class FSM__ZN15b2DistanceJoint23InitVelocityConstraintsERK10b2TimeStep extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
		var i8:int, i9:int, i10:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number
		var f8:Number, f9:Number, f10:Number, f11:Number, f12:Number, f13:Number

		__asm(label, lbl("__ZN15b2DistanceJoint23InitVelocityConstraintsERK10b2TimeStep_entry"))
	__asm(lbl("__ZN15b2DistanceJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB205_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+52)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i0+108)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i1+40)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i0+104)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i1+36)), op(0x38))))
		f2 =  (f2 - f3)
		f0 =  (f0 - f1)
		f1 =  f2/*fround*/
		f0 =  f0/*fround*/
		f2 =  ((__xasm<Number>(push((i1+24)), op(0x38))))
		f1 =  f1/*fextend*/
		f3 =  ((__xasm<Number>(push((i1+20)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i1+32)), op(0x38))))
		f0 =  f0/*fextend*/
		f5 =  ((__xasm<Number>(push((i1+28)), op(0x38))))
		f2 =  (f2 * f1)
		f1 =  (f3 * f1)
		f3 =  (f4 * f0)
		f0 =  (f5 * f0)
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		f0 =  f0/*fround*/
		i2 =  ((__xasm<int>(push((i0+48)), op(0x37))))
		f4 =  ((__xasm<Number>(push((i0+100)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i2+40)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i0+96)), op(0x38))))
		f7 =  ((__xasm<Number>(push((i2+36)), op(0x38))))
		f3 =  f3/*fextend*/
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		f6 =  (f6 - f7)
		f4 =  (f4 - f5)
		f2 =  (f2 + f3)
		f0 =  (f1 + f0)
		f1 =  f6/*fround*/
		f3 =  f4/*fround*/
		f2 =  f2/*fround*/
		f0 =  f0/*fround*/
		f4 =  ((__xasm<Number>(push((i2+24)), op(0x38))))
		f1 =  f1/*fextend*/
		f5 =  ((__xasm<Number>(push((i2+20)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i2+32)), op(0x38))))
		f3 =  f3/*fextend*/
		f7 =  ((__xasm<Number>(push((i2+28)), op(0x38))))
		f8 =  ((__xasm<Number>(push((i1+56)), op(0x38))))
		f9 =  f2/*fextend*/
		f10 =  ((__xasm<Number>(push((i1+52)), op(0x38))))
		f11 =  f0/*fextend*/
		f4 =  (f4 * f1)
		f1 =  (f5 * f1)
		f5 =  (f6 * f3)
		f3 =  (f7 * f3)
		f6 =  (f8 + f9)
		f7 =  (f10 + f11)
		f4 =  f4/*fround*/
		f1 =  f1/*fround*/
		f5 =  f5/*fround*/
		f3 =  f3/*fround*/
		f6 =  f6/*fround*/
		f7 =  f7/*fround*/
		f8 =  ((__xasm<Number>(push((i2+56)), op(0x38))))
		f9 =  ((__xasm<Number>(push((i2+52)), op(0x38))))
		f6 =  f6/*fextend*/
		f7 =  f7/*fextend*/
		f5 =  f5/*fextend*/
		f4 =  f4/*fextend*/
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f4 =  (f4 + f5)
		f1 =  (f1 + f3)
		f3 =  (f6 - f8)
		f5 =  (f7 - f9)
		f4 =  f4/*fround*/
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		f5 =  f5/*fround*/
		f6 =  f4/*fextend*/
		f3 =  f3/*fextend*/
		f7 =  f1/*fextend*/
		f5 =  f5/*fextend*/
		f3 =  (f3 - f6)
		f5 =  (f5 - f7)
		f3 =  f3/*fround*/
		f5 =  f5/*fround*/
		f6 =  f3/*fextend*/
		f7 =  f5/*fextend*/
		f6 =  (f6 * f6)
		f7 =  (f7 * f7)
		f6 =  f6/*fround*/
		f7 =  f7/*fround*/
		f6 =  f6/*fextend*/
		f7 =  f7/*fextend*/
		f6 =  (f7 + f6)
		f6 =  f6/*fround*/
		__asm(push(f5), push((i0+112)), op(0x3d))
		f6 =  f6/*fextend*/
		__asm(push(f3), push((i0+116)), op(0x3d))
		f6 =  Math.sqrt(f6)
		f7 =  ((__xasm<Number>(push(_b2_linearSlop), op(0x38))))
		f6 =  f6/*fround*/
		i3 =  (i0 + 116)
		i4 =  (i0 + 112)
		i5 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		f8 =  f6/*fextend*/
		__asm(push(f8<=f7), iftrue, target("__ZN15b2DistanceJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB205_2_F"))
	__asm(lbl("__ZN15b2DistanceJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB205_1_F"))
		f7 =  (1)
		f7 =  f7/*fround*/
		f8 =  f6/*fextend*/
		f7 =  f7/*fextend*/
		f7 =  (f7 / f8)
		f7 =  f7/*fround*/
		f5 =  f5/*fextend*/
		f7 =  f7/*fextend*/
		f5 =  (f5 * f7)
		f3 =  f3/*fextend*/
		f3 =  (f3 * f7)
		f5 =  f5/*fround*/
		__asm(push(f5), push(i4), op(0x3d))
		f3 =  f3/*fround*/
		f7 = f3
		__asm(jump, target("__ZN15b2DistanceJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB205_3_F"))
	__asm(lbl("__ZN15b2DistanceJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB205_2_F"))
		f3 =  (0)
		i6 =  (0)
		__asm(push(i6), push(i4), op(0x3c))
		f3 =  f3/*fround*/
		f7 = f3
		f5 = f3
	__asm(lbl("__ZN15b2DistanceJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB205_3_F"))
		f8 =  (0)
		f9 =  f1/*fextend*/
		f10 =  f3/*fextend*/
		f11 =  f4/*fextend*/
		f12 =  f5/*fextend*/
		f9 =  (f9 * f10)
		f11 =  (f11 * f12)
		f9 =  f9/*fround*/
		f11 =  f11/*fround*/
		f11 =  f11/*fextend*/
		f9 =  f9/*fextend*/
		f9 =  (f9 - f11)
		__asm(push(f7), push(i3), op(0x3d))
		f7 =  f9/*fround*/
		f9 =  f0/*fextend*/
		f11 =  f2/*fextend*/
		f13 =  ((__xasm<Number>(push((i2+136)), op(0x38))))
		f7 =  f7/*fextend*/
		f13 =  (f13 * f7)
		f9 =  (f9 * f10)
		f10 =  (f11 * f12)
		f11 =  f13/*fround*/
		f9 =  f9/*fround*/
		f10 =  f10/*fround*/
		f11 =  f11/*fextend*/
		f10 =  f10/*fextend*/
		f9 =  f9/*fextend*/
		f7 =  (f11 * f7)
		f9 =  (f9 - f10)
		f7 =  f7/*fround*/
		f9 =  f9/*fround*/
		f10 =  ((__xasm<Number>(push((i2+128)), op(0x38))))
		f7 =  f7/*fextend*/
		f11 =  ((__xasm<Number>(push((i1+136)), op(0x38))))
		f9 =  f9/*fextend*/
		f7 =  (f10 + f7)
		f10 =  (f11 * f9)
		f7 =  f7/*fround*/
		f10 =  f10/*fround*/
		f11 =  ((__xasm<Number>(push((i1+128)), op(0x38))))
		f7 =  f7/*fextend*/
		f10 =  f10/*fextend*/
		f7 =  (f7 + f11)
		f9 =  (f10 * f9)
		f7 =  f7/*fround*/
		f9 =  f9/*fround*/
		f9 =  f9/*fextend*/
		f7 =  f7/*fextend*/
		f7 =  (f7 + f9)
		f7 =  f7/*fround*/
		i3 =  (i1 + 136)
		i4 =  (i1 + 128)
		i6 =  (i2 + 136)
		i7 =  (i2 + 128)
		f8 =  f8/*fround*/
		f8 =  f8/*fextend*/
		f9 =  f7/*fextend*/
		__asm(push(f9!=f8), iftrue, target("__ZN15b2DistanceJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB205_5_F"))
	__asm(lbl("__ZN15b2DistanceJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB205_4_F"))
		f8 =  (0)
		f8 =  f8/*fround*/
		__asm(jump, target("__ZN15b2DistanceJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB205_6_F"))
	__asm(lbl("__ZN15b2DistanceJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB205_5_F"))
		f8 =  (1)
		f8 =  f8/*fround*/
		f9 =  f7/*fextend*/
		f8 =  f8/*fextend*/
		f8 =  (f8 / f9)
		f8 =  f8/*fround*/
	__asm(lbl("__ZN15b2DistanceJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB205_6_F"))
		f9 =  (0)
		__asm(push(f8), push((i0+140)), op(0x3d))
		f10 =  ((__xasm<Number>(push((i0+120)), op(0x38))))
		i8 =  (i0 + 140)
		f9 =  f9/*fround*/
		f9 =  f9/*fextend*/
		f11 =  f10/*fextend*/
		__asm(push(f11<=f9), iftrue, target("__ZN15b2DistanceJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB205_14_F"))
	__asm(lbl("__ZN15b2DistanceJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB205_7_F"))
		f9 =  (6.28319)
		f9 =  f9/*fround*/
		f9 =  f9/*fextend*/
		f10 =  f10/*fextend*/
		f9 =  (f10 * f9)
		f9 =  f9/*fround*/
		f8 =  f8/*fextend*/
		f9 =  f9/*fextend*/
		f10 =  (f8 * f9)
		f8 =  (f8 + f8)
		f10 =  f10/*fround*/
		f8 =  f8/*fround*/
		f10 =  f10/*fextend*/
		f11 =  ((__xasm<Number>(push((i0+124)), op(0x38))))
		f8 =  f8/*fextend*/
		f8 =  (f8 * f11)
		f10 =  (f10 * f9)
		f8 =  f8/*fround*/
		f10 =  f10/*fround*/
		f8 =  f8/*fextend*/
		f11 =  ((__xasm<Number>(push(i5), op(0x38))))
		f12 =  f10/*fextend*/
		f8 =  (f8 * f9)
		f9 =  (f11 * f12)
		f8 =  f8/*fround*/
		f9 =  f9/*fround*/
		f8 =  f8/*fextend*/
		f9 =  f9/*fextend*/
		f8 =  (f9 + f8)
		f8 =  f8/*fround*/
		f8 =  f8/*fextend*/
		f9 =  ((__xasm<Number>(push((i0+144)), op(0x38))))
		f6 =  f6/*fextend*/
		f8 =  (f11 * f8)
		f6 =  (f6 - f9)
		f8 =  f8/*fround*/
		__asm(push(f8), push((i0+128)), op(0x3d))
		f6 =  f6/*fround*/
		f9 =  (0)
		i9 =  (i0 + 128)
		f9 =  f9/*fround*/
		i10 = i5
		f9 =  f9/*fextend*/
		f11 =  f8/*fextend*/
		__asm(push(f11!=f9), iftrue, target("__ZN15b2DistanceJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB205_9_F"))
	__asm(lbl("__ZN15b2DistanceJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB205_8_F"))
		f8 =  (0)
		f8 =  f8/*fround*/
		__asm(jump, target("__ZN15b2DistanceJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB205_10_F"))
	__asm(lbl("__ZN15b2DistanceJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB205_9_F"))
		f9 =  (1)
		f9 =  f9/*fround*/
		f8 =  f8/*fextend*/
		f9 =  f9/*fextend*/
		f8 =  (f9 / f8)
		f8 =  f8/*fround*/
	__asm(lbl("__ZN15b2DistanceJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB205_10_F"))
		f9 =  (0)
		__asm(push(f8), push(i9), op(0x3d))
		f11 =  ((__xasm<Number>(push(i10), op(0x38))))
		f6 =  f6/*fextend*/
		f6 =  (f11 * f6)
		f6 =  f6/*fround*/
		f10 =  f10/*fextend*/
		f6 =  f6/*fextend*/
		f6 =  (f6 * f10)
		f6 =  f6/*fround*/
		f6 =  f6/*fextend*/
		f8 =  f8/*fextend*/
		f6 =  (f6 * f8)
		f7 =  f7/*fextend*/
		f7 =  (f8 + f7)
		f6 =  f6/*fround*/
		f7 =  f7/*fround*/
		__asm(push(f6), push((i0+132)), op(0x3d))
		__asm(push(f7), push(i8), op(0x3d))
		f6 =  f9/*fround*/
		f6 =  f6/*fextend*/
		f8 =  f7/*fextend*/
		__asm(push(f8!=f6), iftrue, target("__ZN15b2DistanceJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB205_12_F"))
	__asm(lbl("__ZN15b2DistanceJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB205_11_F"))
		f6 =  (0)
		f7 =  f6/*fround*/
		__asm(jump, target("__ZN15b2DistanceJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB205_13_F"))
	__asm(lbl("__ZN15b2DistanceJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB205_12_F"))
		f6 =  (1)
		f6 =  f6/*fround*/
		f7 =  f7/*fextend*/
		f6 =  f6/*fextend*/
		f6 =  (f6 / f7)
		f7 =  f6/*fround*/
	__asm(lbl("__ZN15b2DistanceJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB205_13_F"))
		f6 = f7
		__asm(push(f6), push(i8), op(0x3d))
	__asm(lbl("__ZN15b2DistanceJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB205_14_F"))
		i8 =  ((__xasm<int>(push((i5+20)), op(0x35))))
		i0 =  (i0 + 136)
		__asm(push(i8==0), iftrue, target("__ZN15b2DistanceJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB205_16_F"))
	__asm(lbl("__ZN15b2DistanceJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB205_15_F"))
		f6 =  ((__xasm<Number>(push(i0), op(0x38))))
		f7 =  ((__xasm<Number>(push((i5+8)), op(0x38))))
		f6 =  (f6 * f7)
		f6 =  f6/*fround*/
		f7 =  f6/*fextend*/
		f5 =  f5/*fextend*/
		f5 =  (f5 * f7)
		f5 =  f5/*fround*/
		__asm(push(f6), push(i0), op(0x3d))
		f6 =  ((__xasm<Number>(push(i7), op(0x38))))
		f5 =  f5/*fextend*/
		f8 =  (f5 * f6)
		f3 =  f3/*fextend*/
		f8 =  f8/*fround*/
		f3 =  (f3 * f7)
		f7 =  ((__xasm<Number>(push((i2+72)), op(0x38))))
		f8 =  f8/*fextend*/
		f3 =  f3/*fround*/
		f7 =  (f7 - f8)
		f3 =  f3/*fextend*/
		f6 =  (f3 * f6)
		f1 =  f1/*fextend*/
		f4 =  f4/*fextend*/
		f7 =  f7/*fround*/
		__asm(push(f7), push((i2+72)), op(0x3d))
		f6 =  f6/*fround*/
		f1 =  (f1 * f3)
		f4 =  (f4 * f5)
		f1 =  f1/*fround*/
		f4 =  f4/*fround*/
		f7 =  ((__xasm<Number>(push((i2+76)), op(0x38))))
		f6 =  f6/*fextend*/
		f6 =  (f7 - f6)
		f4 =  f4/*fextend*/
		f1 =  f1/*fextend*/
		f6 =  f6/*fround*/
		f1 =  (f1 - f4)
		__asm(push(f6), push((i2+76)), op(0x3d))
		f1 =  f1/*fround*/
		f4 =  ((__xasm<Number>(push(i6), op(0x38))))
		f1 =  f1/*fextend*/
		f1 =  (f4 * f1)
		f1 =  f1/*fround*/
		f4 =  ((__xasm<Number>(push((i2+80)), op(0x38))))
		f1 =  f1/*fextend*/
		f1 =  (f4 - f1)
		f1 =  f1/*fround*/
		__asm(push(f1), push((i2+80)), op(0x3d))
		f1 =  ((__xasm<Number>(push(i4), op(0x38))))
		f4 =  (f5 * f1)
		f4 =  f4/*fround*/
		f6 =  ((__xasm<Number>(push((i1+72)), op(0x38))))
		f4 =  f4/*fextend*/
		f4 =  (f6 + f4)
		f1 =  (f3 * f1)
		f0 =  f0/*fextend*/
		f2 =  f2/*fextend*/
		f4 =  f4/*fround*/
		__asm(push(f4), push((i1+72)), op(0x3d))
		f1 =  f1/*fround*/
		f0 =  (f0 * f3)
		f2 =  (f2 * f5)
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f3 =  ((__xasm<Number>(push((i1+76)), op(0x38))))
		f1 =  f1/*fextend*/
		f1 =  (f3 + f1)
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f1 =  f1/*fround*/
		f0 =  (f0 - f2)
		__asm(push(f1), push((i1+76)), op(0x3d))
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push(i3), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f1 * f0)
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push((i1+80)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f1 + f0)
		f0 =  f0/*fround*/
		__asm(push(f0), push((i1+80)), op(0x3d))
		__asm(jump, target("__ZN15b2DistanceJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB205_17_F"))
	__asm(lbl("__ZN15b2DistanceJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB205_16_F"))
		i1 =  (0)
		__asm(push(i1), push(i0), op(0x3c))
	__asm(lbl("__ZN15b2DistanceJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB205_17_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZN15b2DistanceJoint24SolveVelocityConstraintsERK10b2TimeStep:int = regFunc(FSM__ZN15b2DistanceJoint24SolveVelocityConstraintsERK10b2TimeStep.start)

public final class FSM__ZN15b2DistanceJoint24SolveVelocityConstraintsERK10b2TimeStep extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number
		var f8:Number, f9:Number, f10:Number, f11:Number

		__asm(label, lbl("__ZN15b2DistanceJoint24SolveVelocityConstraintsERK10b2TimeStep_entry"))
	__asm(lbl("__ZN15b2DistanceJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB206_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+48)), op(0x37))))
		i2 =  ((__xasm<int>(push((i0+52)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i0+100)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i1+40)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i0+96)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i1+36)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i0+108)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i2+40)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i0+104)), op(0x38))))
		f7 =  ((__xasm<Number>(push((i2+36)), op(0x38))))
		f2 =  (f2 - f3)
		f0 =  (f0 - f1)
		f1 =  (f6 - f7)
		f3 =  (f4 - f5)
		f2 =  f2/*fround*/
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		f4 =  ((__xasm<Number>(push((i1+24)), op(0x38))))
		f2 =  f2/*fextend*/
		f5 =  ((__xasm<Number>(push((i1+20)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i1+32)), op(0x38))))
		f0 =  f0/*fextend*/
		f7 =  ((__xasm<Number>(push((i1+28)), op(0x38))))
		f8 =  ((__xasm<Number>(push((i2+24)), op(0x38))))
		f1 =  f1/*fextend*/
		f9 =  ((__xasm<Number>(push((i2+20)), op(0x38))))
		f10 =  ((__xasm<Number>(push((i2+32)), op(0x38))))
		f3 =  f3/*fextend*/
		f11 =  ((__xasm<Number>(push((i2+28)), op(0x38))))
		f4 =  (f4 * f2)
		f2 =  (f5 * f2)
		f5 =  (f6 * f0)
		f0 =  (f7 * f0)
		f6 =  (f8 * f1)
		f1 =  (f9 * f1)
		f7 =  (f10 * f3)
		f3 =  (f11 * f3)
		f4 =  f4/*fround*/
		f2 =  f2/*fround*/
		f5 =  f5/*fround*/
		f0 =  f0/*fround*/
		f6 =  f6/*fround*/
		f1 =  f1/*fround*/
		f7 =  f7/*fround*/
		f3 =  f3/*fround*/
		f5 =  f5/*fextend*/
		f4 =  f4/*fextend*/
		f0 =  f0/*fextend*/
		f2 =  f2/*fextend*/
		f7 =  f7/*fextend*/
		f6 =  f6/*fextend*/
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f4 =  (f4 + f5)
		f0 =  (f2 + f0)
		f2 =  (f6 + f7)
		f1 =  (f1 + f3)
		f3 =  f4/*fround*/
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		f4 =  ((__xasm<Number>(push((i1+80)), op(0x38))))
		f3 =  f3/*fextend*/
		f0 =  f0/*fextend*/
		f5 =  ((__xasm<Number>(push((i2+80)), op(0x38))))
		f2 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		f6 =  (f3 * f4)
		f4 =  (f0 * f4)
		f7 =  (f2 * f5)
		f5 =  (f1 * f5)
		f6 =  f6/*fround*/
		f4 =  f4/*fround*/
		f7 =  f7/*fround*/
		f5 =  f5/*fround*/
		f8 =  ((__xasm<Number>(push((i1+76)), op(0x38))))
		f4 =  f4/*fextend*/
		f9 =  ((__xasm<Number>(push((i1+72)), op(0x38))))
		f6 =  f6/*fextend*/
		f10 =  ((__xasm<Number>(push((i2+76)), op(0x38))))
		f5 =  f5/*fextend*/
		f11 =  ((__xasm<Number>(push((i2+72)), op(0x38))))
		f7 =  f7/*fextend*/
		f6 =  (f9 - f6)
		f4 =  (f8 + f4)
		f7 =  (f11 - f7)
		f5 =  (f10 + f5)
		f6 =  f6/*fround*/
		f4 =  f4/*fround*/
		f7 =  f7/*fround*/
		f5 =  f5/*fround*/
		f6 =  f6/*fextend*/
		f7 =  f7/*fextend*/
		f4 =  f4/*fextend*/
		f5 =  f5/*fextend*/
		f6 =  (f7 - f6)
		f4 =  (f5 - f4)
		f5 =  f6/*fround*/
		f4 =  f4/*fround*/
		f6 =  ((__xasm<Number>(push((i0+112)), op(0x38))))
		f5 =  f5/*fextend*/
		f7 =  ((__xasm<Number>(push((i0+116)), op(0x38))))
		f4 =  f4/*fextend*/
		f5 =  (f6 * f5)
		f4 =  (f7 * f4)
		f5 =  f5/*fround*/
		f4 =  f4/*fround*/
		f4 =  f4/*fextend*/
		f5 =  f5/*fextend*/
		f4 =  (f5 + f4)
		f4 =  f4/*fround*/
		f5 =  ((__xasm<Number>(push((i0+132)), op(0x38))))
		f4 =  f4/*fextend*/
		f8 =  ((__xasm<Number>(push((i0+128)), op(0x38))))
		f9 =  ((__xasm<Number>(push((i0+136)), op(0x38))))
		f4 =  (f5 + f4)
		f5 =  (f8 * f9)
		f4 =  f4/*fround*/
		f5 =  f5/*fround*/
		f8 =  ((__xasm<Number>(push((i0+140)), op(0x38))))
		f5 =  f5/*fextend*/
		f4 =  f4/*fextend*/
		f4 =  (f4 + f5)
		f5 =  -f8
		f4 =  f4/*fround*/
		f5 =  f5/*fround*/
		f5 =  f5/*fextend*/
		f4 =  f4/*fextend*/
		f4 =  (f4 * f5)
		f4 =  f4/*fround*/
		f4 =  f4/*fextend*/
		f5 =  (f9 + f4)
		f6 =  (f6 * f4)
		f5 =  f5/*fround*/
		__asm(push(f5), push((i0+136)), op(0x3d))
		f5 =  f6/*fround*/
		f5 =  f5/*fextend*/
		f6 =  ((__xasm<Number>(push((i1+128)), op(0x38))))
		f8 =  (f5 * f6)
		f8 =  f8/*fround*/
		f4 =  (f7 * f4)
		f7 =  ((__xasm<Number>(push((i1+72)), op(0x38))))
		f8 =  f8/*fextend*/
		f4 =  f4/*fround*/
		f4 =  f4/*fextend*/
		f7 =  (f7 - f8)
		f6 =  (f4 * f6)
		f7 =  f7/*fround*/
		__asm(push(f7), push((i1+72)), op(0x3d))
		f6 =  f6/*fround*/
		f0 =  (f0 * f4)
		f3 =  (f3 * f5)
		f0 =  f0/*fround*/
		f3 =  f3/*fround*/
		f7 =  ((__xasm<Number>(push((i1+76)), op(0x38))))
		f6 =  f6/*fextend*/
		f6 =  (f7 - f6)
		f3 =  f3/*fextend*/
		f0 =  f0/*fextend*/
		f6 =  f6/*fround*/
		f0 =  (f0 - f3)
		__asm(push(f6), push((i1+76)), op(0x3d))
		f0 =  f0/*fround*/
		f3 =  ((__xasm<Number>(push((i1+136)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f3 * f0)
		f0 =  f0/*fround*/
		f3 =  ((__xasm<Number>(push((i1+80)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f3 - f0)
		f0 =  f0/*fround*/
		__asm(push(f0), push((i1+80)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i2+128)), op(0x38))))
		f3 =  (f5 * f0)
		f3 =  f3/*fround*/
		f6 =  ((__xasm<Number>(push((i2+72)), op(0x38))))
		f3 =  f3/*fextend*/
		f3 =  (f6 + f3)
		f0 =  (f4 * f0)
		f3 =  f3/*fround*/
		__asm(push(f3), push((i2+72)), op(0x3d))
		f0 =  f0/*fround*/
		f1 =  (f1 * f4)
		f2 =  (f2 * f5)
		f1 =  f1/*fround*/
		f2 =  f2/*fround*/
		f3 =  ((__xasm<Number>(push((i2+76)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f3 + f0)
		f2 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  f0/*fround*/
		f1 =  (f1 - f2)
		__asm(push(f0), push((i2+76)), op(0x3d))
		f0 =  f1/*fround*/
		f1 =  ((__xasm<Number>(push((i2+136)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f1 * f0)
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push((i2+80)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f1 + f0)
		f0 =  f0/*fround*/
		__asm(push(f0), push((i2+80)), op(0x3d))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZN15b2DistanceJoint24SolvePositionConstraintsEf:int = regFunc(FSM__ZN15b2DistanceJoint24SolvePositionConstraintsEf.start)

public final class FSM__ZN15b2DistanceJoint24SolvePositionConstraintsEf extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
		var i8:int, i9:int, i10:int, i11:int, i12:int, i13:int, i14:int, i15:int
		var i16:int, i17:int, i18:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number
		var f8:Number, f9:Number, f10:Number, f11:Number, f12:Number

		__asm(label, lbl("__ZN15b2DistanceJoint24SolvePositionConstraintsEf_entry"))
	__asm(lbl("__ZN15b2DistanceJoint24SolvePositionConstraintsEf__XprivateX__BB207_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		f0 =  (0)
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push((i0+120)), op(0x38))))
		f0 =  f0/*fextend*/
		__asm(push(f1>f0), iftrue, target("__ZN15b2DistanceJoint24SolvePositionConstraintsEf__XprivateX__BB207_5_F"))
	__asm(lbl("__ZN15b2DistanceJoint24SolvePositionConstraintsEf__XprivateX__BB207_1_F"))
		f0 =  (1.19209e-07)
		i1 =  ((__xasm<int>(push((i0+52)), op(0x37))))
		f1 =  ((__xasm<Number>(push((i0+108)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i1+40)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i0+104)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i1+36)), op(0x38))))
		f3 =  (f3 - f4)
		f1 =  (f1 - f2)
		f2 =  f3/*fround*/
		f1 =  f1/*fround*/
		f3 =  ((__xasm<Number>(push((i1+24)), op(0x38))))
		f2 =  f2/*fextend*/
		f4 =  ((__xasm<Number>(push((i1+20)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i1+32)), op(0x38))))
		f1 =  f1/*fextend*/
		f6 =  ((__xasm<Number>(push((i1+28)), op(0x38))))
		f3 =  (f3 * f2)
		f2 =  (f4 * f2)
		f4 =  (f5 * f1)
		f1 =  (f6 * f1)
		i2 =  ((__xasm<int>(push((i0+48)), op(0x37))))
		f3 =  f3/*fround*/
		f2 =  f2/*fround*/
		f4 =  f4/*fround*/
		f1 =  f1/*fround*/
		f5 =  ((__xasm<Number>(push((i0+100)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i2+40)), op(0x38))))
		f7 =  ((__xasm<Number>(push((i0+96)), op(0x38))))
		f8 =  ((__xasm<Number>(push((i2+36)), op(0x38))))
		f4 =  f4/*fextend*/
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f2 =  f2/*fextend*/
		f7 =  (f7 - f8)
		f5 =  (f5 - f6)
		f3 =  (f3 + f4)
		f1 =  (f2 + f1)
		f2 =  f7/*fround*/
		f4 =  f5/*fround*/
		f3 =  f3/*fround*/
		f1 =  f1/*fround*/
		f5 =  ((__xasm<Number>(push((i2+24)), op(0x38))))
		f2 =  f2/*fextend*/
		f6 =  ((__xasm<Number>(push((i2+20)), op(0x38))))
		f7 =  ((__xasm<Number>(push((i2+32)), op(0x38))))
		f4 =  f4/*fextend*/
		f8 =  ((__xasm<Number>(push((i2+28)), op(0x38))))
		f9 =  ((__xasm<Number>(push((i1+56)), op(0x38))))
		f10 =  f3/*fextend*/
		f11 =  ((__xasm<Number>(push((i1+52)), op(0x38))))
		f12 =  f1/*fextend*/
		f5 =  (f5 * f2)
		f2 =  (f6 * f2)
		f6 =  (f7 * f4)
		f4 =  (f8 * f4)
		f7 =  (f9 + f10)
		f8 =  (f11 + f12)
		f5 =  f5/*fround*/
		f2 =  f2/*fround*/
		f6 =  f6/*fround*/
		f4 =  f4/*fround*/
		f7 =  f7/*fround*/
		f8 =  f8/*fround*/
		f9 =  ((__xasm<Number>(push((i2+56)), op(0x38))))
		f10 =  ((__xasm<Number>(push((i2+52)), op(0x38))))
		f7 =  f7/*fextend*/
		f8 =  f8/*fextend*/
		f6 =  f6/*fextend*/
		f5 =  f5/*fextend*/
		f4 =  f4/*fextend*/
		f2 =  f2/*fextend*/
		f5 =  (f5 + f6)
		f2 =  (f2 + f4)
		f4 =  (f7 - f9)
		f6 =  (f8 - f10)
		f5 =  f5/*fround*/
		f2 =  f2/*fround*/
		f4 =  f4/*fround*/
		f6 =  f6/*fround*/
		f7 =  f5/*fextend*/
		f4 =  f4/*fextend*/
		f8 =  f2/*fextend*/
		f6 =  f6/*fextend*/
		f4 =  (f4 - f7)
		f6 =  (f6 - f8)
		f4 =  f4/*fround*/
		f6 =  f6/*fround*/
		f7 =  f4/*fextend*/
		f8 =  f6/*fextend*/
		f7 =  (f7 * f7)
		f8 =  (f8 * f8)
		f7 =  f7/*fround*/
		f8 =  f8/*fround*/
		f7 =  f7/*fextend*/
		f8 =  f8/*fextend*/
		f7 =  (f8 + f7)
		f7 =  f7/*fround*/
		f7 =  f7/*fextend*/
		f7 =  Math.sqrt(f7)
		f7 =  f7/*fround*/
		i3 =  (i2 + 40)
		i4 =  (i2 + 20)
		i5 =  (i2 + 24)
		i6 =  (i2 + 28)
		i7 =  (i2 + 32)
		i8 =  (i1 + 40)
		i9 =  (i1 + 20)
		i10 =  (i1 + 24)
		i11 =  (i1 + 28)
		i12 =  (i1 + 32)
		i13 =  (i1 + 52)
		i14 =  (i1 + 56)
		i15 =  (i2 + 52)
		i16 =  (i2 + 56)
		i17 =  (i1 + 36)
		i18 =  (i2 + 36)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f8 =  f7/*fextend*/
		__asm(push(f8>=f0), iftrue, target("__ZN15b2DistanceJoint24SolvePositionConstraintsEf__XprivateX__BB207_3_F"))
	__asm(lbl("__ZN15b2DistanceJoint24SolvePositionConstraintsEf__XprivateX__BB207_2_F"))
		f0 =  (0)
		f7 =  f0/*fround*/
		__asm(jump, target("__ZN15b2DistanceJoint24SolvePositionConstraintsEf__XprivateX__BB207_4_F"))
	__asm(lbl("__ZN15b2DistanceJoint24SolvePositionConstraintsEf__XprivateX__BB207_3_F"))
		f0 =  (1)
		f0 =  f0/*fround*/
		f8 =  f7/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 / f8)
		f0 =  f0/*fround*/
		f6 =  f6/*fextend*/
		f0 =  f0/*fextend*/
		f4 =  f4/*fextend*/
		f6 =  (f6 * f0)
		f0 =  (f4 * f0)
		f4 =  f6/*fround*/
		f0 =  f0/*fround*/
		f6 = f4
		f4 = f0
	__asm(lbl("__ZN15b2DistanceJoint24SolvePositionConstraintsEf__XprivateX__BB207_4_F"))
		f0 = f6
		f6 = f7
		f7 =  (0)
		f8 =  ((__xasm<Number>(push((i0+144)), op(0x38))))
		f6 =  f6/*fextend*/
		f6 =  (f6 - f8)
		f6 =  f6/*fround*/
		f8 =  ((__xasm<Number>(push(_b2_maxLinearCorrection), op(0x38))))
		f6 =  f6/*fextend*/
		f6 =  ((f6<f8) ? f6 : f8)
		f8 =  -f8
		f6 =  f6/*fround*/
		f8 =  f8/*fround*/
		f9 =  ((__xasm<Number>(push((i0+140)), op(0x38))))
		f8 =  f8/*fextend*/
		f6 =  f6/*fextend*/
		f6 =  ((f6<f8) ? f8 : f6)
		f8 =  -f9
		f6 =  f6/*fround*/
		f8 =  f8/*fround*/
		f6 =  f6/*fextend*/
		f8 =  f8/*fextend*/
		f8 =  (f6 * f8)
		f8 =  f8/*fround*/
		f8 =  f8/*fextend*/
		f9 =  f0/*fextend*/
		f9 =  (f9 * f8)
		__asm(push(f0), push((i0+112)), op(0x3d))
		f0 =  f9/*fround*/
		__asm(push(f4), push((i0+116)), op(0x3d))
		f9 =  ((__xasm<Number>(push((i2+128)), op(0x38))))
		f0 =  f0/*fextend*/
		f4 =  f4/*fextend*/
		f10 =  (f0 * f9)
		f4 =  (f4 * f8)
		f8 =  f10/*fround*/
		f10 =  ((__xasm<Number>(push(i15), op(0x38))))
		f4 =  f4/*fround*/
		f8 =  f8/*fextend*/
		f4 =  f4/*fextend*/
		f8 =  (f10 - f8)
		f9 =  (f4 * f9)
		f2 =  f2/*fextend*/
		f5 =  f5/*fextend*/
		f8 =  f8/*fround*/
		f9 =  f9/*fround*/
		f2 =  (f2 * f4)
		f5 =  (f5 * f0)
		__asm(push(f8), push(i15), op(0x3d))
		f2 =  f2/*fround*/
		f5 =  f5/*fround*/
		f8 =  ((__xasm<Number>(push(i16), op(0x38))))
		f9 =  f9/*fextend*/
		f8 =  (f8 - f9)
		f5 =  f5/*fextend*/
		f2 =  f2/*fextend*/
		f8 =  f8/*fround*/
		f2 =  (f2 - f5)
		__asm(push(f8), push(i16), op(0x3d))
		f2 =  f2/*fround*/
		f5 =  ((__xasm<Number>(push((i2+136)), op(0x38))))
		f2 =  f2/*fextend*/
		f2 =  (f5 * f2)
		f2 =  f2/*fround*/
		f5 =  ((__xasm<Number>(push((i2+64)), op(0x38))))
		f2 =  f2/*fextend*/
		f2 =  (f5 - f2)
		f2 =  f2/*fround*/
		__asm(push(f2), push((i2+64)), op(0x3d))
		f2 =  ((__xasm<Number>(push((i1+128)), op(0x38))))
		f5 =  (f0 * f2)
		f5 =  f5/*fround*/
		f8 =  ((__xasm<Number>(push(i13), op(0x38))))
		f5 =  f5/*fextend*/
		f5 =  (f8 + f5)
		f2 =  (f4 * f2)
		f1 =  f1/*fextend*/
		f3 =  f3/*fextend*/
		f5 =  f5/*fround*/
		f2 =  f2/*fround*/
		f1 =  (f1 * f4)
		f0 =  (f3 * f0)
		__asm(push(f5), push(i13), op(0x3d))
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		f3 =  ((__xasm<Number>(push(i14), op(0x38))))
		f2 =  f2/*fextend*/
		f2 =  (f3 + f2)
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		f2 =  f2/*fround*/
		f0 =  (f1 - f0)
		__asm(push(f2), push(i14), op(0x3d))
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push((i1+136)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f1 * f0)
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push((i1+64)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f1 + f0)
		f0 =  f0/*fround*/
		__asm(push(f0), push((i1+64)), op(0x3d))
		f1 =  ((__xasm<Number>(push((i2+64)), op(0x38))))
		f0 = f1
		//InlineAsmStart
	f0 =  Math.cos(f0);

	//InlineAsmEnd
		f2 = f0
		f0 = f1
		//InlineAsmStart
	f0 =  Math.sin(f0);

	//InlineAsmEnd
		f1 =  f0/*fextend*/
		f3 =  -f1
		__asm(push(f2), push(i4), op(0x3d))
		f3 =  f3/*fround*/
		__asm(push(f3), push(i6), op(0x3d))
		__asm(push(f0), push(i5), op(0x3d))
		__asm(push(f2), push(i7), op(0x3d))
		f0 =  ((__xasm<Number>(push(i18), op(0x38))))
		f3 =  ((__xasm<Number>(push(i3), op(0x38))))
		f2 =  f2/*fextend*/
		f4 =  (f2 * f0)
		f5 =  (f3 * f1)
		f0 =  (f1 * f0)
		f1 =  f4/*fround*/
		f2 =  (f2 * f3)
		f3 =  f5/*fround*/
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f1 =  (f1 - f3)
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 + f2)
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		f2 =  ((__xasm<Number>(push(i15), op(0x38))))
		f1 =  f1/*fextend*/
		f3 =  ((__xasm<Number>(push(i16), op(0x38))))
		f0 =  f0/*fextend*/
		f1 =  (f2 - f1)
		f0 =  (f3 - f0)
		f1 =  f1/*fround*/
		__asm(push(f1), push((i2+12)), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push((i2+16)), op(0x3d))
		f1 =  ((__xasm<Number>(push((i1+64)), op(0x38))))
		f0 = f1
		//InlineAsmStart
	f0 =  Math.cos(f0);

	//InlineAsmEnd
		f2 = f0
		f0 = f1
		//InlineAsmStart
	f0 =  Math.sin(f0);

	//InlineAsmEnd
		f1 =  f0/*fextend*/
		f3 =  -f1
		__asm(push(f2), push(i9), op(0x3d))
		f3 =  f3/*fround*/
		__asm(push(f3), push(i11), op(0x3d))
		__asm(push(f0), push(i10), op(0x3d))
		__asm(push(f2), push(i12), op(0x3d))
		f0 =  ((__xasm<Number>(push(i17), op(0x38))))
		f3 =  ((__xasm<Number>(push(i8), op(0x38))))
		f2 =  f2/*fextend*/
		f4 =  (f2 * f0)
		f5 =  (f3 * f1)
		f0 =  (f1 * f0)
		f1 =  f4/*fround*/
		f2 =  (f2 * f3)
		f3 =  f5/*fround*/
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f1 =  (f1 - f3)
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 + f2)
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		f2 =  -f6
		f3 =  ((__xasm<Number>(push(i13), op(0x38))))
		f1 =  f1/*fextend*/
		f4 =  ((__xasm<Number>(push(i14), op(0x38))))
		f0 =  f0/*fextend*/
		f1 =  (f3 - f1)
		f2 =  f2/*fround*/
		f3 =  f7/*fround*/
		f0 =  (f4 - f0)
		f1 =  f1/*fround*/
		f2 =  f2/*fextend*/
		f3 =  f3/*fextend*/
		f2 =  ((f6<=f3) ? f2 : f6)
		__asm(push(f1), push((i1+12)), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push((i1+16)), op(0x3d))
		f0 =  f2/*fround*/
		f1 =  ((__xasm<Number>(push(_b2_linearSlop), op(0x38))))
		f0 =  f0/*fextend*/
		i0 =  ((f0<f1) ? 1 : 0)
		i0 =  (i0 & 1)
		__asm(jump, target("__ZN15b2DistanceJoint24SolvePositionConstraintsEf__XprivateX__BB207_6_F"))
	__asm(lbl("__ZN15b2DistanceJoint24SolvePositionConstraintsEf__XprivateX__BB207_5_F"))
		i0 =  (1)
	__asm(lbl("__ZN15b2DistanceJoint24SolvePositionConstraintsEf__XprivateX__BB207_6_F"))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZNK11b2GearJoint10GetAnchorAEv:int = regFunc(FSM__ZNK11b2GearJoint10GetAnchorAEv.start)

public final class FSM__ZNK11b2GearJoint10GetAnchorAEv extends Machine {

	public static function start():void {
		var i0:int, i1:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number

		__asm(label, lbl("__ZNK11b2GearJoint10GetAnchorAEv_entry"))
	__asm(lbl("__ZNK11b2GearJoint10GetAnchorAEv__XprivateX__BB208_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 8
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+48)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i1+20)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i0+136)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i1+24)), op(0x38))))
		f2 =  (f2 * f1)
		f0 =  (f0 * f1)
		f1 =  f2/*fround*/
		f0 =  f0/*fround*/
		f2 =  ((__xasm<Number>(push((i1+12)), op(0x38))))
		f0 =  f0/*fextend*/
		f3 =  ((__xasm<Number>(push((i1+28)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i0+140)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i1+32)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i1+16)), op(0x38))))
		f1 =  f1/*fextend*/
		f0 =  (f2 + f0)
		f2 =  (f5 * f4)
		f1 =  (f6 + f1)
		f3 =  (f3 * f4)
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		f3 =  f3/*fextend*/
		f0 =  f0/*fextend*/
		f2 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  (f0 + f3)
		f1 =  (f1 + f2)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		__asm(push(f0), push((mstate.ebp+-8)), op(0x3d))
		__asm(push(f1), push((mstate.ebp+-4)), op(0x3d))
		i0 =  ((__xasm<int>(push((mstate.ebp+-8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		mstate.edx = i1
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZNK11b2GearJoint10GetAnchorBEv:int = regFunc(FSM__ZNK11b2GearJoint10GetAnchorBEv.start)

public final class FSM__ZNK11b2GearJoint10GetAnchorBEv extends Machine {

	public static function start():void {
		var i0:int, i1:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number

		__asm(label, lbl("__ZNK11b2GearJoint10GetAnchorBEv_entry"))
	__asm(lbl("__ZNK11b2GearJoint10GetAnchorBEv__XprivateX__BB209_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 8
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+52)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i1+20)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i0+144)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i1+24)), op(0x38))))
		f2 =  (f2 * f1)
		f0 =  (f0 * f1)
		f1 =  f2/*fround*/
		f0 =  f0/*fround*/
		f2 =  ((__xasm<Number>(push((i1+12)), op(0x38))))
		f0 =  f0/*fextend*/
		f3 =  ((__xasm<Number>(push((i1+28)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i0+148)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i1+32)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i1+16)), op(0x38))))
		f1 =  f1/*fextend*/
		f0 =  (f2 + f0)
		f2 =  (f5 * f4)
		f1 =  (f6 + f1)
		f3 =  (f3 * f4)
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		f3 =  f3/*fextend*/
		f0 =  f0/*fextend*/
		f2 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  (f0 + f3)
		f1 =  (f1 + f2)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		__asm(push(f0), push((mstate.ebp+-8)), op(0x3d))
		__asm(push(f1), push((mstate.ebp+-4)), op(0x3d))
		i0 =  ((__xasm<int>(push((mstate.ebp+-8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		mstate.edx = i1
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZNK11b2GearJoint16GetReactionForceEf:int = regFunc(FSM__ZNK11b2GearJoint16GetReactionForceEf.start)

public final class FSM__ZNK11b2GearJoint16GetReactionForceEf extends Machine {

	public static function start():void {
		var i0:int, i1:int

		var f0:Number, f1:Number, f2:Number

		__asm(label, lbl("__ZNK11b2GearJoint16GetReactionForceEf_entry"))
	__asm(lbl("__ZNK11b2GearJoint16GetReactionForceEf__XprivateX__BB210_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 8
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i0+164)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i0+188)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i0+168)), op(0x38))))
		f2 =  (f2 * f1)
		f0 =  (f0 * f1)
		f1 =  f2/*fround*/
		f0 =  f0/*fround*/
		f2 =  ((__xasm<Number>(push((mstate.ebp+12)), op(0x38))))
		f1 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		f1 =  (f1 * f2)
		f0 =  (f0 * f2)
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		__asm(push(f0), push((mstate.ebp+-4)), op(0x3d))
		__asm(push(f1), push((mstate.ebp+-8)), op(0x3d))
		i0 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+-8)), op(0x37))))
		mstate.edx = i1
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZNK11b2GearJoint17GetReactionTorqueEf:int = regFunc(FSM__ZNK11b2GearJoint17GetReactionTorqueEf.start)

public final class FSM__ZNK11b2GearJoint17GetReactionTorqueEf extends Machine {

	public static function start():void {
		var i0:int, i1:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number

		__asm(label, lbl("__ZNK11b2GearJoint17GetReactionTorqueEf_entry"))
	__asm(lbl("__ZNK11b2GearJoint17GetReactionTorqueEf__XprivateX__BB211_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+52)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i0+148)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i1+40)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i0+144)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i1+36)), op(0x38))))
		f2 =  (f2 - f3)
		f0 =  (f0 - f1)
		f1 =  f2/*fround*/
		f0 =  f0/*fround*/
		f2 =  ((__xasm<Number>(push((i1+24)), op(0x38))))
		f1 =  f1/*fextend*/
		f3 =  ((__xasm<Number>(push((i1+20)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i1+32)), op(0x38))))
		f0 =  f0/*fextend*/
		f5 =  ((__xasm<Number>(push((i1+28)), op(0x38))))
		f2 =  (f2 * f1)
		f1 =  (f3 * f1)
		f3 =  (f4 * f0)
		f0 =  (f5 * f0)
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		f0 =  f0/*fround*/
		f4 =  ((__xasm<Number>(push((i0+188)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i0+168)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i0+164)), op(0x38))))
		f3 =  f3/*fextend*/
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		f2 =  (f2 + f3)
		f0 =  (f1 + f0)
		f1 =  (f5 * f4)
		f3 =  (f6 * f4)
		f2 =  f2/*fround*/
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		f3 =  f3/*fextend*/
		f2 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		f2 =  (f2 * f3)
		f0 =  (f0 * f1)
		f1 =  f2/*fround*/
		f0 =  f0/*fround*/
		f2 =  ((__xasm<Number>(push((i0+172)), op(0x38))))
		f1 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 - f1)
		f1 =  (f4 * f2)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  (f1 - f0)
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push((mstate.ebp+12)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f0 * f1)
		f0 =  f0/*fround*/
		mstate.st0 = f0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Async
public const __ZN11b2GearJointD1Ev:int = regFunc(FSM__ZN11b2GearJointD1Ev.start)

public final class FSM__ZN11b2GearJointD1Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN11b2GearJointD1Ev = new FSM__ZN11b2GearJointD1Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN11b2GearJointD1Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN11b2GearJointD1Ev_errState",
			"__ZN11b2GearJointD1Ev_state0"))
	__asm(lbl("__ZN11b2GearJointD1Ev_state0"))
	__asm(lbl("__ZN11b2GearJointD1Ev__XprivateX__BB212_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV7b2Joint)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN11b2GearJointD1Ev_errState"))
		throw("Invalid state in __ZN11b2GearJointD1Ev")
	}
}



// Async
public const __ZN11b2GearJointD0Ev:int = regFunc(FSM__ZN11b2GearJointD0Ev.start)

public final class FSM__ZN11b2GearJointD0Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN11b2GearJointD0Ev = new FSM__ZN11b2GearJointD0Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN11b2GearJointD0Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN11b2GearJointD0Ev_errState",
			"__ZN11b2GearJointD0Ev_state0",
			"__ZN11b2GearJointD0Ev_state1"))
	__asm(lbl("__ZN11b2GearJointD0Ev_state0"))
	__asm(lbl("__ZN11b2GearJointD0Ev__XprivateX__BB213_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV7b2Joint)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		__asm(push(i1==0), iftrue, target("__ZN11b2GearJointD0Ev__XprivateX__BB213_2_F"))
	__asm(lbl("__ZN11b2GearJointD0Ev__XprivateX__BB213_1_F"))
		i0 =  (0)
		mstate.esp -= 8
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN11b2GearJointD0Ev_state1"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__ZN11b2GearJointD0Ev__XprivateX__BB213_2_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN11b2GearJointD0Ev_errState"))
		throw("Invalid state in __ZN11b2GearJointD0Ev")
	}
}



// Sync
public const __ZN11b2GearJoint23InitVelocityConstraintsERK10b2TimeStep:int = regFunc(FSM__ZN11b2GearJoint23InitVelocityConstraintsERK10b2TimeStep.start)

public final class FSM__ZN11b2GearJoint23InitVelocityConstraintsERK10b2TimeStep extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
		var i8:int, i9:int, i10:int, i11:int, i12:int, i13:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number
		var f8:Number, f9:Number, f10:Number, f11:Number, f12:Number, f13:Number, f14:Number

		__asm(label, lbl("__ZN11b2GearJoint23InitVelocityConstraintsERK10b2TimeStep_entry"))
	__asm(lbl("__ZN11b2GearJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB214_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (0)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i2 =  ((__xasm<int>(push((i1+96)), op(0x37))))
		i3 =  ((__xasm<int>(push((i1+100)), op(0x37))))
		i4 =  ((__xasm<int>(push((i1+48)), op(0x37))))
		i5 =  ((__xasm<int>(push((i1+52)), op(0x37))))
		__asm(push(i0), push((i1+152)), op(0x3c))
		__asm(push(i0), push((i1+156)), op(0x3c))
		__asm(push(i0), push((i1+160)), op(0x3c))
		__asm(push(i0), push((i1+164)), op(0x3c))
		__asm(push(i0), push((i1+168)), op(0x3c))
		__asm(push(i0), push((i1+172)), op(0x3c))
		i0 =  ((__xasm<int>(push((i1+104)), op(0x37))))
		i6 =  (i1 + 156)
		i7 =  (i1 + 160)
		i8 =  (i1 + 164)
		i9 =  (i1 + 168)
		i10 =  (i1 + 172)
		i11 =  (i1 + 112)
		i12 =  (i1 + 152)
		i13 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__ZN11b2GearJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB214_3_F"))
	__asm(lbl("__ZN11b2GearJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB214_1_F"))
		f0 =  (0)
		i2 =  (-1082130432)
		f0 =  f0/*fround*/
		__asm(push(i2), push(i7), op(0x3c))
		f1 =  ((__xasm<Number>(push((i4+136)), op(0x38))))
		f0 =  f0/*fextend*/
		i2 =  ((__xasm<int>(push(i11), op(0x37))))
		f0 =  (f1 + f0)
		f0 =  f0/*fround*/
		__asm(push(i2==0), iftrue, target("__ZN11b2GearJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB214_6_F"))
	__asm(lbl("__ZN11b2GearJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB214_2_F"))
		f1 =  (0)
		f1 =  f1/*fround*/
		f2 = f1
		__asm(jump, target("__ZN11b2GearJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB214_5_F"))
	__asm(lbl("__ZN11b2GearJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB214_3_F"))
		f0 =  (0)
		f1 =  ((__xasm<Number>(push((i1+140)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i4+40)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i1+136)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i4+36)), op(0x38))))
		f3 =  (f3 - f4)
		f1 =  (f1 - f2)
		f2 =  f3/*fround*/
		f1 =  f1/*fround*/
		i0 =  ((__xasm<int>(push((i1+108)), op(0x37))))
		f3 =  ((__xasm<Number>(push((i2+24)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i0+112)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i2+20)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i2+32)), op(0x38))))
		f7 =  ((__xasm<Number>(push((i0+116)), op(0x38))))
		f8 =  ((__xasm<Number>(push((i2+28)), op(0x38))))
		f9 =  ((__xasm<Number>(push((i4+24)), op(0x38))))
		f2 =  f2/*fextend*/
		f10 =  ((__xasm<Number>(push((i4+20)), op(0x38))))
		f11 =  ((__xasm<Number>(push((i4+32)), op(0x38))))
		f12 =  ((__xasm<Number>(push((i4+28)), op(0x38))))
		f1 =  f1/*fextend*/
		f3 =  (f3 * f4)
		f4 =  (f5 * f4)
		f5 =  (f6 * f7)
		f6 =  (f8 * f7)
		f7 =  (f9 * f2)
		f2 =  (f10 * f2)
		f8 =  (f11 * f1)
		f1 =  (f12 * f1)
		f3 =  f3/*fround*/
		f4 =  f4/*fround*/
		f5 =  f5/*fround*/
		f6 =  f6/*fround*/
		f7 =  f7/*fround*/
		f2 =  f2/*fround*/
		f8 =  f8/*fround*/
		f1 =  f1/*fround*/
		f5 =  f5/*fextend*/
		f3 =  f3/*fextend*/
		f6 =  f6/*fextend*/
		f4 =  f4/*fextend*/
		f8 =  f8/*fextend*/
		f7 =  f7/*fextend*/
		f1 =  f1/*fextend*/
		f2 =  f2/*fextend*/
		f3 =  (f3 + f5)
		f4 =  (f4 + f6)
		f5 =  (f7 + f8)
		f1 =  (f2 + f1)
		f2 =  f3/*fround*/
		f3 =  f4/*fround*/
		f4 =  f5/*fround*/
		f1 =  f1/*fround*/
		f2 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		f3 =  f3/*fextend*/
		f4 =  f4/*fextend*/
		f1 =  (f1 * f2)
		f4 =  (f4 * f3)
		f1 =  f1/*fround*/
		f4 =  f4/*fround*/
		f3 =  -f3
		f2 =  -f2
		f1 =  f1/*fextend*/
		f4 =  f4/*fextend*/
		f3 =  f3/*fround*/
		f5 =  (f4 - f1)
		__asm(push(f3), push(i12), op(0x3d))
		f6 =  f2/*fround*/
		f1 =  (f1 - f4)
		__asm(push(f6), push(i6), op(0x3d))
		f2 =  f5/*fround*/
		__asm(push(f2), push(i7), op(0x3d))
		f1 =  f1/*fround*/
		f2 =  ((__xasm<Number>(push((i4+136)), op(0x38))))
		f1 =  f1/*fextend*/
		f2 =  (f2 * f1)
		f2 =  f2/*fround*/
		f2 =  f2/*fextend*/
		f1 =  (f2 * f1)
		f1 =  f1/*fround*/
		f2 =  ((__xasm<Number>(push((i4+128)), op(0x38))))
		f1 =  f1/*fextend*/
		f1 =  (f2 + f1)
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		i0 =  ((__xasm<int>(push(i11), op(0x37))))
		f0 =  (f1 + f0)
		f0 =  f0/*fround*/
		__asm(push(i0==0), iftrue, target("__ZN11b2GearJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB214_15_F"))
	__asm(lbl("__ZN11b2GearJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB214_4_F"))
		f2 = f3
		f1 = f6
		__asm(jump, target("__ZN11b2GearJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB214_5_F"))
	__asm(lbl("__ZN11b2GearJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB214_5_F"))
		f3 =  ((__xasm<Number>(push((i1+180)), op(0x38))))
		f3 =  -f3
		f3 =  f3/*fround*/
		__asm(push(f3), push(i10), op(0x3d))
		f3 =  ((__xasm<Number>(push((i5+136)), op(0x38))))
		i3 =  (i1 + 180)
		i0 = i3
		__asm(jump, target("__ZN11b2GearJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB214_8_F"))
	__asm(lbl("__ZN11b2GearJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB214_6_F"))
		f1 =  (0)
		f1 =  f1/*fround*/
		f2 = f1
		__asm(jump, target("__ZN11b2GearJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB214_7_F"))
	__asm(jump, target("__ZN11b2GearJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB214_7_F"), lbl("__ZN11b2GearJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB214_7_B"), label, lbl("__ZN11b2GearJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB214_7_F")); 
		f3 =  ((__xasm<Number>(push((i1+148)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i5+40)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i1+144)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i5+36)), op(0x38))))
		f5 =  (f5 - f6)
		f3 =  (f3 - f4)
		f4 =  f5/*fround*/
		f3 =  f3/*fround*/
		i0 =  ((__xasm<int>(push((i1+116)), op(0x37))))
		f5 =  ((__xasm<Number>(push((i3+24)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i0+112)), op(0x38))))
		f7 =  ((__xasm<Number>(push((i3+20)), op(0x38))))
		f8 =  ((__xasm<Number>(push((i3+32)), op(0x38))))
		f9 =  ((__xasm<Number>(push((i0+116)), op(0x38))))
		f10 =  ((__xasm<Number>(push((i3+28)), op(0x38))))
		f11 =  ((__xasm<Number>(push((i5+24)), op(0x38))))
		f4 =  f4/*fextend*/
		f12 =  ((__xasm<Number>(push((i5+20)), op(0x38))))
		f13 =  ((__xasm<Number>(push((i5+32)), op(0x38))))
		f3 =  f3/*fextend*/
		f14 =  ((__xasm<Number>(push((i5+28)), op(0x38))))
		f5 =  (f5 * f6)
		f6 =  (f7 * f6)
		f7 =  (f8 * f9)
		f8 =  (f10 * f9)
		f9 =  (f11 * f4)
		f4 =  (f12 * f4)
		f10 =  (f13 * f3)
		f3 =  (f14 * f3)
		f5 =  f5/*fround*/
		f6 =  f6/*fround*/
		f7 =  f7/*fround*/
		f8 =  f8/*fround*/
		f9 =  f9/*fround*/
		f4 =  f4/*fround*/
		f10 =  f10/*fround*/
		f3 =  f3/*fround*/
		f7 =  f7/*fextend*/
		f5 =  f5/*fextend*/
		f8 =  f8/*fextend*/
		f6 =  f6/*fextend*/
		f10 =  f10/*fextend*/
		f9 =  f9/*fextend*/
		f3 =  f3/*fextend*/
		f4 =  f4/*fextend*/
		f5 =  (f5 + f7)
		f6 =  (f6 + f8)
		f7 =  (f9 + f10)
		f3 =  (f4 + f3)
		f4 =  f5/*fround*/
		f5 =  f6/*fround*/
		f6 =  f7/*fround*/
		f3 =  f3/*fround*/
		f3 =  f3/*fextend*/
		f4 =  f4/*fextend*/
		f6 =  f6/*fextend*/
		f5 =  f5/*fextend*/
		f7 =  ((__xasm<Number>(push((i1+180)), op(0x38))))
		f3 =  (f3 * f4)
		f6 =  (f6 * f5)
		f3 =  f3/*fround*/
		f6 =  f6/*fround*/
		f7 =  -f7
		f7 =  f7/*fround*/
		f6 =  f6/*fextend*/
		f3 =  f3/*fextend*/
		f7 =  f7/*fextend*/
		f3 =  (f3 - f6)
		f3 =  f3/*fround*/
		f5 =  (f5 * f7)
		f3 =  f3/*fextend*/
		f4 =  (f4 * f7)
		f5 =  f5/*fround*/
		f6 =  (f3 * f7)
		__asm(push(f5), push(i8), op(0x3d))
		f4 =  f4/*fround*/
		__asm(push(f4), push(i9), op(0x3d))
		f4 =  f6/*fround*/
		__asm(push(f4), push(i10), op(0x3d))
		f4 =  ((__xasm<Number>(push((i5+136)), op(0x38))))
		f4 =  (f4 * f3)
		f4 =  f4/*fround*/
		f4 =  f4/*fextend*/
		f3 =  (f4 * f3)
		f3 =  f3/*fround*/
		f4 =  ((__xasm<Number>(push((i5+128)), op(0x38))))
		f3 =  f3/*fextend*/
		f3 =  (f4 + f3)
		f3 =  f3/*fround*/
		i3 =  (i1 + 180)
		i0 = i3
	__asm(lbl("__ZN11b2GearJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB214_8_F"))
		i2 = i3
		f4 =  (0)
		f5 =  ((__xasm<Number>(push(i0), op(0x38))))
		f6 =  ((__xasm<Number>(push(i2), op(0x38))))
		f5 =  (f5 * f6)
		f5 =  f5/*fround*/
		f3 =  f3/*fextend*/
		f5 =  f5/*fextend*/
		f3 =  (f5 * f3)
		f3 =  f3/*fround*/
		f0 =  f0/*fextend*/
		f3 =  f3/*fextend*/
		f0 =  (f3 + f0)
		f0 =  f0/*fround*/
		f3 =  f4/*fround*/
		f3 =  f3/*fextend*/
		f4 =  f0/*fextend*/
		__asm(push(f4>f3), iftrue, target("__ZN11b2GearJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB214_10_F"))
	__asm(lbl("__ZN11b2GearJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB214_9_F"))
		f0 =  (0)
		f0 =  f0/*fround*/
		__asm(jump, target("__ZN11b2GearJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB214_11_F"))
	__asm(lbl("__ZN11b2GearJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB214_10_F"))
		f3 =  (1)
		f3 =  f3/*fround*/
		f0 =  f0/*fextend*/
		f3 =  f3/*fextend*/
		f0 =  (f3 / f0)
		f0 =  f0/*fround*/
	__asm(lbl("__ZN11b2GearJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB214_11_F"))
		__asm(push(f0), push((i1+184)), op(0x3d))
		i0 =  ((__xasm<int>(push((i13+20)), op(0x35))))
		__asm(push(i0==0), iftrue, target("__ZN11b2GearJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB214_13_F"))
	__asm(lbl("__ZN11b2GearJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB214_12_F"))
		f0 =  ((__xasm<Number>(push((i4+128)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i1+188)), op(0x38))))
		f0 =  (f0 * f3)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f2 =  f2/*fextend*/
		f2 =  (f2 * f0)
		f2 =  f2/*fround*/
		f3 =  ((__xasm<Number>(push((i4+72)), op(0x38))))
		f2 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		f2 =  (f3 + f2)
		f0 =  (f1 * f0)
		f1 =  f2/*fround*/
		__asm(push(f1), push((i4+72)), op(0x3d))
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push((i4+76)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f1 + f0)
		f0 =  f0/*fround*/
		__asm(push(f0), push((i4+76)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i4+136)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i1+188)), op(0x38))))
		f0 =  (f0 * f1)
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push(i7), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f0 * f1)
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push((i4+80)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f1 + f0)
		f0 =  f0/*fround*/
		__asm(push(f0), push((i4+80)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i5+128)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i1+188)), op(0x38))))
		f0 =  (f0 * f1)
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push(i8), op(0x38))))
		f0 =  f0/*fextend*/
		f1 =  (f1 * f0)
		f1 =  f1/*fround*/
		f2 =  ((__xasm<Number>(push((i5+72)), op(0x38))))
		f1 =  f1/*fextend*/
		f3 =  ((__xasm<Number>(push(i9), op(0x38))))
		f1 =  (f2 + f1)
		f0 =  (f3 * f0)
		f1 =  f1/*fround*/
		__asm(push(f1), push((i5+72)), op(0x3d))
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push((i5+76)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f1 + f0)
		f0 =  f0/*fround*/
		__asm(push(f0), push((i5+76)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i5+136)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i1+188)), op(0x38))))
		f0 =  (f0 * f1)
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push(i10), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f0 * f1)
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push((i5+80)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f1 + f0)
		f0 =  f0/*fround*/
		__asm(push(f0), push((i5+80)), op(0x3d))
		__asm(jump, target("__ZN11b2GearJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB214_14_F"))
	__asm(lbl("__ZN11b2GearJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB214_13_F"))
		i0 =  (0)
		__asm(push(i0), push((i1+188)), op(0x3c))
	__asm(lbl("__ZN11b2GearJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB214_14_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	__asm(lbl("__ZN11b2GearJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB214_15_F"))
		f2 = f3
		f1 = f6
		__asm(jump, target("__ZN11b2GearJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB214_7_B"))
	}
}



// Sync
public const __ZN11b2GearJoint24SolveVelocityConstraintsERK10b2TimeStep:int = regFunc(FSM__ZN11b2GearJoint24SolveVelocityConstraintsERK10b2TimeStep.start)

public final class FSM__ZN11b2GearJoint24SolveVelocityConstraintsERK10b2TimeStep extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number
		var f8:Number, f9:Number

		__asm(label, lbl("__ZN11b2GearJoint24SolveVelocityConstraintsERK10b2TimeStep_entry"))
	__asm(lbl("__ZN11b2GearJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB215_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+48)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i0+152)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i1+72)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i0+156)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i1+76)), op(0x38))))
		f1 =  (f0 * f1)
		f3 =  (f2 * f3)
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		i2 =  ((__xasm<int>(push((i0+52)), op(0x37))))
		f4 =  ((__xasm<Number>(push((i1+80)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i0+160)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i0+164)), op(0x38))))
		f7 =  ((__xasm<Number>(push((i2+72)), op(0x38))))
		f8 =  ((__xasm<Number>(push((i0+168)), op(0x38))))
		f9 =  ((__xasm<Number>(push((i2+76)), op(0x38))))
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f4 =  (f5 * f4)
		f1 =  (f1 + f3)
		f3 =  (f6 * f7)
		f5 =  (f8 * f9)
		f4 =  f4/*fround*/
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		f5 =  f5/*fround*/
		f4 =  f4/*fextend*/
		f1 =  f1/*fextend*/
		f5 =  f5/*fextend*/
		f3 =  f3/*fextend*/
		f1 =  (f1 + f4)
		f3 =  (f3 + f5)
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		f4 =  ((__xasm<Number>(push((i2+80)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i0+172)), op(0x38))))
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f1 =  (f1 + f3)
		f3 =  (f5 * f4)
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f1 =  (f1 + f3)
		f1 =  f1/*fround*/
		f1 =  f1/*fextend*/
		f1 =  -f1
		f1 =  f1/*fround*/
		f3 =  ((__xasm<Number>(push((i0+184)), op(0x38))))
		f1 =  f1/*fextend*/
		f1 =  (f3 * f1)
		f1 =  f1/*fround*/
		f3 =  ((__xasm<Number>(push((i0+188)), op(0x38))))
		f1 =  f1/*fextend*/
		f3 =  (f3 + f1)
		f3 =  f3/*fround*/
		__asm(push(f3), push((i0+188)), op(0x3d))
		f3 =  ((__xasm<Number>(push((i1+128)), op(0x38))))
		f3 =  (f3 * f1)
		f3 =  f3/*fround*/
		f3 =  f3/*fextend*/
		f0 =  (f0 * f3)
		f0 =  f0/*fround*/
		f4 =  ((__xasm<Number>(push((i1+72)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f4 + f0)
		f2 =  (f2 * f3)
		f0 =  f0/*fround*/
		__asm(push(f0), push((i1+72)), op(0x3d))
		f0 =  f2/*fround*/
		f2 =  ((__xasm<Number>(push((i1+76)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f2 + f0)
		f0 =  f0/*fround*/
		__asm(push(f0), push((i1+76)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i1+136)), op(0x38))))
		f0 =  (f0 * f1)
		f0 =  f0/*fround*/
		f2 =  ((__xasm<Number>(push((i0+160)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f0 * f2)
		f0 =  f0/*fround*/
		f2 =  ((__xasm<Number>(push((i1+80)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f2 + f0)
		f0 =  f0/*fround*/
		__asm(push(f0), push((i1+80)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i2+128)), op(0x38))))
		f0 =  (f0 * f1)
		f0 =  f0/*fround*/
		f2 =  ((__xasm<Number>(push((i0+164)), op(0x38))))
		f0 =  f0/*fextend*/
		f2 =  (f2 * f0)
		f2 =  f2/*fround*/
		f3 =  ((__xasm<Number>(push((i2+72)), op(0x38))))
		f2 =  f2/*fextend*/
		f4 =  ((__xasm<Number>(push((i0+168)), op(0x38))))
		f2 =  (f3 + f2)
		f0 =  (f4 * f0)
		f2 =  f2/*fround*/
		__asm(push(f2), push((i2+72)), op(0x3d))
		f0 =  f0/*fround*/
		f2 =  ((__xasm<Number>(push((i2+76)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f2 + f0)
		f0 =  f0/*fround*/
		__asm(push(f0), push((i2+76)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i2+136)), op(0x38))))
		f0 =  (f0 * f1)
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push((i0+172)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f0 * f1)
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push((i2+80)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f1 + f0)
		f0 =  f0/*fround*/
		__asm(push(f0), push((i2+80)), op(0x3d))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZN11b2GearJoint24SolvePositionConstraintsEf:int = regFunc(FSM__ZN11b2GearJoint24SolvePositionConstraintsEf.start)

public final class FSM__ZN11b2GearJoint24SolvePositionConstraintsEf extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number

		__asm(label, lbl("__ZN11b2GearJoint24SolvePositionConstraintsEf_entry"))
	__asm(lbl("__ZN11b2GearJoint24SolvePositionConstraintsEf__XprivateX__BB216_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+48)), op(0x37))))
		i2 =  ((__xasm<int>(push((i0+52)), op(0x37))))
		i3 =  ((__xasm<int>(push((i0+104)), op(0x37))))
		i4 =  (i0 + 112)
		__asm(push(i3==0), iftrue, target("__ZN11b2GearJoint24SolvePositionConstraintsEf__XprivateX__BB216_3_F"))
	__asm(lbl("__ZN11b2GearJoint24SolvePositionConstraintsEf__XprivateX__BB216_1_F"))
		i5 =  ((__xasm<int>(push((i3+52)), op(0x37))))
		i6 =  ((__xasm<int>(push((i3+48)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i5+64)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i6+64)), op(0x38))))
		f0 =  (f0 - f1)
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push((i3+184)), op(0x38))))
		f0 =  f0/*fextend*/
		i4 =  ((__xasm<int>(push(i4), op(0x37))))
		f0 =  (f0 - f1)
		f0 =  f0/*fround*/
		__asm(push(i4==0), iftrue, target("__ZN11b2GearJoint24SolvePositionConstraintsEf__XprivateX__BB216_6_F"))
	__asm(lbl("__ZN11b2GearJoint24SolvePositionConstraintsEf__XprivateX__BB216_2_F"))
		__asm(jump, target("__ZN11b2GearJoint24SolvePositionConstraintsEf__XprivateX__BB216_5_F"))
	__asm(lbl("__ZN11b2GearJoint24SolvePositionConstraintsEf__XprivateX__BB216_3_F"))
		i3 =  ((__xasm<int>(push((i0+108)), op(0x37))))
		mstate.esp -= 4
		__asm(push(i3), push(mstate.esp), op(0x3c))
		mstate.esp -= 4;FSM__ZNK16b2PrismaticJoint19GetJointTranslationEv.start()
	__asm(lbl("__ZN11b2GearJoint24SolvePositionConstraintsEf_state1"))
		f0 = mstate.st0
		mstate.esp += 4
		i4 =  ((__xasm<int>(push(i4), op(0x37))))
		__asm(push(i4==0), iftrue, target("__ZN11b2GearJoint24SolvePositionConstraintsEf__XprivateX__BB216_9_F"))
	__asm(lbl("__ZN11b2GearJoint24SolvePositionConstraintsEf__XprivateX__BB216_4_F"))
		__asm(jump, target("__ZN11b2GearJoint24SolvePositionConstraintsEf__XprivateX__BB216_5_F"))
	__asm(lbl("__ZN11b2GearJoint24SolvePositionConstraintsEf__XprivateX__BB216_5_F"))
		i3 = i4
		i4 =  ((__xasm<int>(push((i3+52)), op(0x37))))
		i5 =  ((__xasm<int>(push((i3+48)), op(0x37))))
		f1 =  ((__xasm<Number>(push((i4+64)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i5+64)), op(0x38))))
		f1 =  (f1 - f2)
		f1 =  f1/*fround*/
		f2 =  ((__xasm<Number>(push((i3+184)), op(0x38))))
		f1 =  f1/*fextend*/
		f1 =  (f1 - f2)
		f1 =  f1/*fround*/
		__asm(jump, target("__ZN11b2GearJoint24SolvePositionConstraintsEf__XprivateX__BB216_8_F"))
	__asm(lbl("__ZN11b2GearJoint24SolvePositionConstraintsEf__XprivateX__BB216_6_F"))
		__asm(jump, target("__ZN11b2GearJoint24SolvePositionConstraintsEf__XprivateX__BB216_7_F"))
	__asm(jump, target("__ZN11b2GearJoint24SolvePositionConstraintsEf__XprivateX__BB216_7_F"), lbl("__ZN11b2GearJoint24SolvePositionConstraintsEf__XprivateX__BB216_7_B"), label, lbl("__ZN11b2GearJoint24SolvePositionConstraintsEf__XprivateX__BB216_7_F")); 
		i3 =  ((__xasm<int>(push((i0+116)), op(0x37))))
		mstate.esp -= 4
		__asm(push(i3), push(mstate.esp), op(0x3c))
		mstate.esp -= 4;FSM__ZNK16b2PrismaticJoint19GetJointTranslationEv.start()
	__asm(lbl("__ZN11b2GearJoint24SolvePositionConstraintsEf_state2"))
		f1 = mstate.st0
		mstate.esp += 4
	__asm(lbl("__ZN11b2GearJoint24SolvePositionConstraintsEf__XprivateX__BB216_8_F"))
		f2 =  (0)
		f3 =  ((__xasm<Number>(push((i0+180)), op(0x38))))
		f1 =  f1/*fextend*/
		f1 =  (f3 * f1)
		f1 =  f1/*fround*/
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  (f1 + f0)
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push((i0+176)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f0 - f1)
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push((i0+184)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f1 * f0)
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push((i1+128)), op(0x38))))
		f0 =  f0/*fextend*/
		f1 =  (f1 * f0)
		f1 =  f1/*fround*/
		f3 =  ((__xasm<Number>(push((i0+152)), op(0x38))))
		f1 =  f1/*fextend*/
		f3 =  (f3 * f1)
		f3 =  f3/*fround*/
		f4 =  ((__xasm<Number>(push((i1+52)), op(0x38))))
		f3 =  f3/*fextend*/
		f5 =  ((__xasm<Number>(push((i0+156)), op(0x38))))
		f3 =  (f4 + f3)
		f1 =  (f5 * f1)
		f3 =  f3/*fround*/
		__asm(push(f3), push((i1+52)), op(0x3d))
		f1 =  f1/*fround*/
		f3 =  ((__xasm<Number>(push((i1+56)), op(0x38))))
		f1 =  f1/*fextend*/
		f1 =  (f3 + f1)
		f1 =  f1/*fround*/
		__asm(push(f1), push((i1+56)), op(0x3d))
		f1 =  ((__xasm<Number>(push((i1+136)), op(0x38))))
		f1 =  (f1 * f0)
		f1 =  f1/*fround*/
		f3 =  ((__xasm<Number>(push((i0+160)), op(0x38))))
		f1 =  f1/*fextend*/
		f1 =  (f1 * f3)
		f1 =  f1/*fround*/
		f3 =  ((__xasm<Number>(push((i1+64)), op(0x38))))
		f1 =  f1/*fextend*/
		f1 =  (f3 + f1)
		f1 =  f1/*fround*/
		__asm(push(f1), push((i1+64)), op(0x3d))
		f1 =  ((__xasm<Number>(push((i2+128)), op(0x38))))
		f1 =  (f1 * f0)
		f1 =  f1/*fround*/
		f3 =  ((__xasm<Number>(push((i0+164)), op(0x38))))
		f1 =  f1/*fextend*/
		f3 =  (f3 * f1)
		f3 =  f3/*fround*/
		f4 =  ((__xasm<Number>(push((i2+52)), op(0x38))))
		f3 =  f3/*fextend*/
		f5 =  ((__xasm<Number>(push((i0+168)), op(0x38))))
		f3 =  (f4 + f3)
		f1 =  (f5 * f1)
		f3 =  f3/*fround*/
		__asm(push(f3), push((i2+52)), op(0x3d))
		f1 =  f1/*fround*/
		f3 =  ((__xasm<Number>(push((i2+56)), op(0x38))))
		f1 =  f1/*fextend*/
		f1 =  (f3 + f1)
		f1 =  f1/*fround*/
		__asm(push(f1), push((i2+56)), op(0x3d))
		f1 =  ((__xasm<Number>(push((i2+136)), op(0x38))))
		f0 =  (f1 * f0)
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push((i0+172)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f0 * f1)
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push((i2+64)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f1 + f0)
		f0 =  f0/*fround*/
		__asm(push(f0), push((i2+64)), op(0x3d))
		f1 =  ((__xasm<Number>(push((i1+64)), op(0x38))))
		f0 = f1
		//InlineAsmStart
	f0 =  Math.cos(f0);

	//InlineAsmEnd
		f3 = f0
		f0 = f1
		//InlineAsmStart
	f0 =  Math.sin(f0);

	//InlineAsmEnd
		f1 =  f0/*fextend*/
		f4 =  -f1
		__asm(push(f3), push((i1+20)), op(0x3d))
		f4 =  f4/*fround*/
		__asm(push(f4), push((i1+28)), op(0x3d))
		__asm(push(f0), push((i1+24)), op(0x3d))
		__asm(push(f3), push((i1+32)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i1+36)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i1+40)), op(0x38))))
		f3 =  f3/*fextend*/
		f5 =  (f3 * f0)
		f6 =  (f4 * f1)
		f0 =  (f1 * f0)
		f1 =  f5/*fround*/
		f3 =  (f3 * f4)
		f4 =  f6/*fround*/
		f0 =  f0/*fround*/
		f3 =  f3/*fround*/
		f4 =  f4/*fextend*/
		f1 =  f1/*fextend*/
		f1 =  (f1 - f4)
		f3 =  f3/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 + f3)
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		f3 =  ((__xasm<Number>(push((i1+52)), op(0x38))))
		f1 =  f1/*fextend*/
		f4 =  ((__xasm<Number>(push((i1+56)), op(0x38))))
		f0 =  f0/*fextend*/
		f1 =  (f3 - f1)
		f0 =  (f4 - f0)
		f1 =  f1/*fround*/
		__asm(push(f1), push((i1+12)), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push((i1+16)), op(0x3d))
		f1 =  ((__xasm<Number>(push((i2+64)), op(0x38))))
		f0 = f1
		//InlineAsmStart
	f0 =  Math.cos(f0);

	//InlineAsmEnd
		f3 = f0
		f0 = f1
		//InlineAsmStart
	f0 =  Math.sin(f0);

	//InlineAsmEnd
		f1 =  f0/*fextend*/
		f4 =  -f1
		__asm(push(f3), push((i2+20)), op(0x3d))
		f4 =  f4/*fround*/
		__asm(push(f4), push((i2+28)), op(0x3d))
		__asm(push(f0), push((i2+24)), op(0x3d))
		__asm(push(f3), push((i2+32)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i2+36)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i2+40)), op(0x38))))
		f3 =  f3/*fextend*/
		f5 =  (f3 * f0)
		f6 =  (f4 * f1)
		f0 =  (f1 * f0)
		f1 =  f5/*fround*/
		f3 =  (f3 * f4)
		f4 =  f6/*fround*/
		f0 =  f0/*fround*/
		f3 =  f3/*fround*/
		f4 =  f4/*fextend*/
		f1 =  f1/*fextend*/
		f1 =  (f1 - f4)
		f3 =  f3/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 + f3)
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		f3 =  ((__xasm<Number>(push((i2+52)), op(0x38))))
		f1 =  f1/*fextend*/
		f4 =  ((__xasm<Number>(push((i2+56)), op(0x38))))
		f0 =  f0/*fextend*/
		f1 =  (f3 - f1)
		f0 =  (f4 - f0)
		f1 =  f1/*fround*/
		__asm(push(f1), push((i2+12)), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push((i2+16)), op(0x3d))
		f0 =  f2/*fround*/
		f1 =  ((__xasm<Number>(push(_b2_linearSlop), op(0x38))))
		f0 =  f0/*fextend*/
		i0 =  ((f1>f0) ? 1 : 0)
		i0 =  (i0 & 1)
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	__asm(lbl("__ZN11b2GearJoint24SolvePositionConstraintsEf__XprivateX__BB216_9_F"))
		__asm(jump, target("__ZN11b2GearJoint24SolvePositionConstraintsEf__XprivateX__BB216_7_B"))
	}
}



// Sync
public const __ZNK11b2LineJoint10GetAnchorAEv:int = regFunc(FSM__ZNK11b2LineJoint10GetAnchorAEv.start)

public final class FSM__ZNK11b2LineJoint10GetAnchorAEv extends Machine {

	public static function start():void {
		var i0:int, i1:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number

		__asm(label, lbl("__ZNK11b2LineJoint10GetAnchorAEv_entry"))
	__asm(lbl("__ZNK11b2LineJoint10GetAnchorAEv__XprivateX__BB217_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 8
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+48)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i1+20)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i0+96)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i1+24)), op(0x38))))
		f2 =  (f2 * f1)
		f0 =  (f0 * f1)
		f1 =  f2/*fround*/
		f0 =  f0/*fround*/
		f2 =  ((__xasm<Number>(push((i1+12)), op(0x38))))
		f0 =  f0/*fextend*/
		f3 =  ((__xasm<Number>(push((i1+28)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i0+100)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i1+32)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i1+16)), op(0x38))))
		f1 =  f1/*fextend*/
		f0 =  (f2 + f0)
		f2 =  (f5 * f4)
		f1 =  (f6 + f1)
		f3 =  (f3 * f4)
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		f3 =  f3/*fextend*/
		f0 =  f0/*fextend*/
		f2 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  (f0 + f3)
		f1 =  (f1 + f2)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		__asm(push(f0), push((mstate.ebp+-8)), op(0x3d))
		__asm(push(f1), push((mstate.ebp+-4)), op(0x3d))
		i0 =  ((__xasm<int>(push((mstate.ebp+-8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		mstate.edx = i1
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZNK11b2LineJoint10GetAnchorBEv:int = regFunc(FSM__ZNK11b2LineJoint10GetAnchorBEv.start)

public final class FSM__ZNK11b2LineJoint10GetAnchorBEv extends Machine {

	public static function start():void {
		var i0:int, i1:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number

		__asm(label, lbl("__ZNK11b2LineJoint10GetAnchorBEv_entry"))
	__asm(lbl("__ZNK11b2LineJoint10GetAnchorBEv__XprivateX__BB218_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 8
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+52)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i1+20)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i0+104)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i1+24)), op(0x38))))
		f2 =  (f2 * f1)
		f0 =  (f0 * f1)
		f1 =  f2/*fround*/
		f0 =  f0/*fround*/
		f2 =  ((__xasm<Number>(push((i1+12)), op(0x38))))
		f0 =  f0/*fextend*/
		f3 =  ((__xasm<Number>(push((i1+28)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i0+108)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i1+32)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i1+16)), op(0x38))))
		f1 =  f1/*fextend*/
		f0 =  (f2 + f0)
		f2 =  (f5 * f4)
		f1 =  (f6 + f1)
		f3 =  (f3 * f4)
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		f3 =  f3/*fextend*/
		f0 =  f0/*fextend*/
		f2 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  (f0 + f3)
		f1 =  (f1 + f2)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		__asm(push(f0), push((mstate.ebp+-8)), op(0x3d))
		__asm(push(f1), push((mstate.ebp+-4)), op(0x3d))
		i0 =  ((__xasm<int>(push((mstate.ebp+-8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		mstate.edx = i1
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZNK11b2LineJoint16GetReactionForceEf:int = regFunc(FSM__ZNK11b2LineJoint16GetReactionForceEf.start)

public final class FSM__ZNK11b2LineJoint16GetReactionForceEf extends Machine {

	public static function start():void {
		var i0:int, i1:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number

		__asm(label, lbl("__ZNK11b2LineJoint16GetReactionForceEf_entry"))
	__asm(lbl("__ZNK11b2LineJoint16GetReactionForceEf__XprivateX__BB219_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 8
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i0+188)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i0+180)), op(0x38))))
		f0 =  (f0 + f1)
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push((i0+136)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i0+176)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i0+140)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i0+128)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i0+132)), op(0x38))))
		f0 =  f0/*fextend*/
		f5 =  (f5 * f0)
		f0 =  (f4 * f0)
		f3 =  (f3 * f2)
		f1 =  (f1 * f2)
		f2 =  f5/*fround*/
		f0 =  f0/*fround*/
		f3 =  f3/*fround*/
		f1 =  f1/*fround*/
		f2 =  f2/*fextend*/
		f3 =  f3/*fextend*/
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		f2 =  (f3 + f2)
		f0 =  (f1 + f0)
		f1 =  f2/*fround*/
		f0 =  f0/*fround*/
		f2 =  ((__xasm<Number>(push((mstate.ebp+12)), op(0x38))))
		f1 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		f1 =  (f1 * f2)
		f0 =  (f0 * f2)
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		__asm(push(f0), push((mstate.ebp+-4)), op(0x3d))
		__asm(push(f1), push((mstate.ebp+-8)), op(0x3d))
		i0 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+-8)), op(0x37))))
		mstate.edx = i1
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZNK11b2LineJoint17GetReactionTorqueEf:int = regFunc(FSM__ZNK11b2LineJoint17GetReactionTorqueEf.start)

public final class FSM__ZNK11b2LineJoint17GetReactionTorqueEf extends Machine {

	public static function start():void {

		var f0:Number

		__asm(label, lbl("__ZNK11b2LineJoint17GetReactionTorqueEf_entry"))
	__asm(lbl("__ZNK11b2LineJoint17GetReactionTorqueEf__XprivateX__BB220_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		f0 =  (0)
		f0 =  f0/*fround*/
		mstate.st0 = f0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Async
public const __ZN11b2LineJointD1Ev:int = regFunc(FSM__ZN11b2LineJointD1Ev.start)

public final class FSM__ZN11b2LineJointD1Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN11b2LineJointD1Ev = new FSM__ZN11b2LineJointD1Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN11b2LineJointD1Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN11b2LineJointD1Ev_errState",
			"__ZN11b2LineJointD1Ev_state0"))
	__asm(lbl("__ZN11b2LineJointD1Ev_state0"))
	__asm(lbl("__ZN11b2LineJointD1Ev__XprivateX__BB221_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV7b2Joint)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN11b2LineJointD1Ev_errState"))
		throw("Invalid state in __ZN11b2LineJointD1Ev")
	}
}



// Async
public const __ZN11b2LineJointD0Ev:int = regFunc(FSM__ZN11b2LineJointD0Ev.start)

public final class FSM__ZN11b2LineJointD0Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN11b2LineJointD0Ev = new FSM__ZN11b2LineJointD0Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN11b2LineJointD0Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN11b2LineJointD0Ev_errState",
			"__ZN11b2LineJointD0Ev_state0",
			"__ZN11b2LineJointD0Ev_state1"))
	__asm(lbl("__ZN11b2LineJointD0Ev_state0"))
	__asm(lbl("__ZN11b2LineJointD0Ev__XprivateX__BB222_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV7b2Joint)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		__asm(push(i1==0), iftrue, target("__ZN11b2LineJointD0Ev__XprivateX__BB222_2_F"))
	__asm(lbl("__ZN11b2LineJointD0Ev__XprivateX__BB222_1_F"))
		i0 =  (0)
		mstate.esp -= 8
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN11b2LineJointD0Ev_state1"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__ZN11b2LineJointD0Ev__XprivateX__BB222_2_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN11b2LineJointD0Ev_errState"))
		throw("Invalid state in __ZN11b2LineJointD0Ev")
	}
}



// Sync
public const __ZN11b2LineJoint23InitVelocityConstraintsERK10b2TimeStep:int = regFunc(FSM__ZN11b2LineJoint23InitVelocityConstraintsERK10b2TimeStep.start)

public final class FSM__ZN11b2LineJoint23InitVelocityConstraintsERK10b2TimeStep extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
		var i8:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number
		var f8:Number, f9:Number, f10:Number, f11:Number, f12:Number, f13:Number, f14:Number, f15:Number
		var f16:Number, f17:Number, f18:Number, f19:Number, f20:Number, f21:Number, f22:Number, f23:Number
		var f24:Number
		__asm(label, lbl("__ZN11b2LineJoint23InitVelocityConstraintsERK10b2TimeStep_entry"))
	__asm(lbl("__ZN11b2LineJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB223_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		f0 =  (1.19209e-07)
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+48)), op(0x37))))
		f1 =  ((__xasm<Number>(push((i1+36)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i1+40)), op(0x38))))
		i2 =  ((__xasm<int>(push((i0+52)), op(0x37))))
		__asm(push(f1), push((i0+64)), op(0x3d))
		__asm(push(f2), push((i0+68)), op(0x3d))
		f3 =  ((__xasm<Number>(push((i2+36)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i2+40)), op(0x38))))
		__asm(push(f3), push((i0+72)), op(0x3d))
		__asm(push(f4), push((i0+76)), op(0x3d))
		f5 =  ((__xasm<Number>(push((i0+108)), op(0x38))))
		f4 =  f4/*fextend*/
		f6 =  ((__xasm<Number>(push((i0+104)), op(0x38))))
		f3 =  f3/*fextend*/
		f4 =  (f5 - f4)
		f3 =  (f6 - f3)
		f4 =  f4/*fround*/
		f3 =  f3/*fround*/
		f5 =  ((__xasm<Number>(push((i2+20)), op(0x38))))
		f3 =  f3/*fextend*/
		f6 =  ((__xasm<Number>(push((i2+24)), op(0x38))))
		f7 =  ((__xasm<Number>(push((i2+28)), op(0x38))))
		f4 =  f4/*fextend*/
		f8 =  ((__xasm<Number>(push((i2+32)), op(0x38))))
		f5 =  (f5 * f3)
		f3 =  (f6 * f3)
		f6 =  (f7 * f4)
		f4 =  (f8 * f4)
		f5 =  f5/*fround*/
		f3 =  f3/*fround*/
		f6 =  f6/*fround*/
		f4 =  f4/*fround*/
		f7 =  ((__xasm<Number>(push((i1+20)), op(0x38))))
		f8 =  ((__xasm<Number>(push((i1+24)), op(0x38))))
		f9 =  ((__xasm<Number>(push((i1+28)), op(0x38))))
		f10 =  ((__xasm<Number>(push((i1+32)), op(0x38))))
		f11 =  ((__xasm<Number>(push((i1+128)), op(0x38))))
		f12 =  ((__xasm<Number>(push((i0+100)), op(0x38))))
		f2 =  f2/*fextend*/
		f13 =  ((__xasm<Number>(push((i0+96)), op(0x38))))
		f1 =  f1/*fextend*/
		f14 =  ((__xasm<Number>(push((i2+56)), op(0x38))))
		f15 =  ((__xasm<Number>(push((i2+52)), op(0x38))))
		f16 =  ((__xasm<Number>(push((i1+56)), op(0x38))))
		f17 =  ((__xasm<Number>(push((i1+52)), op(0x38))))
		f6 =  f6/*fextend*/
		f5 =  f5/*fextend*/
		f4 =  f4/*fextend*/
		f3 =  f3/*fextend*/
		f5 =  (f5 + f6)
		f3 =  (f3 + f4)
		f2 =  (f12 - f2)
		f1 =  (f13 - f1)
		__asm(push(f11), push((i0+80)), op(0x3d))
		f4 =  f5/*fround*/
		f3 =  f3/*fround*/
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		f5 =  ((__xasm<Number>(push((i1+136)), op(0x38))))
		f6 =  f4/*fextend*/
		f12 =  f3/*fextend*/
		f13 =  f7/*fextend*/
		f1 =  f1/*fextend*/
		f18 =  f8/*fextend*/
		f19 =  f9/*fextend*/
		f2 =  f2/*fextend*/
		f20 =  f10/*fextend*/
		__asm(push(f5), push((i0+84)), op(0x3d))
		f21 =  (f13 * f1)
		f1 =  (f18 * f1)
		f22 =  (f19 * f2)
		f2 =  (f20 * f2)
		f15 =  (f15 + f6)
		f14 =  (f14 + f12)
		f23 =  ((__xasm<Number>(push((i2+128)), op(0x38))))
		f21 =  f21/*fround*/
		f1 =  f1/*fround*/
		f22 =  f22/*fround*/
		f2 =  f2/*fround*/
		f15 =  f15/*fround*/
		f14 =  f14/*fround*/
		__asm(push(f23), push((i0+88)), op(0x3d))
		f15 =  f15/*fextend*/
		f14 =  f14/*fextend*/
		f22 =  f22/*fextend*/
		f21 =  f21/*fextend*/
		f2 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		f24 =  ((__xasm<Number>(push((i2+136)), op(0x38))))
		f21 =  (f21 + f22)
		f1 =  (f1 + f2)
		f2 =  (f15 - f17)
		f14 =  (f14 - f16)
		__asm(push(f24), push((i0+92)), op(0x3d))
		f15 =  f21/*fround*/
		f1 =  f1/*fround*/
		f2 =  f2/*fround*/
		f14 =  f14/*fround*/
		f16 =  ((__xasm<Number>(push((i0+112)), op(0x38))))
		f17 =  ((__xasm<Number>(push((i0+116)), op(0x38))))
		f15 =  f15/*fextend*/
		f2 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		f14 =  f14/*fextend*/
		f2 =  (f2 - f15)
		f18 =  (f18 * f16)
		f13 =  (f13 * f16)
		f16 =  (f20 * f17)
		f17 =  (f19 * f17)
		f14 =  (f14 - f1)
		f2 =  f2/*fround*/
		f18 =  f18/*fround*/
		f13 =  f13/*fround*/
		f16 =  f16/*fround*/
		f17 =  f17/*fround*/
		f14 =  f14/*fround*/
		f19 =  f2/*fextend*/
		f20 =  f14/*fextend*/
		f16 =  f16/*fextend*/
		f18 =  f18/*fextend*/
		f17 =  f17/*fextend*/
		f13 =  f13/*fextend*/
		f15 =  (f19 + f15)
		f16 =  (f18 + f16)
		f13 =  (f13 + f17)
		f1 =  (f20 + f1)
		f15 =  f15/*fround*/
		f16 =  f16/*fround*/
		f13 =  f13/*fround*/
		f1 =  f1/*fround*/
		f17 =  f16/*fextend*/
		f18 =  f15/*fextend*/
		f19 =  f13/*fextend*/
		f20 =  f1/*fextend*/
		f18 =  (f18 * f17)
		f20 =  (f20 * f19)
		f18 =  f18/*fround*/
		f20 =  f20/*fround*/
		f20 =  f20/*fextend*/
		f18 =  f18/*fextend*/
		f18 =  (f18 - f20)
		f6 =  (f6 * f17)
		f12 =  (f12 * f19)
		f17 =  f18/*fround*/
		f6 =  f6/*fround*/
		f12 =  f12/*fround*/
		f18 =  f17/*fextend*/
		f19 =  f5/*fextend*/
		f12 =  f12/*fextend*/
		f6 =  f6/*fextend*/
		f19 =  (f19 * f18)
		f6 =  (f6 - f12)
		f12 =  f19/*fround*/
		f6 =  f6/*fround*/
		f12 =  f12/*fextend*/
		f19 =  f6/*fextend*/
		f20 =  f24/*fextend*/
		f21 =  f23/*fextend*/
		f22 =  f11/*fextend*/
		f12 =  (f12 * f18)
		f18 =  (f20 * f19)
		f20 =  (f22 + f21)
		f12 =  f12/*fround*/
		f18 =  f18/*fround*/
		f20 =  f20/*fround*/
		f18 =  f18/*fextend*/
		f12 =  f12/*fextend*/
		f21 =  f20/*fextend*/
		f12 =  (f21 + f12)
		f18 =  (f18 * f19)
		__asm(push(f13), push((i0+128)), op(0x3d))
		f12 =  f12/*fround*/
		f18 =  f18/*fround*/
		__asm(push(f16), push((i0+132)), op(0x3d))
		f18 =  f18/*fextend*/
		f12 =  f12/*fextend*/
		__asm(push(f17), push((i0+152)), op(0x3d))
		f12 =  (f12 + f18)
		f12 =  f12/*fround*/
		__asm(push(f6), push((i0+156)), op(0x3d))
		__asm(push(f12), push((i0+184)), op(0x3d))
		i3 =  (i0 + 184)
		i4 =  (i0 + 92)
		i5 =  (i0 + 88)
		i6 =  (i0 + 84)
		i7 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f18 =  f12/*fextend*/
		__asm(push(f18>f0), iftrue, target("__ZN11b2LineJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB223_2_F"))
	__asm(lbl("__ZN11b2LineJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB223_1_F"))
		f0 =  (0)
		f12 =  f0/*fround*/
		__asm(jump, target("__ZN11b2LineJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB223_3_F"))
	__asm(lbl("__ZN11b2LineJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB223_2_F"))
		f0 =  (1)
		f0 =  f0/*fround*/
		f12 =  f12/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 / f12)
		f12 =  f0/*fround*/
	__asm(lbl("__ZN11b2LineJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB223_3_F"))
		f0 = f12
		__asm(push(f0), push(i3), op(0x3d))
		f0 =  ((__xasm<Number>(push((i0+120)), op(0x38))))
		f12 =  ((__xasm<Number>(push((i0+124)), op(0x38))))
		f8 =  f8/*fextend*/
		f7 =  f7/*fextend*/
		f10 =  f10/*fextend*/
		f9 =  f9/*fextend*/
		f8 =  (f8 * f0)
		f0 =  (f7 * f0)
		f7 =  (f10 * f12)
		f9 =  (f9 * f12)
		f8 =  f8/*fround*/
		f0 =  f0/*fround*/
		f7 =  f7/*fround*/
		f9 =  f9/*fround*/
		f7 =  f7/*fextend*/
		f8 =  f8/*fextend*/
		f9 =  f9/*fextend*/
		f0 =  f0/*fextend*/
		f7 =  (f8 + f7)
		f0 =  (f0 + f9)
		f7 =  f7/*fround*/
		f0 =  f0/*fround*/
		f8 =  f15/*fextend*/
		f9 =  f7/*fextend*/
		f1 =  f1/*fextend*/
		f10 =  f0/*fextend*/
		f8 =  (f8 * f9)
		f1 =  (f1 * f10)
		f8 =  f8/*fround*/
		f1 =  f1/*fround*/
		f4 =  f4/*fextend*/
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f8 =  f8/*fextend*/
		f1 =  (f8 - f1)
		f4 =  (f4 * f9)
		f3 =  (f3 * f10)
		f1 =  f1/*fround*/
		f4 =  f4/*fround*/
		f3 =  f3/*fround*/
		f8 =  f1/*fextend*/
		f5 =  f5/*fextend*/
		f3 =  f3/*fextend*/
		f4 =  f4/*fextend*/
		f9 =  (f8 * f5)
		f3 =  (f4 - f3)
		f4 =  f9/*fround*/
		f3 =  f3/*fround*/
		f4 =  f4/*fextend*/
		f9 =  f17/*fextend*/
		f10 =  f3/*fextend*/
		f12 =  f24/*fextend*/
		f8 =  (f4 * f8)
		f15 =  (f10 * f12)
		f5 =  (f9 * f5)
		f8 =  f8/*fround*/
		f15 =  f15/*fround*/
		f5 =  f5/*fround*/
		f15 =  f15/*fextend*/
		f18 =  f6/*fextend*/
		f5 =  f5/*fextend*/
		f8 =  f8/*fextend*/
		f19 =  f20/*fextend*/
		f8 =  (f19 + f8)
		f10 =  (f15 * f10)
		f5 =  (f5 * f9)
		f12 =  (f18 * f12)
		__asm(push(f0), push((i0+136)), op(0x3d))
		f8 =  f8/*fround*/
		f4 =  (f4 * f9)
		f9 =  f10/*fround*/
		f10 =  (f15 * f18)
		f5 =  f5/*fround*/
		f12 =  f12/*fround*/
		__asm(push(f7), push((i0+140)), op(0x3d))
		f4 =  f4/*fround*/
		f10 =  f10/*fround*/
		f5 =  f5/*fextend*/
		f12 =  f12/*fextend*/
		f9 =  f9/*fextend*/
		f8 =  f8/*fextend*/
		__asm(push(f1), push((i0+144)), op(0x3d))
		f8 =  (f8 + f9)
		f5 =  (f19 + f5)
		f9 =  (f12 * f18)
		f10 =  f10/*fextend*/
		f4 =  f4/*fextend*/
		f4 =  (f4 + f10)
		f5 =  f5/*fround*/
		f9 =  f9/*fround*/
		__asm(push(f3), push((i0+148)), op(0x3d))
		f8 =  f8/*fround*/
		__asm(push(f8), push((i0+160)), op(0x3d))
		f4 =  f4/*fround*/
		f8 =  f9/*fextend*/
		f5 =  f5/*fextend*/
		__asm(push(f4), push((i0+164)), op(0x3d))
		f5 =  (f5 + f8)
		__asm(push(f4), push((i0+168)), op(0x3d))
		f4 =  f5/*fround*/
		__asm(push(f4), push((i0+172)), op(0x3d))
		i3 =  ((__xasm<int>(push((i0+208)), op(0x35))))
		__asm(push(i3==0), iftrue, target("__ZN11b2LineJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB223_13_F"))
	__asm(lbl("__ZN11b2LineJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB223_4_F"))
		f4 =  (0)
		f5 =  ((__xasm<Number>(push((i0+196)), op(0x38))))
		f8 =  ((__xasm<Number>(push((i0+192)), op(0x38))))
		f2 =  f2/*fextend*/
		f9 =  f13/*fextend*/
		f10 =  f14/*fextend*/
		f12 =  f16/*fextend*/
		f2 =  (f9 * f2)
		f9 =  (f12 * f10)
		f10 =  f5/*fextend*/
		f12 =  f8/*fextend*/
		f2 =  f2/*fround*/
		f9 =  f9/*fround*/
		f14 =  (f10 - f12)
		f10 =  (f12 - f10)
		f12 =  f14/*fround*/
		f10 =  f10/*fround*/
		f4 =  f4/*fround*/
		f9 =  f9/*fextend*/
		f2 =  f2/*fextend*/
		f14 =  ((__xasm<Number>(push(_b2_linearSlop), op(0x38))))
		f2 =  (f2 + f9)
		f9 =  f10/*fextend*/
		f4 =  f4/*fextend*/
		f10 =  f12/*fextend*/
		f2 =  f2/*fround*/
		f4 =  ((f10<=f4) ? f9 : f10)
		f9 =  (f14 + f14)
		f4 =  f4/*fround*/
		f9 =  f9/*fround*/
		f9 =  f9/*fextend*/
		f4 =  f4/*fextend*/
		__asm(push(f4>=f9), iftrue, target("__ZN11b2LineJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB223_6_F"))
	__asm(lbl("__ZN11b2LineJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB223_5_F"))
		i3 =  (3)
		__asm(push(i3), push((i0+212)), op(0x3c))
		i3 =  ((__xasm<int>(push((i0+209)), op(0x35))))
		__asm(push(i3==0), iftrue, target("__ZN11b2LineJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB223_15_F"))
		__asm(jump, target("__ZN11b2LineJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB223_16_F"))
	__asm(lbl("__ZN11b2LineJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB223_6_F"))
		f4 =  f2/*fextend*/
		f8 =  f8/*fextend*/
		__asm(push(f8<f4), iftrue, target("__ZN11b2LineJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB223_9_F"))
	__asm(lbl("__ZN11b2LineJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB223_7_F"))
		i3 =  ((__xasm<int>(push((i0+212)), op(0x37))))
		i8 =  (i0 + 212)
		__asm(push(i3==1), iftrue, target("__ZN11b2LineJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB223_14_F"))
	__asm(lbl("__ZN11b2LineJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB223_8_F"))
		i3 =  (1)
		__asm(push(i3), push(i8), op(0x3c))
		i3 =  (0)
		__asm(push(i3), push((i0+180)), op(0x3c))
		i3 =  ((__xasm<int>(push((i0+209)), op(0x35))))
		__asm(push(i3==0), iftrue, target("__ZN11b2LineJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB223_15_F"))
		__asm(jump, target("__ZN11b2LineJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB223_16_F"))
	__asm(lbl("__ZN11b2LineJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB223_9_F"))
		i3 =  (i0 + 212)
		f2 =  f2/*fextend*/
		f4 =  f5/*fextend*/
		__asm(push(f4>f2), iftrue, target("__ZN11b2LineJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB223_12_F"))
	__asm(lbl("__ZN11b2LineJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB223_10_F"))
		i8 =  ((__xasm<int>(push(i3), op(0x37))))
		__asm(push(i8==2), iftrue, target("__ZN11b2LineJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB223_14_F"))
	__asm(lbl("__ZN11b2LineJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB223_11_F"))
		i8 =  (2)
		__asm(push(i8), push(i3), op(0x3c))
		i3 =  (0)
		__asm(push(i3), push((i0+180)), op(0x3c))
		i3 =  ((__xasm<int>(push((i0+209)), op(0x35))))
		__asm(push(i3==0), iftrue, target("__ZN11b2LineJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB223_15_F"))
		__asm(jump, target("__ZN11b2LineJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB223_16_F"))
	__asm(lbl("__ZN11b2LineJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB223_12_F"))
		i8 =  (0)
		__asm(push(i8), push(i3), op(0x3c))
		__asm(push(i8), push((i0+180)), op(0x3c))
		i3 =  ((__xasm<int>(push((i0+209)), op(0x35))))
		__asm(push(i3==0), iftrue, target("__ZN11b2LineJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB223_15_F"))
		__asm(jump, target("__ZN11b2LineJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB223_16_F"))
	__asm(lbl("__ZN11b2LineJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB223_13_F"))
		i3 =  (0)
		__asm(push(i3), push((i0+212)), op(0x3c))
	__asm(lbl("__ZN11b2LineJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB223_14_F"))
		i3 =  ((__xasm<int>(push((i0+209)), op(0x35))))
		__asm(push(i3!=0), iftrue, target("__ZN11b2LineJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB223_16_F"))
	__asm(lbl("__ZN11b2LineJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB223_15_F"))
		i3 =  (0)
		__asm(push(i3), push((i0+188)), op(0x3c))
	__asm(lbl("__ZN11b2LineJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB223_16_F"))
		i3 =  ((__xasm<int>(push((i7+20)), op(0x35))))
		__asm(push(i3==0), iftrue, target("__ZN11b2LineJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB223_18_F"))
	__asm(lbl("__ZN11b2LineJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB223_17_F"))
		f2 =  ((__xasm<Number>(push((i7+8)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i0+176)), op(0x38))))
		f4 =  (f4 * f2)
		f4 =  f4/*fround*/
		__asm(push(f4), push((i0+176)), op(0x3d))
		f5 =  ((__xasm<Number>(push((i0+180)), op(0x38))))
		f2 =  (f5 * f2)
		f2 =  f2/*fround*/
		__asm(push(f2), push((i0+180)), op(0x3d))
		f5 =  ((__xasm<Number>(push((i0+188)), op(0x38))))
		f8 =  ((__xasm<Number>(push((i7+8)), op(0x38))))
		f5 =  (f5 * f8)
		f5 =  f5/*fround*/
		f2 =  f2/*fextend*/
		f8 =  f5/*fextend*/
		f2 =  (f8 + f2)
		f2 =  f2/*fround*/
		f8 =  f13/*fextend*/
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f4 =  f4/*fextend*/
		f8 =  (f8 * f2)
		f0 =  (f0 * f4)
		f8 =  f8/*fround*/
		f0 =  f0/*fround*/
		f8 =  f8/*fextend*/
		f0 =  f0/*fextend*/
		f9 =  f16/*fextend*/
		f0 =  (f0 + f8)
		f7 =  f7/*fextend*/
		f8 =  (f9 * f2)
		f0 =  f0/*fround*/
		f7 =  (f7 * f4)
		f8 =  f8/*fround*/
		f7 =  f7/*fround*/
		f9 =  f11/*fextend*/
		f0 =  f0/*fextend*/
		f10 =  (f0 * f9)
		f8 =  f8/*fextend*/
		f7 =  f7/*fextend*/
		f7 =  (f7 + f8)
		f8 =  f10/*fround*/
		__asm(push(f5), push((i0+188)), op(0x3d))
		f5 =  f7/*fround*/
		f7 =  ((__xasm<Number>(push((i1+72)), op(0x38))))
		f8 =  f8/*fextend*/
		f7 =  (f7 - f8)
		f5 =  f5/*fextend*/
		f7 =  f7/*fround*/
		f8 =  (f5 * f9)
		f9 =  f17/*fextend*/
		f1 =  f1/*fextend*/
		__asm(push(f7), push((i1+72)), op(0x3d))
		f7 =  f8/*fround*/
		f8 =  (f2 * f9)
		f1 =  (f4 * f1)
		f8 =  f8/*fround*/
		f1 =  f1/*fround*/
		f9 =  ((__xasm<Number>(push((i1+76)), op(0x38))))
		f7 =  f7/*fextend*/
		f7 =  (f9 - f7)
		f8 =  f8/*fextend*/
		f1 =  f1/*fextend*/
		f7 =  f7/*fround*/
		f1 =  (f1 + f8)
		__asm(push(f7), push((i1+76)), op(0x3d))
		f1 =  f1/*fround*/
		f7 =  ((__xasm<Number>(push(i6), op(0x38))))
		f1 =  f1/*fextend*/
		f1 =  (f7 * f1)
		f1 =  f1/*fround*/
		f7 =  ((__xasm<Number>(push((i1+80)), op(0x38))))
		f1 =  f1/*fextend*/
		f1 =  (f7 - f1)
		f1 =  f1/*fround*/
		__asm(push(f1), push((i1+80)), op(0x3d))
		f1 =  ((__xasm<Number>(push(i5), op(0x38))))
		f0 =  (f0 * f1)
		f0 =  f0/*fround*/
		f7 =  ((__xasm<Number>(push((i2+72)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f7 + f0)
		f1 =  (f5 * f1)
		f5 =  f6/*fextend*/
		f3 =  f3/*fextend*/
		f0 =  f0/*fround*/
		__asm(push(f0), push((i2+72)), op(0x3d))
		f0 =  f1/*fround*/
		f1 =  (f2 * f5)
		f2 =  (f4 * f3)
		f1 =  f1/*fround*/
		f2 =  f2/*fround*/
		f3 =  ((__xasm<Number>(push((i2+76)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f3 + f0)
		f1 =  f1/*fextend*/
		f2 =  f2/*fextend*/
		f0 =  f0/*fround*/
		f1 =  (f2 + f1)
		__asm(push(f0), push((i2+76)), op(0x3d))
		f0 =  f1/*fround*/
		f1 =  ((__xasm<Number>(push(i4), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f1 * f0)
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push((i2+80)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f1 + f0)
		f0 =  f0/*fround*/
		__asm(push(f0), push((i2+80)), op(0x3d))
		__asm(jump, target("__ZN11b2LineJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB223_19_F"))
	__asm(lbl("__ZN11b2LineJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB223_18_F"))
		i1 =  (0)
		__asm(push(i1), push((i0+176)), op(0x3c))
		__asm(push(i1), push((i0+180)), op(0x3c))
		__asm(push(i1), push((i0+188)), op(0x3c))
	__asm(lbl("__ZN11b2LineJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB223_19_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZN11b2LineJoint24SolveVelocityConstraintsERK10b2TimeStep:int = regFunc(FSM__ZN11b2LineJoint24SolveVelocityConstraintsERK10b2TimeStep.start)

public final class FSM__ZN11b2LineJoint24SolveVelocityConstraintsERK10b2TimeStep extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
		var i8:int, i9:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number
		var f8:Number, f9:Number, f10:Number, f11:Number, f12:Number, f13:Number, f14:Number, f15:Number
		var f16:Number, f17:Number, f18:Number, f19:Number, f20:Number, f21:Number, f22:Number, f23:Number
		var f24:Number, f25:Number, f26:Number, f27:Number
		__asm(label, lbl("__ZN11b2LineJoint24SolveVelocityConstraintsERK10b2TimeStep_entry"))
	__asm(lbl("__ZN11b2LineJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB224_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+48)), op(0x37))))
		i2 =  ((__xasm<int>(push((i0+52)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i1+72)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i1+76)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i1+80)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i2+72)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i2+76)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i2+80)), op(0x38))))
		i3 =  ((__xasm<int>(push((i0+209)), op(0x35))))
		i4 =  (i1 + 76)
		i5 =  (i2 + 76)
		i6 =  (i2 + 80)
		i2 =  (i2 + 72)
		i7 =  (i1 + 80)
		i1 =  (i1 + 72)
		i8 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		__asm(push(i3!=0), iftrue, target("__ZN11b2LineJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB224_2_F"))
	__asm(jump, target("__ZN11b2LineJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB224_1_F"), lbl("__ZN11b2LineJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB224_1_B"), label, lbl("__ZN11b2LineJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB224_1_F")); 
		__asm(jump, target("__ZN11b2LineJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB224_4_F"))
	__asm(lbl("__ZN11b2LineJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB224_2_F"))
		i3 =  ((__xasm<int>(push((i0+212)), op(0x37))))
		__asm(push(i3==3), iftrue, target("__ZN11b2LineJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB224_1_B"))
	__asm(lbl("__ZN11b2LineJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB224_3_F"))
		f1 =  f1/*fextend*/
		f4 =  f4/*fextend*/
		f0 =  f0/*fextend*/
		f3 =  f3/*fextend*/
		f6 =  (f4 - f1)
		f7 =  (f3 - f0)
		f6 =  f6/*fround*/
		f7 =  f7/*fround*/
		f8 =  ((__xasm<Number>(push((i0+128)), op(0x38))))
		f7 =  f7/*fextend*/
		f9 =  ((__xasm<Number>(push((i0+132)), op(0x38))))
		f6 =  f6/*fextend*/
		f6 =  (f9 * f6)
		f7 =  (f8 * f7)
		f6 =  f6/*fround*/
		f7 =  f7/*fround*/
		f10 =  ((__xasm<Number>(push((i0+156)), op(0x38))))
		f5 =  f5/*fextend*/
		f6 =  f6/*fextend*/
		f7 =  f7/*fextend*/
		f6 =  (f7 + f6)
		f7 =  (f10 * f5)
		f6 =  f6/*fround*/
		f7 =  f7/*fround*/
		f11 =  ((__xasm<Number>(push((i0+152)), op(0x38))))
		f2 =  f2/*fextend*/
		f7 =  f7/*fextend*/
		f6 =  f6/*fextend*/
		f6 =  (f6 + f7)
		f7 =  (f11 * f2)
		f6 =  f6/*fround*/
		f7 =  f7/*fround*/
		f7 =  f7/*fextend*/
		f6 =  f6/*fextend*/
		f6 =  (f6 - f7)
		f6 =  f6/*fround*/
		f7 =  ((__xasm<Number>(push((i0+204)), op(0x38))))
		f6 =  f6/*fextend*/
		f6 =  (f7 - f6)
		f6 =  f6/*fround*/
		f7 =  ((__xasm<Number>(push((i0+184)), op(0x38))))
		f6 =  f6/*fextend*/
		f6 =  (f7 * f6)
		f6 =  f6/*fround*/
		f7 =  ((__xasm<Number>(push((i0+188)), op(0x38))))
		f6 =  f6/*fextend*/
		f12 =  ((__xasm<Number>(push(i8), op(0x38))))
		f13 =  ((__xasm<Number>(push((i0+200)), op(0x38))))
		f6 =  (f7 + f6)
		f12 =  (f12 * f13)
		f6 =  f6/*fround*/
		f12 =  f12/*fround*/
		f12 =  f12/*fextend*/
		f6 =  f6/*fextend*/
		f6 =  ((f6<f12) ? f6 : f12)
		f12 =  -f12
		f6 =  f6/*fround*/
		f12 =  f12/*fround*/
		f12 =  f12/*fextend*/
		f6 =  f6/*fextend*/
		f6 =  ((f6<f12) ? f12 : f6)
		f6 =  f6/*fround*/
		f12 =  f6/*fextend*/
		f7 =  (f12 - f7)
		f7 =  f7/*fround*/
		f7 =  f7/*fextend*/
		f9 =  (f9 * f7)
		f8 =  (f8 * f7)
		f11 =  (f11 * f7)
		f7 =  (f10 * f7)
		__asm(push(f6), push((i0+188)), op(0x3d))
		f6 =  f9/*fround*/
		f8 =  f8/*fround*/
		f9 =  f11/*fround*/
		f7 =  f7/*fround*/
		f10 =  ((__xasm<Number>(push((i0+80)), op(0x38))))
		f6 =  f6/*fextend*/
		f11 =  ((__xasm<Number>(push((i0+88)), op(0x38))))
		f8 =  f8/*fextend*/
		f12 =  ((__xasm<Number>(push((i0+84)), op(0x38))))
		f13 =  ((__xasm<Number>(push((i0+92)), op(0x38))))
		f9 =  f9/*fextend*/
		f7 =  f7/*fextend*/
		f14 =  (f6 * f10)
		f10 =  (f8 * f10)
		f9 =  (f12 * f9)
		f6 =  (f6 * f11)
		f8 =  (f8 * f11)
		f7 =  (f13 * f7)
		f11 =  f14/*fround*/
		f10 =  f10/*fround*/
		f9 =  f9/*fround*/
		f6 =  f6/*fround*/
		f8 =  f8/*fround*/
		f7 =  f7/*fround*/
		f11 =  f11/*fextend*/
		f10 =  f10/*fextend*/
		f9 =  f9/*fextend*/
		f6 =  f6/*fextend*/
		f8 =  f8/*fextend*/
		f7 =  f7/*fextend*/
		f1 =  (f1 - f11)
		f0 =  (f0 - f10)
		f2 =  (f2 - f9)
		f4 =  (f4 + f6)
		f3 =  (f3 + f8)
		f5 =  (f7 + f5)
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f4 =  f4/*fround*/
		f3 =  f3/*fround*/
		f5 =  f5/*fround*/
	__asm(lbl("__ZN11b2LineJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB224_4_F"))
		f6 =  f1/*fextend*/
		f7 =  f4/*fextend*/
		f8 =  f0/*fextend*/
		f9 =  f3/*fextend*/
		f6 =  (f7 - f6)
		f7 =  (f9 - f8)
		f8 =  ((__xasm<Number>(push((i0+136)), op(0x38))))
		f9 =  ((__xasm<Number>(push((i0+140)), op(0x38))))
		f6 =  f6/*fround*/
		f7 =  f7/*fround*/
		f10 =  f6/*fextend*/
		f11 =  f9/*fextend*/
		f12 =  f7/*fextend*/
		f13 =  f8/*fextend*/
		f10 =  (f11 * f10)
		f11 =  (f13 * f12)
		f12 =  ((__xasm<Number>(push((i0+148)), op(0x38))))
		f10 =  f10/*fround*/
		f11 =  f11/*fround*/
		f10 =  f10/*fextend*/
		f11 =  f11/*fextend*/
		f13 =  f5/*fextend*/
		f14 =  f12/*fextend*/
		f10 =  (f11 + f10)
		f11 =  (f14 * f13)
		f13 =  ((__xasm<Number>(push((i0+144)), op(0x38))))
		f10 =  f10/*fround*/
		f11 =  f11/*fround*/
		f11 =  f11/*fextend*/
		f10 =  f10/*fextend*/
		f14 =  f2/*fextend*/
		f15 =  f13/*fextend*/
		f10 =  (f10 + f11)
		f11 =  (f15 * f14)
		f10 =  f10/*fround*/
		f11 =  f11/*fround*/
		f11 =  f11/*fextend*/
		f10 =  f10/*fextend*/
		i3 =  ((__xasm<int>(push((i0+208)), op(0x35))))
		f10 =  (f10 - f11)
		f10 =  f10/*fround*/
		__asm(push(i3==0), iftrue, target("__ZN11b2LineJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB224_20_F"))
	__asm(lbl("__ZN11b2LineJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB224_5_F"))
		i3 =  ((__xasm<int>(push((i0+212)), op(0x37))))
		__asm(push(i3==0), iftrue, target("__ZN11b2LineJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB224_20_F"))
	__asm(lbl("__ZN11b2LineJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB224_6_F"))
		f11 =  (0)
		f14 =  ((__xasm<Number>(push((i0+128)), op(0x38))))
		f15 =  ((__xasm<Number>(push((i0+132)), op(0x38))))
		f7 =  f7/*fextend*/
		f16 =  f14/*fextend*/
		f6 =  f6/*fextend*/
		f17 =  f15/*fextend*/
		f7 =  (f16 * f7)
		f6 =  (f17 * f6)
		f16 =  ((__xasm<Number>(push((i0+156)), op(0x38))))
		f7 =  f7/*fround*/
		f6 =  f6/*fround*/
		f6 =  f6/*fextend*/
		f7 =  f7/*fextend*/
		f17 =  f5/*fextend*/
		f18 =  f16/*fextend*/
		f6 =  (f7 + f6)
		f7 =  (f18 * f17)
		f17 =  ((__xasm<Number>(push((i0+152)), op(0x38))))
		f18 =  ((__xasm<Number>(push((i0+160)), op(0x38))))
		f19 =  ((__xasm<Number>(push((i0+168)), op(0x38))))
		f20 =  ((__xasm<Number>(push((i0+164)), op(0x38))))
		f21 =  ((__xasm<Number>(push((i0+172)), op(0x38))))
		f6 =  f6/*fround*/
		f7 =  f7/*fround*/
		f7 =  f7/*fextend*/
		f6 =  f6/*fextend*/
		f22 =  f2/*fextend*/
		f23 =  f17/*fextend*/
		f24 =  f21/*fextend*/
		f25 =  f18/*fextend*/
		f26 =  f20/*fextend*/
		f27 =  f19/*fextend*/
		f6 =  (f6 + f7)
		f7 =  (f23 * f22)
		f22 =  (f25 * f24)
		f23 =  (f27 * f26)
		f6 =  f6/*fround*/
		f7 =  f7/*fround*/
		f22 =  f22/*fround*/
		f23 =  f23/*fround*/
		f10 =  f10/*fextend*/
		f6 =  f6/*fextend*/
		f7 =  f7/*fextend*/
		f23 =  f23/*fextend*/
		f22 =  f22/*fextend*/
		f6 =  (f7 - f6)
		f7 =  (f22 - f23)
		f10 =  -f10
		f22 =  ((__xasm<Number>(push((i0+176)), op(0x38))))
		f23 =  ((__xasm<Number>(push((i0+180)), op(0x38))))
		f7 =  f7/*fround*/
		f6 =  f6/*fround*/
		f10 =  f10/*fround*/
		i8 =  (i0 + 180)
		i9 =  (i0 + 176)
		f11 =  f11/*fround*/
		f11 =  f11/*fextend*/
		f24 =  f7/*fextend*/
		__asm(push(f24!=f11), iftrue, target("__ZN11b2LineJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB224_8_F"))
	__asm(lbl("__ZN11b2LineJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB224_7_F"))
		__asm(jump, target("__ZN11b2LineJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB224_9_F"))
	__asm(lbl("__ZN11b2LineJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB224_8_F"))
		f11 =  (1)
		f11 =  f11/*fround*/
		f7 =  f7/*fextend*/
		f11 =  f11/*fextend*/
		f7 =  (f11 / f7)
		f7 =  f7/*fround*/
	__asm(lbl("__ZN11b2LineJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB224_9_F"))
		f11 =  f21/*fextend*/
		f21 =  f10/*fextend*/
		f24 =  f19/*fextend*/
		f6 =  f6/*fextend*/
		f11 =  (f11 * f21)
		f20 =  f20/*fextend*/
		f24 =  (f24 * f6)
		f25 =  f18/*fextend*/
		f11 =  f11/*fround*/
		f20 =  (f20 * f21)
		f21 =  f24/*fround*/
		f6 =  (f25 * f6)
		f20 =  f20/*fround*/
		f6 =  f6/*fround*/
		f21 =  f21/*fextend*/
		f11 =  f11/*fextend*/
		f11 =  (f11 - f21)
		f20 =  f20/*fextend*/
		f6 =  f6/*fextend*/
		f11 =  f11/*fround*/
		f6 =  (f6 - f20)
		f6 =  f6/*fround*/
		f11 =  f11/*fextend*/
		f7 =  f7/*fextend*/
		f11 =  (f11 * f7)
		f6 =  f6/*fextend*/
		f11 =  f11/*fround*/
		f6 =  (f6 * f7)
		f6 =  f6/*fround*/
		f7 =  f11/*fextend*/
		f11 =  f22/*fextend*/
		f7 =  (f11 + f7)
		f6 =  f6/*fextend*/
		f11 =  f23/*fextend*/
		f6 =  (f11 + f6)
		f7 =  f7/*fround*/
		__asm(push(f7), push(i9), op(0x3d))
		f6 =  f6/*fround*/
		__asm(push(f6), push(i8), op(0x3d))
		__asm(push(i3==1), iftrue, target("__ZN11b2LineJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB224_12_F"))
	__asm(lbl("__ZN11b2LineJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB224_10_F"))
		__asm(push(i3==2), iftrue, target("__ZN11b2LineJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB224_16_F"))
	__asm(lbl("__ZN11b2LineJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB224_11_F"))
		__asm(jump, target("__ZN11b2LineJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB224_17_F"))
	__asm(lbl("__ZN11b2LineJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB224_12_F"))
		f7 =  (0)
		f7 =  f7/*fround*/
		f7 =  f7/*fextend*/
		f6 =  f6/*fextend*/
		f6 =  ((f6>f7) ? f6 : f7)
		f6 =  f6/*fround*/
		__asm(push(f6), push(i8), op(0x3d))
		f11 =  f18/*fextend*/
		__asm(push(f11!=f7), iftrue, target("__ZN11b2LineJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB224_14_F"))
	__asm(lbl("__ZN11b2LineJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB224_13_F"))
		f10 = f22
		__asm(jump, target("__ZN11b2LineJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB224_19_F"))
	__asm(lbl("__ZN11b2LineJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB224_14_F"))
		__asm(jump, target("__ZN11b2LineJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB224_15_F"))
	__asm(jump, target("__ZN11b2LineJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB224_15_F"), lbl("__ZN11b2LineJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB224_15_B"), label, lbl("__ZN11b2LineJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB224_15_F")); 
		f7 =  f23/*fextend*/
		f11 =  f6/*fextend*/
		f7 =  (f11 - f7)
		f7 =  f7/*fround*/
		f11 =  f19/*fextend*/
		f7 =  f7/*fextend*/
		f7 =  (f7 * f11)
		f7 =  f7/*fround*/
		f7 =  f7/*fextend*/
		f10 =  f10/*fextend*/
		f7 =  (f10 - f7)
		f10 =  f7/*fround*/
		f7 =  f18/*fextend*/
		f10 =  f10/*fextend*/
		f7 =  (f10 / f7)
		f10 =  f7/*fround*/
		f7 =  f22/*fextend*/
		f10 =  f10/*fextend*/
		f7 =  (f10 + f7)
		f10 =  f7/*fround*/
		__asm(jump, target("__ZN11b2LineJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB224_19_F"))
	__asm(lbl("__ZN11b2LineJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB224_16_F"))
		f7 =  (0)
		f7 =  f7/*fround*/
		f7 =  f7/*fextend*/
		f6 =  f6/*fextend*/
		f6 =  ((f6<f7) ? f6 : f7)
		f6 =  f6/*fround*/
		__asm(push(f6), push(i8), op(0x3d))
	__asm(lbl("__ZN11b2LineJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB224_17_F"))
		f7 =  (0)
		f7 =  f7/*fround*/
		f7 =  f7/*fextend*/
		f11 =  f18/*fextend*/
		__asm(push(f11!=f7), iftrue, target("__ZN11b2LineJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB224_15_B"))
	__asm(lbl("__ZN11b2LineJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB224_18_F"))
		f10 = f22
		__asm(jump, target("__ZN11b2LineJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB224_19_F"))
	__asm(lbl("__ZN11b2LineJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB224_19_F"))
		f7 =  f22/*fextend*/
		f11 =  f10/*fextend*/
		f18 =  f23/*fextend*/
		f6 =  f6/*fextend*/
		f7 =  (f11 - f7)
		f6 =  (f6 - f18)
		f7 =  f7/*fround*/
		f6 =  f6/*fround*/
		f9 =  f9/*fextend*/
		f7 =  f7/*fextend*/
		f8 =  f8/*fextend*/
		f11 =  f13/*fextend*/
		f12 =  f12/*fextend*/
		f13 =  f15/*fextend*/
		f6 =  f6/*fextend*/
		f14 =  f14/*fextend*/
		f15 =  f17/*fextend*/
		f16 =  f16/*fextend*/
		f9 =  (f9 * f7)
		f8 =  (f8 * f7)
		f11 =  (f7 * f11)
		f7 =  (f7 * f12)
		f12 =  (f13 * f6)
		f13 =  (f14 * f6)
		f14 =  (f6 * f15)
		f6 =  (f6 * f16)
		f9 =  f9/*fround*/
		f8 =  f8/*fround*/
		f11 =  f11/*fround*/
		f7 =  f7/*fround*/
		f12 =  f12/*fround*/
		f13 =  f13/*fround*/
		f14 =  f14/*fround*/
		f6 =  f6/*fround*/
		__asm(push(f10), push(i9), op(0x3d))
		f10 =  f12/*fextend*/
		f9 =  f9/*fextend*/
		f12 =  f13/*fextend*/
		f8 =  f8/*fextend*/
		f13 =  f14/*fextend*/
		f11 =  f11/*fextend*/
		f6 =  f6/*fextend*/
		f7 =  f7/*fextend*/
		f9 =  (f9 + f10)
		f8 =  (f8 + f12)
		f10 =  (f11 + f13)
		f6 =  (f7 + f6)
		f12 =  ((__xasm<Number>(push((i0+80)), op(0x38))))
		f13 =  ((__xasm<Number>(push((i0+88)), op(0x38))))
		f9 =  f9/*fround*/
		f8 =  f8/*fround*/
		f10 =  f10/*fround*/
		f6 =  f6/*fround*/
		i3 =  (i0 + 92)
		i0 =  (i0 + 84)
		f7 = f8
		f11 = f12
		f14 = f9
		f15 = f13
		__asm(jump, target("__ZN11b2LineJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB224_24_F"))
	__asm(lbl("__ZN11b2LineJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB224_20_F"))
		f6 =  (0)
		f7 =  ((__xasm<Number>(push((i0+160)), op(0x38))))
		f6 =  f6/*fround*/
		f6 =  f6/*fextend*/
		f11 =  f7/*fextend*/
		__asm(push(f11!=f6), iftrue, target("__ZN11b2LineJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB224_22_F"))
	__asm(lbl("__ZN11b2LineJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB224_21_F"))
		f6 =  (0)
		f7 =  f6/*fround*/
		__asm(jump, target("__ZN11b2LineJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB224_23_F"))
	__asm(lbl("__ZN11b2LineJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB224_22_F"))
		f6 =  f10/*fextend*/
		f6 =  -f6
		f6 =  f6/*fround*/
		f7 =  f7/*fextend*/
		f6 =  f6/*fextend*/
		f6 =  (f6 / f7)
		f7 =  f6/*fround*/
	__asm(lbl("__ZN11b2LineJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB224_23_F"))
		f6 = f7
		f7 =  ((__xasm<Number>(push((i0+176)), op(0x38))))
		f6 =  f6/*fextend*/
		f7 =  (f7 + f6)
		f7 =  f7/*fround*/
		__asm(push(f7), push((i0+176)), op(0x3d))
		f7 =  f9/*fextend*/
		f8 =  f8/*fextend*/
		f9 =  f13/*fextend*/
		f10 =  f12/*fextend*/
		f7 =  (f7 * f6)
		f8 =  (f8 * f6)
		f9 =  (f9 * f6)
		f6 =  (f10 * f6)
		f10 =  ((__xasm<Number>(push((i0+80)), op(0x38))))
		f13 =  ((__xasm<Number>(push((i0+88)), op(0x38))))
		f16 =  f7/*fround*/
		f8 =  f8/*fround*/
		f17 =  f9/*fround*/
		f6 =  f6/*fround*/
		i3 =  (i0 + 92)
		i0 =  (i0 + 84)
		f7 = f8
		f11 = f10
		f14 = f16
		f12 = f10
		f15 = f13
		f9 = f16
		f10 = f17
	__asm(lbl("__ZN11b2LineJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB224_24_F"))
		f11 =  f11/*fextend*/
		f7 =  f7/*fextend*/
		f7 =  (f7 * f11)
		f11 =  f12/*fextend*/
		f12 =  f14/*fextend*/
		f7 =  f7/*fround*/
		f11 =  (f12 * f11)
		f12 =  ((__xasm<Number>(push(i0), op(0x38))))
		f10 =  f10/*fextend*/
		f10 =  (f12 * f10)
		f11 =  f11/*fround*/
		f7 =  f7/*fextend*/
		f0 =  f0/*fextend*/
		f12 =  f15/*fextend*/
		f8 =  f8/*fextend*/
		f14 =  ((__xasm<Number>(push(i3), op(0x38))))
		f10 =  f10/*fround*/
		f0 =  (f0 - f7)
		f7 =  (f8 * f12)
		f8 =  f11/*fextend*/
		f1 =  f1/*fextend*/
		f11 =  f13/*fextend*/
		f9 =  f9/*fextend*/
		f6 =  f6/*fextend*/
		f1 =  (f1 - f8)
		f7 =  f7/*fround*/
		f8 =  (f9 * f11)
		f9 =  f10/*fextend*/
		f2 =  f2/*fextend*/
		f0 =  f0/*fround*/
		f2 =  (f2 - f9)
		f6 =  (f14 * f6)
		f8 =  f8/*fround*/
		__asm(push(f0), push(i1), op(0x3d))
		f0 =  f1/*fround*/
		f1 =  f7/*fextend*/
		f3 =  f3/*fextend*/
		f6 =  f6/*fround*/
		f1 =  (f3 + f1)
		__asm(push(f0), push(i4), op(0x3d))
		f0 =  f2/*fround*/
		f2 =  f8/*fextend*/
		f3 =  f4/*fextend*/
		f2 =  (f3 + f2)
		__asm(push(f0), push(i7), op(0x3d))
		f0 =  f5/*fextend*/
		f3 =  f6/*fextend*/
		f1 =  f1/*fround*/
		f0 =  (f3 + f0)
		__asm(push(f1), push(i2), op(0x3d))
		f1 =  f2/*fround*/
		__asm(push(f1), push(i5), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push(i6), op(0x3d))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZN11b2LineJoint24SolvePositionConstraintsEf:int = regFunc(FSM__ZN11b2LineJoint24SolvePositionConstraintsEf.start)

public final class FSM__ZN11b2LineJoint24SolvePositionConstraintsEf extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
		var i8:int, i9:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number
		var f8:Number, f9:Number, f10:Number, f11:Number, f12:Number, f13:Number, f14:Number, f15:Number
		var f16:Number, f17:Number, f18:Number, f19:Number, f20:Number, f21:Number, f22:Number, f23:Number
		var f24:Number, f25:Number, f26:Number
		__asm(label, lbl("__ZN11b2LineJoint24SolvePositionConstraintsEf_entry"))
	__asm(lbl("__ZN11b2LineJoint24SolvePositionConstraintsEf__XprivateX__BB225_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+48)), op(0x37))))
		i2 =  ((__xasm<int>(push((i0+52)), op(0x37))))
		f1 =  ((__xasm<Number>(push((i1+52)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i1+56)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i2+52)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i2+56)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i1+64)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i2+64)), op(0x38))))
		f0 = f5
		//InlineAsmStart
	f0 =  Math.cos(f0);

	//InlineAsmEnd
		f7 = f0
		f0 = f5
		//InlineAsmStart
	f0 =  Math.sin(f0);

	//InlineAsmEnd
		f8 = f0
		f0 = f6
		//InlineAsmStart
	f0 =  Math.cos(f0);

	//InlineAsmEnd
		f9 = f0
		f0 = f6
		//InlineAsmStart
	f0 =  Math.sin(f0);

	//InlineAsmEnd
		f10 =  ((__xasm<Number>(push((i0+108)), op(0x38))))
		f11 =  ((__xasm<Number>(push((i0+76)), op(0x38))))
		f12 =  ((__xasm<Number>(push((i0+104)), op(0x38))))
		f13 =  ((__xasm<Number>(push((i0+72)), op(0x38))))
		f10 =  (f10 - f11)
		f11 =  (f12 - f13)
		f10 =  f10/*fround*/
		f11 =  f11/*fround*/
		f10 =  f10/*fextend*/
		f0 =  f0/*fextend*/
		f11 =  f11/*fextend*/
		f9 =  f9/*fextend*/
		f12 =  (f10 * f0)
		f10 =  (f9 * f10)
		f0 =  (f0 * f11)
		f9 =  (f9 * f11)
		f11 =  f12/*fround*/
		f10 =  f10/*fround*/
		f0 =  f0/*fround*/
		f9 =  f9/*fround*/
		f12 =  ((__xasm<Number>(push((i0+100)), op(0x38))))
		f13 =  ((__xasm<Number>(push((i0+68)), op(0x38))))
		f14 =  ((__xasm<Number>(push((i0+96)), op(0x38))))
		f15 =  ((__xasm<Number>(push((i0+64)), op(0x38))))
		f11 =  f11/*fextend*/
		f9 =  f9/*fextend*/
		f10 =  f10/*fextend*/
		f0 =  f0/*fextend*/
		f9 =  (f9 - f11)
		f11 =  (f12 - f13)
		f12 =  (f14 - f15)
		f0 =  (f0 + f10)
		f9 =  f9/*fround*/
		f10 =  f11/*fround*/
		f11 =  f12/*fround*/
		f0 =  f0/*fround*/
		f12 =  f8/*fextend*/
		f10 =  f10/*fextend*/
		f11 =  f11/*fextend*/
		f13 =  f7/*fextend*/
		f14 =  f9/*fextend*/
		f15 =  f3/*fextend*/
		f16 =  f0/*fextend*/
		f17 =  f4/*fextend*/
		f14 =  (f15 + f14)
		f15 =  (f13 * f10)
		f10 =  (f10 * f12)
		f18 =  (f12 * f11)
		f11 =  (f13 * f11)
		f13 =  (f17 + f16)
		f14 =  f14/*fround*/
		f15 =  f15/*fround*/
		f10 =  f10/*fround*/
		f16 =  f18/*fround*/
		f11 =  f11/*fround*/
		f13 =  f13/*fround*/
		f17 =  f1/*fextend*/
		f14 =  f14/*fextend*/
		f15 =  f15/*fextend*/
		f16 =  f16/*fextend*/
		f10 =  f10/*fextend*/
		f11 =  f11/*fextend*/
		f18 =  f2/*fextend*/
		f13 =  f13/*fextend*/
		f14 =  (f14 - f17)
		f15 =  (f16 + f15)
		f10 =  (f11 - f10)
		f11 =  (f13 - f18)
		f13 =  f14/*fround*/
		f14 =  f15/*fround*/
		f10 =  f10/*fround*/
		f11 =  f11/*fround*/
		f15 =  f10/*fextend*/
		f13 =  f13/*fextend*/
		f16 =  f14/*fextend*/
		f11 =  f11/*fextend*/
		i3 =  ((__xasm<int>(push((i0+208)), op(0x35))))
		f12 =  -f12
		f13 =  (f13 - f15)
		f11 =  (f11 - f16)
		f12 =  f12/*fround*/
		f13 =  f13/*fround*/
		f11 =  f11/*fround*/
		i4 =  (i1 + 52)
		i5 =  (i1 + 56)
		i6 =  (i1 + 64)
		i7 =  (i2 + 52)
		i8 =  (i2 + 56)
		i9 =  (i2 + 64)
		__asm(push(i3!=0), iftrue, target("__ZN11b2LineJoint24SolvePositionConstraintsEf__XprivateX__BB225_2_F"))
	__asm(jump, target("__ZN11b2LineJoint24SolvePositionConstraintsEf__XprivateX__BB225_1_F"), lbl("__ZN11b2LineJoint24SolvePositionConstraintsEf__XprivateX__BB225_1_B"), label, lbl("__ZN11b2LineJoint24SolvePositionConstraintsEf__XprivateX__BB225_1_F")); 
		f15 =  (0)
		f15 =  f15/*fround*/
		i3 =  (1)
		f16 = f15
		__asm(jump, target("__ZN11b2LineJoint24SolvePositionConstraintsEf__XprivateX__BB225_10_F"))
	__asm(lbl("__ZN11b2LineJoint24SolvePositionConstraintsEf__XprivateX__BB225_2_F"))
		f15 =  (0)
		f16 =  ((__xasm<Number>(push((i0+112)), op(0x38))))
		f17 =  ((__xasm<Number>(push((i0+116)), op(0x38))))
		f18 =  f7/*fextend*/
		f19 =  f8/*fextend*/
		f20 =  f12/*fextend*/
		f19 =  (f19 * f16)
		f16 =  (f18 * f16)
		f18 =  (f18 * f17)
		f17 =  (f17 * f20)
		f19 =  f19/*fround*/
		f16 =  f16/*fround*/
		f18 =  f18/*fround*/
		f17 =  f17/*fround*/
		f18 =  f18/*fextend*/
		f19 =  f19/*fextend*/
		f17 =  f17/*fextend*/
		f16 =  f16/*fextend*/
		f20 =  f14/*fextend*/
		f21 =  f11/*fextend*/
		f22 =  f10/*fextend*/
		f23 =  f13/*fextend*/
		f18 =  (f19 + f18)
		f16 =  (f16 + f17)
		f17 =  (f21 + f20)
		f19 =  (f23 + f22)
		f18 =  f18/*fround*/
		f16 =  f16/*fround*/
		f17 =  f17/*fround*/
		f19 =  f19/*fround*/
		f20 =  f18/*fextend*/
		f19 =  f19/*fextend*/
		f22 =  f16/*fextend*/
		f17 =  f17/*fextend*/
		f19 =  (f19 * f20)
		f24 =  f9/*fextend*/
		f17 =  (f17 * f22)
		f25 =  f0/*fextend*/
		f19 =  f19/*fround*/
		f24 =  (f24 * f20)
		f17 =  f17/*fround*/
		f25 =  (f25 * f22)
		f24 =  f24/*fround*/
		f25 =  f25/*fround*/
		f17 =  f17/*fextend*/
		f19 =  f19/*fextend*/
		__asm(push(f16), push((i0+128)), op(0x3d))
		f16 =  (f19 - f17)
		f17 =  f25/*fextend*/
		f19 =  f24/*fextend*/
		f17 =  (f19 - f17)
		__asm(push(f18), push((i0+132)), op(0x3d))
		f16 =  f16/*fround*/
		__asm(push(f16), push((i0+152)), op(0x3d))
		f16 =  f17/*fround*/
		__asm(push(f16), push((i0+156)), op(0x3d))
		f16 =  ((__xasm<Number>(push((i0+196)), op(0x38))))
		f17 =  ((__xasm<Number>(push((i0+192)), op(0x38))))
		f18 =  (f20 * f21)
		f19 =  (f22 * f23)
		f20 =  f16/*fextend*/
		f21 =  f17/*fextend*/
		f22 =  (f20 - f21)
		f20 =  (f21 - f20)
		f18 =  f18/*fround*/
		f19 =  f19/*fround*/
		f21 =  ((__xasm<Number>(push(_b2_linearSlop), op(0x38))))
		f22 =  f22/*fround*/
		f20 =  f20/*fround*/
		f15 =  f15/*fround*/
		f18 =  f18/*fextend*/
		f19 =  f19/*fextend*/
		f23 =  f21/*fextend*/
		f18 =  (f19 + f18)
		f19 =  f20/*fextend*/
		f15 =  f15/*fextend*/
		f20 =  f22/*fextend*/
		f15 =  ((f20<=f15) ? f19 : f20)
		f19 =  (f23 + f23)
		f18 =  f18/*fround*/
		f15 =  f15/*fround*/
		f19 =  f19/*fround*/
		f19 =  f19/*fextend*/
		f15 =  f15/*fextend*/
		__asm(push(f15>=f19), iftrue, target("__ZN11b2LineJoint24SolvePositionConstraintsEf__XprivateX__BB225_6_F"))
	__asm(lbl("__ZN11b2LineJoint24SolvePositionConstraintsEf__XprivateX__BB225_3_F"))
		f15 =  (0)
		f16 =  ((__xasm<Number>(push(_b2_maxLinearCorrection), op(0x38))))
		f17 =  f18/*fextend*/
		f19 =  -f16
		f16 =  ((f17<f16) ? f17 : f16)
		f21 =  f19/*fround*/
		f16 =  f16/*fround*/
		f19 =  f21/*fextend*/
		f16 =  f16/*fextend*/
		f16 =  ((f16<f19) ? f19 : f16)
		f21 =  f16/*fround*/
		f16 =  f15/*fround*/
		f15 =  f16/*fextend*/
		__asm(push(f17<=f15), iftrue, target("__ZN11b2LineJoint24SolvePositionConstraintsEf__XprivateX__BB225_5_F"))
	__asm(lbl("__ZN11b2LineJoint24SolvePositionConstraintsEf__XprivateX__BB225_4_F"))
		i3 =  (0)
		f16 = f18
		f15 = f21
		__asm(jump, target("__ZN11b2LineJoint24SolvePositionConstraintsEf__XprivateX__BB225_10_F"))
	__asm(lbl("__ZN11b2LineJoint24SolvePositionConstraintsEf__XprivateX__BB225_5_F"))
		i3 =  (0)
		f15 =  f18/*fextend*/
		f15 =  -f15
		f16 =  f15/*fround*/
		f15 = f21
		__asm(jump, target("__ZN11b2LineJoint24SolvePositionConstraintsEf__XprivateX__BB225_10_F"))
	__asm(lbl("__ZN11b2LineJoint24SolvePositionConstraintsEf__XprivateX__BB225_6_F"))
		f15 =  f18/*fextend*/
		f19 =  f17/*fextend*/
		__asm(push(f19<f15), iftrue, target("__ZN11b2LineJoint24SolvePositionConstraintsEf__XprivateX__BB225_8_F"))
	__asm(lbl("__ZN11b2LineJoint24SolvePositionConstraintsEf__XprivateX__BB225_7_F"))
		f15 =  (0)
		f16 =  f18/*fextend*/
		f17 =  f17/*fextend*/
		f18 =  (f16 - f17)
		f18 =  f18/*fround*/
		f19 =  f21/*fextend*/
		f18 =  f18/*fextend*/
		f18 =  (f18 + f19)
		f18 =  f18/*fround*/
		f15 =  f15/*fround*/
		f19 =  ((__xasm<Number>(push(_b2_maxLinearCorrection), op(0x38))))
		f15 =  f15/*fextend*/
		f18 =  f18/*fextend*/
		f19 =  -f19
		f15 =  ((f18<f15) ? f18 : f15)
		f18 =  f19/*fround*/
		f15 =  f15/*fround*/
		f18 =  f18/*fextend*/
		f15 =  f15/*fextend*/
		f15 =  ((f15<f18) ? f18 : f15)
		f16 =  (f17 - f16)
		f15 =  f15/*fround*/
		f16 =  f16/*fround*/
		i3 =  (0)
		__asm(jump, target("__ZN11b2LineJoint24SolvePositionConstraintsEf__XprivateX__BB225_10_F"))
	__asm(lbl("__ZN11b2LineJoint24SolvePositionConstraintsEf__XprivateX__BB225_8_F"))
		f15 =  f18/*fextend*/
		f17 =  f16/*fextend*/
		__asm(push(f17>f15), iftrue, target("__ZN11b2LineJoint24SolvePositionConstraintsEf__XprivateX__BB225_1_B"))
	__asm(lbl("__ZN11b2LineJoint24SolvePositionConstraintsEf__XprivateX__BB225_9_F"))
		f15 =  (0)
		f16 =  f16/*fextend*/
		f17 =  f18/*fextend*/
		f16 =  (f17 - f16)
		f16 =  f16/*fround*/
		f17 =  f21/*fextend*/
		f18 =  f16/*fextend*/
		f17 =  (f18 - f17)
		f17 =  f17/*fround*/
		f18 =  ((__xasm<Number>(push(_b2_maxLinearCorrection), op(0x38))))
		f17 =  f17/*fextend*/
		f17 =  ((f17<f18) ? f17 : f18)
		f17 =  f17/*fround*/
		f15 =  f15/*fround*/
		f15 =  f15/*fextend*/
		f17 =  f17/*fextend*/
		f15 =  ((f17<f15) ? f15 : f17)
		f15 =  f15/*fround*/
		i3 =  (0)
	__asm(lbl("__ZN11b2LineJoint24SolvePositionConstraintsEf__XprivateX__BB225_10_F"))
		f17 =  (0)
		f18 =  ((__xasm<Number>(push((i0+120)), op(0x38))))
		f19 =  ((__xasm<Number>(push((i0+124)), op(0x38))))
		f7 =  f7/*fextend*/
		f8 =  f8/*fextend*/
		f12 =  f12/*fextend*/
		f8 =  (f8 * f18)
		f18 =  (f7 * f18)
		f7 =  (f7 * f19)
		f12 =  (f19 * f12)
		f8 =  f8/*fround*/
		f18 =  f18/*fround*/
		f7 =  f7/*fround*/
		f12 =  f12/*fround*/
		f7 =  f7/*fextend*/
		f8 =  f8/*fextend*/
		f12 =  f12/*fextend*/
		f18 =  f18/*fextend*/
		f14 =  f14/*fextend*/
		f11 =  f11/*fextend*/
		f10 =  f10/*fextend*/
		f13 =  f13/*fextend*/
		f7 =  (f8 + f7)
		f8 =  (f18 + f12)
		f12 =  (f11 + f14)
		f10 =  (f13 + f10)
		f7 =  f7/*fround*/
		f8 =  f8/*fround*/
		f12 =  f12/*fround*/
		f10 =  f10/*fround*/
		f14 =  f7/*fextend*/
		f10 =  f10/*fextend*/
		f18 =  f8/*fextend*/
		f12 =  f12/*fextend*/
		f10 =  (f10 * f14)
		f9 =  f9/*fextend*/
		f12 =  (f12 * f18)
		f0 =  f0/*fextend*/
		f10 =  f10/*fround*/
		f9 =  (f9 * f14)
		f12 =  f12/*fround*/
		f0 =  (f0 * f18)
		f9 =  f9/*fround*/
		f0 =  f0/*fround*/
		f12 =  f12/*fextend*/
		f10 =  f10/*fextend*/
		__asm(push(f8), push((i0+136)), op(0x3d))
		f10 =  (f10 - f12)
		f0 =  f0/*fextend*/
		f9 =  f9/*fextend*/
		f10 =  f10/*fround*/
		__asm(push(f7), push((i0+140)), op(0x3d))
		f0 =  (f9 - f0)
		f0 =  f0/*fround*/
		__asm(push(f10), push((i0+144)), op(0x3d))
		__asm(push(f0), push((i0+148)), op(0x3d))
		f9 =  (f14 * f11)
		f11 =  (f18 * f13)
		f12 =  ((__xasm<Number>(push((i0+84)), op(0x38))))
		f9 =  f9/*fround*/
		f11 =  f11/*fround*/
		f13 =  f12/*fextend*/
		f14 =  f10/*fextend*/
		f9 =  f9/*fextend*/
		f11 =  f11/*fextend*/
		f13 =  (f14 * f13)
		f9 =  (f11 + f9)
		f11 =  ((__xasm<Number>(push((i0+80)), op(0x38))))
		f18 =  ((__xasm<Number>(push((i0+88)), op(0x38))))
		f19 =  ((__xasm<Number>(push((i0+92)), op(0x38))))
		f13 =  f13/*fround*/
		f9 =  f9/*fround*/
		f20 =  f13/*fextend*/
		f9 =  f9/*fextend*/
		f21 =  f18/*fextend*/
		f22 =  f11/*fextend*/
		f23 =  f19/*fextend*/
		f24 =  f0/*fextend*/
		f21 =  (f22 + f21)
		f14 =  (f20 * f14)
		f20 =  (f24 * f23)
		f22 =  -f9
		f21 =  f21/*fround*/
		f14 =  f14/*fround*/
		f20 =  f20/*fround*/
		f22 =  f22/*fround*/
		f17 =  f17/*fround*/
		f23 =  f20/*fextend*/
		f14 =  f14/*fextend*/
		f25 =  f21/*fextend*/
		f26 =  f22/*fextend*/
		f17 =  f17/*fextend*/
		f14 =  (f25 + f14)
		f23 =  (f23 * f24)
		f9 =  ((f9<=f17) ? f26 : f9)
		f14 =  f14/*fround*/
		f17 =  f23/*fround*/
		f9 =  f9/*fround*/
		f17 =  f17/*fextend*/
		f14 =  f14/*fextend*/
		f9 =  f9/*fextend*/
		f16 =  f16/*fextend*/
		f14 =  (f14 + f17)
		f9 =  ((f16>f9) ? f16 : f9)
		f14 =  f14/*fround*/
		f9 =  f9/*fround*/
		i3 =  (i3 & 1)
		__asm(push(i3!=0), iftrue, target("__ZN11b2LineJoint24SolvePositionConstraintsEf__XprivateX__BB225_15_F"))
	__asm(lbl("__ZN11b2LineJoint24SolvePositionConstraintsEf__XprivateX__BB225_11_F"))
		f16 =  (0)
		f17 =  ((__xasm<Number>(push((i0+152)), op(0x38))))
		f23 =  f12/*fextend*/
		f23 =  (f17 * f23)
		f23 =  f23/*fround*/
		f24 =  ((__xasm<Number>(push((i0+156)), op(0x38))))
		f23 =  f23/*fextend*/
		f25 =  f19/*fextend*/
		f23 =  (f23 * f17)
		f25 =  (f24 * f25)
		f23 =  f23/*fround*/
		f25 =  f25/*fround*/
		f13 =  f13/*fextend*/
		f20 =  f20/*fextend*/
		f25 =  f25/*fextend*/
		f23 =  f23/*fextend*/
		f21 =  f21/*fextend*/
		f13 =  (f13 * f17)
		f17 =  (f21 + f23)
		f20 =  (f20 * f24)
		f21 =  (f25 * f24)
		f13 =  f13/*fround*/
		f17 =  f17/*fround*/
		f20 =  f20/*fround*/
		f21 =  f21/*fround*/
		f20 =  f20/*fextend*/
		f13 =  f13/*fextend*/
		f21 =  f21/*fextend*/
		f17 =  f17/*fextend*/
		f13 =  (f13 + f20)
		f17 =  (f17 + f21)
		f13 =  f13/*fround*/
		f17 =  f17/*fround*/
		f20 =  f13/*fextend*/
		f21 =  f17/*fextend*/
		f23 =  f14/*fextend*/
		f20 =  (f20 * f20)
		f21 =  (f23 * f21)
		__asm(push(f14), push((i0+160)), op(0x3d))
		f20 =  f20/*fround*/
		f21 =  f21/*fround*/
		__asm(push(f13), push((i0+164)), op(0x3d))
		f15 =  f15/*fextend*/
		f20 =  f20/*fextend*/
		f21 =  f21/*fextend*/
		__asm(push(f13), push((i0+168)), op(0x3d))
		f20 =  (f21 - f20)
		f15 =  -f15
		__asm(push(f17), push((i0+172)), op(0x3d))
		f20 =  f20/*fround*/
		f15 =  f15/*fround*/
		f16 =  f16/*fround*/
		f16 =  f16/*fextend*/
		f21 =  f20/*fextend*/
		__asm(push(f21!=f16), iftrue, target("__ZN11b2LineJoint24SolvePositionConstraintsEf__XprivateX__BB225_13_F"))
	__asm(lbl("__ZN11b2LineJoint24SolvePositionConstraintsEf__XprivateX__BB225_12_F"))
		__asm(jump, target("__ZN11b2LineJoint24SolvePositionConstraintsEf__XprivateX__BB225_14_F"))
	__asm(lbl("__ZN11b2LineJoint24SolvePositionConstraintsEf__XprivateX__BB225_13_F"))
		f16 =  (1)
		f16 =  f16/*fround*/
		f20 =  f20/*fextend*/
		f16 =  f16/*fextend*/
		f16 =  (f16 / f20)
		f20 =  f16/*fround*/
	__asm(lbl("__ZN11b2LineJoint24SolvePositionConstraintsEf__XprivateX__BB225_14_F"))
		f16 = f20
		f17 =  f17/*fextend*/
		f20 =  f22/*fextend*/
		f13 =  f13/*fextend*/
		f15 =  f15/*fextend*/
		f14 =  f14/*fextend*/
		f17 =  (f17 * f20)
		f20 =  (f13 * f20)
		f13 =  (f13 * f15)
		f14 =  (f14 * f15)
		f22 =  f17/*fround*/
		f15 =  f20/*fround*/
		f13 =  f13/*fround*/
		f14 =  f14/*fround*/
		f13 =  f13/*fextend*/
		f17 =  f22/*fextend*/
		f15 =  f15/*fextend*/
		f14 =  f14/*fextend*/
		f13 =  (f17 - f13)
		f14 =  (f14 - f15)
		f22 =  f13/*fround*/
		f14 =  f14/*fround*/
		f13 =  f22/*fextend*/
		f15 =  f16/*fextend*/
		f14 =  f14/*fextend*/
		f13 =  (f13 * f15)
		f14 =  (f14 * f15)
		f22 =  f13/*fround*/
		f14 =  f14/*fround*/
		__asm(jump, target("__ZN11b2LineJoint24SolvePositionConstraintsEf__XprivateX__BB225_18_F"))
	__asm(lbl("__ZN11b2LineJoint24SolvePositionConstraintsEf__XprivateX__BB225_15_F"))
		f13 =  (0)
		f13 =  f13/*fround*/
		f13 =  f13/*fextend*/
		f15 =  f14/*fextend*/
		__asm(push(f15!=f13), iftrue, target("__ZN11b2LineJoint24SolvePositionConstraintsEf__XprivateX__BB225_17_F"))
	__asm(lbl("__ZN11b2LineJoint24SolvePositionConstraintsEf__XprivateX__BB225_16_F"))
		f13 =  (0)
		f14 =  f13/*fround*/
		f22 = f14
		__asm(jump, target("__ZN11b2LineJoint24SolvePositionConstraintsEf__XprivateX__BB225_18_F"))
	__asm(lbl("__ZN11b2LineJoint24SolvePositionConstraintsEf__XprivateX__BB225_17_F"))
		f13 =  (0)
		f14 =  f14/*fextend*/
		f15 =  f22/*fextend*/
		f14 =  (f15 / f14)
		f14 =  f14/*fround*/
		f13 =  f13/*fround*/
		f22 = f14
		f14 = f13
	__asm(lbl("__ZN11b2LineJoint24SolvePositionConstraintsEf__XprivateX__BB225_18_F"))
		f13 = f22
		f15 =  ((__xasm<Number>(push((i0+128)), op(0x38))))
		f14 =  f14/*fextend*/
		f8 =  f8/*fextend*/
		f13 =  f13/*fextend*/
		f16 =  ((__xasm<Number>(push((i0+132)), op(0x38))))
		f15 =  (f15 * f14)
		f7 =  f7/*fextend*/
		f8 =  (f8 * f13)
		f17 =  ((__xasm<Number>(push((i0+152)), op(0x38))))
		f15 =  f15/*fround*/
		f16 =  (f16 * f14)
		f7 =  (f7 * f13)
		f8 =  f8/*fround*/
		f10 =  f10/*fextend*/
		f17 =  (f14 * f17)
		f16 =  f16/*fround*/
		f7 =  f7/*fround*/
		f10 =  (f13 * f10)
		f15 =  f15/*fextend*/
		f8 =  f8/*fextend*/
		f8 =  (f8 + f15)
		f15 =  f17/*fround*/
		f10 =  f10/*fround*/
		f16 =  f16/*fextend*/
		f7 =  f7/*fextend*/
		f17 =  ((__xasm<Number>(push((i0+156)), op(0x38))))
		f8 =  f8/*fround*/
		f7 =  (f7 + f16)
		f0 =  f0/*fextend*/
		f15 =  f15/*fextend*/
		f10 =  f10/*fextend*/
		f10 =  (f10 + f15)
		f14 =  (f14 * f17)
		f7 =  f7/*fround*/
		f0 =  (f13 * f0)
		f8 =  f8/*fextend*/
		f11 =  f11/*fextend*/
		f13 =  (f8 * f11)
		f10 =  f10/*fround*/
		f14 =  f14/*fround*/
		f7 =  f7/*fextend*/
		f0 =  f0/*fround*/
		f13 =  f13/*fround*/
		f11 =  (f7 * f11)
		f10 =  f10/*fextend*/
		f12 =  f12/*fextend*/
		f14 =  f14/*fextend*/
		f0 =  f0/*fextend*/
		f15 =  f18/*fextend*/
		f10 =  (f12 * f10)
		f0 =  (f0 + f14)
		f11 =  f11/*fround*/
		f12 =  f13/*fextend*/
		f1 =  f1/*fextend*/
		f1 =  (f1 - f12)
		f8 =  (f8 * f15)
		f10 =  f10/*fround*/
		f0 =  f0/*fround*/
		f11 =  f11/*fextend*/
		f2 =  f2/*fextend*/
		f8 =  f8/*fround*/
		f2 =  (f2 - f11)
		f7 =  (f7 * f15)
		f1 =  f1/*fround*/
		f10 =  f10/*fextend*/
		f5 =  f5/*fextend*/
		f0 =  f0/*fextend*/
		f11 =  f19/*fextend*/
		f5 =  (f5 - f10)
		f0 =  (f11 * f0)
		f7 =  f7/*fround*/
		__asm(push(f1), push(i4), op(0x3d))
		f1 =  f8/*fextend*/
		f3 =  f3/*fextend*/
		f2 =  f2/*fround*/
		f1 =  (f3 + f1)
		f0 =  f0/*fround*/
		__asm(push(f2), push(i5), op(0x3d))
		f2 =  f5/*fround*/
		f3 =  f7/*fextend*/
		f4 =  f4/*fextend*/
		f3 =  (f4 + f3)
		__asm(push(f2), push(i6), op(0x3d))
		f1 =  f1/*fround*/
		f2 =  f6/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 + f2)
		__asm(push(f1), push(i7), op(0x3d))
		f1 =  f3/*fround*/
		__asm(push(f1), push(i8), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push(i9), op(0x3d))
		f1 =  ((__xasm<Number>(push(i6), op(0x38))))
		f0 = f1
		//InlineAsmStart
	f0 =  Math.cos(f0);

	//InlineAsmEnd
		f2 = f0
		f0 = f1
		//InlineAsmStart
	f0 =  Math.sin(f0);

	//InlineAsmEnd
		f1 =  f0/*fextend*/
		f3 =  -f1
		__asm(push(f2), push((i1+20)), op(0x3d))
		f3 =  f3/*fround*/
		__asm(push(f3), push((i1+28)), op(0x3d))
		__asm(push(f0), push((i1+24)), op(0x3d))
		__asm(push(f2), push((i1+32)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i1+36)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i1+40)), op(0x38))))
		f2 =  f2/*fextend*/
		f4 =  (f2 * f0)
		f5 =  (f3 * f1)
		f0 =  (f1 * f0)
		f1 =  f4/*fround*/
		f2 =  (f2 * f3)
		f3 =  f5/*fround*/
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f1 =  (f1 - f3)
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 + f2)
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		f2 =  ((__xasm<Number>(push(i4), op(0x38))))
		f1 =  f1/*fextend*/
		f3 =  ((__xasm<Number>(push(i5), op(0x38))))
		f0 =  f0/*fextend*/
		f1 =  (f2 - f1)
		f0 =  (f3 - f0)
		f1 =  f1/*fround*/
		__asm(push(f1), push((i1+12)), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push((i1+16)), op(0x3d))
		f1 =  ((__xasm<Number>(push(i9), op(0x38))))
		f0 = f1
		//InlineAsmStart
	f0 =  Math.cos(f0);

	//InlineAsmEnd
		f2 = f0
		f0 = f1
		//InlineAsmStart
	f0 =  Math.sin(f0);

	//InlineAsmEnd
		f1 =  f0/*fextend*/
		f3 =  -f1
		__asm(push(f2), push((i2+20)), op(0x3d))
		f3 =  f3/*fround*/
		__asm(push(f3), push((i2+28)), op(0x3d))
		__asm(push(f0), push((i2+24)), op(0x3d))
		__asm(push(f2), push((i2+32)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i2+36)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i2+40)), op(0x38))))
		f2 =  f2/*fextend*/
		f4 =  (f2 * f0)
		f5 =  (f3 * f1)
		f0 =  (f1 * f0)
		f1 =  f4/*fround*/
		f2 =  (f2 * f3)
		f3 =  f5/*fround*/
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f1 =  (f1 - f3)
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 + f2)
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		f2 =  ((__xasm<Number>(push(i7), op(0x38))))
		f1 =  f1/*fextend*/
		f3 =  ((__xasm<Number>(push(i8), op(0x38))))
		f0 =  f0/*fextend*/
		f1 =  (f2 - f1)
		f0 =  (f3 - f0)
		f1 =  f1/*fround*/
		__asm(push(f1), push((i2+12)), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push((i2+16)), op(0x3d))
		f0 =  ((__xasm<Number>(push(_b2_linearSlop), op(0x38))))
		f1 =  f9/*fextend*/
		__asm(push(f1>f0), iftrue, target("__ZN11b2LineJoint24SolvePositionConstraintsEf__XprivateX__BB225_20_F"))
	__asm(lbl("__ZN11b2LineJoint24SolvePositionConstraintsEf__XprivateX__BB225_19_F"))
		f0 =  (0)
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push(_b2_angularSlop), op(0x38))))
		f0 =  f0/*fextend*/
		i0 =  ((f1>=f0) ? 1 : 0)
		i0 =  (i0 & 1)
		__asm(jump, target("__ZN11b2LineJoint24SolvePositionConstraintsEf__XprivateX__BB225_21_F"))
	__asm(lbl("__ZN11b2LineJoint24SolvePositionConstraintsEf__XprivateX__BB225_20_F"))
		i0 =  (0)
	__asm(lbl("__ZN11b2LineJoint24SolvePositionConstraintsEf__XprivateX__BB225_21_F"))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZNK12b2MouseJoint10GetAnchorAEv:int = regFunc(FSM__ZNK12b2MouseJoint10GetAnchorAEv.start)

public final class FSM__ZNK12b2MouseJoint10GetAnchorAEv extends Machine {

	public static function start():void {
		var i0:int, i1:int


		__asm(label, lbl("__ZNK12b2MouseJoint10GetAnchorAEv_entry"))
	__asm(lbl("__ZNK12b2MouseJoint10GetAnchorAEv__XprivateX__BB226_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+104)), op(0x37))))
		i0 =  ((__xasm<int>(push((i0+108)), op(0x37))))
		mstate.edx = i0
		mstate.eax = i1
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZNK12b2MouseJoint10GetAnchorBEv:int = regFunc(FSM__ZNK12b2MouseJoint10GetAnchorBEv.start)

public final class FSM__ZNK12b2MouseJoint10GetAnchorBEv extends Machine {

	public static function start():void {
		var i0:int, i1:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number

		__asm(label, lbl("__ZNK12b2MouseJoint10GetAnchorBEv_entry"))
	__asm(lbl("__ZNK12b2MouseJoint10GetAnchorBEv__XprivateX__BB227_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 8
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+52)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i1+20)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i0+96)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i1+24)), op(0x38))))
		f2 =  (f2 * f1)
		f0 =  (f0 * f1)
		f1 =  f2/*fround*/
		f0 =  f0/*fround*/
		f2 =  ((__xasm<Number>(push((i1+12)), op(0x38))))
		f0 =  f0/*fextend*/
		f3 =  ((__xasm<Number>(push((i1+28)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i0+100)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i1+32)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i1+16)), op(0x38))))
		f1 =  f1/*fextend*/
		f0 =  (f2 + f0)
		f2 =  (f5 * f4)
		f1 =  (f6 + f1)
		f3 =  (f3 * f4)
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		f3 =  f3/*fextend*/
		f0 =  f0/*fextend*/
		f2 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  (f0 + f3)
		f1 =  (f1 + f2)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		__asm(push(f0), push((mstate.ebp+-8)), op(0x3d))
		__asm(push(f1), push((mstate.ebp+-4)), op(0x3d))
		i0 =  ((__xasm<int>(push((mstate.ebp+-8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		mstate.edx = i1
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZNK12b2MouseJoint16GetReactionForceEf:int = regFunc(FSM__ZNK12b2MouseJoint16GetReactionForceEf.start)

public final class FSM__ZNK12b2MouseJoint16GetReactionForceEf extends Machine {

	public static function start():void {
		var i0:int, i1:int

		var f0:Number, f1:Number, f2:Number

		__asm(label, lbl("__ZNK12b2MouseJoint16GetReactionForceEf_entry"))
	__asm(lbl("__ZNK12b2MouseJoint16GetReactionForceEf__XprivateX__BB228_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 8
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i0+112)), op(0x38))))
		f1 =  ((__xasm<Number>(push((mstate.ebp+12)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i0+116)), op(0x38))))
		f0 =  (f0 * f1)
		f1 =  (f2 * f1)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		__asm(push(f0), push((mstate.ebp+-8)), op(0x3d))
		__asm(push(f1), push((mstate.ebp+-4)), op(0x3d))
		i0 =  ((__xasm<int>(push((mstate.ebp+-8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		mstate.edx = i1
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZNK12b2MouseJoint17GetReactionTorqueEf:int = regFunc(FSM__ZNK12b2MouseJoint17GetReactionTorqueEf.start)

public final class FSM__ZNK12b2MouseJoint17GetReactionTorqueEf extends Machine {

	public static function start():void {

		var f0:Number

		__asm(label, lbl("__ZNK12b2MouseJoint17GetReactionTorqueEf_entry"))
	__asm(lbl("__ZNK12b2MouseJoint17GetReactionTorqueEf__XprivateX__BB229_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		f0 =  (0)
		f0 =  f0/*fround*/
		mstate.st0 = f0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Async
public const __ZN12b2MouseJointD1Ev:int = regFunc(FSM__ZN12b2MouseJointD1Ev.start)

public final class FSM__ZN12b2MouseJointD1Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN12b2MouseJointD1Ev = new FSM__ZN12b2MouseJointD1Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN12b2MouseJointD1Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN12b2MouseJointD1Ev_errState",
			"__ZN12b2MouseJointD1Ev_state0"))
	__asm(lbl("__ZN12b2MouseJointD1Ev_state0"))
	__asm(lbl("__ZN12b2MouseJointD1Ev__XprivateX__BB230_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV7b2Joint)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN12b2MouseJointD1Ev_errState"))
		throw("Invalid state in __ZN12b2MouseJointD1Ev")
	}
}



// Async
public const __ZN12b2MouseJointD0Ev:int = regFunc(FSM__ZN12b2MouseJointD0Ev.start)

public final class FSM__ZN12b2MouseJointD0Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN12b2MouseJointD0Ev = new FSM__ZN12b2MouseJointD0Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN12b2MouseJointD0Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN12b2MouseJointD0Ev_errState",
			"__ZN12b2MouseJointD0Ev_state0",
			"__ZN12b2MouseJointD0Ev_state1"))
	__asm(lbl("__ZN12b2MouseJointD0Ev_state0"))
	__asm(lbl("__ZN12b2MouseJointD0Ev__XprivateX__BB231_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV7b2Joint)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		__asm(push(i1==0), iftrue, target("__ZN12b2MouseJointD0Ev__XprivateX__BB231_2_F"))
	__asm(lbl("__ZN12b2MouseJointD0Ev__XprivateX__BB231_1_F"))
		i0 =  (0)
		mstate.esp -= 8
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN12b2MouseJointD0Ev_state1"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__ZN12b2MouseJointD0Ev__XprivateX__BB231_2_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN12b2MouseJointD0Ev_errState"))
		throw("Invalid state in __ZN12b2MouseJointD0Ev")
	}
}



// Async
public const __ZN12b2MouseJoint23InitVelocityConstraintsERK10b2TimeStep:int = regFunc(FSM__ZN12b2MouseJoint23InitVelocityConstraintsERK10b2TimeStep.start)

public final class FSM__ZN12b2MouseJoint23InitVelocityConstraintsERK10b2TimeStep extends Machine {

	public static function start():void {
			var result:FSM__ZN12b2MouseJoint23InitVelocityConstraintsERK10b2TimeStep = new FSM__ZN12b2MouseJoint23InitVelocityConstraintsERK10b2TimeStep
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int

	public static const intRegCount:int = 6
	public var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number
	public var f8:Number, f9:Number, f10:Number

	public static const NumberRegCount:int = 11
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN12b2MouseJoint23InitVelocityConstraintsERK10b2TimeStep_entry"))
		__asm(push(state), switchjump(
			"__ZN12b2MouseJoint23InitVelocityConstraintsERK10b2TimeStep_errState",
			"__ZN12b2MouseJoint23InitVelocityConstraintsERK10b2TimeStep_state0",
			"__ZN12b2MouseJoint23InitVelocityConstraintsERK10b2TimeStep_state1",
			"__ZN12b2MouseJoint23InitVelocityConstraintsERK10b2TimeStep_state2"))
	__asm(lbl("__ZN12b2MouseJoint23InitVelocityConstraintsERK10b2TimeStep_state0"))
	__asm(lbl("__ZN12b2MouseJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB232_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		f0 =  (6.28319)
		f0 =  f0/*fround*/
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		f1 =  ((__xasm<Number>(push((i0+148)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f1 * f0)
		f0 =  f0/*fround*/
		i1 =  ((__xasm<int>(push((i0+52)), op(0x37))))
		f1 =  ((__xasm<Number>(push((i1+124)), op(0x38))))
		f0 =  f0/*fextend*/
		f2 =  (f1 + f1)
		f3 =  (f0 * f0)
		f2 =  f2/*fround*/
		f3 =  f3/*fround*/
		f3 =  f3/*fextend*/
		f4 =  ((__xasm<Number>(push((i0+152)), op(0x38))))
		f2 =  f2/*fextend*/
		f2 =  (f2 * f4)
		f1 =  (f3 * f1)
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		i2 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		f3 =  ((__xasm<Number>(push(i2), op(0x38))))
		f2 =  f2/*fextend*/
		f4 =  f1/*fextend*/
		f0 =  (f2 * f0)
		f2 =  (f3 * f4)
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f3 =  f0/*fextend*/
		f2 =  f2/*fextend*/
		f2 =  (f2 + f3)
		f3 =  (1.19209e-07)
		f2 =  f2/*fround*/
		f3 =  f3/*fround*/
		i3 = i2
		f3 =  f3/*fextend*/
		f2 =  f2/*fextend*/
		__asm(push(f2>f3), iftrue, target("__ZN12b2MouseJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB232_2_F"))
	__asm(lbl("__ZN12b2MouseJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB232_1_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str93300)
		i3 =  (__ZZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStepE8__func__)
		i4 =  (__2E_str92299)
		i5 =  (114)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__ZN12b2MouseJoint23InitVelocityConstraintsERK10b2TimeStep_state1"))
		mstate.esp += 24
		state = 2
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZN12b2MouseJoint23InitVelocityConstraintsERK10b2TimeStep_state2"))
	__asm(lbl("__ZN12b2MouseJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB232_2_F"))
		f2 =  (0)
		f3 =  ((__xasm<Number>(push(i3), op(0x38))))
		f4 =  f1/*fextend*/
		f4 =  (f3 * f4)
		f4 =  f4/*fround*/
		f0 =  f0/*fextend*/
		f4 =  f4/*fextend*/
		f0 =  (f4 + f0)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f0 =  (f3 * f0)
		f0 =  f0/*fround*/
		i4 =  (i0 + 160)
		f2 =  f2/*fround*/
		f2 =  f2/*fextend*/
		f3 =  f0/*fextend*/
		__asm(push(f3!=f2), iftrue, target("__ZN12b2MouseJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB232_4_F"))
	__asm(lbl("__ZN12b2MouseJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB232_3_F"))
		f2 = f0
		__asm(jump, target("__ZN12b2MouseJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB232_5_F"))
	__asm(lbl("__ZN12b2MouseJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB232_4_F"))
		f2 =  (1)
		f2 =  f2/*fround*/
		f0 =  f0/*fextend*/
		f2 =  f2/*fextend*/
		f0 =  (f2 / f0)
		f0 =  f0/*fround*/
		f2 = f0
	__asm(lbl("__ZN12b2MouseJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB232_5_F"))
		f3 =  (0)
		__asm(push(f2), push(i4), op(0x3d))
		f2 =  ((__xasm<Number>(push(i3), op(0x38))))
		f1 =  f1/*fextend*/
		f1 =  (f2 * f1)
		f1 =  f1/*fround*/
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		f1 =  (f1 * f0)
		f1 =  f1/*fround*/
		__asm(push(f1), push((i0+156)), op(0x3d))
		f1 =  ((__xasm<Number>(push((i0+100)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i1+40)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i0+96)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i1+36)), op(0x38))))
		f1 =  (f1 - f2)
		f2 =  (f4 - f5)
		f1 =  f1/*fround*/
		f2 =  f2/*fround*/
		f4 =  ((__xasm<Number>(push((i1+24)), op(0x38))))
		f2 =  f2/*fextend*/
		f5 =  ((__xasm<Number>(push((i1+20)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i1+32)), op(0x38))))
		f1 =  f1/*fextend*/
		f7 =  ((__xasm<Number>(push((i1+28)), op(0x38))))
		f6 =  (f6 * f1)
		f1 =  (f7 * f1)
		f4 =  (f4 * f2)
		f2 =  (f5 * f2)
		f5 =  f6/*fround*/
		f1 =  f1/*fround*/
		f4 =  f4/*fround*/
		f2 =  f2/*fround*/
		f5 =  f5/*fextend*/
		f4 =  f4/*fextend*/
		f1 =  f1/*fextend*/
		f2 =  f2/*fextend*/
		f4 =  (f4 + f5)
		f1 =  (f2 + f1)
		f2 =  ((__xasm<Number>(push((i1+136)), op(0x38))))
		f4 =  f4/*fround*/
		f1 =  f1/*fround*/
		f5 =  f4/*fextend*/
		f6 =  f2/*fextend*/
		f7 =  f1/*fextend*/
		f8 =  (f5 * f6)
		f6 =  (f7 * f6)
		f8 =  f8/*fround*/
		f6 =  f6/*fround*/
		f6 =  f6/*fextend*/
		f8 =  f8/*fextend*/
		f8 =  (f8 * f5)
		f7 =  (f6 * f7)
		f9 =  ((__xasm<Number>(push((i1+128)), op(0x38))))
		f8 =  f8/*fround*/
		f7 =  f7/*fround*/
		f8 =  f8/*fextend*/
		f10 =  f9/*fextend*/
		f7 =  f7/*fextend*/
		f8 =  (f10 + f8)
		f5 =  (f6 * f5)
		f6 =  (f10 + f7)
		f7 =  f8/*fround*/
		f5 =  f5/*fround*/
		f6 =  f6/*fround*/
		f3 =  f3/*fround*/
		f7 =  f7/*fextend*/
		f6 =  f6/*fextend*/
		f5 =  f5/*fextend*/
		f3 =  f3/*fextend*/
		f7 =  (f7 + f0)
		f5 =  (f3 - f5)
		f0 =  (f6 + f0)
		f6 =  f7/*fround*/
		f5 =  f5/*fround*/
		f0 =  f0/*fround*/
		f7 =  f5/*fextend*/
		f8 =  f0/*fextend*/
		f10 =  f6/*fextend*/
		f8 =  (f10 * f8)
		f7 =  (f7 * f7)
		f8 =  f8/*fround*/
		f7 =  f7/*fround*/
		f7 =  f7/*fextend*/
		f8 =  f8/*fextend*/
		f7 =  (f8 - f7)
		f7 =  f7/*fround*/
		f8 =  f7/*fextend*/
		__asm(push(f8!=f3), iftrue, target("__ZN12b2MouseJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB232_7_F"))
	__asm(lbl("__ZN12b2MouseJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB232_6_F"))
		__asm(jump, target("__ZN12b2MouseJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB232_8_F"))
	__asm(lbl("__ZN12b2MouseJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB232_7_F"))
		f3 =  (1)
		f3 =  f3/*fround*/
		f7 =  f7/*fextend*/
		f3 =  f3/*fextend*/
		f3 =  (f3 / f7)
		f7 =  f3/*fround*/
	__asm(lbl("__ZN12b2MouseJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB232_8_F"))
		f3 = f7
		f7 =  (0.98)
		f3 =  f3/*fextend*/
		f8 =  -f3
		f0 =  f0/*fextend*/
		f8 =  f8/*fround*/
		f0 =  (f3 * f0)
		f8 =  f8/*fextend*/
		f5 =  f5/*fextend*/
		f5 =  (f5 * f8)
		f0 =  f0/*fround*/
		f6 =  f6/*fextend*/
		__asm(push(f0), push((i0+120)), op(0x3d))
		f0 =  f5/*fround*/
		__asm(push(f0), push((i0+124)), op(0x3d))
		f3 =  (f3 * f6)
		__asm(push(f0), push((i0+128)), op(0x3d))
		f0 =  f3/*fround*/
		__asm(push(f0), push((i0+132)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i1+52)), op(0x38))))
		f1 =  f1/*fextend*/
		f0 =  (f0 + f1)
		f3 =  ((__xasm<Number>(push((i1+56)), op(0x38))))
		f4 =  f4/*fextend*/
		f3 =  (f3 + f4)
		f0 =  f0/*fround*/
		f3 =  f3/*fround*/
		f5 =  ((__xasm<Number>(push((i0+104)), op(0x38))))
		f0 =  f0/*fextend*/
		f6 =  ((__xasm<Number>(push((i0+108)), op(0x38))))
		f3 =  f3/*fextend*/
		f0 =  (f0 - f5)
		f3 =  (f3 - f6)
		f0 =  f0/*fround*/
		__asm(push(f0), push((i0+136)), op(0x3d))
		f0 =  f3/*fround*/
		__asm(push(f0), push((i0+140)), op(0x3d))
		f0 =  f7/*fround*/
		f3 =  ((__xasm<Number>(push((i1+80)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f3 * f0)
		f0 =  f0/*fround*/
		__asm(push(f0), push((i1+80)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i2+8)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i0+112)), op(0x38))))
		f3 =  (f3 * f0)
		f3 =  f3/*fround*/
		__asm(push(f3), push((i0+112)), op(0x3d))
		f5 =  ((__xasm<Number>(push((i0+116)), op(0x38))))
		f0 =  (f5 * f0)
		f5 =  f9/*fextend*/
		f3 =  f3/*fextend*/
		f0 =  f0/*fround*/
		f3 =  (f3 * f5)
		__asm(push(f0), push((i0+116)), op(0x3d))
		f3 =  f3/*fround*/
		f6 =  ((__xasm<Number>(push((i1+72)), op(0x38))))
		f3 =  f3/*fextend*/
		f3 =  (f6 + f3)
		f0 =  f0/*fextend*/
		f3 =  f3/*fround*/
		f0 =  (f0 * f5)
		__asm(push(f3), push((i1+72)), op(0x3d))
		f0 =  f0/*fround*/
		f3 =  ((__xasm<Number>(push((i1+76)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f3 + f0)
		f0 =  f0/*fround*/
		__asm(push(f0), push((i1+76)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i0+116)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i0+112)), op(0x38))))
		f0 =  (f1 * f0)
		f1 =  (f4 * f3)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f1 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 - f1)
		f0 =  f0/*fround*/
		f1 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 * f1)
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push((i1+80)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f1 + f0)
		f0 =  f0/*fround*/
		__asm(push(f0), push((i1+80)), op(0x3d))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN12b2MouseJoint23InitVelocityConstraintsERK10b2TimeStep_errState"))
		throw("Invalid state in __ZN12b2MouseJoint23InitVelocityConstraintsERK10b2TimeStep")
	}
}



// Sync
public const __ZN12b2MouseJoint24SolveVelocityConstraintsERK10b2TimeStep:int = regFunc(FSM__ZN12b2MouseJoint24SolveVelocityConstraintsERK10b2TimeStep.start)

public final class FSM__ZN12b2MouseJoint24SolveVelocityConstraintsERK10b2TimeStep extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number
		var f8:Number, f9:Number, f10:Number, f11:Number

		__asm(label, lbl("__ZN12b2MouseJoint24SolveVelocityConstraintsERK10b2TimeStep_entry"))
	__asm(lbl("__ZN12b2MouseJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB233_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+52)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i0+100)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i1+40)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i0+96)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i1+36)), op(0x38))))
		f2 =  (f2 - f3)
		f0 =  (f0 - f1)
		f1 =  f2/*fround*/
		f0 =  f0/*fround*/
		f2 =  ((__xasm<Number>(push((i1+24)), op(0x38))))
		f1 =  f1/*fextend*/
		f3 =  ((__xasm<Number>(push((i1+32)), op(0x38))))
		f0 =  f0/*fextend*/
		f2 =  (f2 * f1)
		f3 =  (f3 * f0)
		f2 =  f2/*fround*/
		f3 =  f3/*fround*/
		f4 =  ((__xasm<Number>(push((i1+20)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i1+28)), op(0x38))))
		f3 =  f3/*fextend*/
		f2 =  f2/*fextend*/
		f2 =  (f2 + f3)
		f1 =  (f4 * f1)
		f0 =  (f5 * f0)
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		f3 =  ((__xasm<Number>(push((i1+80)), op(0x38))))
		f4 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		f4 =  (f4 * f3)
		f0 =  (f1 + f0)
		f1 =  f4/*fround*/
		f0 =  f0/*fround*/
		f4 =  f0/*fextend*/
		f5 =  ((__xasm<Number>(push((i1+72)), op(0x38))))
		f1 =  f1/*fextend*/
		f6 =  ((__xasm<Number>(push((i0+156)), op(0x38))))
		f7 =  ((__xasm<Number>(push((i0+136)), op(0x38))))
		f1 =  (f5 - f1)
		f3 =  (f4 * f3)
		f4 =  (f7 * f6)
		f5 =  ((__xasm<Number>(push((i0+112)), op(0x38))))
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		f4 =  f4/*fround*/
		f7 =  ((__xasm<Number>(push((i0+140)), op(0x38))))
		f8 =  ((__xasm<Number>(push((i1+76)), op(0x38))))
		f3 =  f3/*fextend*/
		f9 =  ((__xasm<Number>(push((i0+160)), op(0x38))))
		f10 =  f5/*fextend*/
		f4 =  f4/*fextend*/
		f1 =  f1/*fextend*/
		f1 =  (f1 + f4)
		f3 =  (f8 + f3)
		f4 =  (f10 * f9)
		f6 =  (f7 * f6)
		f7 =  ((__xasm<Number>(push((i0+116)), op(0x38))))
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		f4 =  f4/*fround*/
		f6 =  f6/*fround*/
		f8 =  f7/*fextend*/
		f4 =  f4/*fextend*/
		f1 =  f1/*fextend*/
		f6 =  f6/*fextend*/
		f3 =  f3/*fextend*/
		f1 =  (f1 + f4)
		f3 =  (f3 + f6)
		f4 =  (f8 * f9)
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		f4 =  f4/*fround*/
		f1 =  f1/*fextend*/
		f4 =  f4/*fextend*/
		f3 =  f3/*fextend*/
		f1 =  -f1
		f3 =  (f3 + f4)
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		f4 =  ((__xasm<Number>(push((i0+120)), op(0x38))))
		f1 =  f1/*fextend*/
		f6 =  ((__xasm<Number>(push((i0+128)), op(0x38))))
		f3 =  f3/*fextend*/
		f9 =  ((__xasm<Number>(push((i0+124)), op(0x38))))
		f11 =  ((__xasm<Number>(push((i0+132)), op(0x38))))
		f4 =  (f4 * f1)
		f6 =  (f6 * f3)
		f1 =  (f9 * f1)
		f4 =  f4/*fround*/
		f3 =  (f11 * f3)
		f6 =  f6/*fround*/
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		f6 =  f6/*fextend*/
		f4 =  f4/*fextend*/
		f4 =  (f4 - f6)
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f1 =  (f1 - f3)
		f3 =  f4/*fround*/
		f1 =  f1/*fround*/
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f3 =  (f10 + f3)
		f1 =  (f8 + f1)
		f3 =  f3/*fround*/
		f1 =  f1/*fround*/
		__asm(push(f3), push((i0+112)), op(0x3d))
		__asm(push(f1), push((i0+116)), op(0x3d))
		i2 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		f4 =  f1/*fextend*/
		f6 =  f3/*fextend*/
		f4 =  (f4 * f4)
		f6 =  (f6 * f6)
		f8 =  ((__xasm<Number>(push(i2), op(0x38))))
		f9 =  ((__xasm<Number>(push((i0+144)), op(0x38))))
		f8 =  (f8 * f9)
		f4 =  f4/*fround*/
		f6 =  f6/*fround*/
		f8 =  f8/*fround*/
		f4 =  f4/*fextend*/
		f6 =  f6/*fextend*/
		f9 =  f8/*fextend*/
		f4 =  (f6 + f4)
		f4 =  f4/*fround*/
		f6 =  (f9 * f9)
		i2 =  (i1 + 76)
		i3 =  (i0 + 116)
		i0 =  (i0 + 112)
		i4 =  (i1 + 72)
		i5 =  (i1 + 80)
		f6 =  f6/*fround*/
		f6 =  f6/*fextend*/
		f9 =  f4/*fextend*/
		__asm(push(f9>f6), iftrue, target("__ZN12b2MouseJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB233_2_F"))
	__asm(lbl("__ZN12b2MouseJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB233_1_F"))
		__asm(jump, target("__ZN12b2MouseJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB233_3_F"))
	__asm(lbl("__ZN12b2MouseJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB233_2_F"))
		f4 =  f4/*fextend*/
		f4 =  Math.sqrt(f4)
		f4 =  f4/*fround*/
		f4 =  f4/*fextend*/
		f6 =  f8/*fextend*/
		f4 =  (f6 / f4)
		f4 =  f4/*fround*/
		f3 =  f3/*fextend*/
		f4 =  f4/*fextend*/
		f3 =  (f3 * f4)
		f1 =  f1/*fextend*/
		f1 =  (f1 * f4)
		f3 =  f3/*fround*/
		__asm(push(f3), push(i0), op(0x3d))
		f1 =  f1/*fround*/
		__asm(push(f1), push(i3), op(0x3d))
	__asm(lbl("__ZN12b2MouseJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB233_3_F"))
		f4 =  f5/*fextend*/
		f3 =  f3/*fextend*/
		f3 =  (f3 - f4)
		f3 =  f3/*fround*/
		f4 =  ((__xasm<Number>(push((i1+128)), op(0x38))))
		f3 =  f3/*fextend*/
		f5 =  (f3 * f4)
		f6 =  f7/*fextend*/
		f1 =  f1/*fextend*/
		f1 =  (f1 - f6)
		f5 =  f5/*fround*/
		f6 =  ((__xasm<Number>(push(i4), op(0x38))))
		f1 =  f1/*fround*/
		f5 =  f5/*fextend*/
		f1 =  f1/*fextend*/
		f5 =  (f6 + f5)
		f4 =  (f1 * f4)
		f0 =  f0/*fextend*/
		f2 =  f2/*fextend*/
		f5 =  f5/*fround*/
		f4 =  f4/*fround*/
		f0 =  (f0 * f1)
		f1 =  (f2 * f3)
		__asm(push(f5), push(i4), op(0x3d))
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f2 =  ((__xasm<Number>(push(i2), op(0x38))))
		f3 =  f4/*fextend*/
		f2 =  (f2 + f3)
		f1 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		f2 =  f2/*fround*/
		f0 =  (f0 - f1)
		__asm(push(f2), push(i2), op(0x3d))
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push((i1+136)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f1 * f0)
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push(i5), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f1 + f0)
		f0 =  f0/*fround*/
		__asm(push(f0), push(i5), op(0x3d))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZN12b2MouseJoint24SolvePositionConstraintsEf:int = regFunc(FSM__ZN12b2MouseJoint24SolvePositionConstraintsEf.start)

public final class FSM__ZN12b2MouseJoint24SolvePositionConstraintsEf extends Machine {

	public static function start():void {
		var i0:int


		__asm(label, lbl("__ZN12b2MouseJoint24SolvePositionConstraintsEf_entry"))
	__asm(lbl("__ZN12b2MouseJoint24SolvePositionConstraintsEf__XprivateX__BB234_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (1)
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZNK16b2PrismaticJoint10GetAnchorAEv:int = regFunc(FSM__ZNK16b2PrismaticJoint10GetAnchorAEv.start)

public final class FSM__ZNK16b2PrismaticJoint10GetAnchorAEv extends Machine {

	public static function start():void {
		var i0:int, i1:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number

		__asm(label, lbl("__ZNK16b2PrismaticJoint10GetAnchorAEv_entry"))
	__asm(lbl("__ZNK16b2PrismaticJoint10GetAnchorAEv__XprivateX__BB235_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 8
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+48)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i1+20)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i0+96)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i1+24)), op(0x38))))
		f2 =  (f2 * f1)
		f0 =  (f0 * f1)
		f1 =  f2/*fround*/
		f0 =  f0/*fround*/
		f2 =  ((__xasm<Number>(push((i1+12)), op(0x38))))
		f0 =  f0/*fextend*/
		f3 =  ((__xasm<Number>(push((i1+28)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i0+100)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i1+32)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i1+16)), op(0x38))))
		f1 =  f1/*fextend*/
		f0 =  (f2 + f0)
		f2 =  (f5 * f4)
		f1 =  (f6 + f1)
		f3 =  (f3 * f4)
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		f3 =  f3/*fextend*/
		f0 =  f0/*fextend*/
		f2 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  (f0 + f3)
		f1 =  (f1 + f2)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		__asm(push(f0), push((mstate.ebp+-8)), op(0x3d))
		__asm(push(f1), push((mstate.ebp+-4)), op(0x3d))
		i0 =  ((__xasm<int>(push((mstate.ebp+-8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		mstate.edx = i1
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZNK16b2PrismaticJoint10GetAnchorBEv:int = regFunc(FSM__ZNK16b2PrismaticJoint10GetAnchorBEv.start)

public final class FSM__ZNK16b2PrismaticJoint10GetAnchorBEv extends Machine {

	public static function start():void {
		var i0:int, i1:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number

		__asm(label, lbl("__ZNK16b2PrismaticJoint10GetAnchorBEv_entry"))
	__asm(lbl("__ZNK16b2PrismaticJoint10GetAnchorBEv__XprivateX__BB236_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 8
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+52)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i1+20)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i0+104)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i1+24)), op(0x38))))
		f2 =  (f2 * f1)
		f0 =  (f0 * f1)
		f1 =  f2/*fround*/
		f0 =  f0/*fround*/
		f2 =  ((__xasm<Number>(push((i1+12)), op(0x38))))
		f0 =  f0/*fextend*/
		f3 =  ((__xasm<Number>(push((i1+28)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i0+108)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i1+32)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i1+16)), op(0x38))))
		f1 =  f1/*fextend*/
		f0 =  (f2 + f0)
		f2 =  (f5 * f4)
		f1 =  (f6 + f1)
		f3 =  (f3 * f4)
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		f3 =  f3/*fextend*/
		f0 =  f0/*fextend*/
		f2 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  (f0 + f3)
		f1 =  (f1 + f2)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		__asm(push(f0), push((mstate.ebp+-8)), op(0x3d))
		__asm(push(f1), push((mstate.ebp+-4)), op(0x3d))
		i0 =  ((__xasm<int>(push((mstate.ebp+-8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		mstate.edx = i1
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZNK16b2PrismaticJoint16GetReactionForceEf:int = regFunc(FSM__ZNK16b2PrismaticJoint16GetReactionForceEf.start)

public final class FSM__ZNK16b2PrismaticJoint16GetReactionForceEf extends Machine {

	public static function start():void {
		var i0:int, i1:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number

		__asm(label, lbl("__ZNK16b2PrismaticJoint16GetReactionForceEf_entry"))
	__asm(lbl("__ZNK16b2PrismaticJoint16GetReactionForceEf__XprivateX__BB237_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 8
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i0+216)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i0+208)), op(0x38))))
		f0 =  (f0 + f1)
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push((i0+140)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i0+200)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i0+144)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i0+132)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i0+136)), op(0x38))))
		f0 =  f0/*fextend*/
		f5 =  (f5 * f0)
		f0 =  (f4 * f0)
		f3 =  (f3 * f2)
		f1 =  (f1 * f2)
		f2 =  f5/*fround*/
		f0 =  f0/*fround*/
		f3 =  f3/*fround*/
		f1 =  f1/*fround*/
		f2 =  f2/*fextend*/
		f3 =  f3/*fextend*/
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		f2 =  (f3 + f2)
		f0 =  (f1 + f0)
		f1 =  f2/*fround*/
		f0 =  f0/*fround*/
		f2 =  ((__xasm<Number>(push((mstate.ebp+12)), op(0x38))))
		f1 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		f1 =  (f1 * f2)
		f0 =  (f0 * f2)
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		__asm(push(f0), push((mstate.ebp+-4)), op(0x3d))
		__asm(push(f1), push((mstate.ebp+-8)), op(0x3d))
		i0 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+-8)), op(0x37))))
		mstate.edx = i1
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZNK16b2PrismaticJoint17GetReactionTorqueEf:int = regFunc(FSM__ZNK16b2PrismaticJoint17GetReactionTorqueEf.start)

public final class FSM__ZNK16b2PrismaticJoint17GetReactionTorqueEf extends Machine {

	public static function start():void {
		var i0:int

		var f0:Number, f1:Number

		__asm(label, lbl("__ZNK16b2PrismaticJoint17GetReactionTorqueEf_entry"))
	__asm(lbl("__ZNK16b2PrismaticJoint17GetReactionTorqueEf__XprivateX__BB238_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i0+204)), op(0x38))))
		f1 =  ((__xasm<Number>(push((mstate.ebp+12)), op(0x38))))
		f0 =  (f0 * f1)
		f0 =  f0/*fround*/
		mstate.st0 = f0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Async
public const __ZN16b2PrismaticJointD1Ev:int = regFunc(FSM__ZN16b2PrismaticJointD1Ev.start)

public final class FSM__ZN16b2PrismaticJointD1Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN16b2PrismaticJointD1Ev = new FSM__ZN16b2PrismaticJointD1Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN16b2PrismaticJointD1Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN16b2PrismaticJointD1Ev_errState",
			"__ZN16b2PrismaticJointD1Ev_state0"))
	__asm(lbl("__ZN16b2PrismaticJointD1Ev_state0"))
	__asm(lbl("__ZN16b2PrismaticJointD1Ev__XprivateX__BB239_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV7b2Joint)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN16b2PrismaticJointD1Ev_errState"))
		throw("Invalid state in __ZN16b2PrismaticJointD1Ev")
	}
}



// Async
public const __ZN16b2PrismaticJointD0Ev:int = regFunc(FSM__ZN16b2PrismaticJointD0Ev.start)

public final class FSM__ZN16b2PrismaticJointD0Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN16b2PrismaticJointD0Ev = new FSM__ZN16b2PrismaticJointD0Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN16b2PrismaticJointD0Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN16b2PrismaticJointD0Ev_errState",
			"__ZN16b2PrismaticJointD0Ev_state0",
			"__ZN16b2PrismaticJointD0Ev_state1"))
	__asm(lbl("__ZN16b2PrismaticJointD0Ev_state0"))
	__asm(lbl("__ZN16b2PrismaticJointD0Ev__XprivateX__BB240_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV7b2Joint)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		__asm(push(i1==0), iftrue, target("__ZN16b2PrismaticJointD0Ev__XprivateX__BB240_2_F"))
	__asm(lbl("__ZN16b2PrismaticJointD0Ev__XprivateX__BB240_1_F"))
		i0 =  (0)
		mstate.esp -= 8
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN16b2PrismaticJointD0Ev_state1"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__ZN16b2PrismaticJointD0Ev__XprivateX__BB240_2_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN16b2PrismaticJointD0Ev_errState"))
		throw("Invalid state in __ZN16b2PrismaticJointD0Ev")
	}
}



// Sync
public const __ZN16b2PrismaticJoint23InitVelocityConstraintsERK10b2TimeStep:int = regFunc(FSM__ZN16b2PrismaticJoint23InitVelocityConstraintsERK10b2TimeStep.start)

public final class FSM__ZN16b2PrismaticJoint23InitVelocityConstraintsERK10b2TimeStep extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
		var i8:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number
		var f8:Number, f9:Number, f10:Number, f11:Number, f12:Number, f13:Number, f14:Number, f15:Number
		var f16:Number, f17:Number, f18:Number, f19:Number, f20:Number, f21:Number, f22:Number, f23:Number
		var f24:Number
		__asm(label, lbl("__ZN16b2PrismaticJoint23InitVelocityConstraintsERK10b2TimeStep_entry"))
	__asm(lbl("__ZN16b2PrismaticJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB241_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		f0 =  (1.19209e-07)
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+48)), op(0x37))))
		f1 =  ((__xasm<Number>(push((i1+36)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i1+40)), op(0x38))))
		i2 =  ((__xasm<int>(push((i0+52)), op(0x37))))
		__asm(push(f1), push((i0+64)), op(0x3d))
		__asm(push(f2), push((i0+68)), op(0x3d))
		f3 =  ((__xasm<Number>(push((i2+36)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i2+40)), op(0x38))))
		__asm(push(f3), push((i0+72)), op(0x3d))
		__asm(push(f4), push((i0+76)), op(0x3d))
		f5 =  ((__xasm<Number>(push((i0+108)), op(0x38))))
		f4 =  f4/*fextend*/
		f6 =  ((__xasm<Number>(push((i0+104)), op(0x38))))
		f3 =  f3/*fextend*/
		f4 =  (f5 - f4)
		f3 =  (f6 - f3)
		f4 =  f4/*fround*/
		f3 =  f3/*fround*/
		f5 =  ((__xasm<Number>(push((i2+20)), op(0x38))))
		f3 =  f3/*fextend*/
		f6 =  ((__xasm<Number>(push((i2+24)), op(0x38))))
		f7 =  ((__xasm<Number>(push((i2+28)), op(0x38))))
		f4 =  f4/*fextend*/
		f8 =  ((__xasm<Number>(push((i2+32)), op(0x38))))
		f5 =  (f5 * f3)
		f3 =  (f6 * f3)
		f6 =  (f7 * f4)
		f4 =  (f8 * f4)
		f5 =  f5/*fround*/
		f3 =  f3/*fround*/
		f6 =  f6/*fround*/
		f4 =  f4/*fround*/
		f7 =  ((__xasm<Number>(push((i1+20)), op(0x38))))
		f8 =  ((__xasm<Number>(push((i1+24)), op(0x38))))
		f9 =  ((__xasm<Number>(push((i1+28)), op(0x38))))
		f10 =  ((__xasm<Number>(push((i1+32)), op(0x38))))
		f11 =  ((__xasm<Number>(push((i1+128)), op(0x38))))
		f12 =  ((__xasm<Number>(push((i0+100)), op(0x38))))
		f2 =  f2/*fextend*/
		f13 =  ((__xasm<Number>(push((i0+96)), op(0x38))))
		f1 =  f1/*fextend*/
		f14 =  ((__xasm<Number>(push((i2+56)), op(0x38))))
		f15 =  ((__xasm<Number>(push((i2+52)), op(0x38))))
		f16 =  ((__xasm<Number>(push((i1+56)), op(0x38))))
		f17 =  ((__xasm<Number>(push((i1+52)), op(0x38))))
		f6 =  f6/*fextend*/
		f5 =  f5/*fextend*/
		f4 =  f4/*fextend*/
		f3 =  f3/*fextend*/
		f5 =  (f5 + f6)
		f3 =  (f3 + f4)
		f2 =  (f12 - f2)
		f1 =  (f13 - f1)
		__asm(push(f11), push((i0+80)), op(0x3d))
		f4 =  f5/*fround*/
		f3 =  f3/*fround*/
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		f5 =  ((__xasm<Number>(push((i1+136)), op(0x38))))
		f6 =  f4/*fextend*/
		f12 =  f3/*fextend*/
		f13 =  f7/*fextend*/
		f1 =  f1/*fextend*/
		f18 =  f8/*fextend*/
		f19 =  f9/*fextend*/
		f2 =  f2/*fextend*/
		f20 =  f10/*fextend*/
		__asm(push(f5), push((i0+84)), op(0x3d))
		f21 =  (f13 * f1)
		f1 =  (f18 * f1)
		f22 =  (f19 * f2)
		f2 =  (f20 * f2)
		f15 =  (f15 + f6)
		f14 =  (f14 + f12)
		f23 =  ((__xasm<Number>(push((i2+128)), op(0x38))))
		f21 =  f21/*fround*/
		f1 =  f1/*fround*/
		f22 =  f22/*fround*/
		f2 =  f2/*fround*/
		f15 =  f15/*fround*/
		f14 =  f14/*fround*/
		__asm(push(f23), push((i0+88)), op(0x3d))
		f15 =  f15/*fextend*/
		f14 =  f14/*fextend*/
		f22 =  f22/*fextend*/
		f21 =  f21/*fextend*/
		f2 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		f24 =  ((__xasm<Number>(push((i2+136)), op(0x38))))
		f21 =  (f21 + f22)
		f1 =  (f1 + f2)
		f2 =  (f15 - f17)
		f14 =  (f14 - f16)
		__asm(push(f24), push((i0+92)), op(0x3d))
		f15 =  f21/*fround*/
		f1 =  f1/*fround*/
		f2 =  f2/*fround*/
		f14 =  f14/*fround*/
		f16 =  ((__xasm<Number>(push((i0+112)), op(0x38))))
		f17 =  ((__xasm<Number>(push((i0+116)), op(0x38))))
		f15 =  f15/*fextend*/
		f2 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		f14 =  f14/*fextend*/
		f2 =  (f2 - f15)
		f18 =  (f18 * f16)
		f13 =  (f13 * f16)
		f16 =  (f20 * f17)
		f17 =  (f19 * f17)
		f14 =  (f14 - f1)
		f2 =  f2/*fround*/
		f18 =  f18/*fround*/
		f13 =  f13/*fround*/
		f16 =  f16/*fround*/
		f17 =  f17/*fround*/
		f14 =  f14/*fround*/
		f19 =  f2/*fextend*/
		f20 =  f14/*fextend*/
		f16 =  f16/*fextend*/
		f18 =  f18/*fextend*/
		f17 =  f17/*fextend*/
		f13 =  f13/*fextend*/
		f15 =  (f19 + f15)
		f16 =  (f18 + f16)
		f13 =  (f13 + f17)
		f1 =  (f20 + f1)
		f15 =  f15/*fround*/
		f16 =  f16/*fround*/
		f13 =  f13/*fround*/
		f1 =  f1/*fround*/
		f17 =  f16/*fextend*/
		f18 =  f15/*fextend*/
		f19 =  f13/*fextend*/
		f20 =  f1/*fextend*/
		f18 =  (f18 * f17)
		f20 =  (f20 * f19)
		f18 =  f18/*fround*/
		f20 =  f20/*fround*/
		f20 =  f20/*fextend*/
		f18 =  f18/*fextend*/
		f18 =  (f18 - f20)
		f6 =  (f6 * f17)
		f12 =  (f12 * f19)
		f17 =  f18/*fround*/
		f6 =  f6/*fround*/
		f12 =  f12/*fround*/
		f18 =  f17/*fextend*/
		f19 =  f5/*fextend*/
		f12 =  f12/*fextend*/
		f6 =  f6/*fextend*/
		f19 =  (f19 * f18)
		f6 =  (f6 - f12)
		f12 =  f19/*fround*/
		f6 =  f6/*fround*/
		f12 =  f12/*fextend*/
		f19 =  f6/*fextend*/
		f20 =  f24/*fextend*/
		f21 =  f23/*fextend*/
		f22 =  f11/*fextend*/
		f12 =  (f12 * f18)
		f18 =  (f20 * f19)
		f20 =  (f22 + f21)
		f12 =  f12/*fround*/
		f18 =  f18/*fround*/
		f20 =  f20/*fround*/
		f18 =  f18/*fextend*/
		f12 =  f12/*fextend*/
		f21 =  f20/*fextend*/
		f12 =  (f21 + f12)
		f18 =  (f18 * f19)
		__asm(push(f13), push((i0+132)), op(0x3d))
		f12 =  f12/*fround*/
		f18 =  f18/*fround*/
		__asm(push(f16), push((i0+136)), op(0x3d))
		f18 =  f18/*fextend*/
		f12 =  f12/*fextend*/
		__asm(push(f17), push((i0+156)), op(0x3d))
		f12 =  (f12 + f18)
		__asm(push(f6), push((i0+160)), op(0x3d))
		f12 =  f12/*fround*/
		i3 =  (i0 + 212)
		i4 =  (i0 + 92)
		i5 =  (i0 + 88)
		i6 =  (i0 + 84)
		i7 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f18 =  f12/*fextend*/
		__asm(push(f18>f0), iftrue, target("__ZN16b2PrismaticJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB241_2_F"))
	__asm(lbl("__ZN16b2PrismaticJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB241_1_F"))
		__asm(jump, target("__ZN16b2PrismaticJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB241_3_F"))
	__asm(lbl("__ZN16b2PrismaticJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB241_2_F"))
		f0 =  (1)
		f0 =  f0/*fround*/
		f12 =  f12/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 / f12)
		f12 =  f0/*fround*/
	__asm(lbl("__ZN16b2PrismaticJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB241_3_F"))
		f0 = f12
		f12 =  (0)
		__asm(push(f0), push(i3), op(0x3d))
		f0 =  ((__xasm<Number>(push((i0+120)), op(0x38))))
		f18 =  ((__xasm<Number>(push((i0+124)), op(0x38))))
		f8 =  f8/*fextend*/
		f7 =  f7/*fextend*/
		f10 =  f10/*fextend*/
		f9 =  f9/*fextend*/
		f8 =  (f8 * f0)
		f0 =  (f7 * f0)
		f7 =  (f10 * f18)
		f9 =  (f9 * f18)
		f8 =  f8/*fround*/
		f0 =  f0/*fround*/
		f7 =  f7/*fround*/
		f9 =  f9/*fround*/
		f7 =  f7/*fextend*/
		f8 =  f8/*fextend*/
		f9 =  f9/*fextend*/
		f0 =  f0/*fextend*/
		f7 =  (f8 + f7)
		f0 =  (f0 + f9)
		f7 =  f7/*fround*/
		f0 =  f0/*fround*/
		f8 =  f15/*fextend*/
		f9 =  f7/*fextend*/
		f1 =  f1/*fextend*/
		f10 =  f0/*fextend*/
		f8 =  (f8 * f9)
		f1 =  (f1 * f10)
		f8 =  f8/*fround*/
		f1 =  f1/*fround*/
		f4 =  f4/*fextend*/
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f8 =  f8/*fextend*/
		f1 =  (f8 - f1)
		f4 =  (f4 * f9)
		f3 =  (f3 * f10)
		f1 =  f1/*fround*/
		f4 =  f4/*fround*/
		f3 =  f3/*fround*/
		f8 =  f1/*fextend*/
		f5 =  f5/*fextend*/
		f3 =  f3/*fextend*/
		f4 =  f4/*fextend*/
		f9 =  (f8 * f5)
		f3 =  (f4 - f3)
		f4 =  f9/*fround*/
		f3 =  f3/*fround*/
		f4 =  f4/*fextend*/
		f9 =  f24/*fextend*/
		f10 =  f3/*fextend*/
		f8 =  (f4 * f8)
		f15 =  (f10 * f9)
		f8 =  f8/*fround*/
		f15 =  f15/*fround*/
		f15 =  f15/*fextend*/
		f8 =  f8/*fextend*/
		f18 =  f20/*fextend*/
		f8 =  (f18 + f8)
		f10 =  (f15 * f10)
		f19 =  f17/*fextend*/
		f20 =  f6/*fextend*/
		__asm(push(f0), push((i0+140)), op(0x3d))
		f8 =  f8/*fround*/
		f10 =  f10/*fround*/
		__asm(push(f7), push((i0+144)), op(0x3d))
		f21 =  (f4 * f19)
		f22 =  (f15 * f20)
		f23 =  (f19 * f5)
		f10 =  f10/*fextend*/
		f8 =  f8/*fextend*/
		__asm(push(f1), push((i0+148)), op(0x3d))
		f8 =  (f8 + f10)
		f10 =  f21/*fround*/
		f21 =  f22/*fround*/
		f22 =  f23/*fround*/
		f4 =  (f4 + f15)
		f5 =  (f5 + f9)
		f15 =  f22/*fextend*/
		f22 =  (1)
		__asm(push(f3), push((i0+152)), op(0x3d))
		f8 =  f8/*fround*/
		f21 =  f21/*fextend*/
		f10 =  f10/*fextend*/
		f10 =  (f10 + f21)
		f5 =  f5/*fround*/
		f19 =  (f15 * f19)
		f9 =  (f20 * f9)
		f12 =  f12/*fround*/
		f21 =  f22/*fround*/
		__asm(push(f8), push((i0+164)), op(0x3d))
		f4 =  f4/*fround*/
		f8 =  f19/*fround*/
		f9 =  f9/*fround*/
		__asm(push(f4), push((i0+168)), op(0x3d))
		f10 =  f10/*fround*/
		f19 =  f21/*fextend*/
		f12 =  f12/*fextend*/
		f5 =  f5/*fextend*/
		f9 =  f9/*fextend*/
		__asm(push(f10), push((i0+172)), op(0x3d))
		f5 =  ((f5==f12) ? f19 : f5)
		f8 =  f8/*fextend*/
		f12 =  (f15 + f9)
		f8 =  (f18 + f8)
		f9 =  (f9 * f20)
		__asm(push(f4), push((i0+176)), op(0x3d))
		f4 =  f5/*fround*/
		f5 =  f8/*fround*/
		f8 =  f9/*fround*/
		__asm(push(f4), push((i0+180)), op(0x3d))
		f4 =  f12/*fround*/
		__asm(push(f4), push((i0+184)), op(0x3d))
		f8 =  f8/*fextend*/
		f5 =  f5/*fextend*/
		__asm(push(f10), push((i0+188)), op(0x3d))
		f5 =  (f5 + f8)
		__asm(push(f4), push((i0+192)), op(0x3d))
		f4 =  f5/*fround*/
		__asm(push(f4), push((i0+196)), op(0x3d))
		i3 =  ((__xasm<int>(push((i0+236)), op(0x35))))
		__asm(push(i3==0), iftrue, target("__ZN16b2PrismaticJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB241_13_F"))
	__asm(lbl("__ZN16b2PrismaticJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB241_4_F"))
		f4 =  (0)
		f5 =  ((__xasm<Number>(push((i0+224)), op(0x38))))
		f8 =  ((__xasm<Number>(push((i0+220)), op(0x38))))
		f2 =  f2/*fextend*/
		f9 =  f13/*fextend*/
		f10 =  f14/*fextend*/
		f12 =  f16/*fextend*/
		f2 =  (f9 * f2)
		f9 =  (f12 * f10)
		f10 =  f5/*fextend*/
		f12 =  f8/*fextend*/
		f2 =  f2/*fround*/
		f9 =  f9/*fround*/
		f14 =  (f10 - f12)
		f10 =  (f12 - f10)
		f12 =  f14/*fround*/
		f10 =  f10/*fround*/
		f4 =  f4/*fround*/
		f9 =  f9/*fextend*/
		f2 =  f2/*fextend*/
		f14 =  ((__xasm<Number>(push(_b2_linearSlop), op(0x38))))
		f2 =  (f2 + f9)
		f9 =  f10/*fextend*/
		f4 =  f4/*fextend*/
		f10 =  f12/*fextend*/
		f2 =  f2/*fround*/
		f4 =  ((f10<=f4) ? f9 : f10)
		f9 =  (f14 + f14)
		f4 =  f4/*fround*/
		f9 =  f9/*fround*/
		f9 =  f9/*fextend*/
		f4 =  f4/*fextend*/
		__asm(push(f4>=f9), iftrue, target("__ZN16b2PrismaticJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB241_6_F"))
	__asm(lbl("__ZN16b2PrismaticJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB241_5_F"))
		i3 =  (3)
		__asm(push(i3), push((i0+240)), op(0x3c))
		i3 =  ((__xasm<int>(push((i0+237)), op(0x35))))
		__asm(push(i3==0), iftrue, target("__ZN16b2PrismaticJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB241_15_F"))
		__asm(jump, target("__ZN16b2PrismaticJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB241_16_F"))
	__asm(lbl("__ZN16b2PrismaticJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB241_6_F"))
		f4 =  f2/*fextend*/
		f8 =  f8/*fextend*/
		__asm(push(f8<f4), iftrue, target("__ZN16b2PrismaticJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB241_9_F"))
	__asm(lbl("__ZN16b2PrismaticJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB241_7_F"))
		i3 =  ((__xasm<int>(push((i0+240)), op(0x37))))
		i8 =  (i0 + 240)
		__asm(push(i3==1), iftrue, target("__ZN16b2PrismaticJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB241_14_F"))
	__asm(lbl("__ZN16b2PrismaticJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB241_8_F"))
		i3 =  (1)
		__asm(push(i3), push(i8), op(0x3c))
		i3 =  (0)
		__asm(push(i3), push((i0+208)), op(0x3c))
		i3 =  ((__xasm<int>(push((i0+237)), op(0x35))))
		__asm(push(i3==0), iftrue, target("__ZN16b2PrismaticJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB241_15_F"))
		__asm(jump, target("__ZN16b2PrismaticJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB241_16_F"))
	__asm(lbl("__ZN16b2PrismaticJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB241_9_F"))
		i3 =  (i0 + 240)
		f2 =  f2/*fextend*/
		f4 =  f5/*fextend*/
		__asm(push(f4>f2), iftrue, target("__ZN16b2PrismaticJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB241_12_F"))
	__asm(lbl("__ZN16b2PrismaticJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB241_10_F"))
		i8 =  ((__xasm<int>(push(i3), op(0x37))))
		__asm(push(i8==2), iftrue, target("__ZN16b2PrismaticJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB241_14_F"))
	__asm(lbl("__ZN16b2PrismaticJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB241_11_F"))
		i8 =  (2)
		__asm(push(i8), push(i3), op(0x3c))
		i3 =  (0)
		__asm(push(i3), push((i0+208)), op(0x3c))
		i3 =  ((__xasm<int>(push((i0+237)), op(0x35))))
		__asm(push(i3==0), iftrue, target("__ZN16b2PrismaticJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB241_15_F"))
		__asm(jump, target("__ZN16b2PrismaticJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB241_16_F"))
	__asm(lbl("__ZN16b2PrismaticJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB241_12_F"))
		i8 =  (0)
		__asm(push(i8), push(i3), op(0x3c))
		__asm(push(i8), push((i0+208)), op(0x3c))
		i3 =  ((__xasm<int>(push((i0+237)), op(0x35))))
		__asm(push(i3==0), iftrue, target("__ZN16b2PrismaticJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB241_15_F"))
		__asm(jump, target("__ZN16b2PrismaticJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB241_16_F"))
	__asm(lbl("__ZN16b2PrismaticJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB241_13_F"))
		i3 =  (0)
		__asm(push(i3), push((i0+240)), op(0x3c))
		__asm(push(i3), push((i0+208)), op(0x3c))
	__asm(lbl("__ZN16b2PrismaticJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB241_14_F"))
		i3 =  ((__xasm<int>(push((i0+237)), op(0x35))))
		__asm(push(i3!=0), iftrue, target("__ZN16b2PrismaticJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB241_16_F"))
	__asm(lbl("__ZN16b2PrismaticJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB241_15_F"))
		i3 =  (0)
		__asm(push(i3), push((i0+216)), op(0x3c))
	__asm(lbl("__ZN16b2PrismaticJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB241_16_F"))
		i3 =  ((__xasm<int>(push((i7+20)), op(0x35))))
		__asm(push(i3==0), iftrue, target("__ZN16b2PrismaticJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB241_18_F"))
	__asm(lbl("__ZN16b2PrismaticJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB241_17_F"))
		f2 =  ((__xasm<Number>(push((i7+8)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i0+200)), op(0x38))))
		f4 =  (f4 * f2)
		f4 =  f4/*fround*/
		__asm(push(f4), push((i0+200)), op(0x3d))
		f5 =  ((__xasm<Number>(push((i0+204)), op(0x38))))
		f5 =  (f5 * f2)
		f5 =  f5/*fround*/
		__asm(push(f5), push((i0+204)), op(0x3d))
		f8 =  ((__xasm<Number>(push((i0+208)), op(0x38))))
		f2 =  (f8 * f2)
		f2 =  f2/*fround*/
		__asm(push(f2), push((i0+208)), op(0x3d))
		f8 =  ((__xasm<Number>(push((i0+216)), op(0x38))))
		f9 =  ((__xasm<Number>(push((i7+8)), op(0x38))))
		f8 =  (f8 * f9)
		f8 =  f8/*fround*/
		f2 =  f2/*fextend*/
		f9 =  f8/*fextend*/
		f2 =  (f9 + f2)
		f2 =  f2/*fround*/
		f9 =  f13/*fextend*/
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f4 =  f4/*fextend*/
		f9 =  (f9 * f2)
		f0 =  (f0 * f4)
		f9 =  f9/*fround*/
		f0 =  f0/*fround*/
		f9 =  f9/*fextend*/
		f0 =  f0/*fextend*/
		f10 =  f16/*fextend*/
		f0 =  (f0 + f9)
		f7 =  f7/*fextend*/
		f9 =  (f10 * f2)
		f0 =  f0/*fround*/
		f7 =  (f7 * f4)
		f9 =  f9/*fround*/
		f7 =  f7/*fround*/
		f10 =  f11/*fextend*/
		f0 =  f0/*fextend*/
		f11 =  (f0 * f10)
		f9 =  f9/*fextend*/
		f7 =  f7/*fextend*/
		f7 =  (f7 + f9)
		f9 =  f11/*fround*/
		f1 =  f1/*fextend*/
		__asm(push(f8), push((i0+216)), op(0x3d))
		f7 =  f7/*fround*/
		f1 =  (f4 * f1)
		f8 =  ((__xasm<Number>(push((i1+72)), op(0x38))))
		f9 =  f9/*fextend*/
		f8 =  (f8 - f9)
		f7 =  f7/*fextend*/
		f1 =  f1/*fround*/
		f8 =  f8/*fround*/
		f9 =  (f7 * f10)
		f10 =  f17/*fextend*/
		f1 =  f1/*fextend*/
		f5 =  f5/*fextend*/
		__asm(push(f8), push((i1+72)), op(0x3d))
		f8 =  f9/*fround*/
		f9 =  (f2 * f10)
		f1 =  (f1 + f5)
		f9 =  f9/*fround*/
		f1 =  f1/*fround*/
		f10 =  ((__xasm<Number>(push((i1+76)), op(0x38))))
		f8 =  f8/*fextend*/
		f8 =  (f10 - f8)
		f9 =  f9/*fextend*/
		f1 =  f1/*fextend*/
		f8 =  f8/*fround*/
		f1 =  (f1 + f9)
		__asm(push(f8), push((i1+76)), op(0x3d))
		f1 =  f1/*fround*/
		f8 =  ((__xasm<Number>(push(i6), op(0x38))))
		f1 =  f1/*fextend*/
		f1 =  (f8 * f1)
		f1 =  f1/*fround*/
		f8 =  ((__xasm<Number>(push((i1+80)), op(0x38))))
		f1 =  f1/*fextend*/
		f1 =  (f8 - f1)
		f1 =  f1/*fround*/
		__asm(push(f1), push((i1+80)), op(0x3d))
		f1 =  ((__xasm<Number>(push(i5), op(0x38))))
		f0 =  (f0 * f1)
		f0 =  f0/*fround*/
		f3 =  f3/*fextend*/
		f8 =  ((__xasm<Number>(push((i2+72)), op(0x38))))
		f0 =  f0/*fextend*/
		f3 =  (f4 * f3)
		f0 =  (f8 + f0)
		f3 =  f3/*fround*/
		f1 =  (f7 * f1)
		f4 =  f6/*fextend*/
		f3 =  f3/*fextend*/
		f0 =  f0/*fround*/
		__asm(push(f0), push((i2+72)), op(0x3d))
		f0 =  f1/*fround*/
		f1 =  (f2 * f4)
		f2 =  (f3 + f5)
		f1 =  f1/*fround*/
		f2 =  f2/*fround*/
		f3 =  ((__xasm<Number>(push((i2+76)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f3 + f0)
		f1 =  f1/*fextend*/
		f2 =  f2/*fextend*/
		f0 =  f0/*fround*/
		f1 =  (f2 + f1)
		__asm(push(f0), push((i2+76)), op(0x3d))
		f0 =  f1/*fround*/
		f1 =  ((__xasm<Number>(push(i4), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f1 * f0)
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push((i2+80)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f1 + f0)
		f0 =  f0/*fround*/
		__asm(push(f0), push((i2+80)), op(0x3d))
		__asm(jump, target("__ZN16b2PrismaticJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB241_19_F"))
	__asm(lbl("__ZN16b2PrismaticJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB241_18_F"))
		i1 =  (0)
		__asm(push(i1), push((i0+200)), op(0x3c))
		__asm(push(i1), push((i0+204)), op(0x3c))
		__asm(push(i1), push((i0+208)), op(0x3c))
		__asm(push(i1), push((i0+216)), op(0x3c))
	__asm(lbl("__ZN16b2PrismaticJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB241_19_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZN16b2PrismaticJoint24SolveVelocityConstraintsERK10b2TimeStep:int = regFunc(FSM__ZN16b2PrismaticJoint24SolveVelocityConstraintsERK10b2TimeStep.start)

public final class FSM__ZN16b2PrismaticJoint24SolveVelocityConstraintsERK10b2TimeStep extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
		var i8:int, i9:int, i10:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number
		var f8:Number, f9:Number, f10:Number, f11:Number, f12:Number, f13:Number, f14:Number, f15:Number
		var f16:Number, f17:Number, f18:Number, f19:Number, f20:Number, f21:Number, f22:Number, f23:Number
		var f24:Number, f25:Number, f26:Number, f27:Number, f28:Number, f29:Number, f30:Number, f31:Number
		__asm(label, lbl("__ZN16b2PrismaticJoint24SolveVelocityConstraintsERK10b2TimeStep_entry"))
	__asm(lbl("__ZN16b2PrismaticJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB242_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 104
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+48)), op(0x37))))
		i2 =  ((__xasm<int>(push((i0+52)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i1+72)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i1+76)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i1+80)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i2+72)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i2+76)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i2+80)), op(0x38))))
		i3 =  ((__xasm<int>(push((i0+237)), op(0x35))))
		i4 =  (i1 + 76)
		i5 =  (i2 + 76)
		i6 =  (i2 + 80)
		i2 =  (i2 + 72)
		i7 =  (i1 + 80)
		i1 =  (i1 + 72)
		i8 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		__asm(push(i3!=0), iftrue, target("__ZN16b2PrismaticJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB242_2_F"))
	__asm(jump, target("__ZN16b2PrismaticJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB242_1_F"), lbl("__ZN16b2PrismaticJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB242_1_B"), label, lbl("__ZN16b2PrismaticJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB242_1_F")); 
		__asm(jump, target("__ZN16b2PrismaticJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB242_4_F"))
	__asm(lbl("__ZN16b2PrismaticJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB242_2_F"))
		i3 =  ((__xasm<int>(push((i0+240)), op(0x37))))
		__asm(push(i3==3), iftrue, target("__ZN16b2PrismaticJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB242_1_B"))
	__asm(lbl("__ZN16b2PrismaticJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB242_3_F"))
		f1 =  f1/*fextend*/
		f4 =  f4/*fextend*/
		f0 =  f0/*fextend*/
		f3 =  f3/*fextend*/
		f6 =  (f4 - f1)
		f7 =  (f3 - f0)
		f6 =  f6/*fround*/
		f7 =  f7/*fround*/
		f8 =  ((__xasm<Number>(push((i0+132)), op(0x38))))
		f7 =  f7/*fextend*/
		f9 =  ((__xasm<Number>(push((i0+136)), op(0x38))))
		f6 =  f6/*fextend*/
		f6 =  (f9 * f6)
		f7 =  (f8 * f7)
		f6 =  f6/*fround*/
		f7 =  f7/*fround*/
		f10 =  ((__xasm<Number>(push((i0+160)), op(0x38))))
		f5 =  f5/*fextend*/
		f6 =  f6/*fextend*/
		f7 =  f7/*fextend*/
		f6 =  (f7 + f6)
		f7 =  (f10 * f5)
		f6 =  f6/*fround*/
		f7 =  f7/*fround*/
		f11 =  ((__xasm<Number>(push((i0+156)), op(0x38))))
		f2 =  f2/*fextend*/
		f7 =  f7/*fextend*/
		f6 =  f6/*fextend*/
		f6 =  (f6 + f7)
		f7 =  (f11 * f2)
		f6 =  f6/*fround*/
		f7 =  f7/*fround*/
		f7 =  f7/*fextend*/
		f6 =  f6/*fextend*/
		f6 =  (f6 - f7)
		f6 =  f6/*fround*/
		f7 =  ((__xasm<Number>(push((i0+232)), op(0x38))))
		f6 =  f6/*fextend*/
		f6 =  (f7 - f6)
		f6 =  f6/*fround*/
		f7 =  ((__xasm<Number>(push((i0+212)), op(0x38))))
		f6 =  f6/*fextend*/
		f6 =  (f7 * f6)
		f6 =  f6/*fround*/
		f7 =  ((__xasm<Number>(push((i0+216)), op(0x38))))
		f6 =  f6/*fextend*/
		f12 =  ((__xasm<Number>(push(i8), op(0x38))))
		f13 =  ((__xasm<Number>(push((i0+228)), op(0x38))))
		f6 =  (f7 + f6)
		f12 =  (f12 * f13)
		f6 =  f6/*fround*/
		f12 =  f12/*fround*/
		f12 =  f12/*fextend*/
		f6 =  f6/*fextend*/
		f6 =  ((f6<f12) ? f6 : f12)
		f12 =  -f12
		f6 =  f6/*fround*/
		f12 =  f12/*fround*/
		f12 =  f12/*fextend*/
		f6 =  f6/*fextend*/
		f6 =  ((f6<f12) ? f12 : f6)
		f6 =  f6/*fround*/
		f12 =  f6/*fextend*/
		f7 =  (f12 - f7)
		f7 =  f7/*fround*/
		f7 =  f7/*fextend*/
		f9 =  (f9 * f7)
		f8 =  (f8 * f7)
		f11 =  (f11 * f7)
		f7 =  (f10 * f7)
		__asm(push(f6), push((i0+216)), op(0x3d))
		f6 =  f9/*fround*/
		f8 =  f8/*fround*/
		f9 =  f11/*fround*/
		f7 =  f7/*fround*/
		f10 =  ((__xasm<Number>(push((i0+80)), op(0x38))))
		f6 =  f6/*fextend*/
		f11 =  ((__xasm<Number>(push((i0+88)), op(0x38))))
		f8 =  f8/*fextend*/
		f12 =  ((__xasm<Number>(push((i0+84)), op(0x38))))
		f13 =  ((__xasm<Number>(push((i0+92)), op(0x38))))
		f9 =  f9/*fextend*/
		f7 =  f7/*fextend*/
		f14 =  (f6 * f10)
		f10 =  (f8 * f10)
		f9 =  (f12 * f9)
		f6 =  (f6 * f11)
		f8 =  (f8 * f11)
		f7 =  (f13 * f7)
		f11 =  f14/*fround*/
		f10 =  f10/*fround*/
		f9 =  f9/*fround*/
		f6 =  f6/*fround*/
		f8 =  f8/*fround*/
		f7 =  f7/*fround*/
		f11 =  f11/*fextend*/
		f10 =  f10/*fextend*/
		f9 =  f9/*fextend*/
		f6 =  f6/*fextend*/
		f8 =  f8/*fextend*/
		f7 =  f7/*fextend*/
		f1 =  (f1 - f11)
		f0 =  (f0 - f10)
		f2 =  (f2 - f9)
		f4 =  (f4 + f6)
		f3 =  (f3 + f8)
		f5 =  (f7 + f5)
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f4 =  f4/*fround*/
		f3 =  f3/*fround*/
		f5 =  f5/*fround*/
	__asm(lbl("__ZN16b2PrismaticJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB242_4_F"))
		__asm(push(f0), push((mstate.ebp+-32)), op(0x3d))
		f0 = f1
		__asm(push(f0), push((mstate.ebp+-24)), op(0x3d))
		f0 = f3
		__asm(push(f0), push((mstate.ebp+-16)), op(0x3d))
		f0 = f4
		__asm(push(f0), push((mstate.ebp+-8)), op(0x3d))
		f0 = f2
		__asm(push(f0), push((mstate.ebp+-48)), op(0x3d))
		f0 = f5
		__asm(push(f0), push((mstate.ebp+-40)), op(0x3d))
		f0 =  ((__xasm<Number>(push((mstate.ebp+-24)), op(0x38))))
		f0 =  f0/*fextend*/
		f1 =  ((__xasm<Number>(push((mstate.ebp+-8)), op(0x38))))
		f1 =  f1/*fextend*/
		f2 =  ((__xasm<Number>(push((mstate.ebp+-32)), op(0x38))))
		f2 =  f2/*fextend*/
		f3 =  ((__xasm<Number>(push((mstate.ebp+-16)), op(0x38))))
		f3 =  f3/*fextend*/
		f0 =  (f1 - f0)
		f1 =  (f3 - f2)
		f2 =  ((__xasm<Number>(push((i0+140)), op(0x38))))
		__asm(push(f2), push((mstate.ebp+-56)), op(0x3d))
		f2 =  ((__xasm<Number>(push((i0+144)), op(0x38))))
		__asm(push(f2), push((mstate.ebp+-64)), op(0x3d))
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f2 =  f0/*fextend*/
		f3 =  ((__xasm<Number>(push((mstate.ebp+-64)), op(0x38))))
		f3 =  f3/*fextend*/
		f4 =  f1/*fextend*/
		f5 =  ((__xasm<Number>(push((mstate.ebp+-56)), op(0x38))))
		f5 =  f5/*fextend*/
		f2 =  (f3 * f2)
		f3 =  (f5 * f4)
		f4 =  ((__xasm<Number>(push((i0+152)), op(0x38))))
		__asm(push(f4), push((mstate.ebp+-72)), op(0x3d))
		f2 =  f2/*fround*/
		f3 =  f3/*fround*/
		f2 =  f2/*fextend*/
		f3 =  f3/*fextend*/
		f4 =  f4/*fextend*/
		f5 =  ((__xasm<Number>(push((mstate.ebp+-40)), op(0x38))))
		f5 =  f5/*fextend*/
		f2 =  (f3 + f2)
		f3 =  (f4 * f5)
		f4 =  ((__xasm<Number>(push((i0+148)), op(0x38))))
		__asm(push(f4), push((mstate.ebp+-104)), op(0x3d))
		f2 =  f2/*fround*/
		f3 =  f3/*fround*/
		f4 =  ((__xasm<Number>(push((mstate.ebp+-48)), op(0x38))))
		f4 =  f4/*fextend*/
		f6 =  ((__xasm<Number>(push((mstate.ebp+-104)), op(0x38))))
		f6 =  f6/*fextend*/
		f3 =  f3/*fextend*/
		f2 =  f2/*fextend*/
		f2 =  (f2 + f3)
		f3 =  (f6 * f4)
		f2 =  f2/*fround*/
		f3 =  f3/*fround*/
		f3 =  f3/*fextend*/
		f2 =  f2/*fextend*/
		i3 =  ((__xasm<int>(push((i0+236)), op(0x35))))
		f2 =  (f2 - f3)
		f3 =  (f5 - f4)
		f2 =  f2/*fround*/
		f3 =  f3/*fround*/
		__asm(push(i3==0), iftrue, target("__ZN16b2PrismaticJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB242_18_F"))
	__asm(lbl("__ZN16b2PrismaticJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB242_5_F"))
		i3 =  ((__xasm<int>(push((i0+240)), op(0x37))))
		__asm(push(i3==0), iftrue, target("__ZN16b2PrismaticJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB242_18_F"))
	__asm(lbl("__ZN16b2PrismaticJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB242_6_F"))
		f4 =  (0)
		f5 =  ((__xasm<Number>(push((i0+176)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i0+192)), op(0x38))))
		f7 =  ((__xasm<Number>(push((i0+180)), op(0x38))))
		f8 =  ((__xasm<Number>(push((i0+188)), op(0x38))))
		f9 =  ((__xasm<Number>(push((i0+184)), op(0x38))))
		f10 =  ((__xasm<Number>(push((i0+196)), op(0x38))))
		f11 =  f10/*fextend*/
		f12 =  f7/*fextend*/
		f13 =  f8/*fextend*/
		f14 =  f9/*fextend*/
		f15 =  f6/*fextend*/
		f16 =  f5/*fextend*/
		f17 =  (f16 * f11)
		f11 =  (f12 * f11)
		f18 =  (f14 * f13)
		f14 =  (f14 * f15)
		f19 =  ((__xasm<Number>(push((i0+132)), op(0x38))))
		__asm(push(f19), push((mstate.ebp+-80)), op(0x3d))
		f19 =  ((__xasm<Number>(push((i0+136)), op(0x38))))
		__asm(push(f19), push((mstate.ebp+-96)), op(0x3d))
		f17 =  f17/*fround*/
		f11 =  f11/*fround*/
		f18 =  f18/*fround*/
		f14 =  f14/*fround*/
		f1 =  f1/*fextend*/
		f19 =  ((__xasm<Number>(push((mstate.ebp+-80)), op(0x38))))
		f19 =  f19/*fextend*/
		f17 =  f17/*fextend*/
		f18 =  f18/*fextend*/
		f14 =  f14/*fextend*/
		f11 =  f11/*fextend*/
		f0 =  f0/*fextend*/
		f20 =  ((__xasm<Number>(push((mstate.ebp+-96)), op(0x38))))
		f20 =  f20/*fextend*/
		f1 =  (f19 * f1)
		f17 =  (f18 - f17)
		f11 =  (f11 - f14)
		f12 =  (f12 * f13)
		f13 =  (f16 * f15)
		f0 =  (f20 * f0)
		f14 =  ((__xasm<Number>(push((i0+160)), op(0x38))))
		__asm(push(f14), push((mstate.ebp+-88)), op(0x3d))
		f14 =  ((__xasm<Number>(push((i0+164)), op(0x38))))
		f15 =  ((__xasm<Number>(push((i0+168)), op(0x38))))
		f1 =  f1/*fround*/
		f16 =  f17/*fround*/
		f11 =  f11/*fround*/
		f12 =  f12/*fround*/
		f13 =  f13/*fround*/
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		f17 =  ((__xasm<Number>(push((mstate.ebp+-40)), op(0x38))))
		f17 =  f17/*fextend*/
		f18 =  ((__xasm<Number>(push((mstate.ebp+-88)), op(0x38))))
		f18 =  f18/*fextend*/
		f19 =  f11/*fextend*/
		f20 =  f14/*fextend*/
		f21 =  f16/*fextend*/
		f22 =  f15/*fextend*/
		f12 =  f12/*fextend*/
		f13 =  f13/*fextend*/
		f0 =  (f1 + f0)
		f1 =  (f18 * f17)
		f17 =  (f20 * f19)
		f18 =  (f22 * f21)
		f12 =  (f13 - f12)
		f13 =  ((__xasm<Number>(push((i0+156)), op(0x38))))
		f19 =  ((__xasm<Number>(push((i0+172)), op(0x38))))
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f17 =  f17/*fround*/
		f18 =  f18/*fround*/
		f12 =  f12/*fround*/
		f1 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		f20 =  ((__xasm<Number>(push((mstate.ebp+-48)), op(0x38))))
		f20 =  f20/*fextend*/
		f21 =  f13/*fextend*/
		f18 =  f18/*fextend*/
		f17 =  f17/*fextend*/
		f22 =  f12/*fextend*/
		f23 =  f19/*fextend*/
		f0 =  (f0 + f1)
		f1 =  (f21 * f20)
		f17 =  (f17 + f18)
		f18 =  (f23 * f22)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f17 =  f17/*fround*/
		f18 =  f18/*fround*/
		f3 =  f3/*fextend*/
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		f18 =  f18/*fextend*/
		f17 =  f17/*fextend*/
		f0 =  (f1 - f0)
		f1 =  (f17 + f18)
		f3 =  -f3
		f2 =  -f2
		f17 =  ((__xasm<Number>(push((i0+200)), op(0x38))))
		f18 =  ((__xasm<Number>(push((i0+204)), op(0x38))))
		f20 =  ((__xasm<Number>(push((i0+208)), op(0x38))))
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		f3 =  f3/*fround*/
		f2 =  f2/*fround*/
		i8 =  (i0 + 204)
		i9 =  (i0 + 208)
		i10 =  (i0 + 200)
		f4 =  f4/*fround*/
		f4 =  f4/*fextend*/
		f21 =  f1/*fextend*/
		__asm(push(f21!=f4), iftrue, target("__ZN16b2PrismaticJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB242_8_F"))
	__asm(lbl("__ZN16b2PrismaticJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB242_7_F"))
		__asm(jump, target("__ZN16b2PrismaticJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB242_9_F"))
	__asm(lbl("__ZN16b2PrismaticJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB242_8_F"))
		f4 =  (1)
		f4 =  f4/*fround*/
		f1 =  f1/*fextend*/
		f4 =  f4/*fextend*/
		f1 =  (f4 / f1)
		f1 =  f1/*fround*/
	__asm(lbl("__ZN16b2PrismaticJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB242_9_F"))
		f4 =  f2/*fextend*/
		f10 =  f10/*fextend*/
		f21 =  f3/*fextend*/
		f22 =  f8/*fextend*/
		f23 =  f6/*fextend*/
		f0 =  f0/*fextend*/
		f9 =  f9/*fextend*/
		f24 =  f5/*fextend*/
		f25 =  f7/*fextend*/
		f26 =  (f10 * f4)
		f10 =  (f10 * f21)
		f27 =  (f22 * f0)
		f28 =  (f23 * f0)
		f26 =  f26/*fround*/
		f29 =  (f9 * f4)
		f10 =  f10/*fround*/
		f9 =  (f9 * f21)
		f27 =  f27/*fround*/
		f28 =  f28/*fround*/
		f30 =  (f24 * f0)
		f31 =  (f25 * f0)
		f29 =  f29/*fround*/
		f9 =  f9/*fround*/
		f30 =  f30/*fround*/
		f31 =  f31/*fround*/
		f26 =  f26/*fextend*/
		f27 =  f27/*fextend*/
		f28 =  f28/*fextend*/
		f10 =  f10/*fextend*/
		f23 =  (f23 * f4)
		f26 =  (f27 - f26)
		f22 =  (f22 * f21)
		f10 =  (f10 - f28)
		f27 =  f30/*fextend*/
		f28 =  f29/*fextend*/
		f9 =  f9/*fextend*/
		f29 =  f31/*fextend*/
		f11 =  f11/*fextend*/
		f23 =  f23/*fround*/
		f26 =  f26/*fround*/
		f25 =  (f25 * f4)
		f27 =  (f28 - f27)
		f16 =  f16/*fextend*/
		f22 =  f22/*fround*/
		f10 =  f10/*fround*/
		f24 =  (f24 * f21)
		f9 =  (f29 - f9)
		f4 =  (f11 * f4)
		f11 =  f25/*fround*/
		f25 =  f27/*fround*/
		f16 =  (f16 * f21)
		f21 =  f24/*fround*/
		f9 =  f9/*fround*/
		f22 =  f22/*fextend*/
		f23 =  f23/*fextend*/
		f24 =  f26/*fextend*/
		f26 =  f15/*fextend*/
		f10 =  f10/*fextend*/
		f27 =  f14/*fextend*/
		f4 =  f4/*fround*/
		f22 =  (f23 - f22)
		f23 =  (f26 * f24)
		f24 =  f25/*fextend*/
		f16 =  f16/*fround*/
		f10 =  (f27 * f10)
		f9 =  f9/*fextend*/
		f11 =  f11/*fextend*/
		f21 =  f21/*fextend*/
		f22 =  f22/*fround*/
		f23 =  f23/*fround*/
		f11 =  (f21 - f11)
		f21 =  (f26 * f24)
		f10 =  f10/*fround*/
		f9 =  (f27 * f9)
		f12 =  f12/*fextend*/
		f16 =  f16/*fextend*/
		f4 =  f4/*fextend*/
		f4 =  (f4 + f16)
		f11 =  f11/*fround*/
		f16 =  f21/*fround*/
		f9 =  f9/*fround*/
		f0 =  (f12 * f0)
		f12 =  f22/*fextend*/
		f19 =  f19/*fextend*/
		f21 =  f23/*fextend*/
		f10 =  f10/*fextend*/
		f4 =  f4/*fround*/
		f12 =  (f19 * f12)
		f10 =  (f10 + f21)
		f11 =  f11/*fextend*/
		f0 =  f0/*fround*/
		f16 =  f16/*fextend*/
		f9 =  f9/*fextend*/
		f12 =  f12/*fround*/
		f10 =  f10/*fround*/
		f11 =  (f19 * f11)
		f9 =  (f9 + f16)
		f0 =  f0/*fextend*/
		f4 =  f4/*fextend*/
		f0 =  (f4 + f0)
		f4 =  f11/*fround*/
		f9 =  f9/*fround*/
		f11 =  f12/*fextend*/
		f10 =  f10/*fextend*/
		f0 =  f0/*fround*/
		f10 =  (f10 + f11)
		f4 =  f4/*fextend*/
		f9 =  f9/*fextend*/
		f10 =  f10/*fround*/
		f4 =  (f9 + f4)
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  (f0 * f1)
		f9 =  f10/*fextend*/
		f4 =  f4/*fround*/
		f0 =  f0/*fround*/
		f9 =  (f9 * f1)
		f4 =  f4/*fextend*/
		f9 =  f9/*fround*/
		f1 =  (f4 * f1)
		f0 =  f0/*fextend*/
		f4 =  f17/*fextend*/
		f0 =  (f4 + f0)
		f1 =  f1/*fround*/
		f4 =  f9/*fextend*/
		f9 =  f18/*fextend*/
		f4 =  (f9 + f4)
		f0 =  f0/*fround*/
		f1 =  f1/*fextend*/
		f9 =  f20/*fextend*/
		f1 =  (f9 + f1)
		__asm(push(f0), push(i10), op(0x3d))
		f0 =  f4/*fround*/
		__asm(push(f0), push(i8), op(0x3d))
		f0 =  f1/*fround*/
		__asm(push(f0), push(i9), op(0x3d))
		__asm(push(i3==1), iftrue, target("__ZN16b2PrismaticJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB242_12_F"))
	__asm(lbl("__ZN16b2PrismaticJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB242_10_F"))
		__asm(push(i3==2), iftrue, target("__ZN16b2PrismaticJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB242_13_F"))
	__asm(lbl("__ZN16b2PrismaticJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB242_11_F"))
		__asm(jump, target("__ZN16b2PrismaticJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB242_14_F"))
	__asm(lbl("__ZN16b2PrismaticJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB242_12_F"))
		f1 =  (0)
		f1 =  f1/*fround*/
		f1 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  ((f0>f1) ? f0 : f1)
		f0 =  f0/*fround*/
		__asm(push(f0), push(i9), op(0x3d))
		__asm(jump, target("__ZN16b2PrismaticJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB242_14_F"))
	__asm(lbl("__ZN16b2PrismaticJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB242_13_F"))
		f1 =  (0)
		f1 =  f1/*fround*/
		f1 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  ((f0<f1) ? f0 : f1)
		f0 =  f0/*fround*/
		__asm(push(f0), push(i9), op(0x3d))
	__asm(lbl("__ZN16b2PrismaticJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB242_14_F"))
		f1 =  (0)
		f4 =  f20/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 - f4)
		f0 =  f0/*fround*/
		f4 =  f6/*fextend*/
		f6 =  f0/*fextend*/
		f8 =  f8/*fextend*/
		f9 =  f7/*fextend*/
		f10 =  f14/*fextend*/
		f11 =  f15/*fextend*/
		f12 =  f5/*fextend*/
		f4 =  (f4 * f6)
		f6 =  (f8 * f6)
		f8 =  (f10 * f9)
		f9 =  (f12 * f11)
		f4 =  f4/*fround*/
		f6 =  f6/*fround*/
		f8 =  f8/*fround*/
		f9 =  f9/*fround*/
		f4 =  f4/*fextend*/
		f3 =  f3/*fextend*/
		f6 =  f6/*fextend*/
		f2 =  f2/*fextend*/
		f9 =  f9/*fextend*/
		f8 =  f8/*fextend*/
		f3 =  (f3 - f4)
		f2 =  (f2 - f6)
		f4 =  (f8 - f9)
		f4 =  f4/*fround*/
		f3 =  f3/*fround*/
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		f1 =  f1/*fextend*/
		f6 =  f4/*fextend*/
		__asm(push(f6!=f1), iftrue, target("__ZN16b2PrismaticJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB242_16_F"))
	__asm(lbl("__ZN16b2PrismaticJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB242_15_F"))
		__asm(jump, target("__ZN16b2PrismaticJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB242_17_F"))
	__asm(lbl("__ZN16b2PrismaticJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB242_16_F"))
		f1 =  (1)
		f1 =  f1/*fround*/
		f4 =  f4/*fextend*/
		f1 =  f1/*fextend*/
		f1 =  (f1 / f4)
		f4 =  f1/*fround*/
	__asm(lbl("__ZN16b2PrismaticJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB242_17_F"))
		f1 = f4
		f4 =  f7/*fextend*/
		f2 =  f2/*fextend*/
		f5 =  f5/*fextend*/
		f3 =  f3/*fextend*/
		f4 =  (f2 * f4)
		f5 =  (f3 * f5)
		f4 =  f4/*fround*/
		f5 =  f5/*fround*/
		f6 =  f15/*fextend*/
		f7 =  f14/*fextend*/
		f5 =  f5/*fextend*/
		f4 =  f4/*fextend*/
		f4 =  (f4 - f5)
		f2 =  (f2 * f6)
		f3 =  (f3 * f7)
		f4 =  f4/*fround*/
		f2 =  f2/*fround*/
		f3 =  f3/*fround*/
		f4 =  f4/*fextend*/
		f1 =  f1/*fextend*/
		f2 =  f2/*fextend*/
		f3 =  f3/*fextend*/
		f4 =  (f4 * f1)
		f2 =  (f3 - f2)
		f3 =  f4/*fround*/
		f2 =  f2/*fround*/
		f2 =  f2/*fextend*/
		f4 =  f17/*fextend*/
		f3 =  f3/*fextend*/
		f3 =  (f3 + f4)
		f1 =  (f2 * f1)
		f2 =  f3/*fround*/
		f3 =  f1/*fround*/
		f1 =  f2/*fextend*/
		f5 =  f18/*fextend*/
		f3 =  f3/*fextend*/
		f1 =  (f1 - f4)
		f3 =  (f3 + f5)
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		f4 =  f3/*fextend*/
		f6 =  ((__xasm<Number>(push((mstate.ebp+-64)), op(0x38))))
		f6 =  f6/*fextend*/
		f1 =  f1/*fextend*/
		f7 =  ((__xasm<Number>(push((mstate.ebp+-56)), op(0x38))))
		f7 =  f7/*fextend*/
		f8 =  ((__xasm<Number>(push((mstate.ebp+-104)), op(0x38))))
		f8 =  f8/*fextend*/
		f9 =  ((__xasm<Number>(push((mstate.ebp+-72)), op(0x38))))
		f9 =  f9/*fextend*/
		f10 =  ((__xasm<Number>(push((mstate.ebp+-96)), op(0x38))))
		f10 =  f10/*fextend*/
		f0 =  f0/*fextend*/
		f11 =  ((__xasm<Number>(push((mstate.ebp+-80)), op(0x38))))
		f11 =  f11/*fextend*/
		f6 =  (f6 * f1)
		f7 =  (f7 * f1)
		f8 =  (f1 * f8)
		f1 =  (f1 * f9)
		f4 =  (f4 - f5)
		f5 =  (f10 * f0)
		f9 =  (f11 * f0)
		f6 =  f6/*fround*/
		f7 =  f7/*fround*/
		f8 =  f8/*fround*/
		f1 =  f1/*fround*/
		f4 =  f4/*fround*/
		f5 =  f5/*fround*/
		f9 =  f9/*fround*/
		__asm(push(f2), push(i10), op(0x3d))
		__asm(push(f3), push(i8), op(0x3d))
		f2 =  f13/*fextend*/
		f3 =  ((__xasm<Number>(push((mstate.ebp+-88)), op(0x38))))
		f3 =  f3/*fextend*/
		f5 =  f5/*fextend*/
		f6 =  f6/*fextend*/
		f9 =  f9/*fextend*/
		f7 =  f7/*fextend*/
		f8 =  f8/*fextend*/
		f4 =  f4/*fextend*/
		f1 =  f1/*fextend*/
		f5 =  (f6 + f5)
		f6 =  (f7 + f9)
		f7 =  (f8 + f4)
		f1 =  (f1 + f4)
		f2 =  (f0 * f2)
		f0 =  (f0 * f3)
		f3 =  ((__xasm<Number>(push((i0+80)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i0+88)), op(0x38))))
		f5 =  f5/*fround*/
		f6 =  f6/*fround*/
		f7 =  f7/*fround*/
		f1 =  f1/*fround*/
		f2 =  f2/*fround*/
		f0 =  f0/*fround*/
		i3 =  (i0 + 92)
		i0 =  (i0 + 84)
		f8 = f6
		f9 = f3
		f10 = f5
		f11 = f4
		__asm(jump, target("__ZN16b2PrismaticJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB242_22_F"))
	__asm(lbl("__ZN16b2PrismaticJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB242_18_F"))
		f0 =  (0)
		f1 =  ((__xasm<Number>(push((i0+164)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i0+176)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i0+168)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i0+180)), op(0x38))))
		f7 =  f6/*fextend*/
		f8 =  f1/*fextend*/
		f9 =  f5/*fextend*/
		f10 =  f4/*fextend*/
		f7 =  (f8 * f7)
		f8 =  (f10 * f9)
		f7 =  f7/*fround*/
		f8 =  f8/*fround*/
		f3 =  f3/*fextend*/
		f2 =  f2/*fextend*/
		f8 =  f8/*fextend*/
		f7 =  f7/*fextend*/
		f3 =  -f3
		f2 =  -f2
		f7 =  (f7 - f8)
		f7 =  f7/*fround*/
		f3 =  f3/*fround*/
		f2 =  f2/*fround*/
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f8 =  f7/*fextend*/
		__asm(push(f8!=f0), iftrue, target("__ZN16b2PrismaticJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB242_20_F"))
	__asm(lbl("__ZN16b2PrismaticJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB242_19_F"))
		__asm(jump, target("__ZN16b2PrismaticJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB242_21_F"))
	__asm(lbl("__ZN16b2PrismaticJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB242_20_F"))
		f0 =  (1)
		f0 =  f0/*fround*/
		f7 =  f7/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 / f7)
		f7 =  f0/*fround*/
	__asm(lbl("__ZN16b2PrismaticJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB242_21_F"))
		f0 = f7
		f6 =  f6/*fextend*/
		f2 =  f2/*fextend*/
		f4 =  f4/*fextend*/
		f3 =  f3/*fextend*/
		f6 =  (f6 * f2)
		f4 =  (f4 * f3)
		f6 =  f6/*fround*/
		f4 =  f4/*fround*/
		f4 =  f4/*fextend*/
		f6 =  f6/*fextend*/
		f4 =  (f6 - f4)
		f5 =  f5/*fextend*/
		f1 =  f1/*fextend*/
		f4 =  f4/*fround*/
		f2 =  (f5 * f2)
		f1 =  (f1 * f3)
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		f3 =  f4/*fextend*/
		f0 =  f0/*fextend*/
		f3 =  (f3 * f0)
		f2 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		f3 =  f3/*fround*/
		f1 =  (f1 - f2)
		f1 =  f1/*fround*/
		f2 =  ((__xasm<Number>(push((i0+200)), op(0x38))))
		f3 =  f3/*fextend*/
		f2 =  (f2 + f3)
		f1 =  f1/*fextend*/
		f2 =  f2/*fround*/
		f0 =  (f1 * f0)
		__asm(push(f2), push((i0+200)), op(0x3d))
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push((i0+204)), op(0x38))))
		f2 =  f0/*fextend*/
		f1 =  (f1 + f2)
		f1 =  f1/*fround*/
		__asm(push(f1), push((i0+204)), op(0x3d))
		f1 =  ((__xasm<Number>(push((mstate.ebp+-64)), op(0x38))))
		f1 =  f1/*fextend*/
		f2 =  ((__xasm<Number>(push((mstate.ebp+-56)), op(0x38))))
		f2 =  f2/*fextend*/
		f4 =  ((__xasm<Number>(push((mstate.ebp+-104)), op(0x38))))
		f4 =  f4/*fextend*/
		f5 =  ((__xasm<Number>(push((mstate.ebp+-72)), op(0x38))))
		f5 =  f5/*fextend*/
		f1 =  (f1 * f3)
		f2 =  (f2 * f3)
		f4 =  (f3 * f4)
		f3 =  (f3 * f5)
		f5 =  ((__xasm<Number>(push((i0+80)), op(0x38))))
		f7 =  ((__xasm<Number>(push((i0+88)), op(0x38))))
		f1 =  f1/*fround*/
		f2 =  f2/*fround*/
		f12 =  f4/*fround*/
		f13 =  f3/*fround*/
		i3 =  (i0 + 92)
		i0 =  (i0 + 84)
		f8 = f2
		f9 = f5
		f10 = f1
		f3 = f5
		f6 = f2
		f11 = f7
		f5 = f1
		f4 = f7
		f7 = f12
		f2 = f0
		f1 = f13
	__asm(lbl("__ZN16b2PrismaticJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB242_22_F"))
		f2 =  f2/*fextend*/
		f7 =  f7/*fextend*/
		f2 =  (f7 + f2)
		f7 =  f9/*fextend*/
		f8 =  f8/*fextend*/
		f2 =  f2/*fround*/
		f7 =  (f8 * f7)
		f3 =  f3/*fextend*/
		f8 =  f10/*fextend*/
		f7 =  f7/*fround*/
		f3 =  (f8 * f3)
		f8 =  ((__xasm<Number>(push(i0), op(0x38))))
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		f2 =  (f8 * f2)
		f0 =  (f1 + f0)
		f1 =  f3/*fround*/
		f3 =  f7/*fextend*/
		f7 =  ((__xasm<Number>(push((mstate.ebp+-32)), op(0x38))))
		f7 =  f7/*fextend*/
		f8 =  f11/*fextend*/
		f6 =  f6/*fextend*/
		f9 =  ((__xasm<Number>(push(i3), op(0x38))))
		f2 =  f2/*fround*/
		f0 =  f0/*fround*/
		f3 =  (f7 - f3)
		f6 =  (f6 * f8)
		f1 =  f1/*fextend*/
		f7 =  ((__xasm<Number>(push((mstate.ebp+-24)), op(0x38))))
		f7 =  f7/*fextend*/
		f4 =  f4/*fextend*/
		f5 =  f5/*fextend*/
		f0 =  f0/*fextend*/
		f1 =  (f7 - f1)
		f6 =  f6/*fround*/
		f4 =  (f5 * f4)
		f2 =  f2/*fextend*/
		f5 =  ((__xasm<Number>(push((mstate.ebp+-48)), op(0x38))))
		f5 =  f5/*fextend*/
		f3 =  f3/*fround*/
		f2 =  (f5 - f2)
		f0 =  (f9 * f0)
		f4 =  f4/*fround*/
		__asm(push(f3), push(i1), op(0x3d))
		f1 =  f1/*fround*/
		f3 =  f6/*fextend*/
		f5 =  ((__xasm<Number>(push((mstate.ebp+-16)), op(0x38))))
		f5 =  f5/*fextend*/
		f0 =  f0/*fround*/
		f3 =  (f5 + f3)
		__asm(push(f1), push(i4), op(0x3d))
		f1 =  f2/*fround*/
		f2 =  f4/*fextend*/
		f4 =  ((__xasm<Number>(push((mstate.ebp+-8)), op(0x38))))
		f4 =  f4/*fextend*/
		f2 =  (f4 + f2)
		__asm(push(f1), push(i7), op(0x3d))
		f1 =  ((__xasm<Number>(push((mstate.ebp+-40)), op(0x38))))
		f1 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		f3 =  f3/*fround*/
		f0 =  (f0 + f1)
		__asm(push(f3), push(i2), op(0x3d))
		f1 =  f2/*fround*/
		__asm(push(f1), push(i5), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push(i6), op(0x3d))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZN16b2PrismaticJoint24SolvePositionConstraintsEf:int = regFunc(FSM__ZN16b2PrismaticJoint24SolvePositionConstraintsEf.start)

public final class FSM__ZN16b2PrismaticJoint24SolvePositionConstraintsEf extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
		var i8:int, i9:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number
		var f8:Number, f9:Number, f10:Number, f11:Number, f12:Number, f13:Number, f14:Number, f15:Number
		var f16:Number, f17:Number, f18:Number, f19:Number, f20:Number, f21:Number, f22:Number, f23:Number
		var f24:Number, f25:Number, f26:Number, f27:Number, f28:Number, f29:Number, f30:Number, f31:Number
		__asm(label, lbl("__ZN16b2PrismaticJoint24SolvePositionConstraintsEf_entry"))
	__asm(lbl("__ZN16b2PrismaticJoint24SolvePositionConstraintsEf__XprivateX__BB243_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 24
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+48)), op(0x37))))
		i2 =  ((__xasm<int>(push((i0+52)), op(0x37))))
		f1 =  ((__xasm<Number>(push((i1+52)), op(0x38))))
		f0 =  ((__xasm<Number>(push((i1+56)), op(0x38))))
		__asm(push(f0), push((mstate.ebp+-24)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i2+52)), op(0x38))))
		__asm(push(f0), push((mstate.ebp+-16)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i2+56)), op(0x38))))
		__asm(push(f0), push((mstate.ebp+-8)), op(0x3d))
		f2 =  ((__xasm<Number>(push((i1+64)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i2+64)), op(0x38))))
		f0 = f2
		//InlineAsmStart
	f0 =  Math.cos(f0);

	//InlineAsmEnd
		f4 = f0
		f0 = f2
		//InlineAsmStart
	f0 =  Math.sin(f0);

	//InlineAsmEnd
		f5 = f0
		f0 = f3
		//InlineAsmStart
	f0 =  Math.cos(f0);

	//InlineAsmEnd
		f6 = f0
		f0 = f3
		//InlineAsmStart
	f0 =  Math.sin(f0);

	//InlineAsmEnd
		f7 =  ((__xasm<Number>(push((i0+108)), op(0x38))))
		f8 =  ((__xasm<Number>(push((i0+76)), op(0x38))))
		f9 =  ((__xasm<Number>(push((i0+104)), op(0x38))))
		f10 =  ((__xasm<Number>(push((i0+72)), op(0x38))))
		f7 =  (f7 - f8)
		f8 =  (f9 - f10)
		f7 =  f7/*fround*/
		f8 =  f8/*fround*/
		f7 =  f7/*fextend*/
		f0 =  f0/*fextend*/
		f8 =  f8/*fextend*/
		f6 =  f6/*fextend*/
		f9 =  (f7 * f0)
		f7 =  (f6 * f7)
		f0 =  (f0 * f8)
		f6 =  (f6 * f8)
		f8 =  f9/*fround*/
		f7 =  f7/*fround*/
		f0 =  f0/*fround*/
		f6 =  f6/*fround*/
		f9 =  ((__xasm<Number>(push((i0+100)), op(0x38))))
		f10 =  ((__xasm<Number>(push((i0+68)), op(0x38))))
		f11 =  ((__xasm<Number>(push((i0+96)), op(0x38))))
		f12 =  ((__xasm<Number>(push((i0+64)), op(0x38))))
		f8 =  f8/*fextend*/
		f6 =  f6/*fextend*/
		f7 =  f7/*fextend*/
		f0 =  f0/*fextend*/
		f6 =  (f6 - f8)
		f8 =  (f9 - f10)
		f9 =  (f11 - f12)
		f0 =  (f0 + f7)
		f6 =  f6/*fround*/
		f7 =  f8/*fround*/
		f8 =  f9/*fround*/
		f0 =  f0/*fround*/
		f9 =  f5/*fextend*/
		f7 =  f7/*fextend*/
		f8 =  f8/*fextend*/
		f10 =  f4/*fextend*/
		f11 =  f6/*fextend*/
		f12 =  ((__xasm<Number>(push((mstate.ebp+-16)), op(0x38))))
		f12 =  f12/*fextend*/
		f13 =  f0/*fextend*/
		f14 =  ((__xasm<Number>(push((mstate.ebp+-8)), op(0x38))))
		f14 =  f14/*fextend*/
		f11 =  (f12 + f11)
		f12 =  (f10 * f7)
		f7 =  (f7 * f9)
		f15 =  (f9 * f8)
		f8 =  (f10 * f8)
		f10 =  (f14 + f13)
		f11 =  f11/*fround*/
		f12 =  f12/*fround*/
		f7 =  f7/*fround*/
		f13 =  f15/*fround*/
		f8 =  f8/*fround*/
		f10 =  f10/*fround*/
		f14 =  f1/*fextend*/
		f11 =  f11/*fextend*/
		f12 =  f12/*fextend*/
		f13 =  f13/*fextend*/
		f7 =  f7/*fextend*/
		f8 =  f8/*fextend*/
		f15 =  ((__xasm<Number>(push((mstate.ebp+-24)), op(0x38))))
		f15 =  f15/*fextend*/
		f10 =  f10/*fextend*/
		f11 =  (f11 - f14)
		f12 =  (f13 + f12)
		f7 =  (f8 - f7)
		f8 =  (f10 - f15)
		f10 =  f11/*fround*/
		f11 =  f12/*fround*/
		f7 =  f7/*fround*/
		f8 =  f8/*fround*/
		f12 =  f7/*fextend*/
		f10 =  f10/*fextend*/
		f13 =  f11/*fextend*/
		f8 =  f8/*fextend*/
		i3 =  ((__xasm<int>(push((i0+236)), op(0x35))))
		f9 =  -f9
		f10 =  (f10 - f12)
		f8 =  (f8 - f13)
		f9 =  f9/*fround*/
		f10 =  f10/*fround*/
		f8 =  f8/*fround*/
		i4 =  (i1 + 52)
		i5 =  (i1 + 56)
		i6 =  (i1 + 64)
		i7 =  (i2 + 52)
		i8 =  (i2 + 56)
		i9 =  (i2 + 64)
		__asm(push(i3!=0), iftrue, target("__ZN16b2PrismaticJoint24SolvePositionConstraintsEf__XprivateX__BB243_2_F"))
	__asm(jump, target("__ZN16b2PrismaticJoint24SolvePositionConstraintsEf__XprivateX__BB243_1_F"), lbl("__ZN16b2PrismaticJoint24SolvePositionConstraintsEf__XprivateX__BB243_1_B"), label, lbl("__ZN16b2PrismaticJoint24SolvePositionConstraintsEf__XprivateX__BB243_1_F")); 
		f12 =  (0)
		f12 =  f12/*fround*/
		i3 =  (1)
		f13 = f12
		__asm(jump, target("__ZN16b2PrismaticJoint24SolvePositionConstraintsEf__XprivateX__BB243_10_F"))
	__asm(lbl("__ZN16b2PrismaticJoint24SolvePositionConstraintsEf__XprivateX__BB243_2_F"))
		f12 =  (0)
		f13 =  ((__xasm<Number>(push((i0+112)), op(0x38))))
		f14 =  ((__xasm<Number>(push((i0+116)), op(0x38))))
		f15 =  f4/*fextend*/
		f16 =  f5/*fextend*/
		f17 =  f9/*fextend*/
		f16 =  (f16 * f13)
		f13 =  (f15 * f13)
		f15 =  (f15 * f14)
		f14 =  (f14 * f17)
		f16 =  f16/*fround*/
		f13 =  f13/*fround*/
		f15 =  f15/*fround*/
		f14 =  f14/*fround*/
		f15 =  f15/*fextend*/
		f16 =  f16/*fextend*/
		f14 =  f14/*fextend*/
		f13 =  f13/*fextend*/
		f17 =  f11/*fextend*/
		f18 =  f8/*fextend*/
		f19 =  f7/*fextend*/
		f20 =  f10/*fextend*/
		f15 =  (f16 + f15)
		f13 =  (f13 + f14)
		f14 =  (f18 + f17)
		f16 =  (f20 + f19)
		f15 =  f15/*fround*/
		f13 =  f13/*fround*/
		f14 =  f14/*fround*/
		f16 =  f16/*fround*/
		f17 =  f15/*fextend*/
		f16 =  f16/*fextend*/
		f19 =  f13/*fextend*/
		f14 =  f14/*fextend*/
		f16 =  (f16 * f17)
		f21 =  f6/*fextend*/
		f14 =  (f14 * f19)
		f22 =  f0/*fextend*/
		f16 =  f16/*fround*/
		f21 =  (f21 * f17)
		f14 =  f14/*fround*/
		f22 =  (f22 * f19)
		f21 =  f21/*fround*/
		f22 =  f22/*fround*/
		f14 =  f14/*fextend*/
		f16 =  f16/*fextend*/
		__asm(push(f13), push((i0+132)), op(0x3d))
		f13 =  (f16 - f14)
		f14 =  f22/*fextend*/
		f16 =  f21/*fextend*/
		f14 =  (f16 - f14)
		__asm(push(f15), push((i0+136)), op(0x3d))
		f13 =  f13/*fround*/
		__asm(push(f13), push((i0+156)), op(0x3d))
		f13 =  f14/*fround*/
		__asm(push(f13), push((i0+160)), op(0x3d))
		f13 =  ((__xasm<Number>(push((i0+224)), op(0x38))))
		f14 =  ((__xasm<Number>(push((i0+220)), op(0x38))))
		f15 =  (f17 * f18)
		f16 =  (f19 * f20)
		f17 =  f13/*fextend*/
		f18 =  f14/*fextend*/
		f19 =  (f17 - f18)
		f17 =  (f18 - f17)
		f15 =  f15/*fround*/
		f16 =  f16/*fround*/
		f18 =  ((__xasm<Number>(push(_b2_linearSlop), op(0x38))))
		f19 =  f19/*fround*/
		f17 =  f17/*fround*/
		f12 =  f12/*fround*/
		f15 =  f15/*fextend*/
		f16 =  f16/*fextend*/
		f20 =  f18/*fextend*/
		f15 =  (f16 + f15)
		f16 =  f17/*fextend*/
		f12 =  f12/*fextend*/
		f17 =  f19/*fextend*/
		f12 =  ((f17<=f12) ? f16 : f17)
		f16 =  (f20 + f20)
		f15 =  f15/*fround*/
		f12 =  f12/*fround*/
		f16 =  f16/*fround*/
		f16 =  f16/*fextend*/
		f12 =  f12/*fextend*/
		__asm(push(f12>=f16), iftrue, target("__ZN16b2PrismaticJoint24SolvePositionConstraintsEf__XprivateX__BB243_6_F"))
	__asm(lbl("__ZN16b2PrismaticJoint24SolvePositionConstraintsEf__XprivateX__BB243_3_F"))
		f12 =  (0)
		f13 =  ((__xasm<Number>(push(_b2_maxLinearCorrection), op(0x38))))
		f14 =  f15/*fextend*/
		f16 =  -f13
		f13 =  ((f14<f13) ? f14 : f13)
		f18 =  f16/*fround*/
		f13 =  f13/*fround*/
		f16 =  f18/*fextend*/
		f13 =  f13/*fextend*/
		f13 =  ((f13<f16) ? f16 : f13)
		f18 =  f13/*fround*/
		f13 =  f12/*fround*/
		f12 =  f13/*fextend*/
		__asm(push(f14<=f12), iftrue, target("__ZN16b2PrismaticJoint24SolvePositionConstraintsEf__XprivateX__BB243_5_F"))
	__asm(lbl("__ZN16b2PrismaticJoint24SolvePositionConstraintsEf__XprivateX__BB243_4_F"))
		i3 =  (0)
		f13 = f15
		f12 = f18
		__asm(jump, target("__ZN16b2PrismaticJoint24SolvePositionConstraintsEf__XprivateX__BB243_10_F"))
	__asm(lbl("__ZN16b2PrismaticJoint24SolvePositionConstraintsEf__XprivateX__BB243_5_F"))
		i3 =  (0)
		f12 =  f15/*fextend*/
		f12 =  -f12
		f13 =  f12/*fround*/
		f12 = f18
		__asm(jump, target("__ZN16b2PrismaticJoint24SolvePositionConstraintsEf__XprivateX__BB243_10_F"))
	__asm(lbl("__ZN16b2PrismaticJoint24SolvePositionConstraintsEf__XprivateX__BB243_6_F"))
		f12 =  f15/*fextend*/
		f16 =  f14/*fextend*/
		__asm(push(f16<f12), iftrue, target("__ZN16b2PrismaticJoint24SolvePositionConstraintsEf__XprivateX__BB243_8_F"))
	__asm(lbl("__ZN16b2PrismaticJoint24SolvePositionConstraintsEf__XprivateX__BB243_7_F"))
		f12 =  (0)
		f13 =  f15/*fextend*/
		f14 =  f14/*fextend*/
		f15 =  (f13 - f14)
		f15 =  f15/*fround*/
		f16 =  f18/*fextend*/
		f15 =  f15/*fextend*/
		f15 =  (f15 + f16)
		f15 =  f15/*fround*/
		f12 =  f12/*fround*/
		f16 =  ((__xasm<Number>(push(_b2_maxLinearCorrection), op(0x38))))
		f12 =  f12/*fextend*/
		f15 =  f15/*fextend*/
		f16 =  -f16
		f12 =  ((f15<f12) ? f15 : f12)
		f15 =  f16/*fround*/
		f12 =  f12/*fround*/
		f15 =  f15/*fextend*/
		f12 =  f12/*fextend*/
		f12 =  ((f12<f15) ? f15 : f12)
		f13 =  (f14 - f13)
		f12 =  f12/*fround*/
		f13 =  f13/*fround*/
		i3 =  (0)
		__asm(jump, target("__ZN16b2PrismaticJoint24SolvePositionConstraintsEf__XprivateX__BB243_10_F"))
	__asm(lbl("__ZN16b2PrismaticJoint24SolvePositionConstraintsEf__XprivateX__BB243_8_F"))
		f12 =  f15/*fextend*/
		f14 =  f13/*fextend*/
		__asm(push(f14>f12), iftrue, target("__ZN16b2PrismaticJoint24SolvePositionConstraintsEf__XprivateX__BB243_1_B"))
	__asm(lbl("__ZN16b2PrismaticJoint24SolvePositionConstraintsEf__XprivateX__BB243_9_F"))
		f12 =  (0)
		f13 =  f13/*fextend*/
		f14 =  f15/*fextend*/
		f13 =  (f14 - f13)
		f13 =  f13/*fround*/
		f14 =  f18/*fextend*/
		f15 =  f13/*fextend*/
		f14 =  (f15 - f14)
		f14 =  f14/*fround*/
		f15 =  ((__xasm<Number>(push(_b2_maxLinearCorrection), op(0x38))))
		f14 =  f14/*fextend*/
		f14 =  ((f14<f15) ? f14 : f15)
		f14 =  f14/*fround*/
		f12 =  f12/*fround*/
		f12 =  f12/*fextend*/
		f14 =  f14/*fextend*/
		f12 =  ((f14<f12) ? f12 : f14)
		f12 =  f12/*fround*/
		i3 =  (0)
	__asm(lbl("__ZN16b2PrismaticJoint24SolvePositionConstraintsEf__XprivateX__BB243_10_F"))
		f14 =  (0)
		f15 =  ((__xasm<Number>(push((i0+120)), op(0x38))))
		f16 =  ((__xasm<Number>(push((i0+124)), op(0x38))))
		f4 =  f4/*fextend*/
		f5 =  f5/*fextend*/
		f9 =  f9/*fextend*/
		f5 =  (f5 * f15)
		f15 =  (f4 * f15)
		f4 =  (f4 * f16)
		f9 =  (f16 * f9)
		f5 =  f5/*fround*/
		f15 =  f15/*fround*/
		f4 =  f4/*fround*/
		f9 =  f9/*fround*/
		f4 =  f4/*fextend*/
		f5 =  f5/*fextend*/
		f9 =  f9/*fextend*/
		f15 =  f15/*fextend*/
		f11 =  f11/*fextend*/
		f8 =  f8/*fextend*/
		f7 =  f7/*fextend*/
		f10 =  f10/*fextend*/
		f4 =  (f5 + f4)
		f5 =  (f15 + f9)
		f9 =  (f8 + f11)
		f7 =  (f10 + f7)
		f4 =  f4/*fround*/
		f5 =  f5/*fround*/
		f9 =  f9/*fround*/
		f7 =  f7/*fround*/
		f11 =  f4/*fextend*/
		f7 =  f7/*fextend*/
		f15 =  f5/*fextend*/
		f9 =  f9/*fextend*/
		f7 =  (f7 * f11)
		f6 =  f6/*fextend*/
		f9 =  (f9 * f15)
		f0 =  f0/*fextend*/
		f7 =  f7/*fround*/
		f6 =  (f6 * f11)
		f9 =  f9/*fround*/
		f0 =  (f0 * f15)
		f6 =  f6/*fround*/
		f0 =  f0/*fround*/
		f9 =  f9/*fextend*/
		f7 =  f7/*fextend*/
		__asm(push(f5), push((i0+140)), op(0x3d))
		f7 =  (f7 - f9)
		f0 =  f0/*fextend*/
		f6 =  f6/*fextend*/
		f7 =  f7/*fround*/
		__asm(push(f4), push((i0+144)), op(0x3d))
		f0 =  (f6 - f0)
		f0 =  f0/*fround*/
		__asm(push(f7), push((i0+148)), op(0x3d))
		__asm(push(f0), push((i0+152)), op(0x3d))
		f6 =  (f11 * f8)
		f8 =  (f15 * f10)
		f9 =  ((__xasm<Number>(push((i0+84)), op(0x38))))
		f6 =  f6/*fround*/
		f8 =  f8/*fround*/
		f10 =  f9/*fextend*/
		f11 =  f7/*fextend*/
		f6 =  f6/*fextend*/
		f8 =  f8/*fextend*/
		f10 =  (f11 * f10)
		f6 =  (f8 + f6)
		f8 =  ((__xasm<Number>(push((i0+80)), op(0x38))))
		f15 =  ((__xasm<Number>(push((i0+88)), op(0x38))))
		f16 =  ((__xasm<Number>(push((i0+92)), op(0x38))))
		f10 =  f10/*fround*/
		f6 =  f6/*fround*/
		f17 =  f10/*fextend*/
		f6 =  f6/*fextend*/
		f18 =  f15/*fextend*/
		f19 =  f8/*fextend*/
		f20 =  f16/*fextend*/
		f21 =  f0/*fextend*/
		f22 =  f2/*fextend*/
		f23 =  f3/*fextend*/
		f18 =  (f19 + f18)
		f11 =  (f17 * f11)
		f19 =  (f21 * f20)
		f20 =  -f6
		f22 =  (f23 - f22)
		f18 =  f18/*fround*/
		f11 =  f11/*fround*/
		f19 =  f19/*fround*/
		f20 =  f20/*fround*/
		f22 =  f22/*fround*/
		f14 =  f14/*fround*/
		f23 =  f19/*fextend*/
		f24 =  ((__xasm<Number>(push((i0+128)), op(0x38))))
		f22 =  f22/*fextend*/
		f11 =  f11/*fextend*/
		f25 =  f18/*fextend*/
		f26 =  f20/*fextend*/
		f14 =  f14/*fextend*/
		f27 =  (f22 - f24)
		f22 =  (f24 - f22)
		f11 =  (f25 + f11)
		f21 =  (f23 * f21)
		f6 =  ((f6<=f14) ? f26 : f6)
		f24 =  f27/*fround*/
		f22 =  f22/*fround*/
		f11 =  f11/*fround*/
		f21 =  f21/*fround*/
		f6 =  f6/*fround*/
		f25 =  f22/*fextend*/
		f24 =  f24/*fextend*/
		f21 =  f21/*fextend*/
		f11 =  f11/*fextend*/
		f6 =  f6/*fextend*/
		f13 =  f13/*fextend*/
		f14 =  ((f24<=f14) ? f25 : f24)
		f11 =  (f11 + f21)
		f17 =  (f17 + f23)
		f6 =  ((f13>f6) ? f13 : f6)
		f13 =  f14/*fround*/
		f11 =  f11/*fround*/
		f14 =  f17/*fround*/
		f6 =  f6/*fround*/
		i3 =  (i3 & 1)
		__asm(push(i3!=0), iftrue, target("__ZN16b2PrismaticJoint24SolvePositionConstraintsEf__XprivateX__BB243_15_F"))
	__asm(lbl("__ZN16b2PrismaticJoint24SolvePositionConstraintsEf__XprivateX__BB243_11_F"))
		f17 =  (0)
		f21 =  ((__xasm<Number>(push((i0+156)), op(0x38))))
		f23 =  f9/*fextend*/
		f24 =  (f21 * f23)
		f24 =  f24/*fround*/
		f25 =  ((__xasm<Number>(push((i0+160)), op(0x38))))
		f26 =  f16/*fextend*/
		f24 =  f24/*fextend*/
		f27 =  (f24 * f21)
		f28 =  (f25 * f26)
		f27 =  f27/*fround*/
		f28 =  f28/*fround*/
		f28 =  f28/*fextend*/
		f10 =  f10/*fextend*/
		f19 =  f19/*fextend*/
		f27 =  f27/*fextend*/
		f18 =  f18/*fextend*/
		f10 =  (f10 * f21)
		f18 =  (f18 + f27)
		f19 =  (f19 * f25)
		f21 =  (f28 * f25)
		f23 =  (f23 + f26)
		f25 =  (1)
		f10 =  f10/*fround*/
		f18 =  f18/*fround*/
		f19 =  f19/*fround*/
		f21 =  f21/*fround*/
		f23 =  f23/*fround*/
		f17 =  f17/*fround*/
		f25 =  f25/*fround*/
		f19 =  f19/*fextend*/
		f10 =  f10/*fextend*/
		f21 =  f21/*fextend*/
		f18 =  f18/*fextend*/
		f25 =  f25/*fextend*/
		f17 =  f17/*fextend*/
		f23 =  f23/*fextend*/
		f10 =  (f10 + f19)
		f19 =  (f24 + f28)
		f18 =  (f18 + f21)
		f21 =  ((f23==f17) ? f25 : f23)
		f10 =  f10/*fround*/
		f19 =  f19/*fround*/
		f18 =  f18/*fround*/
		f21 =  f21/*fround*/
		f23 =  f19/*fextend*/
		f24 =  f10/*fextend*/
		f25 =  f14/*fextend*/
		f26 =  f18/*fextend*/
		f27 =  f21/*fextend*/
		f28 =  (f23 * f24)
		f29 =  (f23 * f23)
		f30 =  (f25 * f26)
		f26 =  (f27 * f26)
		f28 =  f28/*fround*/
		f29 =  f29/*fround*/
		f30 =  f30/*fround*/
		f26 =  f26/*fround*/
		f30 =  f30/*fextend*/
		f28 =  f28/*fextend*/
		f29 =  f29/*fextend*/
		f26 =  f26/*fextend*/
		f27 =  (f27 * f24)
		f28 =  (f28 - f30)
		f23 =  (f25 * f23)
		f26 =  (f26 - f29)
		f27 =  f27/*fround*/
		f28 =  f28/*fround*/
		f23 =  f23/*fround*/
		f26 =  f26/*fround*/
		__asm(push(f11), push((i0+164)), op(0x3d))
		f29 =  f28/*fextend*/
		f27 =  f27/*fextend*/
		f23 =  f23/*fextend*/
		f30 =  f26/*fextend*/
		f31 =  f11/*fextend*/
		__asm(push(f14), push((i0+168)), op(0x3d))
		f23 =  (f23 - f27)
		f25 =  (f25 * f29)
		f27 =  (f31 * f30)
		__asm(push(f10), push((i0+172)), op(0x3d))
		f23 =  f23/*fround*/
		f25 =  f25/*fround*/
		f27 =  f27/*fround*/
		__asm(push(f14), push((i0+176)), op(0x3d))
		f29 =  f23/*fextend*/
		f25 =  f25/*fextend*/
		f27 =  f27/*fextend*/
		__asm(push(f21), push((i0+180)), op(0x3d))
		f24 =  (f24 * f29)
		f25 =  (f27 + f25)
		__asm(push(f19), push((i0+184)), op(0x3d))
		f24 =  f24/*fround*/
		f25 =  f25/*fround*/
		__asm(push(f10), push((i0+188)), op(0x3d))
		f12 =  f12/*fextend*/
		f24 =  f24/*fextend*/
		f25 =  f25/*fextend*/
		__asm(push(f19), push((i0+192)), op(0x3d))
		f24 =  (f25 + f24)
		f12 =  -f12
		__asm(push(f18), push((i0+196)), op(0x3d))
		f24 =  f24/*fround*/
		f12 =  f12/*fround*/
		f25 =  f24/*fextend*/
		__asm(push(f25!=f17), iftrue, target("__ZN16b2PrismaticJoint24SolvePositionConstraintsEf__XprivateX__BB243_13_F"))
	__asm(lbl("__ZN16b2PrismaticJoint24SolvePositionConstraintsEf__XprivateX__BB243_12_F"))
		__asm(jump, target("__ZN16b2PrismaticJoint24SolvePositionConstraintsEf__XprivateX__BB243_14_F"))
	__asm(lbl("__ZN16b2PrismaticJoint24SolvePositionConstraintsEf__XprivateX__BB243_13_F"))
		f17 =  (1)
		f17 =  f17/*fround*/
		f24 =  f24/*fextend*/
		f17 =  f17/*fextend*/
		f17 =  (f17 / f24)
		f24 =  f17/*fround*/
	__asm(lbl("__ZN16b2PrismaticJoint24SolvePositionConstraintsEf__XprivateX__BB243_14_F"))
		f17 = f24
		f20 =  f20/*fextend*/
		f19 =  f19/*fextend*/
		f22 =  f22/*fextend*/
		f14 =  f14/*fextend*/
		f12 =  f12/*fextend*/
		f21 =  f21/*fextend*/
		f24 =  (f19 * f20)
		f25 =  (f19 * f22)
		f27 =  (f14 * f12)
		f29 =  (f21 * f12)
		f24 =  f24/*fround*/
		f25 =  f25/*fround*/
		f27 =  f27/*fround*/
		f29 =  f29/*fround*/
		f18 =  f18/*fextend*/
		f10 =  f10/*fextend*/
		f27 =  f27/*fextend*/
		f24 =  f24/*fextend*/
		f25 =  f25/*fextend*/
		f29 =  f29/*fextend*/
		f27 =  (f24 - f27)
		f30 =  (f18 * f20)
		f21 =  (f21 * f20)
		f18 =  (f18 * f22)
		f31 =  (f14 * f22)
		f25 =  (f29 - f25)
		f29 =  (f10 * f12)
		f19 =  (f19 * f12)
		f27 =  f27/*fround*/
		f30 =  f30/*fround*/
		f21 =  f21/*fround*/
		f18 =  f18/*fround*/
		f31 =  f31/*fround*/
		f25 =  f25/*fround*/
		f29 =  f29/*fround*/
		f19 =  f19/*fround*/
		f27 =  f27/*fextend*/
		f30 =  f30/*fextend*/
		f29 =  f29/*fextend*/
		f21 =  f21/*fextend*/
		f31 =  f31/*fextend*/
		f19 =  f19/*fextend*/
		f18 =  f18/*fextend*/
		f25 =  f25/*fextend*/
		f11 =  f11/*fextend*/
		f27 =  (f14 * f27)
		f29 =  (f29 - f30)
		f21 =  (f31 - f21)
		f30 =  (f10 * f22)
		f18 =  (f18 - f19)
		f19 =  (f11 * f25)
		f25 =  f27/*fround*/
		f27 =  f29/*fround*/
		f21 =  f21/*fround*/
		f29 =  f30/*fround*/
		f18 =  f18/*fround*/
		f19 =  f19/*fround*/
		f26 =  f26/*fextend*/
		f29 =  f29/*fextend*/
		f27 =  f27/*fextend*/
		f21 =  f21/*fextend*/
		f28 =  f28/*fextend*/
		f18 =  f18/*fextend*/
		f25 =  f25/*fextend*/
		f19 =  f19/*fextend*/
		f20 =  (f26 * f20)
		f24 =  (f24 - f29)
		f19 =  (f19 + f25)
		f14 =  (f14 * f27)
		f21 =  (f10 * f21)
		f22 =  (f28 * f22)
		f11 =  (f11 * f18)
		f20 =  f20/*fround*/
		f18 =  f24/*fround*/
		f19 =  f19/*fround*/
		f14 =  f14/*fround*/
		f21 =  f21/*fround*/
		f22 =  f22/*fround*/
		f11 =  f11/*fround*/
		f18 =  f18/*fextend*/
		f23 =  f23/*fextend*/
		f22 =  f22/*fextend*/
		f20 =  f20/*fextend*/
		f21 =  f21/*fextend*/
		f19 =  f19/*fextend*/
		f14 =  f14/*fextend*/
		f11 =  f11/*fextend*/
		f20 =  (f20 + f22)
		f10 =  (f10 * f18)
		f18 =  (f19 + f21)
		f11 =  (f11 + f14)
		f12 =  (f23 * f12)
		f14 =  f20/*fround*/
		f20 =  f10/*fround*/
		f22 =  f18/*fround*/
		f11 =  f11/*fround*/
		f10 =  f12/*fround*/
		f10 =  f10/*fextend*/
		f12 =  f14/*fextend*/
		f14 =  f20/*fextend*/
		f11 =  f11/*fextend*/
		f18 =  f17/*fextend*/
		f19 =  f22/*fextend*/
		f10 =  (f12 + f10)
		f11 =  (f11 + f14)
		f12 =  (f19 * f18)
		f14 =  f10/*fround*/
		f11 =  f11/*fround*/
		f20 =  f12/*fround*/
		f22 = f17
		f10 = f17
		__asm(jump, target("__ZN16b2PrismaticJoint24SolvePositionConstraintsEf__XprivateX__BB243_19_F"))
	__asm(lbl("__ZN16b2PrismaticJoint24SolvePositionConstraintsEf__XprivateX__BB243_15_F"))
		f10 =  (0)
		f12 =  f16/*fextend*/
		f17 =  f9/*fextend*/
		f12 =  (f17 + f12)
		f17 =  (1)
		f12 =  f12/*fround*/
		f10 =  f10/*fround*/
		f17 =  f17/*fround*/
		f17 =  f17/*fextend*/
		f10 =  f10/*fextend*/
		f12 =  f12/*fextend*/
		f12 =  ((f12==f10) ? f17 : f12)
		f12 =  f12/*fround*/
		__asm(push(f11), push((i0+164)), op(0x3d))
		f17 =  f14/*fextend*/
		f18 =  f12/*fextend*/
		f19 =  f11/*fextend*/
		f18 =  (f19 * f18)
		f17 =  (f17 * f17)
		__asm(push(f14), push((i0+168)), op(0x3d))
		i3 =  (0)
		__asm(push(i3), push((i0+172)), op(0x3c))
		f18 =  f18/*fround*/
		f17 =  f17/*fround*/
		__asm(push(f14), push((i0+176)), op(0x3d))
		f17 =  f17/*fextend*/
		f18 =  f18/*fextend*/
		__asm(push(f12), push((i0+180)), op(0x3d))
		f17 =  (f18 - f17)
		__asm(push(i3), push((i0+184)), op(0x3c))
		f17 =  f17/*fround*/
		f18 =  f17/*fextend*/
		__asm(push(f18!=f10), iftrue, target("__ZN16b2PrismaticJoint24SolvePositionConstraintsEf__XprivateX__BB243_17_F"))
	__asm(lbl("__ZN16b2PrismaticJoint24SolvePositionConstraintsEf__XprivateX__BB243_16_F"))
		f10 = f17
		__asm(jump, target("__ZN16b2PrismaticJoint24SolvePositionConstraintsEf__XprivateX__BB243_18_F"))
	__asm(lbl("__ZN16b2PrismaticJoint24SolvePositionConstraintsEf__XprivateX__BB243_17_F"))
		f10 =  (1)
		f10 =  f10/*fround*/
		f17 =  f17/*fextend*/
		f10 =  f10/*fextend*/
		f10 =  (f10 / f17)
		f10 =  f10/*fround*/
	__asm(lbl("__ZN16b2PrismaticJoint24SolvePositionConstraintsEf__XprivateX__BB243_18_F"))
		f17 =  (0)
		f12 =  f12/*fextend*/
		f18 =  f20/*fextend*/
		f14 =  f14/*fextend*/
		f19 =  f22/*fextend*/
		f11 =  f11/*fextend*/
		f12 =  (f12 * f18)
		f18 =  (f14 * f18)
		f14 =  (f14 * f19)
		f11 =  (f11 * f19)
		f20 =  f12/*fround*/
		f22 =  f18/*fround*/
		f14 =  f14/*fround*/
		f11 =  f11/*fround*/
		f12 =  f14/*fextend*/
		f14 =  f20/*fextend*/
		f18 =  f22/*fextend*/
		f11 =  f11/*fextend*/
		f12 =  (f14 - f12)
		f11 =  (f11 - f18)
		f14 =  f12/*fround*/
		f11 =  f11/*fround*/
		f20 =  f17/*fround*/
		f22 = f10
	__asm(lbl("__ZN16b2PrismaticJoint24SolvePositionConstraintsEf__XprivateX__BB243_19_F"))
		f12 = f14
		f14 = f22
		f17 = f20
		f14 =  f14/*fextend*/
		f12 =  f12/*fextend*/
		f12 =  (f12 * f14)
		f12 =  f12/*fround*/
		f7 =  f7/*fextend*/
		f12 =  f12/*fextend*/
		f10 =  f10/*fextend*/
		f11 =  f11/*fextend*/
		f5 =  f5/*fextend*/
		f7 =  (f12 * f7)
		f10 =  (f11 * f10)
		f11 =  ((__xasm<Number>(push((i0+132)), op(0x38))))
		f14 =  f17/*fextend*/
		f17 =  ((__xasm<Number>(push((i0+136)), op(0x38))))
		f4 =  f4/*fextend*/
		f5 =  (f5 * f12)
		f7 =  f7/*fround*/
		f10 =  f10/*fround*/
		f11 =  (f11 * f14)
		f18 =  ((__xasm<Number>(push((i0+156)), op(0x38))))
		f4 =  (f4 * f12)
		f5 =  f5/*fround*/
		f0 =  f0/*fextend*/
		f11 =  f11/*fround*/
		f17 =  (f17 * f14)
		f7 =  f7/*fextend*/
		f10 =  f10/*fextend*/
		f4 =  f4/*fround*/
		f7 =  (f7 + f10)
		f0 =  (f12 * f0)
		f12 =  (f14 * f18)
		f17 =  f17/*fround*/
		f11 =  f11/*fextend*/
		f5 =  f5/*fextend*/
		f5 =  (f5 + f11)
		f7 =  f7/*fround*/
		f0 =  f0/*fround*/
		f11 =  f12/*fround*/
		f12 =  f17/*fextend*/
		f4 =  f4/*fextend*/
		f17 =  ((__xasm<Number>(push((i0+160)), op(0x38))))
		f4 =  (f4 + f12)
		f5 =  f5/*fround*/
		f0 =  f0/*fextend*/
		f11 =  f11/*fextend*/
		f7 =  f7/*fextend*/
		f4 =  f4/*fround*/
		f7 =  (f7 + f11)
		f0 =  (f0 + f10)
		f10 =  (f14 * f17)
		f8 =  f8/*fextend*/
		f5 =  f5/*fextend*/
		f4 =  f4/*fextend*/
		f11 =  (f5 * f8)
		f7 =  f7/*fround*/
		f0 =  f0/*fround*/
		f10 =  f10/*fround*/
		f8 =  (f4 * f8)
		f11 =  f11/*fround*/
		f7 =  f7/*fextend*/
		f9 =  f9/*fextend*/
		f10 =  f10/*fextend*/
		f0 =  f0/*fextend*/
		f12 =  f15/*fextend*/
		f8 =  f8/*fround*/
		f7 =  (f9 * f7)
		f0 =  (f0 + f10)
		f9 =  f11/*fextend*/
		f1 =  f1/*fextend*/
		f1 =  (f1 - f9)
		f5 =  (f5 * f12)
		f7 =  f7/*fround*/
		f0 =  f0/*fround*/
		f8 =  f8/*fextend*/
		f9 =  ((__xasm<Number>(push((mstate.ebp+-24)), op(0x38))))
		f9 =  f9/*fextend*/
		f8 =  (f9 - f8)
		f4 =  (f4 * f12)
		f5 =  f5/*fround*/
		f1 =  f1/*fround*/
		f7 =  f7/*fextend*/
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f9 =  f16/*fextend*/
		f4 =  f4/*fround*/
		f2 =  (f2 - f7)
		f0 =  (f9 * f0)
		__asm(push(f1), push(i4), op(0x3d))
		f1 =  f8/*fround*/
		f5 =  f5/*fextend*/
		f7 =  ((__xasm<Number>(push((mstate.ebp+-16)), op(0x38))))
		f7 =  f7/*fextend*/
		f5 =  (f7 + f5)
		f0 =  f0/*fround*/
		__asm(push(f1), push(i5), op(0x3d))
		f1 =  f4/*fextend*/
		f4 =  ((__xasm<Number>(push((mstate.ebp+-8)), op(0x38))))
		f4 =  f4/*fextend*/
		f2 =  f2/*fround*/
		f1 =  (f4 + f1)
		__asm(push(f2), push(i6), op(0x3d))
		f2 =  f5/*fround*/
		f3 =  f3/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 + f3)
		__asm(push(f2), push(i7), op(0x3d))
		f1 =  f1/*fround*/
		__asm(push(f1), push(i8), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push(i9), op(0x3d))
		f1 =  ((__xasm<Number>(push(i6), op(0x38))))
		f0 = f1
		//InlineAsmStart
	f0 =  Math.cos(f0);

	//InlineAsmEnd
		f2 = f0
		f0 = f1
		//InlineAsmStart
	f0 =  Math.sin(f0);

	//InlineAsmEnd
		f1 =  f0/*fextend*/
		f3 =  -f1
		__asm(push(f2), push((i1+20)), op(0x3d))
		f3 =  f3/*fround*/
		__asm(push(f3), push((i1+28)), op(0x3d))
		__asm(push(f0), push((i1+24)), op(0x3d))
		__asm(push(f2), push((i1+32)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i1+36)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i1+40)), op(0x38))))
		f2 =  f2/*fextend*/
		f4 =  (f2 * f0)
		f5 =  (f3 * f1)
		f0 =  (f1 * f0)
		f1 =  f4/*fround*/
		f2 =  (f2 * f3)
		f3 =  f5/*fround*/
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f1 =  (f1 - f3)
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 + f2)
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		f2 =  ((__xasm<Number>(push(i4), op(0x38))))
		f1 =  f1/*fextend*/
		f3 =  ((__xasm<Number>(push(i5), op(0x38))))
		f0 =  f0/*fextend*/
		f1 =  (f2 - f1)
		f0 =  (f3 - f0)
		f1 =  f1/*fround*/
		__asm(push(f1), push((i1+12)), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push((i1+16)), op(0x3d))
		f1 =  ((__xasm<Number>(push(i9), op(0x38))))
		f0 = f1
		//InlineAsmStart
	f0 =  Math.cos(f0);

	//InlineAsmEnd
		f2 = f0
		f0 = f1
		//InlineAsmStart
	f0 =  Math.sin(f0);

	//InlineAsmEnd
		f1 =  f0/*fextend*/
		f3 =  -f1
		__asm(push(f2), push((i2+20)), op(0x3d))
		f3 =  f3/*fround*/
		__asm(push(f3), push((i2+28)), op(0x3d))
		__asm(push(f0), push((i2+24)), op(0x3d))
		__asm(push(f2), push((i2+32)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i2+36)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i2+40)), op(0x38))))
		f2 =  f2/*fextend*/
		f4 =  (f2 * f0)
		f5 =  (f3 * f1)
		f0 =  (f1 * f0)
		f1 =  f4/*fround*/
		f2 =  (f2 * f3)
		f3 =  f5/*fround*/
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f1 =  (f1 - f3)
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 + f2)
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		f2 =  ((__xasm<Number>(push(i7), op(0x38))))
		f1 =  f1/*fextend*/
		f3 =  ((__xasm<Number>(push(i8), op(0x38))))
		f0 =  f0/*fextend*/
		f1 =  (f2 - f1)
		f0 =  (f3 - f0)
		f1 =  f1/*fround*/
		__asm(push(f1), push((i2+12)), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push((i2+16)), op(0x3d))
		f0 =  ((__xasm<Number>(push(_b2_linearSlop), op(0x38))))
		f1 =  f6/*fextend*/
		__asm(push(f1>f0), iftrue, target("__ZN16b2PrismaticJoint24SolvePositionConstraintsEf__XprivateX__BB243_21_F"))
	__asm(lbl("__ZN16b2PrismaticJoint24SolvePositionConstraintsEf__XprivateX__BB243_20_F"))
		f0 =  ((__xasm<Number>(push(_b2_angularSlop), op(0x38))))
		f1 =  f13/*fextend*/
		i0 =  ((f1<=f0) ? 1 : 0)
		i0 =  (i0 & 1)
		__asm(jump, target("__ZN16b2PrismaticJoint24SolvePositionConstraintsEf__XprivateX__BB243_22_F"))
	__asm(lbl("__ZN16b2PrismaticJoint24SolvePositionConstraintsEf__XprivateX__BB243_21_F"))
		i0 =  (0)
	__asm(lbl("__ZN16b2PrismaticJoint24SolvePositionConstraintsEf__XprivateX__BB243_22_F"))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZNK13b2PulleyJoint10GetAnchorAEv:int = regFunc(FSM__ZNK13b2PulleyJoint10GetAnchorAEv.start)

public final class FSM__ZNK13b2PulleyJoint10GetAnchorAEv extends Machine {

	public static function start():void {
		var i0:int, i1:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number

		__asm(label, lbl("__ZNK13b2PulleyJoint10GetAnchorAEv_entry"))
	__asm(lbl("__ZNK13b2PulleyJoint10GetAnchorAEv__XprivateX__BB244_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 8
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+48)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i1+20)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i0+112)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i1+24)), op(0x38))))
		f2 =  (f2 * f1)
		f0 =  (f0 * f1)
		f1 =  f2/*fround*/
		f0 =  f0/*fround*/
		f2 =  ((__xasm<Number>(push((i1+12)), op(0x38))))
		f0 =  f0/*fextend*/
		f3 =  ((__xasm<Number>(push((i1+28)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i0+116)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i1+32)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i1+16)), op(0x38))))
		f1 =  f1/*fextend*/
		f0 =  (f2 + f0)
		f2 =  (f5 * f4)
		f1 =  (f6 + f1)
		f3 =  (f3 * f4)
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		f3 =  f3/*fextend*/
		f0 =  f0/*fextend*/
		f2 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  (f0 + f3)
		f1 =  (f1 + f2)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		__asm(push(f0), push((mstate.ebp+-8)), op(0x3d))
		__asm(push(f1), push((mstate.ebp+-4)), op(0x3d))
		i0 =  ((__xasm<int>(push((mstate.ebp+-8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		mstate.edx = i1
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZNK13b2PulleyJoint10GetAnchorBEv:int = regFunc(FSM__ZNK13b2PulleyJoint10GetAnchorBEv.start)

public final class FSM__ZNK13b2PulleyJoint10GetAnchorBEv extends Machine {

	public static function start():void {
		var i0:int, i1:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number

		__asm(label, lbl("__ZNK13b2PulleyJoint10GetAnchorBEv_entry"))
	__asm(lbl("__ZNK13b2PulleyJoint10GetAnchorBEv__XprivateX__BB245_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 8
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+52)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i1+20)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i0+120)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i1+24)), op(0x38))))
		f2 =  (f2 * f1)
		f0 =  (f0 * f1)
		f1 =  f2/*fround*/
		f0 =  f0/*fround*/
		f2 =  ((__xasm<Number>(push((i1+12)), op(0x38))))
		f0 =  f0/*fextend*/
		f3 =  ((__xasm<Number>(push((i1+28)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i0+124)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i1+32)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i1+16)), op(0x38))))
		f1 =  f1/*fextend*/
		f0 =  (f2 + f0)
		f2 =  (f5 * f4)
		f1 =  (f6 + f1)
		f3 =  (f3 * f4)
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		f3 =  f3/*fextend*/
		f0 =  f0/*fextend*/
		f2 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  (f0 + f3)
		f1 =  (f1 + f2)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		__asm(push(f0), push((mstate.ebp+-8)), op(0x3d))
		__asm(push(f1), push((mstate.ebp+-4)), op(0x3d))
		i0 =  ((__xasm<int>(push((mstate.ebp+-8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		mstate.edx = i1
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZNK13b2PulleyJoint16GetReactionForceEf:int = regFunc(FSM__ZNK13b2PulleyJoint16GetReactionForceEf.start)

public final class FSM__ZNK13b2PulleyJoint16GetReactionForceEf extends Machine {

	public static function start():void {
		var i0:int, i1:int

		var f0:Number, f1:Number, f2:Number

		__asm(label, lbl("__ZNK13b2PulleyJoint16GetReactionForceEf_entry"))
	__asm(lbl("__ZNK13b2PulleyJoint16GetReactionForceEf__XprivateX__BB246_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 8
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i0+136)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i0+172)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i0+140)), op(0x38))))
		f2 =  (f2 * f1)
		f0 =  (f0 * f1)
		f1 =  f2/*fround*/
		f0 =  f0/*fround*/
		f2 =  ((__xasm<Number>(push((mstate.ebp+12)), op(0x38))))
		f1 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		f1 =  (f1 * f2)
		f0 =  (f0 * f2)
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		__asm(push(f0), push((mstate.ebp+-4)), op(0x3d))
		__asm(push(f1), push((mstate.ebp+-8)), op(0x3d))
		i0 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+-8)), op(0x37))))
		mstate.edx = i1
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZNK13b2PulleyJoint17GetReactionTorqueEf:int = regFunc(FSM__ZNK13b2PulleyJoint17GetReactionTorqueEf.start)

public final class FSM__ZNK13b2PulleyJoint17GetReactionTorqueEf extends Machine {

	public static function start():void {

		var f0:Number

		__asm(label, lbl("__ZNK13b2PulleyJoint17GetReactionTorqueEf_entry"))
	__asm(lbl("__ZNK13b2PulleyJoint17GetReactionTorqueEf__XprivateX__BB247_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		f0 =  (0)
		f0 =  f0/*fround*/
		mstate.st0 = f0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Async
public const __ZN13b2PulleyJointD1Ev:int = regFunc(FSM__ZN13b2PulleyJointD1Ev.start)

public final class FSM__ZN13b2PulleyJointD1Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN13b2PulleyJointD1Ev = new FSM__ZN13b2PulleyJointD1Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN13b2PulleyJointD1Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN13b2PulleyJointD1Ev_errState",
			"__ZN13b2PulleyJointD1Ev_state0"))
	__asm(lbl("__ZN13b2PulleyJointD1Ev_state0"))
	__asm(lbl("__ZN13b2PulleyJointD1Ev__XprivateX__BB248_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV7b2Joint)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN13b2PulleyJointD1Ev_errState"))
		throw("Invalid state in __ZN13b2PulleyJointD1Ev")
	}
}



// Async
public const __ZN13b2PulleyJointD0Ev:int = regFunc(FSM__ZN13b2PulleyJointD0Ev.start)

public final class FSM__ZN13b2PulleyJointD0Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN13b2PulleyJointD0Ev = new FSM__ZN13b2PulleyJointD0Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN13b2PulleyJointD0Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN13b2PulleyJointD0Ev_errState",
			"__ZN13b2PulleyJointD0Ev_state0",
			"__ZN13b2PulleyJointD0Ev_state1"))
	__asm(lbl("__ZN13b2PulleyJointD0Ev_state0"))
	__asm(lbl("__ZN13b2PulleyJointD0Ev__XprivateX__BB249_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV7b2Joint)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		__asm(push(i1==0), iftrue, target("__ZN13b2PulleyJointD0Ev__XprivateX__BB249_2_F"))
	__asm(lbl("__ZN13b2PulleyJointD0Ev__XprivateX__BB249_1_F"))
		i0 =  (0)
		mstate.esp -= 8
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN13b2PulleyJointD0Ev_state1"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__ZN13b2PulleyJointD0Ev__XprivateX__BB249_2_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN13b2PulleyJointD0Ev_errState"))
		throw("Invalid state in __ZN13b2PulleyJointD0Ev")
	}
}



// Async
public const __ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep:int = regFunc(FSM__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep.start)

public final class FSM__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep extends Machine {

	public static function start():void {
			var result:FSM__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep = new FSM__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
	public var i8:int, i9:int, i10:int, i11:int, i12:int, i13:int, i14:int, i15:int

	public static const intRegCount:int = 16
	public var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number
	public var f8:Number, f9:Number, f10:Number, f11:Number, f12:Number

	public static const NumberRegCount:int = 13
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep_entry"))
		__asm(push(state), switchjump(
			"__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep_errState",
			"__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep_state0",
			"__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep_state1",
			"__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep_state2"))
	__asm(lbl("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep_state0"))
	__asm(lbl("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB250_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+48)), op(0x37))))
		i2 =  ((__xasm<int>(push((i0+52)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i0+116)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i1+40)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i0+112)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i1+36)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i0+124)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i2+40)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i0+120)), op(0x38))))
		f7 =  ((__xasm<Number>(push((i2+36)), op(0x38))))
		f2 =  (f2 - f3)
		f0 =  (f0 - f1)
		f1 =  (f6 - f7)
		f3 =  (f4 - f5)
		f2 =  f2/*fround*/
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		f4 =  ((__xasm<Number>(push((i1+24)), op(0x38))))
		f2 =  f2/*fextend*/
		f5 =  ((__xasm<Number>(push((i1+20)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i1+32)), op(0x38))))
		f0 =  f0/*fextend*/
		f7 =  ((__xasm<Number>(push((i1+28)), op(0x38))))
		f8 =  ((__xasm<Number>(push((i2+24)), op(0x38))))
		f1 =  f1/*fextend*/
		f9 =  ((__xasm<Number>(push((i2+20)), op(0x38))))
		f10 =  ((__xasm<Number>(push((i2+32)), op(0x38))))
		f3 =  f3/*fextend*/
		f11 =  ((__xasm<Number>(push((i2+28)), op(0x38))))
		f4 =  (f4 * f2)
		f2 =  (f5 * f2)
		f5 =  (f6 * f0)
		f0 =  (f7 * f0)
		f6 =  (f8 * f1)
		f1 =  (f9 * f1)
		f7 =  (f10 * f3)
		f3 =  (f11 * f3)
		f4 =  f4/*fround*/
		f2 =  f2/*fround*/
		f5 =  f5/*fround*/
		f0 =  f0/*fround*/
		f6 =  f6/*fround*/
		f1 =  f1/*fround*/
		f7 =  f7/*fround*/
		f3 =  f3/*fround*/
		f5 =  f5/*fextend*/
		f4 =  f4/*fextend*/
		f0 =  f0/*fextend*/
		f2 =  f2/*fextend*/
		f7 =  f7/*fextend*/
		f6 =  f6/*fextend*/
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f4 =  (f4 + f5)
		f0 =  (f2 + f0)
		f2 =  (f6 + f7)
		f1 =  (f1 + f3)
		f3 =  f4/*fround*/
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		f4 =  ((__xasm<Number>(push((i1+56)), op(0x38))))
		f5 =  f3/*fextend*/
		f6 =  ((__xasm<Number>(push((i1+52)), op(0x38))))
		f7 =  f0/*fextend*/
		f8 =  ((__xasm<Number>(push((i2+56)), op(0x38))))
		f9 =  f2/*fextend*/
		f10 =  ((__xasm<Number>(push((i2+52)), op(0x38))))
		f11 =  f1/*fextend*/
		f4 =  (f4 + f5)
		f5 =  (f6 + f7)
		f6 =  (f8 + f9)
		f7 =  (f10 + f11)
		f4 =  f4/*fround*/
		f5 =  f5/*fround*/
		f6 =  f6/*fround*/
		f7 =  f7/*fround*/
		f8 =  ((__xasm<Number>(push((i0+96)), op(0x38))))
		f5 =  f5/*fextend*/
		f9 =  ((__xasm<Number>(push((i0+100)), op(0x38))))
		f4 =  f4/*fextend*/
		f10 =  ((__xasm<Number>(push((i0+104)), op(0x38))))
		f11 =  ((__xasm<Number>(push((i0+108)), op(0x38))))
		f6 =  f6/*fextend*/
		f7 =  f7/*fextend*/
		f4 =  (f4 - f9)
		f5 =  (f5 - f8)
		f6 =  (f6 - f11)
		f7 =  (f7 - f10)
		f4 =  f4/*fround*/
		f5 =  f5/*fround*/
		f6 =  f6/*fround*/
		f7 =  f7/*fround*/
		f8 =  f4/*fextend*/
		f9 =  f5/*fextend*/
		f10 =  f6/*fextend*/
		f11 =  f7/*fextend*/
		f8 =  (f8 * f8)
		f9 =  (f9 * f9)
		f10 =  (f10 * f10)
		f11 =  (f11 * f11)
		f8 =  f8/*fround*/
		f9 =  f9/*fround*/
		f10 =  f10/*fround*/
		f11 =  f11/*fround*/
		f8 =  f8/*fextend*/
		f9 =  f9/*fextend*/
		f10 =  f10/*fextend*/
		f11 =  f11/*fextend*/
		__asm(push(f5), push((i0+128)), op(0x3d))
		f8 =  (f9 + f8)
		f9 =  (f11 + f10)
		__asm(push(f4), push((i0+132)), op(0x3d))
		f8 =  f8/*fround*/
		f9 =  f9/*fround*/
		__asm(push(f7), push((i0+136)), op(0x3d))
		f8 =  f8/*fextend*/
		f9 =  f9/*fextend*/
		__asm(push(f6), push((i0+140)), op(0x3d))
		f8 =  Math.sqrt(f8)
		f9 =  Math.sqrt(f9)
		f10 =  ((__xasm<Number>(push(_b2_linearSlop), op(0x38))))
		f8 =  f8/*fround*/
		f9 =  f9/*fround*/
		i3 =  (i0 + 132)
		i4 =  (i0 + 140)
		i5 =  (i0 + 136)
		i6 =  (i0 + 128)
		i7 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		f11 =  f10/*fextend*/
		f12 =  f8/*fextend*/
		__asm(push(f12<=f11), iftrue, target("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB250_3_F"))
	__asm(lbl("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB250_1_F"))
		f11 =  (1)
		f11 =  f11/*fround*/
		f12 =  f8/*fextend*/
		f11 =  f11/*fextend*/
		f11 =  (f11 / f12)
		f11 =  f11/*fround*/
		f5 =  f5/*fextend*/
		f11 =  f11/*fextend*/
		f5 =  (f5 * f11)
		f4 =  f4/*fextend*/
		f4 =  (f4 * f11)
		f5 =  f5/*fround*/
		__asm(push(f5), push(i6), op(0x3d))
		f4 =  f4/*fround*/
		__asm(push(f4), push(i3), op(0x3d))
		f4 =  f10/*fextend*/
		f5 =  f9/*fextend*/
		__asm(push(f5>f4), iftrue, target("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB250_4_F"))
		__asm(jump, target("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB250_2_F"))
	__asm(jump, target("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB250_2_F"), lbl("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB250_2_B"), label, lbl("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB250_2_F")); 
		f4 =  (0)
		i8 =  (0)
		__asm(push(i8), push(i5), op(0x3c))
		f4 =  f4/*fround*/
		__asm(jump, target("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB250_5_F"))
	__asm(lbl("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB250_3_F"))
		i8 =  (0)
		__asm(push(i8), push(i6), op(0x3c))
		__asm(push(i8), push(i3), op(0x3c))
		f4 =  f10/*fextend*/
		f5 =  f9/*fextend*/
		__asm(push(f5<=f4), iftrue, target("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB250_2_B"))
	__asm(lbl("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB250_4_F"))
		f4 =  (1)
		f4 =  f4/*fround*/
		f5 =  f9/*fextend*/
		f4 =  f4/*fextend*/
		f4 =  (f4 / f5)
		f4 =  f4/*fround*/
		f5 =  f7/*fextend*/
		f4 =  f4/*fextend*/
		f5 =  (f5 * f4)
		f6 =  f6/*fextend*/
		f4 =  (f6 * f4)
		f5 =  f5/*fround*/
		__asm(push(f5), push(i5), op(0x3d))
		f4 =  f4/*fround*/
		__asm(jump, target("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB250_5_F"))
	__asm(lbl("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB250_5_F"))
		f5 =  (0)
		__asm(push(f4), push(i4), op(0x3d))
		f4 =  ((__xasm<Number>(push((i0+144)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i0+148)), op(0x38))))
		f7 =  f8/*fextend*/
		f10 =  f9/*fextend*/
		f4 =  (f4 - f7)
		f6 =  (f6 * f10)
		f4 =  f4/*fround*/
		f6 =  f6/*fround*/
		f6 =  f6/*fextend*/
		f4 =  f4/*fextend*/
		f4 =  (f4 - f6)
		i8 =  (i0 + 188)
		i9 =  (i0 + 152)
		i10 =  (i0 + 184)
		i11 =  (i0 + 148)
		f4 =  f4/*fround*/
		f5 =  f5/*fround*/
		f5 =  f5/*fextend*/
		f4 =  f4/*fextend*/
		__asm(push(f4<=f5), iftrue, target("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB250_9_F"))
	__asm(lbl("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB250_6_F"))
		i12 =  (0)
		__asm(push(i12), push(i10), op(0x3c))
		__asm(push(i12), push((i0+172)), op(0x3c))
		f4 =  ((__xasm<Number>(push(i9), op(0x38))))
		f5 =  f8/*fextend*/
		__asm(push(f4>f5), iftrue, target("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB250_10_F"))
		__asm(jump, target("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB250_7_F"))
	__asm(jump, target("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB250_7_F"), lbl("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB250_7_B"), label, lbl("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB250_7_F")); 
		i9 =  (2)
		__asm(push(i9), push(i8), op(0x3c))
		f4 =  ((__xasm<Number>(push((i0+156)), op(0x38))))
		i8 =  (i0 + 192)
		f5 =  f9/*fextend*/
		__asm(push(f4>f5), iftrue, target("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB250_14_F"))
		__asm(jump, target("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB250_8_F"))
	__asm(lbl("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB250_8_F"))
		__asm(jump, target("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB250_12_F"))
	__asm(lbl("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB250_9_F"))
		i12 =  (2)
		__asm(push(i12), push(i10), op(0x3c))
		f4 =  ((__xasm<Number>(push(i9), op(0x38))))
		f5 =  f8/*fextend*/
		__asm(push(f4<=f5), iftrue, target("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB250_7_B"))
	__asm(lbl("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB250_10_F"))
		i9 =  (0)
		__asm(push(i9), push(i8), op(0x3c))
		__asm(push(i9), push((i0+176)), op(0x3c))
		f4 =  ((__xasm<Number>(push((i0+156)), op(0x38))))
		i8 =  (i0 + 192)
		f5 =  f9/*fextend*/
		__asm(push(f4>f5), iftrue, target("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB250_13_F"))
	__asm(lbl("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB250_11_F"))
		__asm(jump, target("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB250_12_F"))
	__asm(lbl("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB250_12_F"))
		i9 =  (2)
		__asm(push(i9), push(i8), op(0x3c))
		__asm(jump, target("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB250_15_F"))
	__asm(lbl("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB250_13_F"))
		__asm(jump, target("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB250_14_F"))
	__asm(lbl("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB250_14_F"))
		i9 =  (0)
		__asm(push(i9), push(i8), op(0x3c))
		__asm(push(i9), push((i0+180)), op(0x3c))
		__asm(jump, target("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB250_15_F"))
	__asm(lbl("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB250_15_F"))
		f4 =  (1.19209e-07)
		f5 =  ((__xasm<Number>(push(i3), op(0x38))))
		f6 =  f0/*fextend*/
		f7 =  ((__xasm<Number>(push(i6), op(0x38))))
		f8 =  f3/*fextend*/
		f5 =  (f6 * f5)
		f6 =  (f8 * f7)
		f5 =  f5/*fround*/
		f6 =  f6/*fround*/
		f6 =  f6/*fextend*/
		f5 =  f5/*fextend*/
		f5 =  (f5 - f6)
		f5 =  f5/*fround*/
		f6 =  ((__xasm<Number>(push((i1+136)), op(0x38))))
		f5 =  f5/*fextend*/
		f6 =  (f6 * f5)
		f6 =  f6/*fround*/
		f6 =  f6/*fextend*/
		f5 =  (f6 * f5)
		f6 =  ((__xasm<Number>(push(i4), op(0x38))))
		f7 =  f1/*fextend*/
		f8 =  ((__xasm<Number>(push(i5), op(0x38))))
		f9 =  f2/*fextend*/
		f5 =  f5/*fround*/
		f6 =  (f7 * f6)
		f7 =  (f9 * f8)
		f8 =  ((__xasm<Number>(push((i1+128)), op(0x38))))
		f5 =  f5/*fextend*/
		f6 =  f6/*fround*/
		f7 =  f7/*fround*/
		f5 =  (f8 + f5)
		f7 =  f7/*fextend*/
		f6 =  f6/*fextend*/
		f5 =  f5/*fround*/
		f6 =  (f6 - f7)
		__asm(push(f5), push((i0+164)), op(0x3d))
		f6 =  f6/*fround*/
		f7 =  ((__xasm<Number>(push((i2+136)), op(0x38))))
		f6 =  f6/*fextend*/
		f7 =  (f7 * f6)
		f7 =  f7/*fround*/
		f7 =  f7/*fextend*/
		f6 =  (f7 * f6)
		f6 =  f6/*fround*/
		f7 =  ((__xasm<Number>(push((i2+128)), op(0x38))))
		f6 =  f6/*fextend*/
		f6 =  (f7 + f6)
		f6 =  f6/*fround*/
		__asm(push(f6), push((i0+168)), op(0x3d))
		f7 =  ((__xasm<Number>(push(i11), op(0x38))))
		f7 =  (f7 * f7)
		f7 =  f7/*fround*/
		f6 =  f6/*fextend*/
		f7 =  f7/*fextend*/
		f6 =  (f7 * f6)
		f6 =  f6/*fround*/
		f6 =  f6/*fextend*/
		f5 =  f5/*fextend*/
		f6 =  (f5 + f6)
		f6 =  f6/*fround*/
		__asm(push(f6), push((i0+160)), op(0x3d))
		i8 =  (i0 + 160)
		i9 =  (i0 + 168)
		i10 =  (i2 + 136)
		i12 =  (i2 + 128)
		i13 =  (i0 + 164)
		i14 =  (i1 + 136)
		i15 =  (i1 + 128)
		f4 =  f4/*fround*/
		f4 =  f4/*fextend*/
		__asm(push(f5>f4), iftrue, target("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB250_17_F"))
	__asm(lbl("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB250_16_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str89296)
		i3 =  (__ZZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStepE8__func__)
		i4 =  (__2E_str88295)
		i5 =  (162)
		__asm(jump, target("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB250_19_F"))
	__asm(lbl("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB250_17_F"))
		f4 =  (1.19209e-07)
		f4 =  f4/*fround*/
		f5 =  ((__xasm<Number>(push(i9), op(0x38))))
		f4 =  f4/*fextend*/
		__asm(push(f5>f4), iftrue, target("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB250_20_F"))
	__asm(lbl("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB250_18_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str90297)
		i3 =  (__ZZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStepE8__func__)
		i4 =  (__2E_str88295)
		i5 =  (163)
	__asm(jump, target("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB250_19_F"), lbl("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB250_19_B"), label, lbl("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB250_19_F")); 
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep_state1"))
		mstate.esp += 24
		state = 2
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep_state2"))
	__asm(lbl("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB250_20_F"))
		f4 =  (1.19209e-07)
		f4 =  f4/*fround*/
		f5 =  ((__xasm<Number>(push(i8), op(0x38))))
		f4 =  f4/*fextend*/
		__asm(push(f5>f4), iftrue, target("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB250_22_F"))
	__asm(lbl("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB250_21_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str91298)
		i3 =  (__ZZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStepE8__func__)
		i4 =  (__2E_str88295)
		i5 =  (164)
		__asm(jump, target("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB250_19_B"))
	__asm(lbl("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB250_22_F"))
		f4 =  (1)
		f4 =  f4/*fround*/
		f5 =  ((__xasm<Number>(push(i13), op(0x38))))
		f4 =  f4/*fextend*/
		f5 =  (f4 / f5)
		f5 =  f5/*fround*/
		__asm(push(f5), push(i13), op(0x3d))
		f5 =  ((__xasm<Number>(push(i9), op(0x38))))
		f5 =  (f4 / f5)
		f5 =  f5/*fround*/
		__asm(push(f5), push(i9), op(0x3d))
		f5 =  ((__xasm<Number>(push(i8), op(0x38))))
		f4 =  (f4 / f5)
		f4 =  f4/*fround*/
		__asm(push(f4), push(i8), op(0x3d))
		i8 =  ((__xasm<int>(push((i7+20)), op(0x35))))
		i9 =  (i0 + 172)
		__asm(push(i8==0), iftrue, target("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB250_24_F"))
	__asm(lbl("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB250_23_F"))
		f4 =  ((__xasm<Number>(push(i9), op(0x38))))
		f5 =  ((__xasm<Number>(push((i7+8)), op(0x38))))
		f4 =  (f4 * f5)
		f4 =  f4/*fround*/
		__asm(push(f4), push(i9), op(0x3d))
		f5 =  ((__xasm<Number>(push((i0+176)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i7+8)), op(0x38))))
		f5 =  (f5 * f6)
		f5 =  f5/*fround*/
		f6 =  f5/*fextend*/
		f4 =  f4/*fextend*/
		__asm(push(f5), push((i0+176)), op(0x3d))
		f5 =  (f4 + f6)
		f5 =  f5/*fround*/
		f6 =  ((__xasm<Number>(push((i0+180)), op(0x38))))
		f7 =  ((__xasm<Number>(push((i7+8)), op(0x38))))
		f6 =  (f6 * f7)
		f5 =  f5/*fextend*/
		f6 =  f6/*fround*/
		f5 =  -f5
		f5 =  f5/*fround*/
		__asm(push(f6), push((i0+180)), op(0x3d))
		f7 =  ((__xasm<Number>(push(i6), op(0x38))))
		f5 =  f5/*fextend*/
		f7 =  (f7 * f5)
		f7 =  f7/*fround*/
		f8 =  ((__xasm<Number>(push(i15), op(0x38))))
		f7 =  f7/*fextend*/
		f9 =  ((__xasm<Number>(push(i3), op(0x38))))
		f10 =  (f7 * f8)
		f5 =  (f9 * f5)
		f9 =  f10/*fround*/
		f5 =  f5/*fround*/
		f10 =  ((__xasm<Number>(push((i1+72)), op(0x38))))
		f9 =  f9/*fextend*/
		f11 =  ((__xasm<Number>(push(i11), op(0x38))))
		f5 =  f5/*fextend*/
		f9 =  (f10 + f9)
		f10 =  ((__xasm<Number>(push(i4), op(0x38))))
		f12 =  ((__xasm<Number>(push(i5), op(0x38))))
		f8 =  (f5 * f8)
		f0 =  f0/*fextend*/
		f3 =  f3/*fextend*/
		f9 =  f9/*fround*/
		__asm(push(f9), push((i1+72)), op(0x3d))
		f8 =  f8/*fround*/
		f0 =  (f0 * f5)
		f3 =  (f3 * f7)
		f0 =  f0/*fround*/
		f3 =  f3/*fround*/
		f5 =  -f11
		f7 =  ((__xasm<Number>(push((i1+76)), op(0x38))))
		f8 =  f8/*fextend*/
		f7 =  (f7 + f8)
		f5 =  f5/*fround*/
		f3 =  f3/*fextend*/
		f0 =  f0/*fextend*/
		f7 =  f7/*fround*/
		f0 =  (f0 - f3)
		f3 =  f5/*fextend*/
		__asm(push(f7), push((i1+76)), op(0x3d))
		f0 =  f0/*fround*/
		f3 =  (f4 * f3)
		f3 =  f3/*fround*/
		f4 =  ((__xasm<Number>(push(i14), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f4 * f0)
		f4 =  f6/*fextend*/
		f3 =  f3/*fextend*/
		f0 =  f0/*fround*/
		f3 =  (f3 - f4)
		f4 =  ((__xasm<Number>(push((i1+80)), op(0x38))))
		f0 =  f0/*fextend*/
		f3 =  f3/*fround*/
		f3 =  f3/*fextend*/
		f0 =  (f4 + f0)
		f4 =  (f12 * f3)
		f0 =  f0/*fround*/
		f4 =  f4/*fround*/
		__asm(push(f0), push((i1+80)), op(0x3d))
		f0 =  ((__xasm<Number>(push(i12), op(0x38))))
		f4 =  f4/*fextend*/
		f5 =  (f4 * f0)
		f5 =  f5/*fround*/
		f3 =  (f10 * f3)
		f6 =  ((__xasm<Number>(push((i2+72)), op(0x38))))
		f5 =  f5/*fextend*/
		f3 =  f3/*fround*/
		f5 =  (f6 + f5)
		f3 =  f3/*fextend*/
		f0 =  (f3 * f0)
		f1 =  f1/*fextend*/
		f2 =  f2/*fextend*/
		f5 =  f5/*fround*/
		__asm(push(f5), push((i2+72)), op(0x3d))
		f0 =  f0/*fround*/
		f1 =  (f1 * f3)
		f2 =  (f2 * f4)
		f1 =  f1/*fround*/
		f2 =  f2/*fround*/
		f3 =  ((__xasm<Number>(push((i2+76)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f3 + f0)
		f2 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  f0/*fround*/
		f1 =  (f1 - f2)
		__asm(push(f0), push((i2+76)), op(0x3d))
		f0 =  f1/*fround*/
		f1 =  ((__xasm<Number>(push(i10), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f1 * f0)
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push((i2+80)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f1 + f0)
		f0 =  f0/*fround*/
		__asm(push(f0), push((i2+80)), op(0x3d))
		__asm(jump, target("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB250_25_F"))
	__asm(lbl("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB250_24_F"))
		i1 =  (0)
		__asm(push(i1), push(i9), op(0x3c))
		__asm(push(i1), push((i0+176)), op(0x3c))
		__asm(push(i1), push((i0+180)), op(0x3c))
	__asm(lbl("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB250_25_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep_errState"))
		throw("Invalid state in __ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep")
	}
}



// Sync
public const __ZN13b2PulleyJoint24SolveVelocityConstraintsERK10b2TimeStep:int = regFunc(FSM__ZN13b2PulleyJoint24SolveVelocityConstraintsERK10b2TimeStep.start)

public final class FSM__ZN13b2PulleyJoint24SolveVelocityConstraintsERK10b2TimeStep extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number
		var f8:Number, f9:Number, f10:Number, f11:Number, f12:Number, f13:Number, f14:Number, f15:Number
		var f16:Number, f17:Number

		__asm(label, lbl("__ZN13b2PulleyJoint24SolveVelocityConstraintsERK10b2TimeStep_entry"))
	__asm(lbl("__ZN13b2PulleyJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB251_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+48)), op(0x37))))
		i2 =  ((__xasm<int>(push((i0+52)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i0+116)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i1+40)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i0+112)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i1+36)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i0+124)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i2+40)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i0+120)), op(0x38))))
		f7 =  ((__xasm<Number>(push((i2+36)), op(0x38))))
		f2 =  (f2 - f3)
		f0 =  (f0 - f1)
		f1 =  (f6 - f7)
		f3 =  (f4 - f5)
		f2 =  f2/*fround*/
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		f4 =  ((__xasm<Number>(push((i1+24)), op(0x38))))
		f2 =  f2/*fextend*/
		f5 =  ((__xasm<Number>(push((i1+20)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i1+32)), op(0x38))))
		f0 =  f0/*fextend*/
		f7 =  ((__xasm<Number>(push((i1+28)), op(0x38))))
		f8 =  ((__xasm<Number>(push((i2+24)), op(0x38))))
		f1 =  f1/*fextend*/
		f9 =  ((__xasm<Number>(push((i2+20)), op(0x38))))
		f10 =  ((__xasm<Number>(push((i2+32)), op(0x38))))
		f3 =  f3/*fextend*/
		f11 =  ((__xasm<Number>(push((i2+28)), op(0x38))))
		f4 =  (f4 * f2)
		f2 =  (f5 * f2)
		f5 =  (f6 * f0)
		f0 =  (f7 * f0)
		f6 =  (f8 * f1)
		f1 =  (f9 * f1)
		f7 =  (f10 * f3)
		f3 =  (f11 * f3)
		f4 =  f4/*fround*/
		f2 =  f2/*fround*/
		f5 =  f5/*fround*/
		f0 =  f0/*fround*/
		f6 =  f6/*fround*/
		f1 =  f1/*fround*/
		f7 =  f7/*fround*/
		f3 =  f3/*fround*/
		f5 =  f5/*fextend*/
		f4 =  f4/*fextend*/
		f0 =  f0/*fextend*/
		f2 =  f2/*fextend*/
		f7 =  f7/*fextend*/
		f6 =  f6/*fextend*/
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		i3 =  ((__xasm<int>(push((i0+184)), op(0x37))))
		f4 =  (f4 + f5)
		f0 =  (f2 + f0)
		f2 =  (f6 + f7)
		f1 =  (f1 + f3)
		f3 =  f4/*fround*/
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		__asm(push(i3!=2), iftrue, target("__ZN13b2PulleyJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB251_2_F"))
	__asm(lbl("__ZN13b2PulleyJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB251_1_F"))
		f4 =  (0)
		f5 =  ((__xasm<Number>(push((i2+80)), op(0x38))))
		f6 =  f1/*fextend*/
		f7 =  f2/*fextend*/
		f8 =  (f6 * f5)
		f5 =  (f7 * f5)
		f8 =  f8/*fround*/
		f5 =  f5/*fround*/
		f9 =  ((__xasm<Number>(push((i1+80)), op(0x38))))
		f10 =  f0/*fextend*/
		f11 =  f3/*fextend*/
		f12 =  ((__xasm<Number>(push((i2+76)), op(0x38))))
		f8 =  f8/*fextend*/
		f13 =  ((__xasm<Number>(push((i2+72)), op(0x38))))
		f5 =  f5/*fextend*/
		f14 =  (f10 * f9)
		f9 =  (f11 * f9)
		f8 =  (f12 + f8)
		f5 =  (f13 - f5)
		f12 =  f14/*fround*/
		f9 =  f9/*fround*/
		f8 =  f8/*fround*/
		f5 =  f5/*fround*/
		f13 =  ((__xasm<Number>(push((i1+76)), op(0x38))))
		f12 =  f12/*fextend*/
		f14 =  ((__xasm<Number>(push((i1+72)), op(0x38))))
		f9 =  f9/*fextend*/
		f15 =  ((__xasm<Number>(push((i0+136)), op(0x38))))
		f5 =  f5/*fextend*/
		f16 =  ((__xasm<Number>(push((i0+140)), op(0x38))))
		f8 =  f8/*fextend*/
		f12 =  (f13 + f12)
		f9 =  (f14 - f9)
		f8 =  (f16 * f8)
		f5 =  (f15 * f5)
		f12 =  f12/*fround*/
		f9 =  f9/*fround*/
		f8 =  f8/*fround*/
		f5 =  f5/*fround*/
		f13 =  ((__xasm<Number>(push((i0+128)), op(0x38))))
		f9 =  f9/*fextend*/
		f14 =  ((__xasm<Number>(push((i0+132)), op(0x38))))
		f12 =  f12/*fextend*/
		f8 =  f8/*fextend*/
		f5 =  f5/*fextend*/
		f12 =  (f14 * f12)
		f9 =  (f13 * f9)
		f5 =  (f5 + f8)
		f8 =  f12/*fround*/
		f9 =  f9/*fround*/
		f5 =  f5/*fround*/
		f12 =  ((__xasm<Number>(push((i0+148)), op(0x38))))
		f5 =  f5/*fextend*/
		f8 =  f8/*fextend*/
		f9 =  f9/*fextend*/
		f8 =  (f9 + f8)
		f5 =  (f12 * f5)
		f8 =  f8/*fround*/
		f5 =  f5/*fround*/
		f8 =  f8/*fextend*/
		f5 =  f5/*fextend*/
		f5 =  (f5 + f8)
		f5 =  f5/*fround*/
		f8 =  ((__xasm<Number>(push((i0+160)), op(0x38))))
		f5 =  f5/*fextend*/
		f5 =  (f8 * f5)
		f5 =  f5/*fround*/
		f8 =  ((__xasm<Number>(push((i0+172)), op(0x38))))
		f5 =  f5/*fextend*/
		f5 =  (f8 + f5)
		f5 =  f5/*fround*/
		f4 =  f4/*fround*/
		f4 =  f4/*fextend*/
		f5 =  f5/*fextend*/
		f4 =  ((f5<f4) ? f4 : f5)
		f4 =  f4/*fround*/
		f5 =  f4/*fextend*/
		f9 =  (f8 - f5)
		f9 =  f9/*fround*/
		f9 =  f9/*fextend*/
		f13 =  (f13 * f9)
		__asm(push(f4), push((i0+172)), op(0x3d))
		f4 =  f13/*fround*/
		f4 =  f4/*fextend*/
		f13 =  ((__xasm<Number>(push((i1+128)), op(0x38))))
		f17 =  (f4 * f13)
		f17 =  f17/*fround*/
		f9 =  (f14 * f9)
		f14 =  ((__xasm<Number>(push((i1+72)), op(0x38))))
		f17 =  f17/*fextend*/
		f9 =  f9/*fround*/
		f9 =  f9/*fextend*/
		f14 =  (f14 + f17)
		f13 =  (f9 * f13)
		f14 =  f14/*fround*/
		__asm(push(f14), push((i1+72)), op(0x3d))
		f13 =  f13/*fround*/
		f9 =  (f10 * f9)
		f4 =  (f11 * f4)
		f9 =  f9/*fround*/
		f4 =  f4/*fround*/
		f10 =  ((__xasm<Number>(push((i1+76)), op(0x38))))
		f11 =  f13/*fextend*/
		f10 =  (f10 + f11)
		f4 =  f4/*fextend*/
		f9 =  f9/*fextend*/
		f10 =  f10/*fround*/
		f4 =  (f9 - f4)
		__asm(push(f10), push((i1+76)), op(0x3d))
		f4 =  f4/*fround*/
		f5 =  (f5 - f8)
		f8 =  -f12
		f5 =  f5/*fround*/
		f8 =  f8/*fround*/
		f9 =  ((__xasm<Number>(push((i1+136)), op(0x38))))
		f4 =  f4/*fextend*/
		f4 =  (f9 * f4)
		f8 =  f8/*fextend*/
		f5 =  f5/*fextend*/
		f4 =  f4/*fround*/
		f5 =  (f5 * f8)
		f8 =  ((__xasm<Number>(push((i1+80)), op(0x38))))
		f4 =  f4/*fextend*/
		f5 =  f5/*fround*/
		f5 =  f5/*fextend*/
		f4 =  (f8 + f4)
		f8 =  (f15 * f5)
		f4 =  f4/*fround*/
		__asm(push(f4), push((i1+80)), op(0x3d))
		f4 =  f8/*fround*/
		f4 =  f4/*fextend*/
		f8 =  ((__xasm<Number>(push((i2+128)), op(0x38))))
		f9 =  (f4 * f8)
		f9 =  f9/*fround*/
		f5 =  (f16 * f5)
		f10 =  ((__xasm<Number>(push((i2+72)), op(0x38))))
		f9 =  f9/*fextend*/
		f5 =  f5/*fround*/
		f5 =  f5/*fextend*/
		f9 =  (f10 + f9)
		f8 =  (f5 * f8)
		f9 =  f9/*fround*/
		__asm(push(f9), push((i2+72)), op(0x3d))
		f8 =  f8/*fround*/
		f5 =  (f6 * f5)
		f4 =  (f7 * f4)
		f5 =  f5/*fround*/
		f4 =  f4/*fround*/
		f6 =  ((__xasm<Number>(push((i2+76)), op(0x38))))
		f7 =  f8/*fextend*/
		f6 =  (f6 + f7)
		f4 =  f4/*fextend*/
		f5 =  f5/*fextend*/
		f6 =  f6/*fround*/
		f4 =  (f5 - f4)
		__asm(push(f6), push((i2+76)), op(0x3d))
		f4 =  f4/*fround*/
		f5 =  ((__xasm<Number>(push((i2+136)), op(0x38))))
		f4 =  f4/*fextend*/
		f4 =  (f5 * f4)
		f4 =  f4/*fround*/
		f5 =  ((__xasm<Number>(push((i2+80)), op(0x38))))
		f4 =  f4/*fextend*/
		f4 =  (f5 + f4)
		f4 =  f4/*fround*/
		__asm(push(f4), push((i2+80)), op(0x3d))
	__asm(lbl("__ZN13b2PulleyJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB251_2_F"))
		i3 =  ((__xasm<int>(push((i0+188)), op(0x37))))
		__asm(push(i3!=2), iftrue, target("__ZN13b2PulleyJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB251_4_F"))
	__asm(lbl("__ZN13b2PulleyJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB251_3_F"))
		f4 =  (0)
		f5 =  ((__xasm<Number>(push((i1+80)), op(0x38))))
		f0 =  f0/*fextend*/
		f3 =  f3/*fextend*/
		f6 =  (f0 * f5)
		f5 =  (f3 * f5)
		f6 =  f6/*fround*/
		f5 =  f5/*fround*/
		f7 =  ((__xasm<Number>(push((i1+76)), op(0x38))))
		f6 =  f6/*fextend*/
		f8 =  ((__xasm<Number>(push((i1+72)), op(0x38))))
		f5 =  f5/*fextend*/
		f6 =  (f7 + f6)
		f5 =  (f8 - f5)
		f6 =  f6/*fround*/
		f5 =  f5/*fround*/
		f7 =  ((__xasm<Number>(push((i0+128)), op(0x38))))
		f5 =  f5/*fextend*/
		f8 =  ((__xasm<Number>(push((i0+132)), op(0x38))))
		f6 =  f6/*fextend*/
		f6 =  (f8 * f6)
		f5 =  (f7 * f5)
		f6 =  f6/*fround*/
		f5 =  f5/*fround*/
		f6 =  f6/*fextend*/
		f5 =  f5/*fextend*/
		f5 =  (f5 + f6)
		f5 =  f5/*fround*/
		f6 =  ((__xasm<Number>(push((i0+164)), op(0x38))))
		f5 =  f5/*fextend*/
		f5 =  (f6 * f5)
		f5 =  f5/*fround*/
		f6 =  ((__xasm<Number>(push((i0+176)), op(0x38))))
		f5 =  f5/*fextend*/
		f5 =  (f6 + f5)
		f5 =  f5/*fround*/
		f4 =  f4/*fround*/
		f4 =  f4/*fextend*/
		f5 =  f5/*fextend*/
		f4 =  ((f5<f4) ? f4 : f5)
		f4 =  f4/*fround*/
		f5 =  f4/*fextend*/
		f5 =  (f6 - f5)
		f5 =  f5/*fround*/
		f5 =  f5/*fextend*/
		f6 =  (f7 * f5)
		__asm(push(f4), push((i0+176)), op(0x3d))
		f4 =  f6/*fround*/
		f4 =  f4/*fextend*/
		f6 =  ((__xasm<Number>(push((i1+128)), op(0x38))))
		f7 =  (f4 * f6)
		f7 =  f7/*fround*/
		f5 =  (f8 * f5)
		f8 =  ((__xasm<Number>(push((i1+72)), op(0x38))))
		f7 =  f7/*fextend*/
		f5 =  f5/*fround*/
		f5 =  f5/*fextend*/
		f7 =  (f8 + f7)
		f6 =  (f5 * f6)
		f7 =  f7/*fround*/
		__asm(push(f7), push((i1+72)), op(0x3d))
		f6 =  f6/*fround*/
		f0 =  (f0 * f5)
		f3 =  (f3 * f4)
		f0 =  f0/*fround*/
		f3 =  f3/*fround*/
		f4 =  ((__xasm<Number>(push((i1+76)), op(0x38))))
		f5 =  f6/*fextend*/
		f4 =  (f4 + f5)
		f3 =  f3/*fextend*/
		f0 =  f0/*fextend*/
		f4 =  f4/*fround*/
		f0 =  (f0 - f3)
		__asm(push(f4), push((i1+76)), op(0x3d))
		f0 =  f0/*fround*/
		f3 =  ((__xasm<Number>(push((i1+136)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f3 * f0)
		f0 =  f0/*fround*/
		f3 =  ((__xasm<Number>(push((i1+80)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f3 + f0)
		f0 =  f0/*fround*/
		__asm(push(f0), push((i1+80)), op(0x3d))
	__asm(lbl("__ZN13b2PulleyJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB251_4_F"))
		i1 =  ((__xasm<int>(push((i0+192)), op(0x37))))
		__asm(push(i1!=2), iftrue, target("__ZN13b2PulleyJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB251_6_F"))
	__asm(lbl("__ZN13b2PulleyJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB251_5_F"))
		f0 =  (0)
		f3 =  ((__xasm<Number>(push((i2+80)), op(0x38))))
		f1 =  f1/*fextend*/
		f2 =  f2/*fextend*/
		f4 =  (f1 * f3)
		f3 =  (f2 * f3)
		f4 =  f4/*fround*/
		f3 =  f3/*fround*/
		f5 =  ((__xasm<Number>(push((i2+76)), op(0x38))))
		f4 =  f4/*fextend*/
		f6 =  ((__xasm<Number>(push((i2+72)), op(0x38))))
		f3 =  f3/*fextend*/
		f4 =  (f5 + f4)
		f3 =  (f6 - f3)
		f4 =  f4/*fround*/
		f3 =  f3/*fround*/
		f5 =  ((__xasm<Number>(push((i0+136)), op(0x38))))
		f3 =  f3/*fextend*/
		f6 =  ((__xasm<Number>(push((i0+140)), op(0x38))))
		f4 =  f4/*fextend*/
		f4 =  (f6 * f4)
		f3 =  (f5 * f3)
		f4 =  f4/*fround*/
		f3 =  f3/*fround*/
		f4 =  f4/*fextend*/
		f3 =  f3/*fextend*/
		f3 =  (f3 + f4)
		f3 =  f3/*fround*/
		f4 =  ((__xasm<Number>(push((i0+168)), op(0x38))))
		f3 =  f3/*fextend*/
		f3 =  (f4 * f3)
		f3 =  f3/*fround*/
		f4 =  ((__xasm<Number>(push((i0+180)), op(0x38))))
		f3 =  f3/*fextend*/
		f3 =  (f4 + f3)
		f3 =  f3/*fround*/
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f3 =  f3/*fextend*/
		f0 =  ((f3<f0) ? f0 : f3)
		f0 =  f0/*fround*/
		f3 =  f0/*fextend*/
		f3 =  (f4 - f3)
		f3 =  f3/*fround*/
		f3 =  f3/*fextend*/
		f4 =  (f5 * f3)
		__asm(push(f0), push((i0+180)), op(0x3d))
		f0 =  f4/*fround*/
		f0 =  f0/*fextend*/
		f4 =  ((__xasm<Number>(push((i2+128)), op(0x38))))
		f5 =  (f0 * f4)
		f5 =  f5/*fround*/
		f3 =  (f6 * f3)
		f6 =  ((__xasm<Number>(push((i2+72)), op(0x38))))
		f5 =  f5/*fextend*/
		f3 =  f3/*fround*/
		f3 =  f3/*fextend*/
		f5 =  (f6 + f5)
		f4 =  (f3 * f4)
		f5 =  f5/*fround*/
		__asm(push(f5), push((i2+72)), op(0x3d))
		f4 =  f4/*fround*/
		f1 =  (f1 * f3)
		f0 =  (f2 * f0)
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		f2 =  ((__xasm<Number>(push((i2+76)), op(0x38))))
		f3 =  f4/*fextend*/
		f2 =  (f2 + f3)
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		f2 =  f2/*fround*/
		f0 =  (f1 - f0)
		__asm(push(f2), push((i2+76)), op(0x3d))
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push((i2+136)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f1 * f0)
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push((i2+80)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f1 + f0)
		f0 =  f0/*fround*/
		__asm(push(f0), push((i2+80)), op(0x3d))
	__asm(lbl("__ZN13b2PulleyJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB251_6_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZN13b2PulleyJoint24SolvePositionConstraintsEf:int = regFunc(FSM__ZN13b2PulleyJoint24SolvePositionConstraintsEf.start)

public final class FSM__ZN13b2PulleyJoint24SolvePositionConstraintsEf extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
		var i8:int, i9:int, i10:int, i11:int, i12:int, i13:int, i14:int, i15:int
		var i16:int, i17:int, i18:int, i19:int, i20:int, i21:int, i22:int, i23:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number
		var f8:Number, f9:Number, f10:Number, f11:Number, f12:Number, f13:Number, f14:Number, f15:Number
		var f16:Number, f17:Number, f18:Number, f19:Number

		__asm(label, lbl("__ZN13b2PulleyJoint24SolvePositionConstraintsEf_entry"))
	__asm(lbl("__ZN13b2PulleyJoint24SolvePositionConstraintsEf__XprivateX__BB252_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+48)), op(0x37))))
		i2 =  ((__xasm<int>(push((i0+52)), op(0x37))))
		f1 =  ((__xasm<Number>(push((i0+96)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i0+100)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i0+104)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i0+108)), op(0x38))))
		i3 =  ((__xasm<int>(push((i0+184)), op(0x37))))
		__asm(push(i3==2), iftrue, target("__ZN13b2PulleyJoint24SolvePositionConstraintsEf__XprivateX__BB252_2_F"))
	__asm(lbl("__ZN13b2PulleyJoint24SolvePositionConstraintsEf__XprivateX__BB252_1_F"))
		f0 =  (0)
		f0 =  f0/*fround*/
		__asm(jump, target("__ZN13b2PulleyJoint24SolvePositionConstraintsEf__XprivateX__BB252_12_F"))
	__asm(lbl("__ZN13b2PulleyJoint24SolvePositionConstraintsEf__XprivateX__BB252_2_F"))
		f0 =  ((__xasm<Number>(push((i0+116)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i1+40)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i0+112)), op(0x38))))
		f7 =  ((__xasm<Number>(push((i1+36)), op(0x38))))
		f8 =  ((__xasm<Number>(push((i0+124)), op(0x38))))
		f9 =  ((__xasm<Number>(push((i2+40)), op(0x38))))
		f10 =  ((__xasm<Number>(push((i0+120)), op(0x38))))
		f11 =  ((__xasm<Number>(push((i2+36)), op(0x38))))
		f6 =  (f6 - f7)
		f7 =  (f10 - f11)
		f8 =  (f8 - f9)
		f0 =  (f0 - f5)
		f5 =  f6/*fround*/
		f6 =  f7/*fround*/
		f7 =  f8/*fround*/
		f0 =  f0/*fround*/
		f8 =  ((__xasm<Number>(push((i1+24)), op(0x38))))
		f5 =  f5/*fextend*/
		f9 =  ((__xasm<Number>(push((i1+20)), op(0x38))))
		f10 =  ((__xasm<Number>(push((i1+32)), op(0x38))))
		f0 =  f0/*fextend*/
		f11 =  ((__xasm<Number>(push((i1+28)), op(0x38))))
		f12 =  ((__xasm<Number>(push((i2+24)), op(0x38))))
		f6 =  f6/*fextend*/
		f13 =  ((__xasm<Number>(push((i2+20)), op(0x38))))
		f14 =  ((__xasm<Number>(push((i2+32)), op(0x38))))
		f7 =  f7/*fextend*/
		f15 =  ((__xasm<Number>(push((i2+28)), op(0x38))))
		f8 =  (f8 * f5)
		f5 =  (f9 * f5)
		f9 =  (f12 * f6)
		f6 =  (f13 * f6)
		f12 =  (f14 * f7)
		f7 =  (f15 * f7)
		f10 =  (f10 * f0)
		f0 =  (f11 * f0)
		f8 =  f8/*fround*/
		f5 =  f5/*fround*/
		f9 =  f9/*fround*/
		f6 =  f6/*fround*/
		f11 =  f12/*fround*/
		f7 =  f7/*fround*/
		f10 =  f10/*fround*/
		f0 =  f0/*fround*/
		f10 =  f10/*fextend*/
		f8 =  f8/*fextend*/
		f0 =  f0/*fextend*/
		f5 =  f5/*fextend*/
		f11 =  f11/*fextend*/
		f9 =  f9/*fextend*/
		f7 =  f7/*fextend*/
		f6 =  f6/*fextend*/
		f8 =  (f8 + f10)
		f0 =  (f5 + f0)
		f5 =  (f9 + f11)
		f6 =  (f6 + f7)
		f7 =  f8/*fround*/
		f0 =  f0/*fround*/
		f5 =  f5/*fround*/
		f6 =  f6/*fround*/
		f8 =  ((__xasm<Number>(push((i1+56)), op(0x38))))
		f9 =  f7/*fextend*/
		f10 =  ((__xasm<Number>(push((i1+52)), op(0x38))))
		f11 =  f0/*fextend*/
		f12 =  ((__xasm<Number>(push((i2+56)), op(0x38))))
		f13 =  ((__xasm<Number>(push((i2+52)), op(0x38))))
		f14 =  f5/*fextend*/
		f15 =  f6/*fextend*/
		f8 =  (f8 + f9)
		f9 =  (f10 + f11)
		f10 =  (f12 + f14)
		f11 =  (f13 + f15)
		f8 =  f8/*fround*/
		f9 =  f9/*fround*/
		f10 =  f10/*fround*/
		f11 =  f11/*fround*/
		f12 =  f2/*fextend*/
		f8 =  f8/*fextend*/
		f13 =  f1/*fextend*/
		f9 =  f9/*fextend*/
		f14 =  f4/*fextend*/
		f10 =  f10/*fextend*/
		f15 =  f3/*fextend*/
		f11 =  f11/*fextend*/
		f8 =  (f8 - f12)
		f9 =  (f9 - f13)
		f10 =  (f10 - f14)
		f11 =  (f11 - f15)
		f8 =  f8/*fround*/
		f9 =  f9/*fround*/
		f10 =  f10/*fround*/
		f11 =  f11/*fround*/
		f12 =  f8/*fextend*/
		f13 =  f9/*fextend*/
		f14 =  f10/*fextend*/
		f15 =  f11/*fextend*/
		f12 =  (f12 * f12)
		f13 =  (f13 * f13)
		f14 =  (f14 * f14)
		f15 =  (f15 * f15)
		f12 =  f12/*fround*/
		f13 =  f13/*fround*/
		f14 =  f14/*fround*/
		f15 =  f15/*fround*/
		f12 =  f12/*fextend*/
		f13 =  f13/*fextend*/
		f14 =  f14/*fextend*/
		f15 =  f15/*fextend*/
		__asm(push(f9), push((i0+128)), op(0x3d))
		f12 =  (f13 + f12)
		f13 =  (f15 + f14)
		__asm(push(f8), push((i0+132)), op(0x3d))
		f12 =  f12/*fround*/
		f13 =  f13/*fround*/
		__asm(push(f11), push((i0+136)), op(0x3d))
		f12 =  f12/*fextend*/
		f13 =  f13/*fextend*/
		__asm(push(f10), push((i0+140)), op(0x3d))
		f12 =  Math.sqrt(f12)
		f13 =  Math.sqrt(f13)
		f14 =  ((__xasm<Number>(push(_b2_linearSlop), op(0x38))))
		f12 =  f12/*fround*/
		f13 =  f13/*fround*/
		i3 =  (i1 + 40)
		i4 =  (i1 + 20)
		i5 =  (i1 + 24)
		i6 =  (i1 + 28)
		i7 =  (i1 + 32)
		i8 =  (i2 + 40)
		i9 =  (i2 + 20)
		i10 =  (i2 + 24)
		i11 =  (i2 + 28)
		i12 =  (i2 + 32)
		i13 =  (i1 + 52)
		i14 =  (i1 + 56)
		i15 =  (i2 + 52)
		i16 =  (i2 + 56)
		i17 =  (i0 + 132)
		i18 =  (i0 + 140)
		i19 =  (i0 + 136)
		i20 =  (i0 + 128)
		i21 =  (i2 + 36)
		i22 =  (i1 + 36)
		f15 =  f14/*fextend*/
		f16 =  f12/*fextend*/
		__asm(push(f16<=f15), iftrue, target("__ZN13b2PulleyJoint24SolvePositionConstraintsEf__XprivateX__BB252_7_F"))
	__asm(lbl("__ZN13b2PulleyJoint24SolvePositionConstraintsEf__XprivateX__BB252_3_F"))
		f15 =  (1)
		f15 =  f15/*fround*/
		f16 =  f12/*fextend*/
		f15 =  f15/*fextend*/
		f15 =  (f15 / f16)
		f15 =  f15/*fround*/
		f9 =  f9/*fextend*/
		f15 =  f15/*fextend*/
		f9 =  (f9 * f15)
		f8 =  f8/*fextend*/
		f8 =  (f8 * f15)
		f9 =  f9/*fround*/
		__asm(push(f9), push(i20), op(0x3d))
		f8 =  f8/*fround*/
		__asm(push(f8), push(i17), op(0x3d))
		f15 =  f14/*fextend*/
		f16 =  f13/*fextend*/
		__asm(push(f16>f15), iftrue, target("__ZN13b2PulleyJoint24SolvePositionConstraintsEf__XprivateX__BB252_6_F"))
	__asm(lbl("__ZN13b2PulleyJoint24SolvePositionConstraintsEf__XprivateX__BB252_4_F"))
		__asm(jump, target("__ZN13b2PulleyJoint24SolvePositionConstraintsEf__XprivateX__BB252_5_F"))
	__asm(jump, target("__ZN13b2PulleyJoint24SolvePositionConstraintsEf__XprivateX__BB252_5_F"), lbl("__ZN13b2PulleyJoint24SolvePositionConstraintsEf__XprivateX__BB252_5_B"), label, lbl("__ZN13b2PulleyJoint24SolvePositionConstraintsEf__XprivateX__BB252_5_F")); 
		f10 =  (0)
		i17 =  (0)
		__asm(push(i17), push(i19), op(0x3c))
		f10 =  f10/*fround*/
		f15 = f10
		f11 = f10
		__asm(jump, target("__ZN13b2PulleyJoint24SolvePositionConstraintsEf__XprivateX__BB252_11_F"))
	__asm(lbl("__ZN13b2PulleyJoint24SolvePositionConstraintsEf__XprivateX__BB252_6_F"))
		__asm(jump, target("__ZN13b2PulleyJoint24SolvePositionConstraintsEf__XprivateX__BB252_10_F"))
	__asm(lbl("__ZN13b2PulleyJoint24SolvePositionConstraintsEf__XprivateX__BB252_7_F"))
		i23 =  (0)
		__asm(push(i23), push(i20), op(0x3c))
		__asm(push(i23), push(i17), op(0x3c))
		f8 =  f14/*fextend*/
		f9 =  f13/*fextend*/
		__asm(push(f9>f8), iftrue, target("__ZN13b2PulleyJoint24SolvePositionConstraintsEf__XprivateX__BB252_9_F"))
	__asm(lbl("__ZN13b2PulleyJoint24SolvePositionConstraintsEf__XprivateX__BB252_8_F"))
		f8 =  (0)
		f8 =  f8/*fround*/
		f9 = f8
		__asm(jump, target("__ZN13b2PulleyJoint24SolvePositionConstraintsEf__XprivateX__BB252_5_B"))
	__asm(lbl("__ZN13b2PulleyJoint24SolvePositionConstraintsEf__XprivateX__BB252_9_F"))
		f8 =  (0)
		f8 =  f8/*fround*/
		f9 = f8
	__asm(lbl("__ZN13b2PulleyJoint24SolvePositionConstraintsEf__XprivateX__BB252_10_F"))
		f15 =  (1)
		f15 =  f15/*fround*/
		f16 =  f13/*fextend*/
		f15 =  f15/*fextend*/
		f15 =  (f15 / f16)
		f15 =  f15/*fround*/
		f11 =  f11/*fextend*/
		f15 =  f15/*fextend*/
		f11 =  (f11 * f15)
		f10 =  f10/*fextend*/
		f10 =  (f10 * f15)
		f11 =  f11/*fround*/
		__asm(push(f11), push(i19), op(0x3d))
		f10 =  f10/*fround*/
		f15 = f10
		__asm(jump, target("__ZN13b2PulleyJoint24SolvePositionConstraintsEf__XprivateX__BB252_11_F"))
	__asm(lbl("__ZN13b2PulleyJoint24SolvePositionConstraintsEf__XprivateX__BB252_11_F"))
		f16 =  (0)
		__asm(push(f15), push(i18), op(0x3d))
		f15 =  ((__xasm<Number>(push((i0+148)), op(0x38))))
		f13 =  f13/*fextend*/
		f17 =  ((__xasm<Number>(push((i0+144)), op(0x38))))
		f12 =  f12/*fextend*/
		f12 =  (f17 - f12)
		f13 =  (f15 * f13)
		f12 =  f12/*fround*/
		f13 =  f13/*fround*/
		f12 =  f12/*fextend*/
		f13 =  f13/*fextend*/
		f17 =  (f12 - f13)
		f17 =  f17/*fround*/
		f14 =  f14/*fextend*/
		f17 =  f17/*fextend*/
		f14 =  (f17 + f14)
		f14 =  f14/*fround*/
		f16 =  f16/*fround*/
		f17 =  ((__xasm<Number>(push(_b2_maxLinearCorrection), op(0x38))))
		f14 =  f14/*fextend*/
		f16 =  f16/*fextend*/
		f14 =  ((f14<f16) ? f14 : f16)
		f17 =  -f17
		f14 =  f14/*fround*/
		f17 =  f17/*fround*/
		f18 =  ((__xasm<Number>(push((i0+160)), op(0x38))))
		f17 =  f17/*fextend*/
		f14 =  f14/*fextend*/
		f14 =  ((f14<f17) ? f17 : f14)
		f17 =  -f18
		f14 =  f14/*fround*/
		f17 =  f17/*fround*/
		f17 =  f17/*fextend*/
		f14 =  f14/*fextend*/
		f14 =  (f14 * f17)
		f14 =  f14/*fround*/
		f14 =  f14/*fextend*/
		f17 =  -f14
		f17 =  f17/*fround*/
		f17 =  f17/*fextend*/
		f9 =  f9/*fextend*/
		f9 =  (f9 * f17)
		f9 =  f9/*fround*/
		f18 =  ((__xasm<Number>(push((i1+128)), op(0x38))))
		f9 =  f9/*fextend*/
		f8 =  f8/*fextend*/
		f19 =  (f9 * f18)
		f8 =  (f8 * f17)
		f17 =  f19/*fround*/
		f19 =  ((__xasm<Number>(push(i13), op(0x38))))
		f8 =  f8/*fround*/
		f17 =  f17/*fextend*/
		f8 =  f8/*fextend*/
		f17 =  (f19 + f17)
		f18 =  (f8 * f18)
		f0 =  f0/*fextend*/
		f7 =  f7/*fextend*/
		f17 =  f17/*fround*/
		f18 =  f18/*fround*/
		f0 =  (f0 * f8)
		f7 =  (f7 * f9)
		__asm(push(f17), push(i13), op(0x3d))
		f0 =  f0/*fround*/
		f7 =  f7/*fround*/
		f8 =  ((__xasm<Number>(push(i14), op(0x38))))
		f9 =  f18/*fextend*/
		f8 =  (f8 + f9)
		f7 =  f7/*fextend*/
		f0 =  f0/*fextend*/
		f8 =  f8/*fround*/
		f0 =  (f0 - f7)
		__asm(push(f8), push(i14), op(0x3d))
		f0 =  f0/*fround*/
		f7 =  -f15
		f7 =  f7/*fround*/
		f8 =  ((__xasm<Number>(push((i1+136)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f8 * f0)
		f7 =  f7/*fextend*/
		f0 =  f0/*fround*/
		f7 =  (f14 * f7)
		f8 =  ((__xasm<Number>(push((i1+64)), op(0x38))))
		f0 =  f0/*fextend*/
		f7 =  f7/*fround*/
		f0 =  (f8 + f0)
		f7 =  f7/*fextend*/
		f8 =  f11/*fextend*/
		f8 =  (f8 * f7)
		f0 =  f0/*fround*/
		f8 =  f8/*fround*/
		__asm(push(f0), push((i1+64)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i2+128)), op(0x38))))
		f8 =  f8/*fextend*/
		f9 =  (f8 * f0)
		f10 =  f10/*fextend*/
		f9 =  f9/*fround*/
		f7 =  (f10 * f7)
		f10 =  ((__xasm<Number>(push(i15), op(0x38))))
		f9 =  f9/*fextend*/
		f7 =  f7/*fround*/
		f9 =  (f10 + f9)
		f7 =  f7/*fextend*/
		f0 =  (f7 * f0)
		f6 =  f6/*fextend*/
		f5 =  f5/*fextend*/
		f9 =  f9/*fround*/
		f0 =  f0/*fround*/
		f6 =  (f6 * f7)
		f5 =  (f5 * f8)
		__asm(push(f9), push(i15), op(0x3d))
		f6 =  f6/*fround*/
		f5 =  f5/*fround*/
		f7 =  ((__xasm<Number>(push(i16), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f7 + f0)
		f5 =  f5/*fextend*/
		f6 =  f6/*fextend*/
		f0 =  f0/*fround*/
		f5 =  (f6 - f5)
		__asm(push(f0), push(i16), op(0x3d))
		f0 =  f5/*fround*/
		f5 =  ((__xasm<Number>(push((i2+136)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f5 * f0)
		f0 =  f0/*fround*/
		f5 =  ((__xasm<Number>(push((i2+64)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f5 + f0)
		f0 =  f0/*fround*/
		__asm(push(f0), push((i2+64)), op(0x3d))
		f5 =  ((__xasm<Number>(push((i1+64)), op(0x38))))
		f0 = f5
		//InlineAsmStart
	f0 =  Math.cos(f0);

	//InlineAsmEnd
		f6 = f0
		f0 = f5
		//InlineAsmStart
	f0 =  Math.sin(f0);

	//InlineAsmEnd
		f5 =  f0/*fextend*/
		f7 =  -f5
		__asm(push(f6), push(i4), op(0x3d))
		f7 =  f7/*fround*/
		__asm(push(f7), push(i6), op(0x3d))
		__asm(push(f0), push(i5), op(0x3d))
		__asm(push(f6), push(i7), op(0x3d))
		f0 =  ((__xasm<Number>(push(i22), op(0x38))))
		f7 =  ((__xasm<Number>(push(i3), op(0x38))))
		f6 =  f6/*fextend*/
		f8 =  (f6 * f0)
		f9 =  (f7 * f5)
		f0 =  (f5 * f0)
		f5 =  f8/*fround*/
		f6 =  (f6 * f7)
		f7 =  f9/*fround*/
		f0 =  f0/*fround*/
		f6 =  f6/*fround*/
		f7 =  f7/*fextend*/
		f5 =  f5/*fextend*/
		f5 =  (f5 - f7)
		f6 =  f6/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 + f6)
		f5 =  f5/*fround*/
		f0 =  f0/*fround*/
		f6 =  ((__xasm<Number>(push(i13), op(0x38))))
		f5 =  f5/*fextend*/
		f7 =  ((__xasm<Number>(push(i14), op(0x38))))
		f0 =  f0/*fextend*/
		f5 =  (f6 - f5)
		f0 =  (f7 - f0)
		f5 =  f5/*fround*/
		__asm(push(f5), push((i1+12)), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push((i1+16)), op(0x3d))
		f5 =  ((__xasm<Number>(push((i2+64)), op(0x38))))
		f0 = f5
		//InlineAsmStart
	f0 =  Math.cos(f0);

	//InlineAsmEnd
		f6 = f0
		f0 = f5
		//InlineAsmStart
	f0 =  Math.sin(f0);

	//InlineAsmEnd
		f5 =  f0/*fextend*/
		f7 =  -f5
		__asm(push(f6), push(i9), op(0x3d))
		f7 =  f7/*fround*/
		__asm(push(f7), push(i11), op(0x3d))
		__asm(push(f0), push(i10), op(0x3d))
		__asm(push(f6), push(i12), op(0x3d))
		f0 =  ((__xasm<Number>(push(i21), op(0x38))))
		f7 =  ((__xasm<Number>(push(i8), op(0x38))))
		f6 =  f6/*fextend*/
		f8 =  (f6 * f0)
		f9 =  (f7 * f5)
		f0 =  (f5 * f0)
		f5 =  f8/*fround*/
		f6 =  (f6 * f7)
		f7 =  f9/*fround*/
		f0 =  f0/*fround*/
		f6 =  f6/*fround*/
		f7 =  f7/*fextend*/
		f5 =  f5/*fextend*/
		f5 =  (f5 - f7)
		f6 =  f6/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 + f6)
		f5 =  f5/*fround*/
		f0 =  f0/*fround*/
		f6 =  (f13 - f12)
		f7 =  ((__xasm<Number>(push(i15), op(0x38))))
		f5 =  f5/*fextend*/
		f8 =  ((__xasm<Number>(push(i16), op(0x38))))
		f0 =  f0/*fextend*/
		f5 =  (f7 - f5)
		f6 =  f6/*fround*/
		f0 =  (f8 - f0)
		f6 =  f6/*fextend*/
		f5 =  f5/*fround*/
		f6 =  ((f6<f16) ? f16 : f6)
		__asm(push(f5), push((i2+12)), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push((i2+16)), op(0x3d))
		f0 =  f6/*fround*/
	__asm(lbl("__ZN13b2PulleyJoint24SolvePositionConstraintsEf__XprivateX__BB252_12_F"))
		f5 = f0
		i3 =  ((__xasm<int>(push((i0+188)), op(0x37))))
		__asm(push(i3==2), iftrue, target("__ZN13b2PulleyJoint24SolvePositionConstraintsEf__XprivateX__BB252_14_F"))
	__asm(lbl("__ZN13b2PulleyJoint24SolvePositionConstraintsEf__XprivateX__BB252_13_F"))
		f1 = f5
		__asm(jump, target("__ZN13b2PulleyJoint24SolvePositionConstraintsEf__XprivateX__BB252_18_F"))
	__asm(lbl("__ZN13b2PulleyJoint24SolvePositionConstraintsEf__XprivateX__BB252_14_F"))
		f0 =  ((__xasm<Number>(push((i0+116)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i1+40)), op(0x38))))
		f7 =  ((__xasm<Number>(push((i0+112)), op(0x38))))
		f8 =  ((__xasm<Number>(push((i1+36)), op(0x38))))
		f7 =  (f7 - f8)
		f0 =  (f0 - f6)
		f6 =  f7/*fround*/
		f0 =  f0/*fround*/
		f7 =  ((__xasm<Number>(push((i1+24)), op(0x38))))
		f6 =  f6/*fextend*/
		f8 =  ((__xasm<Number>(push((i1+20)), op(0x38))))
		f9 =  ((__xasm<Number>(push((i1+32)), op(0x38))))
		f0 =  f0/*fextend*/
		f10 =  ((__xasm<Number>(push((i1+28)), op(0x38))))
		f7 =  (f7 * f6)
		f6 =  (f8 * f6)
		f8 =  (f9 * f0)
		f0 =  (f10 * f0)
		f7 =  f7/*fround*/
		f6 =  f6/*fround*/
		f8 =  f8/*fround*/
		f0 =  f0/*fround*/
		f8 =  f8/*fextend*/
		f7 =  f7/*fextend*/
		f0 =  f0/*fextend*/
		f6 =  f6/*fextend*/
		f7 =  (f7 + f8)
		f0 =  (f6 + f0)
		f6 =  f7/*fround*/
		f0 =  f0/*fround*/
		f7 =  ((__xasm<Number>(push((i1+56)), op(0x38))))
		f8 =  ((__xasm<Number>(push((i1+52)), op(0x38))))
		f9 =  f6/*fextend*/
		f10 =  f0/*fextend*/
		f7 =  (f7 + f9)
		f8 =  (f8 + f10)
		f7 =  f7/*fround*/
		f8 =  f8/*fround*/
		f2 =  f2/*fextend*/
		f7 =  f7/*fextend*/
		f1 =  f1/*fextend*/
		f8 =  f8/*fextend*/
		f2 =  (f7 - f2)
		f1 =  (f8 - f1)
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		f7 =  f2/*fextend*/
		f8 =  f1/*fextend*/
		f7 =  (f7 * f7)
		f8 =  (f8 * f8)
		f7 =  f7/*fround*/
		f8 =  f8/*fround*/
		f7 =  f7/*fextend*/
		f8 =  f8/*fextend*/
		f7 =  (f8 + f7)
		f7 =  f7/*fround*/
		__asm(push(f1), push((i0+128)), op(0x3d))
		f7 =  f7/*fextend*/
		__asm(push(f2), push((i0+132)), op(0x3d))
		f7 =  Math.sqrt(f7)
		f8 =  ((__xasm<Number>(push(_b2_linearSlop), op(0x38))))
		f7 =  f7/*fround*/
		i3 =  (i1 + 40)
		i4 =  (i1 + 20)
		i5 =  (i1 + 24)
		i6 =  (i1 + 28)
		i7 =  (i1 + 32)
		i8 =  (i1 + 52)
		i9 =  (i1 + 56)
		i10 =  (i0 + 132)
		i11 =  (i0 + 128)
		i12 =  (i1 + 36)
		f9 =  f8/*fextend*/
		f10 =  f7/*fextend*/
		__asm(push(f10<=f9), iftrue, target("__ZN13b2PulleyJoint24SolvePositionConstraintsEf__XprivateX__BB252_16_F"))
	__asm(lbl("__ZN13b2PulleyJoint24SolvePositionConstraintsEf__XprivateX__BB252_15_F"))
		f9 =  (1)
		f9 =  f9/*fround*/
		f10 =  f7/*fextend*/
		f9 =  f9/*fextend*/
		f9 =  (f9 / f10)
		f9 =  f9/*fround*/
		f1 =  f1/*fextend*/
		f9 =  f9/*fextend*/
		f1 =  (f1 * f9)
		f2 =  f2/*fextend*/
		f2 =  (f2 * f9)
		f1 =  f1/*fround*/
		__asm(push(f1), push(i11), op(0x3d))
		f2 =  f2/*fround*/
		f9 = f2
		__asm(jump, target("__ZN13b2PulleyJoint24SolvePositionConstraintsEf__XprivateX__BB252_17_F"))
	__asm(lbl("__ZN13b2PulleyJoint24SolvePositionConstraintsEf__XprivateX__BB252_16_F"))
		f1 =  (0)
		i13 =  (0)
		__asm(push(i13), push(i11), op(0x3c))
		f2 =  f1/*fround*/
		f9 = f2
		f1 = f2
	__asm(lbl("__ZN13b2PulleyJoint24SolvePositionConstraintsEf__XprivateX__BB252_17_F"))
		f10 =  (0)
		__asm(push(f9), push(i10), op(0x3d))
		f9 =  ((__xasm<Number>(push((i0+152)), op(0x38))))
		f7 =  f7/*fextend*/
		f11 =  (f9 - f7)
		f11 =  f11/*fround*/
		f8 =  f8/*fextend*/
		f11 =  f11/*fextend*/
		f8 =  (f11 + f8)
		f8 =  f8/*fround*/
		f10 =  f10/*fround*/
		f11 =  ((__xasm<Number>(push(_b2_maxLinearCorrection), op(0x38))))
		f10 =  f10/*fextend*/
		f8 =  f8/*fextend*/
		f8 =  ((f8<f10) ? f8 : f10)
		f10 =  -f11
		f8 =  f8/*fround*/
		f10 =  f10/*fround*/
		f10 =  f10/*fextend*/
		f8 =  f8/*fextend*/
		f8 =  ((f8<f10) ? f10 : f8)
		f8 =  f8/*fround*/
		f10 =  ((__xasm<Number>(push((i0+164)), op(0x38))))
		f8 =  f8/*fextend*/
		f8 =  (f8 * f10)
		f8 =  f8/*fround*/
		f8 =  f8/*fextend*/
		f1 =  f1/*fextend*/
		f1 =  (f1 * f8)
		f1 =  f1/*fround*/
		f10 =  ((__xasm<Number>(push((i1+128)), op(0x38))))
		f1 =  f1/*fextend*/
		f2 =  f2/*fextend*/
		f11 =  (f1 * f10)
		f2 =  (f2 * f8)
		f8 =  f11/*fround*/
		f11 =  ((__xasm<Number>(push(i8), op(0x38))))
		f2 =  f2/*fround*/
		f8 =  f8/*fextend*/
		f2 =  f2/*fextend*/
		f8 =  (f11 + f8)
		f10 =  (f2 * f10)
		f0 =  f0/*fextend*/
		f8 =  f8/*fround*/
		f6 =  f6/*fextend*/
		f10 =  f10/*fround*/
		f0 =  (f0 * f2)
		f1 =  (f6 * f1)
		__asm(push(f8), push(i8), op(0x3d))
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f2 =  ((__xasm<Number>(push(i9), op(0x38))))
		f6 =  f10/*fextend*/
		f2 =  (f2 + f6)
		f1 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		f2 =  f2/*fround*/
		f0 =  (f0 - f1)
		__asm(push(f2), push(i9), op(0x3d))
		f1 =  f0/*fround*/
		f0 =  ((__xasm<Number>(push((i1+136)), op(0x38))))
		f1 =  f1/*fextend*/
		f0 =  (f0 * f1)
		f1 =  f0/*fround*/
		f0 =  ((__xasm<Number>(push((i1+64)), op(0x38))))
		f1 =  f1/*fextend*/
		f0 =  (f0 + f1)
		f1 =  f0/*fround*/
		__asm(push(f1), push((i1+64)), op(0x3d))
		f0 = f1
		//InlineAsmStart
	f0 =  Math.cos(f0);

	//InlineAsmEnd
		f6 = f0
		f0 = f1
		//InlineAsmStart
	f0 =  Math.sin(f0);

	//InlineAsmEnd
		f1 = f0
		f0 =  f1/*fextend*/
		f10 =  -f0
		__asm(push(f6), push(i4), op(0x3d))
		f10 =  f10/*fround*/
		__asm(push(f10), push(i6), op(0x3d))
		__asm(push(f1), push(i5), op(0x3d))
		__asm(push(f6), push(i7), op(0x3d))
		f1 =  ((__xasm<Number>(push(i12), op(0x38))))
		f10 =  ((__xasm<Number>(push(i3), op(0x38))))
		f6 =  f6/*fextend*/
		f11 =  (f6 * f1)
		f12 =  (f10 * f0)
		f0 =  (f0 * f1)
		f1 =  f11/*fround*/
		f6 =  (f6 * f10)
		f10 =  f12/*fround*/
		f0 =  f0/*fround*/
		f6 =  f6/*fround*/
		f10 =  f10/*fextend*/
		f1 =  f1/*fextend*/
		f1 =  (f1 - f10)
		f6 =  f6/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 + f6)
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		f6 =  (f7 - f9)
		f1 =  f1/*fextend*/
		f7 =  f8/*fextend*/
		f1 =  (f7 - f1)
		f6 =  f6/*fround*/
		f0 =  f0/*fextend*/
		f2 =  f2/*fextend*/
		f0 =  (f2 - f0)
		f1 =  f1/*fround*/
		f2 =  f6/*fextend*/
		f5 =  f5/*fextend*/
		f2 =  ((f5>f2) ? f5 : f2)
		__asm(push(f1), push((i1+12)), op(0x3d))
		f1 =  f0/*fround*/
		__asm(push(f1), push((i1+16)), op(0x3d))
		f1 =  f2/*fround*/
	__asm(lbl("__ZN13b2PulleyJoint24SolvePositionConstraintsEf__XprivateX__BB252_18_F"))
		i1 =  ((__xasm<int>(push((i0+192)), op(0x37))))
		__asm(push(i1!=2), iftrue, target("__ZN13b2PulleyJoint24SolvePositionConstraintsEf__XprivateX__BB252_23_F"))
	__asm(lbl("__ZN13b2PulleyJoint24SolvePositionConstraintsEf__XprivateX__BB252_19_F"))
		f0 =  ((__xasm<Number>(push((i0+124)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i2+40)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i0+120)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i2+36)), op(0x38))))
		f5 =  (f5 - f6)
		f0 =  (f0 - f2)
		f2 =  f5/*fround*/
		f0 =  f0/*fround*/
		f5 =  ((__xasm<Number>(push((i2+24)), op(0x38))))
		f2 =  f2/*fextend*/
		f6 =  ((__xasm<Number>(push((i2+20)), op(0x38))))
		f7 =  ((__xasm<Number>(push((i2+32)), op(0x38))))
		f0 =  f0/*fextend*/
		f8 =  ((__xasm<Number>(push((i2+28)), op(0x38))))
		f5 =  (f5 * f2)
		f2 =  (f6 * f2)
		f6 =  (f7 * f0)
		f0 =  (f8 * f0)
		f5 =  f5/*fround*/
		f2 =  f2/*fround*/
		f6 =  f6/*fround*/
		f0 =  f0/*fround*/
		f6 =  f6/*fextend*/
		f5 =  f5/*fextend*/
		f0 =  f0/*fextend*/
		f2 =  f2/*fextend*/
		f5 =  (f5 + f6)
		f0 =  (f2 + f0)
		f2 =  f5/*fround*/
		f0 =  f0/*fround*/
		f5 =  ((__xasm<Number>(push((i2+56)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i2+52)), op(0x38))))
		f7 =  f2/*fextend*/
		f8 =  f0/*fextend*/
		f5 =  (f5 + f7)
		f6 =  (f6 + f8)
		f5 =  f5/*fround*/
		f6 =  f6/*fround*/
		f4 =  f4/*fextend*/
		f5 =  f5/*fextend*/
		f3 =  f3/*fextend*/
		f6 =  f6/*fextend*/
		f4 =  (f5 - f4)
		f3 =  (f6 - f3)
		f4 =  f4/*fround*/
		f3 =  f3/*fround*/
		f5 =  f4/*fextend*/
		f6 =  f3/*fextend*/
		f5 =  (f5 * f5)
		f6 =  (f6 * f6)
		f5 =  f5/*fround*/
		f6 =  f6/*fround*/
		f5 =  f5/*fextend*/
		f6 =  f6/*fextend*/
		f5 =  (f6 + f5)
		f5 =  f5/*fround*/
		__asm(push(f3), push((i0+136)), op(0x3d))
		f5 =  f5/*fextend*/
		__asm(push(f4), push((i0+140)), op(0x3d))
		f5 =  Math.sqrt(f5)
		f6 =  ((__xasm<Number>(push(_b2_linearSlop), op(0x38))))
		f5 =  f5/*fround*/
		i1 =  (i2 + 40)
		i3 =  (i2 + 20)
		i4 =  (i2 + 24)
		i5 =  (i2 + 28)
		i6 =  (i2 + 32)
		i7 =  (i2 + 52)
		i8 =  (i2 + 56)
		i9 =  (i0 + 140)
		i10 =  (i0 + 136)
		i11 =  (i2 + 36)
		f7 =  f6/*fextend*/
		f8 =  f5/*fextend*/
		__asm(push(f8<=f7), iftrue, target("__ZN13b2PulleyJoint24SolvePositionConstraintsEf__XprivateX__BB252_21_F"))
	__asm(lbl("__ZN13b2PulleyJoint24SolvePositionConstraintsEf__XprivateX__BB252_20_F"))
		f7 =  (1)
		f7 =  f7/*fround*/
		f8 =  f5/*fextend*/
		f7 =  f7/*fextend*/
		f7 =  (f7 / f8)
		f7 =  f7/*fround*/
		f3 =  f3/*fextend*/
		f7 =  f7/*fextend*/
		f3 =  (f3 * f7)
		f4 =  f4/*fextend*/
		f4 =  (f4 * f7)
		f3 =  f3/*fround*/
		__asm(push(f3), push(i10), op(0x3d))
		f4 =  f4/*fround*/
		f7 = f4
		__asm(jump, target("__ZN13b2PulleyJoint24SolvePositionConstraintsEf__XprivateX__BB252_22_F"))
	__asm(lbl("__ZN13b2PulleyJoint24SolvePositionConstraintsEf__XprivateX__BB252_21_F"))
		f3 =  (0)
		i12 =  (0)
		__asm(push(i12), push(i10), op(0x3c))
		f4 =  f3/*fround*/
		f7 = f4
		f3 = f4
	__asm(lbl("__ZN13b2PulleyJoint24SolvePositionConstraintsEf__XprivateX__BB252_22_F"))
		f8 =  (0)
		__asm(push(f7), push(i9), op(0x3d))
		f7 =  ((__xasm<Number>(push((i0+156)), op(0x38))))
		f5 =  f5/*fextend*/
		f9 =  (f7 - f5)
		f9 =  f9/*fround*/
		f6 =  f6/*fextend*/
		f9 =  f9/*fextend*/
		f6 =  (f9 + f6)
		f6 =  f6/*fround*/
		f8 =  f8/*fround*/
		f9 =  ((__xasm<Number>(push(_b2_maxLinearCorrection), op(0x38))))
		f8 =  f8/*fextend*/
		f6 =  f6/*fextend*/
		f6 =  ((f6<f8) ? f6 : f8)
		f8 =  -f9
		f6 =  f6/*fround*/
		f8 =  f8/*fround*/
		f8 =  f8/*fextend*/
		f6 =  f6/*fextend*/
		f6 =  ((f6<f8) ? f8 : f6)
		f6 =  f6/*fround*/
		f8 =  ((__xasm<Number>(push((i0+168)), op(0x38))))
		f6 =  f6/*fextend*/
		f6 =  (f6 * f8)
		f6 =  f6/*fround*/
		f6 =  f6/*fextend*/
		f3 =  f3/*fextend*/
		f3 =  (f3 * f6)
		f3 =  f3/*fround*/
		f8 =  ((__xasm<Number>(push((i2+128)), op(0x38))))
		f3 =  f3/*fextend*/
		f4 =  f4/*fextend*/
		f9 =  (f3 * f8)
		f4 =  (f4 * f6)
		f6 =  f9/*fround*/
		f9 =  ((__xasm<Number>(push(i7), op(0x38))))
		f4 =  f4/*fround*/
		f6 =  f6/*fextend*/
		f4 =  f4/*fextend*/
		f6 =  (f9 + f6)
		f8 =  (f4 * f8)
		f0 =  f0/*fextend*/
		f6 =  f6/*fround*/
		f2 =  f2/*fextend*/
		f8 =  f8/*fround*/
		f0 =  (f0 * f4)
		f2 =  (f2 * f3)
		__asm(push(f6), push(i7), op(0x3d))
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f3 =  ((__xasm<Number>(push(i8), op(0x38))))
		f4 =  f8/*fextend*/
		f3 =  (f3 + f4)
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f3 =  f3/*fround*/
		f0 =  (f0 - f2)
		__asm(push(f3), push(i8), op(0x3d))
		f0 =  f0/*fround*/
		f2 =  ((__xasm<Number>(push((i2+136)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f2 * f0)
		f0 =  f0/*fround*/
		f2 =  ((__xasm<Number>(push((i2+64)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f2 + f0)
		f2 =  f0/*fround*/
		__asm(push(f2), push((i2+64)), op(0x3d))
		f0 = f2
		//InlineAsmStart
	f0 =  Math.cos(f0);

	//InlineAsmEnd
		f4 = f0
		f0 = f2
		//InlineAsmStart
	f0 =  Math.sin(f0);

	//InlineAsmEnd
		f2 =  f0/*fextend*/
		f8 =  -f2
		__asm(push(f4), push(i3), op(0x3d))
		f8 =  f8/*fround*/
		__asm(push(f8), push(i5), op(0x3d))
		__asm(push(f0), push(i4), op(0x3d))
		__asm(push(f4), push(i6), op(0x3d))
		f0 =  ((__xasm<Number>(push(i11), op(0x38))))
		f8 =  ((__xasm<Number>(push(i1), op(0x38))))
		f4 =  f4/*fextend*/
		f9 =  (f4 * f0)
		f10 =  (f8 * f2)
		f0 =  (f2 * f0)
		f2 =  f9/*fround*/
		f4 =  (f4 * f8)
		f8 =  f10/*fround*/
		f0 =  f0/*fround*/
		f4 =  f4/*fround*/
		f8 =  f8/*fextend*/
		f2 =  f2/*fextend*/
		f2 =  (f2 - f8)
		f4 =  f4/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 + f4)
		f2 =  f2/*fround*/
		f0 =  f0/*fround*/
		f4 =  (f5 - f7)
		f2 =  f2/*fextend*/
		f5 =  f6/*fextend*/
		f2 =  (f5 - f2)
		f4 =  f4/*fround*/
		f0 =  f0/*fextend*/
		f3 =  f3/*fextend*/
		f0 =  (f3 - f0)
		f2 =  f2/*fround*/
		f3 =  f4/*fextend*/
		f1 =  f1/*fextend*/
		f1 =  ((f1>f3) ? f1 : f3)
		__asm(push(f2), push((i2+12)), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push((i2+16)), op(0x3d))
		f1 =  f1/*fround*/
	__asm(lbl("__ZN13b2PulleyJoint24SolvePositionConstraintsEf__XprivateX__BB252_23_F"))
		f0 =  ((__xasm<Number>(push(_b2_linearSlop), op(0x38))))
		f1 =  f1/*fextend*/
		i0 =  ((f1<f0) ? 1 : 0)
		i0 =  (i0 & 1)
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZNK15b2RevoluteJoint10GetAnchorAEv:int = regFunc(FSM__ZNK15b2RevoluteJoint10GetAnchorAEv.start)

public final class FSM__ZNK15b2RevoluteJoint10GetAnchorAEv extends Machine {

	public static function start():void {
		var i0:int, i1:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number

		__asm(label, lbl("__ZNK15b2RevoluteJoint10GetAnchorAEv_entry"))
	__asm(lbl("__ZNK15b2RevoluteJoint10GetAnchorAEv__XprivateX__BB253_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 8
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+48)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i1+20)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i0+96)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i1+24)), op(0x38))))
		f2 =  (f2 * f1)
		f0 =  (f0 * f1)
		f1 =  f2/*fround*/
		f0 =  f0/*fround*/
		f2 =  ((__xasm<Number>(push((i1+12)), op(0x38))))
		f0 =  f0/*fextend*/
		f3 =  ((__xasm<Number>(push((i1+28)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i0+100)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i1+32)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i1+16)), op(0x38))))
		f1 =  f1/*fextend*/
		f0 =  (f2 + f0)
		f2 =  (f5 * f4)
		f1 =  (f6 + f1)
		f3 =  (f3 * f4)
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		f3 =  f3/*fextend*/
		f0 =  f0/*fextend*/
		f2 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  (f0 + f3)
		f1 =  (f1 + f2)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		__asm(push(f0), push((mstate.ebp+-8)), op(0x3d))
		__asm(push(f1), push((mstate.ebp+-4)), op(0x3d))
		i0 =  ((__xasm<int>(push((mstate.ebp+-8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		mstate.edx = i1
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZNK15b2RevoluteJoint10GetAnchorBEv:int = regFunc(FSM__ZNK15b2RevoluteJoint10GetAnchorBEv.start)

public final class FSM__ZNK15b2RevoluteJoint10GetAnchorBEv extends Machine {

	public static function start():void {
		var i0:int, i1:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number

		__asm(label, lbl("__ZNK15b2RevoluteJoint10GetAnchorBEv_entry"))
	__asm(lbl("__ZNK15b2RevoluteJoint10GetAnchorBEv__XprivateX__BB254_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 8
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+52)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i1+20)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i0+104)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i1+24)), op(0x38))))
		f2 =  (f2 * f1)
		f0 =  (f0 * f1)
		f1 =  f2/*fround*/
		f0 =  f0/*fround*/
		f2 =  ((__xasm<Number>(push((i1+12)), op(0x38))))
		f0 =  f0/*fextend*/
		f3 =  ((__xasm<Number>(push((i1+28)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i0+108)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i1+32)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i1+16)), op(0x38))))
		f1 =  f1/*fextend*/
		f0 =  (f2 + f0)
		f2 =  (f5 * f4)
		f1 =  (f6 + f1)
		f3 =  (f3 * f4)
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		f3 =  f3/*fextend*/
		f0 =  f0/*fextend*/
		f2 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  (f0 + f3)
		f1 =  (f1 + f2)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		__asm(push(f0), push((mstate.ebp+-8)), op(0x3d))
		__asm(push(f1), push((mstate.ebp+-4)), op(0x3d))
		i0 =  ((__xasm<int>(push((mstate.ebp+-8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		mstate.edx = i1
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZNK15b2RevoluteJoint16GetReactionForceEf:int = regFunc(FSM__ZNK15b2RevoluteJoint16GetReactionForceEf.start)

public final class FSM__ZNK15b2RevoluteJoint16GetReactionForceEf extends Machine {

	public static function start():void {
		var i0:int, i1:int

		var f0:Number, f1:Number, f2:Number

		__asm(label, lbl("__ZNK15b2RevoluteJoint16GetReactionForceEf_entry"))
	__asm(lbl("__ZNK15b2RevoluteJoint16GetReactionForceEf__XprivateX__BB255_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 8
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i0+112)), op(0x38))))
		f1 =  ((__xasm<Number>(push((mstate.ebp+12)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i0+116)), op(0x38))))
		f0 =  (f0 * f1)
		f1 =  (f2 * f1)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		__asm(push(f0), push((mstate.ebp+-8)), op(0x3d))
		__asm(push(f1), push((mstate.ebp+-4)), op(0x3d))
		i0 =  ((__xasm<int>(push((mstate.ebp+-8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		mstate.edx = i1
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZNK15b2RevoluteJoint17GetReactionTorqueEf:int = regFunc(FSM__ZNK15b2RevoluteJoint17GetReactionTorqueEf.start)

public final class FSM__ZNK15b2RevoluteJoint17GetReactionTorqueEf extends Machine {

	public static function start():void {
		var i0:int

		var f0:Number, f1:Number

		__asm(label, lbl("__ZNK15b2RevoluteJoint17GetReactionTorqueEf_entry"))
	__asm(lbl("__ZNK15b2RevoluteJoint17GetReactionTorqueEf__XprivateX__BB256_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i0+120)), op(0x38))))
		f1 =  ((__xasm<Number>(push((mstate.ebp+12)), op(0x38))))
		f0 =  (f0 * f1)
		f0 =  f0/*fround*/
		mstate.st0 = f0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Async
public const __ZN15b2RevoluteJointD1Ev:int = regFunc(FSM__ZN15b2RevoluteJointD1Ev.start)

public final class FSM__ZN15b2RevoluteJointD1Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN15b2RevoluteJointD1Ev = new FSM__ZN15b2RevoluteJointD1Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN15b2RevoluteJointD1Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN15b2RevoluteJointD1Ev_errState",
			"__ZN15b2RevoluteJointD1Ev_state0"))
	__asm(lbl("__ZN15b2RevoluteJointD1Ev_state0"))
	__asm(lbl("__ZN15b2RevoluteJointD1Ev__XprivateX__BB257_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV7b2Joint)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN15b2RevoluteJointD1Ev_errState"))
		throw("Invalid state in __ZN15b2RevoluteJointD1Ev")
	}
}



// Async
public const __ZN15b2RevoluteJointD0Ev:int = regFunc(FSM__ZN15b2RevoluteJointD0Ev.start)

public final class FSM__ZN15b2RevoluteJointD0Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN15b2RevoluteJointD0Ev = new FSM__ZN15b2RevoluteJointD0Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN15b2RevoluteJointD0Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN15b2RevoluteJointD0Ev_errState",
			"__ZN15b2RevoluteJointD0Ev_state0",
			"__ZN15b2RevoluteJointD0Ev_state1"))
	__asm(lbl("__ZN15b2RevoluteJointD0Ev_state0"))
	__asm(lbl("__ZN15b2RevoluteJointD0Ev__XprivateX__BB258_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV7b2Joint)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		__asm(push(i1==0), iftrue, target("__ZN15b2RevoluteJointD0Ev__XprivateX__BB258_2_F"))
	__asm(lbl("__ZN15b2RevoluteJointD0Ev__XprivateX__BB258_1_F"))
		i0 =  (0)
		mstate.esp -= 8
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN15b2RevoluteJointD0Ev_state1"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__ZN15b2RevoluteJointD0Ev__XprivateX__BB258_2_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN15b2RevoluteJointD0Ev_errState"))
		throw("Invalid state in __ZN15b2RevoluteJointD0Ev")
	}
}



// Async
public const __ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep:int = regFunc(FSM__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep.start)

public final class FSM__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep extends Machine {

	public static function start():void {
			var result:FSM__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep = new FSM__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int

	public static const intRegCount:int = 6
	public var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number
	public var f8:Number, f9:Number, f10:Number, f11:Number, f12:Number, f13:Number, f14:Number, f15:Number
	public var f16:Number, f17:Number, f18:Number, f19:Number, f20:Number, f21:Number

	public static const NumberRegCount:int = 22
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep_entry"))
		__asm(push(state), switchjump(
			"__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep_errState",
			"__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep_state0",
			"__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep_state1",
			"__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep_state2"))
	__asm(lbl("__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep_state0"))
	__asm(lbl("__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB259_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+48)), op(0x37))))
		i2 =  ((__xasm<int>(push((i0+52)), op(0x37))))
		i3 =  ((__xasm<int>(push((i0+168)), op(0x35))))
		i4 =  (i0 + 168)
		i5 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		__asm(push(i3!=0), iftrue, target("__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB259_2_F"))
	__asm(lbl("__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB259_1_F"))
		i3 =  ((__xasm<int>(push((i0+180)), op(0x35))))
		__asm(push(i3==0), iftrue, target("__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB259_5_F"))
	__asm(lbl("__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB259_2_F"))
		f0 =  (0)
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push((i1+136)), op(0x38))))
		f0 =  f0/*fextend*/
		__asm(push(f1>f0), iftrue, target("__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB259_5_F"))
	__asm(lbl("__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB259_3_F"))
		f0 =  (0)
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push((i2+136)), op(0x38))))
		f0 =  f0/*fextend*/
		__asm(push(f1>f0), iftrue, target("__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB259_5_F"))
	__asm(lbl("__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB259_4_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str68275)
		i4 =  (__ZZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStepE8__func__)
		i5 =  (__2E_str67274)
		i3 =  (73)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i4), push((mstate.esp+12)), op(0x3c))
		__asm(push(i5), push((mstate.esp+16)), op(0x3c))
		__asm(push(i3), push((mstate.esp+20)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep_state1"))
		mstate.esp += 24
		state = 2
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep_state2"))
	__asm(lbl("__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB259_5_F"))
		f0 =  (0)
		f1 =  ((__xasm<Number>(push((i0+100)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i1+40)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i0+96)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i1+36)), op(0x38))))
		f3 =  (f3 - f4)
		f1 =  (f1 - f2)
		f2 =  f3/*fround*/
		f1 =  f1/*fround*/
		f3 =  ((__xasm<Number>(push((i1+24)), op(0x38))))
		f2 =  f2/*fextend*/
		f4 =  ((__xasm<Number>(push((i1+32)), op(0x38))))
		f1 =  f1/*fextend*/
		f5 =  ((__xasm<Number>(push((i0+108)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i2+40)), op(0x38))))
		f7 =  ((__xasm<Number>(push((i0+104)), op(0x38))))
		f8 =  ((__xasm<Number>(push((i2+36)), op(0x38))))
		f3 =  (f3 * f2)
		f7 =  (f7 - f8)
		f5 =  (f5 - f6)
		f4 =  (f4 * f1)
		f3 =  f3/*fround*/
		f6 =  f7/*fround*/
		f5 =  f5/*fround*/
		f4 =  f4/*fround*/
		f7 =  ((__xasm<Number>(push((i2+24)), op(0x38))))
		f6 =  f6/*fextend*/
		f8 =  ((__xasm<Number>(push((i2+32)), op(0x38))))
		f5 =  f5/*fextend*/
		f4 =  f4/*fextend*/
		f3 =  f3/*fextend*/
		f9 =  ((__xasm<Number>(push((i1+20)), op(0x38))))
		f10 =  ((__xasm<Number>(push((i1+28)), op(0x38))))
		f11 =  ((__xasm<Number>(push((i2+20)), op(0x38))))
		f12 =  ((__xasm<Number>(push((i2+28)), op(0x38))))
		f3 =  (f3 + f4)
		f4 =  (f7 * f6)
		f7 =  (f8 * f5)
		f3 =  f3/*fround*/
		f2 =  (f9 * f2)
		f4 =  f4/*fround*/
		f6 =  (f11 * f6)
		f7 =  f7/*fround*/
		f5 =  (f12 * f5)
		f1 =  (f10 * f1)
		f8 =  f3/*fextend*/
		f2 =  f2/*fround*/
		f6 =  f6/*fround*/
		f5 =  f5/*fround*/
		f1 =  f1/*fround*/
		f7 =  f7/*fextend*/
		f4 =  f4/*fextend*/
		f9 =  (f8 * f8)
		f4 =  (f4 + f7)
		f1 =  f1/*fextend*/
		f2 =  f2/*fextend*/
		f5 =  f5/*fextend*/
		f6 =  f6/*fextend*/
		f7 =  ((__xasm<Number>(push((i1+128)), op(0x38))))
		f10 =  ((__xasm<Number>(push((i2+128)), op(0x38))))
		f11 =  ((__xasm<Number>(push((i1+136)), op(0x38))))
		f9 =  f9/*fround*/
		f8 =  -f8
		f1 =  (f2 + f1)
		f2 =  f4/*fround*/
		f4 =  (f6 + f5)
		f5 =  f8/*fround*/
		f1 =  f1/*fround*/
		f6 =  f2/*fextend*/
		f4 =  f4/*fround*/
		f8 =  f9/*fextend*/
		f9 =  f11/*fextend*/
		f12 =  f10/*fextend*/
		f13 =  f7/*fextend*/
		f14 =  f1/*fextend*/
		f5 =  f5/*fextend*/
		f15 =  f4/*fextend*/
		f8 =  (f8 * f9)
		f16 =  (f6 * f6)
		f12 =  (f13 + f12)
		f13 =  ((__xasm<Number>(push((i2+136)), op(0x38))))
		f8 =  f8/*fround*/
		f17 =  (f14 * f5)
		f18 =  (f14 * f14)
		f16 =  f16/*fround*/
		f19 =  (f6 * f15)
		f12 =  f12/*fround*/
		f20 =  f13/*fextend*/
		f17 =  f17/*fround*/
		f18 =  f18/*fround*/
		f16 =  f16/*fextend*/
		f19 =  f19/*fround*/
		f8 =  f8/*fextend*/
		f12 =  f12/*fextend*/
		f8 =  (f12 + f8)
		f17 =  f17/*fextend*/
		f18 =  f18/*fextend*/
		f16 =  (f16 * f20)
		f19 =  f19/*fextend*/
		f8 =  f8/*fround*/
		f17 =  (f17 * f9)
		f18 =  (f18 * f9)
		f16 =  f16/*fround*/
		f19 =  (f19 * f20)
		f21 =  (f15 * f15)
		f17 =  f17/*fround*/
		f5 =  (f9 * f5)
		f18 =  f18/*fround*/
		f19 =  f19/*fround*/
		f6 =  (f6 * f20)
		f21 =  f21/*fround*/
		f16 =  f16/*fextend*/
		f8 =  f8/*fextend*/
		f8 =  (f8 + f16)
		f5 =  f5/*fround*/
		f16 =  f18/*fextend*/
		f6 =  f6/*fround*/
		f18 =  f21/*fextend*/
		f19 =  f19/*fextend*/
		f17 =  f17/*fextend*/
		f17 =  (f17 - f19)
		f12 =  (f12 + f16)
		f16 =  (f18 * f20)
		f8 =  f8/*fround*/
		f6 =  f6/*fextend*/
		f5 =  f5/*fextend*/
		f5 =  (f5 - f6)
		f6 =  f12/*fround*/
		f12 =  (f14 * f9)
		f14 =  f16/*fround*/
		f15 =  (f15 * f20)
		__asm(push(f8), push((i0+128)), op(0x3d))
		f8 =  f17/*fround*/
		f12 =  f12/*fround*/
		f15 =  f15/*fround*/
		__asm(push(f8), push((i0+140)), op(0x3d))
		f5 =  f5/*fround*/
		f14 =  f14/*fextend*/
		f6 =  f6/*fextend*/
		__asm(push(f5), push((i0+152)), op(0x3d))
		f6 =  (f6 + f14)
		f14 =  f15/*fextend*/
		f12 =  f12/*fextend*/
		f12 =  (f12 + f14)
		__asm(push(f8), push((i0+132)), op(0x3d))
		f6 =  f6/*fround*/
		__asm(push(f6), push((i0+144)), op(0x3d))
		f6 =  f12/*fround*/
		__asm(push(f6), push((i0+156)), op(0x3d))
		__asm(push(f5), push((i0+136)), op(0x3d))
		f5 =  (f9 + f20)
		f5 =  f5/*fround*/
		__asm(push(f6), push((i0+148)), op(0x3d))
		__asm(push(f5), push((i0+160)), op(0x3d))
		i3 =  (i0 + 164)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f6 =  f5/*fextend*/
		__asm(push(f6>f0), iftrue, target("__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB259_7_F"))
	__asm(lbl("__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB259_6_F"))
		__asm(jump, target("__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB259_8_F"))
	__asm(lbl("__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB259_7_F"))
		f0 =  (1)
		f0 =  f0/*fround*/
		f5 =  f5/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 / f5)
		f5 =  f0/*fround*/
	__asm(lbl("__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB259_8_F"))
		f0 = f5
		__asm(push(f0), push(i3), op(0x3d))
		i3 =  ((__xasm<int>(push(i4), op(0x35))))
		__asm(push(i3!=0), iftrue, target("__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB259_10_F"))
	__asm(lbl("__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB259_9_F"))
		i3 =  (0)
		__asm(push(i3), push((i0+124)), op(0x3c))
	__asm(lbl("__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB259_10_F"))
		i3 =  ((__xasm<int>(push((i0+180)), op(0x35))))
		__asm(push(i3==0), iftrue, target("__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB259_21_F"))
	__asm(lbl("__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB259_11_F"))
		f0 =  (0)
		f5 =  ((__xasm<Number>(push((i0+192)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i0+188)), op(0x38))))
		f8 =  ((__xasm<Number>(push((i2+64)), op(0x38))))
		f9 =  ((__xasm<Number>(push((i1+64)), op(0x38))))
		f8 =  (f8 - f9)
		f9 =  f5/*fextend*/
		f12 =  f6/*fextend*/
		f8 =  f8/*fround*/
		f14 =  (f9 - f12)
		f9 =  (f12 - f9)
		f12 =  f14/*fround*/
		f9 =  f9/*fround*/
		f0 =  f0/*fround*/
		f14 =  ((__xasm<Number>(push((i0+184)), op(0x38))))
		f8 =  f8/*fextend*/
		f15 =  ((__xasm<Number>(push(_b2_angularSlop), op(0x38))))
		f8 =  (f8 - f14)
		f9 =  f9/*fextend*/
		f0 =  f0/*fextend*/
		f12 =  f12/*fextend*/
		f8 =  f8/*fround*/
		f0 =  ((f12<=f0) ? f9 : f12)
		f9 =  (f15 + f15)
		f0 =  f0/*fround*/
		f9 =  f9/*fround*/
		f9 =  f9/*fextend*/
		f0 =  f0/*fextend*/
		__asm(push(f0>=f9), iftrue, target("__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB259_13_F"))
	__asm(lbl("__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB259_12_F"))
		i3 =  (3)
		__asm(push(i3), push((i0+196)), op(0x3c))
		i3 =  ((__xasm<int>(push((i5+20)), op(0x35))))
		__asm(push(i3==0), iftrue, target("__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB259_24_F"))
		__asm(jump, target("__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB259_22_F"))
	__asm(lbl("__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB259_13_F"))
		f0 =  f8/*fextend*/
		f6 =  f6/*fextend*/
		__asm(push(f6<f0), iftrue, target("__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB259_16_F"))
	__asm(lbl("__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB259_14_F"))
		i3 =  ((__xasm<int>(push((i0+196)), op(0x37))))
		i4 =  (i0 + 196)
		__asm(push(i3==1), iftrue, target("__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB259_23_F"))
	__asm(lbl("__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB259_15_F"))
		i3 =  (0)
		__asm(push(i3), push((i0+120)), op(0x3c))
		i3 =  (1)
		__asm(push(i3), push(i4), op(0x3c))
		i4 =  ((__xasm<int>(push((i5+20)), op(0x35))))
		__asm(push(i4==0), iftrue, target("__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB259_24_F"))
		__asm(jump, target("__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB259_22_F"))
	__asm(lbl("__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB259_16_F"))
		i3 =  (i0 + 196)
		f0 =  f8/*fextend*/
		f5 =  f5/*fextend*/
		__asm(push(f5>f0), iftrue, target("__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB259_20_F"))
	__asm(lbl("__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB259_17_F"))
		i4 =  ((__xasm<int>(push(i3), op(0x37))))
		__asm(push(i4==2), iftrue, target("__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB259_19_F"))
	__asm(lbl("__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB259_18_F"))
		i4 =  (0)
		__asm(push(i4), push((i0+120)), op(0x3c))
		i4 =  (2)
		__asm(push(i4), push(i3), op(0x3c))
		i3 =  ((__xasm<int>(push((i5+20)), op(0x35))))
		__asm(push(i3==0), iftrue, target("__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB259_24_F"))
		__asm(jump, target("__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB259_22_F"))
	__asm(lbl("__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB259_19_F"))
		i4 =  (2)
		__asm(push(i4), push(i3), op(0x3c))
		i3 =  ((__xasm<int>(push((i5+20)), op(0x35))))
		__asm(push(i3==0), iftrue, target("__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB259_24_F"))
		__asm(jump, target("__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB259_22_F"))
	__asm(lbl("__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB259_20_F"))
		i4 =  (0)
		__asm(push(i4), push(i3), op(0x3c))
		__asm(push(i4), push((i0+120)), op(0x3c))
		i3 =  ((__xasm<int>(push((i5+20)), op(0x35))))
		__asm(push(i3==0), iftrue, target("__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB259_24_F"))
		__asm(jump, target("__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB259_22_F"))
	__asm(lbl("__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB259_21_F"))
		i3 =  (0)
		__asm(push(i3), push((i0+196)), op(0x3c))
		i3 =  ((__xasm<int>(push((i5+20)), op(0x35))))
		__asm(push(i3==0), iftrue, target("__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB259_24_F"))
	__asm(jump, target("__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB259_22_F"), lbl("__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB259_22_B"), label, lbl("__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB259_22_F")); 
		f0 =  ((__xasm<Number>(push((i5+8)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i0+112)), op(0x38))))
		f5 =  (f5 * f0)
		f5 =  f5/*fround*/
		__asm(push(f5), push((i0+112)), op(0x3d))
		f6 =  ((__xasm<Number>(push((i0+116)), op(0x38))))
		f6 =  (f6 * f0)
		f6 =  f6/*fround*/
		__asm(push(f6), push((i0+116)), op(0x3d))
		f8 =  ((__xasm<Number>(push((i0+120)), op(0x38))))
		f0 =  (f8 * f0)
		f0 =  f0/*fround*/
		__asm(push(f0), push((i0+120)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i0+124)), op(0x38))))
		f8 =  ((__xasm<Number>(push((i5+8)), op(0x38))))
		f0 =  (f0 * f8)
		f7 =  f7/*fextend*/
		f5 =  f5/*fextend*/
		f8 =  (f5 * f7)
		f0 =  f0/*fround*/
		f8 =  f8/*fround*/
		__asm(push(f0), push((i0+124)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i1+72)), op(0x38))))
		f8 =  f8/*fextend*/
		f0 =  (f0 - f8)
		f6 =  f6/*fextend*/
		f0 =  f0/*fround*/
		f7 =  (f6 * f7)
		f1 =  f1/*fextend*/
		f3 =  f3/*fextend*/
		__asm(push(f0), push((i1+72)), op(0x3d))
		f0 =  f7/*fround*/
		f1 =  (f1 * f6)
		f3 =  (f3 * f5)
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		f7 =  ((__xasm<Number>(push((i1+76)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f7 - f0)
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  f0/*fround*/
		f1 =  (f1 - f3)
		__asm(push(f0), push((i1+76)), op(0x3d))
		f0 =  f1/*fround*/
		f1 =  ((__xasm<Number>(push((i0+124)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f0 + f1)
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push((i0+120)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f0 + f1)
		f0 =  f0/*fround*/
		f1 =  f11/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 * f1)
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push((i1+80)), op(0x38))))
		f0 =  f0/*fextend*/
		f3 =  f10/*fextend*/
		f0 =  (f1 - f0)
		f1 =  (f5 * f3)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		__asm(push(f0), push((i1+80)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i2+72)), op(0x38))))
		f1 =  f1/*fextend*/
		f0 =  (f0 + f1)
		f0 =  f0/*fround*/
		f1 =  (f6 * f3)
		f3 =  f4/*fextend*/
		f2 =  f2/*fextend*/
		__asm(push(f0), push((i2+72)), op(0x3d))
		f0 =  f1/*fround*/
		f1 =  (f3 * f6)
		f2 =  (f2 * f5)
		f1 =  f1/*fround*/
		f2 =  f2/*fround*/
		f3 =  ((__xasm<Number>(push((i2+76)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f3 + f0)
		f2 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  f0/*fround*/
		f1 =  (f1 - f2)
		__asm(push(f0), push((i2+76)), op(0x3d))
		f0 =  f1/*fround*/
		f1 =  ((__xasm<Number>(push((i0+124)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f0 + f1)
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push((i0+120)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f0 + f1)
		f0 =  f0/*fround*/
		f1 =  f13/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 * f1)
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push((i2+80)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f1 + f0)
		f0 =  f0/*fround*/
		__asm(push(f0), push((i2+80)), op(0x3d))
		__asm(jump, target("__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB259_25_F"))
	__asm(lbl("__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB259_23_F"))
		i3 =  (1)
		__asm(push(i3), push(i4), op(0x3c))
		i3 =  ((__xasm<int>(push((i5+20)), op(0x35))))
		__asm(push(i3==0), iftrue, target("__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB259_24_F"))
		__asm(jump, target("__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB259_22_B"))
	__asm(lbl("__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB259_24_F"))
		i1 =  (0)
		__asm(push(i1), push((i0+112)), op(0x3c))
		__asm(push(i1), push((i0+116)), op(0x3c))
		__asm(push(i1), push((i0+120)), op(0x3c))
		__asm(push(i1), push((i0+124)), op(0x3c))
	__asm(lbl("__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB259_25_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep_errState"))
		throw("Invalid state in __ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep")
	}
}



// Sync
public const __ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep:int = regFunc(FSM__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep.start)

public final class FSM__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
		var i8:int, i9:int, i10:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number
		var f8:Number, f9:Number, f10:Number, f11:Number, f12:Number, f13:Number, f14:Number, f15:Number
		var f16:Number, f17:Number, f18:Number, f19:Number, f20:Number, f21:Number, f22:Number, f23:Number
		var f24:Number, f25:Number, f26:Number, f27:Number, f28:Number, f29:Number, f30:Number, f31:Number
		__asm(label, lbl("__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep_entry"))
	__asm(lbl("__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB260_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 64
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+48)), op(0x37))))
		i2 =  ((__xasm<int>(push((i0+52)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i1+72)), op(0x38))))
		__asm(push(f0), push((mstate.ebp+-64)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i1+76)), op(0x38))))
		__asm(push(f0), push((mstate.ebp+-56)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i1+80)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i2+72)), op(0x38))))
		__asm(push(f1), push((mstate.ebp+-48)), op(0x3d))
		f1 =  ((__xasm<Number>(push((i2+76)), op(0x38))))
		__asm(push(f1), push((mstate.ebp+-40)), op(0x3d))
		f1 =  ((__xasm<Number>(push((i2+80)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i1+128)), op(0x38))))
		__asm(push(f2), push((mstate.ebp+-16)), op(0x3d))
		f2 =  ((__xasm<Number>(push((i2+128)), op(0x38))))
		__asm(push(f2), push((mstate.ebp+-8)), op(0x3d))
		f2 =  ((__xasm<Number>(push((i1+136)), op(0x38))))
		__asm(push(f2), push((mstate.ebp+-32)), op(0x3d))
		f2 =  ((__xasm<Number>(push((i2+136)), op(0x38))))
		__asm(push(f2), push((mstate.ebp+-24)), op(0x3d))
		i3 =  ((__xasm<int>(push((i0+168)), op(0x35))))
		i4 =  (i1 + 76)
		i5 =  (i2 + 76)
		i6 =  (i2 + 80)
		i7 =  (i2 + 72)
		i8 =  (i1 + 80)
		i9 =  (i1 + 72)
		i10 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		__asm(push(i3!=0), iftrue, target("__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB260_2_F"))
	__asm(jump, target("__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB260_1_F"), lbl("__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB260_1_B"), label, lbl("__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB260_1_F")); 
		__asm(jump, target("__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB260_4_F"))
	__asm(lbl("__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB260_2_F"))
		i3 =  ((__xasm<int>(push((i0+196)), op(0x37))))
		__asm(push(i3==3), iftrue, target("__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB260_1_B"))
	__asm(lbl("__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB260_3_F"))
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		f2 =  (f1 - f0)
		f2 =  f2/*fround*/
		f3 =  ((__xasm<Number>(push((i0+176)), op(0x38))))
		f2 =  f2/*fextend*/
		f2 =  (f3 - f2)
		f2 =  f2/*fround*/
		f3 =  ((__xasm<Number>(push((i0+164)), op(0x38))))
		f2 =  f2/*fextend*/
		f2 =  (f3 * f2)
		f2 =  f2/*fround*/
		f3 =  ((__xasm<Number>(push((i0+124)), op(0x38))))
		f2 =  f2/*fextend*/
		f4 =  ((__xasm<Number>(push(i10), op(0x38))))
		f5 =  ((__xasm<Number>(push((i0+172)), op(0x38))))
		f2 =  (f3 + f2)
		f4 =  (f4 * f5)
		f2 =  f2/*fround*/
		f4 =  f4/*fround*/
		f4 =  f4/*fextend*/
		f2 =  f2/*fextend*/
		f2 =  ((f2<f4) ? f2 : f4)
		f4 =  -f4
		f2 =  f2/*fround*/
		f4 =  f4/*fround*/
		f4 =  f4/*fextend*/
		f2 =  f2/*fextend*/
		f2 =  ((f2<f4) ? f4 : f2)
		f2 =  f2/*fround*/
		f4 =  f2/*fextend*/
		f3 =  (f4 - f3)
		f3 =  f3/*fround*/
		f4 =  ((__xasm<Number>(push((mstate.ebp+-32)), op(0x38))))
		f4 =  f4/*fextend*/
		f3 =  f3/*fextend*/
		f5 =  ((__xasm<Number>(push((mstate.ebp+-24)), op(0x38))))
		f5 =  f5/*fextend*/
		f4 =  (f4 * f3)
		f3 =  (f5 * f3)
		f4 =  f4/*fround*/
		f3 =  f3/*fround*/
		f4 =  f4/*fextend*/
		f3 =  f3/*fextend*/
		f0 =  (f0 - f4)
		f1 =  (f3 + f1)
		__asm(push(f2), push((i0+124)), op(0x3d))
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
	__asm(lbl("__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB260_4_F"))
		i3 =  ((__xasm<int>(push((i0+180)), op(0x35))))
		__asm(push(i3==0), iftrue, target("__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB260_25_F"))
	__asm(lbl("__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB260_5_F"))
		i3 =  ((__xasm<int>(push((i0+196)), op(0x37))))
		__asm(push(i3==0), iftrue, target("__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB260_25_F"))
	__asm(lbl("__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB260_6_F"))
		f2 =  (0)
		f3 =  ((__xasm<Number>(push((i0+108)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i2+40)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i0+104)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i2+36)), op(0x38))))
		f5 =  (f5 - f6)
		f3 =  (f3 - f4)
		f4 =  f5/*fround*/
		f3 =  f3/*fround*/
		f5 =  ((__xasm<Number>(push((i2+24)), op(0x38))))
		f4 =  f4/*fextend*/
		f6 =  ((__xasm<Number>(push((i2+20)), op(0x38))))
		f7 =  ((__xasm<Number>(push((i2+32)), op(0x38))))
		f3 =  f3/*fextend*/
		f8 =  ((__xasm<Number>(push((i2+28)), op(0x38))))
		f5 =  (f5 * f4)
		f4 =  (f6 * f4)
		f6 =  (f7 * f3)
		f3 =  (f8 * f3)
		f7 =  ((__xasm<Number>(push((i0+140)), op(0x38))))
		f8 =  ((__xasm<Number>(push((i0+156)), op(0x38))))
		f9 =  ((__xasm<Number>(push((i0+144)), op(0x38))))
		f10 =  ((__xasm<Number>(push((i0+152)), op(0x38))))
		f11 =  ((__xasm<Number>(push((i0+148)), op(0x38))))
		f12 =  ((__xasm<Number>(push((i0+160)), op(0x38))))
		f5 =  f5/*fround*/
		f4 =  f4/*fround*/
		f6 =  f6/*fround*/
		f3 =  f3/*fround*/
		f13 =  ((__xasm<Number>(push((i0+100)), op(0x38))))
		f14 =  ((__xasm<Number>(push((i1+40)), op(0x38))))
		f15 =  ((__xasm<Number>(push((i0+96)), op(0x38))))
		f16 =  ((__xasm<Number>(push((i1+36)), op(0x38))))
		f6 =  f6/*fextend*/
		f5 =  f5/*fextend*/
		f3 =  f3/*fextend*/
		f4 =  f4/*fextend*/
		f17 =  f12/*fextend*/
		f18 =  f9/*fextend*/
		f19 =  f10/*fextend*/
		f20 =  f11/*fextend*/
		f21 =  f8/*fextend*/
		f22 =  f7/*fextend*/
		f15 =  (f15 - f16)
		f5 =  (f5 + f6)
		f3 =  (f4 + f3)
		f4 =  (f22 * f17)
		f6 =  (f18 * f17)
		f16 =  (f20 * f19)
		f17 =  (f20 * f21)
		f13 =  (f13 - f14)
		f14 =  f15/*fround*/
		f5 =  f5/*fround*/
		f3 =  f3/*fround*/
		f4 =  f4/*fround*/
		f6 =  f6/*fround*/
		f15 =  f16/*fround*/
		f16 =  f17/*fround*/
		f13 =  f13/*fround*/
		f17 =  ((__xasm<Number>(push((i1+24)), op(0x38))))
		f14 =  f14/*fextend*/
		f20 =  ((__xasm<Number>(push((i1+20)), op(0x38))))
		f23 =  ((__xasm<Number>(push((i1+32)), op(0x38))))
		f13 =  f13/*fextend*/
		f24 =  ((__xasm<Number>(push((i1+28)), op(0x38))))
		f25 =  f5/*fextend*/
		f26 =  f1/*fextend*/
		f27 =  f3/*fextend*/
		f4 =  f4/*fextend*/
		f15 =  f15/*fextend*/
		f16 =  f16/*fextend*/
		f6 =  f6/*fextend*/
		f17 =  (f17 * f14)
		f14 =  (f20 * f14)
		f20 =  (f25 * f26)
		f25 =  (f27 * f26)
		f4 =  (f15 - f4)
		f6 =  (f6 - f16)
		f15 =  (f18 * f19)
		f16 =  (f22 * f21)
		f18 =  (f23 * f13)
		f13 =  (f24 * f13)
		f19 =  ((__xasm<Number>(push((i0+128)), op(0x38))))
		f21 =  ((__xasm<Number>(push((i0+132)), op(0x38))))
		f17 =  f17/*fround*/
		f14 =  f14/*fround*/
		f20 =  f20/*fround*/
		f22 =  f25/*fround*/
		f4 =  f4/*fround*/
		f6 =  f6/*fround*/
		f15 =  f15/*fround*/
		f16 =  f16/*fround*/
		f18 =  f18/*fround*/
		f13 =  f13/*fround*/
		f23 =  f0/*fextend*/
		f18 =  f18/*fextend*/
		f17 =  f17/*fextend*/
		f13 =  f13/*fextend*/
		f14 =  f14/*fextend*/
		f20 =  f20/*fextend*/
		f24 =  ((__xasm<Number>(push((mstate.ebp+-48)), op(0x38))))
		f24 =  f24/*fextend*/
		f22 =  f22/*fextend*/
		f25 =  ((__xasm<Number>(push((mstate.ebp+-40)), op(0x38))))
		f25 =  f25/*fextend*/
		f27 =  f6/*fextend*/
		f28 =  f19/*fextend*/
		f29 =  f4/*fextend*/
		f30 =  f21/*fextend*/
		f15 =  f15/*fextend*/
		f16 =  f16/*fextend*/
		f17 =  (f17 + f18)
		f13 =  (f14 + f13)
		f14 =  (f24 - f20)
		f18 =  (f25 + f22)
		f20 =  (f28 * f27)
		f22 =  (f30 * f29)
		f15 =  (f16 - f15)
		f16 =  -f23
		f24 =  ((__xasm<Number>(push((i0+136)), op(0x38))))
		f17 =  f17/*fround*/
		f13 =  f13/*fround*/
		f14 =  f14/*fround*/
		f18 =  f18/*fround*/
		f20 =  f20/*fround*/
		f22 =  f22/*fround*/
		f15 =  f15/*fround*/
		f16 =  f16/*fround*/
		f25 =  f13/*fextend*/
		f16 =  f16/*fextend*/
		f27 =  f17/*fextend*/
		f28 =  ((__xasm<Number>(push((mstate.ebp+-64)), op(0x38))))
		f28 =  f28/*fextend*/
		f14 =  f14/*fextend*/
		f29 =  ((__xasm<Number>(push((mstate.ebp+-56)), op(0x38))))
		f29 =  f29/*fextend*/
		f18 =  f18/*fextend*/
		f22 =  f22/*fextend*/
		f20 =  f20/*fextend*/
		f30 =  f15/*fextend*/
		f31 =  f24/*fextend*/
		f16 =  (f27 * f16)
		f25 =  (f25 * f23)
		f14 =  (f14 - f28)
		f18 =  (f18 - f29)
		f20 =  (f20 + f22)
		f22 =  (f31 * f30)
		f16 =  f16/*fround*/
		f25 =  f25/*fround*/
		f14 =  f14/*fround*/
		f18 =  f18/*fround*/
		f20 =  f20/*fround*/
		f22 =  f22/*fround*/
		f14 =  f14/*fextend*/
		f16 =  f16/*fextend*/
		f18 =  f18/*fextend*/
		f25 =  f25/*fextend*/
		f22 =  f22/*fextend*/
		f20 =  f20/*fextend*/
		f14 =  (f16 - f14)
		f16 =  (f25 - f18)
		f18 =  (f20 + f22)
		f20 =  (f23 - f26)
		f18 =  f18/*fround*/
		f14 =  f14/*fround*/
		f16 =  f16/*fround*/
		f20 =  f20/*fround*/
		f2 =  f2/*fround*/
		f2 =  f2/*fextend*/
		f22 =  f18/*fextend*/
		__asm(push(f22!=f2), iftrue, target("__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB260_8_F"))
	__asm(lbl("__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB260_7_F"))
		__asm(jump, target("__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB260_9_F"))
	__asm(lbl("__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB260_8_F"))
		f2 =  (1)
		f2 =  f2/*fround*/
		f18 =  f18/*fextend*/
		f2 =  f2/*fextend*/
		f2 =  (f2 / f18)
		f18 =  f2/*fround*/
	__asm(lbl("__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB260_9_F"))
		f2 = f18
		f18 =  f14/*fextend*/
		f12 =  f12/*fextend*/
		f22 =  f16/*fextend*/
		f11 =  f11/*fextend*/
		f10 =  f10/*fextend*/
		f8 =  f8/*fextend*/
		f20 =  f20/*fextend*/
		f23 =  f7/*fextend*/
		f25 =  f9/*fextend*/
		f26 =  (f12 * f18)
		f27 =  (f11 * f18)
		f12 =  (f12 * f22)
		f11 =  (f11 * f22)
		f28 =  (f10 * f20)
		f29 =  (f8 * f20)
		f30 =  (f23 * f20)
		f31 =  (f25 * f20)
		f26 =  f26/*fround*/
		f27 =  f27/*fround*/
		f12 =  f12/*fround*/
		f11 =  f11/*fround*/
		f28 =  f28/*fround*/
		f29 =  f29/*fround*/
		f30 =  f30/*fround*/
		f31 =  f31/*fround*/
		f26 =  f26/*fextend*/
		f28 =  f28/*fextend*/
		f30 =  f30/*fextend*/
		f27 =  f27/*fextend*/
		f29 =  f29/*fextend*/
		f12 =  f12/*fextend*/
		f11 =  f11/*fextend*/
		f31 =  f31/*fextend*/
		f8 =  (f8 * f18)
		f26 =  (f28 - f26)
		f25 =  (f25 * f18)
		f27 =  (f27 - f30)
		f10 =  (f10 * f22)
		f12 =  (f12 - f29)
		f23 =  (f23 * f22)
		f11 =  (f31 - f11)
		f8 =  f8/*fround*/
		f26 =  f26/*fround*/
		f25 =  f25/*fround*/
		f27 =  f27/*fround*/
		f10 =  f10/*fround*/
		f12 =  f12/*fround*/
		f23 =  f23/*fround*/
		f11 =  f11/*fround*/
		f6 =  f6/*fextend*/
		f4 =  f4/*fextend*/
		f10 =  f10/*fextend*/
		f8 =  f8/*fextend*/
		f26 =  f26/*fextend*/
		f28 =  f21/*fextend*/
		f27 =  f27/*fextend*/
		f29 =  f25/*fextend*/
		f30 =  f23/*fextend*/
		f12 =  f12/*fextend*/
		f31 =  f19/*fextend*/
		f11 =  f11/*fextend*/
		f6 =  (f6 * f18)
		f8 =  (f8 - f10)
		f10 =  (f28 * f26)
		f18 =  (f30 - f29)
		f26 =  (f28 * f27)
		f4 =  (f4 * f22)
		f12 =  (f31 * f12)
		f11 =  (f31 * f11)
		f6 =  f6/*fround*/
		f8 =  f8/*fround*/
		f10 =  f10/*fround*/
		f18 =  f18/*fround*/
		f22 =  f26/*fround*/
		f4 =  f4/*fround*/
		f12 =  f12/*fround*/
		f11 =  f11/*fround*/
		f15 =  f15/*fextend*/
		f4 =  f4/*fextend*/
		f6 =  f6/*fextend*/
		f8 =  f8/*fextend*/
		f24 =  f24/*fextend*/
		f18 =  f18/*fextend*/
		f10 =  f10/*fextend*/
		f12 =  f12/*fextend*/
		f22 =  f22/*fextend*/
		f11 =  f11/*fextend*/
		f4 =  (f6 + f4)
		f6 =  (f24 * f8)
		f8 =  (f12 + f10)
		f10 =  (f24 * f18)
		f11 =  (f11 + f22)
		f12 =  (f15 * f20)
		f4 =  f4/*fround*/
		f6 =  f6/*fround*/
		f8 =  f8/*fround*/
		f10 =  f10/*fround*/
		f11 =  f11/*fround*/
		f12 =  f12/*fround*/
		f12 =  f12/*fextend*/
		f4 =  f4/*fextend*/
		f6 =  f6/*fextend*/
		f8 =  f8/*fextend*/
		f10 =  f10/*fextend*/
		f11 =  f11/*fextend*/
		f4 =  (f4 + f12)
		f6 =  (f8 + f6)
		f8 =  (f11 + f10)
		f4 =  f4/*fround*/
		f6 =  f6/*fround*/
		f8 =  f8/*fround*/
		f4 =  f4/*fextend*/
		f2 =  f2/*fextend*/
		f6 =  f6/*fextend*/
		f8 =  f8/*fextend*/
		f4 =  (f4 * f2)
		f6 =  (f6 * f2)
		f2 =  (f8 * f2)
		f4 =  f4/*fround*/
		f6 =  f6/*fround*/
		f2 =  f2/*fround*/
		__asm(push(i3==1), iftrue, target("__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB260_14_F"))
	__asm(lbl("__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB260_10_F"))
		__asm(push(i3==2), iftrue, target("__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB260_19_F"))
	__asm(lbl("__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB260_11_F"))
		__asm(push(i3==3), iftrue, target("__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB260_13_F"))
	__asm(jump, target("__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB260_12_F"), lbl("__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB260_12_B"), label, lbl("__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB260_12_F")); 
		__asm(jump, target("__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB260_24_F"))
	__asm(lbl("__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB260_13_F"))
		f7 =  ((__xasm<Number>(push((i0+112)), op(0x38))))
		f8 =  f4/*fextend*/
		f7 =  (f7 + f8)
		f7 =  f7/*fround*/
		__asm(push(f7), push((i0+112)), op(0x3d))
		f7 =  ((__xasm<Number>(push((i0+116)), op(0x38))))
		f8 =  f6/*fextend*/
		f7 =  (f7 + f8)
		f7 =  f7/*fround*/
		__asm(push(f7), push((i0+116)), op(0x3d))
		f7 =  ((__xasm<Number>(push((i0+120)), op(0x38))))
		f8 =  f2/*fextend*/
		f7 =  (f7 + f8)
		f7 =  f7/*fround*/
		__asm(push(f7), push((i0+120)), op(0x3d))
		__asm(jump, target("__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB260_24_F"))
	__asm(lbl("__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB260_14_F"))
		f8 =  (0)
		f10 =  ((__xasm<Number>(push((i0+120)), op(0x38))))
		f11 =  f2/*fextend*/
		f12 =  f10/*fextend*/
		f11 =  (f12 + f11)
		i1 =  (i0 + 120)
		f11 =  f11/*fround*/
		f8 =  f8/*fround*/
		f8 =  f8/*fextend*/
		f11 =  f11/*fextend*/
		__asm(push(f11>=f8), iftrue, target("__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB260_12_B"))
	__asm(lbl("__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB260_15_F"))
		f2 =  (0)
		f4 =  f9/*fextend*/
		f6 =  f19/*fextend*/
		f8 =  f21/*fextend*/
		f7 =  f7/*fextend*/
		f4 =  (f6 * f4)
		f6 =  (f7 * f8)
		f4 =  f4/*fround*/
		f6 =  f6/*fround*/
		f6 =  f6/*fextend*/
		f4 =  f4/*fextend*/
		f4 =  (f4 - f6)
		f4 =  f4/*fround*/
		f2 =  f2/*fround*/
		f2 =  f2/*fextend*/
		f6 =  f4/*fextend*/
		__asm(push(f6!=f2), iftrue, target("__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB260_17_F"))
	__asm(lbl("__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB260_16_F"))
		__asm(jump, target("__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB260_18_F"))
	__asm(lbl("__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB260_17_F"))
		f2 =  (1)
		f2 =  f2/*fround*/
		f4 =  f4/*fextend*/
		f2 =  f2/*fextend*/
		f2 =  (f2 / f4)
		f4 =  f2/*fround*/
	__asm(lbl("__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB260_18_F"))
		f2 = f4
		i2 =  (0)
		f4 =  f23/*fextend*/
		f6 =  f25/*fextend*/
		f4 =  (f6 - f4)
		f6 =  f16/*fextend*/
		f7 =  f19/*fextend*/
		f8 =  f14/*fextend*/
		f9 =  f21/*fextend*/
		f4 =  f4/*fround*/
		f6 =  (f7 * f6)
		f7 =  (f9 * f8)
		f6 =  f6/*fround*/
		f7 =  f7/*fround*/
		f4 =  f4/*fextend*/
		f2 =  f2/*fextend*/
		f4 =  (f4 * f2)
		f7 =  f7/*fextend*/
		f6 =  f6/*fextend*/
		f4 =  f4/*fround*/
		f6 =  (f6 - f7)
		f6 =  f6/*fround*/
		f7 =  ((__xasm<Number>(push((i0+112)), op(0x38))))
		f8 =  f4/*fextend*/
		f7 =  (f7 + f8)
		f6 =  f6/*fextend*/
		f7 =  f7/*fround*/
		f2 =  (f6 * f2)
		__asm(push(f7), push((i0+112)), op(0x3d))
		f2 =  f2/*fround*/
		f6 =  ((__xasm<Number>(push((i0+116)), op(0x38))))
		f7 =  f2/*fextend*/
		f6 =  (f6 + f7)
		f6 =  f6/*fround*/
		f7 =  f10/*fextend*/
		f7 =  -f7
		__asm(push(f6), push((i0+116)), op(0x3d))
		__asm(push(i2), push(i1), op(0x3c))
		f7 =  f7/*fround*/
		f6 = f2
		f2 = f7
		__asm(jump, target("__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB260_24_F"))
	__asm(lbl("__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB260_19_F"))
		f8 =  (0)
		f10 =  ((__xasm<Number>(push((i0+120)), op(0x38))))
		f11 =  f2/*fextend*/
		f12 =  f10/*fextend*/
		f11 =  (f12 + f11)
		i1 =  (i0 + 120)
		f11 =  f11/*fround*/
		f8 =  f8/*fround*/
		f8 =  f8/*fextend*/
		f11 =  f11/*fextend*/
		__asm(push(f11<=f8), iftrue, target("__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB260_12_B"))
	__asm(lbl("__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB260_20_F"))
		f2 =  (0)
		f4 =  f9/*fextend*/
		f6 =  f19/*fextend*/
		f8 =  f21/*fextend*/
		f7 =  f7/*fextend*/
		f4 =  (f6 * f4)
		f6 =  (f7 * f8)
		f4 =  f4/*fround*/
		f6 =  f6/*fround*/
		f6 =  f6/*fextend*/
		f4 =  f4/*fextend*/
		f4 =  (f4 - f6)
		f4 =  f4/*fround*/
		f2 =  f2/*fround*/
		f2 =  f2/*fextend*/
		f6 =  f4/*fextend*/
		__asm(push(f6!=f2), iftrue, target("__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB260_22_F"))
	__asm(lbl("__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB260_21_F"))
		__asm(jump, target("__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB260_23_F"))
	__asm(lbl("__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB260_22_F"))
		f2 =  (1)
		f2 =  f2/*fround*/
		f4 =  f4/*fextend*/
		f2 =  f2/*fextend*/
		f2 =  (f2 / f4)
		f4 =  f2/*fround*/
	__asm(lbl("__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB260_23_F"))
		f2 = f4
		i2 =  (0)
		f4 =  f23/*fextend*/
		f6 =  f25/*fextend*/
		f4 =  (f6 - f4)
		f6 =  f16/*fextend*/
		f7 =  f19/*fextend*/
		f8 =  f14/*fextend*/
		f9 =  f21/*fextend*/
		f4 =  f4/*fround*/
		f6 =  (f7 * f6)
		f7 =  (f9 * f8)
		f6 =  f6/*fround*/
		f7 =  f7/*fround*/
		f4 =  f4/*fextend*/
		f2 =  f2/*fextend*/
		f4 =  (f4 * f2)
		f7 =  f7/*fextend*/
		f6 =  f6/*fextend*/
		f4 =  f4/*fround*/
		f6 =  (f6 - f7)
		f6 =  f6/*fround*/
		f7 =  ((__xasm<Number>(push((i0+112)), op(0x38))))
		f8 =  f4/*fextend*/
		f7 =  (f7 + f8)
		f6 =  f6/*fextend*/
		f7 =  f7/*fround*/
		f2 =  (f6 * f2)
		__asm(push(f7), push((i0+112)), op(0x3d))
		f2 =  f2/*fround*/
		f6 =  ((__xasm<Number>(push((i0+116)), op(0x38))))
		f7 =  f2/*fextend*/
		f6 =  (f6 + f7)
		f6 =  f6/*fround*/
		f7 =  f10/*fextend*/
		f7 =  -f7
		__asm(push(f6), push((i0+116)), op(0x3d))
		__asm(push(i2), push(i1), op(0x3c))
		f7 =  f7/*fround*/
		f6 = f2
		f2 = f7
	__asm(lbl("__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB260_24_F"))
		f7 =  f13/*fextend*/
		f8 =  f6/*fextend*/
		f3 =  f3/*fextend*/
		f9 =  f17/*fextend*/
		f10 =  f4/*fextend*/
		f5 =  f5/*fextend*/
		f7 =  (f7 * f8)
		f3 =  (f3 * f8)
		f8 =  (f9 * f10)
		f5 =  (f5 * f10)
		f7 =  f7/*fround*/
		f3 =  f3/*fround*/
		f8 =  f8/*fround*/
		f5 =  f5/*fround*/
		f8 =  f8/*fextend*/
		f7 =  f7/*fextend*/
		f5 =  f5/*fextend*/
		f3 =  f3/*fextend*/
		f7 =  (f7 - f8)
		f3 =  (f3 - f5)
		f5 =  f7/*fround*/
		f3 =  f3/*fround*/
		f5 =  f5/*fextend*/
		f2 =  f2/*fextend*/
		f3 =  f3/*fextend*/
		f5 =  (f5 + f2)
		f2 =  (f3 + f2)
		f3 =  f5/*fround*/
		f2 =  f2/*fround*/
		f5 = f4
		f7 = f6
		__asm(jump, target("__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB260_29_F"))
	__asm(lbl("__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB260_25_F"))
		f2 =  (0)
		f3 =  ((__xasm<Number>(push((i0+108)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i2+40)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i0+104)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i2+36)), op(0x38))))
		f5 =  (f5 - f6)
		f3 =  (f3 - f4)
		f4 =  f5/*fround*/
		f3 =  f3/*fround*/
		f5 =  ((__xasm<Number>(push((i2+24)), op(0x38))))
		f4 =  f4/*fextend*/
		f6 =  ((__xasm<Number>(push((i2+20)), op(0x38))))
		f7 =  ((__xasm<Number>(push((i2+32)), op(0x38))))
		f3 =  f3/*fextend*/
		f8 =  ((__xasm<Number>(push((i2+28)), op(0x38))))
		f5 =  (f5 * f4)
		f4 =  (f6 * f4)
		f6 =  (f7 * f3)
		f3 =  (f8 * f3)
		f5 =  f5/*fround*/
		f4 =  f4/*fround*/
		f6 =  f6/*fround*/
		f3 =  f3/*fround*/
		f7 =  ((__xasm<Number>(push((i0+100)), op(0x38))))
		f8 =  ((__xasm<Number>(push((i1+40)), op(0x38))))
		f9 =  ((__xasm<Number>(push((i0+96)), op(0x38))))
		f10 =  ((__xasm<Number>(push((i1+36)), op(0x38))))
		f6 =  f6/*fextend*/
		f5 =  f5/*fextend*/
		f3 =  f3/*fextend*/
		f4 =  f4/*fextend*/
		f9 =  (f9 - f10)
		f5 =  (f5 + f6)
		f3 =  (f4 + f3)
		f4 =  (f7 - f8)
		f6 =  f9/*fround*/
		f5 =  f5/*fround*/
		f3 =  f3/*fround*/
		f4 =  f4/*fround*/
		f7 =  ((__xasm<Number>(push((i1+24)), op(0x38))))
		f6 =  f6/*fextend*/
		f8 =  ((__xasm<Number>(push((i1+20)), op(0x38))))
		f9 =  ((__xasm<Number>(push((i1+32)), op(0x38))))
		f4 =  f4/*fextend*/
		f10 =  ((__xasm<Number>(push((i1+28)), op(0x38))))
		f11 =  f5/*fextend*/
		f12 =  f1/*fextend*/
		f13 =  f3/*fextend*/
		f7 =  (f7 * f6)
		f6 =  (f8 * f6)
		f8 =  (f11 * f12)
		f11 =  (f13 * f12)
		f9 =  (f9 * f4)
		f4 =  (f10 * f4)
		f7 =  f7/*fround*/
		f6 =  f6/*fround*/
		f8 =  f8/*fround*/
		f10 =  f11/*fround*/
		f9 =  f9/*fround*/
		f4 =  f4/*fround*/
		f11 =  f0/*fextend*/
		f9 =  f9/*fextend*/
		f7 =  f7/*fextend*/
		f4 =  f4/*fextend*/
		f6 =  f6/*fextend*/
		f8 =  f8/*fextend*/
		f12 =  ((__xasm<Number>(push((mstate.ebp+-48)), op(0x38))))
		f12 =  f12/*fextend*/
		f10 =  f10/*fextend*/
		f13 =  ((__xasm<Number>(push((mstate.ebp+-40)), op(0x38))))
		f13 =  f13/*fextend*/
		f7 =  (f7 + f9)
		f4 =  (f6 + f4)
		f6 =  (f12 - f8)
		f8 =  (f13 + f10)
		f9 =  -f11
		f10 =  ((__xasm<Number>(push((i0+128)), op(0x38))))
		f12 =  ((__xasm<Number>(push((i0+140)), op(0x38))))
		f13 =  ((__xasm<Number>(push((i0+132)), op(0x38))))
		f14 =  ((__xasm<Number>(push((i0+144)), op(0x38))))
		f7 =  f7/*fround*/
		f4 =  f4/*fround*/
		f6 =  f6/*fround*/
		f8 =  f8/*fround*/
		f9 =  f9/*fround*/
		f15 =  f4/*fextend*/
		f9 =  f9/*fextend*/
		f16 =  f7/*fextend*/
		f17 =  ((__xasm<Number>(push((mstate.ebp+-64)), op(0x38))))
		f17 =  f17/*fextend*/
		f6 =  f6/*fextend*/
		f18 =  ((__xasm<Number>(push((mstate.ebp+-56)), op(0x38))))
		f18 =  f18/*fextend*/
		f8 =  f8/*fextend*/
		f19 =  f14/*fextend*/
		f20 =  f10/*fextend*/
		f21 =  f13/*fextend*/
		f22 =  f12/*fextend*/
		f9 =  (f16 * f9)
		f11 =  (f15 * f11)
		f6 =  (f6 - f17)
		f8 =  (f8 - f18)
		f15 =  (f20 * f19)
		f16 =  (f22 * f21)
		f9 =  f9/*fround*/
		f11 =  f11/*fround*/
		f6 =  f6/*fround*/
		f8 =  f8/*fround*/
		f15 =  f15/*fround*/
		f16 =  f16/*fround*/
		f6 =  f6/*fextend*/
		f9 =  f9/*fextend*/
		f8 =  f8/*fextend*/
		f11 =  f11/*fextend*/
		f16 =  f16/*fextend*/
		f15 =  f15/*fextend*/
		f6 =  (f9 - f6)
		f8 =  (f11 - f8)
		f9 =  (f15 - f16)
		f9 =  f9/*fround*/
		f6 =  f6/*fround*/
		f8 =  f8/*fround*/
		f2 =  f2/*fround*/
		f2 =  f2/*fextend*/
		f11 =  f9/*fextend*/
		__asm(push(f11!=f2), iftrue, target("__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB260_27_F"))
	__asm(lbl("__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB260_26_F"))
		f2 = f9
		__asm(jump, target("__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB260_28_F"))
	__asm(lbl("__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB260_27_F"))
		f2 =  (1)
		f2 =  f2/*fround*/
		f9 =  f9/*fextend*/
		f2 =  f2/*fextend*/
		f2 =  (f2 / f9)
		f2 =  f2/*fround*/
	__asm(lbl("__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB260_28_F"))
		f9 =  f14/*fextend*/
		f6 =  f6/*fextend*/
		f11 =  f12/*fextend*/
		f8 =  f8/*fextend*/
		f9 =  (f9 * f6)
		f11 =  (f11 * f8)
		f9 =  f9/*fround*/
		f12 =  f13/*fextend*/
		f11 =  f11/*fround*/
		f10 =  f10/*fextend*/
		f6 =  (f12 * f6)
		f8 =  (f10 * f8)
		f10 =  f11/*fextend*/
		f9 =  f9/*fextend*/
		f9 =  (f9 - f10)
		f6 =  f6/*fround*/
		f8 =  f8/*fround*/
		f9 =  f9/*fround*/
		f6 =  f6/*fextend*/
		f8 =  f8/*fextend*/
		f6 =  (f8 - f6)
		f8 =  f9/*fextend*/
		f2 =  f2/*fextend*/
		f8 =  (f8 * f2)
		f6 =  f6/*fround*/
		f8 =  f8/*fround*/
		f6 =  f6/*fextend*/
		f2 =  (f6 * f2)
		f6 =  ((__xasm<Number>(push((i0+112)), op(0x38))))
		f9 =  f8/*fextend*/
		f6 =  (f6 + f9)
		f2 =  f2/*fround*/
		f6 =  f6/*fround*/
		f7 =  f7/*fextend*/
		f5 =  f5/*fextend*/
		f4 =  f4/*fextend*/
		f10 =  f2/*fextend*/
		f3 =  f3/*fextend*/
		__asm(push(f6), push((i0+112)), op(0x3d))
		f6 =  (f7 * f9)
		f5 =  (f5 * f9)
		f4 =  (f4 * f10)
		f3 =  (f3 * f10)
		f7 =  ((__xasm<Number>(push((i0+116)), op(0x38))))
		f6 =  f6/*fround*/
		f5 =  f5/*fround*/
		f4 =  f4/*fround*/
		f3 =  f3/*fround*/
		f7 =  (f7 + f10)
		f6 =  f6/*fextend*/
		f4 =  f4/*fextend*/
		f5 =  f5/*fextend*/
		f3 =  f3/*fextend*/
		f7 =  f7/*fround*/
		f4 =  (f4 - f6)
		f3 =  (f3 - f5)
		__asm(push(f7), push((i0+116)), op(0x3d))
		f9 =  f4/*fround*/
		f10 =  f3/*fround*/
		f5 = f8
		f7 = f2
		f4 = f8
		f6 = f2
		f3 = f9
		f2 = f10
	__asm(lbl("__ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB260_29_F"))
		f5 =  f5/*fextend*/
		f8 =  ((__xasm<Number>(push((mstate.ebp+-16)), op(0x38))))
		f8 =  f8/*fextend*/
		f5 =  (f5 * f8)
		f7 =  f7/*fextend*/
		f5 =  f5/*fround*/
		f7 =  (f7 * f8)
		f8 =  ((__xasm<Number>(push((mstate.ebp+-32)), op(0x38))))
		f8 =  f8/*fextend*/
		f3 =  f3/*fextend*/
		f7 =  f7/*fround*/
		f3 =  (f3 * f8)
		f5 =  f5/*fextend*/
		f8 =  ((__xasm<Number>(push((mstate.ebp+-64)), op(0x38))))
		f8 =  f8/*fextend*/
		f4 =  f4/*fextend*/
		f9 =  ((__xasm<Number>(push((mstate.ebp+-8)), op(0x38))))
		f9 =  f9/*fextend*/
		f5 =  (f8 - f5)
		f4 =  (f4 * f9)
		f6 =  f6/*fextend*/
		f3 =  f3/*fround*/
		f7 =  f7/*fextend*/
		f8 =  ((__xasm<Number>(push((mstate.ebp+-56)), op(0x38))))
		f8 =  f8/*fextend*/
		f7 =  (f8 - f7)
		f4 =  f4/*fround*/
		f6 =  (f6 * f9)
		f5 =  f5/*fround*/
		f3 =  f3/*fextend*/
		f0 =  f0/*fextend*/
		f8 =  ((__xasm<Number>(push((mstate.ebp+-24)), op(0x38))))
		f8 =  f8/*fextend*/
		f2 =  f2/*fextend*/
		f6 =  f6/*fround*/
		f0 =  (f0 - f3)
		f2 =  (f2 * f8)
		__asm(push(f5), push(i9), op(0x3d))
		f3 =  f7/*fround*/
		f4 =  f4/*fextend*/
		f5 =  ((__xasm<Number>(push((mstate.ebp+-48)), op(0x38))))
		f5 =  f5/*fextend*/
		f4 =  (f5 + f4)
		f2 =  f2/*fround*/
		__asm(push(f3), push(i4), op(0x3d))
		f3 =  f6/*fextend*/
		f5 =  ((__xasm<Number>(push((mstate.ebp+-40)), op(0x38))))
		f5 =  f5/*fextend*/
		f0 =  f0/*fround*/
		f3 =  (f5 + f3)
		__asm(push(f0), push(i8), op(0x3d))
		f0 =  f4/*fround*/
		f1 =  f1/*fextend*/
		f2 =  f2/*fextend*/
		f1 =  (f2 + f1)
		__asm(push(f0), push(i7), op(0x3d))
		f0 =  f3/*fround*/
		__asm(push(f0), push(i5), op(0x3d))
		f0 =  f1/*fround*/
		__asm(push(f0), push(i6), op(0x3d))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZN15b2RevoluteJoint24SolvePositionConstraintsEf:int = regFunc(FSM__ZN15b2RevoluteJoint24SolvePositionConstraintsEf.start)

public final class FSM__ZN15b2RevoluteJoint24SolvePositionConstraintsEf extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
		var i8:int, i9:int, i10:int, i11:int, i12:int, i13:int, i14:int, i15:int
		var i16:int, i17:int, i18:int, i19:int, i20:int, i21:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number
		var f8:Number, f9:Number, f10:Number, f11:Number, f12:Number, f13:Number, f14:Number, f15:Number
		var f16:Number, f17:Number, f18:Number, f19:Number

		__asm(label, lbl("__ZN15b2RevoluteJoint24SolvePositionConstraintsEf_entry"))
	__asm(lbl("__ZN15b2RevoluteJoint24SolvePositionConstraintsEf__XprivateX__BB261_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+48)), op(0x37))))
		i2 =  ((__xasm<int>(push((i0+52)), op(0x37))))
		i3 =  ((__xasm<int>(push((i0+180)), op(0x35))))
		__asm(push(i3!=0), iftrue, target("__ZN15b2RevoluteJoint24SolvePositionConstraintsEf__XprivateX__BB261_2_F"))
	__asm(jump, target("__ZN15b2RevoluteJoint24SolvePositionConstraintsEf__XprivateX__BB261_1_F"), lbl("__ZN15b2RevoluteJoint24SolvePositionConstraintsEf__XprivateX__BB261_1_B"), label, lbl("__ZN15b2RevoluteJoint24SolvePositionConstraintsEf__XprivateX__BB261_1_F")); 
		f0 =  (0)
		f0 =  f0/*fround*/
		__asm(jump, target("__ZN15b2RevoluteJoint24SolvePositionConstraintsEf__XprivateX__BB261_13_F"))
	__asm(lbl("__ZN15b2RevoluteJoint24SolvePositionConstraintsEf__XprivateX__BB261_2_F"))
		i3 =  ((__xasm<int>(push((i0+196)), op(0x37))))
		__asm(push(i3==0), iftrue, target("__ZN15b2RevoluteJoint24SolvePositionConstraintsEf__XprivateX__BB261_1_B"))
	__asm(lbl("__ZN15b2RevoluteJoint24SolvePositionConstraintsEf__XprivateX__BB261_3_F"))
		f0 =  ((__xasm<Number>(push((i1+64)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i2+64)), op(0x38))))
		f2 =  f0/*fextend*/
		f1 =  (f1 - f2)
		f1 =  f1/*fround*/
		f2 =  ((__xasm<Number>(push((i0+184)), op(0x38))))
		f1 =  f1/*fextend*/
		f1 =  (f1 - f2)
		f1 =  f1/*fround*/
		i4 =  (i2 + 64)
		i5 =  (i1 + 64)
		__asm(push(i3==1), iftrue, target("__ZN15b2RevoluteJoint24SolvePositionConstraintsEf__XprivateX__BB261_10_F"))
	__asm(lbl("__ZN15b2RevoluteJoint24SolvePositionConstraintsEf__XprivateX__BB261_4_F"))
		__asm(push(i3==2), iftrue, target("__ZN15b2RevoluteJoint24SolvePositionConstraintsEf__XprivateX__BB261_11_F"))
	__asm(lbl("__ZN15b2RevoluteJoint24SolvePositionConstraintsEf__XprivateX__BB261_5_F"))
		__asm(push(i3==3), iftrue, target("__ZN15b2RevoluteJoint24SolvePositionConstraintsEf__XprivateX__BB261_7_F"))
	__asm(lbl("__ZN15b2RevoluteJoint24SolvePositionConstraintsEf__XprivateX__BB261_6_F"))
		f1 =  (0)
		f1 =  f1/*fround*/
		f2 = f1
		__asm(jump, target("__ZN15b2RevoluteJoint24SolvePositionConstraintsEf__XprivateX__BB261_12_F"))
	__asm(lbl("__ZN15b2RevoluteJoint24SolvePositionConstraintsEf__XprivateX__BB261_7_F"))
		f2 =  (0)
		f3 =  ((__xasm<Number>(push((i0+188)), op(0x38))))
		f1 =  f1/*fextend*/
		f1 =  (f1 - f3)
		f1 =  f1/*fround*/
		f3 =  ((__xasm<Number>(push(_b2_maxAngularCorrection), op(0x38))))
		f1 =  f1/*fextend*/
		f4 =  -f3
		f1 =  ((f1<f3) ? f1 : f3)
		f3 =  f4/*fround*/
		f1 =  f1/*fround*/
		f4 =  ((__xasm<Number>(push((i0+164)), op(0x38))))
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f1 =  ((f1<f3) ? f3 : f1)
		f3 =  -f4
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		f3 =  f3/*fextend*/
		f4 =  f1/*fextend*/
		f3 =  (f4 * f3)
		f3 =  f3/*fround*/
		f2 =  f2/*fround*/
		f2 =  f2/*fextend*/
		__asm(push(f4<=f2), iftrue, target("__ZN15b2RevoluteJoint24SolvePositionConstraintsEf__XprivateX__BB261_9_F"))
	__asm(lbl("__ZN15b2RevoluteJoint24SolvePositionConstraintsEf__XprivateX__BB261_8_F"))
		f2 = f1
		f1 = f3
		__asm(jump, target("__ZN15b2RevoluteJoint24SolvePositionConstraintsEf__XprivateX__BB261_12_F"))
	__asm(lbl("__ZN15b2RevoluteJoint24SolvePositionConstraintsEf__XprivateX__BB261_9_F"))
		f1 =  f1/*fextend*/
		f1 =  -f1
		f1 =  f1/*fround*/
		f2 = f1
		f1 = f3
		__asm(jump, target("__ZN15b2RevoluteJoint24SolvePositionConstraintsEf__XprivateX__BB261_12_F"))
	__asm(lbl("__ZN15b2RevoluteJoint24SolvePositionConstraintsEf__XprivateX__BB261_10_F"))
		f2 =  (0)
		f3 =  ((__xasm<Number>(push((i0+188)), op(0x38))))
		f1 =  f1/*fextend*/
		f4 =  (f1 - f3)
		f4 =  f4/*fround*/
		f5 =  ((__xasm<Number>(push(_b2_angularSlop), op(0x38))))
		f4 =  f4/*fextend*/
		f4 =  (f4 + f5)
		f4 =  f4/*fround*/
		f2 =  f2/*fround*/
		f5 =  ((__xasm<Number>(push(_b2_maxAngularCorrection), op(0x38))))
		f2 =  f2/*fextend*/
		f4 =  f4/*fextend*/
		f2 =  ((f4<f2) ? f4 : f2)
		f4 =  -f5
		f2 =  f2/*fround*/
		f4 =  f4/*fround*/
		f5 =  ((__xasm<Number>(push((i0+164)), op(0x38))))
		f4 =  f4/*fextend*/
		f2 =  f2/*fextend*/
		f2 =  ((f2<f4) ? f4 : f2)
		f4 =  -f5
		f2 =  f2/*fround*/
		f4 =  f4/*fround*/
		f4 =  f4/*fextend*/
		f2 =  f2/*fextend*/
		f2 =  (f2 * f4)
		f1 =  (f3 - f1)
		f3 =  f2/*fround*/
		f1 =  f1/*fround*/
		f2 = f1
		f1 = f3
		__asm(jump, target("__ZN15b2RevoluteJoint24SolvePositionConstraintsEf__XprivateX__BB261_12_F"))
	__asm(lbl("__ZN15b2RevoluteJoint24SolvePositionConstraintsEf__XprivateX__BB261_11_F"))
		f2 =  (0)
		f3 =  ((__xasm<Number>(push((i0+192)), op(0x38))))
		f1 =  f1/*fextend*/
		f1 =  (f1 - f3)
		f1 =  f1/*fround*/
		f3 =  ((__xasm<Number>(push(_b2_angularSlop), op(0x38))))
		f4 =  f1/*fextend*/
		f3 =  (f4 - f3)
		f3 =  f3/*fround*/
		f4 =  ((__xasm<Number>(push(_b2_maxAngularCorrection), op(0x38))))
		f3 =  f3/*fextend*/
		f3 =  ((f3<f4) ? f3 : f4)
		f3 =  f3/*fround*/
		f2 =  f2/*fround*/
		f4 =  ((__xasm<Number>(push((i0+164)), op(0x38))))
		f2 =  f2/*fextend*/
		f3 =  f3/*fextend*/
		f2 =  ((f3<f2) ? f2 : f3)
		f3 =  -f4
		f2 =  f2/*fround*/
		f3 =  f3/*fround*/
		f3 =  f3/*fextend*/
		f2 =  f2/*fextend*/
		f2 =  (f2 * f3)
		f3 =  f2/*fround*/
		f2 = f1
		f1 = f3
	__asm(lbl("__ZN15b2RevoluteJoint24SolvePositionConstraintsEf__XprivateX__BB261_12_F"))
		f3 =  ((__xasm<Number>(push((i1+136)), op(0x38))))
		f1 =  f1/*fextend*/
		f3 =  (f3 * f1)
		f3 =  f3/*fround*/
		f3 =  f3/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 - f3)
		f0 =  f0/*fround*/
		__asm(push(f0), push(i5), op(0x3d))
		f0 =  ((__xasm<Number>(push((i2+136)), op(0x38))))
		f0 =  (f0 * f1)
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push(i4), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f1 + f0)
		f0 =  f0/*fround*/
		__asm(push(f0), push(i4), op(0x3d))
		f1 =  ((__xasm<Number>(push(i5), op(0x38))))
		f0 = f1
		//InlineAsmStart
	f0 =  Math.cos(f0);

	//InlineAsmEnd
		f3 = f0
		f0 = f1
		//InlineAsmStart
	f0 =  Math.sin(f0);

	//InlineAsmEnd
		f1 =  f0/*fextend*/
		f4 =  -f1
		__asm(push(f3), push((i1+20)), op(0x3d))
		f4 =  f4/*fround*/
		__asm(push(f4), push((i1+28)), op(0x3d))
		__asm(push(f0), push((i1+24)), op(0x3d))
		__asm(push(f3), push((i1+32)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i1+36)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i1+40)), op(0x38))))
		f3 =  f3/*fextend*/
		f5 =  (f3 * f0)
		f6 =  (f4 * f1)
		f0 =  (f1 * f0)
		f1 =  f5/*fround*/
		f3 =  (f3 * f4)
		f4 =  f6/*fround*/
		f0 =  f0/*fround*/
		f3 =  f3/*fround*/
		f4 =  f4/*fextend*/
		f1 =  f1/*fextend*/
		f1 =  (f1 - f4)
		f3 =  f3/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 + f3)
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		f3 =  ((__xasm<Number>(push((i1+52)), op(0x38))))
		f1 =  f1/*fextend*/
		f4 =  ((__xasm<Number>(push((i1+56)), op(0x38))))
		f0 =  f0/*fextend*/
		f1 =  (f3 - f1)
		f0 =  (f4 - f0)
		f1 =  f1/*fround*/
		__asm(push(f1), push((i1+12)), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push((i1+16)), op(0x3d))
		f1 =  ((__xasm<Number>(push(i4), op(0x38))))
		f0 = f1
		//InlineAsmStart
	f0 =  Math.cos(f0);

	//InlineAsmEnd
		f3 = f0
		f0 = f1
		//InlineAsmStart
	f0 =  Math.sin(f0);

	//InlineAsmEnd
		f1 =  f0/*fextend*/
		f4 =  -f1
		__asm(push(f3), push((i2+20)), op(0x3d))
		f4 =  f4/*fround*/
		__asm(push(f4), push((i2+28)), op(0x3d))
		__asm(push(f0), push((i2+24)), op(0x3d))
		__asm(push(f3), push((i2+32)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i2+36)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i2+40)), op(0x38))))
		f3 =  f3/*fextend*/
		f5 =  (f3 * f0)
		f6 =  (f4 * f1)
		f0 =  (f1 * f0)
		f1 =  f5/*fround*/
		f3 =  (f3 * f4)
		f4 =  f6/*fround*/
		f0 =  f0/*fround*/
		f3 =  f3/*fround*/
		f4 =  f4/*fextend*/
		f1 =  f1/*fextend*/
		f1 =  (f1 - f4)
		f3 =  f3/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 + f3)
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		f3 =  ((__xasm<Number>(push((i2+52)), op(0x38))))
		f1 =  f1/*fextend*/
		f4 =  ((__xasm<Number>(push((i2+56)), op(0x38))))
		f0 =  f0/*fextend*/
		f1 =  (f3 - f1)
		f0 =  (f4 - f0)
		f1 =  f1/*fround*/
		__asm(push(f1), push((i2+12)), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push((i2+16)), op(0x3d))
		f0 = f2
	__asm(lbl("__ZN15b2RevoluteJoint24SolvePositionConstraintsEf__XprivateX__BB261_13_F"))
		f1 = f0
		f0 =  (10)
		f2 =  ((__xasm<Number>(push((i0+108)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i2+40)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i0+104)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i2+36)), op(0x38))))
		f4 =  (f4 - f5)
		f2 =  (f2 - f3)
		f3 =  f4/*fround*/
		f2 =  f2/*fround*/
		f4 =  ((__xasm<Number>(push((i2+24)), op(0x38))))
		f3 =  f3/*fextend*/
		f5 =  ((__xasm<Number>(push((i2+20)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i2+32)), op(0x38))))
		f2 =  f2/*fextend*/
		f7 =  ((__xasm<Number>(push((i2+28)), op(0x38))))
		f4 =  (f4 * f3)
		f3 =  (f5 * f3)
		f5 =  (f6 * f2)
		f2 =  (f7 * f2)
		f4 =  f4/*fround*/
		f3 =  f3/*fround*/
		f5 =  f5/*fround*/
		f2 =  f2/*fround*/
		f6 =  ((__xasm<Number>(push((i0+100)), op(0x38))))
		f7 =  ((__xasm<Number>(push((i1+40)), op(0x38))))
		f8 =  ((__xasm<Number>(push((i0+96)), op(0x38))))
		f9 =  ((__xasm<Number>(push((i1+36)), op(0x38))))
		f5 =  f5/*fextend*/
		f4 =  f4/*fextend*/
		f2 =  f2/*fextend*/
		f3 =  f3/*fextend*/
		f8 =  (f8 - f9)
		f4 =  (f4 + f5)
		f2 =  (f3 + f2)
		f3 =  (f6 - f7)
		f5 =  f8/*fround*/
		f4 =  f4/*fround*/
		f2 =  f2/*fround*/
		f3 =  f3/*fround*/
		f6 =  ((__xasm<Number>(push((i1+24)), op(0x38))))
		f5 =  f5/*fextend*/
		f7 =  ((__xasm<Number>(push((i1+20)), op(0x38))))
		f8 =  ((__xasm<Number>(push((i1+32)), op(0x38))))
		f3 =  f3/*fextend*/
		f9 =  ((__xasm<Number>(push((i1+28)), op(0x38))))
		f10 =  ((__xasm<Number>(push((i2+56)), op(0x38))))
		f11 =  f4/*fextend*/
		f12 =  ((__xasm<Number>(push((i2+52)), op(0x38))))
		f13 =  f2/*fextend*/
		f6 =  (f6 * f5)
		f5 =  (f7 * f5)
		f7 =  (f10 + f11)
		f10 =  (f12 + f13)
		f8 =  (f8 * f3)
		f3 =  (f9 * f3)
		f9 =  ((__xasm<Number>(push((i1+56)), op(0x38))))
		f11 =  ((__xasm<Number>(push((i1+52)), op(0x38))))
		f6 =  f6/*fround*/
		f5 =  f5/*fround*/
		f7 =  f7/*fround*/
		f10 =  f10/*fround*/
		f8 =  f8/*fround*/
		f3 =  f3/*fround*/
		f8 =  f8/*fextend*/
		f6 =  f6/*fextend*/
		f3 =  f3/*fextend*/
		f5 =  f5/*fextend*/
		f12 =  f9/*fextend*/
		f7 =  f7/*fextend*/
		f13 =  f11/*fextend*/
		f10 =  f10/*fextend*/
		f6 =  (f6 + f8)
		f3 =  (f5 + f3)
		f5 =  (f7 - f12)
		f7 =  (f10 - f13)
		f6 =  f6/*fround*/
		f3 =  f3/*fround*/
		f5 =  f5/*fround*/
		f7 =  f7/*fround*/
		f8 =  f6/*fextend*/
		f5 =  f5/*fextend*/
		f10 =  f3/*fextend*/
		f7 =  f7/*fextend*/
		f5 =  (f5 - f8)
		f7 =  (f7 - f10)
		f5 =  f5/*fround*/
		f7 =  f7/*fround*/
		f8 =  f5/*fextend*/
		f10 =  f7/*fextend*/
		f8 =  (f8 * f8)
		f10 =  (f10 * f10)
		f8 =  f8/*fround*/
		f10 =  f10/*fround*/
		f0 =  f0/*fround*/
		f8 =  f8/*fextend*/
		f10 =  f10/*fextend*/
		f8 =  (f10 + f8)
		f10 =  ((__xasm<Number>(push(_b2_linearSlop), op(0x38))))
		f0 =  f0/*fextend*/
		f8 =  f8/*fround*/
		f0 =  (f10 * f0)
		f8 =  f8/*fextend*/
		f0 =  f0/*fround*/
		f10 =  Math.sqrt(f8)
		f0 =  f0/*fextend*/
		f12 =  ((__xasm<Number>(push((i1+128)), op(0x38))))
		f13 =  ((__xasm<Number>(push((i2+128)), op(0x38))))
		f14 =  ((__xasm<Number>(push((i1+136)), op(0x38))))
		f15 =  ((__xasm<Number>(push((i2+136)), op(0x38))))
		f10 =  f10/*fround*/
		f0 =  (f0 * f0)
		i0 =  (i1 + 40)
		i3 =  (i1 + 20)
		i4 =  (i1 + 24)
		i5 =  (i1 + 28)
		i6 =  (i1 + 32)
		i7 =  (i2 + 40)
		i8 =  (i2 + 20)
		i9 =  (i2 + 24)
		i10 =  (i2 + 28)
		i11 =  (i2 + 32)
		i12 =  (i2 + 52)
		i13 =  (i2 + 56)
		i14 =  (i1 + 52)
		i15 =  (i1 + 56)
		i16 =  (i2 + 136)
		i17 =  (i1 + 136)
		i18 =  (i2 + 128)
		i19 =  (i1 + 128)
		i20 =  (i2 + 36)
		i21 =  (i1 + 36)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		__asm(push(f8>f0), iftrue, target("__ZN15b2RevoluteJoint24SolvePositionConstraintsEf__XprivateX__BB261_15_F"))
	__asm(lbl("__ZN15b2RevoluteJoint24SolvePositionConstraintsEf__XprivateX__BB261_14_F"))
		__asm(jump, target("__ZN15b2RevoluteJoint24SolvePositionConstraintsEf__XprivateX__BB261_19_F"))
	__asm(lbl("__ZN15b2RevoluteJoint24SolvePositionConstraintsEf__XprivateX__BB261_15_F"))
		f0 =  (0)
		f8 =  f13/*fextend*/
		f16 =  f12/*fextend*/
		f8 =  (f16 + f8)
		f8 =  f8/*fround*/
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f16 =  f8/*fextend*/
		__asm(push(f16>f0), iftrue, target("__ZN15b2RevoluteJoint24SolvePositionConstraintsEf__XprivateX__BB261_17_F"))
	__asm(lbl("__ZN15b2RevoluteJoint24SolvePositionConstraintsEf__XprivateX__BB261_16_F"))
		__asm(jump, target("__ZN15b2RevoluteJoint24SolvePositionConstraintsEf__XprivateX__BB261_18_F"))
	__asm(lbl("__ZN15b2RevoluteJoint24SolvePositionConstraintsEf__XprivateX__BB261_17_F"))
		f0 =  (1)
		f0 =  f0/*fround*/
		f8 =  f8/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 / f8)
		f8 =  f0/*fround*/
	__asm(lbl("__ZN15b2RevoluteJoint24SolvePositionConstraintsEf__XprivateX__BB261_18_F"))
		f0 = f8
		f8 =  (0.5)
		f7 =  f7/*fextend*/
		f5 =  f5/*fextend*/
		f7 =  -f7
		f5 =  -f5
		f7 =  f7/*fround*/
		f8 =  f8/*fround*/
		f5 =  f5/*fround*/
		f7 =  f7/*fextend*/
		f0 =  f0/*fextend*/
		f16 =  f12/*fextend*/
		f8 =  f8/*fextend*/
		f5 =  f5/*fextend*/
		f7 =  (f0 * f7)
		f16 =  (f16 * f8)
		f0 =  (f0 * f5)
		f5 =  f7/*fround*/
		f7 =  f16/*fround*/
		f0 =  f0/*fround*/
		f7 =  f7/*fextend*/
		f5 =  f5/*fextend*/
		f0 =  f0/*fextend*/
		f16 =  (f5 * f7)
		f7 =  (f0 * f7)
		f16 =  f16/*fround*/
		f17 =  f13/*fextend*/
		f7 =  f7/*fround*/
		f8 =  (f17 * f8)
		f16 =  f16/*fextend*/
		f11 =  f11/*fextend*/
		f11 =  (f11 - f16)
		f8 =  f8/*fround*/
		f7 =  f7/*fextend*/
		f9 =  f9/*fextend*/
		f8 =  f8/*fextend*/
		f7 =  (f9 - f7)
		f9 =  f11/*fround*/
		f5 =  (f5 * f8)
		__asm(push(f9), push(i14), op(0x3d))
		f7 =  f7/*fround*/
		f5 =  f5/*fround*/
		__asm(push(f7), push(i15), op(0x3d))
		f7 =  ((__xasm<Number>(push(i12), op(0x38))))
		f5 =  f5/*fextend*/
		f5 =  (f7 + f5)
		f5 =  f5/*fround*/
		f0 =  (f0 * f8)
		f7 =  f0/*fround*/
		__asm(push(f5), push(i12), op(0x3d))
		f0 =  ((__xasm<Number>(push(i13), op(0x38))))
		f7 =  f7/*fextend*/
		f0 =  (f0 + f7)
		f7 =  f0/*fround*/
		f0 =  f4/*fextend*/
		f8 =  f7/*fextend*/
		f9 =  f2/*fextend*/
		f5 =  f5/*fextend*/
		__asm(push(f7), push(i13), op(0x3d))
		f0 =  (f8 + f0)
		f5 =  (f5 + f9)
		f7 =  ((__xasm<Number>(push(i15), op(0x38))))
		f11 =  ((__xasm<Number>(push(i14), op(0x38))))
		f9 =  f0/*fround*/
		f5 =  f5/*fround*/
		f0 =  f7/*fextend*/
		f8 =  f9/*fextend*/
		f9 =  f11/*fextend*/
		f5 =  f5/*fextend*/
		f0 =  (f8 - f0)
		f5 =  (f5 - f9)
		f9 =  f0/*fround*/
		f5 =  f5/*fround*/
		f0 =  f6/*fextend*/
		f8 =  f9/*fextend*/
		f9 =  f3/*fextend*/
		f5 =  f5/*fextend*/
		f0 =  (f8 - f0)
		f5 =  (f5 - f9)
		f0 =  f0/*fround*/
		f5 =  f5/*fround*/
		f9 = f7
		f7 = f5
		f5 = f0
	__asm(lbl("__ZN15b2RevoluteJoint24SolvePositionConstraintsEf__XprivateX__BB261_19_F"))
		f0 = f9
		f8 = f11
		f9 =  (0)
		f11 =  f6/*fextend*/
		f14 =  f14/*fextend*/
		f16 =  f3/*fextend*/
		f17 =  (f11 * f14)
		f14 =  (f16 * f14)
		f17 =  f17/*fround*/
		f14 =  f14/*fround*/
		f14 =  f14/*fextend*/
		f17 =  f17/*fextend*/
		f13 =  f13/*fextend*/
		f12 =  f12/*fextend*/
		f18 =  f4/*fextend*/
		f15 =  f15/*fextend*/
		f19 =  f2/*fextend*/
		f12 =  (f12 + f13)
		f13 =  (f17 * f11)
		f11 =  (f14 * f11)
		f14 =  (f14 * f16)
		f16 =  (f18 * f15)
		f15 =  (f19 * f15)
		f12 =  f12/*fround*/
		f13 =  f13/*fround*/
		f11 =  f11/*fround*/
		f14 =  f14/*fround*/
		f16 =  f16/*fround*/
		f15 =  f15/*fround*/
		f9 =  f9/*fround*/
		f15 =  f15/*fextend*/
		f16 =  f16/*fextend*/
		f14 =  f14/*fextend*/
		f12 =  f12/*fextend*/
		f13 =  f13/*fextend*/
		f11 =  f11/*fextend*/
		f9 =  f9/*fextend*/
		f14 =  (f12 + f14)
		f12 =  (f12 + f13)
		f11 =  (f9 - f11)
		f13 =  (f16 * f18)
		f16 =  (f15 * f18)
		f15 =  (f15 * f19)
		f14 =  f14/*fround*/
		f12 =  f12/*fround*/
		f11 =  f11/*fround*/
		f13 =  f13/*fround*/
		f16 =  f16/*fround*/
		f15 =  f15/*fround*/
		f15 =  f15/*fextend*/
		f14 =  f14/*fextend*/
		f13 =  f13/*fextend*/
		f12 =  f12/*fextend*/
		f16 =  f16/*fextend*/
		f11 =  f11/*fextend*/
		f14 =  (f14 + f15)
		f12 =  (f12 + f13)
		f11 =  (f11 - f16)
		f13 =  f14/*fround*/
		f12 =  f12/*fround*/
		f11 =  f11/*fround*/
		f14 =  f11/*fextend*/
		f15 =  f13/*fextend*/
		f16 =  f12/*fextend*/
		f15 =  (f16 * f15)
		f14 =  (f14 * f14)
		f15 =  f15/*fround*/
		f14 =  f14/*fround*/
		f5 =  f5/*fextend*/
		f7 =  f7/*fextend*/
		f14 =  f14/*fextend*/
		f15 =  f15/*fextend*/
		f14 =  (f15 - f14)
		f5 =  -f5
		f7 =  -f7
		f14 =  f14/*fround*/
		f5 =  f5/*fround*/
		f7 =  f7/*fround*/
		f15 =  f14/*fextend*/
		__asm(push(f15!=f9), iftrue, target("__ZN15b2RevoluteJoint24SolvePositionConstraintsEf__XprivateX__BB261_21_F"))
	__asm(lbl("__ZN15b2RevoluteJoint24SolvePositionConstraintsEf__XprivateX__BB261_20_F"))
		__asm(jump, target("__ZN15b2RevoluteJoint24SolvePositionConstraintsEf__XprivateX__BB261_22_F"))
	__asm(lbl("__ZN15b2RevoluteJoint24SolvePositionConstraintsEf__XprivateX__BB261_21_F"))
		f9 =  (1)
		f9 =  f9/*fround*/
		f14 =  f14/*fextend*/
		f9 =  f9/*fextend*/
		f9 =  (f9 / f14)
		f14 =  f9/*fround*/
	__asm(lbl("__ZN15b2RevoluteJoint24SolvePositionConstraintsEf__XprivateX__BB261_22_F"))
		f9 = f14
		f13 =  f13/*fextend*/
		f7 =  f7/*fextend*/
		f11 =  f11/*fextend*/
		f5 =  f5/*fextend*/
		f13 =  (f13 * f7)
		f14 =  (f11 * f5)
		f12 =  f12/*fextend*/
		f13 =  f13/*fround*/
		f7 =  (f11 * f7)
		f11 =  f14/*fround*/
		f5 =  (f12 * f5)
		f7 =  f7/*fround*/
		f5 =  f5/*fround*/
		f11 =  f11/*fextend*/
		f12 =  f13/*fextend*/
		f11 =  (f12 - f11)
		f7 =  f7/*fextend*/
		f5 =  f5/*fextend*/
		f11 =  f11/*fround*/
		f5 =  (f5 - f7)
		f5 =  f5/*fround*/
		f7 =  f11/*fextend*/
		f9 =  f9/*fextend*/
		f7 =  (f7 * f9)
		f5 =  f5/*fextend*/
		f7 =  f7/*fround*/
		f5 =  (f5 * f9)
		f5 =  f5/*fround*/
		f9 =  ((__xasm<Number>(push(i19), op(0x38))))
		f7 =  f7/*fextend*/
		f11 =  (f7 * f9)
		f5 =  f5/*fextend*/
		f11 =  f11/*fround*/
		f6 =  f6/*fextend*/
		f9 =  (f5 * f9)
		f3 =  f3/*fextend*/
		f6 =  (f6 * f7)
		f9 =  f9/*fround*/
		f3 =  (f3 * f5)
		f11 =  f11/*fextend*/
		f8 =  f8/*fextend*/
		f8 =  (f8 - f11)
		f6 =  f6/*fround*/
		f3 =  f3/*fround*/
		f9 =  f9/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 - f9)
		f8 =  f8/*fround*/
		f6 =  f6/*fextend*/
		f3 =  f3/*fextend*/
		f3 =  (f3 - f6)
		__asm(push(f8), push(i14), op(0x3d))
		f0 =  f0/*fround*/
		f3 =  f3/*fround*/
		__asm(push(f0), push(i15), op(0x3d))
		f0 =  ((__xasm<Number>(push(i17), op(0x38))))
		f3 =  f3/*fextend*/
		f0 =  (f0 * f3)
		f0 =  f0/*fround*/
		f3 =  ((__xasm<Number>(push((i1+64)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f3 - f0)
		f0 =  f0/*fround*/
		__asm(push(f0), push((i1+64)), op(0x3d))
		f0 =  ((__xasm<Number>(push(i18), op(0x38))))
		f3 =  (f7 * f0)
		f3 =  f3/*fround*/
		f6 =  ((__xasm<Number>(push(i12), op(0x38))))
		f3 =  f3/*fextend*/
		f3 =  (f6 + f3)
		f0 =  (f5 * f0)
		f4 =  f4/*fextend*/
		f2 =  f2/*fextend*/
		f3 =  f3/*fround*/
		f0 =  f0/*fround*/
		f4 =  (f4 * f7)
		f2 =  (f2 * f5)
		__asm(push(f3), push(i12), op(0x3d))
		f3 =  f4/*fround*/
		f2 =  f2/*fround*/
		f4 =  ((__xasm<Number>(push(i13), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f4 + f0)
		f3 =  f3/*fextend*/
		f2 =  f2/*fextend*/
		f0 =  f0/*fround*/
		f2 =  (f2 - f3)
		f2 =  f2/*fround*/
		__asm(push(f0), push(i13), op(0x3d))
		f0 =  ((__xasm<Number>(push(i16), op(0x38))))
		f2 =  f2/*fextend*/
		f0 =  (f0 * f2)
		f0 =  f0/*fround*/
		f2 =  ((__xasm<Number>(push((i2+64)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f2 + f0)
		f0 =  f0/*fround*/
		__asm(push(f0), push((i2+64)), op(0x3d))
		f2 =  ((__xasm<Number>(push((i1+64)), op(0x38))))
		f0 = f2
		//InlineAsmStart
	f0 =  Math.cos(f0);

	//InlineAsmEnd
		f3 = f0
		f0 = f2
		//InlineAsmStart
	f0 =  Math.sin(f0);

	//InlineAsmEnd
		f2 =  f0/*fextend*/
		f4 =  -f2
		__asm(push(f3), push(i3), op(0x3d))
		f4 =  f4/*fround*/
		__asm(push(f4), push(i5), op(0x3d))
		__asm(push(f0), push(i4), op(0x3d))
		__asm(push(f3), push(i6), op(0x3d))
		f0 =  ((__xasm<Number>(push(i21), op(0x38))))
		f4 =  ((__xasm<Number>(push(i0), op(0x38))))
		f3 =  f3/*fextend*/
		f5 =  (f3 * f0)
		f6 =  (f4 * f2)
		f0 =  (f2 * f0)
		f2 =  f5/*fround*/
		f3 =  (f3 * f4)
		f4 =  f6/*fround*/
		f0 =  f0/*fround*/
		f3 =  f3/*fround*/
		f4 =  f4/*fextend*/
		f2 =  f2/*fextend*/
		f2 =  (f2 - f4)
		f3 =  f3/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 + f3)
		f2 =  f2/*fround*/
		f0 =  f0/*fround*/
		f3 =  ((__xasm<Number>(push(i14), op(0x38))))
		f2 =  f2/*fextend*/
		f4 =  ((__xasm<Number>(push(i15), op(0x38))))
		f0 =  f0/*fextend*/
		f2 =  (f3 - f2)
		f0 =  (f4 - f0)
		f2 =  f2/*fround*/
		__asm(push(f2), push((i1+12)), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push((i1+16)), op(0x3d))
		f2 =  ((__xasm<Number>(push((i2+64)), op(0x38))))
		f0 = f2
		//InlineAsmStart
	f0 =  Math.cos(f0);

	//InlineAsmEnd
		f3 = f0
		f0 = f2
		//InlineAsmStart
	f0 =  Math.sin(f0);

	//InlineAsmEnd
		f2 =  f0/*fextend*/
		f4 =  -f2
		__asm(push(f3), push(i8), op(0x3d))
		f4 =  f4/*fround*/
		__asm(push(f4), push(i10), op(0x3d))
		__asm(push(f0), push(i9), op(0x3d))
		__asm(push(f3), push(i11), op(0x3d))
		f0 =  ((__xasm<Number>(push(i20), op(0x38))))
		f4 =  ((__xasm<Number>(push(i7), op(0x38))))
		f3 =  f3/*fextend*/
		f5 =  (f3 * f0)
		f6 =  (f4 * f2)
		f0 =  (f2 * f0)
		f2 =  f5/*fround*/
		f3 =  (f3 * f4)
		f4 =  f6/*fround*/
		f0 =  f0/*fround*/
		f3 =  f3/*fround*/
		f4 =  f4/*fextend*/
		f2 =  f2/*fextend*/
		f2 =  (f2 - f4)
		f3 =  f3/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 + f3)
		f2 =  f2/*fround*/
		f0 =  f0/*fround*/
		f3 =  ((__xasm<Number>(push(i12), op(0x38))))
		f2 =  f2/*fextend*/
		f4 =  ((__xasm<Number>(push(i13), op(0x38))))
		f0 =  f0/*fextend*/
		f2 =  (f3 - f2)
		f0 =  (f4 - f0)
		f2 =  f2/*fround*/
		__asm(push(f2), push((i2+12)), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push((i2+16)), op(0x3d))
		f0 =  ((__xasm<Number>(push(_b2_linearSlop), op(0x38))))
		f2 =  f10/*fextend*/
		__asm(push(f2>f0), iftrue, target("__ZN15b2RevoluteJoint24SolvePositionConstraintsEf__XprivateX__BB261_24_F"))
	__asm(lbl("__ZN15b2RevoluteJoint24SolvePositionConstraintsEf__XprivateX__BB261_23_F"))
		f0 =  ((__xasm<Number>(push(_b2_angularSlop), op(0x38))))
		f1 =  f1/*fextend*/
		i0 =  ((f1<=f0) ? 1 : 0)
		i0 =  (i0 & 1)
		__asm(jump, target("__ZN15b2RevoluteJoint24SolvePositionConstraintsEf__XprivateX__BB261_25_F"))
	__asm(lbl("__ZN15b2RevoluteJoint24SolvePositionConstraintsEf__XprivateX__BB261_24_F"))
		i0 =  (0)
	__asm(lbl("__ZN15b2RevoluteJoint24SolvePositionConstraintsEf__XprivateX__BB261_25_F"))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZNK15b2FrictionJoint10GetAnchorAEv:int = regFunc(FSM__ZNK15b2FrictionJoint10GetAnchorAEv.start)

public final class FSM__ZNK15b2FrictionJoint10GetAnchorAEv extends Machine {

	public static function start():void {
		var i0:int, i1:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number

		__asm(label, lbl("__ZNK15b2FrictionJoint10GetAnchorAEv_entry"))
	__asm(lbl("__ZNK15b2FrictionJoint10GetAnchorAEv__XprivateX__BB262_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 8
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+48)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i1+20)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i0+96)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i1+24)), op(0x38))))
		f2 =  (f2 * f1)
		f0 =  (f0 * f1)
		f1 =  f2/*fround*/
		f0 =  f0/*fround*/
		f2 =  ((__xasm<Number>(push((i1+12)), op(0x38))))
		f0 =  f0/*fextend*/
		f3 =  ((__xasm<Number>(push((i1+28)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i0+100)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i1+32)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i1+16)), op(0x38))))
		f1 =  f1/*fextend*/
		f0 =  (f2 + f0)
		f2 =  (f5 * f4)
		f1 =  (f6 + f1)
		f3 =  (f3 * f4)
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		f3 =  f3/*fextend*/
		f0 =  f0/*fextend*/
		f2 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  (f0 + f3)
		f1 =  (f1 + f2)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		__asm(push(f0), push((mstate.ebp+-8)), op(0x3d))
		__asm(push(f1), push((mstate.ebp+-4)), op(0x3d))
		i0 =  ((__xasm<int>(push((mstate.ebp+-8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		mstate.edx = i1
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZNK15b2FrictionJoint10GetAnchorBEv:int = regFunc(FSM__ZNK15b2FrictionJoint10GetAnchorBEv.start)

public final class FSM__ZNK15b2FrictionJoint10GetAnchorBEv extends Machine {

	public static function start():void {
		var i0:int, i1:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number

		__asm(label, lbl("__ZNK15b2FrictionJoint10GetAnchorBEv_entry"))
	__asm(lbl("__ZNK15b2FrictionJoint10GetAnchorBEv__XprivateX__BB263_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 8
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+52)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i1+20)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i0+104)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i1+24)), op(0x38))))
		f2 =  (f2 * f1)
		f0 =  (f0 * f1)
		f1 =  f2/*fround*/
		f0 =  f0/*fround*/
		f2 =  ((__xasm<Number>(push((i1+12)), op(0x38))))
		f0 =  f0/*fextend*/
		f3 =  ((__xasm<Number>(push((i1+28)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i0+108)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i1+32)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i1+16)), op(0x38))))
		f1 =  f1/*fextend*/
		f0 =  (f2 + f0)
		f2 =  (f5 * f4)
		f1 =  (f6 + f1)
		f3 =  (f3 * f4)
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		f3 =  f3/*fextend*/
		f0 =  f0/*fextend*/
		f2 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  (f0 + f3)
		f1 =  (f1 + f2)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		__asm(push(f0), push((mstate.ebp+-8)), op(0x3d))
		__asm(push(f1), push((mstate.ebp+-4)), op(0x3d))
		i0 =  ((__xasm<int>(push((mstate.ebp+-8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		mstate.edx = i1
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZNK15b2FrictionJoint16GetReactionForceEf:int = regFunc(FSM__ZNK15b2FrictionJoint16GetReactionForceEf.start)

public final class FSM__ZNK15b2FrictionJoint16GetReactionForceEf extends Machine {

	public static function start():void {
		var i0:int, i1:int

		var f0:Number, f1:Number, f2:Number

		__asm(label, lbl("__ZNK15b2FrictionJoint16GetReactionForceEf_entry"))
	__asm(lbl("__ZNK15b2FrictionJoint16GetReactionForceEf__XprivateX__BB264_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 8
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i0+132)), op(0x38))))
		f1 =  ((__xasm<Number>(push((mstate.ebp+12)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i0+136)), op(0x38))))
		f0 =  (f0 * f1)
		f1 =  (f2 * f1)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		__asm(push(f0), push((mstate.ebp+-8)), op(0x3d))
		__asm(push(f1), push((mstate.ebp+-4)), op(0x3d))
		i0 =  ((__xasm<int>(push((mstate.ebp+-8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		mstate.edx = i1
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZNK15b2FrictionJoint17GetReactionTorqueEf:int = regFunc(FSM__ZNK15b2FrictionJoint17GetReactionTorqueEf.start)

public final class FSM__ZNK15b2FrictionJoint17GetReactionTorqueEf extends Machine {

	public static function start():void {
		var i0:int

		var f0:Number, f1:Number

		__asm(label, lbl("__ZNK15b2FrictionJoint17GetReactionTorqueEf_entry"))
	__asm(lbl("__ZNK15b2FrictionJoint17GetReactionTorqueEf__XprivateX__BB265_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i0+140)), op(0x38))))
		f1 =  ((__xasm<Number>(push((mstate.ebp+12)), op(0x38))))
		f0 =  (f0 * f1)
		f0 =  f0/*fround*/
		mstate.st0 = f0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Async
public const __ZN15b2FrictionJointD1Ev:int = regFunc(FSM__ZN15b2FrictionJointD1Ev.start)

public final class FSM__ZN15b2FrictionJointD1Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN15b2FrictionJointD1Ev = new FSM__ZN15b2FrictionJointD1Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN15b2FrictionJointD1Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN15b2FrictionJointD1Ev_errState",
			"__ZN15b2FrictionJointD1Ev_state0"))
	__asm(lbl("__ZN15b2FrictionJointD1Ev_state0"))
	__asm(lbl("__ZN15b2FrictionJointD1Ev__XprivateX__BB266_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV7b2Joint)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN15b2FrictionJointD1Ev_errState"))
		throw("Invalid state in __ZN15b2FrictionJointD1Ev")
	}
}



// Async
public const __ZN15b2FrictionJointD0Ev:int = regFunc(FSM__ZN15b2FrictionJointD0Ev.start)

public final class FSM__ZN15b2FrictionJointD0Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN15b2FrictionJointD0Ev = new FSM__ZN15b2FrictionJointD0Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN15b2FrictionJointD0Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN15b2FrictionJointD0Ev_errState",
			"__ZN15b2FrictionJointD0Ev_state0",
			"__ZN15b2FrictionJointD0Ev_state1"))
	__asm(lbl("__ZN15b2FrictionJointD0Ev_state0"))
	__asm(lbl("__ZN15b2FrictionJointD0Ev__XprivateX__BB267_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV7b2Joint)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		__asm(push(i1==0), iftrue, target("__ZN15b2FrictionJointD0Ev__XprivateX__BB267_2_F"))
	__asm(lbl("__ZN15b2FrictionJointD0Ev__XprivateX__BB267_1_F"))
		i0 =  (0)
		mstate.esp -= 8
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN15b2FrictionJointD0Ev_state1"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__ZN15b2FrictionJointD0Ev__XprivateX__BB267_2_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN15b2FrictionJointD0Ev_errState"))
		throw("Invalid state in __ZN15b2FrictionJointD0Ev")
	}
}



// Sync
public const __ZN15b2FrictionJoint23InitVelocityConstraintsERK10b2TimeStep:int = regFunc(FSM__ZN15b2FrictionJoint23InitVelocityConstraintsERK10b2TimeStep.start)

public final class FSM__ZN15b2FrictionJoint23InitVelocityConstraintsERK10b2TimeStep extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int, i4:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number
		var f8:Number, f9:Number, f10:Number, f11:Number, f12:Number, f13:Number, f14:Number, f15:Number
		var f16:Number, f17:Number

		__asm(label, lbl("__ZN15b2FrictionJoint23InitVelocityConstraintsERK10b2TimeStep_entry"))
	__asm(lbl("__ZN15b2FrictionJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB268_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		f0 =  (0)
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+48)), op(0x37))))
		f1 =  ((__xasm<Number>(push((i0+100)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i1+40)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i0+96)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i1+36)), op(0x38))))
		f3 =  (f3 - f4)
		f1 =  (f1 - f2)
		f2 =  f3/*fround*/
		f1 =  f1/*fround*/
		i2 =  ((__xasm<int>(push((i0+52)), op(0x37))))
		f3 =  ((__xasm<Number>(push((i1+24)), op(0x38))))
		f2 =  f2/*fextend*/
		f4 =  ((__xasm<Number>(push((i1+20)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i1+32)), op(0x38))))
		f1 =  f1/*fextend*/
		f6 =  ((__xasm<Number>(push((i1+28)), op(0x38))))
		f7 =  ((__xasm<Number>(push((i0+108)), op(0x38))))
		f8 =  ((__xasm<Number>(push((i2+40)), op(0x38))))
		f9 =  ((__xasm<Number>(push((i0+104)), op(0x38))))
		f10 =  ((__xasm<Number>(push((i2+36)), op(0x38))))
		f3 =  (f3 * f2)
		f2 =  (f4 * f2)
		f4 =  (f5 * f1)
		f1 =  (f6 * f1)
		f5 =  (f9 - f10)
		f6 =  (f7 - f8)
		f3 =  f3/*fround*/
		f2 =  f2/*fround*/
		f4 =  f4/*fround*/
		f1 =  f1/*fround*/
		f5 =  f5/*fround*/
		f6 =  f6/*fround*/
		f7 =  ((__xasm<Number>(push((i2+24)), op(0x38))))
		f5 =  f5/*fextend*/
		f8 =  ((__xasm<Number>(push((i2+20)), op(0x38))))
		f9 =  ((__xasm<Number>(push((i2+32)), op(0x38))))
		f6 =  f6/*fextend*/
		f10 =  ((__xasm<Number>(push((i2+28)), op(0x38))))
		f4 =  f4/*fextend*/
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f2 =  f2/*fextend*/
		f3 =  (f3 + f4)
		f1 =  (f2 + f1)
		f2 =  (f7 * f5)
		f4 =  (f8 * f5)
		f5 =  (f9 * f6)
		f6 =  (f10 * f6)
		f7 =  ((__xasm<Number>(push((i1+136)), op(0x38))))
		f3 =  f3/*fround*/
		f1 =  f1/*fround*/
		f2 =  f2/*fround*/
		f4 =  f4/*fround*/
		f5 =  f5/*fround*/
		f6 =  f6/*fround*/
		f8 =  f3/*fextend*/
		f9 =  f7/*fextend*/
		f10 =  f1/*fextend*/
		f5 =  f5/*fextend*/
		f2 =  f2/*fextend*/
		f6 =  f6/*fextend*/
		f4 =  f4/*fextend*/
		f11 =  (f8 * f9)
		f9 =  (f10 * f9)
		f2 =  (f2 + f5)
		f4 =  (f4 + f6)
		f5 =  ((__xasm<Number>(push((i1+128)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i2+128)), op(0x38))))
		f12 =  ((__xasm<Number>(push((i2+136)), op(0x38))))
		f11 =  f11/*fround*/
		f9 =  f9/*fround*/
		f2 =  f2/*fround*/
		f4 =  f4/*fround*/
		f9 =  f9/*fextend*/
		f11 =  f11/*fextend*/
		f13 =  f6/*fextend*/
		f14 =  f5/*fextend*/
		f15 =  f2/*fextend*/
		f16 =  f12/*fextend*/
		f17 =  f4/*fextend*/
		f11 =  (f11 * f8)
		f8 =  (f9 * f8)
		f9 =  (f9 * f10)
		f10 =  (f14 + f13)
		f13 =  (f15 * f16)
		f14 =  (f17 * f16)
		f11 =  f11/*fround*/
		f8 =  f8/*fround*/
		f9 =  f9/*fround*/
		f10 =  f10/*fround*/
		f13 =  f13/*fround*/
		f14 =  f14/*fround*/
		f0 =  f0/*fround*/
		f14 =  f14/*fextend*/
		f13 =  f13/*fextend*/
		f11 =  f11/*fextend*/
		f10 =  f10/*fextend*/
		f9 =  f9/*fextend*/
		f8 =  f8/*fextend*/
		f0 =  f0/*fextend*/
		f11 =  (f10 + f11)
		f8 =  (f0 - f8)
		f9 =  (f10 + f9)
		f10 =  (f13 * f15)
		f13 =  (f14 * f15)
		f14 =  (f14 * f17)
		f11 =  f11/*fround*/
		f8 =  f8/*fround*/
		f9 =  f9/*fround*/
		f10 =  f10/*fround*/
		f13 =  f13/*fround*/
		f14 =  f14/*fround*/
		f10 =  f10/*fextend*/
		f11 =  f11/*fextend*/
		f13 =  f13/*fextend*/
		f8 =  f8/*fextend*/
		f14 =  f14/*fextend*/
		f9 =  f9/*fextend*/
		f10 =  (f11 + f10)
		f8 =  (f8 - f13)
		f9 =  (f9 + f14)
		f10 =  f10/*fround*/
		f8 =  f8/*fround*/
		f9 =  f9/*fround*/
		f11 =  f8/*fextend*/
		f13 =  f9/*fextend*/
		f14 =  f10/*fextend*/
		f13 =  (f14 * f13)
		f11 =  (f11 * f11)
		f13 =  f13/*fround*/
		f11 =  f11/*fround*/
		f11 =  f11/*fextend*/
		f13 =  f13/*fextend*/
		f11 =  (f13 - f11)
		f11 =  f11/*fround*/
		i3 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		f13 =  f11/*fextend*/
		__asm(push(f13!=f0), iftrue, target("__ZN15b2FrictionJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB268_2_F"))
	__asm(lbl("__ZN15b2FrictionJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB268_1_F"))
		__asm(jump, target("__ZN15b2FrictionJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB268_3_F"))
	__asm(lbl("__ZN15b2FrictionJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB268_2_F"))
		f0 =  (1)
		f0 =  f0/*fround*/
		f11 =  f11/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 / f11)
		f11 =  f0/*fround*/
	__asm(lbl("__ZN15b2FrictionJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB268_3_F"))
		f0 = f11
		f11 =  (0)
		f0 =  f0/*fextend*/
		f13 =  -f0
		f9 =  f9/*fextend*/
		f13 =  f13/*fround*/
		f9 =  (f0 * f9)
		f13 =  f13/*fextend*/
		f8 =  f8/*fextend*/
		f8 =  (f8 * f13)
		f9 =  f9/*fround*/
		f10 =  f10/*fextend*/
		__asm(push(f9), push((i0+112)), op(0x3d))
		f8 =  f8/*fround*/
		__asm(push(f8), push((i0+116)), op(0x3d))
		f0 =  (f0 * f10)
		f9 =  f12/*fextend*/
		f10 =  f7/*fextend*/
		f9 =  (f10 + f9)
		__asm(push(f8), push((i0+120)), op(0x3d))
		f0 =  f0/*fround*/
		f8 =  f9/*fround*/
		__asm(push(f0), push((i0+124)), op(0x3d))
		i4 =  (i0 + 128)
		f0 =  f11/*fround*/
		f0 =  f0/*fextend*/
		f9 =  f8/*fextend*/
		__asm(push(f9>f0), iftrue, target("__ZN15b2FrictionJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB268_5_F"))
	__asm(lbl("__ZN15b2FrictionJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB268_4_F"))
		__asm(jump, target("__ZN15b2FrictionJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB268_6_F"))
	__asm(lbl("__ZN15b2FrictionJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB268_5_F"))
		f0 =  (1)
		f0 =  f0/*fround*/
		f8 =  f8/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 / f8)
		f8 =  f0/*fround*/
	__asm(lbl("__ZN15b2FrictionJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB268_6_F"))
		f0 = f8
		__asm(push(f0), push(i4), op(0x3d))
		i4 =  ((__xasm<int>(push((i3+20)), op(0x35))))
		__asm(push(i4==0), iftrue, target("__ZN15b2FrictionJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB268_8_F"))
	__asm(lbl("__ZN15b2FrictionJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB268_7_F"))
		f0 =  ((__xasm<Number>(push((i3+8)), op(0x38))))
		f8 =  ((__xasm<Number>(push((i0+132)), op(0x38))))
		f8 =  (f8 * f0)
		f8 =  f8/*fround*/
		__asm(push(f8), push((i0+132)), op(0x3d))
		f9 =  ((__xasm<Number>(push((i0+136)), op(0x38))))
		f0 =  (f9 * f0)
		f0 =  f0/*fround*/
		__asm(push(f0), push((i0+136)), op(0x3d))
		f9 =  ((__xasm<Number>(push((i0+140)), op(0x38))))
		f10 =  ((__xasm<Number>(push((i3+8)), op(0x38))))
		f9 =  (f9 * f10)
		f5 =  f5/*fextend*/
		f8 =  f8/*fextend*/
		f10 =  (f8 * f5)
		f9 =  f9/*fround*/
		f10 =  f10/*fround*/
		__asm(push(f9), push((i0+140)), op(0x3d))
		f9 =  ((__xasm<Number>(push((i1+72)), op(0x38))))
		f10 =  f10/*fextend*/
		f9 =  (f9 - f10)
		f0 =  f0/*fextend*/
		f9 =  f9/*fround*/
		f5 =  (f0 * f5)
		f1 =  f1/*fextend*/
		f3 =  f3/*fextend*/
		__asm(push(f9), push((i1+72)), op(0x3d))
		f5 =  f5/*fround*/
		f1 =  (f1 * f0)
		f3 =  (f3 * f8)
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		f9 =  ((__xasm<Number>(push((i1+76)), op(0x38))))
		f5 =  f5/*fextend*/
		f5 =  (f9 - f5)
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f5 =  f5/*fround*/
		f1 =  (f1 - f3)
		__asm(push(f5), push((i1+76)), op(0x3d))
		f1 =  f1/*fround*/
		f3 =  ((__xasm<Number>(push((i0+140)), op(0x38))))
		f1 =  f1/*fextend*/
		f1 =  (f1 + f3)
		f1 =  f1/*fround*/
		f3 =  f7/*fextend*/
		f1 =  f1/*fextend*/
		f1 =  (f1 * f3)
		f1 =  f1/*fround*/
		f3 =  ((__xasm<Number>(push((i1+80)), op(0x38))))
		f1 =  f1/*fextend*/
		f5 =  f6/*fextend*/
		f1 =  (f3 - f1)
		f3 =  (f8 * f5)
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		__asm(push(f1), push((i1+80)), op(0x3d))
		f1 =  ((__xasm<Number>(push((i2+72)), op(0x38))))
		f3 =  f3/*fextend*/
		f1 =  (f1 + f3)
		f1 =  f1/*fround*/
		f3 =  (f0 * f5)
		f4 =  f4/*fextend*/
		f2 =  f2/*fextend*/
		__asm(push(f1), push((i2+72)), op(0x3d))
		f1 =  f3/*fround*/
		f0 =  (f4 * f0)
		f2 =  (f2 * f8)
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f3 =  ((__xasm<Number>(push((i2+76)), op(0x38))))
		f1 =  f1/*fextend*/
		f1 =  (f3 + f1)
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f1 =  f1/*fround*/
		f0 =  (f0 - f2)
		__asm(push(f1), push((i2+76)), op(0x3d))
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push((i0+140)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f0 + f1)
		f0 =  f0/*fround*/
		f1 =  f12/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 * f1)
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push((i2+80)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f1 + f0)
		f0 =  f0/*fround*/
		__asm(push(f0), push((i2+80)), op(0x3d))
		__asm(jump, target("__ZN15b2FrictionJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB268_9_F"))
	__asm(lbl("__ZN15b2FrictionJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB268_8_F"))
		i1 =  (0)
		__asm(push(i1), push((i0+132)), op(0x3c))
		__asm(push(i1), push((i0+136)), op(0x3c))
		__asm(push(i1), push((i0+140)), op(0x3c))
	__asm(lbl("__ZN15b2FrictionJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB268_9_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZN15b2FrictionJoint24SolveVelocityConstraintsERK10b2TimeStep:int = regFunc(FSM__ZN15b2FrictionJoint24SolveVelocityConstraintsERK10b2TimeStep.start)

public final class FSM__ZN15b2FrictionJoint24SolveVelocityConstraintsERK10b2TimeStep extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number
		var f8:Number, f9:Number, f10:Number, f11:Number, f12:Number, f13:Number, f14:Number, f15:Number
		var f16:Number, f17:Number, f18:Number, f19:Number, f20:Number, f21:Number

		__asm(label, lbl("__ZN15b2FrictionJoint24SolveVelocityConstraintsERK10b2TimeStep_entry"))
	__asm(lbl("__ZN15b2FrictionJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB269_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+48)), op(0x37))))
		i2 =  ((__xasm<int>(push((i0+52)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i1+80)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i2+80)), op(0x38))))
		f2 =  (f1 - f0)
		f2 =  f2/*fround*/
		f3 =  ((__xasm<Number>(push((i0+128)), op(0x38))))
		f2 =  f2/*fextend*/
		f2 =  (f2 * f3)
		f2 =  f2/*fround*/
		i3 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		f3 =  ((__xasm<Number>(push((i0+140)), op(0x38))))
		f2 =  f2/*fextend*/
		f4 =  ((__xasm<Number>(push(i3), op(0x38))))
		f5 =  ((__xasm<Number>(push((i0+148)), op(0x38))))
		f2 =  (f3 - f2)
		f4 =  (f4 * f5)
		f2 =  f2/*fround*/
		f4 =  f4/*fround*/
		f4 =  f4/*fextend*/
		f2 =  f2/*fextend*/
		f2 =  ((f2<f4) ? f2 : f4)
		f4 =  -f4
		f2 =  f2/*fround*/
		f4 =  f4/*fround*/
		f4 =  f4/*fextend*/
		f2 =  f2/*fextend*/
		f2 =  ((f2<f4) ? f4 : f2)
		f2 =  f2/*fround*/
		f4 =  f2/*fextend*/
		f5 =  ((__xasm<Number>(push((i0+108)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i2+40)), op(0x38))))
		f7 =  ((__xasm<Number>(push((i0+104)), op(0x38))))
		f8 =  ((__xasm<Number>(push((i2+36)), op(0x38))))
		f3 =  (f4 - f3)
		f4 =  (f7 - f8)
		f5 =  (f5 - f6)
		f6 =  ((__xasm<Number>(push((i2+136)), op(0x38))))
		f3 =  f3/*fround*/
		f4 =  f4/*fround*/
		f5 =  f5/*fround*/
		f7 =  ((__xasm<Number>(push((i2+24)), op(0x38))))
		f4 =  f4/*fextend*/
		f8 =  ((__xasm<Number>(push((i2+20)), op(0x38))))
		f9 =  ((__xasm<Number>(push((i2+32)), op(0x38))))
		f5 =  f5/*fextend*/
		f10 =  ((__xasm<Number>(push((i2+28)), op(0x38))))
		f3 =  f3/*fextend*/
		f11 =  f6/*fextend*/
		f11 =  (f11 * f3)
		f7 =  (f7 * f4)
		f4 =  (f8 * f4)
		f8 =  (f9 * f5)
		f5 =  (f10 * f5)
		f9 =  f11/*fround*/
		f7 =  f7/*fround*/
		f4 =  f4/*fround*/
		f8 =  f8/*fround*/
		f5 =  f5/*fround*/
		f9 =  f9/*fextend*/
		f10 =  ((__xasm<Number>(push((i0+100)), op(0x38))))
		f11 =  ((__xasm<Number>(push((i1+40)), op(0x38))))
		f12 =  ((__xasm<Number>(push((i0+96)), op(0x38))))
		f13 =  ((__xasm<Number>(push((i1+36)), op(0x38))))
		f8 =  f8/*fextend*/
		f7 =  f7/*fextend*/
		f5 =  f5/*fextend*/
		f4 =  f4/*fextend*/
		f1 =  (f9 + f1)
		f9 =  (f12 - f13)
		f10 =  (f10 - f11)
		f7 =  (f7 + f8)
		f4 =  (f4 + f5)
		f5 =  ((__xasm<Number>(push((i1+136)), op(0x38))))
		f1 =  f1/*fround*/
		f8 =  f9/*fround*/
		f9 =  f10/*fround*/
		f7 =  f7/*fround*/
		f4 =  f4/*fround*/
		f10 =  f5/*fextend*/
		f11 =  ((__xasm<Number>(push((i1+24)), op(0x38))))
		f8 =  f8/*fextend*/
		f12 =  ((__xasm<Number>(push((i1+20)), op(0x38))))
		f13 =  ((__xasm<Number>(push((i1+32)), op(0x38))))
		f9 =  f9/*fextend*/
		f14 =  ((__xasm<Number>(push((i1+28)), op(0x38))))
		f15 =  f4/*fextend*/
		f16 =  f1/*fextend*/
		f17 =  f7/*fextend*/
		f3 =  (f10 * f3)
		f10 =  (f15 * f16)
		f15 =  (f17 * f16)
		f11 =  (f11 * f8)
		f8 =  (f12 * f8)
		f12 =  (f13 * f9)
		f9 =  (f14 * f9)
		f13 =  ((__xasm<Number>(push((i2+72)), op(0x38))))
		f14 =  ((__xasm<Number>(push((i2+76)), op(0x38))))
		f3 =  f3/*fround*/
		f10 =  f10/*fround*/
		f15 =  f15/*fround*/
		f11 =  f11/*fround*/
		f8 =  f8/*fround*/
		f12 =  f12/*fround*/
		f9 =  f9/*fround*/
		f3 =  f3/*fextend*/
		f10 =  f10/*fextend*/
		f16 =  f14/*fextend*/
		f15 =  f15/*fextend*/
		f17 =  f13/*fextend*/
		f12 =  f12/*fextend*/
		f11 =  f11/*fextend*/
		f9 =  f9/*fextend*/
		f8 =  f8/*fextend*/
		f18 =  (f0 - f3)
		f0 =  (f3 - f0)
		f3 =  (f16 + f10)
		f10 =  (f17 - f15)
		f11 =  (f11 + f12)
		f8 =  (f8 + f9)
		f9 =  ((__xasm<Number>(push((i1+72)), op(0x38))))
		f12 =  ((__xasm<Number>(push((i1+76)), op(0x38))))
		f15 =  f18/*fround*/
		f0 =  f0/*fround*/
		f3 =  f3/*fround*/
		f10 =  f10/*fround*/
		f11 =  f11/*fround*/
		f8 =  f8/*fround*/
		f16 =  f9/*fextend*/
		f10 =  f10/*fextend*/
		f17 =  f15/*fextend*/
		f18 =  f8/*fextend*/
		f0 =  f0/*fextend*/
		f19 =  f11/*fextend*/
		f20 =  f12/*fextend*/
		f3 =  f3/*fextend*/
		f10 =  (f10 - f16)
		f16 =  (f18 * f17)
		f0 =  (f19 * f0)
		f3 =  (f3 - f20)
		f10 =  f10/*fround*/
		f16 =  f16/*fround*/
		f0 =  f0/*fround*/
		f3 =  f3/*fround*/
		f17 =  ((__xasm<Number>(push((i1+128)), op(0x38))))
		f18 =  ((__xasm<Number>(push((i2+128)), op(0x38))))
		f0 =  f0/*fextend*/
		f10 =  f10/*fextend*/
		f16 =  f16/*fextend*/
		f3 =  f3/*fextend*/
		f0 =  (f10 - f0)
		f3 =  (f3 - f16)
		__asm(push(f2), push((i0+140)), op(0x3d))
		f0 =  f0/*fround*/
		f2 =  f3/*fround*/
		f3 =  ((__xasm<Number>(push((i0+112)), op(0x38))))
		f0 =  f0/*fextend*/
		f10 =  ((__xasm<Number>(push((i0+120)), op(0x38))))
		f2 =  f2/*fextend*/
		f16 =  ((__xasm<Number>(push((i0+116)), op(0x38))))
		f19 =  ((__xasm<Number>(push((i0+124)), op(0x38))))
		f3 =  (f3 * f0)
		f10 =  (f10 * f2)
		f0 =  (f16 * f0)
		f2 =  (f19 * f2)
		f3 =  f3/*fround*/
		f10 =  f10/*fround*/
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f10 =  f10/*fextend*/
		f3 =  f3/*fextend*/
		f3 =  (f3 + f10)
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f10 =  ((__xasm<Number>(push((i0+132)), op(0x38))))
		f0 =  (f0 + f2)
		f2 =  f3/*fround*/
		f3 =  ((__xasm<Number>(push((i0+136)), op(0x38))))
		f0 =  f0/*fround*/
		f2 =  f2/*fextend*/
		f16 =  f10/*fextend*/
		f2 =  (f16 - f2)
		f0 =  f0/*fextend*/
		f16 =  f3/*fextend*/
		f0 =  (f16 - f0)
		f2 =  f2/*fround*/
		f0 =  f0/*fround*/
		__asm(push(f2), push((i0+132)), op(0x3d))
		__asm(push(f0), push((i0+136)), op(0x3d))
		f16 =  f0/*fextend*/
		f19 =  f2/*fextend*/
		f16 =  (f16 * f16)
		f19 =  (f19 * f19)
		f20 =  ((__xasm<Number>(push(i3), op(0x38))))
		f21 =  ((__xasm<Number>(push((i0+144)), op(0x38))))
		f20 =  (f20 * f21)
		f16 =  f16/*fround*/
		f19 =  f19/*fround*/
		f20 =  f20/*fround*/
		f16 =  f16/*fextend*/
		f19 =  f19/*fextend*/
		f21 =  f20/*fextend*/
		f16 =  (f19 + f16)
		f16 =  f16/*fround*/
		f19 =  (f21 * f21)
		i3 =  (i1 + 76)
		i4 =  (i2 + 76)
		i5 =  (i0 + 136)
		i0 =  (i0 + 132)
		i6 =  (i2 + 80)
		i2 =  (i2 + 72)
		i7 =  (i1 + 80)
		i1 =  (i1 + 72)
		f19 =  f19/*fround*/
		f19 =  f19/*fextend*/
		f21 =  f16/*fextend*/
		__asm(push(f21>f19), iftrue, target("__ZN15b2FrictionJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB269_2_F"))
	__asm(lbl("__ZN15b2FrictionJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB269_1_F"))
		__asm(jump, target("__ZN15b2FrictionJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB269_6_F"))
	__asm(lbl("__ZN15b2FrictionJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB269_2_F"))
		f19 =  (1.19209e-07)
		f16 =  f16/*fextend*/
		f16 =  Math.sqrt(f16)
		f16 =  f16/*fround*/
		f19 =  f19/*fround*/
		f19 =  f19/*fextend*/
		f21 =  f16/*fextend*/
		__asm(push(f21>=f19), iftrue, target("__ZN15b2FrictionJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB269_4_F"))
	__asm(lbl("__ZN15b2FrictionJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB269_3_F"))
		__asm(jump, target("__ZN15b2FrictionJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB269_5_F"))
	__asm(lbl("__ZN15b2FrictionJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB269_4_F"))
		f19 =  (1)
		f19 =  f19/*fround*/
		f16 =  f16/*fextend*/
		f19 =  f19/*fextend*/
		f16 =  (f19 / f16)
		f16 =  f16/*fround*/
		f2 =  f2/*fextend*/
		f16 =  f16/*fextend*/
		f2 =  (f2 * f16)
		f0 =  f0/*fextend*/
		f0 =  (f0 * f16)
		f2 =  f2/*fround*/
		__asm(push(f2), push(i0), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push(i5), op(0x3d))
	__asm(lbl("__ZN15b2FrictionJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB269_5_F"))
		f2 =  f2/*fextend*/
		f16 =  f20/*fextend*/
		f2 =  (f2 * f16)
		f0 =  f0/*fextend*/
		f0 =  (f0 * f16)
		f2 =  f2/*fround*/
		__asm(push(f2), push(i0), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push(i5), op(0x3d))
	__asm(lbl("__ZN15b2FrictionJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB269_6_F"))
		f3 =  f3/*fextend*/
		f0 =  f0/*fextend*/
		f10 =  f10/*fextend*/
		f2 =  f2/*fextend*/
		f0 =  (f0 - f3)
		f2 =  (f2 - f10)
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f3 =  f8/*fextend*/
		f0 =  f0/*fextend*/
		f8 =  f11/*fextend*/
		f2 =  f2/*fextend*/
		f3 =  (f3 * f0)
		f8 =  (f8 * f2)
		f3 =  f3/*fround*/
		f8 =  f8/*fround*/
		f4 =  f4/*fextend*/
		f7 =  f7/*fextend*/
		f8 =  f8/*fextend*/
		f3 =  f3/*fextend*/
		f10 =  f17/*fextend*/
		f3 =  (f3 - f8)
		f4 =  (f4 * f0)
		f7 =  (f7 * f2)
		f3 =  f3/*fround*/
		f4 =  f4/*fround*/
		f8 =  (f2 * f10)
		f7 =  f7/*fround*/
		f10 =  (f0 * f10)
		f8 =  f8/*fround*/
		f5 =  f5/*fextend*/
		f3 =  f3/*fextend*/
		f7 =  f7/*fextend*/
		f4 =  f4/*fextend*/
		f11 =  f18/*fextend*/
		f10 =  f10/*fround*/
		f3 =  (f3 * f5)
		f4 =  (f4 - f7)
		f5 =  f8/*fextend*/
		f7 =  f9/*fextend*/
		f3 =  f3/*fround*/
		f4 =  f4/*fround*/
		f5 =  (f7 - f5)
		f2 =  (f2 * f11)
		f7 =  f10/*fextend*/
		f8 =  f12/*fextend*/
		f7 =  (f8 - f7)
		f0 =  (f0 * f11)
		f2 =  f2/*fround*/
		f3 =  f3/*fextend*/
		f8 =  f15/*fextend*/
		f6 =  f6/*fextend*/
		f4 =  f4/*fextend*/
		f5 =  f5/*fround*/
		f3 =  (f8 - f3)
		f0 =  f0/*fround*/
		f4 =  (f4 * f6)
		__asm(push(f5), push(i1), op(0x3d))
		f5 =  f7/*fround*/
		f2 =  f2/*fextend*/
		f6 =  f13/*fextend*/
		f4 =  f4/*fround*/
		f2 =  (f6 + f2)
		__asm(push(f5), push(i3), op(0x3d))
		f3 =  f3/*fround*/
		f0 =  f0/*fextend*/
		f5 =  f14/*fextend*/
		f0 =  (f5 + f0)
		__asm(push(f3), push(i7), op(0x3d))
		f1 =  f1/*fextend*/
		f3 =  f4/*fextend*/
		f2 =  f2/*fround*/
		f1 =  (f3 + f1)
		__asm(push(f2), push(i2), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push(i4), op(0x3d))
		f0 =  f1/*fround*/
		__asm(push(f0), push(i6), op(0x3d))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZN15b2FrictionJoint24SolvePositionConstraintsEf:int = regFunc(FSM__ZN15b2FrictionJoint24SolvePositionConstraintsEf.start)

public final class FSM__ZN15b2FrictionJoint24SolvePositionConstraintsEf extends Machine {

	public static function start():void {
		var i0:int


		__asm(label, lbl("__ZN15b2FrictionJoint24SolvePositionConstraintsEf_entry"))
	__asm(lbl("__ZN15b2FrictionJoint24SolvePositionConstraintsEf__XprivateX__BB270_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (1)
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZNK11b2WeldJoint10GetAnchorAEv:int = regFunc(FSM__ZNK11b2WeldJoint10GetAnchorAEv.start)

public final class FSM__ZNK11b2WeldJoint10GetAnchorAEv extends Machine {

	public static function start():void {
		var i0:int, i1:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number

		__asm(label, lbl("__ZNK11b2WeldJoint10GetAnchorAEv_entry"))
	__asm(lbl("__ZNK11b2WeldJoint10GetAnchorAEv__XprivateX__BB271_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 8
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+48)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i1+20)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i0+96)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i1+24)), op(0x38))))
		f2 =  (f2 * f1)
		f0 =  (f0 * f1)
		f1 =  f2/*fround*/
		f0 =  f0/*fround*/
		f2 =  ((__xasm<Number>(push((i1+12)), op(0x38))))
		f0 =  f0/*fextend*/
		f3 =  ((__xasm<Number>(push((i1+28)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i0+100)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i1+32)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i1+16)), op(0x38))))
		f1 =  f1/*fextend*/
		f0 =  (f2 + f0)
		f2 =  (f5 * f4)
		f1 =  (f6 + f1)
		f3 =  (f3 * f4)
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		f3 =  f3/*fextend*/
		f0 =  f0/*fextend*/
		f2 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  (f0 + f3)
		f1 =  (f1 + f2)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		__asm(push(f0), push((mstate.ebp+-8)), op(0x3d))
		__asm(push(f1), push((mstate.ebp+-4)), op(0x3d))
		i0 =  ((__xasm<int>(push((mstate.ebp+-8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		mstate.edx = i1
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZNK11b2WeldJoint10GetAnchorBEv:int = regFunc(FSM__ZNK11b2WeldJoint10GetAnchorBEv.start)

public final class FSM__ZNK11b2WeldJoint10GetAnchorBEv extends Machine {

	public static function start():void {
		var i0:int, i1:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number

		__asm(label, lbl("__ZNK11b2WeldJoint10GetAnchorBEv_entry"))
	__asm(lbl("__ZNK11b2WeldJoint10GetAnchorBEv__XprivateX__BB272_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 8
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+52)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i1+20)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i0+104)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i1+24)), op(0x38))))
		f2 =  (f2 * f1)
		f0 =  (f0 * f1)
		f1 =  f2/*fround*/
		f0 =  f0/*fround*/
		f2 =  ((__xasm<Number>(push((i1+12)), op(0x38))))
		f0 =  f0/*fextend*/
		f3 =  ((__xasm<Number>(push((i1+28)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i0+108)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i1+32)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i1+16)), op(0x38))))
		f1 =  f1/*fextend*/
		f0 =  (f2 + f0)
		f2 =  (f5 * f4)
		f1 =  (f6 + f1)
		f3 =  (f3 * f4)
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		f3 =  f3/*fextend*/
		f0 =  f0/*fextend*/
		f2 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  (f0 + f3)
		f1 =  (f1 + f2)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		__asm(push(f0), push((mstate.ebp+-8)), op(0x3d))
		__asm(push(f1), push((mstate.ebp+-4)), op(0x3d))
		i0 =  ((__xasm<int>(push((mstate.ebp+-8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		mstate.edx = i1
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZNK11b2WeldJoint16GetReactionForceEf:int = regFunc(FSM__ZNK11b2WeldJoint16GetReactionForceEf.start)

public final class FSM__ZNK11b2WeldJoint16GetReactionForceEf extends Machine {

	public static function start():void {
		var i0:int, i1:int

		var f0:Number, f1:Number, f2:Number

		__asm(label, lbl("__ZNK11b2WeldJoint16GetReactionForceEf_entry"))
	__asm(lbl("__ZNK11b2WeldJoint16GetReactionForceEf__XprivateX__BB273_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 8
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i0+116)), op(0x38))))
		f1 =  ((__xasm<Number>(push((mstate.ebp+12)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i0+120)), op(0x38))))
		f0 =  (f0 * f1)
		f1 =  (f2 * f1)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		__asm(push(f0), push((mstate.ebp+-8)), op(0x3d))
		__asm(push(f1), push((mstate.ebp+-4)), op(0x3d))
		i0 =  ((__xasm<int>(push((mstate.ebp+-8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		mstate.edx = i1
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZNK11b2WeldJoint17GetReactionTorqueEf:int = regFunc(FSM__ZNK11b2WeldJoint17GetReactionTorqueEf.start)

public final class FSM__ZNK11b2WeldJoint17GetReactionTorqueEf extends Machine {

	public static function start():void {
		var i0:int

		var f0:Number, f1:Number

		__asm(label, lbl("__ZNK11b2WeldJoint17GetReactionTorqueEf_entry"))
	__asm(lbl("__ZNK11b2WeldJoint17GetReactionTorqueEf__XprivateX__BB274_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i0+124)), op(0x38))))
		f1 =  ((__xasm<Number>(push((mstate.ebp+12)), op(0x38))))
		f0 =  (f0 * f1)
		f0 =  f0/*fround*/
		mstate.st0 = f0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Async
public const __ZN11b2WeldJointD1Ev:int = regFunc(FSM__ZN11b2WeldJointD1Ev.start)

public final class FSM__ZN11b2WeldJointD1Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN11b2WeldJointD1Ev = new FSM__ZN11b2WeldJointD1Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN11b2WeldJointD1Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN11b2WeldJointD1Ev_errState",
			"__ZN11b2WeldJointD1Ev_state0"))
	__asm(lbl("__ZN11b2WeldJointD1Ev_state0"))
	__asm(lbl("__ZN11b2WeldJointD1Ev__XprivateX__BB275_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV7b2Joint)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN11b2WeldJointD1Ev_errState"))
		throw("Invalid state in __ZN11b2WeldJointD1Ev")
	}
}



// Async
public const __ZN11b2WeldJointD0Ev:int = regFunc(FSM__ZN11b2WeldJointD0Ev.start)

public final class FSM__ZN11b2WeldJointD0Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN11b2WeldJointD0Ev = new FSM__ZN11b2WeldJointD0Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN11b2WeldJointD0Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN11b2WeldJointD0Ev_errState",
			"__ZN11b2WeldJointD0Ev_state0",
			"__ZN11b2WeldJointD0Ev_state1"))
	__asm(lbl("__ZN11b2WeldJointD0Ev_state0"))
	__asm(lbl("__ZN11b2WeldJointD0Ev__XprivateX__BB276_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV7b2Joint)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		__asm(push(i1==0), iftrue, target("__ZN11b2WeldJointD0Ev__XprivateX__BB276_2_F"))
	__asm(lbl("__ZN11b2WeldJointD0Ev__XprivateX__BB276_1_F"))
		i0 =  (0)
		mstate.esp -= 8
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN11b2WeldJointD0Ev_state1"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__ZN11b2WeldJointD0Ev__XprivateX__BB276_2_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN11b2WeldJointD0Ev_errState"))
		throw("Invalid state in __ZN11b2WeldJointD0Ev")
	}
}



// Sync
public const __ZN11b2WeldJoint23InitVelocityConstraintsERK10b2TimeStep:int = regFunc(FSM__ZN11b2WeldJoint23InitVelocityConstraintsERK10b2TimeStep.start)

public final class FSM__ZN11b2WeldJoint23InitVelocityConstraintsERK10b2TimeStep extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int, i4:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number
		var f8:Number, f9:Number, f10:Number, f11:Number, f12:Number, f13:Number, f14:Number, f15:Number
		var f16:Number, f17:Number, f18:Number, f19:Number, f20:Number

		__asm(label, lbl("__ZN11b2WeldJoint23InitVelocityConstraintsERK10b2TimeStep_entry"))
	__asm(lbl("__ZN11b2WeldJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB277_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+48)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i0+100)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i1+40)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i0+96)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i1+36)), op(0x38))))
		f2 =  (f2 - f3)
		f0 =  (f0 - f1)
		f1 =  f2/*fround*/
		f0 =  f0/*fround*/
		i2 =  ((__xasm<int>(push((i0+52)), op(0x37))))
		f2 =  ((__xasm<Number>(push((i1+24)), op(0x38))))
		f1 =  f1/*fextend*/
		f3 =  ((__xasm<Number>(push((i1+32)), op(0x38))))
		f0 =  f0/*fextend*/
		f4 =  ((__xasm<Number>(push((i0+108)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i2+40)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i0+104)), op(0x38))))
		f7 =  ((__xasm<Number>(push((i2+36)), op(0x38))))
		f2 =  (f2 * f1)
		f3 =  (f3 * f0)
		f6 =  (f6 - f7)
		f4 =  (f4 - f5)
		f2 =  f2/*fround*/
		f3 =  f3/*fround*/
		f5 =  f6/*fround*/
		f4 =  f4/*fround*/
		f6 =  ((__xasm<Number>(push((i2+24)), op(0x38))))
		f5 =  f5/*fextend*/
		f7 =  ((__xasm<Number>(push((i2+32)), op(0x38))))
		f4 =  f4/*fextend*/
		f3 =  f3/*fextend*/
		f2 =  f2/*fextend*/
		f8 =  ((__xasm<Number>(push((i1+20)), op(0x38))))
		f9 =  ((__xasm<Number>(push((i1+28)), op(0x38))))
		f10 =  ((__xasm<Number>(push((i2+20)), op(0x38))))
		f11 =  ((__xasm<Number>(push((i2+28)), op(0x38))))
		f2 =  (f2 + f3)
		f3 =  (f6 * f5)
		f6 =  (f7 * f4)
		f2 =  f2/*fround*/
		f1 =  (f8 * f1)
		f0 =  (f9 * f0)
		f3 =  f3/*fround*/
		f5 =  (f10 * f5)
		f6 =  f6/*fround*/
		f4 =  (f11 * f4)
		f7 =  f2/*fextend*/
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		f5 =  f5/*fround*/
		f4 =  f4/*fround*/
		f6 =  f6/*fextend*/
		f3 =  f3/*fextend*/
		f8 =  (f7 * f7)
		f3 =  (f3 + f6)
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		f4 =  f4/*fextend*/
		f5 =  f5/*fextend*/
		f6 =  ((__xasm<Number>(push((i1+128)), op(0x38))))
		f9 =  ((__xasm<Number>(push((i2+128)), op(0x38))))
		f10 =  ((__xasm<Number>(push((i1+136)), op(0x38))))
		f8 =  f8/*fround*/
		f7 =  -f7
		f0 =  (f1 + f0)
		f1 =  f3/*fround*/
		f3 =  (f5 + f4)
		f4 =  f7/*fround*/
		f0 =  f0/*fround*/
		f5 =  f1/*fextend*/
		f3 =  f3/*fround*/
		f7 =  f8/*fextend*/
		f8 =  f10/*fextend*/
		f11 =  f9/*fextend*/
		f12 =  f6/*fextend*/
		f13 =  f0/*fextend*/
		f4 =  f4/*fextend*/
		f14 =  f3/*fextend*/
		f7 =  (f7 * f8)
		f11 =  (f12 + f11)
		f12 =  (f5 * f5)
		f15 =  ((__xasm<Number>(push((i2+136)), op(0x38))))
		f7 =  f7/*fround*/
		f16 =  (f13 * f4)
		f17 =  (f13 * f13)
		f11 =  f11/*fround*/
		f12 =  f12/*fround*/
		f18 =  (f5 * f14)
		f19 =  f15/*fextend*/
		f16 =  f16/*fround*/
		f17 =  f17/*fround*/
		f12 =  f12/*fextend*/
		f18 =  f18/*fround*/
		f7 =  f7/*fextend*/
		f11 =  f11/*fextend*/
		f7 =  (f11 + f7)
		f16 =  f16/*fextend*/
		f17 =  f17/*fextend*/
		f12 =  (f12 * f19)
		f18 =  f18/*fextend*/
		f7 =  f7/*fround*/
		f16 =  (f16 * f8)
		f17 =  (f17 * f8)
		f12 =  f12/*fround*/
		f18 =  (f18 * f19)
		f20 =  (f14 * f14)
		f16 =  f16/*fround*/
		f4 =  (f8 * f4)
		f17 =  f17/*fround*/
		f18 =  f18/*fround*/
		f5 =  (f5 * f19)
		f20 =  f20/*fround*/
		f12 =  f12/*fextend*/
		f7 =  f7/*fextend*/
		f7 =  (f7 + f12)
		f4 =  f4/*fround*/
		f12 =  f17/*fextend*/
		f5 =  f5/*fround*/
		f17 =  f20/*fextend*/
		f18 =  f18/*fextend*/
		f16 =  f16/*fextend*/
		f16 =  (f16 - f18)
		f11 =  (f11 + f12)
		f12 =  (f17 * f19)
		f7 =  f7/*fround*/
		f5 =  f5/*fextend*/
		f4 =  f4/*fextend*/
		f4 =  (f4 - f5)
		f5 =  f11/*fround*/
		f11 =  (f13 * f8)
		f12 =  f12/*fround*/
		f13 =  (f14 * f19)
		__asm(push(f7), push((i0+128)), op(0x3d))
		f7 =  f16/*fround*/
		f11 =  f11/*fround*/
		f13 =  f13/*fround*/
		__asm(push(f7), push((i0+140)), op(0x3d))
		f4 =  f4/*fround*/
		f12 =  f12/*fextend*/
		f5 =  f5/*fextend*/
		__asm(push(f4), push((i0+152)), op(0x3d))
		f5 =  (f5 + f12)
		f12 =  f13/*fextend*/
		f11 =  f11/*fextend*/
		f11 =  (f11 + f12)
		__asm(push(f7), push((i0+132)), op(0x3d))
		f5 =  f5/*fround*/
		__asm(push(f5), push((i0+144)), op(0x3d))
		f5 =  f11/*fround*/
		__asm(push(f5), push((i0+156)), op(0x3d))
		__asm(push(f4), push((i0+136)), op(0x3d))
		f4 =  (f8 + f19)
		__asm(push(f5), push((i0+148)), op(0x3d))
		f4 =  f4/*fround*/
		i3 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		__asm(push(f4), push((i0+160)), op(0x3d))
		i4 =  ((__xasm<int>(push((i3+20)), op(0x35))))
		__asm(push(i4==0), iftrue, target("__ZN11b2WeldJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB277_2_F"))
	__asm(lbl("__ZN11b2WeldJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB277_1_F"))
		f4 =  ((__xasm<Number>(push((i3+8)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i0+116)), op(0x38))))
		f5 =  (f5 * f4)
		f5 =  f5/*fround*/
		__asm(push(f5), push((i0+116)), op(0x3d))
		f7 =  ((__xasm<Number>(push((i0+120)), op(0x38))))
		f7 =  (f7 * f4)
		f7 =  f7/*fround*/
		__asm(push(f7), push((i0+120)), op(0x3d))
		f8 =  ((__xasm<Number>(push((i0+124)), op(0x38))))
		f4 =  (f8 * f4)
		f6 =  f6/*fextend*/
		f5 =  f5/*fextend*/
		f4 =  f4/*fround*/
		f8 =  (f5 * f6)
		f8 =  f8/*fround*/
		__asm(push(f4), push((i0+124)), op(0x3d))
		f4 =  ((__xasm<Number>(push((i1+72)), op(0x38))))
		f8 =  f8/*fextend*/
		f4 =  (f4 - f8)
		f7 =  f7/*fextend*/
		f4 =  f4/*fround*/
		f6 =  (f7 * f6)
		f0 =  f0/*fextend*/
		f2 =  f2/*fextend*/
		__asm(push(f4), push((i1+72)), op(0x3d))
		f4 =  f6/*fround*/
		f0 =  (f0 * f7)
		f2 =  (f2 * f5)
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f6 =  ((__xasm<Number>(push((i1+76)), op(0x38))))
		f4 =  f4/*fextend*/
		f4 =  (f6 - f4)
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f4 =  f4/*fround*/
		f0 =  (f0 - f2)
		__asm(push(f4), push((i1+76)), op(0x3d))
		f0 =  f0/*fround*/
		f2 =  ((__xasm<Number>(push((i0+124)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f0 + f2)
		f0 =  f0/*fround*/
		f2 =  f10/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 * f2)
		f0 =  f0/*fround*/
		f2 =  ((__xasm<Number>(push((i1+80)), op(0x38))))
		f0 =  f0/*fextend*/
		f4 =  f9/*fextend*/
		f0 =  (f2 - f0)
		f2 =  (f5 * f4)
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		__asm(push(f0), push((i1+80)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i2+72)), op(0x38))))
		f2 =  f2/*fextend*/
		f0 =  (f0 + f2)
		f0 =  f0/*fround*/
		f2 =  (f7 * f4)
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		__asm(push(f0), push((i2+72)), op(0x3d))
		f0 =  f2/*fround*/
		f2 =  (f3 * f7)
		f1 =  (f1 * f5)
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		f3 =  ((__xasm<Number>(push((i2+76)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f3 + f0)
		f1 =  f1/*fextend*/
		f2 =  f2/*fextend*/
		f0 =  f0/*fround*/
		f1 =  (f2 - f1)
		__asm(push(f0), push((i2+76)), op(0x3d))
		f0 =  f1/*fround*/
		f1 =  ((__xasm<Number>(push((i0+124)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f0 + f1)
		f0 =  f0/*fround*/
		f1 =  f15/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 * f1)
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push((i2+80)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f1 + f0)
		f0 =  f0/*fround*/
		__asm(push(f0), push((i2+80)), op(0x3d))
		__asm(jump, target("__ZN11b2WeldJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB277_3_F"))
	__asm(lbl("__ZN11b2WeldJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB277_2_F"))
		i1 =  (0)
		__asm(push(i1), push((i0+116)), op(0x3c))
		__asm(push(i1), push((i0+120)), op(0x3c))
		__asm(push(i1), push((i0+124)), op(0x3c))
	__asm(lbl("__ZN11b2WeldJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB277_3_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZN11b2WeldJoint24SolveVelocityConstraintsERK10b2TimeStep:int = regFunc(FSM__ZN11b2WeldJoint24SolveVelocityConstraintsERK10b2TimeStep.start)

public final class FSM__ZN11b2WeldJoint24SolveVelocityConstraintsERK10b2TimeStep extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number
		var f8:Number, f9:Number, f10:Number, f11:Number, f12:Number, f13:Number, f14:Number, f15:Number
		var f16:Number, f17:Number, f18:Number, f19:Number, f20:Number, f21:Number, f22:Number, f23:Number
		var f24:Number, f25:Number, f26:Number, f27:Number, f28:Number, f29:Number, f30:Number, f31:Number
		__asm(label, lbl("__ZN11b2WeldJoint24SolveVelocityConstraintsERK10b2TimeStep_entry"))
	__asm(lbl("__ZN11b2WeldJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB278_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 32
		f0 =  (0)
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+52)), op(0x37))))
		f1 =  ((__xasm<Number>(push((i0+108)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i1+40)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i0+104)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i1+36)), op(0x38))))
		f3 =  (f3 - f4)
		f1 =  (f1 - f2)
		f2 =  f3/*fround*/
		f1 =  f1/*fround*/
		f3 =  ((__xasm<Number>(push((i1+24)), op(0x38))))
		f2 =  f2/*fextend*/
		f4 =  ((__xasm<Number>(push((i1+20)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i1+32)), op(0x38))))
		f1 =  f1/*fextend*/
		f6 =  ((__xasm<Number>(push((i1+28)), op(0x38))))
		f3 =  (f3 * f2)
		f2 =  (f4 * f2)
		f4 =  (f5 * f1)
		f1 =  (f6 * f1)
		i2 =  ((__xasm<int>(push((i0+48)), op(0x37))))
		f5 =  ((__xasm<Number>(push((i0+140)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i0+156)), op(0x38))))
		f7 =  ((__xasm<Number>(push((i0+144)), op(0x38))))
		f8 =  ((__xasm<Number>(push((i0+152)), op(0x38))))
		f9 =  ((__xasm<Number>(push((i0+148)), op(0x38))))
		f10 =  ((__xasm<Number>(push((i0+160)), op(0x38))))
		f3 =  f3/*fround*/
		f2 =  f2/*fround*/
		f4 =  f4/*fround*/
		f1 =  f1/*fround*/
		f11 =  ((__xasm<Number>(push((i0+100)), op(0x38))))
		f12 =  ((__xasm<Number>(push((i2+40)), op(0x38))))
		f13 =  ((__xasm<Number>(push((i0+96)), op(0x38))))
		f14 =  ((__xasm<Number>(push((i2+36)), op(0x38))))
		f4 =  f4/*fextend*/
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f2 =  f2/*fextend*/
		f15 =  f10/*fextend*/
		f16 =  f7/*fextend*/
		f17 =  f8/*fextend*/
		f18 =  f9/*fextend*/
		f19 =  f6/*fextend*/
		f20 =  f5/*fextend*/
		f13 =  (f13 - f14)
		f11 =  (f11 - f12)
		f3 =  (f3 + f4)
		f1 =  (f2 + f1)
		f2 =  (f20 * f15)
		f4 =  (f16 * f15)
		f12 =  (f18 * f17)
		f14 =  (f18 * f19)
		f15 =  ((__xasm<Number>(push((i1+80)), op(0x38))))
		__asm(push(f15), push((mstate.ebp+-8)), op(0x3d))
		f13 =  f13/*fround*/
		f11 =  f11/*fround*/
		f3 =  f3/*fround*/
		f1 =  f1/*fround*/
		f2 =  f2/*fround*/
		f4 =  f4/*fround*/
		f12 =  f12/*fround*/
		f14 =  f14/*fround*/
		f15 =  ((__xasm<Number>(push((i2+24)), op(0x38))))
		f13 =  f13/*fextend*/
		f18 =  ((__xasm<Number>(push((i2+20)), op(0x38))))
		f21 =  ((__xasm<Number>(push((i2+32)), op(0x38))))
		f11 =  f11/*fextend*/
		f22 =  ((__xasm<Number>(push((i2+28)), op(0x38))))
		f23 =  f1/*fextend*/
		f24 =  ((__xasm<Number>(push((mstate.ebp+-8)), op(0x38))))
		f24 =  f24/*fextend*/
		f25 =  f3/*fextend*/
		f2 =  f2/*fextend*/
		f12 =  f12/*fextend*/
		f14 =  f14/*fextend*/
		f4 =  f4/*fextend*/
		f15 =  (f15 * f13)
		f13 =  (f18 * f13)
		f18 =  (f21 * f11)
		f11 =  (f22 * f11)
		f21 =  (f23 * f24)
		f22 =  (f25 * f24)
		f2 =  (f12 - f2)
		f4 =  (f4 - f14)
		f12 =  (f16 * f17)
		f14 =  (f20 * f19)
		f16 =  ((__xasm<Number>(push((i2+80)), op(0x38))))
		__asm(push(f16), push((mstate.ebp+-32)), op(0x3d))
		f16 =  ((__xasm<Number>(push((i1+72)), op(0x38))))
		__asm(push(f16), push((mstate.ebp+-24)), op(0x3d))
		f16 =  ((__xasm<Number>(push((i1+76)), op(0x38))))
		__asm(push(f16), push((mstate.ebp+-16)), op(0x3d))
		f16 =  ((__xasm<Number>(push((i0+128)), op(0x38))))
		f17 =  ((__xasm<Number>(push((i0+132)), op(0x38))))
		f15 =  f15/*fround*/
		f13 =  f13/*fround*/
		f18 =  f18/*fround*/
		f11 =  f11/*fround*/
		f19 =  f21/*fround*/
		f20 =  f22/*fround*/
		f2 =  f2/*fround*/
		f4 =  f4/*fround*/
		f12 =  f12/*fround*/
		f14 =  f14/*fround*/
		f21 =  ((__xasm<Number>(push((mstate.ebp+-32)), op(0x38))))
		f21 =  f21/*fextend*/
		f18 =  f18/*fextend*/
		f15 =  f15/*fextend*/
		f11 =  f11/*fextend*/
		f13 =  f13/*fextend*/
		f20 =  f20/*fextend*/
		f22 =  ((__xasm<Number>(push((mstate.ebp+-24)), op(0x38))))
		f22 =  f22/*fextend*/
		f19 =  f19/*fextend*/
		f23 =  ((__xasm<Number>(push((mstate.ebp+-16)), op(0x38))))
		f23 =  f23/*fextend*/
		f25 =  f4/*fextend*/
		f26 =  f16/*fextend*/
		f27 =  f2/*fextend*/
		f28 =  f17/*fextend*/
		f12 =  f12/*fextend*/
		f14 =  f14/*fextend*/
		f29 =  -f21
		f15 =  (f15 + f18)
		f11 =  (f13 + f11)
		f13 =  (f22 - f20)
		f18 =  (f23 + f19)
		f19 =  (f26 * f25)
		f20 =  (f28 * f27)
		f12 =  (f14 - f12)
		f14 =  ((__xasm<Number>(push((i2+72)), op(0x38))))
		f22 =  ((__xasm<Number>(push((i2+76)), op(0x38))))
		f23 =  ((__xasm<Number>(push((i0+136)), op(0x38))))
		f25 =  f29/*fround*/
		f15 =  f15/*fround*/
		f11 =  f11/*fround*/
		f13 =  f13/*fround*/
		f18 =  f18/*fround*/
		f19 =  f19/*fround*/
		f20 =  f20/*fround*/
		f12 =  f12/*fround*/
		f26 =  f11/*fextend*/
		f27 =  f14/*fextend*/
		f13 =  f13/*fextend*/
		f25 =  f25/*fextend*/
		f28 =  f15/*fextend*/
		f29 =  f22/*fextend*/
		f18 =  f18/*fextend*/
		f20 =  f20/*fextend*/
		f19 =  f19/*fextend*/
		f30 =  f12/*fextend*/
		f31 =  f23/*fextend*/
		f13 =  (f13 - f27)
		f26 =  (f26 * f21)
		f25 =  (f28 * f25)
		f18 =  (f18 - f29)
		f19 =  (f19 + f20)
		f20 =  (f31 * f30)
		f13 =  f13/*fround*/
		f26 =  f26/*fround*/
		f25 =  f25/*fround*/
		f18 =  f18/*fround*/
		f19 =  f19/*fround*/
		f20 =  f20/*fround*/
		f13 =  f13/*fextend*/
		f25 =  f25/*fextend*/
		f18 =  f18/*fextend*/
		f26 =  f26/*fextend*/
		f20 =  f20/*fextend*/
		f19 =  f19/*fextend*/
		f13 =  (f25 - f13)
		f18 =  (f26 - f18)
		f21 =  (f21 - f24)
		f19 =  (f19 + f20)
		f20 =  ((__xasm<Number>(push((i2+128)), op(0x38))))
		f24 =  ((__xasm<Number>(push((i1+128)), op(0x38))))
		f25 =  ((__xasm<Number>(push((i2+136)), op(0x38))))
		f26 =  ((__xasm<Number>(push((i1+136)), op(0x38))))
		f19 =  f19/*fround*/
		f13 =  f13/*fround*/
		f18 =  f18/*fround*/
		f21 =  f21/*fround*/
		i3 =  (i2 + 76)
		i4 =  (i1 + 76)
		i5 =  (i1 + 80)
		i1 =  (i1 + 72)
		i6 =  (i2 + 80)
		i2 =  (i2 + 72)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f27 =  f19/*fextend*/
		__asm(push(f27!=f0), iftrue, target("__ZN11b2WeldJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB278_2_F"))
	__asm(lbl("__ZN11b2WeldJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB278_1_F"))
		__asm(jump, target("__ZN11b2WeldJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB278_3_F"))
	__asm(lbl("__ZN11b2WeldJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB278_2_F"))
		f0 =  (1)
		f0 =  f0/*fround*/
		f19 =  f19/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 / f19)
		f19 =  f0/*fround*/
	__asm(lbl("__ZN11b2WeldJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB278_3_F"))
		f0 = f19
		f13 =  f13/*fextend*/
		f10 =  f10/*fextend*/
		f18 =  f18/*fextend*/
		f8 =  f8/*fextend*/
		f6 =  f6/*fextend*/
		f19 =  f21/*fextend*/
		f21 =  (f10 * f13)
		f10 =  (f10 * f18)
		f27 =  (f8 * f19)
		f28 =  (f6 * f19)
		f21 =  f21/*fround*/
		f10 =  f10/*fround*/
		f27 =  f27/*fround*/
		f28 =  f28/*fround*/
		f21 =  f21/*fextend*/
		f27 =  f27/*fextend*/
		f28 =  f28/*fextend*/
		f10 =  f10/*fextend*/
		f6 =  (f6 * f13)
		f21 =  (f27 - f21)
		f8 =  (f8 * f18)
		f10 =  (f10 - f28)
		f6 =  f6/*fround*/
		f21 =  f21/*fround*/
		f8 =  f8/*fround*/
		f10 =  f10/*fround*/
		f9 =  f9/*fextend*/
		f5 =  f5/*fextend*/
		f7 =  f7/*fextend*/
		f4 =  f4/*fextend*/
		f2 =  f2/*fextend*/
		f8 =  f8/*fextend*/
		f6 =  f6/*fextend*/
		f21 =  f21/*fextend*/
		f17 =  f17/*fextend*/
		f10 =  f10/*fextend*/
		f16 =  f16/*fextend*/
		f4 =  (f4 * f13)
		f6 =  (f6 - f8)
		f8 =  (f17 * f21)
		f21 =  (f9 * f13)
		f2 =  (f2 * f18)
		f10 =  (f16 * f10)
		f9 =  (f9 * f18)
		f27 =  (f5 * f19)
		f28 =  (f7 * f19)
		f4 =  f4/*fround*/
		f6 =  f6/*fround*/
		f8 =  f8/*fround*/
		f21 =  f21/*fround*/
		f2 =  f2/*fround*/
		f10 =  f10/*fround*/
		f9 =  f9/*fround*/
		f27 =  f27/*fround*/
		f28 =  f28/*fround*/
		f12 =  f12/*fextend*/
		f2 =  f2/*fextend*/
		f4 =  f4/*fextend*/
		f6 =  f6/*fextend*/
		f23 =  f23/*fextend*/
		f8 =  f8/*fextend*/
		f10 =  f10/*fextend*/
		f27 =  f27/*fextend*/
		f21 =  f21/*fextend*/
		f9 =  f9/*fextend*/
		f28 =  f28/*fextend*/
		f2 =  (f4 + f2)
		f4 =  (f23 * f6)
		f6 =  (f10 + f8)
		f7 =  (f7 * f13)
		f8 =  (f21 - f27)
		f5 =  (f5 * f18)
		f9 =  (f28 - f9)
		f10 =  (f12 * f19)
		f2 =  f2/*fround*/
		f4 =  f4/*fround*/
		f6 =  f6/*fround*/
		f7 =  f7/*fround*/
		f8 =  f8/*fround*/
		f5 =  f5/*fround*/
		f9 =  f9/*fround*/
		f10 =  f10/*fround*/
		f8 =  f8/*fextend*/
		f9 =  f9/*fextend*/
		f10 =  f10/*fextend*/
		f2 =  f2/*fextend*/
		f4 =  f4/*fextend*/
		f6 =  f6/*fextend*/
		f7 =  f7/*fextend*/
		f5 =  f5/*fextend*/
		f2 =  (f2 + f10)
		f4 =  (f6 + f4)
		f5 =  (f5 - f7)
		f6 =  (f17 * f8)
		f7 =  (f16 * f9)
		f2 =  f2/*fround*/
		f4 =  f4/*fround*/
		f5 =  f5/*fround*/
		f6 =  f6/*fround*/
		f7 =  f7/*fround*/
		f5 =  f5/*fextend*/
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f4 =  f4/*fextend*/
		f6 =  f6/*fextend*/
		f7 =  f7/*fextend*/
		f2 =  (f2 * f0)
		f4 =  (f4 * f0)
		f5 =  (f23 * f5)
		f6 =  (f7 + f6)
		f2 =  f2/*fround*/
		f4 =  f4/*fround*/
		f5 =  f5/*fround*/
		f6 =  f6/*fround*/
		f7 =  f15/*fextend*/
		f2 =  f2/*fextend*/
		f8 =  f11/*fextend*/
		f4 =  f4/*fextend*/
		f5 =  f5/*fextend*/
		f6 =  f6/*fextend*/
		f9 =  ((__xasm<Number>(push((i0+116)), op(0x38))))
		f7 =  (f7 * f2)
		f8 =  (f8 * f4)
		f5 =  (f6 + f5)
		f6 =  (f9 + f2)
		f7 =  f7/*fround*/
		f8 =  f8/*fround*/
		f5 =  f5/*fround*/
		f6 =  f6/*fround*/
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f5 =  f5/*fextend*/
		f7 =  f7/*fextend*/
		f8 =  f8/*fextend*/
		__asm(push(f6), push((i0+116)), op(0x3d))
		f6 =  (f8 - f7)
		f3 =  (f3 * f2)
		f1 =  (f1 * f4)
		f0 =  (f5 * f0)
		f5 =  ((__xasm<Number>(push((i0+120)), op(0x38))))
		f6 =  f6/*fround*/
		f3 =  f3/*fround*/
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		f5 =  (f5 + f4)
		f6 =  f6/*fextend*/
		f0 =  f0/*fextend*/
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f7 =  f20/*fextend*/
		f5 =  f5/*fround*/
		f6 =  (f6 + f0)
		f1 =  (f1 - f3)
		__asm(push(f5), push((i0+120)), op(0x3d))
		f3 =  (f2 * f7)
		f5 =  f6/*fround*/
		f1 =  f1/*fround*/
		f6 =  ((__xasm<Number>(push((i0+124)), op(0x38))))
		f3 =  f3/*fround*/
		f1 =  f1/*fextend*/
		f7 =  (f4 * f7)
		f8 =  f25/*fextend*/
		f5 =  f5/*fextend*/
		f9 =  f24/*fextend*/
		f6 =  (f6 + f0)
		f5 =  (f5 * f8)
		f0 =  (f1 + f0)
		f1 =  f7/*fround*/
		f3 =  f3/*fextend*/
		f7 =  f14/*fextend*/
		f6 =  f6/*fround*/
		f3 =  (f7 - f3)
		f5 =  f5/*fround*/
		f2 =  (f2 * f9)
		f0 =  f0/*fround*/
		f1 =  f1/*fextend*/
		f7 =  f22/*fextend*/
		f2 =  f2/*fround*/
		f1 =  (f7 - f1)
		f4 =  (f4 * f9)
		__asm(push(f6), push((i0+124)), op(0x3d))
		f3 =  f3/*fround*/
		f5 =  f5/*fextend*/
		f6 =  ((__xasm<Number>(push((mstate.ebp+-32)), op(0x38))))
		f6 =  f6/*fextend*/
		f7 =  f26/*fextend*/
		f0 =  f0/*fextend*/
		f5 =  (f6 - f5)
		f0 =  (f0 * f7)
		f4 =  f4/*fround*/
		__asm(push(f3), push(i2), op(0x3d))
		f2 =  f2/*fextend*/
		f3 =  ((__xasm<Number>(push((mstate.ebp+-24)), op(0x38))))
		f3 =  f3/*fextend*/
		f1 =  f1/*fround*/
		f2 =  (f3 + f2)
		f0 =  f0/*fround*/
		__asm(push(f1), push(i3), op(0x3d))
		f1 =  f5/*fround*/
		f3 =  f4/*fextend*/
		f4 =  ((__xasm<Number>(push((mstate.ebp+-16)), op(0x38))))
		f4 =  f4/*fextend*/
		f3 =  (f4 + f3)
		__asm(push(f1), push(i6), op(0x3d))
		f1 =  f2/*fround*/
		f2 =  ((__xasm<Number>(push((mstate.ebp+-8)), op(0x38))))
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 + f2)
		__asm(push(f1), push(i1), op(0x3d))
		f1 =  f3/*fround*/
		__asm(push(f1), push(i4), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push(i5), op(0x3d))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZN11b2WeldJoint24SolvePositionConstraintsEf:int = regFunc(FSM__ZN11b2WeldJoint24SolvePositionConstraintsEf.start)

public final class FSM__ZN11b2WeldJoint24SolvePositionConstraintsEf extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
		var i8:int, i9:int, i10:int, i11:int, i12:int, i13:int, i14:int, i15:int
		var i16:int, i17:int, i18:int, i19:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number
		var f8:Number, f9:Number, f10:Number, f11:Number, f12:Number, f13:Number, f14:Number, f15:Number
		var f16:Number, f17:Number, f18:Number, f19:Number, f20:Number, f21:Number, f22:Number, f23:Number
		var f24:Number, f25:Number, f26:Number, f27:Number, f28:Number, f29:Number, f30:Number, f31:Number
		__asm(label, lbl("__ZN11b2WeldJoint24SolvePositionConstraintsEf_entry"))
	__asm(lbl("__ZN11b2WeldJoint24SolvePositionConstraintsEf__XprivateX__BB279_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+48)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i0+100)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i1+40)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i0+96)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i1+36)), op(0x38))))
		f2 =  (f2 - f3)
		f0 =  (f0 - f1)
		i2 =  ((__xasm<int>(push((i0+52)), op(0x37))))
		f1 =  f2/*fround*/
		f0 =  f0/*fround*/
		f2 =  ((__xasm<Number>(push((i1+24)), op(0x38))))
		f1 =  f1/*fextend*/
		f3 =  ((__xasm<Number>(push((i1+20)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i1+32)), op(0x38))))
		f0 =  f0/*fextend*/
		f5 =  ((__xasm<Number>(push((i1+28)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i0+108)), op(0x38))))
		f7 =  ((__xasm<Number>(push((i2+40)), op(0x38))))
		f8 =  ((__xasm<Number>(push((i0+104)), op(0x38))))
		f9 =  ((__xasm<Number>(push((i2+36)), op(0x38))))
		f2 =  (f2 * f1)
		f1 =  (f3 * f1)
		f3 =  (f4 * f0)
		f0 =  (f5 * f0)
		f4 =  (f8 - f9)
		f5 =  (f6 - f7)
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		f0 =  f0/*fround*/
		f4 =  f4/*fround*/
		f5 =  f5/*fround*/
		f6 =  ((__xasm<Number>(push((i2+24)), op(0x38))))
		f4 =  f4/*fextend*/
		f7 =  ((__xasm<Number>(push((i2+20)), op(0x38))))
		f8 =  ((__xasm<Number>(push((i2+32)), op(0x38))))
		f5 =  f5/*fextend*/
		f9 =  ((__xasm<Number>(push((i2+28)), op(0x38))))
		f3 =  f3/*fextend*/
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		f2 =  (f2 + f3)
		f0 =  (f1 + f0)
		f1 =  (f6 * f4)
		f3 =  (f7 * f4)
		f4 =  (f8 * f5)
		f5 =  (f9 * f5)
		f2 =  f2/*fround*/
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		f4 =  f4/*fround*/
		f5 =  f5/*fround*/
		f6 =  f2/*fextend*/
		f7 =  f0/*fextend*/
		f4 =  f4/*fextend*/
		f1 =  f1/*fextend*/
		f5 =  f5/*fextend*/
		f3 =  f3/*fextend*/
		f8 =  -f6
		f9 =  (f7 * f7)
		f1 =  (f1 + f4)
		f3 =  (f3 + f5)
		f4 =  ((__xasm<Number>(push((i1+128)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i2+128)), op(0x38))))
		f10 =  ((__xasm<Number>(push((i1+136)), op(0x38))))
		f8 =  f8/*fround*/
		f9 =  f9/*fround*/
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		f11 =  f10/*fextend*/
		f8 =  f8/*fextend*/
		f9 =  f9/*fextend*/
		f12 =  f1/*fextend*/
		f13 =  f3/*fextend*/
		f14 =  f5/*fextend*/
		f15 =  f4/*fextend*/
		f14 =  (f15 + f14)
		f9 =  (f9 * f11)
		f15 =  (f7 * f8)
		f16 =  (f12 * f13)
		f17 =  (f13 * f13)
		f18 =  ((__xasm<Number>(push((i2+136)), op(0x38))))
		f14 =  f14/*fround*/
		f9 =  f9/*fround*/
		f15 =  f15/*fround*/
		f16 =  f16/*fround*/
		f17 =  f17/*fround*/
		f19 =  f18/*fextend*/
		f15 =  f15/*fextend*/
		f16 =  f16/*fextend*/
		f17 =  f17/*fextend*/
		f9 =  f9/*fextend*/
		f14 =  f14/*fextend*/
		f9 =  (f14 + f9)
		f15 =  (f15 * f11)
		f8 =  (f11 * f8)
		f20 =  (f7 * f11)
		f21 =  (f6 * f6)
		f16 =  (f16 * f19)
		f22 =  (f12 * f19)
		f17 =  (f17 * f19)
		f23 =  (f13 * f19)
		f9 =  f9/*fround*/
		f15 =  f15/*fround*/
		f8 =  f8/*fround*/
		f20 =  f20/*fround*/
		f21 =  f21/*fround*/
		f16 =  f16/*fround*/
		f22 =  f22/*fround*/
		f17 =  f17/*fround*/
		f23 =  f23/*fround*/
		f24 =  ((__xasm<Number>(push((i2+56)), op(0x38))))
		f25 =  ((__xasm<Number>(push((i2+52)), op(0x38))))
		f21 =  f21/*fextend*/
		f17 =  f17/*fextend*/
		f9 =  f9/*fextend*/
		f16 =  f16/*fextend*/
		f15 =  f15/*fextend*/
		f22 =  f22/*fextend*/
		f8 =  f8/*fextend*/
		f23 =  f23/*fextend*/
		f20 =  f20/*fextend*/
		f9 =  (f9 + f17)
		f17 =  (f21 * f11)
		f15 =  (f15 - f16)
		f8 =  (f8 - f22)
		f16 =  (f20 + f23)
		f11 =  (f11 + f19)
		f20 =  (f24 + f12)
		f12 =  (f12 * f12)
		f13 =  (f25 + f13)
		f9 =  f9/*fround*/
		f17 =  f17/*fround*/
		f15 =  f15/*fround*/
		f8 =  f8/*fround*/
		f16 =  f16/*fround*/
		f11 =  f11/*fround*/
		f20 =  f20/*fround*/
		f12 =  f12/*fround*/
		f13 =  f13/*fround*/
		f17 =  f17/*fextend*/
		f21 =  f16/*fextend*/
		f22 =  f15/*fextend*/
		f23 =  f11/*fextend*/
		f24 =  f9/*fextend*/
		f25 =  f8/*fextend*/
		f12 =  f12/*fextend*/
		f26 =  ((__xasm<Number>(push((i1+56)), op(0x38))))
		f20 =  f20/*fextend*/
		f27 =  ((__xasm<Number>(push((i1+52)), op(0x38))))
		f13 =  f13/*fextend*/
		f14 =  (f14 + f17)
		f17 =  (f24 * f23)
		f23 =  (f22 * f23)
		f28 =  (f21 * f25)
		f29 =  (f21 * f21)
		f20 =  (f20 - f26)
		f13 =  (f13 - f27)
		f12 =  (f12 * f19)
		f14 =  f14/*fround*/
		f17 =  f17/*fround*/
		f19 =  f23/*fround*/
		f23 =  f28/*fround*/
		f26 =  f29/*fround*/
		f20 =  f20/*fround*/
		f13 =  f13/*fround*/
		f12 =  f12/*fround*/
		f20 =  f20/*fextend*/
		f13 =  f13/*fextend*/
		f12 =  f12/*fextend*/
		f14 =  f14/*fextend*/
		f26 =  f26/*fextend*/
		f17 =  f17/*fextend*/
		f19 =  f19/*fextend*/
		f23 =  f23/*fextend*/
		f12 =  (f14 + f12)
		f14 =  (f24 * f25)
		f17 =  (f17 - f26)
		f21 =  (f22 * f21)
		f19 =  (f23 - f19)
		f23 =  (f20 - f6)
		f24 =  (f13 - f7)
		f26 =  ((__xasm<Number>(push((i2+64)), op(0x38))))
		f27 =  ((__xasm<Number>(push((i1+64)), op(0x38))))
		f28 =  ((__xasm<Number>(push((i0+112)), op(0x38))))
		f12 =  f12/*fround*/
		f14 =  f14/*fround*/
		f17 =  f17/*fround*/
		f21 =  f21/*fround*/
		f19 =  f19/*fround*/
		f23 =  f23/*fround*/
		f24 =  f24/*fround*/
		__asm(push(f12), push((i0+128)), op(0x3d))
		f29 =  f19/*fextend*/
		f23 =  f23/*fextend*/
		f24 =  f24/*fextend*/
		f30 =  f17/*fextend*/
		f31 =  f12/*fextend*/
		f14 =  f14/*fextend*/
		f21 =  f21/*fextend*/
		__asm(push(f15), push((i0+140)), op(0x3d))
		f30 =  (f31 * f30)
		f14 =  (f21 - f14)
		f21 =  (f22 * f29)
		f22 =  (f23 * f23)
		f23 =  (f24 * f24)
		__asm(push(f8), push((i0+152)), op(0x3d))
		f24 =  f30/*fround*/
		f14 =  f14/*fround*/
		f21 =  f21/*fround*/
		f22 =  f22/*fround*/
		f23 =  f23/*fround*/
		__asm(push(f15), push((i0+132)), op(0x3d))
		f29 =  f14/*fextend*/
		f21 =  f21/*fextend*/
		f24 =  f24/*fextend*/
		f22 =  f22/*fextend*/
		f23 =  f23/*fextend*/
		__asm(push(f9), push((i0+144)), op(0x3d))
		f21 =  (f24 + f21)
		f24 =  (f25 * f29)
		f22 =  (f23 + f22)
		f23 =  (f26 - f27)
		__asm(push(f16), push((i0+156)), op(0x3d))
		f21 =  f21/*fround*/
		f24 =  f24/*fround*/
		f22 =  f22/*fround*/
		f23 =  f23/*fround*/
		f23 =  f23/*fextend*/
		__asm(push(f8), push((i0+136)), op(0x3d))
		f22 =  f22/*fextend*/
		f24 =  f24/*fextend*/
		f21 =  f21/*fextend*/
		__asm(push(f16), push((i0+148)), op(0x3d))
		f21 =  (f21 + f24)
		f22 =  Math.sqrt(f22)
		f6 =  (f6 - f20)
		f7 =  (f7 - f13)
		f13 =  (f23 - f28)
		f20 =  (f28 - f23)
		__asm(push(f11), push((i0+160)), op(0x3d))
		f21 =  f21/*fround*/
		f22 =  f22/*fround*/
		f6 =  f6/*fround*/
		f7 =  f7/*fround*/
		f13 =  f13/*fround*/
		f20 =  f20/*fround*/
		i0 =  (i1 + 40)
		i3 =  (i1 + 20)
		i4 =  (i1 + 24)
		i5 =  (i1 + 28)
		i6 =  (i1 + 32)
		i7 =  (i2 + 40)
		i8 =  (i2 + 20)
		i9 =  (i2 + 24)
		i10 =  (i2 + 28)
		i11 =  (i2 + 32)
		i12 =  (i2 + 52)
		i13 =  (i2 + 56)
		i14 =  (i1 + 52)
		i15 =  (i1 + 56)
		i16 =  (i2 + 64)
		i17 =  (i1 + 64)
		i18 =  (i2 + 36)
		i19 =  (i1 + 36)
		f23 =  (0)
		f23 =  f23/*fround*/
		f23 =  f23/*fextend*/
		f24 =  f21/*fextend*/
		__asm(push(f24!=f23), iftrue, target("__ZN11b2WeldJoint24SolvePositionConstraintsEf__XprivateX__BB279_2_F"))
	__asm(lbl("__ZN11b2WeldJoint24SolvePositionConstraintsEf__XprivateX__BB279_1_F"))
		__asm(jump, target("__ZN11b2WeldJoint24SolvePositionConstraintsEf__XprivateX__BB279_3_F"))
	__asm(lbl("__ZN11b2WeldJoint24SolvePositionConstraintsEf__XprivateX__BB279_2_F"))
		f23 =  (1)
		f23 =  f23/*fround*/
		f21 =  f21/*fextend*/
		f23 =  f23/*fextend*/
		f21 =  (f23 / f21)
		f21 =  f21/*fround*/
	__asm(lbl("__ZN11b2WeldJoint24SolvePositionConstraintsEf__XprivateX__BB279_3_F"))
		f7 =  f7/*fextend*/
		f11 =  f11/*fextend*/
		f6 =  f6/*fextend*/
		f16 =  f16/*fextend*/
		f8 =  f8/*fextend*/
		f23 =  f20/*fextend*/
		f24 =  (f11 * f7)
		f11 =  (f11 * f6)
		f25 =  (f8 * f23)
		f26 =  (f16 * f23)
		f24 =  f24/*fround*/
		f11 =  f11/*fround*/
		f25 =  f25/*fround*/
		f26 =  f26/*fround*/
		f24 =  f24/*fextend*/
		f25 =  f25/*fextend*/
		f26 =  f26/*fextend*/
		f11 =  f11/*fextend*/
		f27 =  (f16 * f7)
		f24 =  (f25 - f24)
		f25 =  (f8 * f6)
		f11 =  (f11 - f26)
		f26 =  f27/*fround*/
		f24 =  f24/*fround*/
		f25 =  f25/*fround*/
		f11 =  f11/*fround*/
		f15 =  f15/*fextend*/
		f9 =  f9/*fextend*/
		f17 =  f17/*fextend*/
		f24 =  f24/*fextend*/
		f19 =  f19/*fextend*/
		f25 =  f25/*fextend*/
		f26 =  f26/*fextend*/
		f11 =  f11/*fextend*/
		f12 =  f12/*fextend*/
		f17 =  (f17 * f7)
		f25 =  (f26 - f25)
		f24 =  (f15 * f24)
		f19 =  (f19 * f6)
		f11 =  (f12 * f11)
		f16 =  (f16 * f6)
		f27 =  (f15 * f23)
		f28 =  (f9 * f23)
		f17 =  f17/*fround*/
		f25 =  f25/*fround*/
		f24 =  f24/*fround*/
		f19 =  f19/*fround*/
		f11 =  f11/*fround*/
		f16 =  f16/*fround*/
		f27 =  f27/*fround*/
		f28 =  f28/*fround*/
		f25 =  f25/*fextend*/
		f27 =  f27/*fextend*/
		f14 =  f14/*fextend*/
		f19 =  f19/*fextend*/
		f17 =  f17/*fextend*/
		f24 =  f24/*fextend*/
		f11 =  f11/*fextend*/
		f16 =  f16/*fextend*/
		f28 =  f28/*fextend*/
		f17 =  (f17 + f19)
		f19 =  (f8 * f25)
		f25 =  (f26 - f27)
		f11 =  (f11 + f24)
		f7 =  (f9 * f7)
		f6 =  (f15 * f6)
		f9 =  (f28 - f16)
		f14 =  (f14 * f23)
		f16 =  f17/*fround*/
		f17 =  f19/*fround*/
		f19 =  f25/*fround*/
		f11 =  f11/*fround*/
		f7 =  f7/*fround*/
		f6 =  f6/*fround*/
		f9 =  f9/*fround*/
		f14 =  f14/*fround*/
		f19 =  f19/*fextend*/
		f9 =  f9/*fextend*/
		f14 =  f14/*fextend*/
		f16 =  f16/*fextend*/
		f17 =  f17/*fextend*/
		f11 =  f11/*fextend*/
		f7 =  f7/*fextend*/
		f6 =  f6/*fextend*/
		f14 =  (f16 + f14)
		f11 =  (f11 + f17)
		f15 =  (f15 * f19)
		f6 =  (f6 - f7)
		f7 =  (f12 * f9)
		f9 =  f14/*fround*/
		f11 =  f11/*fround*/
		f12 =  f15/*fround*/
		f6 =  f6/*fround*/
		f7 =  f7/*fround*/
		f6 =  f6/*fextend*/
		f9 =  f9/*fextend*/
		f14 =  f21/*fextend*/
		f11 =  f11/*fextend*/
		f12 =  f12/*fextend*/
		f7 =  f7/*fextend*/
		f9 =  (f9 * f14)
		f11 =  (f11 * f14)
		f7 =  (f7 + f12)
		f6 =  (f8 * f6)
		f8 =  f9/*fround*/
		f9 =  f11/*fround*/
		f7 =  f7/*fround*/
		f6 =  f6/*fround*/
		f2 =  f2/*fextend*/
		f8 =  f8/*fextend*/
		f0 =  f0/*fextend*/
		f9 =  f9/*fextend*/
		f6 =  f6/*fextend*/
		f7 =  f7/*fextend*/
		f4 =  f4/*fextend*/
		f2 =  (f2 * f8)
		f0 =  (f0 * f9)
		f6 =  (f7 + f6)
		f7 =  (f8 * f4)
		f2 =  f2/*fround*/
		f0 =  f0/*fround*/
		f6 =  f6/*fround*/
		f7 =  f7/*fround*/
		f6 =  f6/*fextend*/
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 - f2)
		f2 =  (f6 * f14)
		f6 =  ((__xasm<Number>(push(i14), op(0x38))))
		f7 =  f7/*fextend*/
		f6 =  (f6 - f7)
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f6 =  f6/*fround*/
		f4 =  (f9 * f4)
		f0 =  f0/*fextend*/
		f2 =  f2/*fextend*/
		f0 =  (f0 + f2)
		f4 =  f4/*fround*/
		__asm(push(f6), push(i14), op(0x3d))
		f0 =  f0/*fround*/
		f6 =  ((__xasm<Number>(push(i15), op(0x38))))
		f4 =  f4/*fextend*/
		f4 =  (f6 - f4)
		f6 =  f10/*fextend*/
		f0 =  f0/*fextend*/
		f4 =  f4/*fround*/
		f0 =  (f0 * f6)
		f0 =  f0/*fround*/
		__asm(push(f4), push(i15), op(0x3d))
		f1 =  f1/*fextend*/
		f3 =  f3/*fextend*/
		f4 =  ((__xasm<Number>(push(i17), op(0x38))))
		f0 =  f0/*fextend*/
		f5 =  f5/*fextend*/
		f0 =  (f4 - f0)
		f1 =  (f1 * f8)
		f3 =  (f3 * f9)
		f0 =  f0/*fround*/
		f4 =  (f8 * f5)
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		f4 =  f4/*fround*/
		__asm(push(f0), push(i17), op(0x3d))
		f0 =  f1/*fextend*/
		f1 =  f3/*fextend*/
		f0 =  (f1 - f0)
		f1 =  ((__xasm<Number>(push(i12), op(0x38))))
		f3 =  f4/*fextend*/
		f1 =  (f1 + f3)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f0 =  f0/*fextend*/
		f3 =  (f9 * f5)
		f0 =  (f0 + f2)
		f2 =  f3/*fround*/
		__asm(push(f1), push(i12), op(0x3d))
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push(i13), op(0x38))))
		f2 =  f2/*fextend*/
		f1 =  (f1 + f2)
		f2 =  f18/*fextend*/
		f0 =  f0/*fextend*/
		f1 =  f1/*fround*/
		f0 =  (f0 * f2)
		f0 =  f0/*fround*/
		__asm(push(f1), push(i13), op(0x3d))
		f1 =  ((__xasm<Number>(push(i16), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f1 + f0)
		f0 =  f0/*fround*/
		__asm(push(f0), push(i16), op(0x3d))
		f1 =  ((__xasm<Number>(push(i17), op(0x38))))
		f0 = f1
		//InlineAsmStart
	f0 =  Math.cos(f0);

	//InlineAsmEnd
		f2 = f0
		f0 = f1
		//InlineAsmStart
	f0 =  Math.sin(f0);

	//InlineAsmEnd
		f1 =  f0/*fextend*/
		f3 =  -f1
		__asm(push(f2), push(i3), op(0x3d))
		f3 =  f3/*fround*/
		__asm(push(f3), push(i5), op(0x3d))
		__asm(push(f0), push(i4), op(0x3d))
		__asm(push(f2), push(i6), op(0x3d))
		f0 =  ((__xasm<Number>(push(i19), op(0x38))))
		f3 =  ((__xasm<Number>(push(i0), op(0x38))))
		f2 =  f2/*fextend*/
		f4 =  (f2 * f0)
		f5 =  (f3 * f1)
		f0 =  (f1 * f0)
		f1 =  f4/*fround*/
		f2 =  (f2 * f3)
		f3 =  f5/*fround*/
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f1 =  (f1 - f3)
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 + f2)
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		f2 =  ((__xasm<Number>(push(i14), op(0x38))))
		f1 =  f1/*fextend*/
		f3 =  ((__xasm<Number>(push(i15), op(0x38))))
		f0 =  f0/*fextend*/
		f1 =  (f2 - f1)
		f0 =  (f3 - f0)
		f1 =  f1/*fround*/
		__asm(push(f1), push((i1+12)), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push((i1+16)), op(0x3d))
		f1 =  ((__xasm<Number>(push(i16), op(0x38))))
		f0 = f1
		//InlineAsmStart
	f0 =  Math.cos(f0);

	//InlineAsmEnd
		f2 = f0
		f0 = f1
		//InlineAsmStart
	f0 =  Math.sin(f0);

	//InlineAsmEnd
		f1 =  f0/*fextend*/
		f3 =  -f1
		__asm(push(f2), push(i8), op(0x3d))
		f3 =  f3/*fround*/
		__asm(push(f3), push(i10), op(0x3d))
		__asm(push(f0), push(i9), op(0x3d))
		__asm(push(f2), push(i11), op(0x3d))
		f0 =  ((__xasm<Number>(push(i18), op(0x38))))
		f3 =  ((__xasm<Number>(push(i7), op(0x38))))
		f2 =  f2/*fextend*/
		f4 =  (f2 * f0)
		f5 =  (f3 * f1)
		f0 =  (f1 * f0)
		f1 =  f4/*fround*/
		f2 =  (f2 * f3)
		f3 =  f5/*fround*/
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f1 =  (f1 - f3)
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 + f2)
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		f2 =  ((__xasm<Number>(push(i12), op(0x38))))
		f1 =  f1/*fextend*/
		f3 =  ((__xasm<Number>(push(i13), op(0x38))))
		f0 =  f0/*fextend*/
		f1 =  (f2 - f1)
		f0 =  (f3 - f0)
		f1 =  f1/*fround*/
		__asm(push(f1), push((i2+12)), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push((i2+16)), op(0x3d))
		f0 =  ((__xasm<Number>(push(_b2_linearSlop), op(0x38))))
		f1 =  f22/*fextend*/
		__asm(push(f1>f0), iftrue, target("__ZN11b2WeldJoint24SolvePositionConstraintsEf__XprivateX__BB279_5_F"))
	__asm(lbl("__ZN11b2WeldJoint24SolvePositionConstraintsEf__XprivateX__BB279_4_F"))
		f0 =  (0)
		f0 =  f0/*fround*/
		f1 =  f20/*fextend*/
		f0 =  f0/*fextend*/
		f2 =  f13/*fextend*/
		f0 =  ((f2<=f0) ? f1 : f2)
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push(_b2_angularSlop), op(0x38))))
		f0 =  f0/*fextend*/
		i0 =  ((f0<=f1) ? 1 : 0)
		i0 =  (i0 & 1)
		__asm(jump, target("__ZN11b2WeldJoint24SolvePositionConstraintsEf__XprivateX__BB279_6_F"))
	__asm(lbl("__ZN11b2WeldJoint24SolvePositionConstraintsEf__XprivateX__BB279_5_F"))
		i0 =  (0)
	__asm(lbl("__ZN11b2WeldJoint24SolvePositionConstraintsEf__XprivateX__BB279_6_F"))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZNK11b2RopeJoint10GetAnchorAEv:int = regFunc(FSM__ZNK11b2RopeJoint10GetAnchorAEv.start)

public final class FSM__ZNK11b2RopeJoint10GetAnchorAEv extends Machine {

	public static function start():void {
		var i0:int, i1:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number

		__asm(label, lbl("__ZNK11b2RopeJoint10GetAnchorAEv_entry"))
	__asm(lbl("__ZNK11b2RopeJoint10GetAnchorAEv__XprivateX__BB280_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 8
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+48)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i1+20)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i0+96)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i1+24)), op(0x38))))
		f2 =  (f2 * f1)
		f0 =  (f0 * f1)
		f1 =  f2/*fround*/
		f0 =  f0/*fround*/
		f2 =  ((__xasm<Number>(push((i1+12)), op(0x38))))
		f0 =  f0/*fextend*/
		f3 =  ((__xasm<Number>(push((i1+28)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i0+100)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i1+32)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i1+16)), op(0x38))))
		f1 =  f1/*fextend*/
		f0 =  (f2 + f0)
		f2 =  (f5 * f4)
		f1 =  (f6 + f1)
		f3 =  (f3 * f4)
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		f3 =  f3/*fextend*/
		f0 =  f0/*fextend*/
		f2 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  (f0 + f3)
		f1 =  (f1 + f2)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		__asm(push(f0), push((mstate.ebp+-8)), op(0x3d))
		__asm(push(f1), push((mstate.ebp+-4)), op(0x3d))
		i0 =  ((__xasm<int>(push((mstate.ebp+-8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		mstate.edx = i1
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZNK11b2RopeJoint10GetAnchorBEv:int = regFunc(FSM__ZNK11b2RopeJoint10GetAnchorBEv.start)

public final class FSM__ZNK11b2RopeJoint10GetAnchorBEv extends Machine {

	public static function start():void {
		var i0:int, i1:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number

		__asm(label, lbl("__ZNK11b2RopeJoint10GetAnchorBEv_entry"))
	__asm(lbl("__ZNK11b2RopeJoint10GetAnchorBEv__XprivateX__BB281_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 8
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+52)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i1+20)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i0+104)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i1+24)), op(0x38))))
		f2 =  (f2 * f1)
		f0 =  (f0 * f1)
		f1 =  f2/*fround*/
		f0 =  f0/*fround*/
		f2 =  ((__xasm<Number>(push((i1+12)), op(0x38))))
		f0 =  f0/*fextend*/
		f3 =  ((__xasm<Number>(push((i1+28)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i0+108)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i1+32)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i1+16)), op(0x38))))
		f1 =  f1/*fextend*/
		f0 =  (f2 + f0)
		f2 =  (f5 * f4)
		f1 =  (f6 + f1)
		f3 =  (f3 * f4)
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		f3 =  f3/*fextend*/
		f0 =  f0/*fextend*/
		f2 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  (f0 + f3)
		f1 =  (f1 + f2)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		__asm(push(f0), push((mstate.ebp+-8)), op(0x3d))
		__asm(push(f1), push((mstate.ebp+-4)), op(0x3d))
		i0 =  ((__xasm<int>(push((mstate.ebp+-8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		mstate.edx = i1
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZNK11b2RopeJoint16GetReactionForceEf:int = regFunc(FSM__ZNK11b2RopeJoint16GetReactionForceEf.start)

public final class FSM__ZNK11b2RopeJoint16GetReactionForceEf extends Machine {

	public static function start():void {
		var i0:int, i1:int

		var f0:Number, f1:Number, f2:Number

		__asm(label, lbl("__ZNK11b2RopeJoint16GetReactionForceEf_entry"))
	__asm(lbl("__ZNK11b2RopeJoint16GetReactionForceEf__XprivateX__BB282_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 8
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i0+148)), op(0x38))))
		f1 =  ((__xasm<Number>(push((mstate.ebp+12)), op(0x38))))
		f0 =  (f0 * f1)
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push((i0+120)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i0+124)), op(0x38))))
		f0 =  f0/*fextend*/
		f2 =  (f2 * f0)
		f0 =  (f1 * f0)
		f1 =  f2/*fround*/
		f0 =  f0/*fround*/
		__asm(push(f0), push((mstate.ebp+-4)), op(0x3d))
		__asm(push(f1), push((mstate.ebp+-8)), op(0x3d))
		i0 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+-8)), op(0x37))))
		mstate.edx = i1
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZNK11b2RopeJoint17GetReactionTorqueEf:int = regFunc(FSM__ZNK11b2RopeJoint17GetReactionTorqueEf.start)

public final class FSM__ZNK11b2RopeJoint17GetReactionTorqueEf extends Machine {

	public static function start():void {

		var f0:Number

		__asm(label, lbl("__ZNK11b2RopeJoint17GetReactionTorqueEf_entry"))
	__asm(lbl("__ZNK11b2RopeJoint17GetReactionTorqueEf__XprivateX__BB283_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		f0 =  (0)
		f0 =  f0/*fround*/
		mstate.st0 = f0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Async
public const __ZN11b2RopeJointD1Ev:int = regFunc(FSM__ZN11b2RopeJointD1Ev.start)

public final class FSM__ZN11b2RopeJointD1Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN11b2RopeJointD1Ev = new FSM__ZN11b2RopeJointD1Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN11b2RopeJointD1Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN11b2RopeJointD1Ev_errState",
			"__ZN11b2RopeJointD1Ev_state0"))
	__asm(lbl("__ZN11b2RopeJointD1Ev_state0"))
	__asm(lbl("__ZN11b2RopeJointD1Ev__XprivateX__BB284_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV7b2Joint)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN11b2RopeJointD1Ev_errState"))
		throw("Invalid state in __ZN11b2RopeJointD1Ev")
	}
}



// Async
public const __ZN11b2RopeJointD0Ev:int = regFunc(FSM__ZN11b2RopeJointD0Ev.start)

public final class FSM__ZN11b2RopeJointD0Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN11b2RopeJointD0Ev = new FSM__ZN11b2RopeJointD0Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN11b2RopeJointD0Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN11b2RopeJointD0Ev_errState",
			"__ZN11b2RopeJointD0Ev_state0",
			"__ZN11b2RopeJointD0Ev_state1"))
	__asm(lbl("__ZN11b2RopeJointD0Ev_state0"))
	__asm(lbl("__ZN11b2RopeJointD0Ev__XprivateX__BB285_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV7b2Joint)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		__asm(push(i1==0), iftrue, target("__ZN11b2RopeJointD0Ev__XprivateX__BB285_2_F"))
	__asm(lbl("__ZN11b2RopeJointD0Ev__XprivateX__BB285_1_F"))
		i0 =  (0)
		mstate.esp -= 8
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN11b2RopeJointD0Ev_state1"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__ZN11b2RopeJointD0Ev__XprivateX__BB285_2_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN11b2RopeJointD0Ev_errState"))
		throw("Invalid state in __ZN11b2RopeJointD0Ev")
	}
}



// Sync
public const __ZN11b2RopeJoint23InitVelocityConstraintsERK10b2TimeStep:int = regFunc(FSM__ZN11b2RopeJoint23InitVelocityConstraintsERK10b2TimeStep.start)

public final class FSM__ZN11b2RopeJoint23InitVelocityConstraintsERK10b2TimeStep extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
		var i8:int, i9:int, i10:int, i11:int, i12:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number
		var f8:Number, f9:Number

		__asm(label, lbl("__ZN11b2RopeJoint23InitVelocityConstraintsERK10b2TimeStep_entry"))
	__asm(lbl("__ZN11b2RopeJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB286_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		f0 =  (0)
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+48)), op(0x37))))
		f1 =  ((__xasm<Number>(push((i0+100)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i1+40)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i0+96)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i1+36)), op(0x38))))
		f3 =  (f3 - f4)
		f1 =  (f1 - f2)
		f2 =  f3/*fround*/
		f1 =  f1/*fround*/
		f3 =  ((__xasm<Number>(push((i1+20)), op(0x38))))
		f2 =  f2/*fextend*/
		f4 =  ((__xasm<Number>(push((i1+28)), op(0x38))))
		f1 =  f1/*fextend*/
		f5 =  ((__xasm<Number>(push((i1+24)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i1+32)), op(0x38))))
		f3 =  (f3 * f2)
		f4 =  (f4 * f1)
		f2 =  (f5 * f2)
		f3 =  f3/*fround*/
		f1 =  (f6 * f1)
		f4 =  f4/*fround*/
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		f4 =  f4/*fextend*/
		f3 =  f3/*fextend*/
		i2 =  ((__xasm<int>(push((i0+52)), op(0x37))))
		f3 =  (f3 + f4)
		f1 =  f1/*fextend*/
		f2 =  f2/*fextend*/
		f1 =  (f2 + f1)
		f2 =  f3/*fround*/
		f1 =  f1/*fround*/
		__asm(push(f2), push((i0+128)), op(0x3d))
		__asm(push(f1), push((i0+132)), op(0x3d))
		f3 =  ((__xasm<Number>(push((i0+108)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i2+40)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i0+104)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i2+36)), op(0x38))))
		f3 =  (f3 - f4)
		f4 =  (f5 - f6)
		f3 =  f3/*fround*/
		f4 =  f4/*fround*/
		f5 =  ((__xasm<Number>(push((i2+20)), op(0x38))))
		f4 =  f4/*fextend*/
		f6 =  ((__xasm<Number>(push((i2+28)), op(0x38))))
		f3 =  f3/*fextend*/
		f7 =  ((__xasm<Number>(push((i2+24)), op(0x38))))
		f8 =  ((__xasm<Number>(push((i2+32)), op(0x38))))
		f6 =  (f6 * f3)
		f5 =  (f5 * f4)
		f3 =  (f8 * f3)
		f6 =  f6/*fround*/
		f4 =  (f7 * f4)
		f5 =  f5/*fround*/
		f3 =  f3/*fround*/
		f4 =  f4/*fround*/
		f6 =  f6/*fextend*/
		f5 =  f5/*fextend*/
		f5 =  (f5 + f6)
		f3 =  f3/*fextend*/
		f4 =  f4/*fextend*/
		f3 =  (f4 + f3)
		f4 =  f5/*fround*/
		f3 =  f3/*fround*/
		__asm(push(f4), push((i0+136)), op(0x3d))
		__asm(push(f3), push((i0+140)), op(0x3d))
		f5 =  ((__xasm<Number>(push((i2+52)), op(0x38))))
		f6 =  f4/*fextend*/
		f7 =  ((__xasm<Number>(push((i2+56)), op(0x38))))
		f8 =  f3/*fextend*/
		f7 =  (f7 + f8)
		f5 =  (f5 + f6)
		f6 =  f7/*fround*/
		f5 =  f5/*fround*/
		f7 =  ((__xasm<Number>(push((i1+52)), op(0x38))))
		f8 =  ((__xasm<Number>(push((i1+56)), op(0x38))))
		f6 =  f6/*fextend*/
		f5 =  f5/*fextend*/
		f6 =  (f6 - f8)
		f5 =  (f5 - f7)
		f6 =  f6/*fround*/
		f5 =  f5/*fround*/
		f7 =  f1/*fextend*/
		f6 =  f6/*fextend*/
		f8 =  f2/*fextend*/
		f5 =  f5/*fextend*/
		f6 =  (f6 - f7)
		f5 =  (f5 - f8)
		f6 =  f6/*fround*/
		f5 =  f5/*fround*/
		f7 =  f6/*fextend*/
		f8 =  f5/*fextend*/
		f7 =  (f7 * f7)
		f8 =  (f8 * f8)
		f7 =  f7/*fround*/
		f8 =  f8/*fround*/
		f7 =  f7/*fextend*/
		f8 =  f8/*fextend*/
		f7 =  (f8 + f7)
		f7 =  f7/*fround*/
		f7 =  f7/*fextend*/
		__asm(push(f5), push((i0+120)), op(0x3d))
		f7 =  Math.sqrt(f7)
		f7 =  f7/*fround*/
		__asm(push(f6), push((i0+124)), op(0x3d))
		__asm(push(f7), push((i0+116)), op(0x3d))
		f8 =  ((__xasm<Number>(push((i0+112)), op(0x38))))
		f9 =  f7/*fextend*/
		f8 =  (f9 - f8)
		f8 =  f8/*fround*/
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f8 =  f8/*fextend*/
		i3 =  ((f8>f0) ? 2 : 0)
		__asm(push(i3), push((i0+152)), op(0x3c))
		f0 =  ((__xasm<Number>(push(_b2_linearSlop), op(0x38))))
		i3 =  (i0 + 132)
		i4 =  (i0 + 140)
		i5 =  (i0 + 124)
		i6 =  (i0 + 120)
		i7 =  (i0 + 136)
		i8 =  (i0 + 128)
		i9 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		__asm(push(f9<=f0), iftrue, target("__ZN11b2RopeJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB286_3_F"))
	__asm(lbl("__ZN11b2RopeJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB286_1_F"))
		f0 =  (1)
		f0 =  f0/*fround*/
		f7 =  f7/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 / f7)
		f0 =  f0/*fround*/
		f5 =  f5/*fextend*/
		f0 =  f0/*fextend*/
		f6 =  f6/*fextend*/
		f5 =  (f5 * f0)
		f0 =  (f6 * f0)
		f5 =  f5/*fround*/
		f0 =  f0/*fround*/
		f1 =  f1/*fextend*/
		f6 =  f5/*fextend*/
		f2 =  f2/*fextend*/
		f7 =  f0/*fextend*/
		f1 =  (f1 * f6)
		f2 =  (f2 * f7)
		f1 =  f1/*fround*/
		f2 =  f2/*fround*/
		f1 =  f1/*fextend*/
		f2 =  f2/*fextend*/
		f1 =  (f2 - f1)
		__asm(push(f5), push(i6), op(0x3d))
		__asm(push(f0), push(i5), op(0x3d))
		f1 =  f1/*fround*/
		f2 =  f3/*fextend*/
		f3 =  f4/*fextend*/
		f4 =  ((__xasm<Number>(push((i1+136)), op(0x38))))
		f1 =  f1/*fextend*/
		f4 =  (f4 * f1)
		f2 =  (f2 * f6)
		f3 =  (f3 * f7)
		f4 =  f4/*fround*/
		f2 =  f2/*fround*/
		f3 =  f3/*fround*/
		f4 =  f4/*fextend*/
		f2 =  f2/*fextend*/
		f3 =  f3/*fextend*/
		f1 =  (f4 * f1)
		f2 =  (f3 - f2)
		f1 =  f1/*fround*/
		f2 =  f2/*fround*/
		f3 =  ((__xasm<Number>(push((i1+128)), op(0x38))))
		f1 =  f1/*fextend*/
		f4 =  ((__xasm<Number>(push((i2+136)), op(0x38))))
		f2 =  f2/*fextend*/
		f1 =  (f3 + f1)
		f3 =  (f4 * f2)
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		f4 =  ((__xasm<Number>(push((i2+128)), op(0x38))))
		f1 =  f1/*fextend*/
		f3 =  f3/*fextend*/
		f1 =  (f1 + f4)
		f2 =  (f3 * f2)
		f1 =  f1/*fround*/
		f2 =  f2/*fround*/
		f2 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		f1 =  (f1 + f2)
		f1 =  f1/*fround*/
		f2 =  (0)
		i5 =  (i2 + 136)
		i6 =  (i2 + 128)
		i10 =  (i1 + 136)
		i11 =  (i1 + 128)
		f2 =  f2/*fround*/
		f2 =  f2/*fextend*/
		f3 =  f1/*fextend*/
		__asm(push(f3!=f2), iftrue, target("__ZN11b2RopeJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB286_4_F"))
	__asm(lbl("__ZN11b2RopeJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB286_2_F"))
		f1 =  (0)
		f1 =  f1/*fround*/
		__asm(jump, target("__ZN11b2RopeJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB286_5_F"))
	__asm(lbl("__ZN11b2RopeJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB286_3_F"))
		i1 =  (0)
		__asm(push(i1), push(i6), op(0x3c))
		__asm(push(i1), push(i5), op(0x3c))
		__asm(push(i1), push((i0+144)), op(0x3c))
		__asm(push(i1), push((i0+148)), op(0x3c))
		__asm(jump, target("__ZN11b2RopeJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB286_8_F"))
	__asm(lbl("__ZN11b2RopeJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB286_4_F"))
		f2 =  (1)
		f2 =  f2/*fround*/
		f1 =  f1/*fextend*/
		f2 =  f2/*fextend*/
		f1 =  (f2 / f1)
		f1 =  f1/*fround*/
	__asm(lbl("__ZN11b2RopeJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB286_5_F"))
		__asm(push(f1), push((i0+144)), op(0x3d))
		i12 =  ((__xasm<int>(push((i9+20)), op(0x35))))
		i0 =  (i0 + 148)
		__asm(push(i12==0), iftrue, target("__ZN11b2RopeJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB286_7_F"))
	__asm(lbl("__ZN11b2RopeJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB286_6_F"))
		f1 =  ((__xasm<Number>(push(i0), op(0x38))))
		f2 =  ((__xasm<Number>(push((i9+8)), op(0x38))))
		f1 =  (f1 * f2)
		f1 =  f1/*fround*/
		f2 =  f1/*fextend*/
		f3 =  f5/*fextend*/
		f3 =  (f3 * f2)
		f3 =  f3/*fround*/
		__asm(push(f1), push(i0), op(0x3d))
		f1 =  ((__xasm<Number>(push(i11), op(0x38))))
		f3 =  f3/*fextend*/
		f4 =  (f3 * f1)
		f0 =  f0/*fextend*/
		f4 =  f4/*fround*/
		f0 =  (f0 * f2)
		f2 =  ((__xasm<Number>(push((i1+72)), op(0x38))))
		f4 =  f4/*fextend*/
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f2 =  (f2 - f4)
		f1 =  (f0 * f1)
		f2 =  f2/*fround*/
		__asm(push(f2), push((i1+72)), op(0x3d))
		f1 =  f1/*fround*/
		f2 =  ((__xasm<Number>(push((i1+76)), op(0x38))))
		f1 =  f1/*fextend*/
		f1 =  (f2 - f1)
		f1 =  f1/*fround*/
		__asm(push(f1), push((i1+76)), op(0x3d))
		f1 =  ((__xasm<Number>(push(i8), op(0x38))))
		f2 =  ((__xasm<Number>(push(i3), op(0x38))))
		f1 =  (f1 * f0)
		f2 =  (f2 * f3)
		f1 =  f1/*fround*/
		f2 =  f2/*fround*/
		f2 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		f1 =  (f1 - f2)
		f1 =  f1/*fround*/
		f2 =  ((__xasm<Number>(push(i10), op(0x38))))
		f1 =  f1/*fextend*/
		f1 =  (f2 * f1)
		f1 =  f1/*fround*/
		f2 =  ((__xasm<Number>(push((i1+80)), op(0x38))))
		f1 =  f1/*fextend*/
		f1 =  (f2 - f1)
		f1 =  f1/*fround*/
		__asm(push(f1), push((i1+80)), op(0x3d))
		f1 =  ((__xasm<Number>(push(i6), op(0x38))))
		f2 =  (f3 * f1)
		f2 =  f2/*fround*/
		f4 =  ((__xasm<Number>(push((i2+72)), op(0x38))))
		f2 =  f2/*fextend*/
		f2 =  (f4 + f2)
		f1 =  (f0 * f1)
		f2 =  f2/*fround*/
		__asm(push(f2), push((i2+72)), op(0x3d))
		f1 =  f1/*fround*/
		f2 =  ((__xasm<Number>(push((i2+76)), op(0x38))))
		f1 =  f1/*fextend*/
		f1 =  (f2 + f1)
		f1 =  f1/*fround*/
		__asm(push(f1), push((i2+76)), op(0x3d))
		f1 =  ((__xasm<Number>(push(i7), op(0x38))))
		f2 =  ((__xasm<Number>(push(i4), op(0x38))))
		f0 =  (f1 * f0)
		f1 =  (f2 * f3)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f1 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 - f1)
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push(i5), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f1 * f0)
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push((i2+80)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f1 + f0)
		f0 =  f0/*fround*/
		__asm(push(f0), push((i2+80)), op(0x3d))
		__asm(jump, target("__ZN11b2RopeJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB286_8_F"))
	__asm(lbl("__ZN11b2RopeJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB286_7_F"))
		i1 =  (0)
		__asm(push(i1), push(i0), op(0x3c))
	__asm(lbl("__ZN11b2RopeJoint23InitVelocityConstraintsERK10b2TimeStep__XprivateX__BB286_8_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZN11b2RopeJoint24SolveVelocityConstraintsERK10b2TimeStep:int = regFunc(FSM__ZN11b2RopeJoint24SolveVelocityConstraintsERK10b2TimeStep.start)

public final class FSM__ZN11b2RopeJoint24SolveVelocityConstraintsERK10b2TimeStep extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
		var i8:int, i9:int, i10:int, i11:int, i12:int, i13:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number
		var f8:Number

		__asm(label, lbl("__ZN11b2RopeJoint24SolveVelocityConstraintsERK10b2TimeStep_entry"))
	__asm(lbl("__ZN11b2RopeJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB287_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		f0 =  (0)
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+48)), op(0x37))))
		i2 =  ((__xasm<int>(push((i0+52)), op(0x37))))
		f1 =  ((__xasm<Number>(push((i1+80)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i0+128)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i0+132)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i2+80)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i0+136)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i0+140)), op(0x38))))
		f2 =  (f2 * f1)
		f1 =  (f3 * f1)
		f3 =  (f5 * f4)
		f4 =  (f6 * f4)
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		f4 =  f4/*fround*/
		f5 =  ((__xasm<Number>(push((i1+76)), op(0x38))))
		f2 =  f2/*fextend*/
		f6 =  ((__xasm<Number>(push((i1+72)), op(0x38))))
		f1 =  f1/*fextend*/
		f7 =  ((__xasm<Number>(push((i2+76)), op(0x38))))
		f3 =  f3/*fextend*/
		f8 =  ((__xasm<Number>(push((i2+72)), op(0x38))))
		f4 =  f4/*fextend*/
		f2 =  (f5 + f2)
		f1 =  (f6 - f1)
		f3 =  (f7 + f3)
		f4 =  (f8 - f4)
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		f4 =  f4/*fround*/
		f2 =  f2/*fextend*/
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f4 =  f4/*fextend*/
		f2 =  (f3 - f2)
		f1 =  (f4 - f1)
		f3 =  ((__xasm<Number>(push((i0+120)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i0+124)), op(0x38))))
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		f2 =  f2/*fextend*/
		f5 =  f4/*fextend*/
		f1 =  f1/*fextend*/
		f6 =  f3/*fextend*/
		f2 =  (f5 * f2)
		f1 =  (f6 * f1)
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		f5 =  ((__xasm<Number>(push((i0+116)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i0+112)), op(0x38))))
		f2 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		f1 =  (f1 + f2)
		f2 =  (f5 - f6)
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		i3 =  (i0 + 132)
		i4 =  (i1 + 76)
		i5 =  (i0 + 140)
		i6 =  (i2 + 76)
		i7 =  (i2 + 72)
		i8 =  (i0 + 136)
		i9 =  (i2 + 80)
		i10 =  (i1 + 72)
		i11 =  (i0 + 128)
		i12 =  (i1 + 80)
		i13 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f5 =  f2/*fextend*/
		__asm(push(f5<f0), iftrue, target("__ZN11b2RopeJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB287_2_F"))
	__asm(lbl("__ZN11b2RopeJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB287_1_F"))
		__asm(jump, target("__ZN11b2RopeJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB287_3_F"))
	__asm(lbl("__ZN11b2RopeJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB287_2_F"))
		f0 =  ((__xasm<Number>(push((i13+4)), op(0x38))))
		f2 =  f2/*fextend*/
		f0 =  (f0 * f2)
		f0 =  f0/*fround*/
		f1 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 + f1)
		f1 =  f0/*fround*/
	__asm(lbl("__ZN11b2RopeJoint24SolveVelocityConstraintsERK10b2TimeStep__XprivateX__BB287_3_F"))
		f0 = f1
		f1 =  (0)
		f2 =  ((__xasm<Number>(push((i0+144)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f0 * f2)
		f0 =  f0/*fround*/
		f2 =  ((__xasm<Number>(push((i0+148)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f2 - f0)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f1 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  ((f0>f1) ? f1 : f0)
		f0 =  f0/*fround*/
		f1 =  f0/*fextend*/
		f1 =  (f1 - f2)
		f1 =  f1/*fround*/
		f1 =  f1/*fextend*/
		f2 =  f3/*fextend*/
		f2 =  (f2 * f1)
		f2 =  f2/*fround*/
		__asm(push(f0), push((i0+148)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i1+128)), op(0x38))))
		f2 =  f2/*fextend*/
		f3 =  (f2 * f0)
		f4 =  f4/*fextend*/
		f3 =  f3/*fround*/
		f1 =  (f4 * f1)
		f4 =  ((__xasm<Number>(push(i10), op(0x38))))
		f3 =  f3/*fextend*/
		f1 =  f1/*fround*/
		f1 =  f1/*fextend*/
		f3 =  (f4 - f3)
		f0 =  (f1 * f0)
		f3 =  f3/*fround*/
		f0 =  f0/*fround*/
		__asm(push(f3), push(i10), op(0x3d))
		f3 =  ((__xasm<Number>(push(i4), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f3 - f0)
		f0 =  f0/*fround*/
		__asm(push(f0), push(i4), op(0x3d))
		f0 =  ((__xasm<Number>(push(i11), op(0x38))))
		f3 =  ((__xasm<Number>(push(i3), op(0x38))))
		f0 =  (f0 * f1)
		f3 =  (f3 * f2)
		f0 =  f0/*fround*/
		f3 =  f3/*fround*/
		f3 =  f3/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 - f3)
		f0 =  f0/*fround*/
		f3 =  ((__xasm<Number>(push((i1+136)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f3 * f0)
		f0 =  f0/*fround*/
		f3 =  ((__xasm<Number>(push(i12), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f3 - f0)
		f0 =  f0/*fround*/
		__asm(push(f0), push(i12), op(0x3d))
		f0 =  ((__xasm<Number>(push((i2+128)), op(0x38))))
		f3 =  (f2 * f0)
		f3 =  f3/*fround*/
		f4 =  ((__xasm<Number>(push(i7), op(0x38))))
		f3 =  f3/*fextend*/
		f3 =  (f4 + f3)
		f0 =  (f1 * f0)
		f3 =  f3/*fround*/
		f0 =  f0/*fround*/
		__asm(push(f3), push(i7), op(0x3d))
		f3 =  ((__xasm<Number>(push(i6), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f3 + f0)
		f0 =  f0/*fround*/
		__asm(push(f0), push(i6), op(0x3d))
		f0 =  ((__xasm<Number>(push(i8), op(0x38))))
		f3 =  ((__xasm<Number>(push(i5), op(0x38))))
		f0 =  (f0 * f1)
		f1 =  (f3 * f2)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f1 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 - f1)
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push((i2+136)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f1 * f0)
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push(i9), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f1 + f0)
		f0 =  f0/*fround*/
		__asm(push(f0), push(i9), op(0x3d))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZN11b2RopeJoint24SolvePositionConstraintsEf:int = regFunc(FSM__ZN11b2RopeJoint24SolvePositionConstraintsEf.start)

public final class FSM__ZN11b2RopeJoint24SolvePositionConstraintsEf extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
		var i8:int, i9:int, i10:int, i11:int, i12:int, i13:int, i14:int, i15:int
		var i16:int, i17:int, i18:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number
		var f8:Number, f9:Number, f10:Number, f11:Number, f12:Number

		__asm(label, lbl("__ZN11b2RopeJoint24SolvePositionConstraintsEf_entry"))
	__asm(lbl("__ZN11b2RopeJoint24SolvePositionConstraintsEf__XprivateX__BB288_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		f0 =  (1.19209e-07)
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+52)), op(0x37))))
		f1 =  ((__xasm<Number>(push((i0+108)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i1+40)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i0+104)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i1+36)), op(0x38))))
		f3 =  (f3 - f4)
		f1 =  (f1 - f2)
		f2 =  f3/*fround*/
		f1 =  f1/*fround*/
		f3 =  ((__xasm<Number>(push((i1+24)), op(0x38))))
		f2 =  f2/*fextend*/
		f4 =  ((__xasm<Number>(push((i1+20)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i1+32)), op(0x38))))
		f1 =  f1/*fextend*/
		f6 =  ((__xasm<Number>(push((i1+28)), op(0x38))))
		f3 =  (f3 * f2)
		f2 =  (f4 * f2)
		f4 =  (f5 * f1)
		f1 =  (f6 * f1)
		i2 =  ((__xasm<int>(push((i0+48)), op(0x37))))
		f3 =  f3/*fround*/
		f2 =  f2/*fround*/
		f4 =  f4/*fround*/
		f1 =  f1/*fround*/
		f5 =  ((__xasm<Number>(push((i0+100)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i2+40)), op(0x38))))
		f7 =  ((__xasm<Number>(push((i0+96)), op(0x38))))
		f8 =  ((__xasm<Number>(push((i2+36)), op(0x38))))
		f4 =  f4/*fextend*/
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f2 =  f2/*fextend*/
		f7 =  (f7 - f8)
		f5 =  (f5 - f6)
		f3 =  (f3 + f4)
		f1 =  (f2 + f1)
		f2 =  f7/*fround*/
		f4 =  f5/*fround*/
		f3 =  f3/*fround*/
		f1 =  f1/*fround*/
		f5 =  ((__xasm<Number>(push((i2+24)), op(0x38))))
		f2 =  f2/*fextend*/
		f6 =  ((__xasm<Number>(push((i2+20)), op(0x38))))
		f7 =  ((__xasm<Number>(push((i2+32)), op(0x38))))
		f4 =  f4/*fextend*/
		f8 =  ((__xasm<Number>(push((i2+28)), op(0x38))))
		f9 =  ((__xasm<Number>(push((i1+56)), op(0x38))))
		f10 =  f3/*fextend*/
		f11 =  ((__xasm<Number>(push((i1+52)), op(0x38))))
		f12 =  f1/*fextend*/
		f5 =  (f5 * f2)
		f2 =  (f6 * f2)
		f6 =  (f7 * f4)
		f4 =  (f8 * f4)
		f7 =  (f9 + f10)
		f8 =  (f11 + f12)
		f9 =  ((__xasm<Number>(push((i2+56)), op(0x38))))
		f10 =  ((__xasm<Number>(push((i2+52)), op(0x38))))
		f5 =  f5/*fround*/
		f2 =  f2/*fround*/
		f6 =  f6/*fround*/
		f4 =  f4/*fround*/
		f7 =  f7/*fround*/
		f8 =  f8/*fround*/
		f6 =  f6/*fextend*/
		f5 =  f5/*fextend*/
		f4 =  f4/*fextend*/
		f2 =  f2/*fextend*/
		f11 =  f9/*fextend*/
		f7 =  f7/*fextend*/
		f12 =  f10/*fextend*/
		f8 =  f8/*fextend*/
		f5 =  (f5 + f6)
		f2 =  (f2 + f4)
		f4 =  (f7 - f11)
		f6 =  (f8 - f12)
		f5 =  f5/*fround*/
		f2 =  f2/*fround*/
		f4 =  f4/*fround*/
		f6 =  f6/*fround*/
		f7 =  f5/*fextend*/
		f4 =  f4/*fextend*/
		f8 =  f2/*fextend*/
		f6 =  f6/*fextend*/
		f4 =  (f4 - f7)
		f6 =  (f6 - f8)
		f4 =  f4/*fround*/
		f6 =  f6/*fround*/
		f7 =  f4/*fextend*/
		f8 =  f6/*fextend*/
		f7 =  (f7 * f7)
		f8 =  (f8 * f8)
		f7 =  f7/*fround*/
		f8 =  f8/*fround*/
		f7 =  f7/*fextend*/
		f8 =  f8/*fextend*/
		f7 =  (f8 + f7)
		f7 =  f7/*fround*/
		f7 =  f7/*fextend*/
		f7 =  Math.sqrt(f7)
		f7 =  f7/*fround*/
		i3 =  (i2 + 40)
		i4 =  (i2 + 20)
		i5 =  (i2 + 24)
		i6 =  (i2 + 28)
		i7 =  (i2 + 32)
		i8 =  (i1 + 40)
		i9 =  (i1 + 20)
		i10 =  (i1 + 24)
		i11 =  (i1 + 28)
		i12 =  (i1 + 32)
		i13 =  (i1 + 52)
		i14 =  (i1 + 56)
		i15 =  (i2 + 52)
		i16 =  (i2 + 56)
		i17 =  (i1 + 36)
		i18 =  (i2 + 36)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f8 =  f7/*fextend*/
		__asm(push(f8>=f0), iftrue, target("__ZN11b2RopeJoint24SolvePositionConstraintsEf__XprivateX__BB288_2_F"))
	__asm(lbl("__ZN11b2RopeJoint24SolvePositionConstraintsEf__XprivateX__BB288_1_F"))
		f0 =  (0)
		f7 =  f0/*fround*/
		__asm(jump, target("__ZN11b2RopeJoint24SolvePositionConstraintsEf__XprivateX__BB288_3_F"))
	__asm(lbl("__ZN11b2RopeJoint24SolvePositionConstraintsEf__XprivateX__BB288_2_F"))
		f0 =  (1)
		f0 =  f0/*fround*/
		f8 =  f7/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 / f8)
		f0 =  f0/*fround*/
		f6 =  f6/*fextend*/
		f0 =  f0/*fextend*/
		f4 =  f4/*fextend*/
		f6 =  (f6 * f0)
		f0 =  (f4 * f0)
		f4 =  f6/*fround*/
		f0 =  f0/*fround*/
		f6 = f4
		f4 = f0
	__asm(lbl("__ZN11b2RopeJoint24SolvePositionConstraintsEf__XprivateX__BB288_3_F"))
		f0 = f6
		f6 = f7
		f7 =  (0)
		f8 =  ((__xasm<Number>(push((i0+112)), op(0x38))))
		f6 =  f6/*fextend*/
		f8 =  (f6 - f8)
		f8 =  f8/*fround*/
		f11 =  ((__xasm<Number>(push(_b2_maxLinearCorrection), op(0x38))))
		f8 =  f8/*fextend*/
		f8 =  ((f8<f11) ? f8 : f11)
		f8 =  f8/*fround*/
		f7 =  f7/*fround*/
		f11 =  ((__xasm<Number>(push((i0+144)), op(0x38))))
		f7 =  f7/*fextend*/
		f8 =  f8/*fextend*/
		f7 =  ((f8<f7) ? f7 : f8)
		f8 =  -f11
		f7 =  f7/*fround*/
		f8 =  f8/*fround*/
		f8 =  f8/*fextend*/
		f7 =  f7/*fextend*/
		f7 =  (f7 * f8)
		f7 =  f7/*fround*/
		f7 =  f7/*fextend*/
		f0 =  f0/*fextend*/
		f4 =  f4/*fextend*/
		f0 =  (f0 * f7)
		f4 =  (f4 * f7)
		f0 =  f0/*fround*/
		f7 =  ((__xasm<Number>(push((i2+128)), op(0x38))))
		f4 =  f4/*fround*/
		f0 =  f0/*fextend*/
		f4 =  f4/*fextend*/
		f8 =  (f0 * f7)
		f7 =  (f4 * f7)
		f2 =  f2/*fextend*/
		f8 =  f8/*fround*/
		f5 =  f5/*fextend*/
		f7 =  f7/*fround*/
		f2 =  (f2 * f4)
		f5 =  (f5 * f0)
		f8 =  f8/*fextend*/
		f10 =  f10/*fextend*/
		f2 =  f2/*fround*/
		f8 =  (f10 - f8)
		f5 =  f5/*fround*/
		f7 =  f7/*fextend*/
		f9 =  f9/*fextend*/
		f7 =  (f9 - f7)
		f5 =  f5/*fextend*/
		f2 =  f2/*fextend*/
		f8 =  f8/*fround*/
		f2 =  (f2 - f5)
		__asm(push(f8), push(i15), op(0x3d))
		f5 =  f7/*fround*/
		__asm(push(f5), push(i16), op(0x3d))
		f2 =  f2/*fround*/
		f5 =  ((__xasm<Number>(push((i2+136)), op(0x38))))
		f2 =  f2/*fextend*/
		f2 =  (f5 * f2)
		f2 =  f2/*fround*/
		f5 =  ((__xasm<Number>(push((i2+64)), op(0x38))))
		f2 =  f2/*fextend*/
		f2 =  (f5 - f2)
		f2 =  f2/*fround*/
		__asm(push(f2), push((i2+64)), op(0x3d))
		f2 =  ((__xasm<Number>(push((i1+128)), op(0x38))))
		f5 =  (f0 * f2)
		f5 =  f5/*fround*/
		f7 =  ((__xasm<Number>(push(i13), op(0x38))))
		f5 =  f5/*fextend*/
		f5 =  (f7 + f5)
		f2 =  (f4 * f2)
		f1 =  f1/*fextend*/
		f3 =  f3/*fextend*/
		f5 =  f5/*fround*/
		f2 =  f2/*fround*/
		f1 =  (f1 * f4)
		f0 =  (f3 * f0)
		__asm(push(f5), push(i13), op(0x3d))
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		f3 =  ((__xasm<Number>(push(i14), op(0x38))))
		f2 =  f2/*fextend*/
		f2 =  (f3 + f2)
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		f2 =  f2/*fround*/
		f0 =  (f1 - f0)
		__asm(push(f2), push(i14), op(0x3d))
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push((i1+136)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f1 * f0)
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push((i1+64)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f1 + f0)
		f0 =  f0/*fround*/
		__asm(push(f0), push((i1+64)), op(0x3d))
		f1 =  ((__xasm<Number>(push((i2+64)), op(0x38))))
		f0 = f1
		//InlineAsmStart
	f0 =  Math.cos(f0);

	//InlineAsmEnd
		f2 = f0
		f0 = f1
		//InlineAsmStart
	f0 =  Math.sin(f0);

	//InlineAsmEnd
		f1 =  f0/*fextend*/
		f3 =  -f1
		__asm(push(f2), push(i4), op(0x3d))
		f3 =  f3/*fround*/
		__asm(push(f3), push(i6), op(0x3d))
		__asm(push(f0), push(i5), op(0x3d))
		__asm(push(f2), push(i7), op(0x3d))
		f0 =  ((__xasm<Number>(push(i18), op(0x38))))
		f3 =  ((__xasm<Number>(push(i3), op(0x38))))
		f2 =  f2/*fextend*/
		f4 =  (f2 * f0)
		f5 =  (f3 * f1)
		f0 =  (f1 * f0)
		f1 =  f4/*fround*/
		f2 =  (f2 * f3)
		f3 =  f5/*fround*/
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f1 =  (f1 - f3)
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 + f2)
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		f2 =  ((__xasm<Number>(push(i15), op(0x38))))
		f1 =  f1/*fextend*/
		f3 =  ((__xasm<Number>(push(i16), op(0x38))))
		f0 =  f0/*fextend*/
		f1 =  (f2 - f1)
		f0 =  (f3 - f0)
		f1 =  f1/*fround*/
		__asm(push(f1), push((i2+12)), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push((i2+16)), op(0x3d))
		f1 =  ((__xasm<Number>(push((i1+64)), op(0x38))))
		f0 = f1
		//InlineAsmStart
	f0 =  Math.cos(f0);

	//InlineAsmEnd
		f2 = f0
		f0 = f1
		//InlineAsmStart
	f0 =  Math.sin(f0);

	//InlineAsmEnd
		f1 =  f0/*fextend*/
		f3 =  -f1
		__asm(push(f2), push(i9), op(0x3d))
		f3 =  f3/*fround*/
		__asm(push(f3), push(i11), op(0x3d))
		__asm(push(f0), push(i10), op(0x3d))
		__asm(push(f2), push(i12), op(0x3d))
		f0 =  ((__xasm<Number>(push(i17), op(0x38))))
		f3 =  ((__xasm<Number>(push(i8), op(0x38))))
		f2 =  f2/*fextend*/
		f4 =  (f2 * f0)
		f5 =  (f3 * f1)
		f0 =  (f1 * f0)
		f1 =  f4/*fround*/
		f2 =  (f2 * f3)
		f3 =  f5/*fround*/
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f1 =  (f1 - f3)
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 + f2)
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		f2 =  ((__xasm<Number>(push(i13), op(0x38))))
		f1 =  f1/*fextend*/
		f3 =  ((__xasm<Number>(push(i14), op(0x38))))
		f0 =  f0/*fextend*/
		f1 =  (f2 - f1)
		f0 =  (f3 - f0)
		f1 =  f1/*fround*/
		__asm(push(f1), push((i1+12)), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push((i1+16)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i0+112)), op(0x38))))
		f0 =  (f6 - f0)
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push(_b2_linearSlop), op(0x38))))
		f0 =  f0/*fextend*/
		i0 =  ((f0<f1) ? 1 : 0)
		i0 =  (i0 & 1)
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Async
public const __ZN17b2ContactListenerD1Ev:int = regFunc(FSM__ZN17b2ContactListenerD1Ev.start)

public final class FSM__ZN17b2ContactListenerD1Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN17b2ContactListenerD1Ev = new FSM__ZN17b2ContactListenerD1Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN17b2ContactListenerD1Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN17b2ContactListenerD1Ev_errState",
			"__ZN17b2ContactListenerD1Ev_state0"))
	__asm(lbl("__ZN17b2ContactListenerD1Ev_state0"))
	__asm(lbl("__ZN17b2ContactListenerD1Ev__XprivateX__BB289_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV17b2ContactListener)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN17b2ContactListenerD1Ev_errState"))
		throw("Invalid state in __ZN17b2ContactListenerD1Ev")
	}
}



// Async
public const __ZN17b2ContactListenerD0Ev:int = regFunc(FSM__ZN17b2ContactListenerD0Ev.start)

public final class FSM__ZN17b2ContactListenerD0Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN17b2ContactListenerD0Ev = new FSM__ZN17b2ContactListenerD0Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN17b2ContactListenerD0Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN17b2ContactListenerD0Ev_errState",
			"__ZN17b2ContactListenerD0Ev_state0",
			"__ZN17b2ContactListenerD0Ev_state1"))
	__asm(lbl("__ZN17b2ContactListenerD0Ev_state0"))
	__asm(lbl("__ZN17b2ContactListenerD0Ev__XprivateX__BB290_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV17b2ContactListener)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		__asm(push(i1==0), iftrue, target("__ZN17b2ContactListenerD0Ev__XprivateX__BB290_2_F"))
	__asm(lbl("__ZN17b2ContactListenerD0Ev__XprivateX__BB290_1_F"))
		i0 =  (0)
		mstate.esp -= 8
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN17b2ContactListenerD0Ev_state1"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__ZN17b2ContactListenerD0Ev__XprivateX__BB290_2_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN17b2ContactListenerD0Ev_errState"))
		throw("Invalid state in __ZN17b2ContactListenerD0Ev")
	}
}



// Sync
public const __ZN17b2ContactListener12BeginContactEP9b2Contact:int = regFunc(FSM__ZN17b2ContactListener12BeginContactEP9b2Contact.start)

public final class FSM__ZN17b2ContactListener12BeginContactEP9b2Contact extends Machine {

	public static function start():void {


		__asm(label, lbl("__ZN17b2ContactListener12BeginContactEP9b2Contact_entry"))
	__asm(lbl("__ZN17b2ContactListener12BeginContactEP9b2Contact__XprivateX__BB291_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZN17b2ContactListener10EndContactEP9b2Contact:int = regFunc(FSM__ZN17b2ContactListener10EndContactEP9b2Contact.start)

public final class FSM__ZN17b2ContactListener10EndContactEP9b2Contact extends Machine {

	public static function start():void {


		__asm(label, lbl("__ZN17b2ContactListener10EndContactEP9b2Contact_entry"))
	__asm(lbl("__ZN17b2ContactListener10EndContactEP9b2Contact__XprivateX__BB292_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZN17b2ContactListener8PreSolveEP9b2ContactPK10b2Manifold:int = regFunc(FSM__ZN17b2ContactListener8PreSolveEP9b2ContactPK10b2Manifold.start)

public final class FSM__ZN17b2ContactListener8PreSolveEP9b2ContactPK10b2Manifold extends Machine {

	public static function start():void {


		__asm(label, lbl("__ZN17b2ContactListener8PreSolveEP9b2ContactPK10b2Manifold_entry"))
	__asm(lbl("__ZN17b2ContactListener8PreSolveEP9b2ContactPK10b2Manifold__XprivateX__BB293_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZN17b2ContactListener9PostSolveEP9b2ContactPK16b2ContactImpulse:int = regFunc(FSM__ZN17b2ContactListener9PostSolveEP9b2ContactPK16b2ContactImpulse.start)

public final class FSM__ZN17b2ContactListener9PostSolveEP9b2ContactPK16b2ContactImpulse extends Machine {

	public static function start():void {


		__asm(label, lbl("__ZN17b2ContactListener9PostSolveEP9b2ContactPK16b2ContactImpulse_entry"))
	__asm(lbl("__ZN17b2ContactListener9PostSolveEP9b2ContactPK16b2ContactImpulse__XprivateX__BB294_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Async
public const __ZN7b2JointD1Ev:int = regFunc(FSM__ZN7b2JointD1Ev.start)

public final class FSM__ZN7b2JointD1Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN7b2JointD1Ev = new FSM__ZN7b2JointD1Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN7b2JointD1Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN7b2JointD1Ev_errState",
			"__ZN7b2JointD1Ev_state0"))
	__asm(lbl("__ZN7b2JointD1Ev_state0"))
	__asm(lbl("__ZN7b2JointD1Ev__XprivateX__BB295_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV7b2Joint)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN7b2JointD1Ev_errState"))
		throw("Invalid state in __ZN7b2JointD1Ev")
	}
}



// Async
public const __ZN7b2JointD0Ev:int = regFunc(FSM__ZN7b2JointD0Ev.start)

public final class FSM__ZN7b2JointD0Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN7b2JointD0Ev = new FSM__ZN7b2JointD0Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN7b2JointD0Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN7b2JointD0Ev_errState",
			"__ZN7b2JointD0Ev_state0",
			"__ZN7b2JointD0Ev_state1"))
	__asm(lbl("__ZN7b2JointD0Ev_state0"))
	__asm(lbl("__ZN7b2JointD0Ev__XprivateX__BB296_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV7b2Joint)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		__asm(push(i1==0), iftrue, target("__ZN7b2JointD0Ev__XprivateX__BB296_2_F"))
	__asm(lbl("__ZN7b2JointD0Ev__XprivateX__BB296_1_F"))
		i0 =  (0)
		mstate.esp -= 8
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN7b2JointD0Ev_state1"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__ZN7b2JointD0Ev__XprivateX__BB296_2_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN7b2JointD0Ev_errState"))
		throw("Invalid state in __ZN7b2JointD0Ev")
	}
}



// Async
public const __ZN9b2ContactD1Ev:int = regFunc(FSM__ZN9b2ContactD1Ev.start)

public final class FSM__ZN9b2ContactD1Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN9b2ContactD1Ev = new FSM__ZN9b2ContactD1Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN9b2ContactD1Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN9b2ContactD1Ev_errState",
			"__ZN9b2ContactD1Ev_state0"))
	__asm(lbl("__ZN9b2ContactD1Ev_state0"))
	__asm(lbl("__ZN9b2ContactD1Ev__XprivateX__BB297_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV9b2Contact)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN9b2ContactD1Ev_errState"))
		throw("Invalid state in __ZN9b2ContactD1Ev")
	}
}



// Async
public const __ZN9b2ContactD0Ev:int = regFunc(FSM__ZN9b2ContactD0Ev.start)

public final class FSM__ZN9b2ContactD0Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN9b2ContactD0Ev = new FSM__ZN9b2ContactD0Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN9b2ContactD0Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN9b2ContactD0Ev_errState",
			"__ZN9b2ContactD0Ev_state0",
			"__ZN9b2ContactD0Ev_state1"))
	__asm(lbl("__ZN9b2ContactD0Ev_state0"))
	__asm(lbl("__ZN9b2ContactD0Ev__XprivateX__BB298_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV9b2Contact)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		__asm(push(i1==0), iftrue, target("__ZN9b2ContactD0Ev__XprivateX__BB298_2_F"))
	__asm(lbl("__ZN9b2ContactD0Ev__XprivateX__BB298_1_F"))
		i0 =  (0)
		mstate.esp -= 8
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN9b2ContactD0Ev_state1"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__ZN9b2ContactD0Ev__XprivateX__BB298_2_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN9b2ContactD0Ev_errState"))
		throw("Invalid state in __ZN9b2ContactD0Ev")
	}
}



// Async
public const __ZN7b2ShapeD1Ev:int = regFunc(FSM__ZN7b2ShapeD1Ev.start)

public final class FSM__ZN7b2ShapeD1Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN7b2ShapeD1Ev = new FSM__ZN7b2ShapeD1Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN7b2ShapeD1Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN7b2ShapeD1Ev_errState",
			"__ZN7b2ShapeD1Ev_state0"))
	__asm(lbl("__ZN7b2ShapeD1Ev_state0"))
	__asm(lbl("__ZN7b2ShapeD1Ev__XprivateX__BB299_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV7b2Shape)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN7b2ShapeD1Ev_errState"))
		throw("Invalid state in __ZN7b2ShapeD1Ev")
	}
}



// Async
public const __ZN7b2ShapeD0Ev:int = regFunc(FSM__ZN7b2ShapeD0Ev.start)

public final class FSM__ZN7b2ShapeD0Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN7b2ShapeD0Ev = new FSM__ZN7b2ShapeD0Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN7b2ShapeD0Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN7b2ShapeD0Ev_errState",
			"__ZN7b2ShapeD0Ev_state0",
			"__ZN7b2ShapeD0Ev_state1"))
	__asm(lbl("__ZN7b2ShapeD0Ev_state0"))
	__asm(lbl("__ZN7b2ShapeD0Ev__XprivateX__BB300_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV7b2Shape)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		__asm(push(i1==0), iftrue, target("__ZN7b2ShapeD0Ev__XprivateX__BB300_2_F"))
	__asm(lbl("__ZN7b2ShapeD0Ev__XprivateX__BB300_1_F"))
		i0 =  (0)
		mstate.esp -= 8
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN7b2ShapeD0Ev_state1"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__ZN7b2ShapeD0Ev__XprivateX__BB300_2_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN7b2ShapeD0Ev_errState"))
		throw("Invalid state in __ZN7b2ShapeD0Ev")
	}
}



// Async
public const __ZN13WorldListenerD1Ev:int = regFunc(FSM__ZN13WorldListenerD1Ev.start)

public final class FSM__ZN13WorldListenerD1Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN13WorldListenerD1Ev = new FSM__ZN13WorldListenerD1Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int

	public static const intRegCount:int = 3

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN13WorldListenerD1Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN13WorldListenerD1Ev_errState",
			"__ZN13WorldListenerD1Ev_state0"))
	__asm(lbl("__ZN13WorldListenerD1Ev_state0"))
	__asm(lbl("__ZN13WorldListenerD1Ev__XprivateX__BB301_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV21b2DestructionListener)
		i1 =  (__ZTV17b2ContactListener)
		i2 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push((i2+4)), op(0x3c))
		i0 =  (i1 + 8)
		__asm(push(i0), push(i2), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN13WorldListenerD1Ev_errState"))
		throw("Invalid state in __ZN13WorldListenerD1Ev")
	}
}



// Async
public const __ZN13WorldListenerD0Ev:int = regFunc(FSM__ZN13WorldListenerD0Ev.start)

public final class FSM__ZN13WorldListenerD0Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN13WorldListenerD0Ev = new FSM__ZN13WorldListenerD0Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int

	public static const intRegCount:int = 3

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN13WorldListenerD0Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN13WorldListenerD0Ev_errState",
			"__ZN13WorldListenerD0Ev_state0",
			"__ZN13WorldListenerD0Ev_state1"))
	__asm(lbl("__ZN13WorldListenerD0Ev_state0"))
	__asm(lbl("__ZN13WorldListenerD0Ev__XprivateX__BB302_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV21b2DestructionListener)
		i1 =  (__ZTV17b2ContactListener)
		i2 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push((i2+4)), op(0x3c))
		i0 =  (i1 + 8)
		__asm(push(i0), push(i2), op(0x3c))
		__asm(push(i2==0), iftrue, target("__ZN13WorldListenerD0Ev__XprivateX__BB302_2_F"))
	__asm(lbl("__ZN13WorldListenerD0Ev__XprivateX__BB302_1_F"))
		i0 =  (0)
		mstate.esp -= 8
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN13WorldListenerD0Ev_state1"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__ZN13WorldListenerD0Ev__XprivateX__BB302_2_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN13WorldListenerD0Ev_errState"))
		throw("Invalid state in __ZN13WorldListenerD0Ev")
	}
}



// Async
public const __ZN13WorldListener12BeginContactEP9b2Contact:int = regFunc(FSM__ZN13WorldListener12BeginContactEP9b2Contact.start)

public final class FSM__ZN13WorldListener12BeginContactEP9b2Contact extends Machine {

	public static function start():void {
			var result:FSM__ZN13WorldListener12BeginContactEP9b2Contact = new FSM__ZN13WorldListener12BeginContactEP9b2Contact
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int

	public static const intRegCount:int = 6

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN13WorldListener12BeginContactEP9b2Contact_entry"))
		__asm(push(state), switchjump(
			"__ZN13WorldListener12BeginContactEP9b2Contact_errState",
			"__ZN13WorldListener12BeginContactEP9b2Contact_state0",
			"__ZN13WorldListener12BeginContactEP9b2Contact_state1"))
	__asm(lbl("__ZN13WorldListener12BeginContactEP9b2Contact_state0"))
	__asm(lbl("__ZN13WorldListener12BeginContactEP9b2Contact__XprivateX__BB303_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+48)), op(0x37))))
		i2 =  ((__xasm<int>(push(i1), op(0x35))))
		i3 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		__asm(push(i2!=0), iftrue, target("__ZN13WorldListener12BeginContactEP9b2Contact__XprivateX__BB303_2_F"))
	__asm(lbl("__ZN13WorldListener12BeginContactEP9b2Contact__XprivateX__BB303_1_F"))
		i2 =  ((__xasm<int>(push((i0+52)), op(0x37))))
		i2 =  ((__xasm<int>(push(i2), op(0x35))))
		__asm(push(i2==0), iftrue, target("__ZN13WorldListener12BeginContactEP9b2Contact__XprivateX__BB303_3_F"))
	__asm(lbl("__ZN13WorldListener12BeginContactEP9b2Contact__XprivateX__BB303_2_F"))
		i2 =  (__2E_str75282)
		i4 =  ((__xasm<int>(push((i0+52)), op(0x37))))
		i4 =  ((__xasm<int>(push((i4+44)), op(0x37))))
		i1 =  ((__xasm<int>(push((i1+44)), op(0x37))))
		i3 =  ((__xasm<int>(push((i3+8)), op(0x37))))
		mstate.esp -= 24
		i5 =  (__2E_str28235)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i3), push((mstate.esp+4)), op(0x3c))
		__asm(push(i5), push((mstate.esp+8)), op(0x3c))
		__asm(push(i0), push((mstate.esp+12)), op(0x3c))
		__asm(push(i1), push((mstate.esp+16)), op(0x3c))
		__asm(push(i4), push((mstate.esp+20)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_CallTS])()
		return
	__asm(lbl("__ZN13WorldListener12BeginContactEP9b2Contact_state1"))
		i0 = mstate.eax
		mstate.esp += 24
	__asm(lbl("__ZN13WorldListener12BeginContactEP9b2Contact__XprivateX__BB303_3_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN13WorldListener12BeginContactEP9b2Contact_errState"))
		throw("Invalid state in __ZN13WorldListener12BeginContactEP9b2Contact")
	}
}



// Async
public const __ZN13WorldListener10EndContactEP9b2Contact:int = regFunc(FSM__ZN13WorldListener10EndContactEP9b2Contact.start)

public final class FSM__ZN13WorldListener10EndContactEP9b2Contact extends Machine {

	public static function start():void {
			var result:FSM__ZN13WorldListener10EndContactEP9b2Contact = new FSM__ZN13WorldListener10EndContactEP9b2Contact
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int

	public static const intRegCount:int = 6

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN13WorldListener10EndContactEP9b2Contact_entry"))
		__asm(push(state), switchjump(
			"__ZN13WorldListener10EndContactEP9b2Contact_errState",
			"__ZN13WorldListener10EndContactEP9b2Contact_state0",
			"__ZN13WorldListener10EndContactEP9b2Contact_state1"))
	__asm(lbl("__ZN13WorldListener10EndContactEP9b2Contact_state0"))
	__asm(lbl("__ZN13WorldListener10EndContactEP9b2Contact__XprivateX__BB304_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+48)), op(0x37))))
		i2 =  ((__xasm<int>(push((i1+1)), op(0x35))))
		i3 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		__asm(push(i2!=0), iftrue, target("__ZN13WorldListener10EndContactEP9b2Contact__XprivateX__BB304_2_F"))
	__asm(lbl("__ZN13WorldListener10EndContactEP9b2Contact__XprivateX__BB304_1_F"))
		i2 =  ((__xasm<int>(push((i0+52)), op(0x37))))
		i2 =  ((__xasm<int>(push((i2+1)), op(0x35))))
		__asm(push(i2==0), iftrue, target("__ZN13WorldListener10EndContactEP9b2Contact__XprivateX__BB304_3_F"))
	__asm(lbl("__ZN13WorldListener10EndContactEP9b2Contact__XprivateX__BB304_2_F"))
		i2 =  (__2E_str27234)
		i4 =  ((__xasm<int>(push((i0+52)), op(0x37))))
		i4 =  ((__xasm<int>(push((i4+44)), op(0x37))))
		i1 =  ((__xasm<int>(push((i1+44)), op(0x37))))
		i3 =  ((__xasm<int>(push((i3+8)), op(0x37))))
		mstate.esp -= 24
		i5 =  (__2E_str28235)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i3), push((mstate.esp+4)), op(0x3c))
		__asm(push(i5), push((mstate.esp+8)), op(0x3c))
		__asm(push(i0), push((mstate.esp+12)), op(0x3c))
		__asm(push(i1), push((mstate.esp+16)), op(0x3c))
		__asm(push(i4), push((mstate.esp+20)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_CallTS])()
		return
	__asm(lbl("__ZN13WorldListener10EndContactEP9b2Contact_state1"))
		i0 = mstate.eax
		mstate.esp += 24
	__asm(lbl("__ZN13WorldListener10EndContactEP9b2Contact__XprivateX__BB304_3_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN13WorldListener10EndContactEP9b2Contact_errState"))
		throw("Invalid state in __ZN13WorldListener10EndContactEP9b2Contact")
	}
}



// Async
public const __ZN13WorldListener8PreSolveEP9b2ContactPK10b2Manifold:int = regFunc(FSM__ZN13WorldListener8PreSolveEP9b2ContactPK10b2Manifold.start)

public final class FSM__ZN13WorldListener8PreSolveEP9b2ContactPK10b2Manifold extends Machine {

	public static function start():void {
			var result:FSM__ZN13WorldListener8PreSolveEP9b2ContactPK10b2Manifold = new FSM__ZN13WorldListener8PreSolveEP9b2ContactPK10b2Manifold
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int

	public static const intRegCount:int = 7

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN13WorldListener8PreSolveEP9b2ContactPK10b2Manifold_entry"))
		__asm(push(state), switchjump(
			"__ZN13WorldListener8PreSolveEP9b2ContactPK10b2Manifold_errState",
			"__ZN13WorldListener8PreSolveEP9b2ContactPK10b2Manifold_state0",
			"__ZN13WorldListener8PreSolveEP9b2ContactPK10b2Manifold_state1"))
	__asm(lbl("__ZN13WorldListener8PreSolveEP9b2ContactPK10b2Manifold_state0"))
	__asm(lbl("__ZN13WorldListener8PreSolveEP9b2ContactPK10b2Manifold__XprivateX__BB305_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i3 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		i3 =  (i3 & 2)
		__asm(push(i3==0), iftrue, target("__ZN13WorldListener8PreSolveEP9b2ContactPK10b2Manifold__XprivateX__BB305_4_F"))
	__asm(lbl("__ZN13WorldListener8PreSolveEP9b2ContactPK10b2Manifold__XprivateX__BB305_1_F"))
		i3 =  ((__xasm<int>(push((i1+48)), op(0x37))))
		i4 =  ((__xasm<int>(push((i3+2)), op(0x35))))
		__asm(push(i4!=0), iftrue, target("__ZN13WorldListener8PreSolveEP9b2ContactPK10b2Manifold__XprivateX__BB305_3_F"))
	__asm(lbl("__ZN13WorldListener8PreSolveEP9b2ContactPK10b2Manifold__XprivateX__BB305_2_F"))
		i4 =  ((__xasm<int>(push((i1+52)), op(0x37))))
		i4 =  ((__xasm<int>(push((i4+2)), op(0x35))))
		__asm(push(i4==0), iftrue, target("__ZN13WorldListener8PreSolveEP9b2ContactPK10b2Manifold__XprivateX__BB305_4_F"))
	__asm(lbl("__ZN13WorldListener8PreSolveEP9b2ContactPK10b2Manifold__XprivateX__BB305_3_F"))
		i4 =  (__2E_str29236)
		i5 =  ((__xasm<int>(push((i1+52)), op(0x37))))
		i5 =  ((__xasm<int>(push((i5+44)), op(0x37))))
		i3 =  ((__xasm<int>(push((i3+44)), op(0x37))))
		i0 =  ((__xasm<int>(push((i0+8)), op(0x37))))
		mstate.esp -= 28
		i6 =  (__2E_str30237)
		__asm(push(i4), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i6), push((mstate.esp+8)), op(0x3c))
		__asm(push(i1), push((mstate.esp+12)), op(0x3c))
		__asm(push(i3), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		__asm(push(i2), push((mstate.esp+24)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_CallTS])()
		return
	__asm(lbl("__ZN13WorldListener8PreSolveEP9b2ContactPK10b2Manifold_state1"))
		i0 = mstate.eax
		mstate.esp += 28
	__asm(lbl("__ZN13WorldListener8PreSolveEP9b2ContactPK10b2Manifold__XprivateX__BB305_4_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN13WorldListener8PreSolveEP9b2ContactPK10b2Manifold_errState"))
		throw("Invalid state in __ZN13WorldListener8PreSolveEP9b2ContactPK10b2Manifold")
	}
}



// Async
public const __ZN13WorldListener9PostSolveEP9b2ContactPK16b2ContactImpulse:int = regFunc(FSM__ZN13WorldListener9PostSolveEP9b2ContactPK16b2ContactImpulse.start)

public final class FSM__ZN13WorldListener9PostSolveEP9b2ContactPK16b2ContactImpulse extends Machine {

	public static function start():void {
			var result:FSM__ZN13WorldListener9PostSolveEP9b2ContactPK16b2ContactImpulse = new FSM__ZN13WorldListener9PostSolveEP9b2ContactPK16b2ContactImpulse
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int

	public static const intRegCount:int = 7

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN13WorldListener9PostSolveEP9b2ContactPK16b2ContactImpulse_entry"))
		__asm(push(state), switchjump(
			"__ZN13WorldListener9PostSolveEP9b2ContactPK16b2ContactImpulse_errState",
			"__ZN13WorldListener9PostSolveEP9b2ContactPK16b2ContactImpulse_state0",
			"__ZN13WorldListener9PostSolveEP9b2ContactPK16b2ContactImpulse_state1"))
	__asm(lbl("__ZN13WorldListener9PostSolveEP9b2ContactPK16b2ContactImpulse_state0"))
	__asm(lbl("__ZN13WorldListener9PostSolveEP9b2ContactPK16b2ContactImpulse__XprivateX__BB306_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+48)), op(0x37))))
		i2 =  ((__xasm<int>(push((i1+3)), op(0x35))))
		i3 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i4 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		__asm(push(i2!=0), iftrue, target("__ZN13WorldListener9PostSolveEP9b2ContactPK16b2ContactImpulse__XprivateX__BB306_2_F"))
	__asm(lbl("__ZN13WorldListener9PostSolveEP9b2ContactPK16b2ContactImpulse__XprivateX__BB306_1_F"))
		i2 =  ((__xasm<int>(push((i0+52)), op(0x37))))
		i2 =  ((__xasm<int>(push((i2+3)), op(0x35))))
		__asm(push(i2==0), iftrue, target("__ZN13WorldListener9PostSolveEP9b2ContactPK16b2ContactImpulse__XprivateX__BB306_3_F"))
	__asm(lbl("__ZN13WorldListener9PostSolveEP9b2ContactPK16b2ContactImpulse__XprivateX__BB306_2_F"))
		i2 =  (__2E_str31238)
		i5 =  ((__xasm<int>(push((i0+52)), op(0x37))))
		i5 =  ((__xasm<int>(push((i5+44)), op(0x37))))
		i1 =  ((__xasm<int>(push((i1+44)), op(0x37))))
		i3 =  ((__xasm<int>(push((i3+8)), op(0x37))))
		mstate.esp -= 28
		i6 =  (__2E_str30237)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i3), push((mstate.esp+4)), op(0x3c))
		__asm(push(i6), push((mstate.esp+8)), op(0x3c))
		__asm(push(i0), push((mstate.esp+12)), op(0x3c))
		__asm(push(i1), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		__asm(push(i4), push((mstate.esp+24)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_CallTS])()
		return
	__asm(lbl("__ZN13WorldListener9PostSolveEP9b2ContactPK16b2ContactImpulse_state1"))
		i0 = mstate.eax
		mstate.esp += 28
	__asm(lbl("__ZN13WorldListener9PostSolveEP9b2ContactPK16b2ContactImpulse__XprivateX__BB306_3_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN13WorldListener9PostSolveEP9b2ContactPK16b2ContactImpulse_errState"))
		throw("Invalid state in __ZN13WorldListener9PostSolveEP9b2ContactPK16b2ContactImpulse")
	}
}



// Async
public const __ZN13WorldListener10SayGoodbyeEP7b2Joint:int = regFunc(FSM__ZN13WorldListener10SayGoodbyeEP7b2Joint.start)

public final class FSM__ZN13WorldListener10SayGoodbyeEP7b2Joint extends Machine {

	public static function start():void {
			var result:FSM__ZN13WorldListener10SayGoodbyeEP7b2Joint = new FSM__ZN13WorldListener10SayGoodbyeEP7b2Joint
		gstate.gworker = result
	}

	public var i0:int

	public static const intRegCount:int = 1

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN13WorldListener10SayGoodbyeEP7b2Joint_entry"))
		__asm(push(state), switchjump(
			"__ZN13WorldListener10SayGoodbyeEP7b2Joint_errState",
			"__ZN13WorldListener10SayGoodbyeEP7b2Joint_state0",
			"__ZN13WorldListener10SayGoodbyeEP7b2Joint_state1"))
	__asm(lbl("__ZN13WorldListener10SayGoodbyeEP7b2Joint_state0"))
	__asm(lbl("__ZN13WorldListener10SayGoodbyeEP7b2Joint__XprivateX__BB307_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i0 =  ((__xasm<int>(push((i0+60)), op(0x37))))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_Release])()
		return
	__asm(lbl("__ZN13WorldListener10SayGoodbyeEP7b2Joint_state1"))
		mstate.esp += 4
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN13WorldListener10SayGoodbyeEP7b2Joint_errState"))
		throw("Invalid state in __ZN13WorldListener10SayGoodbyeEP7b2Joint")
	}
}



// Async
public const __ZN13WorldListener10SayGoodbyeEP9b2Fixture:int = regFunc(FSM__ZN13WorldListener10SayGoodbyeEP9b2Fixture.start)

public final class FSM__ZN13WorldListener10SayGoodbyeEP9b2Fixture extends Machine {

	public static function start():void {
			var result:FSM__ZN13WorldListener10SayGoodbyeEP9b2Fixture = new FSM__ZN13WorldListener10SayGoodbyeEP9b2Fixture
		gstate.gworker = result
	}

	public var i0:int

	public static const intRegCount:int = 1

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN13WorldListener10SayGoodbyeEP9b2Fixture_entry"))
		__asm(push(state), switchjump(
			"__ZN13WorldListener10SayGoodbyeEP9b2Fixture_errState",
			"__ZN13WorldListener10SayGoodbyeEP9b2Fixture_state0",
			"__ZN13WorldListener10SayGoodbyeEP9b2Fixture_state1"))
	__asm(lbl("__ZN13WorldListener10SayGoodbyeEP9b2Fixture_state0"))
	__asm(lbl("__ZN13WorldListener10SayGoodbyeEP9b2Fixture__XprivateX__BB308_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i0 =  ((__xasm<int>(push((i0+44)), op(0x37))))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_Release])()
		return
	__asm(lbl("__ZN13WorldListener10SayGoodbyeEP9b2Fixture_state1"))
		mstate.esp += 4
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN13WorldListener10SayGoodbyeEP9b2Fixture_errState"))
		throw("Invalid state in __ZN13WorldListener10SayGoodbyeEP9b2Fixture")
	}
}



// Async
public const __ZThn4_N13WorldListenerD1Ev:int = regFunc(FSM__ZThn4_N13WorldListenerD1Ev.start)

public final class FSM__ZThn4_N13WorldListenerD1Ev extends Machine {

	public static function start():void {
			var result:FSM__ZThn4_N13WorldListenerD1Ev = new FSM__ZThn4_N13WorldListenerD1Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int

	public static const intRegCount:int = 3

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZThn4_N13WorldListenerD1Ev_entry"))
		__asm(push(state), switchjump(
			"__ZThn4_N13WorldListenerD1Ev_errState",
			"__ZThn4_N13WorldListenerD1Ev_state0"))
	__asm(lbl("__ZThn4_N13WorldListenerD1Ev_state0"))
	__asm(lbl("__ZThn4_N13WorldListenerD1Ev__XprivateX__BB309_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV21b2DestructionListener)
		i1 =  (__ZTV17b2ContactListener)
		i2 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i2), op(0x3c))
		i0 =  (i1 + 8)
		__asm(push(i0), push((i2+-4)), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZThn4_N13WorldListenerD1Ev_errState"))
		throw("Invalid state in __ZThn4_N13WorldListenerD1Ev")
	}
}



// Async
public const __ZThn4_N13WorldListenerD0Ev:int = regFunc(FSM__ZThn4_N13WorldListenerD0Ev.start)

public final class FSM__ZThn4_N13WorldListenerD0Ev extends Machine {

	public static function start():void {
			var result:FSM__ZThn4_N13WorldListenerD0Ev = new FSM__ZThn4_N13WorldListenerD0Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int

	public static const intRegCount:int = 3

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZThn4_N13WorldListenerD0Ev_entry"))
		__asm(push(state), switchjump(
			"__ZThn4_N13WorldListenerD0Ev_errState",
			"__ZThn4_N13WorldListenerD0Ev_state0",
			"__ZThn4_N13WorldListenerD0Ev_state1"))
	__asm(lbl("__ZThn4_N13WorldListenerD0Ev_state0"))
	__asm(lbl("__ZThn4_N13WorldListenerD0Ev__XprivateX__BB310_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV21b2DestructionListener)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i2 =  (__ZTV17b2ContactListener)
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		i0 =  (i2 + 8)
		__asm(push(i0), push((i1+-4)), op(0x3c))
		i0 =  (i1 + -4)
		__asm(push(i0==0), iftrue, target("__ZThn4_N13WorldListenerD0Ev__XprivateX__BB310_2_F"))
	__asm(lbl("__ZThn4_N13WorldListenerD0Ev__XprivateX__BB310_1_F"))
		i1 =  (0)
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZThn4_N13WorldListenerD0Ev_state1"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__ZThn4_N13WorldListenerD0Ev__XprivateX__BB310_2_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZThn4_N13WorldListenerD0Ev_errState"))
		throw("Invalid state in __ZThn4_N13WorldListenerD0Ev")
	}
}



// Async
public const __ZThn4_N13WorldListener10SayGoodbyeEP7b2Joint:int = regFunc(FSM__ZThn4_N13WorldListener10SayGoodbyeEP7b2Joint.start)

public final class FSM__ZThn4_N13WorldListener10SayGoodbyeEP7b2Joint extends Machine {

	public static function start():void {
			var result:FSM__ZThn4_N13WorldListener10SayGoodbyeEP7b2Joint = new FSM__ZThn4_N13WorldListener10SayGoodbyeEP7b2Joint
		gstate.gworker = result
	}

	public var i0:int

	public static const intRegCount:int = 1

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZThn4_N13WorldListener10SayGoodbyeEP7b2Joint_entry"))
		__asm(push(state), switchjump(
			"__ZThn4_N13WorldListener10SayGoodbyeEP7b2Joint_errState",
			"__ZThn4_N13WorldListener10SayGoodbyeEP7b2Joint_state0",
			"__ZThn4_N13WorldListener10SayGoodbyeEP7b2Joint_state1"))
	__asm(lbl("__ZThn4_N13WorldListener10SayGoodbyeEP7b2Joint_state0"))
	__asm(lbl("__ZThn4_N13WorldListener10SayGoodbyeEP7b2Joint__XprivateX__BB311_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i0 =  ((__xasm<int>(push((i0+60)), op(0x37))))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_Release])()
		return
	__asm(lbl("__ZThn4_N13WorldListener10SayGoodbyeEP7b2Joint_state1"))
		mstate.esp += 4
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZThn4_N13WorldListener10SayGoodbyeEP7b2Joint_errState"))
		throw("Invalid state in __ZThn4_N13WorldListener10SayGoodbyeEP7b2Joint")
	}
}



// Async
public const __ZThn4_N13WorldListener10SayGoodbyeEP9b2Fixture:int = regFunc(FSM__ZThn4_N13WorldListener10SayGoodbyeEP9b2Fixture.start)

public final class FSM__ZThn4_N13WorldListener10SayGoodbyeEP9b2Fixture extends Machine {

	public static function start():void {
			var result:FSM__ZThn4_N13WorldListener10SayGoodbyeEP9b2Fixture = new FSM__ZThn4_N13WorldListener10SayGoodbyeEP9b2Fixture
		gstate.gworker = result
	}

	public var i0:int

	public static const intRegCount:int = 1

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZThn4_N13WorldListener10SayGoodbyeEP9b2Fixture_entry"))
		__asm(push(state), switchjump(
			"__ZThn4_N13WorldListener10SayGoodbyeEP9b2Fixture_errState",
			"__ZThn4_N13WorldListener10SayGoodbyeEP9b2Fixture_state0",
			"__ZThn4_N13WorldListener10SayGoodbyeEP9b2Fixture_state1"))
	__asm(lbl("__ZThn4_N13WorldListener10SayGoodbyeEP9b2Fixture_state0"))
	__asm(lbl("__ZThn4_N13WorldListener10SayGoodbyeEP9b2Fixture__XprivateX__BB312_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i0 =  ((__xasm<int>(push((i0+44)), op(0x37))))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_Release])()
		return
	__asm(lbl("__ZThn4_N13WorldListener10SayGoodbyeEP9b2Fixture_state1"))
		mstate.esp += 4
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZThn4_N13WorldListener10SayGoodbyeEP9b2Fixture_errState"))
		throw("Invalid state in __ZThn4_N13WorldListener10SayGoodbyeEP9b2Fixture")
	}
}



// Async
public const __ZN21b2DestructionListenerD1Ev:int = regFunc(FSM__ZN21b2DestructionListenerD1Ev.start)

public final class FSM__ZN21b2DestructionListenerD1Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN21b2DestructionListenerD1Ev = new FSM__ZN21b2DestructionListenerD1Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN21b2DestructionListenerD1Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN21b2DestructionListenerD1Ev_errState",
			"__ZN21b2DestructionListenerD1Ev_state0"))
	__asm(lbl("__ZN21b2DestructionListenerD1Ev_state0"))
	__asm(lbl("__ZN21b2DestructionListenerD1Ev__XprivateX__BB313_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV21b2DestructionListener)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN21b2DestructionListenerD1Ev_errState"))
		throw("Invalid state in __ZN21b2DestructionListenerD1Ev")
	}
}



// Async
public const __ZN21b2DestructionListenerD0Ev:int = regFunc(FSM__ZN21b2DestructionListenerD0Ev.start)

public final class FSM__ZN21b2DestructionListenerD0Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN21b2DestructionListenerD0Ev = new FSM__ZN21b2DestructionListenerD0Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN21b2DestructionListenerD0Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN21b2DestructionListenerD0Ev_errState",
			"__ZN21b2DestructionListenerD0Ev_state0",
			"__ZN21b2DestructionListenerD0Ev_state1"))
	__asm(lbl("__ZN21b2DestructionListenerD0Ev_state0"))
	__asm(lbl("__ZN21b2DestructionListenerD0Ev__XprivateX__BB314_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV21b2DestructionListener)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		__asm(push(i1==0), iftrue, target("__ZN21b2DestructionListenerD0Ev__XprivateX__BB314_2_F"))
	__asm(lbl("__ZN21b2DestructionListenerD0Ev__XprivateX__BB314_1_F"))
		i0 =  (0)
		mstate.esp -= 8
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN21b2DestructionListenerD0Ev_state1"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__ZN21b2DestructionListenerD0Ev__XprivateX__BB314_2_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN21b2DestructionListenerD0Ev_errState"))
		throw("Invalid state in __ZN21b2DestructionListenerD0Ev")
	}
}



// Async
public const __ZN15RayCastCallbackD1Ev:int = regFunc(FSM__ZN15RayCastCallbackD1Ev.start)

public final class FSM__ZN15RayCastCallbackD1Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN15RayCastCallbackD1Ev = new FSM__ZN15RayCastCallbackD1Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN15RayCastCallbackD1Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN15RayCastCallbackD1Ev_errState",
			"__ZN15RayCastCallbackD1Ev_state0"))
	__asm(lbl("__ZN15RayCastCallbackD1Ev_state0"))
	__asm(lbl("__ZN15RayCastCallbackD1Ev__XprivateX__BB315_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV17b2RayCastCallback)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN15RayCastCallbackD1Ev_errState"))
		throw("Invalid state in __ZN15RayCastCallbackD1Ev")
	}
}



// Async
public const __ZN15RayCastCallbackD0Ev:int = regFunc(FSM__ZN15RayCastCallbackD0Ev.start)

public final class FSM__ZN15RayCastCallbackD0Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN15RayCastCallbackD0Ev = new FSM__ZN15RayCastCallbackD0Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN15RayCastCallbackD0Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN15RayCastCallbackD0Ev_errState",
			"__ZN15RayCastCallbackD0Ev_state0",
			"__ZN15RayCastCallbackD0Ev_state1"))
	__asm(lbl("__ZN15RayCastCallbackD0Ev_state0"))
	__asm(lbl("__ZN15RayCastCallbackD0Ev__XprivateX__BB316_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV17b2RayCastCallback)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		__asm(push(i1==0), iftrue, target("__ZN15RayCastCallbackD0Ev__XprivateX__BB316_2_F"))
	__asm(lbl("__ZN15RayCastCallbackD0Ev__XprivateX__BB316_1_F"))
		i0 =  (0)
		mstate.esp -= 8
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN15RayCastCallbackD0Ev_state1"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__ZN15RayCastCallbackD0Ev__XprivateX__BB316_2_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN15RayCastCallbackD0Ev_errState"))
		throw("Invalid state in __ZN15RayCastCallbackD0Ev")
	}
}



// Async
public const __ZN15RayCastCallback13ReportFixtureEP9b2FixtureRK6b2Vec2S4_f:int = regFunc(FSM__ZN15RayCastCallback13ReportFixtureEP9b2FixtureRK6b2Vec2S4_f.start)

public final class FSM__ZN15RayCastCallback13ReportFixtureEP9b2FixtureRK6b2Vec2S4_f extends Machine {

	public static function start():void {
			var result:FSM__ZN15RayCastCallback13ReportFixtureEP9b2FixtureRK6b2Vec2S4_f = new FSM__ZN15RayCastCallback13ReportFixtureEP9b2FixtureRK6b2Vec2S4_f
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int

	public static const intRegCount:int = 5
	public var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number

	public static const NumberRegCount:int = 5
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN15RayCastCallback13ReportFixtureEP9b2FixtureRK6b2Vec2S4_f_entry"))
		__asm(push(state), switchjump(
			"__ZN15RayCastCallback13ReportFixtureEP9b2FixtureRK6b2Vec2S4_f_errState",
			"__ZN15RayCastCallback13ReportFixtureEP9b2FixtureRK6b2Vec2S4_f_state0",
			"__ZN15RayCastCallback13ReportFixtureEP9b2FixtureRK6b2Vec2S4_f_state1",
			"__ZN15RayCastCallback13ReportFixtureEP9b2FixtureRK6b2Vec2S4_f_state2",
			"__ZN15RayCastCallback13ReportFixtureEP9b2FixtureRK6b2Vec2S4_f_state3"))
	__asm(lbl("__ZN15RayCastCallback13ReportFixtureEP9b2FixtureRK6b2Vec2S4_f_state0"))
	__asm(lbl("__ZN15RayCastCallback13ReportFixtureEP9b2FixtureRK6b2Vec2S4_f__XprivateX__BB317_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__2E_str33240)
		i1 =  ((__xasm<int>(push((mstate.ebp+20)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i3 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i4 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i1+4)), op(0x38))))
		f1 =  ((__xasm<Number>(push(i1), op(0x38))))
		f2 =  ((__xasm<Number>(push((i2+4)), op(0x38))))
		f3 =  ((__xasm<Number>(push(i2), op(0x38))))
		i1 =  ((__xasm<int>(push((i3+44)), op(0x37))))
		i2 =  ((__xasm<int>(push((i4+4)), op(0x37))))
		mstate.esp -= 56
		f4 =  ((__xasm<Number>(push((mstate.ebp+24)), op(0x38))))
		i3 =  (0)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i3), push((mstate.esp+4)), op(0x3c))
		__asm(push(i0), push((mstate.esp+8)), op(0x3c))
		__asm(push(i1), push((mstate.esp+12)), op(0x3c))
		__asm(push(f3), push((mstate.esp+16)), op(0x3e))
		__asm(push(f2), push((mstate.esp+24)), op(0x3e))
		__asm(push(f1), push((mstate.esp+32)), op(0x3e))
		__asm(push(f0), push((mstate.esp+40)), op(0x3e))
		__asm(push(f4), push((mstate.esp+48)), op(0x3e))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_CallT])()
		return
	__asm(lbl("__ZN15RayCastCallback13ReportFixtureEP9b2FixtureRK6b2Vec2S4_f_state1"))
		i0 = mstate.eax
		mstate.esp += 56
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 2
		mstate.esp -= 4;(mstate.funcs[_AS3_NumberValue])()
		return
	__asm(lbl("__ZN15RayCastCallback13ReportFixtureEP9b2FixtureRK6b2Vec2S4_f_state2"))
		f0 = mstate.st0
		mstate.esp += 4
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 3
		mstate.esp -= 4;(mstate.funcs[_AS3_Release])()
		return
	__asm(lbl("__ZN15RayCastCallback13ReportFixtureEP9b2FixtureRK6b2Vec2S4_f_state3"))
		mstate.esp += 4
		f0 =  f0/*fround*/
		mstate.st0 = f0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN15RayCastCallback13ReportFixtureEP9b2FixtureRK6b2Vec2S4_f_errState"))
		throw("Invalid state in __ZN15RayCastCallback13ReportFixtureEP9b2FixtureRK6b2Vec2S4_f")
	}
}



// Async
public const __ZN17b2RayCastCallbackD1Ev:int = regFunc(FSM__ZN17b2RayCastCallbackD1Ev.start)

public final class FSM__ZN17b2RayCastCallbackD1Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN17b2RayCastCallbackD1Ev = new FSM__ZN17b2RayCastCallbackD1Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN17b2RayCastCallbackD1Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN17b2RayCastCallbackD1Ev_errState",
			"__ZN17b2RayCastCallbackD1Ev_state0"))
	__asm(lbl("__ZN17b2RayCastCallbackD1Ev_state0"))
	__asm(lbl("__ZN17b2RayCastCallbackD1Ev__XprivateX__BB318_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV17b2RayCastCallback)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN17b2RayCastCallbackD1Ev_errState"))
		throw("Invalid state in __ZN17b2RayCastCallbackD1Ev")
	}
}



// Async
public const __ZN17b2RayCastCallbackD0Ev:int = regFunc(FSM__ZN17b2RayCastCallbackD0Ev.start)

public final class FSM__ZN17b2RayCastCallbackD0Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN17b2RayCastCallbackD0Ev = new FSM__ZN17b2RayCastCallbackD0Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN17b2RayCastCallbackD0Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN17b2RayCastCallbackD0Ev_errState",
			"__ZN17b2RayCastCallbackD0Ev_state0",
			"__ZN17b2RayCastCallbackD0Ev_state1"))
	__asm(lbl("__ZN17b2RayCastCallbackD0Ev_state0"))
	__asm(lbl("__ZN17b2RayCastCallbackD0Ev__XprivateX__BB319_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV17b2RayCastCallback)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		__asm(push(i1==0), iftrue, target("__ZN17b2RayCastCallbackD0Ev__XprivateX__BB319_2_F"))
	__asm(lbl("__ZN17b2RayCastCallbackD0Ev__XprivateX__BB319_1_F"))
		i0 =  (0)
		mstate.esp -= 8
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN17b2RayCastCallbackD0Ev_state1"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__ZN17b2RayCastCallbackD0Ev__XprivateX__BB319_2_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN17b2RayCastCallbackD0Ev_errState"))
		throw("Invalid state in __ZN17b2RayCastCallbackD0Ev")
	}
}



// Async
public const __ZN13QueryCallbackD1Ev:int = regFunc(FSM__ZN13QueryCallbackD1Ev.start)

public final class FSM__ZN13QueryCallbackD1Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN13QueryCallbackD1Ev = new FSM__ZN13QueryCallbackD1Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN13QueryCallbackD1Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN13QueryCallbackD1Ev_errState",
			"__ZN13QueryCallbackD1Ev_state0"))
	__asm(lbl("__ZN13QueryCallbackD1Ev_state0"))
	__asm(lbl("__ZN13QueryCallbackD1Ev__XprivateX__BB320_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV15b2QueryCallback)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN13QueryCallbackD1Ev_errState"))
		throw("Invalid state in __ZN13QueryCallbackD1Ev")
	}
}



// Async
public const __ZN13QueryCallbackD0Ev:int = regFunc(FSM__ZN13QueryCallbackD0Ev.start)

public final class FSM__ZN13QueryCallbackD0Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN13QueryCallbackD0Ev = new FSM__ZN13QueryCallbackD0Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN13QueryCallbackD0Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN13QueryCallbackD0Ev_errState",
			"__ZN13QueryCallbackD0Ev_state0",
			"__ZN13QueryCallbackD0Ev_state1"))
	__asm(lbl("__ZN13QueryCallbackD0Ev_state0"))
	__asm(lbl("__ZN13QueryCallbackD0Ev__XprivateX__BB321_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV15b2QueryCallback)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		__asm(push(i1==0), iftrue, target("__ZN13QueryCallbackD0Ev__XprivateX__BB321_2_F"))
	__asm(lbl("__ZN13QueryCallbackD0Ev__XprivateX__BB321_1_F"))
		i0 =  (0)
		mstate.esp -= 8
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN13QueryCallbackD0Ev_state1"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__ZN13QueryCallbackD0Ev__XprivateX__BB321_2_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN13QueryCallbackD0Ev_errState"))
		throw("Invalid state in __ZN13QueryCallbackD0Ev")
	}
}



// Async
public const __ZN13QueryCallback13ReportFixtureEP9b2Fixture:int = regFunc(FSM__ZN13QueryCallback13ReportFixtureEP9b2Fixture.start)

public final class FSM__ZN13QueryCallback13ReportFixtureEP9b2Fixture extends Machine {

	public static function start():void {
			var result:FSM__ZN13QueryCallback13ReportFixtureEP9b2Fixture = new FSM__ZN13QueryCallback13ReportFixtureEP9b2Fixture
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int

	public static const intRegCount:int = 4

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN13QueryCallback13ReportFixtureEP9b2Fixture_entry"))
		__asm(push(state), switchjump(
			"__ZN13QueryCallback13ReportFixtureEP9b2Fixture_errState",
			"__ZN13QueryCallback13ReportFixtureEP9b2Fixture_state0",
			"__ZN13QueryCallback13ReportFixtureEP9b2Fixture_state1",
			"__ZN13QueryCallback13ReportFixtureEP9b2Fixture_state2"))
	__asm(lbl("__ZN13QueryCallback13ReportFixtureEP9b2Fixture_state0"))
	__asm(lbl("__ZN13QueryCallback13ReportFixtureEP9b2Fixture__XprivateX__BB322_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__2E_str32239)
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i1+44)), op(0x37))))
		i2 =  ((__xasm<int>(push((i2+4)), op(0x37))))
		mstate.esp -= 16
		i3 =  (0)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i3), push((mstate.esp+4)), op(0x3c))
		__asm(push(i0), push((mstate.esp+8)), op(0x3c))
		__asm(push(i1), push((mstate.esp+12)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_CallT])()
		return
	__asm(lbl("__ZN13QueryCallback13ReportFixtureEP9b2Fixture_state1"))
		i0 = mstate.eax
		mstate.esp += 16
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 2
		mstate.esp -= 4;(mstate.funcs[_AS3_IntValue])()
		return
	__asm(lbl("__ZN13QueryCallback13ReportFixtureEP9b2Fixture_state2"))
		i0 = mstate.eax
		i0 =  ((i0==1) ? 1 : 0)
		mstate.esp += 4
		i0 =  (i0 & 1)
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN13QueryCallback13ReportFixtureEP9b2Fixture_errState"))
		throw("Invalid state in __ZN13QueryCallback13ReportFixtureEP9b2Fixture")
	}
}



// Async
public const __ZN15b2QueryCallbackD1Ev:int = regFunc(FSM__ZN15b2QueryCallbackD1Ev.start)

public final class FSM__ZN15b2QueryCallbackD1Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN15b2QueryCallbackD1Ev = new FSM__ZN15b2QueryCallbackD1Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN15b2QueryCallbackD1Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN15b2QueryCallbackD1Ev_errState",
			"__ZN15b2QueryCallbackD1Ev_state0"))
	__asm(lbl("__ZN15b2QueryCallbackD1Ev_state0"))
	__asm(lbl("__ZN15b2QueryCallbackD1Ev__XprivateX__BB323_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV15b2QueryCallback)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN15b2QueryCallbackD1Ev_errState"))
		throw("Invalid state in __ZN15b2QueryCallbackD1Ev")
	}
}



// Async
public const __ZN15b2QueryCallbackD0Ev:int = regFunc(FSM__ZN15b2QueryCallbackD0Ev.start)

public final class FSM__ZN15b2QueryCallbackD0Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN15b2QueryCallbackD0Ev = new FSM__ZN15b2QueryCallbackD0Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN15b2QueryCallbackD0Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN15b2QueryCallbackD0Ev_errState",
			"__ZN15b2QueryCallbackD0Ev_state0",
			"__ZN15b2QueryCallbackD0Ev_state1"))
	__asm(lbl("__ZN15b2QueryCallbackD0Ev_state0"))
	__asm(lbl("__ZN15b2QueryCallbackD0Ev__XprivateX__BB324_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV15b2QueryCallback)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		__asm(push(i1==0), iftrue, target("__ZN15b2QueryCallbackD0Ev__XprivateX__BB324_2_F"))
	__asm(lbl("__ZN15b2QueryCallbackD0Ev__XprivateX__BB324_1_F"))
		i0 =  (0)
		mstate.esp -= 8
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN15b2QueryCallbackD0Ev_state1"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__ZN15b2QueryCallbackD0Ev__XprivateX__BB324_2_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN15b2QueryCallbackD0Ev_errState"))
		throw("Invalid state in __ZN15b2QueryCallbackD0Ev")
	}
}



// Async
public const __ZN12b2FixtureDefD1Ev:int = regFunc(FSM__ZN12b2FixtureDefD1Ev.start)

public final class FSM__ZN12b2FixtureDefD1Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN12b2FixtureDefD1Ev = new FSM__ZN12b2FixtureDefD1Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN12b2FixtureDefD1Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN12b2FixtureDefD1Ev_errState",
			"__ZN12b2FixtureDefD1Ev_state0"))
	__asm(lbl("__ZN12b2FixtureDefD1Ev_state0"))
	__asm(lbl("__ZN12b2FixtureDefD1Ev__XprivateX__BB325_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV12b2FixtureDef)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN12b2FixtureDefD1Ev_errState"))
		throw("Invalid state in __ZN12b2FixtureDefD1Ev")
	}
}



// Async
public const __ZN12b2FixtureDefD0Ev:int = regFunc(FSM__ZN12b2FixtureDefD0Ev.start)

public final class FSM__ZN12b2FixtureDefD0Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN12b2FixtureDefD0Ev = new FSM__ZN12b2FixtureDefD0Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN12b2FixtureDefD0Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN12b2FixtureDefD0Ev_errState",
			"__ZN12b2FixtureDefD0Ev_state0",
			"__ZN12b2FixtureDefD0Ev_state1"))
	__asm(lbl("__ZN12b2FixtureDefD0Ev_state0"))
	__asm(lbl("__ZN12b2FixtureDefD0Ev__XprivateX__BB326_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV12b2FixtureDef)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		__asm(push(i1==0), iftrue, target("__ZN12b2FixtureDefD0Ev__XprivateX__BB326_2_F"))
	__asm(lbl("__ZN12b2FixtureDefD0Ev__XprivateX__BB326_1_F"))
		i0 =  (0)
		mstate.esp -= 8
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN12b2FixtureDefD0Ev_state1"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__ZN12b2FixtureDefD0Ev__XprivateX__BB326_2_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN12b2FixtureDefD0Ev_errState"))
		throw("Invalid state in __ZN12b2FixtureDefD0Ev")
	}
}



// Async
public const __Z16b2BodyDef_deletePvP8_AS3_Val:int = regFunc(FSM__Z16b2BodyDef_deletePvP8_AS3_Val.start)

public final class FSM__Z16b2BodyDef_deletePvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z16b2BodyDef_deletePvP8_AS3_Val = new FSM__Z16b2BodyDef_deletePvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int

	public static const intRegCount:int = 3

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z16b2BodyDef_deletePvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z16b2BodyDef_deletePvP8_AS3_Val_errState",
			"__Z16b2BodyDef_deletePvP8_AS3_Val_state0",
			"__Z16b2BodyDef_deletePvP8_AS3_Val_state1",
			"__Z16b2BodyDef_deletePvP8_AS3_Val_state2",
			"__Z16b2BodyDef_deletePvP8_AS3_Val_state3"))
	__asm(lbl("__Z16b2BodyDef_deletePvP8_AS3_Val_state0"))
	__asm(lbl("__Z16b2BodyDef_deletePvP8_AS3_Val__XprivateX__BB327_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 4
		i0 =  (__2E_str26233)
		mstate.esp -= 12
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((mstate.ebp+-4))
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_ArrayValue])()
		return
	__asm(lbl("__Z16b2BodyDef_deletePvP8_AS3_Val_state1"))
		mstate.esp += 12
		i0 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__Z16b2BodyDef_deletePvP8_AS3_Val__XprivateX__BB327_2_F"))
	__asm(lbl("__Z16b2BodyDef_deletePvP8_AS3_Val__XprivateX__BB327_1_F"))
		i1 =  (0)
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z16b2BodyDef_deletePvP8_AS3_Val_state2"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z16b2BodyDef_deletePvP8_AS3_Val__XprivateX__BB327_2_F"))
		state = 3
		mstate.esp -= 4;(mstate.funcs[_AS3_Null])()
		return
	__asm(lbl("__Z16b2BodyDef_deletePvP8_AS3_Val_state3"))
		i0 = mstate.eax
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z16b2BodyDef_deletePvP8_AS3_Val_errState"))
		throw("Invalid state in __Z16b2BodyDef_deletePvP8_AS3_Val")
	}
}



// Async
public const __Z20b2CircleShape_deletePvP8_AS3_Val:int = regFunc(FSM__Z20b2CircleShape_deletePvP8_AS3_Val.start)

public final class FSM__Z20b2CircleShape_deletePvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z20b2CircleShape_deletePvP8_AS3_Val = new FSM__Z20b2CircleShape_deletePvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int

	public static const intRegCount:int = 3

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z20b2CircleShape_deletePvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z20b2CircleShape_deletePvP8_AS3_Val_errState",
			"__Z20b2CircleShape_deletePvP8_AS3_Val_state0",
			"__Z20b2CircleShape_deletePvP8_AS3_Val_state1",
			"__Z20b2CircleShape_deletePvP8_AS3_Val_state2",
			"__Z20b2CircleShape_deletePvP8_AS3_Val_state3"))
	__asm(lbl("__Z20b2CircleShape_deletePvP8_AS3_Val_state0"))
	__asm(lbl("__Z20b2CircleShape_deletePvP8_AS3_Val__XprivateX__BB328_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 4
		i0 =  (__2E_str26233)
		mstate.esp -= 12
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((mstate.ebp+-4))
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_ArrayValue])()
		return
	__asm(lbl("__Z20b2CircleShape_deletePvP8_AS3_Val_state1"))
		mstate.esp += 12
		i0 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__Z20b2CircleShape_deletePvP8_AS3_Val__XprivateX__BB328_2_F"))
	__asm(lbl("__Z20b2CircleShape_deletePvP8_AS3_Val__XprivateX__BB328_1_F"))
		i1 =  ((__xasm<int>(push(i0), op(0x37))))
		i1 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 2
		mstate.esp -= 4;(mstate.funcs[i1])()
		return
	__asm(lbl("__Z20b2CircleShape_deletePvP8_AS3_Val_state2"))
		mstate.esp += 4
	__asm(lbl("__Z20b2CircleShape_deletePvP8_AS3_Val__XprivateX__BB328_2_F"))
		state = 3
		mstate.esp -= 4;(mstate.funcs[_AS3_Null])()
		return
	__asm(lbl("__Z20b2CircleShape_deletePvP8_AS3_Val_state3"))
		i0 = mstate.eax
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z20b2CircleShape_deletePvP8_AS3_Val_errState"))
		throw("Invalid state in __Z20b2CircleShape_deletePvP8_AS3_Val")
	}
}



// Async
public const __Z21b2PolygonShape_deletePvP8_AS3_Val:int = regFunc(FSM__Z21b2PolygonShape_deletePvP8_AS3_Val.start)

public final class FSM__Z21b2PolygonShape_deletePvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z21b2PolygonShape_deletePvP8_AS3_Val = new FSM__Z21b2PolygonShape_deletePvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int

	public static const intRegCount:int = 3

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z21b2PolygonShape_deletePvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z21b2PolygonShape_deletePvP8_AS3_Val_errState",
			"__Z21b2PolygonShape_deletePvP8_AS3_Val_state0",
			"__Z21b2PolygonShape_deletePvP8_AS3_Val_state1",
			"__Z21b2PolygonShape_deletePvP8_AS3_Val_state2",
			"__Z21b2PolygonShape_deletePvP8_AS3_Val_state3"))
	__asm(lbl("__Z21b2PolygonShape_deletePvP8_AS3_Val_state0"))
	__asm(lbl("__Z21b2PolygonShape_deletePvP8_AS3_Val__XprivateX__BB329_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 4
		i0 =  (__2E_str26233)
		mstate.esp -= 12
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((mstate.ebp+-4))
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_ArrayValue])()
		return
	__asm(lbl("__Z21b2PolygonShape_deletePvP8_AS3_Val_state1"))
		mstate.esp += 12
		i0 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__Z21b2PolygonShape_deletePvP8_AS3_Val__XprivateX__BB329_2_F"))
	__asm(lbl("__Z21b2PolygonShape_deletePvP8_AS3_Val__XprivateX__BB329_1_F"))
		i1 =  ((__xasm<int>(push(i0), op(0x37))))
		i1 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 2
		mstate.esp -= 4;(mstate.funcs[i1])()
		return
	__asm(lbl("__Z21b2PolygonShape_deletePvP8_AS3_Val_state2"))
		mstate.esp += 4
	__asm(lbl("__Z21b2PolygonShape_deletePvP8_AS3_Val__XprivateX__BB329_2_F"))
		state = 3
		mstate.esp -= 4;(mstate.funcs[_AS3_Null])()
		return
	__asm(lbl("__Z21b2PolygonShape_deletePvP8_AS3_Val_state3"))
		i0 = mstate.eax
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z21b2PolygonShape_deletePvP8_AS3_Val_errState"))
		throw("Invalid state in __Z21b2PolygonShape_deletePvP8_AS3_Val")
	}
}



// Async
public const __Z16b2FixtureDef_newPvP8_AS3_Val:int = regFunc(FSM__Z16b2FixtureDef_newPvP8_AS3_Val.start)

public final class FSM__Z16b2FixtureDef_newPvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z16b2FixtureDef_newPvP8_AS3_Val = new FSM__Z16b2FixtureDef_newPvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int

	public static const intRegCount:int = 3

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z16b2FixtureDef_newPvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z16b2FixtureDef_newPvP8_AS3_Val_errState",
			"__Z16b2FixtureDef_newPvP8_AS3_Val_state0",
			"__Z16b2FixtureDef_newPvP8_AS3_Val_state1",
			"__Z16b2FixtureDef_newPvP8_AS3_Val_state2",
			"__Z16b2FixtureDef_newPvP8_AS3_Val_state3"))
	__asm(lbl("__Z16b2FixtureDef_newPvP8_AS3_Val_state0"))
	__asm(lbl("__Z16b2FixtureDef_newPvP8_AS3_Val__XprivateX__BB330_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (32)
		i1 =  ((__xasm<int>(push(_as3_ptr), op(0x37))))
		mstate.esp -= 4
		__asm(push(i1), push(mstate.esp), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_Release])()
		return
	__asm(lbl("__Z16b2FixtureDef_newPvP8_AS3_Val_state1"))
		mstate.esp += 4
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		i0 =  (__ZTV12b2FixtureDef)
		state = 2
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z16b2FixtureDef_newPvP8_AS3_Val_state2"))
		i1 = mstate.eax
		mstate.esp += 4
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		i0 =  (0)
		__asm(push(i0), push((i1+4)), op(0x3c))
		__asm(push(i0), push((i1+8)), op(0x3c))
		i2 =  (1045220557)
		__asm(push(i2), push((i1+12)), op(0x3c))
		__asm(push(i0), push((i1+16)), op(0x3c))
		__asm(push(i0), push((i1+20)), op(0x3c))
		i2 =  (1)
		__asm(push(i2), push((i1+26)), op(0x3b))
		i2 =  (-1)
		__asm(push(i2), push((i1+28)), op(0x3b))
		__asm(push(i0), push((i1+30)), op(0x3b))
		__asm(push(i0), push((i1+24)), op(0x3a))
		mstate.esp -= 4
		__asm(push(i1), push(mstate.esp), op(0x3c))
		state = 3
		mstate.esp -= 4;(mstate.funcs[_AS3_Ptr])()
		return
	__asm(lbl("__Z16b2FixtureDef_newPvP8_AS3_Val_state3"))
		i0 = mstate.eax
		mstate.esp += 4
		__asm(push(i0), push(_as3_ptr), op(0x3c))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z16b2FixtureDef_newPvP8_AS3_Val_errState"))
		throw("Invalid state in __Z16b2FixtureDef_newPvP8_AS3_Val")
	}
}



// Async
public const __Z19b2FixtureDef_deletePvP8_AS3_Val:int = regFunc(FSM__Z19b2FixtureDef_deletePvP8_AS3_Val.start)

public final class FSM__Z19b2FixtureDef_deletePvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z19b2FixtureDef_deletePvP8_AS3_Val = new FSM__Z19b2FixtureDef_deletePvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int

	public static const intRegCount:int = 3

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z19b2FixtureDef_deletePvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z19b2FixtureDef_deletePvP8_AS3_Val_errState",
			"__Z19b2FixtureDef_deletePvP8_AS3_Val_state0",
			"__Z19b2FixtureDef_deletePvP8_AS3_Val_state1",
			"__Z19b2FixtureDef_deletePvP8_AS3_Val_state2",
			"__Z19b2FixtureDef_deletePvP8_AS3_Val_state3"))
	__asm(lbl("__Z19b2FixtureDef_deletePvP8_AS3_Val_state0"))
	__asm(lbl("__Z19b2FixtureDef_deletePvP8_AS3_Val__XprivateX__BB331_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 4
		i0 =  (__2E_str26233)
		mstate.esp -= 12
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((mstate.ebp+-4))
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_ArrayValue])()
		return
	__asm(lbl("__Z19b2FixtureDef_deletePvP8_AS3_Val_state1"))
		mstate.esp += 12
		i0 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__Z19b2FixtureDef_deletePvP8_AS3_Val__XprivateX__BB331_2_F"))
	__asm(lbl("__Z19b2FixtureDef_deletePvP8_AS3_Val__XprivateX__BB331_1_F"))
		i1 =  ((__xasm<int>(push(i0), op(0x37))))
		i1 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 2
		mstate.esp -= 4;(mstate.funcs[i1])()
		return
	__asm(lbl("__Z19b2FixtureDef_deletePvP8_AS3_Val_state2"))
		mstate.esp += 4
	__asm(lbl("__Z19b2FixtureDef_deletePvP8_AS3_Val__XprivateX__BB331_2_F"))
		state = 3
		mstate.esp -= 4;(mstate.funcs[_AS3_Null])()
		return
	__asm(lbl("__Z19b2FixtureDef_deletePvP8_AS3_Val_state3"))
		i0 = mstate.eax
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z19b2FixtureDef_deletePvP8_AS3_Val_errState"))
		throw("Invalid state in __Z19b2FixtureDef_deletePvP8_AS3_Val")
	}
}



// Async
public const __Z25b2DistanceJointDef_deletePvP8_AS3_Val:int = regFunc(FSM__Z25b2DistanceJointDef_deletePvP8_AS3_Val.start)

public final class FSM__Z25b2DistanceJointDef_deletePvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z25b2DistanceJointDef_deletePvP8_AS3_Val = new FSM__Z25b2DistanceJointDef_deletePvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int

	public static const intRegCount:int = 3

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z25b2DistanceJointDef_deletePvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z25b2DistanceJointDef_deletePvP8_AS3_Val_errState",
			"__Z25b2DistanceJointDef_deletePvP8_AS3_Val_state0",
			"__Z25b2DistanceJointDef_deletePvP8_AS3_Val_state1",
			"__Z25b2DistanceJointDef_deletePvP8_AS3_Val_state2",
			"__Z25b2DistanceJointDef_deletePvP8_AS3_Val_state3"))
	__asm(lbl("__Z25b2DistanceJointDef_deletePvP8_AS3_Val_state0"))
	__asm(lbl("__Z25b2DistanceJointDef_deletePvP8_AS3_Val__XprivateX__BB332_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 4
		i0 =  (__2E_str26233)
		mstate.esp -= 12
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((mstate.ebp+-4))
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_ArrayValue])()
		return
	__asm(lbl("__Z25b2DistanceJointDef_deletePvP8_AS3_Val_state1"))
		mstate.esp += 12
		i0 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__Z25b2DistanceJointDef_deletePvP8_AS3_Val__XprivateX__BB332_2_F"))
	__asm(lbl("__Z25b2DistanceJointDef_deletePvP8_AS3_Val__XprivateX__BB332_1_F"))
		i1 =  (0)
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z25b2DistanceJointDef_deletePvP8_AS3_Val_state2"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z25b2DistanceJointDef_deletePvP8_AS3_Val__XprivateX__BB332_2_F"))
		state = 3
		mstate.esp -= 4;(mstate.funcs[_AS3_Null])()
		return
	__asm(lbl("__Z25b2DistanceJointDef_deletePvP8_AS3_Val_state3"))
		i0 = mstate.eax
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z25b2DistanceJointDef_deletePvP8_AS3_Val_errState"))
		throw("Invalid state in __Z25b2DistanceJointDef_deletePvP8_AS3_Val")
	}
}



// Async
public const __Z21b2GearJointDef_deletePvP8_AS3_Val:int = regFunc(FSM__Z21b2GearJointDef_deletePvP8_AS3_Val.start)

public final class FSM__Z21b2GearJointDef_deletePvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z21b2GearJointDef_deletePvP8_AS3_Val = new FSM__Z21b2GearJointDef_deletePvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int

	public static const intRegCount:int = 3

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z21b2GearJointDef_deletePvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z21b2GearJointDef_deletePvP8_AS3_Val_errState",
			"__Z21b2GearJointDef_deletePvP8_AS3_Val_state0",
			"__Z21b2GearJointDef_deletePvP8_AS3_Val_state1",
			"__Z21b2GearJointDef_deletePvP8_AS3_Val_state2",
			"__Z21b2GearJointDef_deletePvP8_AS3_Val_state3"))
	__asm(lbl("__Z21b2GearJointDef_deletePvP8_AS3_Val_state0"))
	__asm(lbl("__Z21b2GearJointDef_deletePvP8_AS3_Val__XprivateX__BB333_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 4
		i0 =  (__2E_str26233)
		mstate.esp -= 12
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((mstate.ebp+-4))
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_ArrayValue])()
		return
	__asm(lbl("__Z21b2GearJointDef_deletePvP8_AS3_Val_state1"))
		mstate.esp += 12
		i0 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__Z21b2GearJointDef_deletePvP8_AS3_Val__XprivateX__BB333_2_F"))
	__asm(lbl("__Z21b2GearJointDef_deletePvP8_AS3_Val__XprivateX__BB333_1_F"))
		i1 =  (0)
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z21b2GearJointDef_deletePvP8_AS3_Val_state2"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z21b2GearJointDef_deletePvP8_AS3_Val__XprivateX__BB333_2_F"))
		state = 3
		mstate.esp -= 4;(mstate.funcs[_AS3_Null])()
		return
	__asm(lbl("__Z21b2GearJointDef_deletePvP8_AS3_Val_state3"))
		i0 = mstate.eax
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z21b2GearJointDef_deletePvP8_AS3_Val_errState"))
		throw("Invalid state in __Z21b2GearJointDef_deletePvP8_AS3_Val")
	}
}



// Async
public const __Z21b2LineJointDef_deletePvP8_AS3_Val:int = regFunc(FSM__Z21b2LineJointDef_deletePvP8_AS3_Val.start)

public final class FSM__Z21b2LineJointDef_deletePvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z21b2LineJointDef_deletePvP8_AS3_Val = new FSM__Z21b2LineJointDef_deletePvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int

	public static const intRegCount:int = 3

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z21b2LineJointDef_deletePvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z21b2LineJointDef_deletePvP8_AS3_Val_errState",
			"__Z21b2LineJointDef_deletePvP8_AS3_Val_state0",
			"__Z21b2LineJointDef_deletePvP8_AS3_Val_state1",
			"__Z21b2LineJointDef_deletePvP8_AS3_Val_state2",
			"__Z21b2LineJointDef_deletePvP8_AS3_Val_state3"))
	__asm(lbl("__Z21b2LineJointDef_deletePvP8_AS3_Val_state0"))
	__asm(lbl("__Z21b2LineJointDef_deletePvP8_AS3_Val__XprivateX__BB334_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 4
		i0 =  (__2E_str26233)
		mstate.esp -= 12
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((mstate.ebp+-4))
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_ArrayValue])()
		return
	__asm(lbl("__Z21b2LineJointDef_deletePvP8_AS3_Val_state1"))
		mstate.esp += 12
		i0 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__Z21b2LineJointDef_deletePvP8_AS3_Val__XprivateX__BB334_2_F"))
	__asm(lbl("__Z21b2LineJointDef_deletePvP8_AS3_Val__XprivateX__BB334_1_F"))
		i1 =  (0)
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z21b2LineJointDef_deletePvP8_AS3_Val_state2"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z21b2LineJointDef_deletePvP8_AS3_Val__XprivateX__BB334_2_F"))
		state = 3
		mstate.esp -= 4;(mstate.funcs[_AS3_Null])()
		return
	__asm(lbl("__Z21b2LineJointDef_deletePvP8_AS3_Val_state3"))
		i0 = mstate.eax
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z21b2LineJointDef_deletePvP8_AS3_Val_errState"))
		throw("Invalid state in __Z21b2LineJointDef_deletePvP8_AS3_Val")
	}
}



// Async
public const __Z22b2MouseJointDef_deletePvP8_AS3_Val:int = regFunc(FSM__Z22b2MouseJointDef_deletePvP8_AS3_Val.start)

public final class FSM__Z22b2MouseJointDef_deletePvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z22b2MouseJointDef_deletePvP8_AS3_Val = new FSM__Z22b2MouseJointDef_deletePvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int

	public static const intRegCount:int = 3

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z22b2MouseJointDef_deletePvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z22b2MouseJointDef_deletePvP8_AS3_Val_errState",
			"__Z22b2MouseJointDef_deletePvP8_AS3_Val_state0",
			"__Z22b2MouseJointDef_deletePvP8_AS3_Val_state1",
			"__Z22b2MouseJointDef_deletePvP8_AS3_Val_state2",
			"__Z22b2MouseJointDef_deletePvP8_AS3_Val_state3"))
	__asm(lbl("__Z22b2MouseJointDef_deletePvP8_AS3_Val_state0"))
	__asm(lbl("__Z22b2MouseJointDef_deletePvP8_AS3_Val__XprivateX__BB335_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 4
		i0 =  (__2E_str26233)
		mstate.esp -= 12
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((mstate.ebp+-4))
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_ArrayValue])()
		return
	__asm(lbl("__Z22b2MouseJointDef_deletePvP8_AS3_Val_state1"))
		mstate.esp += 12
		i0 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__Z22b2MouseJointDef_deletePvP8_AS3_Val__XprivateX__BB335_2_F"))
	__asm(lbl("__Z22b2MouseJointDef_deletePvP8_AS3_Val__XprivateX__BB335_1_F"))
		i1 =  (0)
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z22b2MouseJointDef_deletePvP8_AS3_Val_state2"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z22b2MouseJointDef_deletePvP8_AS3_Val__XprivateX__BB335_2_F"))
		state = 3
		mstate.esp -= 4;(mstate.funcs[_AS3_Null])()
		return
	__asm(lbl("__Z22b2MouseJointDef_deletePvP8_AS3_Val_state3"))
		i0 = mstate.eax
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z22b2MouseJointDef_deletePvP8_AS3_Val_errState"))
		throw("Invalid state in __Z22b2MouseJointDef_deletePvP8_AS3_Val")
	}
}



// Async
public const __Z26b2PrismaticJointDef_deletePvP8_AS3_Val:int = regFunc(FSM__Z26b2PrismaticJointDef_deletePvP8_AS3_Val.start)

public final class FSM__Z26b2PrismaticJointDef_deletePvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z26b2PrismaticJointDef_deletePvP8_AS3_Val = new FSM__Z26b2PrismaticJointDef_deletePvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int

	public static const intRegCount:int = 3

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z26b2PrismaticJointDef_deletePvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z26b2PrismaticJointDef_deletePvP8_AS3_Val_errState",
			"__Z26b2PrismaticJointDef_deletePvP8_AS3_Val_state0",
			"__Z26b2PrismaticJointDef_deletePvP8_AS3_Val_state1",
			"__Z26b2PrismaticJointDef_deletePvP8_AS3_Val_state2",
			"__Z26b2PrismaticJointDef_deletePvP8_AS3_Val_state3"))
	__asm(lbl("__Z26b2PrismaticJointDef_deletePvP8_AS3_Val_state0"))
	__asm(lbl("__Z26b2PrismaticJointDef_deletePvP8_AS3_Val__XprivateX__BB336_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 4
		i0 =  (__2E_str26233)
		mstate.esp -= 12
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((mstate.ebp+-4))
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_ArrayValue])()
		return
	__asm(lbl("__Z26b2PrismaticJointDef_deletePvP8_AS3_Val_state1"))
		mstate.esp += 12
		i0 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__Z26b2PrismaticJointDef_deletePvP8_AS3_Val__XprivateX__BB336_2_F"))
	__asm(lbl("__Z26b2PrismaticJointDef_deletePvP8_AS3_Val__XprivateX__BB336_1_F"))
		i1 =  (0)
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z26b2PrismaticJointDef_deletePvP8_AS3_Val_state2"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z26b2PrismaticJointDef_deletePvP8_AS3_Val__XprivateX__BB336_2_F"))
		state = 3
		mstate.esp -= 4;(mstate.funcs[_AS3_Null])()
		return
	__asm(lbl("__Z26b2PrismaticJointDef_deletePvP8_AS3_Val_state3"))
		i0 = mstate.eax
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z26b2PrismaticJointDef_deletePvP8_AS3_Val_errState"))
		throw("Invalid state in __Z26b2PrismaticJointDef_deletePvP8_AS3_Val")
	}
}



// Async
public const __Z23b2PulleyJointDef_deletePvP8_AS3_Val:int = regFunc(FSM__Z23b2PulleyJointDef_deletePvP8_AS3_Val.start)

public final class FSM__Z23b2PulleyJointDef_deletePvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z23b2PulleyJointDef_deletePvP8_AS3_Val = new FSM__Z23b2PulleyJointDef_deletePvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int

	public static const intRegCount:int = 3

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z23b2PulleyJointDef_deletePvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z23b2PulleyJointDef_deletePvP8_AS3_Val_errState",
			"__Z23b2PulleyJointDef_deletePvP8_AS3_Val_state0",
			"__Z23b2PulleyJointDef_deletePvP8_AS3_Val_state1",
			"__Z23b2PulleyJointDef_deletePvP8_AS3_Val_state2",
			"__Z23b2PulleyJointDef_deletePvP8_AS3_Val_state3"))
	__asm(lbl("__Z23b2PulleyJointDef_deletePvP8_AS3_Val_state0"))
	__asm(lbl("__Z23b2PulleyJointDef_deletePvP8_AS3_Val__XprivateX__BB337_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 4
		i0 =  (__2E_str26233)
		mstate.esp -= 12
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((mstate.ebp+-4))
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_ArrayValue])()
		return
	__asm(lbl("__Z23b2PulleyJointDef_deletePvP8_AS3_Val_state1"))
		mstate.esp += 12
		i0 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__Z23b2PulleyJointDef_deletePvP8_AS3_Val__XprivateX__BB337_2_F"))
	__asm(lbl("__Z23b2PulleyJointDef_deletePvP8_AS3_Val__XprivateX__BB337_1_F"))
		i1 =  (0)
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z23b2PulleyJointDef_deletePvP8_AS3_Val_state2"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z23b2PulleyJointDef_deletePvP8_AS3_Val__XprivateX__BB337_2_F"))
		state = 3
		mstate.esp -= 4;(mstate.funcs[_AS3_Null])()
		return
	__asm(lbl("__Z23b2PulleyJointDef_deletePvP8_AS3_Val_state3"))
		i0 = mstate.eax
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z23b2PulleyJointDef_deletePvP8_AS3_Val_errState"))
		throw("Invalid state in __Z23b2PulleyJointDef_deletePvP8_AS3_Val")
	}
}



// Async
public const __Z25b2RevoluteJointDef_deletePvP8_AS3_Val:int = regFunc(FSM__Z25b2RevoluteJointDef_deletePvP8_AS3_Val.start)

public final class FSM__Z25b2RevoluteJointDef_deletePvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z25b2RevoluteJointDef_deletePvP8_AS3_Val = new FSM__Z25b2RevoluteJointDef_deletePvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int

	public static const intRegCount:int = 3

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z25b2RevoluteJointDef_deletePvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z25b2RevoluteJointDef_deletePvP8_AS3_Val_errState",
			"__Z25b2RevoluteJointDef_deletePvP8_AS3_Val_state0",
			"__Z25b2RevoluteJointDef_deletePvP8_AS3_Val_state1",
			"__Z25b2RevoluteJointDef_deletePvP8_AS3_Val_state2",
			"__Z25b2RevoluteJointDef_deletePvP8_AS3_Val_state3"))
	__asm(lbl("__Z25b2RevoluteJointDef_deletePvP8_AS3_Val_state0"))
	__asm(lbl("__Z25b2RevoluteJointDef_deletePvP8_AS3_Val__XprivateX__BB338_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 4
		i0 =  (__2E_str26233)
		mstate.esp -= 12
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((mstate.ebp+-4))
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_ArrayValue])()
		return
	__asm(lbl("__Z25b2RevoluteJointDef_deletePvP8_AS3_Val_state1"))
		mstate.esp += 12
		i0 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__Z25b2RevoluteJointDef_deletePvP8_AS3_Val__XprivateX__BB338_2_F"))
	__asm(lbl("__Z25b2RevoluteJointDef_deletePvP8_AS3_Val__XprivateX__BB338_1_F"))
		i1 =  (0)
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z25b2RevoluteJointDef_deletePvP8_AS3_Val_state2"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z25b2RevoluteJointDef_deletePvP8_AS3_Val__XprivateX__BB338_2_F"))
		state = 3
		mstate.esp -= 4;(mstate.funcs[_AS3_Null])()
		return
	__asm(lbl("__Z25b2RevoluteJointDef_deletePvP8_AS3_Val_state3"))
		i0 = mstate.eax
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z25b2RevoluteJointDef_deletePvP8_AS3_Val_errState"))
		throw("Invalid state in __Z25b2RevoluteJointDef_deletePvP8_AS3_Val")
	}
}



// Async
public const __Z25b2FrictionJointDef_deletePvP8_AS3_Val:int = regFunc(FSM__Z25b2FrictionJointDef_deletePvP8_AS3_Val.start)

public final class FSM__Z25b2FrictionJointDef_deletePvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z25b2FrictionJointDef_deletePvP8_AS3_Val = new FSM__Z25b2FrictionJointDef_deletePvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int

	public static const intRegCount:int = 3

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z25b2FrictionJointDef_deletePvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z25b2FrictionJointDef_deletePvP8_AS3_Val_errState",
			"__Z25b2FrictionJointDef_deletePvP8_AS3_Val_state0",
			"__Z25b2FrictionJointDef_deletePvP8_AS3_Val_state1",
			"__Z25b2FrictionJointDef_deletePvP8_AS3_Val_state2",
			"__Z25b2FrictionJointDef_deletePvP8_AS3_Val_state3"))
	__asm(lbl("__Z25b2FrictionJointDef_deletePvP8_AS3_Val_state0"))
	__asm(lbl("__Z25b2FrictionJointDef_deletePvP8_AS3_Val__XprivateX__BB339_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 4
		i0 =  (__2E_str26233)
		mstate.esp -= 12
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((mstate.ebp+-4))
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_ArrayValue])()
		return
	__asm(lbl("__Z25b2FrictionJointDef_deletePvP8_AS3_Val_state1"))
		mstate.esp += 12
		i0 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__Z25b2FrictionJointDef_deletePvP8_AS3_Val__XprivateX__BB339_2_F"))
	__asm(lbl("__Z25b2FrictionJointDef_deletePvP8_AS3_Val__XprivateX__BB339_1_F"))
		i1 =  (0)
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z25b2FrictionJointDef_deletePvP8_AS3_Val_state2"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z25b2FrictionJointDef_deletePvP8_AS3_Val__XprivateX__BB339_2_F"))
		state = 3
		mstate.esp -= 4;(mstate.funcs[_AS3_Null])()
		return
	__asm(lbl("__Z25b2FrictionJointDef_deletePvP8_AS3_Val_state3"))
		i0 = mstate.eax
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z25b2FrictionJointDef_deletePvP8_AS3_Val_errState"))
		throw("Invalid state in __Z25b2FrictionJointDef_deletePvP8_AS3_Val")
	}
}



// Async
public const __Z21b2WeldJointDef_deletePvP8_AS3_Val:int = regFunc(FSM__Z21b2WeldJointDef_deletePvP8_AS3_Val.start)

public final class FSM__Z21b2WeldJointDef_deletePvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z21b2WeldJointDef_deletePvP8_AS3_Val = new FSM__Z21b2WeldJointDef_deletePvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int

	public static const intRegCount:int = 3

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z21b2WeldJointDef_deletePvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z21b2WeldJointDef_deletePvP8_AS3_Val_errState",
			"__Z21b2WeldJointDef_deletePvP8_AS3_Val_state0",
			"__Z21b2WeldJointDef_deletePvP8_AS3_Val_state1",
			"__Z21b2WeldJointDef_deletePvP8_AS3_Val_state2",
			"__Z21b2WeldJointDef_deletePvP8_AS3_Val_state3"))
	__asm(lbl("__Z21b2WeldJointDef_deletePvP8_AS3_Val_state0"))
	__asm(lbl("__Z21b2WeldJointDef_deletePvP8_AS3_Val__XprivateX__BB340_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 4
		i0 =  (__2E_str26233)
		mstate.esp -= 12
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((mstate.ebp+-4))
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_ArrayValue])()
		return
	__asm(lbl("__Z21b2WeldJointDef_deletePvP8_AS3_Val_state1"))
		mstate.esp += 12
		i0 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__Z21b2WeldJointDef_deletePvP8_AS3_Val__XprivateX__BB340_2_F"))
	__asm(lbl("__Z21b2WeldJointDef_deletePvP8_AS3_Val__XprivateX__BB340_1_F"))
		i1 =  (0)
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z21b2WeldJointDef_deletePvP8_AS3_Val_state2"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z21b2WeldJointDef_deletePvP8_AS3_Val__XprivateX__BB340_2_F"))
		state = 3
		mstate.esp -= 4;(mstate.funcs[_AS3_Null])()
		return
	__asm(lbl("__Z21b2WeldJointDef_deletePvP8_AS3_Val_state3"))
		i0 = mstate.eax
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z21b2WeldJointDef_deletePvP8_AS3_Val_errState"))
		throw("Invalid state in __Z21b2WeldJointDef_deletePvP8_AS3_Val")
	}
}



// Async
public const __Z21b2RopeJointDef_deletePvP8_AS3_Val:int = regFunc(FSM__Z21b2RopeJointDef_deletePvP8_AS3_Val.start)

public final class FSM__Z21b2RopeJointDef_deletePvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z21b2RopeJointDef_deletePvP8_AS3_Val = new FSM__Z21b2RopeJointDef_deletePvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int

	public static const intRegCount:int = 3

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z21b2RopeJointDef_deletePvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z21b2RopeJointDef_deletePvP8_AS3_Val_errState",
			"__Z21b2RopeJointDef_deletePvP8_AS3_Val_state0",
			"__Z21b2RopeJointDef_deletePvP8_AS3_Val_state1",
			"__Z21b2RopeJointDef_deletePvP8_AS3_Val_state2",
			"__Z21b2RopeJointDef_deletePvP8_AS3_Val_state3"))
	__asm(lbl("__Z21b2RopeJointDef_deletePvP8_AS3_Val_state0"))
	__asm(lbl("__Z21b2RopeJointDef_deletePvP8_AS3_Val__XprivateX__BB341_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 4
		i0 =  (__2E_str26233)
		mstate.esp -= 12
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((mstate.ebp+-4))
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_ArrayValue])()
		return
	__asm(lbl("__Z21b2RopeJointDef_deletePvP8_AS3_Val_state1"))
		mstate.esp += 12
		i0 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__Z21b2RopeJointDef_deletePvP8_AS3_Val__XprivateX__BB341_2_F"))
	__asm(lbl("__Z21b2RopeJointDef_deletePvP8_AS3_Val__XprivateX__BB341_1_F"))
		i1 =  (0)
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z21b2RopeJointDef_deletePvP8_AS3_Val_state2"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z21b2RopeJointDef_deletePvP8_AS3_Val__XprivateX__BB341_2_F"))
		state = 3
		mstate.esp -= 4;(mstate.funcs[_AS3_Null])()
		return
	__asm(lbl("__Z21b2RopeJointDef_deletePvP8_AS3_Val_state3"))
		i0 = mstate.eax
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z21b2RopeJointDef_deletePvP8_AS3_Val_errState"))
		throw("Invalid state in __Z21b2RopeJointDef_deletePvP8_AS3_Val")
	}
}



// Async
public const __Z17b2MassData_deletePvP8_AS3_Val:int = regFunc(FSM__Z17b2MassData_deletePvP8_AS3_Val.start)

public final class FSM__Z17b2MassData_deletePvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z17b2MassData_deletePvP8_AS3_Val = new FSM__Z17b2MassData_deletePvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int

	public static const intRegCount:int = 3

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z17b2MassData_deletePvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z17b2MassData_deletePvP8_AS3_Val_errState",
			"__Z17b2MassData_deletePvP8_AS3_Val_state0",
			"__Z17b2MassData_deletePvP8_AS3_Val_state1",
			"__Z17b2MassData_deletePvP8_AS3_Val_state2",
			"__Z17b2MassData_deletePvP8_AS3_Val_state3"))
	__asm(lbl("__Z17b2MassData_deletePvP8_AS3_Val_state0"))
	__asm(lbl("__Z17b2MassData_deletePvP8_AS3_Val__XprivateX__BB342_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 4
		i0 =  (__2E_str26233)
		mstate.esp -= 12
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((mstate.ebp+-4))
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_ArrayValue])()
		return
	__asm(lbl("__Z17b2MassData_deletePvP8_AS3_Val_state1"))
		mstate.esp += 12
		i0 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__Z17b2MassData_deletePvP8_AS3_Val__XprivateX__BB342_2_F"))
	__asm(lbl("__Z17b2MassData_deletePvP8_AS3_Val__XprivateX__BB342_1_F"))
		i1 =  (0)
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z17b2MassData_deletePvP8_AS3_Val_state2"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z17b2MassData_deletePvP8_AS3_Val__XprivateX__BB342_2_F"))
		state = 3
		mstate.esp -= 4;(mstate.funcs[_AS3_Null])()
		return
	__asm(lbl("__Z17b2MassData_deletePvP8_AS3_Val_state3"))
		i0 = mstate.eax
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z17b2MassData_deletePvP8_AS3_Val_errState"))
		throw("Invalid state in __Z17b2MassData_deletePvP8_AS3_Val")
	}
}



// Async
public const __Z22b2DistanceInput_deletePvP8_AS3_Val:int = regFunc(FSM__Z22b2DistanceInput_deletePvP8_AS3_Val.start)

public final class FSM__Z22b2DistanceInput_deletePvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z22b2DistanceInput_deletePvP8_AS3_Val = new FSM__Z22b2DistanceInput_deletePvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int

	public static const intRegCount:int = 3

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z22b2DistanceInput_deletePvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z22b2DistanceInput_deletePvP8_AS3_Val_errState",
			"__Z22b2DistanceInput_deletePvP8_AS3_Val_state0",
			"__Z22b2DistanceInput_deletePvP8_AS3_Val_state1",
			"__Z22b2DistanceInput_deletePvP8_AS3_Val_state2",
			"__Z22b2DistanceInput_deletePvP8_AS3_Val_state3"))
	__asm(lbl("__Z22b2DistanceInput_deletePvP8_AS3_Val_state0"))
	__asm(lbl("__Z22b2DistanceInput_deletePvP8_AS3_Val__XprivateX__BB343_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 4
		i0 =  (__2E_str26233)
		mstate.esp -= 12
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((mstate.ebp+-4))
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_ArrayValue])()
		return
	__asm(lbl("__Z22b2DistanceInput_deletePvP8_AS3_Val_state1"))
		mstate.esp += 12
		i0 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__Z22b2DistanceInput_deletePvP8_AS3_Val__XprivateX__BB343_2_F"))
	__asm(lbl("__Z22b2DistanceInput_deletePvP8_AS3_Val__XprivateX__BB343_1_F"))
		i1 =  (0)
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z22b2DistanceInput_deletePvP8_AS3_Val_state2"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z22b2DistanceInput_deletePvP8_AS3_Val__XprivateX__BB343_2_F"))
		state = 3
		mstate.esp -= 4;(mstate.funcs[_AS3_Null])()
		return
	__asm(lbl("__Z22b2DistanceInput_deletePvP8_AS3_Val_state3"))
		i0 = mstate.eax
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z22b2DistanceInput_deletePvP8_AS3_Val_errState"))
		throw("Invalid state in __Z22b2DistanceInput_deletePvP8_AS3_Val")
	}
}



// Async
public const __Z23b2DistanceOutput_deletePvP8_AS3_Val:int = regFunc(FSM__Z23b2DistanceOutput_deletePvP8_AS3_Val.start)

public final class FSM__Z23b2DistanceOutput_deletePvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z23b2DistanceOutput_deletePvP8_AS3_Val = new FSM__Z23b2DistanceOutput_deletePvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int

	public static const intRegCount:int = 3

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z23b2DistanceOutput_deletePvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z23b2DistanceOutput_deletePvP8_AS3_Val_errState",
			"__Z23b2DistanceOutput_deletePvP8_AS3_Val_state0",
			"__Z23b2DistanceOutput_deletePvP8_AS3_Val_state1",
			"__Z23b2DistanceOutput_deletePvP8_AS3_Val_state2",
			"__Z23b2DistanceOutput_deletePvP8_AS3_Val_state3"))
	__asm(lbl("__Z23b2DistanceOutput_deletePvP8_AS3_Val_state0"))
	__asm(lbl("__Z23b2DistanceOutput_deletePvP8_AS3_Val__XprivateX__BB344_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 4
		i0 =  (__2E_str26233)
		mstate.esp -= 12
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((mstate.ebp+-4))
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_ArrayValue])()
		return
	__asm(lbl("__Z23b2DistanceOutput_deletePvP8_AS3_Val_state1"))
		mstate.esp += 12
		i0 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__Z23b2DistanceOutput_deletePvP8_AS3_Val__XprivateX__BB344_2_F"))
	__asm(lbl("__Z23b2DistanceOutput_deletePvP8_AS3_Val__XprivateX__BB344_1_F"))
		i1 =  (0)
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z23b2DistanceOutput_deletePvP8_AS3_Val_state2"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z23b2DistanceOutput_deletePvP8_AS3_Val__XprivateX__BB344_2_F"))
		state = 3
		mstate.esp -= 4;(mstate.funcs[_AS3_Null])()
		return
	__asm(lbl("__Z23b2DistanceOutput_deletePvP8_AS3_Val_state3"))
		i0 = mstate.eax
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z23b2DistanceOutput_deletePvP8_AS3_Val_errState"))
		throw("Invalid state in __Z23b2DistanceOutput_deletePvP8_AS3_Val")
	}
}



// Async
public const __Z18b2SimplexCache_newPvP8_AS3_Val:int = regFunc(FSM__Z18b2SimplexCache_newPvP8_AS3_Val.start)

public final class FSM__Z18b2SimplexCache_newPvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z18b2SimplexCache_newPvP8_AS3_Val = new FSM__Z18b2SimplexCache_newPvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z18b2SimplexCache_newPvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z18b2SimplexCache_newPvP8_AS3_Val_errState",
			"__Z18b2SimplexCache_newPvP8_AS3_Val_state0",
			"__Z18b2SimplexCache_newPvP8_AS3_Val_state1",
			"__Z18b2SimplexCache_newPvP8_AS3_Val_state2",
			"__Z18b2SimplexCache_newPvP8_AS3_Val_state3"))
	__asm(lbl("__Z18b2SimplexCache_newPvP8_AS3_Val_state0"))
	__asm(lbl("__Z18b2SimplexCache_newPvP8_AS3_Val__XprivateX__BB345_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (12)
		i1 =  ((__xasm<int>(push(_as3_ptr), op(0x37))))
		mstate.esp -= 4
		__asm(push(i1), push(mstate.esp), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_Release])()
		return
	__asm(lbl("__Z18b2SimplexCache_newPvP8_AS3_Val_state1"))
		mstate.esp += 4
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z18b2SimplexCache_newPvP8_AS3_Val_state2"))
		i0 = mstate.eax
		mstate.esp += 4
		i1 =  (0)
		__asm(push(i1), push(i0), op(0x3c))
		__asm(push(i1), push((i0+4)), op(0x3b))
		__asm(push(i1), push((i0+6)), op(0x3a))
		__asm(push(i1), push((i0+7)), op(0x3a))
		__asm(push(i1), push((i0+8)), op(0x3a))
		__asm(push(i1), push((i0+9)), op(0x3a))
		__asm(push(i1), push((i0+10)), op(0x3a))
		__asm(push(i1), push((i0+11)), op(0x3a))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 3
		mstate.esp -= 4;(mstate.funcs[_AS3_Ptr])()
		return
	__asm(lbl("__Z18b2SimplexCache_newPvP8_AS3_Val_state3"))
		i0 = mstate.eax
		mstate.esp += 4
		__asm(push(i0), push(_as3_ptr), op(0x3c))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z18b2SimplexCache_newPvP8_AS3_Val_errState"))
		throw("Invalid state in __Z18b2SimplexCache_newPvP8_AS3_Val")
	}
}



// Async
public const __Z21b2SimplexCache_deletePvP8_AS3_Val:int = regFunc(FSM__Z21b2SimplexCache_deletePvP8_AS3_Val.start)

public final class FSM__Z21b2SimplexCache_deletePvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z21b2SimplexCache_deletePvP8_AS3_Val = new FSM__Z21b2SimplexCache_deletePvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int

	public static const intRegCount:int = 3

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z21b2SimplexCache_deletePvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z21b2SimplexCache_deletePvP8_AS3_Val_errState",
			"__Z21b2SimplexCache_deletePvP8_AS3_Val_state0",
			"__Z21b2SimplexCache_deletePvP8_AS3_Val_state1",
			"__Z21b2SimplexCache_deletePvP8_AS3_Val_state2",
			"__Z21b2SimplexCache_deletePvP8_AS3_Val_state3"))
	__asm(lbl("__Z21b2SimplexCache_deletePvP8_AS3_Val_state0"))
	__asm(lbl("__Z21b2SimplexCache_deletePvP8_AS3_Val__XprivateX__BB346_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 4
		i0 =  (__2E_str26233)
		mstate.esp -= 12
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((mstate.ebp+-4))
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_ArrayValue])()
		return
	__asm(lbl("__Z21b2SimplexCache_deletePvP8_AS3_Val_state1"))
		mstate.esp += 12
		i0 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__Z21b2SimplexCache_deletePvP8_AS3_Val__XprivateX__BB346_2_F"))
	__asm(lbl("__Z21b2SimplexCache_deletePvP8_AS3_Val__XprivateX__BB346_1_F"))
		i1 =  (0)
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z21b2SimplexCache_deletePvP8_AS3_Val_state2"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z21b2SimplexCache_deletePvP8_AS3_Val__XprivateX__BB346_2_F"))
		state = 3
		mstate.esp -= 4;(mstate.funcs[_AS3_Null])()
		return
	__asm(lbl("__Z21b2SimplexCache_deletePvP8_AS3_Val_state3"))
		i0 = mstate.eax
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z21b2SimplexCache_deletePvP8_AS3_Val_errState"))
		throw("Invalid state in __Z21b2SimplexCache_deletePvP8_AS3_Val")
	}
}



// Async
public const __Z18b2EdgeShape_deletePvP8_AS3_Val:int = regFunc(FSM__Z18b2EdgeShape_deletePvP8_AS3_Val.start)

public final class FSM__Z18b2EdgeShape_deletePvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z18b2EdgeShape_deletePvP8_AS3_Val = new FSM__Z18b2EdgeShape_deletePvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int

	public static const intRegCount:int = 3

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z18b2EdgeShape_deletePvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z18b2EdgeShape_deletePvP8_AS3_Val_errState",
			"__Z18b2EdgeShape_deletePvP8_AS3_Val_state0",
			"__Z18b2EdgeShape_deletePvP8_AS3_Val_state1",
			"__Z18b2EdgeShape_deletePvP8_AS3_Val_state2",
			"__Z18b2EdgeShape_deletePvP8_AS3_Val_state3"))
	__asm(lbl("__Z18b2EdgeShape_deletePvP8_AS3_Val_state0"))
	__asm(lbl("__Z18b2EdgeShape_deletePvP8_AS3_Val__XprivateX__BB347_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 4
		i0 =  (__2E_str26233)
		mstate.esp -= 12
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((mstate.ebp+-4))
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_ArrayValue])()
		return
	__asm(lbl("__Z18b2EdgeShape_deletePvP8_AS3_Val_state1"))
		mstate.esp += 12
		i0 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__Z18b2EdgeShape_deletePvP8_AS3_Val__XprivateX__BB347_2_F"))
	__asm(lbl("__Z18b2EdgeShape_deletePvP8_AS3_Val__XprivateX__BB347_1_F"))
		i1 =  ((__xasm<int>(push(i0), op(0x37))))
		i1 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 2
		mstate.esp -= 4;(mstate.funcs[i1])()
		return
	__asm(lbl("__Z18b2EdgeShape_deletePvP8_AS3_Val_state2"))
		mstate.esp += 4
	__asm(lbl("__Z18b2EdgeShape_deletePvP8_AS3_Val__XprivateX__BB347_2_F"))
		state = 3
		mstate.esp -= 4;(mstate.funcs[_AS3_Null])()
		return
	__asm(lbl("__Z18b2EdgeShape_deletePvP8_AS3_Val_state3"))
		i0 = mstate.eax
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z18b2EdgeShape_deletePvP8_AS3_Val_errState"))
		throw("Invalid state in __Z18b2EdgeShape_deletePvP8_AS3_Val")
	}
}



// Async
public const __Z18b2LoopShape_deletePvP8_AS3_Val:int = regFunc(FSM__Z18b2LoopShape_deletePvP8_AS3_Val.start)

public final class FSM__Z18b2LoopShape_deletePvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z18b2LoopShape_deletePvP8_AS3_Val = new FSM__Z18b2LoopShape_deletePvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int

	public static const intRegCount:int = 3

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z18b2LoopShape_deletePvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z18b2LoopShape_deletePvP8_AS3_Val_errState",
			"__Z18b2LoopShape_deletePvP8_AS3_Val_state0",
			"__Z18b2LoopShape_deletePvP8_AS3_Val_state1",
			"__Z18b2LoopShape_deletePvP8_AS3_Val_state2",
			"__Z18b2LoopShape_deletePvP8_AS3_Val_state3"))
	__asm(lbl("__Z18b2LoopShape_deletePvP8_AS3_Val_state0"))
	__asm(lbl("__Z18b2LoopShape_deletePvP8_AS3_Val__XprivateX__BB348_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 4
		i0 =  (__2E_str26233)
		mstate.esp -= 12
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((mstate.ebp+-4))
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_ArrayValue])()
		return
	__asm(lbl("__Z18b2LoopShape_deletePvP8_AS3_Val_state1"))
		mstate.esp += 12
		i0 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__Z18b2LoopShape_deletePvP8_AS3_Val__XprivateX__BB348_2_F"))
	__asm(lbl("__Z18b2LoopShape_deletePvP8_AS3_Val__XprivateX__BB348_1_F"))
		i1 =  ((__xasm<int>(push(i0), op(0x37))))
		i1 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 2
		mstate.esp -= 4;(mstate.funcs[i1])()
		return
	__asm(lbl("__Z18b2LoopShape_deletePvP8_AS3_Val_state2"))
		mstate.esp += 4
	__asm(lbl("__Z18b2LoopShape_deletePvP8_AS3_Val__XprivateX__BB348_2_F"))
		state = 3
		mstate.esp -= 4;(mstate.funcs[_AS3_Null])()
		return
	__asm(lbl("__Z18b2LoopShape_deletePvP8_AS3_Val_state3"))
		i0 = mstate.eax
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z18b2LoopShape_deletePvP8_AS3_Val_errState"))
		throw("Invalid state in __Z18b2LoopShape_deletePvP8_AS3_Val")
	}
}



// Async
public const __Z18b2Body_GetMassDataPvP8_AS3_Val:int = regFunc(FSM__Z18b2Body_GetMassDataPvP8_AS3_Val.start)

public final class FSM__Z18b2Body_GetMassDataPvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z18b2Body_GetMassDataPvP8_AS3_Val = new FSM__Z18b2Body_GetMassDataPvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int

	public static const intRegCount:int = 4
	public var f0:Number, f1:Number

	public static const NumberRegCount:int = 2
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z18b2Body_GetMassDataPvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z18b2Body_GetMassDataPvP8_AS3_Val_errState",
			"__Z18b2Body_GetMassDataPvP8_AS3_Val_state0",
			"__Z18b2Body_GetMassDataPvP8_AS3_Val_state1",
			"__Z18b2Body_GetMassDataPvP8_AS3_Val_state2"))
	__asm(lbl("__Z18b2Body_GetMassDataPvP8_AS3_Val_state0"))
	__asm(lbl("__Z18b2Body_GetMassDataPvP8_AS3_Val__XprivateX__BB349_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 8
		i0 =  (__2E_str34241)
		mstate.esp -= 16
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((mstate.ebp+-8))
		i3 =  ((mstate.ebp+-4))
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i3), push((mstate.esp+8)), op(0x3c))
		__asm(push(i2), push((mstate.esp+12)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_ArrayValue])()
		return
	__asm(lbl("__Z18b2Body_GetMassDataPvP8_AS3_Val_state1"))
		mstate.esp += 16
		i0 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+-8)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i0+124)), op(0x38))))
		__asm(push(f0), push(i1), op(0x3d))
		f0 =  ((__xasm<Number>(push((i0+36)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i0+40)), op(0x38))))
		f0 =  (f0 * f0)
		f1 =  (f1 * f1)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f1 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 + f1)
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push((i0+124)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f1 * f0)
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push((i0+132)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f1 + f0)
		f0 =  f0/*fround*/
		__asm(push(f0), push((i1+12)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i0+36)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i0+40)), op(0x38))))
		__asm(push(f0), push((i1+4)), op(0x3d))
		__asm(push(f1), push((i1+8)), op(0x3d))
		state = 2
		mstate.esp -= 4;(mstate.funcs[_AS3_Null])()
		return
	__asm(lbl("__Z18b2Body_GetMassDataPvP8_AS3_Val_state2"))
		i0 = mstate.eax
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z18b2Body_GetMassDataPvP8_AS3_Val_errState"))
		throw("Invalid state in __Z18b2Body_GetMassDataPvP8_AS3_Val")
	}
}



// Async
public const __Z18b2Contact_EvaluatePvP8_AS3_Val:int = regFunc(FSM__Z18b2Contact_EvaluatePvP8_AS3_Val.start)

public final class FSM__Z18b2Contact_EvaluatePvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z18b2Contact_EvaluatePvP8_AS3_Val = new FSM__Z18b2Contact_EvaluatePvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int

	public static const intRegCount:int = 5

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z18b2Contact_EvaluatePvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z18b2Contact_EvaluatePvP8_AS3_Val_errState",
			"__Z18b2Contact_EvaluatePvP8_AS3_Val_state0",
			"__Z18b2Contact_EvaluatePvP8_AS3_Val_state1",
			"__Z18b2Contact_EvaluatePvP8_AS3_Val_state2",
			"__Z18b2Contact_EvaluatePvP8_AS3_Val_state3"))
	__asm(lbl("__Z18b2Contact_EvaluatePvP8_AS3_Val_state0"))
	__asm(lbl("__Z18b2Contact_EvaluatePvP8_AS3_Val__XprivateX__BB350_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 4
		i0 =  (__2E_str26233)
		mstate.esp -= 12
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((mstate.ebp+-4))
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_ArrayValue])()
		return
	__asm(lbl("__Z18b2Contact_EvaluatePvP8_AS3_Val_state1"))
		mstate.esp += 12
		i0 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		i1 =  ((__xasm<int>(push(i0), op(0x37))))
		i2 =  ((__xasm<int>(push((i0+52)), op(0x37))))
		i3 =  ((__xasm<int>(push((i0+48)), op(0x37))))
		i2 =  ((__xasm<int>(push((i2+12)), op(0x37))))
		i3 =  ((__xasm<int>(push((i3+12)), op(0x37))))
		i1 =  ((__xasm<int>(push(i1), op(0x37))))
		mstate.esp -= 16
		i4 =  (i0 + 64)
		i3 =  (i3 + 12)
		i2 =  (i2 + 12)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i4), push((mstate.esp+4)), op(0x3c))
		__asm(push(i3), push((mstate.esp+8)), op(0x3c))
		__asm(push(i2), push((mstate.esp+12)), op(0x3c))
		state = 2
		mstate.esp -= 4;(mstate.funcs[i1])()
		return
	__asm(lbl("__Z18b2Contact_EvaluatePvP8_AS3_Val_state2"))
		mstate.esp += 16
		state = 3
		mstate.esp -= 4;(mstate.funcs[_AS3_Null])()
		return
	__asm(lbl("__Z18b2Contact_EvaluatePvP8_AS3_Val_state3"))
		i0 = mstate.eax
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z18b2Contact_EvaluatePvP8_AS3_Val_errState"))
		throw("Invalid state in __Z18b2Contact_EvaluatePvP8_AS3_Val")
	}
}



// Async
public const __Z18b2Vec2Array_deletePvP8_AS3_Val:int = regFunc(FSM__Z18b2Vec2Array_deletePvP8_AS3_Val.start)

public final class FSM__Z18b2Vec2Array_deletePvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z18b2Vec2Array_deletePvP8_AS3_Val = new FSM__Z18b2Vec2Array_deletePvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int

	public static const intRegCount:int = 3

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z18b2Vec2Array_deletePvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z18b2Vec2Array_deletePvP8_AS3_Val_errState",
			"__Z18b2Vec2Array_deletePvP8_AS3_Val_state0",
			"__Z18b2Vec2Array_deletePvP8_AS3_Val_state1",
			"__Z18b2Vec2Array_deletePvP8_AS3_Val_state2",
			"__Z18b2Vec2Array_deletePvP8_AS3_Val_state3"))
	__asm(lbl("__Z18b2Vec2Array_deletePvP8_AS3_Val_state0"))
	__asm(lbl("__Z18b2Vec2Array_deletePvP8_AS3_Val__XprivateX__BB351_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 4
		i0 =  (__2E_str26233)
		mstate.esp -= 12
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((mstate.ebp+-4))
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_ArrayValue])()
		return
	__asm(lbl("__Z18b2Vec2Array_deletePvP8_AS3_Val_state1"))
		mstate.esp += 12
		i0 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__Z18b2Vec2Array_deletePvP8_AS3_Val__XprivateX__BB351_2_F"))
	__asm(lbl("__Z18b2Vec2Array_deletePvP8_AS3_Val__XprivateX__BB351_1_F"))
		i1 =  (0)
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z18b2Vec2Array_deletePvP8_AS3_Val_state2"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z18b2Vec2Array_deletePvP8_AS3_Val__XprivateX__BB351_2_F"))
		state = 3
		mstate.esp -= 4;(mstate.funcs[_AS3_Null])()
		return
	__asm(lbl("__Z18b2Vec2Array_deletePvP8_AS3_Val_state3"))
		i0 = mstate.eax
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z18b2Vec2Array_deletePvP8_AS3_Val_errState"))
		throw("Invalid state in __Z18b2Vec2Array_deletePvP8_AS3_Val")
	}
}



// Async
public const __Z15b2Vec2Array_newPvP8_AS3_Val:int = regFunc(FSM__Z15b2Vec2Array_newPvP8_AS3_Val.start)

public final class FSM__Z15b2Vec2Array_newPvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z15b2Vec2Array_newPvP8_AS3_Val = new FSM__Z15b2Vec2Array_newPvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int

	public static const intRegCount:int = 3

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z15b2Vec2Array_newPvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z15b2Vec2Array_newPvP8_AS3_Val_errState",
			"__Z15b2Vec2Array_newPvP8_AS3_Val_state0",
			"__Z15b2Vec2Array_newPvP8_AS3_Val_state1",
			"__Z15b2Vec2Array_newPvP8_AS3_Val_state2",
			"__Z15b2Vec2Array_newPvP8_AS3_Val_state3",
			"__Z15b2Vec2Array_newPvP8_AS3_Val_state4"))
	__asm(lbl("__Z15b2Vec2Array_newPvP8_AS3_Val_state0"))
	__asm(lbl("__Z15b2Vec2Array_newPvP8_AS3_Val__XprivateX__BB352_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 4
		i0 =  (__2E_str41248)
		mstate.esp -= 12
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((mstate.ebp+-4))
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_ArrayValue])()
		return
	__asm(lbl("__Z15b2Vec2Array_newPvP8_AS3_Val_state1"))
		mstate.esp += 12
		i0 =  ((__xasm<int>(push(_as3_ptr), op(0x37))))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 2
		mstate.esp -= 4;(mstate.funcs[_AS3_Release])()
		return
	__asm(lbl("__Z15b2Vec2Array_newPvP8_AS3_Val_state2"))
		mstate.esp += 4
		i0 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		mstate.esp -= 4
		i0 =  (i0 << 3)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 3
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z15b2Vec2Array_newPvP8_AS3_Val_state3"))
		i0 = mstate.eax
		mstate.esp += 4
	__asm(lbl("__Z15b2Vec2Array_newPvP8_AS3_Val__XprivateX__BB352_1_F"))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 4
		mstate.esp -= 4;(mstate.funcs[_AS3_Ptr])()
		return
	__asm(lbl("__Z15b2Vec2Array_newPvP8_AS3_Val_state4"))
		i0 = mstate.eax
		mstate.esp += 4
		__asm(push(i0), push(_as3_ptr), op(0x3c))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z15b2Vec2Array_newPvP8_AS3_Val_errState"))
		throw("Invalid state in __Z15b2Vec2Array_newPvP8_AS3_Val")
	}
}



// Async
public const __Z15b2LoopShape_newPvP8_AS3_Val:int = regFunc(FSM__Z15b2LoopShape_newPvP8_AS3_Val.start)

public final class FSM__Z15b2LoopShape_newPvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z15b2LoopShape_newPvP8_AS3_Val = new FSM__Z15b2LoopShape_newPvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2
	public var f0:Number

	public static const NumberRegCount:int = 1
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z15b2LoopShape_newPvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z15b2LoopShape_newPvP8_AS3_Val_errState",
			"__Z15b2LoopShape_newPvP8_AS3_Val_state0",
			"__Z15b2LoopShape_newPvP8_AS3_Val_state1",
			"__Z15b2LoopShape_newPvP8_AS3_Val_state2",
			"__Z15b2LoopShape_newPvP8_AS3_Val_state3"))
	__asm(lbl("__Z15b2LoopShape_newPvP8_AS3_Val_state0"))
	__asm(lbl("__Z15b2LoopShape_newPvP8_AS3_Val__XprivateX__BB353_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (24)
		i1 =  ((__xasm<int>(push(_as3_ptr), op(0x37))))
		mstate.esp -= 4
		__asm(push(i1), push(mstate.esp), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_Release])()
		return
	__asm(lbl("__Z15b2LoopShape_newPvP8_AS3_Val_state1"))
		mstate.esp += 4
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		i0 =  (__ZTV11b2LoopShape)
		state = 2
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z15b2LoopShape_newPvP8_AS3_Val_state2"))
		i1 = mstate.eax
		mstate.esp += 4
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		i0 =  (3)
		__asm(push(i0), push((i1+4)), op(0x3c))
		f0 =  ((__xasm<Number>(push(_b2_polygonRadius), op(0x38))))
		__asm(push(f0), push((i1+8)), op(0x3d))
		i0 =  (0)
		__asm(push(i0), push((i1+16)), op(0x3c))
		__asm(push(i0), push((i1+20)), op(0x3c))
		mstate.esp -= 4
		__asm(push(i1), push(mstate.esp), op(0x3c))
		state = 3
		mstate.esp -= 4;(mstate.funcs[_AS3_Ptr])()
		return
	__asm(lbl("__Z15b2LoopShape_newPvP8_AS3_Val_state3"))
		i0 = mstate.eax
		mstate.esp += 4
		__asm(push(i0), push(_as3_ptr), op(0x3c))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z15b2LoopShape_newPvP8_AS3_Val_errState"))
		throw("Invalid state in __Z15b2LoopShape_newPvP8_AS3_Val")
	}
}



// Async
public const __Z15b2EdgeShape_newPvP8_AS3_Val:int = regFunc(FSM__Z15b2EdgeShape_newPvP8_AS3_Val.start)

public final class FSM__Z15b2EdgeShape_newPvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z15b2EdgeShape_newPvP8_AS3_Val = new FSM__Z15b2EdgeShape_newPvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2
	public var f0:Number

	public static const NumberRegCount:int = 1
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z15b2EdgeShape_newPvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z15b2EdgeShape_newPvP8_AS3_Val_errState",
			"__Z15b2EdgeShape_newPvP8_AS3_Val_state0",
			"__Z15b2EdgeShape_newPvP8_AS3_Val_state1",
			"__Z15b2EdgeShape_newPvP8_AS3_Val_state2",
			"__Z15b2EdgeShape_newPvP8_AS3_Val_state3"))
	__asm(lbl("__Z15b2EdgeShape_newPvP8_AS3_Val_state0"))
	__asm(lbl("__Z15b2EdgeShape_newPvP8_AS3_Val__XprivateX__BB354_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (52)
		i1 =  ((__xasm<int>(push(_as3_ptr), op(0x37))))
		mstate.esp -= 4
		__asm(push(i1), push(mstate.esp), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_Release])()
		return
	__asm(lbl("__Z15b2EdgeShape_newPvP8_AS3_Val_state1"))
		mstate.esp += 4
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		i0 =  (__ZTV11b2EdgeShape)
		state = 2
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z15b2EdgeShape_newPvP8_AS3_Val_state2"))
		i1 = mstate.eax
		mstate.esp += 4
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		i0 =  (1)
		__asm(push(i0), push((i1+4)), op(0x3c))
		f0 =  ((__xasm<Number>(push(_b2_polygonRadius), op(0x38))))
		__asm(push(f0), push((i1+8)), op(0x3d))
		i0 =  (0)
		__asm(push(i0), push((i1+48)), op(0x3a))
		__asm(push(i0), push((i1+49)), op(0x3a))
		mstate.esp -= 4
		__asm(push(i1), push(mstate.esp), op(0x3c))
		state = 3
		mstate.esp -= 4;(mstate.funcs[_AS3_Ptr])()
		return
	__asm(lbl("__Z15b2EdgeShape_newPvP8_AS3_Val_state3"))
		i0 = mstate.eax
		mstate.esp += 4
		__asm(push(i0), push(_as3_ptr), op(0x3c))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z15b2EdgeShape_newPvP8_AS3_Val_errState"))
		throw("Invalid state in __Z15b2EdgeShape_newPvP8_AS3_Val")
	}
}



// Async
public const __Z10b2DistancePvP8_AS3_Val:int = regFunc(FSM__Z10b2DistancePvP8_AS3_Val.start)

public final class FSM__Z10b2DistancePvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z10b2DistancePvP8_AS3_Val = new FSM__Z10b2DistancePvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int

	public static const intRegCount:int = 5

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z10b2DistancePvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z10b2DistancePvP8_AS3_Val_errState",
			"__Z10b2DistancePvP8_AS3_Val_state0",
			"__Z10b2DistancePvP8_AS3_Val_state1",
			"__Z10b2DistancePvP8_AS3_Val_state2",
			"__Z10b2DistancePvP8_AS3_Val_state3"))
	__asm(lbl("__Z10b2DistancePvP8_AS3_Val_state0"))
	__asm(lbl("__Z10b2DistancePvP8_AS3_Val__XprivateX__BB355_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 12
		i0 =  (__2E_str143)
		mstate.esp -= 20
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((mstate.ebp+-4))
		i3 =  ((mstate.ebp+-12))
		i4 =  ((mstate.ebp+-8))
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i4), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i2), push((mstate.esp+16)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_ArrayValue])()
		return
	__asm(lbl("__Z10b2DistancePvP8_AS3_Val_state1"))
		mstate.esp += 20
		i0 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+-12)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+-8)), op(0x37))))
		mstate.esp -= 12
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i0), push((mstate.esp+8)), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput.start()
		return
	__asm(lbl("__Z10b2DistancePvP8_AS3_Val_state2"))
		mstate.esp += 12
		state = 3
		mstate.esp -= 4;(mstate.funcs[_AS3_Null])()
		return
	__asm(lbl("__Z10b2DistancePvP8_AS3_Val_state3"))
		i0 = mstate.eax
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z10b2DistancePvP8_AS3_Val_errState"))
		throw("Invalid state in __Z10b2DistancePvP8_AS3_Val")
	}
}



// Async
public const __Z20b2DistanceOutput_newPvP8_AS3_Val:int = regFunc(FSM__Z20b2DistanceOutput_newPvP8_AS3_Val.start)

public final class FSM__Z20b2DistanceOutput_newPvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z20b2DistanceOutput_newPvP8_AS3_Val = new FSM__Z20b2DistanceOutput_newPvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z20b2DistanceOutput_newPvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z20b2DistanceOutput_newPvP8_AS3_Val_errState",
			"__Z20b2DistanceOutput_newPvP8_AS3_Val_state0",
			"__Z20b2DistanceOutput_newPvP8_AS3_Val_state1",
			"__Z20b2DistanceOutput_newPvP8_AS3_Val_state2",
			"__Z20b2DistanceOutput_newPvP8_AS3_Val_state3"))
	__asm(lbl("__Z20b2DistanceOutput_newPvP8_AS3_Val_state0"))
	__asm(lbl("__Z20b2DistanceOutput_newPvP8_AS3_Val__XprivateX__BB356_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (24)
		i1 =  ((__xasm<int>(push(_as3_ptr), op(0x37))))
		mstate.esp -= 4
		__asm(push(i1), push(mstate.esp), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_Release])()
		return
	__asm(lbl("__Z20b2DistanceOutput_newPvP8_AS3_Val_state1"))
		mstate.esp += 4
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z20b2DistanceOutput_newPvP8_AS3_Val_state2"))
		i0 = mstate.eax
		mstate.esp += 4
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 3
		mstate.esp -= 4;(mstate.funcs[_AS3_Ptr])()
		return
	__asm(lbl("__Z20b2DistanceOutput_newPvP8_AS3_Val_state3"))
		i0 = mstate.eax
		mstate.esp += 4
		__asm(push(i0), push(_as3_ptr), op(0x3c))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z20b2DistanceOutput_newPvP8_AS3_Val_errState"))
		throw("Invalid state in __Z20b2DistanceOutput_newPvP8_AS3_Val")
	}
}



// Async
public const __Z19b2DistanceInput_newPvP8_AS3_Val:int = regFunc(FSM__Z19b2DistanceInput_newPvP8_AS3_Val.start)

public final class FSM__Z19b2DistanceInput_newPvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z19b2DistanceInput_newPvP8_AS3_Val = new FSM__Z19b2DistanceInput_newPvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z19b2DistanceInput_newPvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z19b2DistanceInput_newPvP8_AS3_Val_errState",
			"__Z19b2DistanceInput_newPvP8_AS3_Val_state0",
			"__Z19b2DistanceInput_newPvP8_AS3_Val_state1",
			"__Z19b2DistanceInput_newPvP8_AS3_Val_state2",
			"__Z19b2DistanceInput_newPvP8_AS3_Val_state3"))
	__asm(lbl("__Z19b2DistanceInput_newPvP8_AS3_Val_state0"))
	__asm(lbl("__Z19b2DistanceInput_newPvP8_AS3_Val__XprivateX__BB357_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (108)
		i1 =  ((__xasm<int>(push(_as3_ptr), op(0x37))))
		mstate.esp -= 4
		__asm(push(i1), push(mstate.esp), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_Release])()
		return
	__asm(lbl("__Z19b2DistanceInput_newPvP8_AS3_Val_state1"))
		mstate.esp += 4
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z19b2DistanceInput_newPvP8_AS3_Val_state2"))
		i0 = mstate.eax
		mstate.esp += 4
		i1 =  (0)
		__asm(push(i1), push((i0+16)), op(0x3c))
		__asm(push(i1), push((i0+20)), op(0x3c))
		__asm(push(i1), push((i0+24)), op(0x3c))
		__asm(push(i1), push((i0+44)), op(0x3c))
		__asm(push(i1), push((i0+48)), op(0x3c))
		__asm(push(i1), push((i0+52)), op(0x3c))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 3
		mstate.esp -= 4;(mstate.funcs[_AS3_Ptr])()
		return
	__asm(lbl("__Z19b2DistanceInput_newPvP8_AS3_Val_state3"))
		i0 = mstate.eax
		mstate.esp += 4
		__asm(push(i0), push(_as3_ptr), op(0x3c))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z19b2DistanceInput_newPvP8_AS3_Val_errState"))
		throw("Invalid state in __Z19b2DistanceInput_newPvP8_AS3_Val")
	}
}



// Async
public const __Z24b2PolygonShape_DecomposePvP8_AS3_Val:int = regFunc(FSM__Z24b2PolygonShape_DecomposePvP8_AS3_Val.start)

public final class FSM__Z24b2PolygonShape_DecomposePvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z24b2PolygonShape_DecomposePvP8_AS3_Val = new FSM__Z24b2PolygonShape_DecomposePvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
	public var i8:int, i9:int, i10:int, i11:int, i12:int, i13:int, i14:int, i15:int
	public var i16:int, i17:int, i18:int, i19:int, i20:int, i21:int, i22:int, i23:int
	public var i24:int, i25:int, i26:int, i27:int, i28:int, i29:int, i30:int, i31:int
	public static const intRegCount:int = 32
	public var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number
	public var f8:Number, f9:Number, f10:Number, f11:Number, f12:Number, f13:Number, f14:Number

	public static const NumberRegCount:int = 15
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_errState",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state0",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state1",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state2",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state3",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state4",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state5",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state6",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state7",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state8",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state9",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state10",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state11",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state12",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state13",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state14",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state15",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state16",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state17",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state18",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state19",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state20",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state21",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state22",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state23",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state24",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state25",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state26",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state27",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state28",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state29",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state30",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state31",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state32",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state33",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state34",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state35",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state36",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state37",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state38",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state39",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state40",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state41",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state42",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state43",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state44",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state45",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state46",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state47",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state48",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state49",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state50",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state51",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state52",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state53",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state54",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state55",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state56",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state57",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state58",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state59",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state60",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state61",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state62",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state63",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state64",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state65",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state66",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state67",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state68",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state69",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state70",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state71",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state72",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state73",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state74",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state75",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state76",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state77",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state78",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state79",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state80",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state81",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state82",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state83",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state84",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state85",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state86",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state87",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state88",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state89",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state90",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state91",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state92",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state93",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state94",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state95",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state96",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state97",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state98",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state99",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state100",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state101",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state102",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state103",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state104",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state105",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state106",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state107",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state108",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state109",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state110",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state111",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state112",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state113",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state114",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state115",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state116",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state117",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state118",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state119",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state120",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state121",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state122",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state123",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state124",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state125",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state126",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state127",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state128",
			"__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state129"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state0"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 2432
		i0 =  (0)
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((mstate.ebp+-2288))
		__asm(push(i2), push((mstate.ebp+-2304)), op(0x3c))
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_1_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_1_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_1_F")); 
		i3 =  (0)
		__asm(push(i3), push(i2), op(0x3c))
		__asm(push(i3), push((i2+4)), op(0x3c))
		__asm(push(i3), push((i2+8)), op(0x3c))
		__asm(push(i3), push((i2+16)), op(0x3a))
		i2 =  (i2 + 20)
		i0 =  (i0 + 1)
		__asm(push(i0==100), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_3_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_2_F"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_1_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_3_F"))
		i0 = i1
		//InlineAsmStart
	i0 =  vt.get(i0)[0].length / 2;
	//InlineAsmEnd
		i2 = i0
		__asm(push(i2>2), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_5_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_4_F"))
		i1 =  (0)
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_Null])()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state1"))
		i2 = mstate.eax
		i0 = i1
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_611_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_5_F"))
		mstate.esp -= 4
		i0 =  (i2 << 2)
		__asm(push(i0), push((mstate.ebp+-2331)), op(0x3c))
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state2"))
		i0 = mstate.eax
		mstate.esp += 4
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_6_F"))
		mstate.esp -= 4
		i3 =  ((__xasm<int>(push((mstate.ebp+-2331)), op(0x37))))
		__asm(push(i3), push(mstate.esp), op(0x3c))
		state = 3
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state3"))
		i3 = mstate.eax
		mstate.esp += 4
		i4 = i0
		__asm(push(i4), push((mstate.ebp+-2394)), op(0x3c))
		__asm(push(i0), push((mstate.ebp+-2313)), op(0x3c))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_7_F"))
		i0 = i1
		//InlineAsmStart
	var v:Vector.<Number> = vt.get(i0)[0];
	//InlineAsmEnd
		i0 = i3
		__asm(push(i0), push((mstate.ebp+-2403)), op(0x3c))
		i0 = i3
		__asm(push(i0), push((mstate.ebp+-2322)), op(0x3c))
		__asm(push(i2<1), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_11_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_8_F"))
		i0 =  (0)
		i1 = i0
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_9_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_9_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_9_F")); 
		i3 = i0
		i0 = i3
		//InlineAsmStart
	f0 =  v[i0 * 2]
	//InlineAsmEnd
		i0 =  ((__xasm<int>(push((mstate.ebp+-2394)), op(0x37))))
		i0 =  (i0 + i1)
		__asm(push(f0), push(i0), op(0x3d))
		i0 = i3
		//InlineAsmStart
	f0 =  v[i0 * 2 + 1]
	//InlineAsmEnd
		i0 =  ((__xasm<int>(push((mstate.ebp+-2403)), op(0x37))))
		i0 =  (i0 + i1)
		__asm(push(f0), push(i0), op(0x3d))
		i0 =  (i1 + 4)
		i3 =  (i3 + 1)
		__asm(push(i2<=i3), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_11_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_10_F"))
		i1 = i0
		i0 = i3
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_9_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_11_F"))
		i0 =  (i2 * i2)
		mstate.esp -= 4
		i1 =  (i0 * 144)
		__asm(push(i1), push(mstate.esp), op(0x3c))
		state = 4
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state4"))
		i1 = mstate.eax
		__asm(push(i1), push((mstate.ebp+-2340)), op(0x3c))
		mstate.esp += 4
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_12_F"))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2340)), op(0x37))))
		i3 = i1
		__asm(push(i0==0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_37_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_13_F"))
		i4 =  (0)
		i5 = i1
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_14_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_14_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_14_F")); 
		i6 =  (0)
		__asm(push(i6), push((i5+136)), op(0x3c))
		__asm(push(i6), push((i5+140)), op(0x3a))
		i5 =  (i5 + 144)
		i4 =  (i4 + 1)
		__asm(push(i4==i0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_37_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_15_F"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_14_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_16_B"), label)
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_17_F"))
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_17_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_17_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_17_F")); 
		i7 =  ((__xasm<int>(push((mstate.ebp+-2394)), op(0x37))))
		i7 =  (i7 + i4)
		i8 =  ((__xasm<int>(push((mstate.ebp+-2403)), op(0x37))))
		i8 =  (i8 + i4)
		f0 =  ((__xasm<Number>(push(i8), op(0x38))))
		f1 =  ((__xasm<Number>(push(i7), op(0x38))))
		i7 =  (i5 + 1)
		__asm(push(f1), push(i6), op(0x3d))
		i7 =  ((i0==i5) ? 0 : i7)
		__asm(push(f0), push((i6+4)), op(0x3d))
		i8 =  ((i5==0) ? i2 : i5)
		i7 =  (i7 * 144)
		i9 =  ((__xasm<int>(push((i6+136)), op(0x37))))
		i10 =  (i6 + 136)
		i7 =  (i3 + i7)
		i8 =  (i8 + -1)
		__asm(push(i9>31), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_19_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_18_F"))
		i11 =  (0)
		i12 =  (i6 + 8)
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_24_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_19_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str24231)
		i4 =  (__ZZN10b2PolyNode13AddConnectionERS_E8__func__)
		i5 =  (__2E_str22229)
		i6 =  (1470)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i4), push((mstate.esp+12)), op(0x3c))
		__asm(push(i5), push((mstate.esp+16)), op(0x3c))
		__asm(push(i6), push((mstate.esp+20)), op(0x3c))
		state = 5
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state5"))
		mstate.esp += 24
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_20_F"))
		state = 6
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state6"))
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_21_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_21_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_21_F")); 
		i13 =  ((__xasm<int>(push(i13), op(0x37))))
		__asm(push(i13!=i7), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_23_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_22_F"))
		i11 = i9
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_26_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_23_F"))
		i12 =  (i12 + 4)
		i11 =  (i11 + 1)
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_24_F"))
		i13 = i12
		__asm(push(i9>i11), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_21_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_25_F"))
		i11 =  (i9 << 2)
		i11 =  (i6 + i11)
		__asm(push(i7), push((i11+8)), op(0x3c))
		i11 =  (i9 + 1)
		__asm(push(i11), push(i10), op(0x3c))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_26_F"))
		i7 = i11
		i8 =  (i8 * 144)
		i8 =  (i3 + i8)
		__asm(push(i7>31), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_28_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_27_F"))
		i9 =  (0)
		i11 =  (i6 + 8)
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_32_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_28_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str24231)
		i4 =  (__ZZN10b2PolyNode13AddConnectionERS_E8__func__)
		i5 =  (__2E_str22229)
		i6 =  (1470)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i4), push((mstate.esp+12)), op(0x3c))
		__asm(push(i5), push((mstate.esp+16)), op(0x3c))
		__asm(push(i6), push((mstate.esp+20)), op(0x3c))
		state = 7
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state7"))
		mstate.esp += 24
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_29_F"))
		state = 8
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state8"))
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_30_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_30_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_30_F")); 
		i12 =  ((__xasm<int>(push(i12), op(0x37))))
		__asm(push(i12==i8), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_34_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_31_F"))
		i11 =  (i11 + 4)
		i9 =  (i9 + 1)
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_32_F"))
		i12 = i11
		__asm(push(i7>i9), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_30_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_33_F"))
		i9 =  (i7 << 2)
		i9 =  (i6 + i9)
		__asm(push(i8), push((i9+8)), op(0x3c))
		i7 =  (i7 + 1)
		__asm(push(i7), push(i10), op(0x3c))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_34_F"))
		i6 =  (i6 + 144)
		i4 =  (i4 + 4)
		i5 =  (i5 + 1)
		__asm(push(i2>i5), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_16_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_35_F"))
		i0 = i5
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_36_F"))
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_36_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_36_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_36_F")); 
		i23 = i0
		i0 =  ((mstate.ebp+-144))
		__asm(push(i0), push((mstate.ebp+-2385)), op(0x3c))
		i0 =  (i23 * 144)
		//IMPLICIT_DEF f1 = 
		i0 =  (i1 + i0)
		i16 =  ((__xasm<int>(push((mstate.ebp+-2385)), op(0x37))))
		i16 =  (i16 + 140)
		__asm(push(i16), push((mstate.ebp+-2349)), op(0x3c))
		i16 =  ((__xasm<int>(push((mstate.ebp+-2385)), op(0x37))))
		i16 =  (i16 + 136)
		__asm(push(i16), push((mstate.ebp+-2358)), op(0x3c))
		i16 =  ((__xasm<int>(push((mstate.ebp+-2385)), op(0x37))))
		i16 =  (i16 + 4)
		__asm(push(i16), push((mstate.ebp+-2367)), op(0x3c))
		i16 =  ((__xasm<int>(push((mstate.ebp+-2385)), op(0x37))))
		__asm(push(i16), push((mstate.ebp+-2376)), op(0x3c))
		f0 = f1
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_192_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_37_F"))
		__asm(push(i2>0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_39_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_38_F"))
		i0 =  (0)
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_36_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_39_F"))
		i5 =  (0)
		i0 =  (i2 + -1)
		i6 = i1
		i4 = i5
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_17_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_40_B"), label)
		__asm(push(i6!=i8), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_47_F"))
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_41_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_41_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_41_F")); 
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_42_F"))
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_42_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_42_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_42_F")); 
		i23 =  (i9 + 144)
		i6 =  (i6 + 1)
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_43_F"))
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_43_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_43_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_43_F")); 
		i9 = i23
		i10 = i9
		i13 = i9
		__asm(push(i6<i16), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_40_B"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_44_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_44_F"))
		i23 =  (i17 + 4)
		i4 =  (i4 + 1)
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_45_F"))
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_45_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_45_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_45_F")); 
		i17 = i23
		i14 = i17
		__asm(push(i5<=i4), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_193_F"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_46_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_46_F"))
		i6 =  (0)
		i23 = i1
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_43_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_47_F"))
		i21 =  ((__xasm<int>(push(i14), op(0x37))))
		i22 = i21
		__asm(push(i13==i21), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_41_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_48_F"))
		i23 =  (0)
		i24 =  ((__xasm<int>(push((i9+136)), op(0x37))))
		i25 =  (i9 + 8)
		i26 =  (i9 + 4)
		i27 =  (i9 + 136)
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_49_F"))
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_49_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_49_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_49_F")); 
		i28 = i25
		i25 = i23
		i23 = i28
		__asm(push(i24>i25), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_50_F"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_42_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_50_F"))
		i29 =  ((__xasm<int>(push(i23), op(0x37))))
		i30 = i29
		__asm(push(i29==i22), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_52_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_51_F"))
		__asm(push(i30!=i11), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_54_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_52_F"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_53_F"))
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_53_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_53_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_53_F")); 
		i23 =  (i28 + 4)
		i28 =  (i25 + 1)
		i25 = i23
		i23 = i28
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_49_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_54_F"))
		f2 =  ((__xasm<Number>(push(i18), op(0x38))))
		f3 =  ((__xasm<Number>(push(i10), op(0x38))))
		f4 =  f3/*fextend*/
		f5 =  f2/*fextend*/
		__asm(push(f5!=f4), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_57_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_55_F"))
		f4 =  ((__xasm<Number>(push(i0), op(0x38))))
		f5 =  ((__xasm<Number>(push(i26), op(0x38))))
		__asm(push(f4!=f5), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_57_F"))
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_56_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_56_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_56_F")); 
		i31 =  (1)
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_73_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_57_F"))
		f4 =  ((__xasm<Number>(push(i30), op(0x38))))
		f5 =  f4/*fextend*/
		f6 =  f2/*fextend*/
		__asm(push(f6!=f5), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_59_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_58_F"))
		f5 =  ((__xasm<Number>(push(i0), op(0x38))))
		f6 =  ((__xasm<Number>(push((i30+4)), op(0x38))))
		__asm(push(f5==f6), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_56_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_59_F"))
		f5 =  ((__xasm<Number>(push(i22), op(0x38))))
		f6 =  f3/*fextend*/
		f7 =  f5/*fextend*/
		__asm(push(f7!=f6), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_61_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_60_F"))
		f6 =  ((__xasm<Number>(push((i22+4)), op(0x38))))
		f7 =  ((__xasm<Number>(push(i26), op(0x38))))
		__asm(push(f6==f7), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_56_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_61_F"))
		f6 =  f4/*fextend*/
		f7 =  f5/*fextend*/
		__asm(push(f7!=f6), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_63_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_62_F"))
		f6 =  ((__xasm<Number>(push((i22+4)), op(0x38))))
		f7 =  ((__xasm<Number>(push((i30+4)), op(0x38))))
		__asm(push(f6==f7), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_56_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_63_F"))
		f6 =  ((__xasm<Number>(push(i0), op(0x38))))
		f7 =  ((__xasm<Number>(push((i22+4)), op(0x38))))
		f8 =  ((__xasm<Number>(push(i26), op(0x38))))
		f9 =  ((__xasm<Number>(push((i30+4)), op(0x38))))
		f10 =  f5/*fextend*/
		f11 =  f2/*fextend*/
		f12 =  f4/*fextend*/
		f13 =  f3/*fextend*/
		f10 =  ((f11>f10) ? f11 : f10)
		f11 =  ((f13<f12) ? f13 : f12)
		f10 =  f10/*fround*/
		f11 =  f11/*fround*/
		f11 =  f11/*fextend*/
		f10 =  f10/*fextend*/
		__asm(push(f10<f11), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_56_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_64_F"))
		f10 =  f4/*fextend*/
		f11 =  f3/*fextend*/
		f12 =  f5/*fextend*/
		f13 =  f2/*fextend*/
		f10 =  ((f11>f10) ? f11 : f10)
		f11 =  ((f13<f12) ? f13 : f12)
		f10 =  f10/*fround*/
		f11 =  f11/*fround*/
		f11 =  f11/*fextend*/
		f10 =  f10/*fextend*/
		__asm(push(f10<f11), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_56_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_65_F"))
		f10 =  f7/*fextend*/
		f11 =  f6/*fextend*/
		f12 =  f9/*fextend*/
		f13 =  f8/*fextend*/
		f10 =  ((f11>f10) ? f11 : f10)
		f11 =  ((f13<f12) ? f13 : f12)
		f10 =  f10/*fround*/
		f11 =  f11/*fround*/
		f11 =  f11/*fextend*/
		f10 =  f10/*fextend*/
		__asm(push(f10<f11), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_56_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_66_F"))
		f10 =  f9/*fextend*/
		f11 =  f8/*fextend*/
		f12 =  f7/*fextend*/
		f13 =  f6/*fextend*/
		f10 =  ((f11>f10) ? f11 : f10)
		f11 =  ((f13<f12) ? f13 : f12)
		f10 =  f10/*fround*/
		f11 =  f11/*fround*/
		f11 =  f11/*fextend*/
		f10 =  f10/*fextend*/
		__asm(push(f10<f11), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_56_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_67_F"))
		f10 =  (0)
		f11 =  f8/*fextend*/
		f9 =  f9/*fextend*/
		f12 =  f2/*fextend*/
		f5 =  f5/*fextend*/
		f13 =  f3/*fextend*/
		f4 =  f4/*fextend*/
		f14 =  f6/*fextend*/
		f7 =  f7/*fextend*/
		f9 =  (f9 - f11)
		f5 =  (f5 - f12)
		f4 =  (f4 - f13)
		f7 =  (f7 - f14)
		f9 =  f9/*fround*/
		f5 =  f5/*fround*/
		f4 =  f4/*fround*/
		f7 =  f7/*fround*/
		f11 =  f5/*fextend*/
		f12 =  f9/*fextend*/
		f13 =  f7/*fextend*/
		f14 =  f4/*fextend*/
		f11 =  (f12 * f11)
		f12 =  (f14 * f13)
		f11 =  f11/*fround*/
		f12 =  f12/*fround*/
		f11 =  f11/*fextend*/
		f12 =  f12/*fextend*/
		f13 =  (f11 - f12)
		f11 =  (f12 - f11)
		f12 =  f13/*fround*/
		f11 =  f11/*fround*/
		f10 =  f10/*fround*/
		f11 =  f11/*fextend*/
		f10 =  f10/*fextend*/
		f13 =  f12/*fextend*/
		f10 =  ((f13<=f10) ? f11 : f13)
		f11 =  (1.19209e-07)
		f10 =  f10/*fround*/
		f11 =  f11/*fround*/
		f11 =  f11/*fextend*/
		f10 =  f10/*fextend*/
		__asm(push(f10<f11), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_56_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_68_F"))
		f10 =  (0)
		f8 =  f8/*fextend*/
		f11 =  f6/*fextend*/
		f3 =  f3/*fextend*/
		f13 =  f2/*fextend*/
		f8 =  (f11 - f8)
		f3 =  (f13 - f3)
		f8 =  f8/*fround*/
		f3 =  f3/*fround*/
		f4 =  f4/*fextend*/
		f8 =  f8/*fextend*/
		f9 =  f9/*fextend*/
		f3 =  f3/*fextend*/
		f4 =  (f4 * f8)
		f11 =  f5/*fextend*/
		f9 =  (f9 * f3)
		f13 =  f7/*fextend*/
		f4 =  f4/*fround*/
		f8 =  (f11 * f8)
		f9 =  f9/*fround*/
		f3 =  (f13 * f3)
		f8 =  f8/*fround*/
		f3 =  f3/*fround*/
		f9 =  f9/*fextend*/
		f4 =  f4/*fextend*/
		f4 =  (f4 - f9)
		f3 =  f3/*fextend*/
		f8 =  f8/*fextend*/
		f4 =  f4/*fround*/
		f3 =  (f8 - f3)
		f3 =  f3/*fround*/
		f4 =  f4/*fextend*/
		f8 =  f12/*fextend*/
		f4 =  (f4 / f8)
		f3 =  f3/*fextend*/
		f4 =  f4/*fround*/
		f3 =  (f3 / f8)
		f8 =  f10/*fround*/
		f3 =  f3/*fround*/
		f8 =  f8/*fextend*/
		f9 =  f4/*fextend*/
		__asm(push(f9<=f8), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_56_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_69_F"))
		f8 =  (1)
		f8 =  f8/*fround*/
		f8 =  f8/*fextend*/
		f9 =  f4/*fextend*/
		__asm(push(f9>=f8), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_56_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_70_F"))
		f8 =  (1)
		f8 =  f8/*fround*/
		f8 =  f8/*fextend*/
		f9 =  f3/*fextend*/
		__asm(push(f9>=f8), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_56_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_71_F"))
		f8 =  (0)
		f8 =  f8/*fround*/
		f8 =  f8/*fextend*/
		f3 =  f3/*fextend*/
		__asm(push(f3<=f8), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_56_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_72_F"))
		i31 =  (0)
		f0 =  f5/*fextend*/
		f1 =  f4/*fextend*/
		f3 =  f7/*fextend*/
		f0 =  (f0 * f1)
		f1 =  (f3 * f1)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f3 =  f6/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  (f0 + f2)
		f1 =  (f1 + f3)
		f2 =  f0/*fround*/
		f0 =  f1/*fround*/
		f1 = f2
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_73_F"))
		i31 =  (i31 ^ 1)
		i31 =  (i31 & 1)
		__asm(push(i31!=0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_75_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_74_F"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_53_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_75_F"))
		i0 =  ((__xasm<int>(push((i22+136)), op(0x37))))
		i25 =  (i22 + 136)
		__asm(push(i0>0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_84_F"))
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_76_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_76_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_76_F")); 
		i4 =  (-1)
		i5 =  (0)
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_77_F"))
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_77_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_77_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_77_F")); 
		i5 =  (i5 & 1)
		__asm(push(i5!=0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_80_F"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_78_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_78_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i25 =  (__2E_str1670)
		i1 =  (__2E_str25232)
		i2 =  (__ZZN10b2PolyNode16RemoveConnectionERS_E8__func__)
		i4 =  (__2E_str22229)
		i23 =  (1489)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i25), push((mstate.esp+4)), op(0x3c))
		__asm(push(i1), push((mstate.esp+8)), op(0x3c))
		__asm(push(i2), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i23), push((mstate.esp+20)), op(0x3c))
		state = 9
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state9"))
		mstate.esp += 24
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_79_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_79_F"))
		state = 10
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state10"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_80_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_80_F"))
		i0 =  (i0 + -1)
		__asm(push(i0), push(i25), op(0x3c))
		__asm(push(i0<=i4), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_89_F"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_81_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_81_F"))
		i5 =  (i4 << 2)
		i5 =  (i21 + i5)
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_82_F"))
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_82_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_82_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_82_F")); 
		i9 =  ((__xasm<int>(push((i5+12)), op(0x37))))
		__asm(push(i9), push((i5+8)), op(0x3c))
		i5 =  (i5 + 4)
		i4 =  (i4 + 1)
		__asm(push(i0<=i4), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_89_F"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_83_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_83_F"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_82_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_84_F"))
		i4 =  (0)
		i5 =  (i21 + 8)
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_85_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_85_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_85_F")); 
		i9 =  ((__xasm<int>(push(i5), op(0x37))))
		__asm(push(i9!=i11), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_87_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_86_F"))
		i5 =  (1)
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_77_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_87_F"))
		i5 =  (i5 + 4)
		i4 =  (i4 + 1)
		__asm(push(i0<=i4), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_76_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_88_F"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_85_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_89_F"))
		i0 =  (0)
		i4 =  ((__xasm<int>(push(i15), op(0x37))))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_93_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_90_B"), label)
		i5 =  (i8 * 144)
		i9 =  (i0 << 2)
		i5 =  (i3 + i5)
		i5 =  (i5 + i9)
		i5 =  ((__xasm<int>(push((i5+8)), op(0x37))))
		__asm(push(i5!=i22), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_92_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_91_F"))
		i5 =  (1)
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_95_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_92_F"))
		i0 =  (i0 + 1)
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_93_F"))
		__asm(push(i4>i0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_90_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_94_F"))
		i0 =  (-1)
		i5 =  (0)
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_95_F"))
		i5 =  (i5 & 1)
		__asm(push(i5!=0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_98_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_96_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i25 =  (__2E_str1670)
		i1 =  (__2E_str25232)
		i2 =  (__ZZN10b2PolyNode16RemoveConnectionERS_E8__func__)
		i4 =  (__2E_str22229)
		i23 =  (1489)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i25), push((mstate.esp+4)), op(0x3c))
		__asm(push(i1), push((mstate.esp+8)), op(0x3c))
		__asm(push(i2), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i23), push((mstate.esp+20)), op(0x3c))
		state = 11
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state11"))
		mstate.esp += 24
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_97_F"))
		state = 12
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state12"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_98_F"))
		i4 =  (i4 + -1)
		__asm(push(i4), push(i15), op(0x3c))
		__asm(push(i4<=i0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_101_F"))
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_99_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_99_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_99_F")); 
		i5 =  (i8 * 144)
		i5 =  (i3 + i5)
		i9 =  (i0 + 1)
		i10 =  (i9 << 2)
		i5 =  (i5 + 8)
		i0 =  (i0 << 2)
		i10 =  (i5 + i10)
		i10 =  ((__xasm<int>(push(i10), op(0x37))))
		i0 =  (i5 + i0)
		__asm(push(i10), push(i0), op(0x3c))
		__asm(push(i4<=i9), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_101_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_100_F"))
		i0 = i9
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_99_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_101_F"))
		i0 =  ((__xasm<int>(push(i23), op(0x37))))
		i23 =  ((__xasm<int>(push((i0+136)), op(0x37))))
		i4 =  (i0 + 136)
		__asm(push(i23>0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_110_F"))
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_102_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_102_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_102_F")); 
		i5 =  (-1)
		i9 =  (0)
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_103_F"))
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_103_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_103_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_103_F")); 
		i9 =  (i9 & 1)
		__asm(push(i9!=0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_106_F"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_104_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_104_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i23 =  (__2E_str1670)
		i25 =  (__2E_str25232)
		i1 =  (__ZZN10b2PolyNode16RemoveConnectionERS_E8__func__)
		i2 =  (__2E_str22229)
		i4 =  (1489)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i23), push((mstate.esp+4)), op(0x3c))
		__asm(push(i25), push((mstate.esp+8)), op(0x3c))
		__asm(push(i1), push((mstate.esp+12)), op(0x3c))
		__asm(push(i2), push((mstate.esp+16)), op(0x3c))
		__asm(push(i4), push((mstate.esp+20)), op(0x3c))
		state = 13
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state13"))
		mstate.esp += 24
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_105_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_105_F"))
		state = 14
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state14"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_106_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_106_F"))
		i23 =  (i23 + -1)
		__asm(push(i23), push(i4), op(0x3c))
		__asm(push(i23<=i5), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_115_F"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_107_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_107_F"))
		i4 =  (i5 << 2)
		i0 =  (i0 + i4)
		i4 = i5
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_108_F"))
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_108_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_108_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_108_F")); 
		i5 =  ((__xasm<int>(push((i0+12)), op(0x37))))
		__asm(push(i5), push((i0+8)), op(0x3c))
		i0 =  (i0 + 4)
		i4 =  (i4 + 1)
		__asm(push(i23<=i4), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_115_F"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_109_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_109_F"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_108_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_110_F"))
		i5 =  (0)
		i9 =  (i0 + 8)
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_111_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_111_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_111_F")); 
		i10 =  ((__xasm<int>(push(i9), op(0x37))))
		__asm(push(i10!=i13), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_113_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_112_F"))
		i9 =  (1)
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_103_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_113_F"))
		i9 =  (i9 + 4)
		i5 =  (i5 + 1)
		__asm(push(i23<=i5), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_102_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_114_F"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_111_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_115_F"))
		i0 =  (0)
		i23 =  ((__xasm<int>(push(i27), op(0x37))))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_119_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_116_B"), label)
		i4 =  (i6 * 144)
		i5 =  (i0 << 2)
		i4 =  (i3 + i4)
		i4 =  (i4 + i5)
		i4 =  ((__xasm<int>(push((i4+8)), op(0x37))))
		__asm(push(i4!=i30), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_118_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_117_F"))
		i4 =  (1)
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_121_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_118_F"))
		i0 =  (i0 + 1)
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_119_F"))
		__asm(push(i23>i0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_116_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_120_F"))
		i0 =  (-1)
		i4 =  (0)
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_121_F"))
		i4 =  (i4 & 1)
		__asm(push(i4!=0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_124_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_122_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i23 =  (__2E_str1670)
		i25 =  (__2E_str25232)
		i1 =  (__ZZN10b2PolyNode16RemoveConnectionERS_E8__func__)
		i2 =  (__2E_str22229)
		i3 =  (1489)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i23), push((mstate.esp+4)), op(0x3c))
		__asm(push(i25), push((mstate.esp+8)), op(0x3c))
		__asm(push(i1), push((mstate.esp+12)), op(0x3c))
		__asm(push(i2), push((mstate.esp+16)), op(0x3c))
		__asm(push(i3), push((mstate.esp+20)), op(0x3c))
		state = 15
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state15"))
		mstate.esp += 24
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_123_F"))
		state = 16
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state16"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_124_F"))
		i23 =  (i23 + -1)
		__asm(push(i23), push(i27), op(0x3c))
		__asm(push(i23<=i0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_127_F"))
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_125_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_125_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_125_F")); 
		i4 =  (i6 * 144)
		i4 =  (i3 + i4)
		i5 =  (i0 + 1)
		i9 =  (i5 << 2)
		i4 =  (i4 + 8)
		i0 =  (i0 << 2)
		i9 =  (i4 + i9)
		i9 =  ((__xasm<int>(push(i9), op(0x37))))
		i0 =  (i4 + i0)
		__asm(push(i9), push(i0), op(0x3c))
		__asm(push(i23<=i5), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_127_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_126_F"))
		i0 = i5
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_125_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_127_F"))
		i0 =  (0)
		i23 =  ((__xasm<int>(push((mstate.ebp+-2376)), op(0x37))))
		__asm(push(f1), push(i23), op(0x3d))
		i23 =  ((__xasm<int>(push((mstate.ebp+-2367)), op(0x37))))
		__asm(push(f0), push(i23), op(0x3d))
		i23 =  ((__xasm<int>(push((mstate.ebp+-2358)), op(0x37))))
		__asm(push(i0), push(i23), op(0x3c))
		i23 =  ((__xasm<int>(push((mstate.ebp+-2349)), op(0x37))))
		__asm(push(i0), push(i23), op(0x3a))
		i0 = i7
		i23 =  ((__xasm<int>(push((mstate.ebp+-2385)), op(0x37))))
		i4 =  (141)
		memcpy(i0, i23, i4)
		i0 =  ((__xasm<int>(push((i20+136)), op(0x37))))
		i23 =  (i20 + 136)
		__asm(push(i0>31), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_129_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_128_F"))
		i4 =  (0)
		i5 =  (i20 + 8)
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_133_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_129_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i23 =  (__2E_str1670)
		i25 =  (__2E_str24231)
		i1 =  (__ZZN10b2PolyNode13AddConnectionERS_E8__func__)
		i2 =  (__2E_str22229)
		i4 =  (1470)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i23), push((mstate.esp+4)), op(0x3c))
		__asm(push(i25), push((mstate.esp+8)), op(0x3c))
		__asm(push(i1), push((mstate.esp+12)), op(0x3c))
		__asm(push(i2), push((mstate.esp+16)), op(0x3c))
		__asm(push(i4), push((mstate.esp+20)), op(0x3c))
		state = 17
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state17"))
		mstate.esp += 24
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_130_F"))
		state = 18
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state18"))
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_131_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_131_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_131_F")); 
		i5 =  ((__xasm<int>(push(i5), op(0x37))))
		__asm(push(i5==i11), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_135_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_132_F"))
		i5 =  (i7 + 4)
		i4 =  (i4 + 1)
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_133_F"))
		i7 = i5
		i5 = i7
		__asm(push(i0>i4), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_131_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_134_F"))
		i4 =  (i0 << 2)
		i4 =  (i20 + i4)
		__asm(push(i11), push((i4+8)), op(0x3c))
		i0 =  (i0 + 1)
		__asm(push(i0), push(i23), op(0x3c))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_135_F"))
		i0 =  ((__xasm<int>(push(i15), op(0x37))))
		__asm(push(i0>31), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_137_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_136_F"))
		i4 =  (0)
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_141_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_137_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i23 =  (__2E_str1670)
		i25 =  (__2E_str24231)
		i1 =  (__ZZN10b2PolyNode13AddConnectionERS_E8__func__)
		i2 =  (__2E_str22229)
		i4 =  (1470)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i23), push((mstate.esp+4)), op(0x3c))
		__asm(push(i25), push((mstate.esp+8)), op(0x3c))
		__asm(push(i1), push((mstate.esp+12)), op(0x3c))
		__asm(push(i2), push((mstate.esp+16)), op(0x3c))
		__asm(push(i4), push((mstate.esp+20)), op(0x3c))
		state = 19
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state19"))
		mstate.esp += 24
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_138_F"))
		state = 20
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state20"))
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_139_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_139_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_139_F")); 
		i5 =  (i8 * 144)
		i7 =  (i4 << 2)
		i5 =  (i3 + i5)
		i5 =  (i5 + i7)
		i5 =  ((__xasm<int>(push((i5+8)), op(0x37))))
		__asm(push(i5==i12), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_143_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_140_F"))
		i4 =  (i4 + 1)
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_141_F"))
		__asm(push(i0>i4), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_139_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_142_F"))
		i4 =  (i8 * 144)
		i5 =  (i0 << 2)
		i4 =  (i3 + i4)
		i4 =  (i4 + i5)
		__asm(push(i12), push((i4+8)), op(0x3c))
		i0 =  (i0 + 1)
		__asm(push(i0), push(i15), op(0x3c))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_143_F"))
		i0 =  ((__xasm<int>(push(i23), op(0x37))))
		__asm(push(i0>31), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_145_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_144_F"))
		i4 =  (0)
		i5 =  (i20 + 8)
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_149_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_145_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i23 =  (__2E_str1670)
		i25 =  (__2E_str24231)
		i1 =  (__ZZN10b2PolyNode13AddConnectionERS_E8__func__)
		i2 =  (__2E_str22229)
		i4 =  (1470)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i23), push((mstate.esp+4)), op(0x3c))
		__asm(push(i25), push((mstate.esp+8)), op(0x3c))
		__asm(push(i1), push((mstate.esp+12)), op(0x3c))
		__asm(push(i2), push((mstate.esp+16)), op(0x3c))
		__asm(push(i4), push((mstate.esp+20)), op(0x3c))
		state = 21
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state21"))
		mstate.esp += 24
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_146_F"))
		state = 22
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state22"))
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_147_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_147_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_147_F")); 
		i4 =  ((__xasm<int>(push(i4), op(0x37))))
		__asm(push(i4==i13), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_151_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_148_F"))
		i4 =  (i7 + 4)
		i7 =  (i5 + 1)
		i5 = i4
		i4 = i7
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_149_F"))
		i7 = i5
		i5 = i4
		i4 = i7
		__asm(push(i0>i5), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_147_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_150_F"))
		i4 =  (i0 << 2)
		i4 =  (i20 + i4)
		__asm(push(i13), push((i4+8)), op(0x3c))
		i0 =  (i0 + 1)
		__asm(push(i0), push(i23), op(0x3c))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_151_F"))
		i0 =  ((__xasm<int>(push(i27), op(0x37))))
		__asm(push(i0>31), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_153_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_152_F"))
		i4 =  (0)
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_157_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_153_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i23 =  (__2E_str1670)
		i25 =  (__2E_str24231)
		i1 =  (__ZZN10b2PolyNode13AddConnectionERS_E8__func__)
		i2 =  (__2E_str22229)
		i4 =  (1470)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i23), push((mstate.esp+4)), op(0x3c))
		__asm(push(i25), push((mstate.esp+8)), op(0x3c))
		__asm(push(i1), push((mstate.esp+12)), op(0x3c))
		__asm(push(i2), push((mstate.esp+16)), op(0x3c))
		__asm(push(i4), push((mstate.esp+20)), op(0x3c))
		state = 23
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state23"))
		mstate.esp += 24
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_154_F"))
		state = 24
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state24"))
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_155_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_155_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_155_F")); 
		i5 =  (i6 * 144)
		i7 =  (i4 << 2)
		i5 =  (i3 + i5)
		i5 =  (i5 + i7)
		i5 =  ((__xasm<int>(push((i5+8)), op(0x37))))
		__asm(push(i5==i12), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_159_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_156_F"))
		i4 =  (i4 + 1)
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_157_F"))
		__asm(push(i0>i4), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_155_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_158_F"))
		i4 =  (i6 * 144)
		i5 =  (i0 << 2)
		i4 =  (i3 + i4)
		i4 =  (i4 + i5)
		__asm(push(i12), push((i4+8)), op(0x3c))
		i0 =  (i0 + 1)
		__asm(push(i0), push(i27), op(0x3c))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_159_F"))
		i0 =  ((__xasm<int>(push(i23), op(0x37))))
		__asm(push(i0>31), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_161_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_160_F"))
		i4 =  (0)
		i5 =  (i20 + 8)
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_165_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_161_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i23 =  (__2E_str1670)
		i25 =  (__2E_str24231)
		i1 =  (__ZZN10b2PolyNode13AddConnectionERS_E8__func__)
		i2 =  (__2E_str22229)
		i4 =  (1470)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i23), push((mstate.esp+4)), op(0x3c))
		__asm(push(i25), push((mstate.esp+8)), op(0x3c))
		__asm(push(i1), push((mstate.esp+12)), op(0x3c))
		__asm(push(i2), push((mstate.esp+16)), op(0x3c))
		__asm(push(i4), push((mstate.esp+20)), op(0x3c))
		state = 25
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state25"))
		mstate.esp += 24
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_162_F"))
		state = 26
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state26"))
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_163_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_163_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_163_F")); 
		i4 =  ((__xasm<int>(push(i4), op(0x37))))
		__asm(push(i4==i22), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_167_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_164_F"))
		i4 =  (i6 + 4)
		i6 =  (i5 + 1)
		i5 = i4
		i4 = i6
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_165_F"))
		i6 = i5
		i5 = i4
		i4 = i6
		__asm(push(i0>i5), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_163_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_166_F"))
		i4 =  (i0 << 2)
		i4 =  (i20 + i4)
		__asm(push(i22), push((i4+8)), op(0x3c))
		i0 =  (i0 + 1)
		__asm(push(i0), push(i23), op(0x3c))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_167_F"))
		i0 =  ((__xasm<int>(push(i25), op(0x37))))
		__asm(push(i0>31), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_169_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_168_F"))
		i4 =  (0)
		i5 =  (i21 + 8)
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_173_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_169_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i23 =  (__2E_str1670)
		i25 =  (__2E_str24231)
		i1 =  (__ZZN10b2PolyNode13AddConnectionERS_E8__func__)
		i2 =  (__2E_str22229)
		i4 =  (1470)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i23), push((mstate.esp+4)), op(0x3c))
		__asm(push(i25), push((mstate.esp+8)), op(0x3c))
		__asm(push(i1), push((mstate.esp+12)), op(0x3c))
		__asm(push(i2), push((mstate.esp+16)), op(0x3c))
		__asm(push(i4), push((mstate.esp+20)), op(0x3c))
		state = 27
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state27"))
		mstate.esp += 24
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_170_F"))
		state = 28
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state28"))
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_171_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_171_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_171_F")); 
		i4 =  ((__xasm<int>(push(i4), op(0x37))))
		__asm(push(i4==i12), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_175_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_172_F"))
		i4 =  (i6 + 4)
		i6 =  (i5 + 1)
		i5 = i4
		i4 = i6
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_173_F"))
		i6 = i5
		i5 = i4
		i4 = i6
		__asm(push(i0>i5), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_171_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_174_F"))
		i4 =  (i0 << 2)
		i4 =  (i22 + i4)
		__asm(push(i12), push((i4+8)), op(0x3c))
		i0 =  (i0 + 1)
		__asm(push(i0), push(i25), op(0x3c))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_175_F"))
		i0 =  ((__xasm<int>(push(i23), op(0x37))))
		__asm(push(i0>31), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_177_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_176_F"))
		i25 =  (0)
		i4 =  (i20 + 8)
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_181_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_177_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i23 =  (__2E_str1670)
		i25 =  (__2E_str24231)
		i1 =  (__ZZN10b2PolyNode13AddConnectionERS_E8__func__)
		i2 =  (__2E_str22229)
		i4 =  (1470)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i23), push((mstate.esp+4)), op(0x3c))
		__asm(push(i25), push((mstate.esp+8)), op(0x3c))
		__asm(push(i1), push((mstate.esp+12)), op(0x3c))
		__asm(push(i2), push((mstate.esp+16)), op(0x3c))
		__asm(push(i4), push((mstate.esp+20)), op(0x3c))
		state = 29
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state29"))
		mstate.esp += 24
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_178_F"))
		state = 30
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state30"))
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_179_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_179_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_179_F")); 
		i25 =  ((__xasm<int>(push(i25), op(0x37))))
		__asm(push(i25==i30), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_183_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_180_F"))
		i25 =  (i5 + 4)
		i5 =  (i4 + 1)
		i4 = i25
		i25 = i5
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_181_F"))
		i5 = i4
		i4 = i25
		i25 = i5
		__asm(push(i0>i4), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_179_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_182_F"))
		i25 =  (i0 << 2)
		i25 =  (i20 + i25)
		__asm(push(i30), push((i25+8)), op(0x3c))
		i0 =  (i0 + 1)
		__asm(push(i0), push(i23), op(0x3c))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_183_F"))
		i0 =  ((__xasm<int>(push((i30+136)), op(0x37))))
		i23 =  (i30 + 136)
		__asm(push(i0>31), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_185_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_184_F"))
		i25 =  (0)
		i4 =  (i29 + 8)
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_189_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_185_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i23 =  (__2E_str1670)
		i25 =  (__2E_str24231)
		i1 =  (__ZZN10b2PolyNode13AddConnectionERS_E8__func__)
		i2 =  (__2E_str22229)
		i4 =  (1470)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i23), push((mstate.esp+4)), op(0x3c))
		__asm(push(i25), push((mstate.esp+8)), op(0x3c))
		__asm(push(i1), push((mstate.esp+12)), op(0x3c))
		__asm(push(i2), push((mstate.esp+16)), op(0x3c))
		__asm(push(i4), push((mstate.esp+20)), op(0x3c))
		state = 31
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state31"))
		mstate.esp += 24
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_186_F"))
		state = 32
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state32"))
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_187_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_187_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_187_F")); 
		i25 =  ((__xasm<int>(push(i25), op(0x37))))
		__asm(push(i25==i12), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_191_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_188_F"))
		i25 =  (i5 + 4)
		i5 =  (i4 + 1)
		i4 = i25
		i25 = i5
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_189_F"))
		i5 = i4
		i4 = i25
		i25 = i5
		__asm(push(i0>i4), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_187_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_190_F"))
		i25 =  (i0 << 2)
		i25 =  (i30 + i25)
		__asm(push(i12), push((i25+8)), op(0x3c))
		i0 =  (i0 + 1)
		__asm(push(i0), push(i23), op(0x3c))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_191_F"))
		i0 =  (i20 + 144)
		i23 =  (i16 + 1)
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_192_F"))
		i20 = i0
		i16 = i23
		i0 =  (0)
		i7 = i20
		i12 = i20
		i23 = i1
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_194_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_193_F"))
		i0 =  (i19 + 144)
		i4 =  (i8 + 1)
		i23 = i0
		i0 = i4
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_194_F"))
		i19 = i23
		i8 = i0
		i11 = i19
		i18 = i19
		__asm(push(i8<i16), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_196_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_195_F"))
		i0 =  (1)
		i23 = i16
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_250_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_196_F"))
		i4 =  (0)
		i5 =  ((__xasm<int>(push((i19+136)), op(0x37))))
		i23 =  (i19 + 8)
		i0 =  (i19 + 4)
		i15 =  (i19 + 136)
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_45_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_197_B"), label)
		i6 =  (i1 + i5)
		i7 =  ((__xasm<int>(push((i6+136)), op(0x37))))
		i6 =  (i6 + 136)
		__asm(push(i7!=0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_199_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_198_F"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_248_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_199_F"))
		i7 =  (i1 + i5)
		i8 =  (i7 + 4)
		i9 = i7
		i10 = i4
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_245_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_200_B"), label)
		i12 =  ((__xasm<int>(push((i0+280)), op(0x37))))
		i13 =  (i0 + 280)
		__asm(push(i12!=0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_202_F"))
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_201_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_201_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_201_F")); 
		i0 =  (i0 + 144)
		i10 =  (i10 + 1)
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_246_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_202_F"))
		f0 =  (1.42109e-14)
		f1 =  ((__xasm<Number>(push(i8), op(0x38))))
		f2 =  ((__xasm<Number>(push((i0+148)), op(0x38))))
		f3 =  ((__xasm<Number>(push(i9), op(0x38))))
		f4 =  ((__xasm<Number>(push((i0+144)), op(0x38))))
		f1 =  (f1 - f2)
		f2 =  (f3 - f4)
		f1 =  f1/*fround*/
		f2 =  f2/*fround*/
		f1 =  f1/*fextend*/
		f2 =  f2/*fextend*/
		f1 =  (f1 * f1)
		f2 =  (f2 * f2)
		f1 =  f1/*fround*/
		f2 =  f2/*fround*/
		f1 =  f1/*fextend*/
		f2 =  f2/*fextend*/
		f1 =  (f2 + f1)
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		__asm(push(f1>f0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_201_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_203_F"))
		__asm(push(i23>3), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_205_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_204_F"))
		i0 =  (0)
		i23 = i0
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_312_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_205_F"))
		i0 =  (i10 * 144)
		i0 =  (i3 + i0)
		__asm(push(i12<1), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_244_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_206_F"))
		i11 =  (0)
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_207_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_207_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_207_F")); 
		i14 =  (i10 * 144)
		i15 =  (i11 << 2)
		i14 =  (i3 + i14)
		i14 =  (i14 + i15)
		i14 =  ((__xasm<int>(push((i14+8)), op(0x37))))
		i15 = i14
		__asm(push(i14!=i0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_210_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_208_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i23 =  (__2E_str1670)
		i10 =  (__2E_str172)
		i11 =  (__ZZ9TraceEdgeP9b2PolygonE8__func__)
		i1 =  (__2E_str22229)
		i2 =  (1342)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i23), push((mstate.esp+4)), op(0x3c))
		__asm(push(i10), push((mstate.esp+8)), op(0x3c))
		__asm(push(i11), push((mstate.esp+12)), op(0x3c))
		__asm(push(i1), push((mstate.esp+16)), op(0x3c))
		__asm(push(i2), push((mstate.esp+20)), op(0x3c))
		state = 33
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state33"))
		mstate.esp += 24
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_209_F"))
		state = 34
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state34"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_210_F"))
		__asm(push(i15!=i7), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_212_F"))
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_211_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_211_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_211_F")); 
		i17 =  (0)
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_240_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_212_F"))
		i17 =  ((__xasm<int>(push(i6), op(0x37))))
		__asm(push(i17>31), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_214_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_213_F"))
		i18 =  (0)
		i19 =  (i1 + i5)
		i19 =  (i19 + 8)
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_218_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_214_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i23 =  (__2E_str1670)
		i10 =  (__2E_str24231)
		i11 =  (__ZZN10b2PolyNode13AddConnectionERS_E8__func__)
		i1 =  (__2E_str22229)
		i2 =  (1470)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i23), push((mstate.esp+4)), op(0x3c))
		__asm(push(i10), push((mstate.esp+8)), op(0x3c))
		__asm(push(i11), push((mstate.esp+12)), op(0x3c))
		__asm(push(i1), push((mstate.esp+16)), op(0x3c))
		__asm(push(i2), push((mstate.esp+20)), op(0x3c))
		state = 35
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state35"))
		mstate.esp += 24
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_215_F"))
		state = 36
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state36"))
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_216_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_216_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_216_F")); 
		i20 =  ((__xasm<int>(push(i20), op(0x37))))
		__asm(push(i20==i15), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_220_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_217_F"))
		i19 =  (i19 + 4)
		i18 =  (i18 + 1)
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_218_F"))
		i20 = i19
		__asm(push(i17>i18), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_216_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_219_F"))
		i18 =  (i4 * 144)
		i19 =  (i17 << 2)
		i18 =  (i3 + i18)
		i18 =  (i18 + i19)
		__asm(push(i15), push((i18+8)), op(0x3c))
		i17 =  (i17 + 1)
		__asm(push(i17), push(i6), op(0x3c))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_220_F"))
		i17 =  ((__xasm<int>(push((i15+136)), op(0x37))))
		i18 =  (i15 + 136)
		__asm(push(i17>31), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_222_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_221_F"))
		i19 =  (0)
		i20 =  (i14 + 8)
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_226_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_222_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i23 =  (__2E_str1670)
		i10 =  (__2E_str24231)
		i11 =  (__ZZN10b2PolyNode13AddConnectionERS_E8__func__)
		i1 =  (__2E_str22229)
		i2 =  (1470)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i23), push((mstate.esp+4)), op(0x3c))
		__asm(push(i10), push((mstate.esp+8)), op(0x3c))
		__asm(push(i11), push((mstate.esp+12)), op(0x3c))
		__asm(push(i1), push((mstate.esp+16)), op(0x3c))
		__asm(push(i2), push((mstate.esp+20)), op(0x3c))
		state = 37
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state37"))
		mstate.esp += 24
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_223_F"))
		state = 38
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state38"))
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_224_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_224_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_224_F")); 
		i21 =  ((__xasm<int>(push(i21), op(0x37))))
		__asm(push(i21==i7), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_211_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_225_F"))
		i20 =  (i20 + 4)
		i19 =  (i19 + 1)
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_226_F"))
		i21 = i20
		__asm(push(i17>i19), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_224_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_227_F"))
		i19 =  (i17 << 2)
		i19 =  (i15 + i19)
		__asm(push(i7), push((i19+8)), op(0x3c))
		i17 =  (i17 + 1)
		__asm(push(i17), push(i18), op(0x3c))
		__asm(push(i17>0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_236_F"))
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_228_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_228_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_228_F")); 
		i17 =  (-1)
		i18 =  (0)
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_229_F"))
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_229_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_229_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_229_F")); 
		i15 =  (i15 + 136)
		i18 =  (i18 & 1)
		__asm(push(i18!=0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_232_F"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_230_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_230_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i23 =  (__2E_str1670)
		i10 =  (__2E_str25232)
		i11 =  (__ZZN10b2PolyNode16RemoveConnectionERS_E8__func__)
		i1 =  (__2E_str22229)
		i2 =  (1489)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i23), push((mstate.esp+4)), op(0x3c))
		__asm(push(i10), push((mstate.esp+8)), op(0x3c))
		__asm(push(i11), push((mstate.esp+12)), op(0x3c))
		__asm(push(i1), push((mstate.esp+16)), op(0x3c))
		__asm(push(i2), push((mstate.esp+20)), op(0x3c))
		state = 39
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state39"))
		mstate.esp += 24
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_231_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_231_F"))
		state = 40
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state40"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_232_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_232_F"))
		i18 =  ((__xasm<int>(push(i15), op(0x37))))
		i18 =  (i18 + -1)
		__asm(push(i18), push(i15), op(0x3c))
		__asm(push(i18<=i17), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_242_F"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_233_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_233_F"))
		i15 =  (i17 << 2)
		i14 =  (i14 + i15)
		i15 = i17
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_234_F"))
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_234_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_234_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_234_F")); 
		i17 =  ((__xasm<int>(push((i14+12)), op(0x37))))
		__asm(push(i17), push((i14+8)), op(0x3c))
		i14 =  (i14 + 4)
		i15 =  (i15 + 1)
		__asm(push(i18<=i15), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_242_F"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_235_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_235_F"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_234_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_236_F"))
		i17 =  (0)
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_237_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_237_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_237_F")); 
		i18 =  (i17 << 2)
		i18 =  (i15 + i18)
		i18 =  ((__xasm<int>(push((i18+8)), op(0x37))))
		__asm(push(i18!=i0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_239_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_238_F"))
		i18 =  (1)
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_229_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_239_F"))
		i17 =  (i17 + 1)
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_240_F"))
		i18 =  ((__xasm<int>(push((i15+136)), op(0x37))))
		__asm(push(i18<=i17), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_228_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_241_F"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_237_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_242_F"))
		i11 =  (i11 + 1)
		__asm(push(i11==i12), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_244_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_243_F"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_207_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_244_F"))
		i0 =  (0)
		__asm(push(i0), push(i13), op(0x3c))
		i0 =  (1)
		i23 =  (i23 + -1)
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_245_F"))
		i11 = i0
		i0 = i10
		i10 =  (i0 * 144)
		i10 =  (i1 + i10)
		i12 =  (i0 + 1)
		i0 = i10
		i10 = i12
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_246_F"))
		__asm(push(i10<i16), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_200_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_247_F"))
		i0 = i11
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_248_F"))
		i5 =  (i5 + 144)
		i4 =  (i4 + 1)
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_249_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_249_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_249_F")); 
		__asm(push(i4<i16), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_197_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_250_F"))
		i0 =  (i0 & 255)
		__asm(push(i0==0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_252_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_251_F"))
		i0 =  (0)
		i6 = i0
		i5 = i0
		i4 = i0
		i0 = i6
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_249_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_252_F"))
		f0 =  (-3.40282e+38)
		f1 =  (3.40282e+38)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		i0 =  (0)
		i23 =  (-1)
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_264_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_253_B"), label)
		i23 =  (i0 * 144)
		i23 =  (i1 + i23)
		f1 = f0
		f0 = f2
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_254_F"))
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_254_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_254_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_254_F")); 
		i5 = i0
		i0 = i4
		f2 = f0
		f0 =  ((__xasm<Number>(push((i23+4)), op(0x38))))
		i4 = i23
		f3 =  f2/*fextend*/
		f4 =  f0/*fextend*/
		__asm(push(f4>=f3), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_258_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_255_F"))
		i6 =  ((__xasm<int>(push((i23+136)), op(0x37))))
		__asm(push(i6<2), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_258_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_256_F"))
		f1 =  ((__xasm<Number>(push(i4), op(0x38))))
		i0 =  (i23 + 144)
		i4 =  (i5 + 1)
		__asm(push(i4>=i16), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_266_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_257_F"))
		i23 = i0
		i0 = i4
		i4 = i5
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_254_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_258_F"))
		f3 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		__asm(push(f0==f3), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_260_F"))
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_259_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_259_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_259_F")); 
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_263_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_260_F"))
		i23 =  (i5 * 144)
		i23 =  (i3 + i23)
		f0 =  ((__xasm<Number>(push(i23), op(0x38))))
		f3 =  f1/*fextend*/
		f4 =  f0/*fextend*/
		__asm(push(f4<=f3), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_259_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_261_F"))
		i23 =  (i5 * 144)
		i23 =  (i3 + i23)
		i23 =  ((__xasm<int>(push((i23+136)), op(0x37))))
		__asm(push(i23<2), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_259_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_262_F"))
		i0 = i5
		f1 = f0
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_263_F"))
		f0 = f1
		i4 =  (i5 + 1)
		i23 = i0
		f1 = f2
		i0 = i4
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_264_F"))
		i4 = i23
		f2 = f1
		__asm(push(i0<i16), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_253_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_265_F"))
		i0 = i4
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_267_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_266_F"))
		i0 =  (i4 + -1)
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_267_F"))
		mstate.esp -= 4
		i1 =  (i16 << 5)
		__asm(push(i1), push(mstate.esp), op(0x3c))
		state = 41
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state41"))
		i1 = mstate.eax
		mstate.esp += 4
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_268_F"))
		i23 =  (i0 * 144)
		i23 =  (i3 + i23)
		i4 =  ((__xasm<int>(push((i23+136)), op(0x37))))
		i5 =  (i16 << 2)
		i6 = i1
		i7 = i1
		__asm(push(i4>0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_271_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_269_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str173)
		i23 =  (__ZZ9TraceEdgeP9b2PolygonE8__func__)
		i3 =  (__2E_str22229)
		i5 =  (1407)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i23), push((mstate.esp+12)), op(0x3c))
		__asm(push(i3), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 42
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state42"))
		mstate.esp += 24
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_270_F"))
		state = 43
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state43"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_271_F"))
		f0 =  (-1)
		i0 =  (i0 * 144)
		f0 =  f0/*fround*/
		f1 =  (-0)
		i0 =  (i3 + i0)
		f1 =  f1/*fround*/
		f2 =  ((__xasm<Number>(push(i0), op(0x38))))
		f0 =  f0/*fextend*/
		f3 =  ((__xasm<Number>(push((i0+4)), op(0x38))))
		f1 =  f1/*fextend*/
		f0 =  (f2 + f0)
		f1 =  (f3 + f1)
		f0 =  f0/*fround*/
		__asm(push(f0), push((mstate.ebp+-288)), op(0x3d))
		f0 =  f1/*fround*/
		__asm(push(f0), push((mstate.ebp+-284)), op(0x3d))
		i3 =  (0)
		__asm(push(i3), push((mstate.ebp+-152)), op(0x3c))
		__asm(push(i3), push((mstate.ebp+-148)), op(0x3a))
		mstate.esp -= 8
		i3 =  ((mstate.ebp+-288))
		__asm(push(i23), push(mstate.esp), op(0x3c))
		__asm(push(i3), push((mstate.esp+4)), op(0x3c))
		state = 44
		mstate.esp -= 4;FSM__ZN10b2PolyNode21GetRightestConnectionEPS_.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state44"))
		i3 = mstate.eax
		mstate.esp += 8
		i4 =  (i0 + 4)
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_272_F"))
		__asm(push(i3!=0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_275_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_273_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str171)
		i23 =  (__ZZN10b2PolyNode21GetRightestConnectionEPS_E8__func__)
		i3 =  (__2E_str22229)
		i4 =  (1569)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i23), push((mstate.esp+12)), op(0x3c))
		__asm(push(i3), push((mstate.esp+16)), op(0x3c))
		__asm(push(i4), push((mstate.esp+20)), op(0x3c))
		state = 45
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state45"))
		mstate.esp += 24
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_274_F"))
		state = 46
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state46"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_275_F"))
		f0 =  ((__xasm<Number>(push(i0), op(0x38))))
		f1 =  ((__xasm<Number>(push(i4), op(0x38))))
		__asm(push(f0), push(i1), op(0x3d))
		__asm(push(f1), push((i7+4)), op(0x3d))
		__asm(push(i3==i23), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_625_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_276_F"))
		i0 =  (0)
		i4 = i6
		i7 = i23
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_277_F"))
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_277_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_277_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_277_F")); 
		i8 = i3
		i3 = i7
		i7 =  (i0 + 1)
		__asm(push(i5>=i7), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_280_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_278_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str46253)
		i3 =  (__ZZ9TraceEdgeP9b2PolygonE8__func__)
		i4 =  (__2E_str22229)
		i23 =  (1431)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i23), push((mstate.esp+20)), op(0x3c))
		state = 47
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state47"))
		mstate.esp += 24
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_279_F"))
		state = 48
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state48"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_280_F"))
		f0 =  ((__xasm<Number>(push(i8), op(0x38))))
		f1 =  ((__xasm<Number>(push((i8+4)), op(0x38))))
		__asm(push(f0), push((i4+8)), op(0x3d))
		__asm(push(f1), push((i4+12)), op(0x3d))
		mstate.esp -= 8
		__asm(push(i8), push(mstate.esp), op(0x3c))
		__asm(push(i3), push((mstate.esp+4)), op(0x3c))
		state = 49
		mstate.esp -= 4;FSM__ZN10b2PolyNode21GetRightestConnectionEPS_.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state49"))
		i3 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_281_F"))
		i4 =  (i4 + 8)
		i0 =  (i0 + 1)
		__asm(push(i3==0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_284_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_282_F"))
		__asm(push(i3==i23), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_284_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_283_F"))
		i7 = i8
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_277_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_284_F"))
		i0 =  (i0 + 1)
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_285_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_285_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_285_F")); 
		mstate.esp -= 4
		i23 =  (i0 << 2)
		__asm(push(i23), push(mstate.esp), op(0x3c))
		state = 50
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state50"))
		i3 = mstate.eax
		mstate.esp += 4
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_286_F"))
		mstate.esp -= 4
		__asm(push(i23), push(mstate.esp), op(0x3c))
		state = 51
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state51"))
		i4 = mstate.eax
		mstate.esp += 4
		i5 = i3
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_287_F"))
		i7 = i4
		__asm(push(i0<1), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_291_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_288_F"))
		i8 =  (0)
		i9 = i8
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_289_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_289_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_289_F")); 
		f0 =  ((__xasm<Number>(push(i6), op(0x38))))
		i10 =  (i5 + i9)
		__asm(push(f0), push(i10), op(0x3d))
		f0 =  ((__xasm<Number>(push((i6+4)), op(0x38))))
		i10 =  (i7 + i9)
		__asm(push(f0), push(i10), op(0x3d))
		i6 =  (i6 + 8)
		i9 =  (i9 + 4)
		i8 =  (i8 + 1)
		__asm(push(i8==i0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_291_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_290_F"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_289_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_291_F"))
		mstate.esp -= 4
		__asm(push(i23), push(mstate.esp), op(0x3c))
		state = 52
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state52"))
		i6 = mstate.eax
		mstate.esp += 4
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_292_F"))
		mstate.esp -= 4
		__asm(push(i23), push(mstate.esp), op(0x3c))
		state = 53
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state53"))
		i8 = mstate.eax
		mstate.esp += 4
		i9 = i6
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_293_F"))
		i10 = i8
		__asm(push(i0<1), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_297_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_294_F"))
		i11 =  (0)
		i12 = i11
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_295_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_295_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_295_F")); 
		i13 =  (i5 + i12)
		f0 =  ((__xasm<Number>(push(i13), op(0x38))))
		i13 =  (i9 + i12)
		__asm(push(f0), push(i13), op(0x3d))
		i13 =  (i7 + i12)
		f0 =  ((__xasm<Number>(push(i13), op(0x38))))
		i13 =  (i10 + i12)
		__asm(push(f0), push(i13), op(0x3d))
		i12 =  (i12 + 4)
		i11 =  (i11 + 1)
		__asm(push(i0<=i11), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_297_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_296_F"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_295_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_297_F"))
		__asm(push(i1==0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_299_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_298_F"))
		i0 =  (0)
		mstate.esp -= 8
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 54
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state54"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_299_F"))
		__asm(push(i4==0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_301_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_300_F"))
		i0 =  (0)
		mstate.esp -= 8
		__asm(push(i4), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 55
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state55"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_301_F"))
		__asm(push(i3==0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_303_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_302_F"))
		i0 =  (0)
		mstate.esp -= 8
		__asm(push(i3), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 56
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state56"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_303_F"))
		i0 =  ((__xasm<int>(push((mstate.ebp+-2340)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_305_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_304_F"))
		i0 =  (0)
		mstate.esp -= 8
		i1 =  ((__xasm<int>(push((mstate.ebp+-2340)), op(0x37))))
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 57
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state57"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_305_F"))
		mstate.esp -= 4
		__asm(push(i23), push(mstate.esp), op(0x3c))
		state = 58
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state58"))
		i0 = mstate.eax
		mstate.esp += 4
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_306_F"))
		mstate.esp -= 4
		__asm(push(i23), push(mstate.esp), op(0x3c))
		state = 59
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state59"))
		i1 = mstate.eax
		mstate.esp += 4
		i3 = i0
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_307_F"))
		i4 = i6
		i5 = i23
		memcpy(i0, i4, i5)
		i0 = i1
		i4 = i8
		memcpy(i0, i4, i23)
		i0 = i1
		__asm(push(i6==0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_309_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_308_F"))
		i1 =  (0)
		mstate.esp -= 8
		__asm(push(i6), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 60
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state60"))
		i1 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_309_F"))
		__asm(push(i8!=0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_311_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_310_F"))
		i23 = i3
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_312_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_311_F"))
		i1 =  (0)
		mstate.esp -= 8
		__asm(push(i8), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 61
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state61"))
		i1 = mstate.eax
		mstate.esp += 8
		i23 = i3
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_312_F"))
		i1 = i23
		__asm(push(i1==0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_314_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_313_F"))
		i3 =  (0)
		mstate.esp -= 8
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i3), push((mstate.esp+4)), op(0x3c))
		state = 62
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state62"))
		i1 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_314_F"))
		__asm(push(i0==0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_316_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_315_F"))
		i1 =  (0)
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 63
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state63"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_316_F"))
		__asm(push(i2>2), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_318_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_317_F"))
		i2 =  (0)
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_573_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_318_F"))
		i0 =  (i2 + -2)
		i1 =  (i0 << 3)
		mstate.esp -= 4
		i1 =  (i1 | 4)
		__asm(push(i1), push(mstate.esp), op(0x3c))
		state = 64
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state64"))
		i1 = mstate.eax
		mstate.esp += 4
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_319_F"))
		__asm(push(i0), push(i1), op(0x3c))
		i0 =  (i1 + 4)
		__asm(push(i0), push((mstate.ebp+-2421)), op(0x3c))
		i0 = i1
		__asm(push(i0), push((mstate.ebp+-2412)), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+-2421)), op(0x37))))
		i3 = i0
		__asm(push(i2==2), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_325_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_320_F"))
		i4 =  (0)
		i5 =  (i2 + -3)
		i6 = i0
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_323_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_321_B"), label)
		__asm(push(i4), push((i7+4)), op(0x3c))
		i4 =  (i7 + 8)
		i7 =  (i6 + 1)
		__asm(push(i5==i6), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_325_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_322_F"))
		i6 = i4
		i4 = i7
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_323_F"))
		i7 = i6
		i6 = i4
		i4 =  (12)
		mstate.esp -= 4
		__asm(push(i4), push(mstate.esp), op(0x3c))
		state = 65
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state65"))
		i4 = mstate.eax
		mstate.esp += 4
		i8 = i7
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_324_F"))
		i9 =  (12)
		__asm(push(i4), push(i8), op(0x3c))
		mstate.esp -= 4
		__asm(push(i9), push(mstate.esp), op(0x3c))
		state = 66
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state66"))
		i4 = mstate.eax
		mstate.esp += 4
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_321_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_325_F"))
		f0 =  (0)
		i4 =  (i2 + -1)
		i5 =  (i4 << 2)
		i6 =  ((__xasm<int>(push((mstate.ebp+-2322)), op(0x37))))
		i6 =  (i6 + i5)
		i7 =  ((__xasm<int>(push((mstate.ebp+-2313)), op(0x37))))
		i5 =  (i7 + i5)
		f1 =  ((__xasm<Number>(push(i5), op(0x38))))
		i5 =  ((__xasm<int>(push((mstate.ebp+-2322)), op(0x37))))
		f2 =  ((__xasm<Number>(push(i5), op(0x38))))
		f3 =  ((__xasm<Number>(push(i7), op(0x38))))
		f4 =  ((__xasm<Number>(push(i6), op(0x38))))
		f1 =  (f1 * f2)
		f2 =  (f3 * f4)
		f1 =  f1/*fround*/
		f2 =  f2/*fround*/
		f2 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		f1 =  (f1 - f2)
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  (f1 + f0)
		f0 =  f0/*fround*/
		__asm(push(i4>0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_327_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_326_F"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_330_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_327_F"))
		i5 =  (0)
		i6 = i5
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_328_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_328_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_328_F")); 
		i7 =  ((__xasm<int>(push((mstate.ebp+-2403)), op(0x37))))
		i7 =  (i7 + i6)
		i8 =  ((__xasm<int>(push((mstate.ebp+-2394)), op(0x37))))
		i8 =  (i8 + i6)
		f1 =  ((__xasm<Number>(push(i8), op(0x38))))
		f2 =  ((__xasm<Number>(push((i7+4)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i8+4)), op(0x38))))
		f4 =  ((__xasm<Number>(push(i7), op(0x38))))
		f1 =  (f1 * f2)
		f2 =  (f3 * f4)
		f1 =  f1/*fround*/
		f2 =  f2/*fround*/
		f2 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		f1 =  (f1 - f2)
		f1 =  f1/*fround*/
		f1 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 + f1)
		f0 =  f0/*fround*/
		i6 =  (i6 + 4)
		i5 =  (i5 + 1)
		__asm(push(i4>i5), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_626_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_329_F"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_330_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_330_F"))
		f1 =  (0.5)
		f1 =  f1/*fround*/
		f1 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 * f1)
		f1 =  (0)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f1 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		__asm(push(f0<=f1), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_353_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_331_F"))
		__asm(push(i2!=0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_333_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_332_F"))
		i2 =  (0)
		i4 = i2
		i5 = i2
		i6 = i2
		i2 = i4
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_335_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_333_F"))
		mstate.esp -= 4
		i5 =  ((__xasm<int>(push((mstate.ebp+-2331)), op(0x37))))
		__asm(push(i5), push(mstate.esp), op(0x3c))
		state = 67
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state67"))
		i5 = mstate.eax
		mstate.esp += 4
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_334_F"))
		mstate.esp -= 4
		i6 =  ((__xasm<int>(push((mstate.ebp+-2331)), op(0x37))))
		__asm(push(i6), push(mstate.esp), op(0x3c))
		state = 68
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state68"))
		i6 = mstate.eax
		mstate.esp += 4
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_335_F"))
		i4 = i5
		i5 = i6
		i6 = i5
		i7 = i4
		__asm(push(i2<1), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_339_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_336_F"))
		i8 =  (0)
		i9 = i8
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_337_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_337_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_337_F")); 
		i10 =  ((__xasm<int>(push((mstate.ebp+-2394)), op(0x37))))
		i10 =  (i10 + i9)
		f0 =  ((__xasm<Number>(push(i10), op(0x38))))
		i10 =  (i7 + i9)
		__asm(push(f0), push(i10), op(0x3d))
		i10 =  ((__xasm<int>(push((mstate.ebp+-2403)), op(0x37))))
		i10 =  (i10 + i9)
		f0 =  ((__xasm<Number>(push(i10), op(0x38))))
		i10 =  (i6 + i9)
		__asm(push(f0), push(i10), op(0x3d))
		i9 =  (i9 + 4)
		i8 =  (i8 + 1)
		__asm(push(i2<=i8), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_339_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_338_F"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_337_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_339_F"))
		__asm(push(i2==1), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_344_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_340_F"))
		i8 =  (i2 + -1)
		__asm(push(i8<1), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_344_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_341_F"))
		i9 =  (0)
		i10 =  (i2 << 2)
		i10 =  (i10 + -4)
		i11 = i9
		i12 = i9
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_342_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_342_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_342_F")); 
		i13 =  (i7 + i10)
		i14 =  (i7 + i11)
		f0 =  ((__xasm<Number>(push(i14), op(0x38))))
		f1 =  ((__xasm<Number>(push(i13), op(0x38))))
		__asm(push(f1), push(i14), op(0x3d))
		__asm(push(f0), push(i13), op(0x3d))
		i13 =  (i6 + i10)
		i14 =  (i6 + i11)
		f0 =  ((__xasm<Number>(push(i14), op(0x38))))
		f1 =  ((__xasm<Number>(push(i13), op(0x38))))
		__asm(push(f1), push(i14), op(0x3d))
		__asm(push(f0), push(i13), op(0x3d))
		i10 =  (i10 + -4)
		i11 =  (i11 + 4)
		i12 =  (i12 + 1)
		i13 =  (i9 + 1)
		i9 =  (i8 - i9)
		i9 =  (i9 + -1)
		__asm(push(i12>=i9), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_344_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_343_F"))
		i9 = i13
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_342_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_344_F"))
		mstate.esp -= 16
		__asm(push(i4), push(mstate.esp), op(0x3c))
		__asm(push(i5), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		state = 69
		mstate.esp -= 4;FSM__Z18TriangulatePolygonPfS_iP10b2Triangle.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state69"))
		i2 = mstate.eax
		mstate.esp += 16
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_345_F"))
		__asm(push(i4==0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_347_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_346_F"))
		i6 =  (0)
		mstate.esp -= 8
		__asm(push(i4), push(mstate.esp), op(0x3c))
		__asm(push(i6), push((mstate.esp+4)), op(0x3c))
		state = 70
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state70"))
		i4 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_347_F"))
		__asm(push(i5!=0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_349_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_348_F"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_354_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_349_F"))
		i4 =  (0)
		mstate.esp -= 8
		__asm(push(i5), push(mstate.esp), op(0x3c))
		__asm(push(i4), push((mstate.esp+4)), op(0x3c))
		state = 71
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state71"))
		i4 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_350_F"))
		__asm(push(i2<1), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_352_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_351_F"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_355_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_352_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_352_F")); 
		i2 =  (-1)
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_573_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_353_F"))
		mstate.esp -= 16
		i4 =  ((__xasm<int>(push((mstate.ebp+-2313)), op(0x37))))
		__asm(push(i4), push(mstate.esp), op(0x3c))
		i4 =  ((__xasm<int>(push((mstate.ebp+-2322)), op(0x37))))
		__asm(push(i4), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		state = 72
		mstate.esp -= 4;FSM__Z18TriangulatePolygonPfS_iP10b2Triangle.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state72"))
		i2 = mstate.eax
		mstate.esp += 16
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_354_F"))
		__asm(push(i2<1), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_352_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_355_F"))
		__asm(push(i2>0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_357_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_356_F"))
		i2 =  (0)
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_559_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_357_F"))
		mstate.esp -= 4
		i4 =  (i2 << 2)
		__asm(push(i4), push(mstate.esp), op(0x3c))
		state = 73
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state73"))
		i4 = mstate.eax
		__asm(push(i4), push((mstate.ebp+-2430)), op(0x3c))
		mstate.esp += 4
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_358_F"))
		i4 =  ((__xasm<int>(push((mstate.ebp+-2430)), op(0x37))))
		i5 = i4
		__asm(push(i2<1), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_552_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_359_F"))
		i6 =  (0)
		i7 = i4
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_360_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_360_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_360_F")); 
		i8 =  (0)
		__asm(push(i8), push(i7), op(0x3c))
		i8 =  ((__xasm<int>(push(i0), op(0x37))))
		f0 =  ((__xasm<Number>(push(i8), op(0x38))))
		f1 =  ((__xasm<Number>(push((i8+4)), op(0x38))))
		i9 = i7
		f2 =  f1/*fextend*/
		f3 =  f0/*fextend*/
		__asm(push(f3!=f2), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_362_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_361_F"))
		i10 =  ((__xasm<int>(push((i0+4)), op(0x37))))
		f2 =  ((__xasm<Number>(push(i10), op(0x38))))
		f3 =  ((__xasm<Number>(push((i10+4)), op(0x38))))
		__asm(push(f2==f3), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_366_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_362_F"))
		f2 =  ((__xasm<Number>(push((i8+8)), op(0x38))))
		f3 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		__asm(push(f1!=f3), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_364_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_363_F"))
		i8 =  ((__xasm<int>(push((i0+4)), op(0x37))))
		f1 =  ((__xasm<Number>(push((i8+4)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i8+8)), op(0x38))))
		__asm(push(f1==f3), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_366_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_364_F"))
		f1 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		__asm(push(f0!=f1), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_367_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_365_F"))
		i8 =  ((__xasm<int>(push((i0+4)), op(0x37))))
		f0 =  ((__xasm<Number>(push(i8), op(0x38))))
		f1 =  ((__xasm<Number>(push((i8+8)), op(0x38))))
		__asm(push(f0!=f1), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_367_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_366_F"))
		i8 =  (1)
		__asm(push(i8), push(i9), op(0x3c))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_367_F"))
		i0 =  (i0 + 8)
		i7 =  (i7 + 4)
		i6 =  (i6 + 1)
		__asm(push(i6==i2), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_552_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_368_F"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_360_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_369_B"), label)
		i10 =  ((__xasm<int>(push(i10), op(0x37))))
		__asm(push(i10!=0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_371_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_370_F"))
		i8 = i9
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_374_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_371_F"))
		i8 =  (i8 + 4)
		i9 =  (i9 + 1)
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_372_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_372_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_372_F")); 
		i10 = i8
		__asm(push(i9<i2), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_369_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_373_F"))
		i8 =  (-1)
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_374_F"))
		__asm(push(i8!=-1), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_376_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_375_F"))
		i8 =  (1)
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_553_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_376_F"))
		i9 =  (12)
		mstate.esp -= 4
		__asm(push(i9), push(mstate.esp), op(0x3c))
		state = 74
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state74"))
		i9 = mstate.eax
		mstate.esp += 4
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_377_F"))
		i10 =  (12)
		mstate.esp -= 4
		__asm(push(i10), push(mstate.esp), op(0x3c))
		state = 75
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state75"))
		i10 = mstate.eax
		mstate.esp += 4
		i11 = i9
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_378_F"))
		i12 =  (0)
		i13 =  (i8 << 3)
		i13 =  (i3 + i13)
		i14 =  (i13 + 4)
		i15 = i10
		i16 = i12
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_379_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_379_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_379_F")); 
		i17 =  ((__xasm<int>(push(i13), op(0x37))))
		i17 =  (i17 + i16)
		f0 =  ((__xasm<Number>(push(i17), op(0x38))))
		i17 =  (i11 + i16)
		__asm(push(f0), push(i17), op(0x3d))
		i17 =  ((__xasm<int>(push(i14), op(0x37))))
		i17 =  (i17 + i16)
		f0 =  ((__xasm<Number>(push(i17), op(0x38))))
		i17 =  (i15 + i16)
		__asm(push(f0), push(i17), op(0x3d))
		i16 =  (i16 + 4)
		i12 =  (i12 + 1)
		__asm(push(i12>2), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_381_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_380_F"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_379_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_381_F"))
		i11 =  (1)
		i8 =  (i8 << 2)
		i8 =  (i5 + i8)
		__asm(push(i11), push(i8), op(0x3c))
		__asm(push(i0>0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_383_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_382_F"))
		i8 =  (3)
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_485_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_383_F"))
		i8 =  (3)
		i11 =  (0)
		i12 = i11
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_384_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_384_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_384_F")); 
		i13 = i10
		i14 = i9
		__asm(push(i11<i2), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_627_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_385_F"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_386_F"))
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_386_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_386_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_386_F")); 
		i11 =  (i11 - i2)
		__asm(push(i11<i2), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_628_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_387_F"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_386_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_388_B"), label)
		__asm(push(i8>0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_390_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_389_F"))
		i16 =  (-1)
		i17 = i16
		i18 = i16
		i19 = i16
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_409_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_390_F"))
		i16 =  (-1)
		i17 =  (i11 << 3)
		i17 =  (i3 + i17)
		i18 =  ((__xasm<int>(push(i17), op(0x37))))
		f0 =  ((__xasm<Number>(push(i18), op(0x38))))
		i19 =  (0)
		i20 =  (i18 + 8)
		i18 =  (i18 + 4)
		i17 =  (i17 + 4)
		i21 = i19
		i22 = i16
		i23 = i16
		i24 = i16
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_391_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_391_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_391_F")); 
		i25 =  (i14 + i21)
		f1 =  ((__xasm<Number>(push(i25), op(0x38))))
		f2 =  f1/*fextend*/
		f3 =  f0/*fextend*/
		__asm(push(f3!=f2), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_396_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_392_F"))
		i25 =  ((__xasm<int>(push(i17), op(0x37))))
		i26 =  (i13 + i21)
		f2 =  ((__xasm<Number>(push(i25), op(0x38))))
		f3 =  ((__xasm<Number>(push(i26), op(0x38))))
		__asm(push(f2!=f3), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_396_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_393_F"))
		__asm(push(i16==-1), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_395_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_394_F"))
		i22 =  (0)
		i23 = i19
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_407_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_395_F"))
		i16 =  (0)
		i24 = i16
		i16 = i19
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_407_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_396_F"))
		f2 =  ((__xasm<Number>(push(i18), op(0x38))))
		f3 =  f1/*fextend*/
		__asm(push(f2!=f3), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_401_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_397_F"))
		i25 =  ((__xasm<int>(push(i17), op(0x37))))
		i26 =  (i13 + i21)
		f2 =  ((__xasm<Number>(push((i25+4)), op(0x38))))
		f3 =  ((__xasm<Number>(push(i26), op(0x38))))
		__asm(push(f2!=f3), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_401_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_398_F"))
		__asm(push(i16!=-1), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_400_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_399_F"))
		i16 =  (1)
		i24 = i16
		i16 = i19
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_407_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_400_F"))
		i22 =  (1)
		i23 = i19
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_407_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_401_F"))
		f2 =  ((__xasm<Number>(push(i20), op(0x38))))
		f1 =  f1/*fextend*/
		__asm(push(f2==f1), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_403_F"))
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_402_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_402_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_402_F")); 
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_407_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_403_F"))
		i25 =  ((__xasm<int>(push(i17), op(0x37))))
		i26 =  (i13 + i21)
		f1 =  ((__xasm<Number>(push((i25+8)), op(0x38))))
		f2 =  ((__xasm<Number>(push(i26), op(0x38))))
		__asm(push(f1!=f2), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_402_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_404_F"))
		__asm(push(i16!=-1), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_406_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_405_F"))
		i16 =  (2)
		i24 = i16
		i16 = i19
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_407_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_406_F"))
		i22 =  (2)
		i23 = i19
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_407_F"))
		i21 =  (i21 + 4)
		i19 =  (i19 + 1)
		__asm(push(i8>i19), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_630_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_408_F"))
		i17 = i22
		i18 = i23
		i19 = i24
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_409_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_409_F"))
		__asm(push(i16==0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_411_F"))
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_410_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_410_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_410_F")); 
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_413_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_411_F"))
		i20 =  (i8 + -1)
		__asm(push(i20!=i18), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_410_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_412_F"))
		i16 =  (0)
		i18 = i16
		i16 = i20
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_413_F"))
		__asm(push(i18!=-1), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_415_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_414_F"))
		i13 =  (0)
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_436_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_415_F"))
		i18 =  ((i19==0) ? 1 : 0)
		i20 =  ((i17==0) ? 1 : 0)
		i18 =  (i18 | i20)
		i18 =  (i18 & 1)
		i20 =  (i8 << 2)
		mstate.esp -= 4
		i20 =  (i20 + 4)
		i19 =  ((i18==i19) ? 1 : 0)
		i17 =  ((i18==i17) ? 1 : 0)
		__asm(push(i20), push(mstate.esp), op(0x3c))
		i17 =  (i19 | i17)
		i17 =  (i17 & 1)
		state = 76
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state76"))
		i19 = mstate.eax
		mstate.esp += 4
		i17 =  ((i17!=0) ? 2 : i18)
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_416_F"))
		mstate.esp -= 4
		__asm(push(i20), push(mstate.esp), op(0x3c))
		state = 77
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state77"))
		i18 = mstate.eax
		mstate.esp += 4
		i20 = i19
		i21 = i19
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_417_F"))
		i22 = i18
		i23 = i18
		__asm(push(i8<1), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_424_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_418_F"))
		i24 =  (0)
		i25 =  (i11 << 3)
		i25 =  (i3 + i25)
		i26 =  (i25 + 4)
		i27 = i24
		i28 = i24
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_419_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_419_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_419_F")); 
		i29 =  (i24 << 2)
		i30 =  (i14 + i27)
		f0 =  ((__xasm<Number>(push(i30), op(0x38))))
		i30 =  (i21 + i29)
		__asm(push(f0), push(i30), op(0x3d))
		i30 =  (i13 + i27)
		f0 =  ((__xasm<Number>(push(i30), op(0x38))))
		i29 =  (i23 + i29)
		__asm(push(f0), push(i29), op(0x3d))
		__asm(push(i28==i16), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_421_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_420_F"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_422_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_421_F"))
		i29 =  ((__xasm<int>(push(i25), op(0x37))))
		i30 =  (i17 << 2)
		i24 =  (i24 + 1)
		i29 =  (i29 + i30)
		f0 =  ((__xasm<Number>(push(i29), op(0x38))))
		i29 =  (i24 << 2)
		i31 =  (i21 + i29)
		__asm(push(f0), push(i31), op(0x3d))
		i31 =  ((__xasm<int>(push(i26), op(0x37))))
		i30 =  (i31 + i30)
		f0 =  ((__xasm<Number>(push(i30), op(0x38))))
		i29 =  (i23 + i29)
		__asm(push(f0), push(i29), op(0x3d))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_422_F"))
		i27 =  (i27 + 4)
		i28 =  (i28 + 1)
		i24 =  (i24 + 1)
		__asm(push(i8<=i28), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_424_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_423_F"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_419_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_424_F"))
		i13 =  (20)
		mstate.esp -= 4
		__asm(push(i13), push(mstate.esp), op(0x3c))
		state = 78
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state78"))
		i13 = mstate.eax
		mstate.esp += 4
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_425_F"))
		i14 =  (i8 + 1)
		__asm(push(i14), push((i13+8)), op(0x3c))
		mstate.esp -= 4
		i14 =  (i14 << 2)
		__asm(push(i14), push(mstate.esp), op(0x3c))
		state = 79
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state79"))
		i14 = mstate.eax
		mstate.esp += 4
		i16 =  (i13 + 8)
		i17 = i13
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_426_F"))
		__asm(push(i14), push(i13), op(0x3c))
		i14 =  ((__xasm<int>(push(i16), op(0x37))))
		mstate.esp -= 4
		i14 =  (i14 << 2)
		__asm(push(i14), push(mstate.esp), op(0x3c))
		state = 80
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state80"))
		i14 = mstate.eax
		mstate.esp += 4
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_427_F"))
		__asm(push(i14), push((i17+4)), op(0x3c))
		i14 =  ((__xasm<int>(push(i16), op(0x37))))
		i21 =  (i17 + 4)
		__asm(push(i14<1), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_431_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_428_F"))
		i14 =  (0)
		i23 = i14
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_429_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_429_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_429_F")); 
		i24 =  (i20 + i23)
		i25 =  ((__xasm<int>(push(i13), op(0x37))))
		f0 =  ((__xasm<Number>(push(i24), op(0x38))))
		i24 =  (i25 + i23)
		__asm(push(f0), push(i24), op(0x3d))
		i24 =  (i22 + i23)
		i25 =  ((__xasm<int>(push(i21), op(0x37))))
		f0 =  ((__xasm<Number>(push(i24), op(0x38))))
		i24 =  (i25 + i23)
		__asm(push(f0), push(i24), op(0x3d))
		i24 =  ((__xasm<int>(push(i16), op(0x37))))
		i23 =  (i23 + 4)
		i14 =  (i14 + 1)
		__asm(push(i24<=i14), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_431_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_430_F"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_429_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_431_F"))
		i13 =  (0)
		__asm(push(i13), push((i17+16)), op(0x3a))
		__asm(push(i19==0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_433_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_432_F"))
		i13 =  (0)
		mstate.esp -= 8
		__asm(push(i19), push(mstate.esp), op(0x3c))
		__asm(push(i13), push((mstate.esp+4)), op(0x3c))
		state = 81
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state81"))
		i13 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_433_F"))
		__asm(push(i18!=0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_435_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_434_F"))
		i13 = i17
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_436_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_435_F"))
		i13 =  (0)
		mstate.esp -= 8
		__asm(push(i18), push(mstate.esp), op(0x3c))
		__asm(push(i13), push((mstate.esp+4)), op(0x3c))
		state = 82
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state82"))
		i13 = mstate.eax
		mstate.esp += 8
		i13 = i17
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_436_F"))
		__asm(push(i13==0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_629_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_437_F"))
		i14 =  ((__xasm<int>(push((i13+8)), op(0x37))))
		__asm(push(i14>8), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_441_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_438_F"))
		i16 =  (0)
		i17 =  (i14 + -1)
		i18 =  (i13 + 4)
		i19 = i16
		i20 = i13
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_440_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_439_B"), label)
		i16 =  (i16 + 1)
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_440_F"))
		i21 = i19
		i19 =  (i16 << 2)
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_452_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_441_F"))
		__asm(push(i13==0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_629_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_442_F"))
		i16 =  ((__xasm<int>(push(i13), op(0x37))))
		__asm(push(i16==0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_444_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_443_F"))
		i19 =  (0)
		mstate.esp -= 8
		__asm(push(i16), push(mstate.esp), op(0x3c))
		__asm(push(i19), push((mstate.esp+4)), op(0x3c))
		state = 83
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state83"))
		i16 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_444_F"))
		i16 =  ((__xasm<int>(push((i13+4)), op(0x37))))
		i19 = i13
		__asm(push(i16==0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_448_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_445_F"))
		i14 =  (0)
		mstate.esp -= 8
		__asm(push(i16), push(mstate.esp), op(0x3c))
		__asm(push(i14), push((mstate.esp+4)), op(0x3c))
		state = 84
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state84"))
		i16 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_446_F"))
		__asm(push(i13==0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_629_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_447_F"))
		i16 =  (0)
		mstate.esp -= 8
		__asm(push(i19), push(mstate.esp), op(0x3c))
		__asm(push(i16), push((mstate.esp+4)), op(0x3c))
		state = 85
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state85"))
		i19 = mstate.eax
		mstate.esp += 8
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_483_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_448_F"))
		__asm(push(i13==0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_629_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_449_F"))
		i16 =  (0)
		mstate.esp -= 8
		__asm(push(i19), push(mstate.esp), op(0x3c))
		__asm(push(i16), push((mstate.esp+4)), op(0x3c))
		state = 86
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state86"))
		i16 = mstate.eax
		mstate.esp += 8
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_483_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_450_B"), label)
		i23 =  (i23 + 4)
		i16 =  (i16 + 1)
		i19 =  (i19 & 255)
		i24 =  (i21 & 255)
		__asm(push(i24!=i19), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_476_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_451_F"))
		i19 = i23
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_452_F"))
		i23 = i19
		__asm(push(i14<=i16), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_454_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_453_F"))
		f0 =  (0)
		i19 =  ((i16==0) ? i14 : i16)
		i22 =  (i16 + 1)
		i24 =  ((i17==i16) ? 0 : i22)
		i19 =  (i19 + -1)
		i22 =  ((__xasm<int>(push(i20), op(0x37))))
		i24 =  (i24 << 2)
		i25 =  ((__xasm<int>(push(i18), op(0x37))))
		i19 =  (i19 << 2)
		i26 =  (i25 + i24)
		i24 =  (i22 + i24)
		i27 =  (i25 + i19)
		i25 =  (i25 + i23)
		i19 =  (i22 + i19)
		i28 =  (i22 + i23)
		f1 =  ((__xasm<Number>(push(i28), op(0x38))))
		f2 =  ((__xasm<Number>(push(i19), op(0x38))))
		f3 =  ((__xasm<Number>(push(i24), op(0x38))))
		f4 =  ((__xasm<Number>(push(i25), op(0x38))))
		f5 =  ((__xasm<Number>(push(i27), op(0x38))))
		f6 =  ((__xasm<Number>(push(i26), op(0x38))))
		f2 =  (f1 - f2)
		f5 =  (f4 - f5)
		f1 =  (f3 - f1)
		f3 =  (f6 - f4)
		f2 =  f2/*fround*/
		f4 =  f5/*fround*/
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		f3 =  f3/*fextend*/
		f2 =  f2/*fextend*/
		f4 =  f4/*fextend*/
		f1 =  f1/*fextend*/
		f2 =  (f2 * f3)
		f1 =  (f1 * f4)
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		f1 =  f1/*fextend*/
		f2 =  f2/*fextend*/
		f1 =  (f2 - f1)
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		i19 =  ((f1>=f0) ? 1 : 0)
		i19 =  (i19 & 1)
		__asm(push(i16==0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_439_B"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_450_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_454_F"))
		__asm(push(i8!=i14), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_456_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_455_F"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_463_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_456_F"))
		__asm(push(i9==0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_458_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_457_F"))
		i8 =  (0)
		mstate.esp -= 8
		__asm(push(i9), push(mstate.esp), op(0x3c))
		__asm(push(i8), push((mstate.esp+4)), op(0x3c))
		state = 87
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state87"))
		i8 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_458_F"))
		__asm(push(i10==0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_460_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_459_F"))
		i8 =  (0)
		mstate.esp -= 8
		__asm(push(i10), push(mstate.esp), op(0x3c))
		__asm(push(i8), push((mstate.esp+4)), op(0x3c))
		state = 88
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state88"))
		i8 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_460_F"))
		mstate.esp -= 4
		i8 =  (i14 << 2)
		__asm(push(i8), push(mstate.esp), op(0x3c))
		state = 89
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state89"))
		i9 = mstate.eax
		mstate.esp += 4
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_461_F"))
		mstate.esp -= 4
		__asm(push(i8), push(mstate.esp), op(0x3c))
		state = 90
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state90"))
		i8 = mstate.eax
		mstate.esp += 4
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_462_F"))
		i10 = i8
		i8 = i14
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_463_F"))
		i22 = i10
		i14 = i9
		__asm(push(i8<1), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_467_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_464_F"))
		i16 =  (0)
		i17 = i16
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_465_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_465_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_465_F")); 
		i19 =  ((__xasm<int>(push(i20), op(0x37))))
		i19 =  (i19 + i17)
		f0 =  ((__xasm<Number>(push(i19), op(0x38))))
		i19 =  (i14 + i17)
		__asm(push(f0), push(i19), op(0x3d))
		i19 =  ((__xasm<int>(push(i18), op(0x37))))
		i19 =  (i19 + i17)
		f0 =  ((__xasm<Number>(push(i19), op(0x38))))
		i19 =  (i22 + i17)
		__asm(push(f0), push(i19), op(0x3d))
		i17 =  (i17 + 4)
		i16 =  (i16 + 1)
		__asm(push(i8<=i16), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_467_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_466_F"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_465_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_467_F"))
		__asm(push(i13==0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_475_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_468_F"))
		i22 =  ((__xasm<int>(push(i20), op(0x37))))
		__asm(push(i22==0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_470_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_469_F"))
		i14 =  (0)
		mstate.esp -= 8
		__asm(push(i22), push(mstate.esp), op(0x3c))
		__asm(push(i14), push((mstate.esp+4)), op(0x3c))
		state = 91
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state91"))
		i22 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_470_F"))
		i18 =  ((__xasm<int>(push(i18), op(0x37))))
		__asm(push(i18==0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_472_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_471_F"))
		i22 =  (0)
		mstate.esp -= 8
		__asm(push(i18), push(mstate.esp), op(0x3c))
		__asm(push(i22), push((mstate.esp+4)), op(0x3c))
		state = 92
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state92"))
		i18 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_472_F"))
		__asm(push(i13==0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_474_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_473_F"))
		i18 =  (0)
		mstate.esp -= 8
		__asm(push(i13), push(mstate.esp), op(0x3c))
		__asm(push(i18), push((mstate.esp+4)), op(0x3c))
		state = 93
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state93"))
		i13 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_474_F"))
		i13 =  (1)
		__asm(push(i13), push(i15), op(0x3c))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_483_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_475_F"))
		i13 =  (1)
		__asm(push(i13), push(i15), op(0x3c))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_483_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_476_F"))
		__asm(push(i13==0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_629_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_477_F"))
		__asm(push(i22==0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_479_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_478_F"))
		i14 =  (0)
		mstate.esp -= 8
		__asm(push(i22), push(mstate.esp), op(0x3c))
		__asm(push(i14), push((mstate.esp+4)), op(0x3c))
		state = 94
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state94"))
		i14 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_479_F"))
		i14 =  ((__xasm<int>(push(i18), op(0x37))))
		__asm(push(i14==0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_481_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_480_F"))
		i15 =  (0)
		mstate.esp -= 8
		__asm(push(i14), push(mstate.esp), op(0x3c))
		__asm(push(i15), push((mstate.esp+4)), op(0x3c))
		state = 95
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state95"))
		i14 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_481_F"))
		__asm(push(i13==0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_629_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_482_F"))
		i14 =  (0)
		mstate.esp -= 8
		__asm(push(i13), push(mstate.esp), op(0x3c))
		__asm(push(i14), push((mstate.esp+4)), op(0x3c))
		state = 96
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state96"))
		i13 = mstate.eax
		mstate.esp += 8
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_483_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_483_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_483_F")); 
		i12 =  (i12 + 1)
		i11 =  (i11 + 1)
		__asm(push(i0>i12), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_631_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_484_F"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_485_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_485_F"))
		i11 = i10
		i12 = i9
		__asm(push(i7<100), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_487_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_486_F"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_547_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_487_F"))
		f1 =  ((__xasm<Number>(push(_b2_angularSlop), op(0x38))))
		__asm(push(i8>3), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_489_F"))
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_488_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_488_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_488_F")); 
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_532_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_489_F"))
		mstate.esp -= 4
		__asm(push(i8), push(mstate.esp), op(0x3c))
		state = 97
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state97"))
		i13 = mstate.eax
		mstate.esp += 4
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_490_F"))
		i14 = i13
		__asm(push(i8>0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_492_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_491_F"))
		i15 = i8
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_507_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_492_F"))
		i15 =  (0)
		i16 =  (i8 + -1)
		i17 = i15
		i18 = i8
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_493_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_493_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_493_F")); 
		f0 =  (0)
		i19 =  ((i15==0) ? i8 : i15)
		i20 =  (i15 + 1)
		i20 =  ((i16==i15) ? 0 : i20)
		i19 =  (i19 + -1)
		i20 =  (i20 << 2)
		i19 =  (i19 << 2)
		i21 =  (i10 + i20)
		i20 =  (i9 + i20)
		i22 =  (i10 + i19)
		i23 =  (i11 + i17)
		i19 =  (i9 + i19)
		i24 =  (i12 + i17)
		f2 =  ((__xasm<Number>(push(i24), op(0x38))))
		f3 =  ((__xasm<Number>(push(i19), op(0x38))))
		f4 =  ((__xasm<Number>(push(i20), op(0x38))))
		f5 =  ((__xasm<Number>(push(i23), op(0x38))))
		f6 =  ((__xasm<Number>(push(i22), op(0x38))))
		f7 =  ((__xasm<Number>(push(i21), op(0x38))))
		f3 =  (f2 - f3)
		f6 =  (f5 - f6)
		f2 =  (f4 - f2)
		f4 =  (f7 - f5)
		f3 =  f3/*fround*/
		f5 =  f6/*fround*/
		f2 =  f2/*fround*/
		f4 =  f4/*fround*/
		f6 =  f3/*fextend*/
		f7 =  f5/*fextend*/
		f8 =  f2/*fextend*/
		f9 =  f4/*fextend*/
		f6 =  (f6 * f6)
		f7 =  (f7 * f7)
		f8 =  (f8 * f8)
		f9 =  (f9 * f9)
		f6 =  f6/*fround*/
		f7 =  f7/*fround*/
		f8 =  f8/*fround*/
		f9 =  f9/*fround*/
		f7 =  f7/*fextend*/
		f6 =  f6/*fextend*/
		f9 =  f9/*fextend*/
		f8 =  f8/*fextend*/
		f6 =  (f6 + f7)
		f7 =  (f8 + f9)
		f6 =  f6/*fround*/
		f7 =  f7/*fround*/
		f6 =  f6/*fextend*/
		f7 =  f7/*fextend*/
		f6 =  Math.sqrt(f6)
		f7 =  Math.sqrt(f7)
		f6 =  f6/*fround*/
		f7 =  f7/*fround*/
		f0 =  f0/*fround*/
		f8 =  f6/*fextend*/
		f0 =  f0/*fextend*/
		f9 =  f7/*fextend*/
		i19 =  ((f8>f0) ? 1 : 0)
		i20 =  ((f9>f0) ? 1 : 0)
		i19 =  (i20 & i19)
		i19 =  (i19 & 1)
		__asm(push(i19!=0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_495_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_494_F"))
		__asm(push(i18>3), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_496_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_495_F"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_497_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_496_F"))
		i19 =  (1)
		i20 =  (i14 + i15)
		__asm(push(i19), push(i20), op(0x3a))
		i18 =  (i18 + -1)
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_497_F"))
		f0 =  f3/*fextend*/
		f3 =  f6/*fextend*/
		f5 =  f5/*fextend*/
		f2 =  f2/*fextend*/
		f6 =  f7/*fextend*/
		f4 =  f4/*fextend*/
		f0 =  (f0 / f3)
		f3 =  (f5 / f3)
		f2 =  (f2 / f6)
		f4 =  (f4 / f6)
		f5 =  f0/*fround*/
		f3 =  f3/*fround*/
		f2 =  f2/*fround*/
		f4 =  f4/*fround*/
		f0 =  f4/*fextend*/
		f6 =  f5/*fextend*/
		f7 =  f3/*fextend*/
		f8 =  f2/*fextend*/
		f0 =  (f6 * f0)
		f6 =  (f8 * f7)
		f0 =  f0/*fround*/
		f6 =  f6/*fround*/
		f6 =  f6/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 - f6)
		f0 =  f0/*fround*/
		//InlineAsmStart
	f0 =  Math.abs(f0);

	//InlineAsmEnd
		f6 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		__asm(push(f0>=f6), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_501_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_498_F"))
		f0 =  (0)
		f2 =  f2/*fextend*/
		f5 =  f5/*fextend*/
		f4 =  f4/*fextend*/
		f3 =  f3/*fextend*/
		f2 =  (f5 * f2)
		f3 =  (f3 * f4)
		f2 =  f2/*fround*/
		f3 =  f3/*fround*/
		f3 =  f3/*fextend*/
		f2 =  f2/*fextend*/
		f2 =  (f2 + f3)
		f2 =  f2/*fround*/
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f2 =  f2/*fextend*/
		__asm(push(f2<=f0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_501_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_499_F"))
		__asm(push(i18<4), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_501_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_500_F"))
		i19 =  (0)
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_502_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_501_F"))
		i19 =  (1)
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_502_F"))
		i20 =  (i14 + i15)
		i19 =  (i19 & 1)
		__asm(push(i19!=0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_504_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_503_F"))
		i19 =  (1)
		__asm(push(i19), push(i20), op(0x3a))
		i18 =  (i18 + -1)
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_505_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_504_F"))
		i19 =  (0)
		__asm(push(i19), push(i20), op(0x3a))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_505_F"))
		i17 =  (i17 + 4)
		i15 =  (i15 + 1)
		__asm(push(i8>i15), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_632_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_506_F"))
		i15 = i18
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_507_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_507_F"))
		__asm(push(i8==i15), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_509_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_508_F"))
		__asm(push(i15!=0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_511_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_509_F"))
		__asm(push(i13==0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_488_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_510_F"))
		i11 =  (0)
		mstate.esp -= 8
		__asm(push(i13), push(mstate.esp), op(0x3c))
		__asm(push(i11), push((mstate.esp+4)), op(0x3c))
		state = 98
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state98"))
		i11 = mstate.eax
		mstate.esp += 8
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_532_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_511_F"))
		mstate.esp -= 4
		i16 =  (i15 << 2)
		__asm(push(i16), push(mstate.esp), op(0x3c))
		state = 99
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state99"))
		i17 = mstate.eax
		mstate.esp += 4
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_512_F"))
		mstate.esp -= 4
		__asm(push(i16), push(mstate.esp), op(0x3c))
		state = 100
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state100"))
		i16 = mstate.eax
		mstate.esp += 4
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_513_F"))
		i18 =  ((i8<1) ? 1 : 0)
		__asm(push(i15==0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_525_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_514_F"))
		i18 =  (i18 & 1)
		__asm(push(i18!=0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_525_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_515_F"))
		i18 =  (0)
		i19 = i18
		i20 = i18
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_516_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_516_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_516_F")); 
		i21 =  (i14 + i20)
		i21 =  ((__xasm<int>(push(i21), op(0x35))))
		__asm(push(i18==i15), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_518_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_517_F"))
		i21 =  (i21 & 255)
		__asm(push(i21==0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_519_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_518_F"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_523_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_519_F"))
		__asm(push(i18<i15), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_522_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_520_F"))
		i8 =  (___sF)
		mstate.esp -= 24
		i2 =  (__2E_str1670)
		i9 =  (__2E_str23230)
		i10 =  (__ZZN9b2Polygon18MergeParallelEdgesEfE8__func__)
		i18 =  (__2E_str22229)
		i0 =  (182)
		i8 =  (i8 + 176)
		__asm(push(i8), push(mstate.esp), op(0x3c))
		__asm(push(i2), push((mstate.esp+4)), op(0x3c))
		__asm(push(i9), push((mstate.esp+8)), op(0x3c))
		__asm(push(i10), push((mstate.esp+12)), op(0x3c))
		__asm(push(i18), push((mstate.esp+16)), op(0x3c))
		__asm(push(i0), push((mstate.esp+20)), op(0x3c))
		state = 101
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state101"))
		mstate.esp += 24
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_521_F"))
		state = 102
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state102"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_522_F"))
		i21 =  (i18 << 2)
		i22 =  (i12 + i19)
		f0 =  ((__xasm<Number>(push(i22), op(0x38))))
		i22 =  (i17 + i21)
		__asm(push(f0), push(i22), op(0x3d))
		i22 =  (i11 + i19)
		f0 =  ((__xasm<Number>(push(i22), op(0x38))))
		i21 =  (i16 + i21)
		__asm(push(f0), push(i21), op(0x3d))
		i18 =  (i18 + 1)
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_523_F"))
		i19 =  (i19 + 4)
		i20 =  (i20 + 1)
		__asm(push(i8<=i20), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_525_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_524_F"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_516_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_525_F"))
		__asm(push(i9==0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_527_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_526_F"))
		i8 =  (0)
		mstate.esp -= 8
		__asm(push(i9), push(mstate.esp), op(0x3c))
		__asm(push(i8), push((mstate.esp+4)), op(0x3c))
		state = 103
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state103"))
		i8 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_527_F"))
		__asm(push(i10==0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_529_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_528_F"))
		i8 =  (0)
		mstate.esp -= 8
		__asm(push(i10), push(mstate.esp), op(0x3c))
		__asm(push(i8), push((mstate.esp+4)), op(0x3c))
		state = 104
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state104"))
		i8 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_529_F"))
		__asm(push(i13!=0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_531_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_530_F"))
		i8 = i15
		i10 = i16
		i9 = i17
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_532_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_531_F"))
		i8 =  (0)
		mstate.esp -= 8
		__asm(push(i13), push(mstate.esp), op(0x3c))
		__asm(push(i8), push((mstate.esp+4)), op(0x3c))
		state = 105
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state105"))
		i8 = mstate.eax
		mstate.esp += 8
		i8 = i15
		i10 = i16
		i9 = i17
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_532_F"))
		i11 = i10
		i12 = i9
		__asm(push(i8>2), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_534_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_533_F"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_547_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_534_F"))
		i13 =  ((mstate.ebp+-2288))
		i14 =  (i7 * 20)
		i13 =  (i13 + i14)
		i14 =  ((__xasm<int>(push((i13+8)), op(0x37))))
		i13 =  (i13 + 8)
		__asm(push(i14==i8), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_542_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_535_F"))
		i14 =  ((mstate.ebp+-2288))
		i15 =  (i7 * 20)
		__asm(push(i8), push(i13), op(0x3c))
		i14 =  (i14 + i15)
		i15 =  ((__xasm<int>(push(i14), op(0x37))))
		__asm(push(i15==0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_537_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_536_F"))
		i16 =  (0)
		mstate.esp -= 8
		__asm(push(i15), push(mstate.esp), op(0x3c))
		__asm(push(i16), push((mstate.esp+4)), op(0x3c))
		state = 106
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state106"))
		i15 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_537_F"))
		i15 =  ((mstate.ebp+-2288))
		i16 =  (i7 * 20)
		i15 =  (i15 + i16)
		i16 =  ((__xasm<int>(push((i15+4)), op(0x37))))
		i15 =  (i15 + 4)
		__asm(push(i16==0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_539_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_538_F"))
		i17 =  (0)
		mstate.esp -= 8
		__asm(push(i16), push(mstate.esp), op(0x3c))
		__asm(push(i17), push((mstate.esp+4)), op(0x3c))
		state = 107
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state107"))
		i16 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_539_F"))
		i16 =  ((__xasm<int>(push(i13), op(0x37))))
		mstate.esp -= 4
		i16 =  (i16 << 2)
		__asm(push(i16), push(mstate.esp), op(0x3c))
		state = 108
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state108"))
		i16 = mstate.eax
		mstate.esp += 4
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_540_F"))
		__asm(push(i16), push(i14), op(0x3c))
		i14 =  ((__xasm<int>(push(i13), op(0x37))))
		mstate.esp -= 4
		i14 =  (i14 << 2)
		__asm(push(i14), push(mstate.esp), op(0x3c))
		state = 109
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state109"))
		i14 = mstate.eax
		mstate.esp += 4
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_541_F"))
		__asm(push(i14), push(i15), op(0x3c))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_542_F"))
		i14 =  ((__xasm<int>(push(i13), op(0x37))))
		__asm(push(i14<1), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_546_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_543_F"))
		i14 =  ((mstate.ebp+-2288))
		i15 =  (i7 * 20)
		i14 =  (i14 + i15)
		i15 =  (0)
		i16 =  (i14 + 4)
		i17 = i15
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_544_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_544_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_544_F")); 
		i18 =  (i12 + i17)
		i19 =  ((__xasm<int>(push(i14), op(0x37))))
		f0 =  ((__xasm<Number>(push(i18), op(0x38))))
		i18 =  (i19 + i17)
		__asm(push(f0), push(i18), op(0x3d))
		i18 =  (i11 + i17)
		i19 =  ((__xasm<int>(push(i16), op(0x37))))
		f0 =  ((__xasm<Number>(push(i18), op(0x38))))
		i18 =  (i19 + i17)
		__asm(push(f0), push(i18), op(0x3d))
		i18 =  ((__xasm<int>(push(i13), op(0x37))))
		i17 =  (i17 + 4)
		i15 =  (i15 + 1)
		__asm(push(i18<=i15), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_546_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_545_F"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_544_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_546_F"))
		i11 =  ((mstate.ebp+-2288))
		i12 =  (i7 * 20)
		i13 =  (0)
		i11 =  (i11 + i12)
		__asm(push(i13), push((i11+16)), op(0x3a))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_547_F"))
		i8 =  ((i8>2) ? 1 : 0)
		i8 =  (i8 & 1)
		i7 =  (i8 + i7)
		__asm(push(i9==0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_549_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_548_F"))
		i8 =  (0)
		mstate.esp -= 8
		__asm(push(i9), push(mstate.esp), op(0x3c))
		__asm(push(i8), push((mstate.esp+4)), op(0x3c))
		state = 110
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state110"))
		i8 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_549_F"))
		__asm(push(i10!=0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_551_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_550_F"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_554_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_551_F"))
		i8 =  (0)
		mstate.esp -= 8
		__asm(push(i10), push(mstate.esp), op(0x3c))
		__asm(push(i8), push((mstate.esp+4)), op(0x3c))
		state = 111
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state111"))
		i8 = mstate.eax
		mstate.esp += 8
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_554_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_552_F"))
		i7 =  (0)
		i0 =  (i2 << 1)
		i6 = i7
		i8 = i7
		i7 = i6
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_553_F"))
		i6 = i8
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_554_F"))
		i8 =  (i6 & 1)
		__asm(push(i8!=0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_556_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_555_F"))
		i9 =  (0)
		i8 = i4
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_372_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_556_F"))
		i2 =  ((__xasm<int>(push((mstate.ebp+-2430)), op(0x37))))
		__asm(push(i2!=0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_558_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_557_F"))
		i2 = i7
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_559_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_558_F"))
		i2 =  (0)
		mstate.esp -= 8
		i0 =  ((__xasm<int>(push((mstate.ebp+-2430)), op(0x37))))
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i2), push((mstate.esp+4)), op(0x3c))
		state = 112
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state112"))
		i2 = mstate.eax
		mstate.esp += 8
		i2 = i7
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_559_F"))
		i0 =  ((__xasm<int>(push((mstate.ebp+-2421)), op(0x37))))
		__asm(push(i0!=0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_561_F"))
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_560_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_560_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_560_F")); 
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_573_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_561_F"))
		i0 =  ((__xasm<int>(push((mstate.ebp+-2412)), op(0x37))))
		i0 =  ((__xasm<int>(push(i0), op(0x37))))
		i0 =  (i0 << 3)
		i0 =  (i0 | 4)
		i0 =  (i1 + i0)
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_562_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_562_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_562_F")); 
		__asm(push(i3==i0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_571_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_563_F"))
		i4 =  (0)
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_564_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_564_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_564_F")); 
		i5 =  (i4 ^ -1)
		i6 =  (i5 << 3)
		i6 =  (i0 + i6)
		i7 =  ((__xasm<int>(push(i6), op(0x37))))
		__asm(push(i7==0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_566_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_565_F"))
		i8 =  (0)
		mstate.esp -= 8
		__asm(push(i7), push(mstate.esp), op(0x3c))
		__asm(push(i8), push((mstate.esp+4)), op(0x3c))
		state = 113
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state113"))
		i7 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_566_F"))
		i5 =  (i5 << 3)
		i5 =  (i0 + i5)
		i5 =  ((__xasm<int>(push((i5+4)), op(0x37))))
		__asm(push(i5!=0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_568_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_567_F"))
		i0 = i6
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_562_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_568_F"))
		i7 =  (0)
		mstate.esp -= 8
		__asm(push(i5), push(mstate.esp), op(0x3c))
		__asm(push(i7), push((mstate.esp+4)), op(0x3c))
		state = 114
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state114"))
		i5 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_569_F"))
		i4 =  (i4 + 1)
		__asm(push(i3==i6), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_571_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_570_F"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_564_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_571_F"))
		__asm(push(i1==0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_560_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_572_F"))
		i0 =  (0)
		mstate.esp -= 8
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 115
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state115"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_573_F"))
		i1 = i2
		//InlineAsmStart
	arr = [];
	//InlineAsmEnd
		__asm(push(i1<1), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_610_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_574_F"))
		i0 =  (0)
		i2 =  ((__xasm<int>(push((mstate.ebp+-2304)), op(0x37))))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_609_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_575_B"), label)
		i0 =  (__ZTV14b2PolygonShape)
		i0 =  (i0 + 8)
		__asm(push(i0), push(i5), op(0x3c))
		i0 =  (2)
		__asm(push(i0), push((i5+4)), op(0x3c))
		f0 =  ((__xasm<Number>(push(_b2_polygonRadius), op(0x38))))
		__asm(push(f0), push((i5+8)), op(0x3d))
		i0 =  (0)
		__asm(push(i0), push((i5+152)), op(0x3c))
		__asm(push(i0), push((i5+16)), op(0x3c))
		__asm(push(i0), push((i5+20)), op(0x3c))
		i0 = i5
		//InlineAsmStart
	arr.push(i0)
	//InlineAsmEnd
		i0 =  ((__xasm<int>(push((i4+8)), op(0x37))))
		i6 =  (i5 + 20)
		i7 =  (i4 + 8)
		i8 =  (i5 + 16)
		i9 =  (i5 + 152)
		i10 = i5
		__asm(push(i0>0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_577_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_576_F"))
		i2 = i0
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_580_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_577_F"))
		i0 =  (0)
		i11 =  (i4 + 4)
		i12 = i10
		i13 = i0
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_578_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_578_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_578_F")); 
		i14 =  ((__xasm<int>(push(i2), op(0x37))))
		i14 =  (i14 + i13)
		f0 =  ((__xasm<Number>(push(i14), op(0x38))))
		__asm(push(f0), push((i12+24)), op(0x3d))
		i14 =  ((__xasm<int>(push(i11), op(0x37))))
		i14 =  (i14 + i13)
		f0 =  ((__xasm<Number>(push(i14), op(0x38))))
		__asm(push(f0), push((i12+28)), op(0x3d))
		i14 =  ((__xasm<int>(push(i7), op(0x37))))
		i12 =  (i12 + 8)
		i13 =  (i13 + 4)
		i0 =  (i0 + 1)
		__asm(push(i14>i0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_633_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_579_F"))
		i2 = i14
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_580_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_580_F"))
		i0 =  (i2 + -3)
		__asm(push(uint(i0)<uint(6)), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_583_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_581_F"))
		i2 =  (___sF)
		mstate.esp -= 24
		i0 =  (__2E_str1670)
		i1 =  (__2E_str146330)
		i5 =  (__ZZN15b2DistanceProxy3SetEPK7b2ShapeiE8__func__)
		i3 =  (__2E_str49256)
		i4 =  (122)
		i2 =  (i2 + 176)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i1), push((mstate.esp+8)), op(0x3c))
		__asm(push(i5), push((mstate.esp+12)), op(0x3c))
		__asm(push(i3), push((mstate.esp+16)), op(0x3c))
		__asm(push(i4), push((mstate.esp+20)), op(0x3c))
		state = 116
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state116"))
		mstate.esp += 24
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_582_F"))
		state = 117
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state117"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_583_F"))
		__asm(push(i2), push(i9), op(0x3c))
		__asm(push(i2<1), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_596_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_584_F"))
		i0 =  (0)
		i7 = i10
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_585_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_585_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_585_F")); 
		f0 =  ((__xasm<Number>(push((i7+24)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i7+28)), op(0x38))))
		__asm(push(f0), push((i7+24)), op(0x3d))
		__asm(push(f1), push((i7+28)), op(0x3d))
		i7 =  (i7 + 8)
		i0 =  (i0 + 1)
		__asm(push(i0>=i2), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_594_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_586_F"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_585_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_587_B"), label)
		f0 =  (1.42109e-14)
		i9 =  (i0 + 1)
		i9 =  ((i9<i2) ? i9 : 0)
		i9 =  (i9 << 3)
		i9 =  (i5 + i9)
		f1 =  ((__xasm<Number>(push((i9+28)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i7+28)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i9+24)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i7+24)), op(0x38))))
		f3 =  (f3 - f4)
		f1 =  (f1 - f2)
		f2 =  f3/*fround*/
		f1 =  f1/*fround*/
		f3 =  f2/*fextend*/
		f4 =  f1/*fextend*/
		f3 =  (f3 * f3)
		f4 =  (f4 * f4)
		f3 =  f3/*fround*/
		f4 =  f4/*fround*/
		f5 =  f4/*fextend*/
		f3 =  f3/*fextend*/
		f3 =  (f3 + f5)
		f3 =  f3/*fround*/
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f3 =  f3/*fextend*/
		__asm(push(f3>f0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_590_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_588_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i2 =  (__2E_str1670)
		i1 =  (__2E_str147)
		i5 =  (__ZZN15b2DistanceProxy3SetEPK7b2ShapeiE8__func__)
		i7 =  (__2E_str49256)
		i3 =  (137)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i2), push((mstate.esp+4)), op(0x3c))
		__asm(push(i1), push((mstate.esp+8)), op(0x3c))
		__asm(push(i5), push((mstate.esp+12)), op(0x3c))
		__asm(push(i7), push((mstate.esp+16)), op(0x3c))
		__asm(push(i3), push((mstate.esp+20)), op(0x3c))
		state = 118
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state118"))
		mstate.esp += 24
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_589_F"))
		state = 119
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state119"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_590_F"))
		f0 =  (1.19209e-07)
		f2 =  f2/*fextend*/
		f3 =  (f2 * f2)
		f3 =  f3/*fround*/
		f3 =  f3/*fextend*/
		f4 =  f4/*fextend*/
		f3 =  (f4 + f3)
		f3 =  f3/*fround*/
		f2 =  -f2
		f3 =  f3/*fextend*/
		f3 =  Math.sqrt(f3)
		__asm(push(f1), push((i7+88)), op(0x3d))
		f2 =  f2/*fround*/
		__asm(push(f2), push((i7+92)), op(0x3d))
		f3 =  f3/*fround*/
		i9 =  (i7 + 92)
		i11 =  (i7 + 88)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f4 =  f3/*fextend*/
		__asm(push(f4<f0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_592_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_591_F"))
		f0 =  (1)
		f0 =  f0/*fround*/
		f3 =  f3/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 / f3)
		f0 =  f0/*fround*/
		f1 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		f1 =  (f1 * f0)
		f2 =  f2/*fextend*/
		f0 =  (f2 * f0)
		f1 =  f1/*fround*/
		__asm(push(f1), push(i11), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push(i9), op(0x3d))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_592_F"))
		i7 =  (i7 + 8)
		i0 =  (i0 + 1)
		__asm(push(i2<=i0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_596_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_593_F"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_587_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_594_F"))
		__asm(push(i2<1), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_596_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_595_F"))
		i0 =  (0)
		i7 = i10
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_587_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_596_F"))
		i0 =  (i5 + 24)
		__asm(push(i2<3), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_598_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_597_F"))
		f0 =  (0)
		f0 =  f0/*fround*/
		i5 =  (0)
		i7 = i10
		f1 = f0
		f2 = f0
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_604_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_598_F"))
		i2 =  (___sF)
		mstate.esp -= 24
		i0 =  (__2E_str1670)
		i1 =  (__2E_str50257)
		i5 =  (__ZZ15ComputeCentroidPK6b2Vec2iE8__func__)
		i3 =  (__2E_str49256)
		i4 =  (76)
		i2 =  (i2 + 176)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i1), push((mstate.esp+8)), op(0x3c))
		__asm(push(i5), push((mstate.esp+12)), op(0x3c))
		__asm(push(i3), push((mstate.esp+16)), op(0x3c))
		__asm(push(i4), push((mstate.esp+20)), op(0x3c))
		state = 120
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state120"))
		mstate.esp += 24
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_599_F"))
		state = 121
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state121"))
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_600_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_600_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_600_F")); 
		f2 =  ((__xasm<Number>(push((i7+24)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i7+28)), op(0x38))))
		i9 =  (i5 + 1)
		__asm(push(i9<i2), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_602_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_601_F"))
		i9 = i0
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_603_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_602_F"))
		i9 =  (i7 + 32)
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_603_F"))
		f5 =  (0)
		f5 =  f5/*fround*/
		f6 =  ((__xasm<Number>(push(i9), op(0x38))))
		f7 =  ((__xasm<Number>(push((i9+4)), op(0x38))))
		f5 =  f5/*fextend*/
		f4 =  f4/*fextend*/
		f2 =  f2/*fextend*/
		f8 =  (f6 - f5)
		f9 =  (f7 - f5)
		f10 =  (f4 - f5)
		f11 =  (f2 - f5)
		f8 =  f8/*fround*/
		f9 =  f9/*fround*/
		f10 =  f10/*fround*/
		f11 =  f11/*fround*/
		f8 =  f8/*fextend*/
		f10 =  f10/*fextend*/
		f9 =  f9/*fextend*/
		f11 =  f11/*fextend*/
		f8 =  (f10 * f8)
		f9 =  (f11 * f9)
		f8 =  f8/*fround*/
		f9 =  f9/*fround*/
		f8 =  f8/*fextend*/
		f9 =  f9/*fextend*/
		f8 =  (f9 - f8)
		f9 =  (0.5)
		f8 =  f8/*fround*/
		f9 =  f9/*fround*/
		f9 =  f9/*fextend*/
		f8 =  f8/*fextend*/
		f8 =  (f8 * f9)
		f4 =  (f4 + f5)
		f2 =  (f2 + f5)
		f5 =  (0.333333)
		f8 =  f8/*fround*/
		f4 =  f4/*fround*/
		f2 =  f2/*fround*/
		f5 =  f5/*fround*/
		f2 =  f2/*fextend*/
		f4 =  f4/*fextend*/
		f5 =  f5/*fextend*/
		f8 =  f8/*fextend*/
		f5 =  (f8 * f5)
		f2 =  (f2 + f6)
		f4 =  (f4 + f7)
		f5 =  f5/*fround*/
		f2 =  f2/*fround*/
		f4 =  f4/*fround*/
		f4 =  f4/*fextend*/
		f5 =  f5/*fextend*/
		f2 =  f2/*fextend*/
		f4 =  (f4 * f5)
		f2 =  (f2 * f5)
		f4 =  f4/*fround*/
		f2 =  f2/*fround*/
		f0 =  f0/*fextend*/
		f4 =  f4/*fextend*/
		f1 =  f1/*fextend*/
		f2 =  f2/*fextend*/
		f3 =  f3/*fextend*/
		f0 =  (f0 + f8)
		f1 =  (f1 + f4)
		f2 =  (f3 + f2)
		f0 =  f0/*fround*/
		f3 =  f1/*fround*/
		f1 =  f2/*fround*/
		i7 =  (i7 + 8)
		i5 =  (i5 + 1)
		f2 = f3
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_604_F"))
		f3 = f1
		f1 = f2
		__asm(push(i5<i2), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_600_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_605_F"))
		f2 =  (1.19209e-07)
		f2 =  f2/*fround*/
		f2 =  f2/*fextend*/
		f4 =  f0/*fextend*/
		__asm(push(f4>f2), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_608_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_606_F"))
		i2 =  (___sF)
		mstate.esp -= 24
		i0 =  (__2E_str1670)
		i1 =  (__2E_str51258)
		i3 =  (__ZZ15ComputeCentroidPK6b2Vec2iE8__func__)
		i4 =  (__2E_str49256)
		i5 =  (115)
		i2 =  (i2 + 176)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i1), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 122
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state122"))
		mstate.esp += 24
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_607_F"))
		state = 123
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state123"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_608_F"))
		f2 =  (1)
		f2 =  f2/*fround*/
		f0 =  f0/*fextend*/
		f2 =  f2/*fextend*/
		f0 =  (f2 / f0)
		f0 =  f0/*fround*/
		f2 =  f3/*fextend*/
		f0 =  f0/*fextend*/
		f2 =  (f2 * f0)
		f1 =  f1/*fextend*/
		f0 =  (f1 * f0)
		f1 =  f2/*fround*/
		__asm(push(f1), push((mstate.ebp+-2296)), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push((mstate.ebp+-2292)), op(0x3d))
		i2 =  ((__xasm<int>(push((mstate.ebp+-2296)), op(0x37))))
		__asm(push(i2), push(i8), op(0x3c))
		i2 =  ((__xasm<int>(push((mstate.ebp+-2292)), op(0x37))))
		__asm(push(i2), push(i6), op(0x3c))
		i2 =  (i4 + 20)
		i0 =  (i3 + 1)
		__asm(push(i0>=i1), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_610_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_609_F"))
		i4 = i2
		i3 = i0
		i2 =  (156)
		mstate.esp -= 4
		__asm(push(i2), push(mstate.esp), op(0x3c))
		state = 124
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state124"))
		i5 = mstate.eax
		mstate.esp += 4
		i2 = i4
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_575_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_610_F"))
		state = 125
		mstate.esp -= 4;(mstate.funcs[_AS3_Null])()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state125"))
		i2 = mstate.eax
		i0 =  ((__xasm<int>(push((mstate.ebp+-2322)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2313)), op(0x37))))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_611_F"))
		i3 =  ((mstate.ebp+-2288))
		i3 =  (i3 + 2000)
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_612_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_612_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_612_F")); 
		i4 =  ((mstate.ebp+-2288))
		__asm(push(i4==i3), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_620_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_613_F"))
		i4 =  (0)
	__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_614_F"), lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_614_B"), label, lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_614_F")); 
		i5 =  (i4 ^ -1)
		i6 =  (i5 * 20)
		i6 =  (i3 + i6)
		i7 =  ((__xasm<int>(push(i6), op(0x37))))
		__asm(push(i7==0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_616_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_615_F"))
		i8 =  (0)
		mstate.esp -= 8
		__asm(push(i7), push(mstate.esp), op(0x3c))
		__asm(push(i8), push((mstate.esp+4)), op(0x3c))
		state = 126
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state126"))
		i7 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_616_F"))
		i5 =  (i5 * 20)
		i5 =  (i3 + i5)
		i5 =  ((__xasm<int>(push((i5+4)), op(0x37))))
		__asm(push(i5!=0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_618_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_617_F"))
		i3 = i6
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_612_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_618_F"))
		i7 =  (0)
		mstate.esp -= 8
		__asm(push(i5), push(mstate.esp), op(0x3c))
		__asm(push(i7), push((mstate.esp+4)), op(0x3c))
		state = 127
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state127"))
		i5 = mstate.eax
		mstate.esp += 8
		i4 =  (i4 + 1)
		i5 =  ((mstate.ebp+-2288))
		__asm(push(i5==i6), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_620_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_619_F"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_614_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_620_F"))
		__asm(push(i1==0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_622_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_621_F"))
		i3 =  (0)
		mstate.esp -= 8
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i3), push((mstate.esp+4)), op(0x3c))
		state = 128
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state128"))
		i1 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_622_F"))
		__asm(push(i0==0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_624_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_623_F"))
		i1 =  (0)
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 129
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_state129"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_624_F"))
		mstate.eax = i2
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_625_F"))
		i0 =  (1)
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_285_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_626_F"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_328_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_627_F"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_628_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_628_F"))
		i15 =  (i11 << 2)
		i15 =  (i5 + i15)
		i16 =  ((__xasm<int>(push(i15), op(0x37))))
		__asm(push(i16==0), iftrue, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_388_B"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_629_F"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_629_F"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_483_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_630_F"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_391_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_631_F"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_384_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_632_F"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_493_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_633_F"))
		__asm(jump, target("__Z24b2PolygonShape_DecomposePvP8_AS3_Val__XprivateX__BB358_578_B"))
	__asm(lbl("__Z24b2PolygonShape_DecomposePvP8_AS3_Val_errState"))
		throw("Invalid state in __Z24b2PolygonShape_DecomposePvP8_AS3_Val")
	}
}



// Async
public const __Z16b2Contact_UpdatePvP8_AS3_Val:int = regFunc(FSM__Z16b2Contact_UpdatePvP8_AS3_Val.start)

public final class FSM__Z16b2Contact_UpdatePvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z16b2Contact_UpdatePvP8_AS3_Val = new FSM__Z16b2Contact_UpdatePvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int

	public static const intRegCount:int = 3

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z16b2Contact_UpdatePvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z16b2Contact_UpdatePvP8_AS3_Val_errState",
			"__Z16b2Contact_UpdatePvP8_AS3_Val_state0",
			"__Z16b2Contact_UpdatePvP8_AS3_Val_state1",
			"__Z16b2Contact_UpdatePvP8_AS3_Val_state2",
			"__Z16b2Contact_UpdatePvP8_AS3_Val_state3"))
	__asm(lbl("__Z16b2Contact_UpdatePvP8_AS3_Val_state0"))
	__asm(lbl("__Z16b2Contact_UpdatePvP8_AS3_Val__XprivateX__BB359_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 4
		i0 =  (__2E_str26233)
		mstate.esp -= 12
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((mstate.ebp+-4))
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_ArrayValue])()
		return
	__asm(lbl("__Z16b2Contact_UpdatePvP8_AS3_Val_state1"))
		mstate.esp += 12
		i0 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+48)), op(0x37))))
		i1 =  ((__xasm<int>(push((i1+12)), op(0x37))))
		i1 =  ((__xasm<int>(push((i1+96)), op(0x37))))
		i1 =  ((__xasm<int>(push((i1+102944)), op(0x37))))
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM__ZN9b2Contact6UpdateEP17b2ContactListener.start()
		return
	__asm(lbl("__Z16b2Contact_UpdatePvP8_AS3_Val_state2"))
		mstate.esp += 8
		state = 3
		mstate.esp -= 4;(mstate.funcs[_AS3_Null])()
		return
	__asm(lbl("__Z16b2Contact_UpdatePvP8_AS3_Val_state3"))
		i0 = mstate.eax
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z16b2Contact_UpdatePvP8_AS3_Val_errState"))
		throw("Invalid state in __Z16b2Contact_UpdatePvP8_AS3_Val")
	}
}



// Async
public const __Z14b2MassData_newPvP8_AS3_Val:int = regFunc(FSM__Z14b2MassData_newPvP8_AS3_Val.start)

public final class FSM__Z14b2MassData_newPvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z14b2MassData_newPvP8_AS3_Val = new FSM__Z14b2MassData_newPvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z14b2MassData_newPvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z14b2MassData_newPvP8_AS3_Val_errState",
			"__Z14b2MassData_newPvP8_AS3_Val_state0",
			"__Z14b2MassData_newPvP8_AS3_Val_state1",
			"__Z14b2MassData_newPvP8_AS3_Val_state2",
			"__Z14b2MassData_newPvP8_AS3_Val_state3"))
	__asm(lbl("__Z14b2MassData_newPvP8_AS3_Val_state0"))
	__asm(lbl("__Z14b2MassData_newPvP8_AS3_Val__XprivateX__BB360_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (16)
		i1 =  ((__xasm<int>(push(_as3_ptr), op(0x37))))
		mstate.esp -= 4
		__asm(push(i1), push(mstate.esp), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_Release])()
		return
	__asm(lbl("__Z14b2MassData_newPvP8_AS3_Val_state1"))
		mstate.esp += 4
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z14b2MassData_newPvP8_AS3_Val_state2"))
		i0 = mstate.eax
		mstate.esp += 4
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 3
		mstate.esp -= 4;(mstate.funcs[_AS3_Ptr])()
		return
	__asm(lbl("__Z14b2MassData_newPvP8_AS3_Val_state3"))
		i0 = mstate.eax
		mstate.esp += 4
		__asm(push(i0), push(_as3_ptr), op(0x3c))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z14b2MassData_newPvP8_AS3_Val_errState"))
		throw("Invalid state in __Z14b2MassData_newPvP8_AS3_Val")
	}
}



// Async
public const __Z18b2RopeJointDef_newPvP8_AS3_Val:int = regFunc(FSM__Z18b2RopeJointDef_newPvP8_AS3_Val.start)

public final class FSM__Z18b2RopeJointDef_newPvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z18b2RopeJointDef_newPvP8_AS3_Val = new FSM__Z18b2RopeJointDef_newPvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int

	public static const intRegCount:int = 3

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z18b2RopeJointDef_newPvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z18b2RopeJointDef_newPvP8_AS3_Val_errState",
			"__Z18b2RopeJointDef_newPvP8_AS3_Val_state0",
			"__Z18b2RopeJointDef_newPvP8_AS3_Val_state1",
			"__Z18b2RopeJointDef_newPvP8_AS3_Val_state2",
			"__Z18b2RopeJointDef_newPvP8_AS3_Val_state3"))
	__asm(lbl("__Z18b2RopeJointDef_newPvP8_AS3_Val_state0"))
	__asm(lbl("__Z18b2RopeJointDef_newPvP8_AS3_Val__XprivateX__BB361_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (40)
		i1 =  ((__xasm<int>(push(_as3_ptr), op(0x37))))
		mstate.esp -= 4
		__asm(push(i1), push(mstate.esp), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_Release])()
		return
	__asm(lbl("__Z18b2RopeJointDef_newPvP8_AS3_Val_state1"))
		mstate.esp += 4
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z18b2RopeJointDef_newPvP8_AS3_Val_state2"))
		i0 = mstate.eax
		mstate.esp += 4
		i1 =  (0)
		__asm(push(i1), push((i0+4)), op(0x3c))
		__asm(push(i1), push((i0+8)), op(0x3c))
		__asm(push(i1), push((i0+12)), op(0x3c))
		__asm(push(i1), push((i0+16)), op(0x3a))
		i2 =  (10)
		__asm(push(i2), push(i0), op(0x3c))
		i2 =  (-1082130432)
		__asm(push(i2), push((i0+20)), op(0x3c))
		__asm(push(i1), push((i0+24)), op(0x3c))
		i2 =  (1065353216)
		__asm(push(i2), push((i0+28)), op(0x3c))
		__asm(push(i1), push((i0+32)), op(0x3c))
		__asm(push(i1), push((i0+36)), op(0x3c))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 3
		mstate.esp -= 4;(mstate.funcs[_AS3_Ptr])()
		return
	__asm(lbl("__Z18b2RopeJointDef_newPvP8_AS3_Val_state3"))
		i0 = mstate.eax
		mstate.esp += 4
		__asm(push(i0), push(_as3_ptr), op(0x3c))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z18b2RopeJointDef_newPvP8_AS3_Val_errState"))
		throw("Invalid state in __Z18b2RopeJointDef_newPvP8_AS3_Val")
	}
}



// Async
public const __Z22b2FrictionJointDef_newPvP8_AS3_Val:int = regFunc(FSM__Z22b2FrictionJointDef_newPvP8_AS3_Val.start)

public final class FSM__Z22b2FrictionJointDef_newPvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z22b2FrictionJointDef_newPvP8_AS3_Val = new FSM__Z22b2FrictionJointDef_newPvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int

	public static const intRegCount:int = 3

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z22b2FrictionJointDef_newPvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z22b2FrictionJointDef_newPvP8_AS3_Val_errState",
			"__Z22b2FrictionJointDef_newPvP8_AS3_Val_state0",
			"__Z22b2FrictionJointDef_newPvP8_AS3_Val_state1",
			"__Z22b2FrictionJointDef_newPvP8_AS3_Val_state2",
			"__Z22b2FrictionJointDef_newPvP8_AS3_Val_state3"))
	__asm(lbl("__Z22b2FrictionJointDef_newPvP8_AS3_Val_state0"))
	__asm(lbl("__Z22b2FrictionJointDef_newPvP8_AS3_Val__XprivateX__BB362_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (44)
		i1 =  ((__xasm<int>(push(_as3_ptr), op(0x37))))
		mstate.esp -= 4
		__asm(push(i1), push(mstate.esp), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_Release])()
		return
	__asm(lbl("__Z22b2FrictionJointDef_newPvP8_AS3_Val_state1"))
		mstate.esp += 4
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z22b2FrictionJointDef_newPvP8_AS3_Val_state2"))
		i0 = mstate.eax
		mstate.esp += 4
		i1 =  (0)
		__asm(push(i1), push((i0+4)), op(0x3c))
		__asm(push(i1), push((i0+8)), op(0x3c))
		__asm(push(i1), push((i0+12)), op(0x3c))
		__asm(push(i1), push((i0+16)), op(0x3a))
		i2 =  (9)
		__asm(push(i2), push(i0), op(0x3c))
		__asm(push(i1), push((i0+20)), op(0x3c))
		__asm(push(i1), push((i0+24)), op(0x3c))
		__asm(push(i1), push((i0+28)), op(0x3c))
		__asm(push(i1), push((i0+32)), op(0x3c))
		__asm(push(i1), push((i0+36)), op(0x3c))
		__asm(push(i1), push((i0+40)), op(0x3c))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 3
		mstate.esp -= 4;(mstate.funcs[_AS3_Ptr])()
		return
	__asm(lbl("__Z22b2FrictionJointDef_newPvP8_AS3_Val_state3"))
		i0 = mstate.eax
		mstate.esp += 4
		__asm(push(i0), push(_as3_ptr), op(0x3c))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z22b2FrictionJointDef_newPvP8_AS3_Val_errState"))
		throw("Invalid state in __Z22b2FrictionJointDef_newPvP8_AS3_Val")
	}
}



// Async
public const __Z18b2WeldJointDef_newPvP8_AS3_Val:int = regFunc(FSM__Z18b2WeldJointDef_newPvP8_AS3_Val.start)

public final class FSM__Z18b2WeldJointDef_newPvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z18b2WeldJointDef_newPvP8_AS3_Val = new FSM__Z18b2WeldJointDef_newPvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int

	public static const intRegCount:int = 3

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z18b2WeldJointDef_newPvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z18b2WeldJointDef_newPvP8_AS3_Val_errState",
			"__Z18b2WeldJointDef_newPvP8_AS3_Val_state0",
			"__Z18b2WeldJointDef_newPvP8_AS3_Val_state1",
			"__Z18b2WeldJointDef_newPvP8_AS3_Val_state2",
			"__Z18b2WeldJointDef_newPvP8_AS3_Val_state3"))
	__asm(lbl("__Z18b2WeldJointDef_newPvP8_AS3_Val_state0"))
	__asm(lbl("__Z18b2WeldJointDef_newPvP8_AS3_Val__XprivateX__BB363_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (40)
		i1 =  ((__xasm<int>(push(_as3_ptr), op(0x37))))
		mstate.esp -= 4
		__asm(push(i1), push(mstate.esp), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_Release])()
		return
	__asm(lbl("__Z18b2WeldJointDef_newPvP8_AS3_Val_state1"))
		mstate.esp += 4
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z18b2WeldJointDef_newPvP8_AS3_Val_state2"))
		i0 = mstate.eax
		mstate.esp += 4
		i1 =  (0)
		__asm(push(i1), push((i0+4)), op(0x3c))
		__asm(push(i1), push((i0+8)), op(0x3c))
		__asm(push(i1), push((i0+12)), op(0x3c))
		__asm(push(i1), push((i0+16)), op(0x3a))
		i2 =  (8)
		__asm(push(i2), push(i0), op(0x3c))
		__asm(push(i1), push((i0+20)), op(0x3c))
		__asm(push(i1), push((i0+24)), op(0x3c))
		__asm(push(i1), push((i0+28)), op(0x3c))
		__asm(push(i1), push((i0+32)), op(0x3c))
		__asm(push(i1), push((i0+36)), op(0x3c))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 3
		mstate.esp -= 4;(mstate.funcs[_AS3_Ptr])()
		return
	__asm(lbl("__Z18b2WeldJointDef_newPvP8_AS3_Val_state3"))
		i0 = mstate.eax
		mstate.esp += 4
		__asm(push(i0), push(_as3_ptr), op(0x3c))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z18b2WeldJointDef_newPvP8_AS3_Val_errState"))
		throw("Invalid state in __Z18b2WeldJointDef_newPvP8_AS3_Val")
	}
}



// Async
public const __Z22b2RevoluteJointDef_newPvP8_AS3_Val:int = regFunc(FSM__Z22b2RevoluteJointDef_newPvP8_AS3_Val.start)

public final class FSM__Z22b2RevoluteJointDef_newPvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z22b2RevoluteJointDef_newPvP8_AS3_Val = new FSM__Z22b2RevoluteJointDef_newPvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int

	public static const intRegCount:int = 3

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z22b2RevoluteJointDef_newPvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z22b2RevoluteJointDef_newPvP8_AS3_Val_errState",
			"__Z22b2RevoluteJointDef_newPvP8_AS3_Val_state0",
			"__Z22b2RevoluteJointDef_newPvP8_AS3_Val_state1",
			"__Z22b2RevoluteJointDef_newPvP8_AS3_Val_state2",
			"__Z22b2RevoluteJointDef_newPvP8_AS3_Val_state3"))
	__asm(lbl("__Z22b2RevoluteJointDef_newPvP8_AS3_Val_state0"))
	__asm(lbl("__Z22b2RevoluteJointDef_newPvP8_AS3_Val__XprivateX__BB364_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (64)
		i1 =  ((__xasm<int>(push(_as3_ptr), op(0x37))))
		mstate.esp -= 4
		__asm(push(i1), push(mstate.esp), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_Release])()
		return
	__asm(lbl("__Z22b2RevoluteJointDef_newPvP8_AS3_Val_state1"))
		mstate.esp += 4
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z22b2RevoluteJointDef_newPvP8_AS3_Val_state2"))
		i0 = mstate.eax
		mstate.esp += 4
		i1 =  (0)
		__asm(push(i1), push((i0+4)), op(0x3c))
		__asm(push(i1), push((i0+8)), op(0x3c))
		__asm(push(i1), push((i0+12)), op(0x3c))
		__asm(push(i1), push((i0+16)), op(0x3a))
		i2 =  (1)
		__asm(push(i2), push(i0), op(0x3c))
		__asm(push(i1), push((i0+20)), op(0x3c))
		__asm(push(i1), push((i0+24)), op(0x3c))
		__asm(push(i1), push((i0+28)), op(0x3c))
		__asm(push(i1), push((i0+32)), op(0x3c))
		__asm(push(i1), push((i0+36)), op(0x3c))
		__asm(push(i1), push((i0+44)), op(0x3c))
		__asm(push(i1), push((i0+48)), op(0x3c))
		__asm(push(i1), push((i0+60)), op(0x3c))
		__asm(push(i1), push((i0+56)), op(0x3c))
		__asm(push(i1), push((i0+40)), op(0x3a))
		__asm(push(i1), push((i0+52)), op(0x3a))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 3
		mstate.esp -= 4;(mstate.funcs[_AS3_Ptr])()
		return
	__asm(lbl("__Z22b2RevoluteJointDef_newPvP8_AS3_Val_state3"))
		i0 = mstate.eax
		mstate.esp += 4
		__asm(push(i0), push(_as3_ptr), op(0x3c))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z22b2RevoluteJointDef_newPvP8_AS3_Val_errState"))
		throw("Invalid state in __Z22b2RevoluteJointDef_newPvP8_AS3_Val")
	}
}



// Async
public const __Z20b2PulleyJointDef_newPvP8_AS3_Val:int = regFunc(FSM__Z20b2PulleyJointDef_newPvP8_AS3_Val.start)

public final class FSM__Z20b2PulleyJointDef_newPvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z20b2PulleyJointDef_newPvP8_AS3_Val = new FSM__Z20b2PulleyJointDef_newPvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int

	public static const intRegCount:int = 4

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z20b2PulleyJointDef_newPvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z20b2PulleyJointDef_newPvP8_AS3_Val_errState",
			"__Z20b2PulleyJointDef_newPvP8_AS3_Val_state0",
			"__Z20b2PulleyJointDef_newPvP8_AS3_Val_state1",
			"__Z20b2PulleyJointDef_newPvP8_AS3_Val_state2",
			"__Z20b2PulleyJointDef_newPvP8_AS3_Val_state3"))
	__asm(lbl("__Z20b2PulleyJointDef_newPvP8_AS3_Val_state0"))
	__asm(lbl("__Z20b2PulleyJointDef_newPvP8_AS3_Val__XprivateX__BB365_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (72)
		i1 =  ((__xasm<int>(push(_as3_ptr), op(0x37))))
		mstate.esp -= 4
		__asm(push(i1), push(mstate.esp), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_Release])()
		return
	__asm(lbl("__Z20b2PulleyJointDef_newPvP8_AS3_Val_state1"))
		mstate.esp += 4
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z20b2PulleyJointDef_newPvP8_AS3_Val_state2"))
		i0 = mstate.eax
		mstate.esp += 4
		i1 =  (0)
		__asm(push(i1), push((i0+4)), op(0x3c))
		__asm(push(i1), push((i0+8)), op(0x3c))
		__asm(push(i1), push((i0+12)), op(0x3c))
		i2 =  (4)
		__asm(push(i2), push(i0), op(0x3c))
		i2 =  (-1082130432)
		__asm(push(i2), push((i0+20)), op(0x3c))
		i3 =  (1065353216)
		__asm(push(i3), push((i0+24)), op(0x3c))
		__asm(push(i3), push((i0+28)), op(0x3c))
		__asm(push(i3), push((i0+32)), op(0x3c))
		__asm(push(i2), push((i0+36)), op(0x3c))
		__asm(push(i1), push((i0+40)), op(0x3c))
		__asm(push(i3), push((i0+44)), op(0x3c))
		__asm(push(i1), push((i0+48)), op(0x3c))
		__asm(push(i1), push((i0+52)), op(0x3c))
		__asm(push(i1), push((i0+56)), op(0x3c))
		__asm(push(i1), push((i0+60)), op(0x3c))
		__asm(push(i1), push((i0+64)), op(0x3c))
		__asm(push(i3), push((i0+68)), op(0x3c))
		i1 =  (1)
		__asm(push(i1), push((i0+16)), op(0x3a))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 3
		mstate.esp -= 4;(mstate.funcs[_AS3_Ptr])()
		return
	__asm(lbl("__Z20b2PulleyJointDef_newPvP8_AS3_Val_state3"))
		i0 = mstate.eax
		mstate.esp += 4
		__asm(push(i0), push(_as3_ptr), op(0x3c))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z20b2PulleyJointDef_newPvP8_AS3_Val_errState"))
		throw("Invalid state in __Z20b2PulleyJointDef_newPvP8_AS3_Val")
	}
}



// Async
public const __Z23b2PrismaticJointDef_newPvP8_AS3_Val:int = regFunc(FSM__Z23b2PrismaticJointDef_newPvP8_AS3_Val.start)

public final class FSM__Z23b2PrismaticJointDef_newPvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z23b2PrismaticJointDef_newPvP8_AS3_Val = new FSM__Z23b2PrismaticJointDef_newPvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int

	public static const intRegCount:int = 3

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z23b2PrismaticJointDef_newPvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z23b2PrismaticJointDef_newPvP8_AS3_Val_errState",
			"__Z23b2PrismaticJointDef_newPvP8_AS3_Val_state0",
			"__Z23b2PrismaticJointDef_newPvP8_AS3_Val_state1",
			"__Z23b2PrismaticJointDef_newPvP8_AS3_Val_state2",
			"__Z23b2PrismaticJointDef_newPvP8_AS3_Val_state3"))
	__asm(lbl("__Z23b2PrismaticJointDef_newPvP8_AS3_Val_state0"))
	__asm(lbl("__Z23b2PrismaticJointDef_newPvP8_AS3_Val__XprivateX__BB366_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (72)
		i1 =  ((__xasm<int>(push(_as3_ptr), op(0x37))))
		mstate.esp -= 4
		__asm(push(i1), push(mstate.esp), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_Release])()
		return
	__asm(lbl("__Z23b2PrismaticJointDef_newPvP8_AS3_Val_state1"))
		mstate.esp += 4
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z23b2PrismaticJointDef_newPvP8_AS3_Val_state2"))
		i0 = mstate.eax
		mstate.esp += 4
		i1 =  (0)
		__asm(push(i1), push((i0+4)), op(0x3c))
		__asm(push(i1), push((i0+8)), op(0x3c))
		__asm(push(i1), push((i0+12)), op(0x3c))
		__asm(push(i1), push((i0+16)), op(0x3a))
		i2 =  (2)
		__asm(push(i2), push(i0), op(0x3c))
		__asm(push(i1), push((i0+20)), op(0x3c))
		__asm(push(i1), push((i0+24)), op(0x3c))
		__asm(push(i1), push((i0+28)), op(0x3c))
		__asm(push(i1), push((i0+32)), op(0x3c))
		i2 =  (1065353216)
		__asm(push(i2), push((i0+36)), op(0x3c))
		__asm(push(i1), push((i0+40)), op(0x3c))
		__asm(push(i1), push((i0+44)), op(0x3c))
		__asm(push(i1), push((i0+48)), op(0x3a))
		__asm(push(i1), push((i0+52)), op(0x3c))
		__asm(push(i1), push((i0+56)), op(0x3c))
		__asm(push(i1), push((i0+60)), op(0x3a))
		__asm(push(i1), push((i0+64)), op(0x3c))
		__asm(push(i1), push((i0+68)), op(0x3c))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 3
		mstate.esp -= 4;(mstate.funcs[_AS3_Ptr])()
		return
	__asm(lbl("__Z23b2PrismaticJointDef_newPvP8_AS3_Val_state3"))
		i0 = mstate.eax
		mstate.esp += 4
		__asm(push(i0), push(_as3_ptr), op(0x3c))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z23b2PrismaticJointDef_newPvP8_AS3_Val_errState"))
		throw("Invalid state in __Z23b2PrismaticJointDef_newPvP8_AS3_Val")
	}
}



// Async
public const __Z19b2MouseJointDef_newPvP8_AS3_Val:int = regFunc(FSM__Z19b2MouseJointDef_newPvP8_AS3_Val.start)

public final class FSM__Z19b2MouseJointDef_newPvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z19b2MouseJointDef_newPvP8_AS3_Val = new FSM__Z19b2MouseJointDef_newPvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int

	public static const intRegCount:int = 3

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z19b2MouseJointDef_newPvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z19b2MouseJointDef_newPvP8_AS3_Val_errState",
			"__Z19b2MouseJointDef_newPvP8_AS3_Val_state0",
			"__Z19b2MouseJointDef_newPvP8_AS3_Val_state1",
			"__Z19b2MouseJointDef_newPvP8_AS3_Val_state2",
			"__Z19b2MouseJointDef_newPvP8_AS3_Val_state3"))
	__asm(lbl("__Z19b2MouseJointDef_newPvP8_AS3_Val_state0"))
	__asm(lbl("__Z19b2MouseJointDef_newPvP8_AS3_Val__XprivateX__BB367_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (40)
		i1 =  ((__xasm<int>(push(_as3_ptr), op(0x37))))
		mstate.esp -= 4
		__asm(push(i1), push(mstate.esp), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_Release])()
		return
	__asm(lbl("__Z19b2MouseJointDef_newPvP8_AS3_Val_state1"))
		mstate.esp += 4
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z19b2MouseJointDef_newPvP8_AS3_Val_state2"))
		i0 = mstate.eax
		mstate.esp += 4
		i1 =  (0)
		__asm(push(i1), push((i0+4)), op(0x3c))
		__asm(push(i1), push((i0+8)), op(0x3c))
		__asm(push(i1), push((i0+12)), op(0x3c))
		__asm(push(i1), push((i0+16)), op(0x3a))
		i2 =  (5)
		__asm(push(i2), push(i0), op(0x3c))
		__asm(push(i1), push((i0+20)), op(0x3c))
		__asm(push(i1), push((i0+24)), op(0x3c))
		__asm(push(i1), push((i0+28)), op(0x3c))
		i1 =  (1084227584)
		__asm(push(i1), push((i0+32)), op(0x3c))
		i1 =  (1060320051)
		__asm(push(i1), push((i0+36)), op(0x3c))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 3
		mstate.esp -= 4;(mstate.funcs[_AS3_Ptr])()
		return
	__asm(lbl("__Z19b2MouseJointDef_newPvP8_AS3_Val_state3"))
		i0 = mstate.eax
		mstate.esp += 4
		__asm(push(i0), push(_as3_ptr), op(0x3c))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z19b2MouseJointDef_newPvP8_AS3_Val_errState"))
		throw("Invalid state in __Z19b2MouseJointDef_newPvP8_AS3_Val")
	}
}



// Async
public const __Z18b2LineJointDef_newPvP8_AS3_Val:int = regFunc(FSM__Z18b2LineJointDef_newPvP8_AS3_Val.start)

public final class FSM__Z18b2LineJointDef_newPvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z18b2LineJointDef_newPvP8_AS3_Val = new FSM__Z18b2LineJointDef_newPvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int

	public static const intRegCount:int = 3

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z18b2LineJointDef_newPvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z18b2LineJointDef_newPvP8_AS3_Val_errState",
			"__Z18b2LineJointDef_newPvP8_AS3_Val_state0",
			"__Z18b2LineJointDef_newPvP8_AS3_Val_state1",
			"__Z18b2LineJointDef_newPvP8_AS3_Val_state2",
			"__Z18b2LineJointDef_newPvP8_AS3_Val_state3"))
	__asm(lbl("__Z18b2LineJointDef_newPvP8_AS3_Val_state0"))
	__asm(lbl("__Z18b2LineJointDef_newPvP8_AS3_Val__XprivateX__BB368_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (68)
		i1 =  ((__xasm<int>(push(_as3_ptr), op(0x37))))
		mstate.esp -= 4
		__asm(push(i1), push(mstate.esp), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_Release])()
		return
	__asm(lbl("__Z18b2LineJointDef_newPvP8_AS3_Val_state1"))
		mstate.esp += 4
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z18b2LineJointDef_newPvP8_AS3_Val_state2"))
		i0 = mstate.eax
		mstate.esp += 4
		i1 =  (0)
		__asm(push(i1), push((i0+4)), op(0x3c))
		__asm(push(i1), push((i0+8)), op(0x3c))
		__asm(push(i1), push((i0+12)), op(0x3c))
		__asm(push(i1), push((i0+16)), op(0x3a))
		i2 =  (7)
		__asm(push(i2), push(i0), op(0x3c))
		__asm(push(i1), push((i0+20)), op(0x3c))
		__asm(push(i1), push((i0+24)), op(0x3c))
		__asm(push(i1), push((i0+28)), op(0x3c))
		__asm(push(i1), push((i0+32)), op(0x3c))
		i2 =  (1065353216)
		__asm(push(i2), push((i0+36)), op(0x3c))
		__asm(push(i1), push((i0+40)), op(0x3c))
		__asm(push(i1), push((i0+44)), op(0x3a))
		__asm(push(i1), push((i0+48)), op(0x3c))
		__asm(push(i1), push((i0+52)), op(0x3c))
		__asm(push(i1), push((i0+56)), op(0x3a))
		__asm(push(i1), push((i0+60)), op(0x3c))
		__asm(push(i1), push((i0+64)), op(0x3c))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 3
		mstate.esp -= 4;(mstate.funcs[_AS3_Ptr])()
		return
	__asm(lbl("__Z18b2LineJointDef_newPvP8_AS3_Val_state3"))
		i0 = mstate.eax
		mstate.esp += 4
		__asm(push(i0), push(_as3_ptr), op(0x3c))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z18b2LineJointDef_newPvP8_AS3_Val_errState"))
		throw("Invalid state in __Z18b2LineJointDef_newPvP8_AS3_Val")
	}
}



// Async
public const __Z18b2GearJointDef_newPvP8_AS3_Val:int = regFunc(FSM__Z18b2GearJointDef_newPvP8_AS3_Val.start)

public final class FSM__Z18b2GearJointDef_newPvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z18b2GearJointDef_newPvP8_AS3_Val = new FSM__Z18b2GearJointDef_newPvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int

	public static const intRegCount:int = 3

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z18b2GearJointDef_newPvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z18b2GearJointDef_newPvP8_AS3_Val_errState",
			"__Z18b2GearJointDef_newPvP8_AS3_Val_state0",
			"__Z18b2GearJointDef_newPvP8_AS3_Val_state1",
			"__Z18b2GearJointDef_newPvP8_AS3_Val_state2",
			"__Z18b2GearJointDef_newPvP8_AS3_Val_state3"))
	__asm(lbl("__Z18b2GearJointDef_newPvP8_AS3_Val_state0"))
	__asm(lbl("__Z18b2GearJointDef_newPvP8_AS3_Val__XprivateX__BB369_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (32)
		i1 =  ((__xasm<int>(push(_as3_ptr), op(0x37))))
		mstate.esp -= 4
		__asm(push(i1), push(mstate.esp), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_Release])()
		return
	__asm(lbl("__Z18b2GearJointDef_newPvP8_AS3_Val_state1"))
		mstate.esp += 4
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z18b2GearJointDef_newPvP8_AS3_Val_state2"))
		i0 = mstate.eax
		mstate.esp += 4
		i1 =  (0)
		__asm(push(i1), push((i0+4)), op(0x3c))
		__asm(push(i1), push((i0+8)), op(0x3c))
		__asm(push(i1), push((i0+12)), op(0x3c))
		__asm(push(i1), push((i0+16)), op(0x3a))
		i2 =  (6)
		__asm(push(i2), push(i0), op(0x3c))
		__asm(push(i1), push((i0+20)), op(0x3c))
		__asm(push(i1), push((i0+24)), op(0x3c))
		i1 =  (1065353216)
		__asm(push(i1), push((i0+28)), op(0x3c))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 3
		mstate.esp -= 4;(mstate.funcs[_AS3_Ptr])()
		return
	__asm(lbl("__Z18b2GearJointDef_newPvP8_AS3_Val_state3"))
		i0 = mstate.eax
		mstate.esp += 4
		__asm(push(i0), push(_as3_ptr), op(0x3c))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z18b2GearJointDef_newPvP8_AS3_Val_errState"))
		throw("Invalid state in __Z18b2GearJointDef_newPvP8_AS3_Val")
	}
}



// Async
public const __Z22b2DistanceJointDef_newPvP8_AS3_Val:int = regFunc(FSM__Z22b2DistanceJointDef_newPvP8_AS3_Val.start)

public final class FSM__Z22b2DistanceJointDef_newPvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z22b2DistanceJointDef_newPvP8_AS3_Val = new FSM__Z22b2DistanceJointDef_newPvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int

	public static const intRegCount:int = 3

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z22b2DistanceJointDef_newPvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z22b2DistanceJointDef_newPvP8_AS3_Val_errState",
			"__Z22b2DistanceJointDef_newPvP8_AS3_Val_state0",
			"__Z22b2DistanceJointDef_newPvP8_AS3_Val_state1",
			"__Z22b2DistanceJointDef_newPvP8_AS3_Val_state2",
			"__Z22b2DistanceJointDef_newPvP8_AS3_Val_state3"))
	__asm(lbl("__Z22b2DistanceJointDef_newPvP8_AS3_Val_state0"))
	__asm(lbl("__Z22b2DistanceJointDef_newPvP8_AS3_Val__XprivateX__BB370_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (48)
		i1 =  ((__xasm<int>(push(_as3_ptr), op(0x37))))
		mstate.esp -= 4
		__asm(push(i1), push(mstate.esp), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_Release])()
		return
	__asm(lbl("__Z22b2DistanceJointDef_newPvP8_AS3_Val_state1"))
		mstate.esp += 4
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z22b2DistanceJointDef_newPvP8_AS3_Val_state2"))
		i0 = mstate.eax
		mstate.esp += 4
		i1 =  (0)
		__asm(push(i1), push((i0+4)), op(0x3c))
		__asm(push(i1), push((i0+8)), op(0x3c))
		__asm(push(i1), push((i0+12)), op(0x3c))
		__asm(push(i1), push((i0+16)), op(0x3a))
		i2 =  (3)
		__asm(push(i2), push(i0), op(0x3c))
		__asm(push(i1), push((i0+20)), op(0x3c))
		__asm(push(i1), push((i0+24)), op(0x3c))
		__asm(push(i1), push((i0+28)), op(0x3c))
		__asm(push(i1), push((i0+32)), op(0x3c))
		i2 =  (1065353216)
		__asm(push(i2), push((i0+36)), op(0x3c))
		__asm(push(i1), push((i0+40)), op(0x3c))
		__asm(push(i1), push((i0+44)), op(0x3c))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 3
		mstate.esp -= 4;(mstate.funcs[_AS3_Ptr])()
		return
	__asm(lbl("__Z22b2DistanceJointDef_newPvP8_AS3_Val_state3"))
		i0 = mstate.eax
		mstate.esp += 4
		__asm(push(i0), push(_as3_ptr), op(0x3c))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z22b2DistanceJointDef_newPvP8_AS3_Val_errState"))
		throw("Invalid state in __Z22b2DistanceJointDef_newPvP8_AS3_Val")
	}
}



// Async
public const __Z18b2PolygonShape_newPvP8_AS3_Val:int = regFunc(FSM__Z18b2PolygonShape_newPvP8_AS3_Val.start)

public final class FSM__Z18b2PolygonShape_newPvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z18b2PolygonShape_newPvP8_AS3_Val = new FSM__Z18b2PolygonShape_newPvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2
	public var f0:Number

	public static const NumberRegCount:int = 1
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z18b2PolygonShape_newPvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z18b2PolygonShape_newPvP8_AS3_Val_errState",
			"__Z18b2PolygonShape_newPvP8_AS3_Val_state0",
			"__Z18b2PolygonShape_newPvP8_AS3_Val_state1",
			"__Z18b2PolygonShape_newPvP8_AS3_Val_state2",
			"__Z18b2PolygonShape_newPvP8_AS3_Val_state3"))
	__asm(lbl("__Z18b2PolygonShape_newPvP8_AS3_Val_state0"))
	__asm(lbl("__Z18b2PolygonShape_newPvP8_AS3_Val__XprivateX__BB371_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (156)
		i1 =  ((__xasm<int>(push(_as3_ptr), op(0x37))))
		mstate.esp -= 4
		__asm(push(i1), push(mstate.esp), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_Release])()
		return
	__asm(lbl("__Z18b2PolygonShape_newPvP8_AS3_Val_state1"))
		mstate.esp += 4
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		i0 =  (__ZTV14b2PolygonShape)
		state = 2
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z18b2PolygonShape_newPvP8_AS3_Val_state2"))
		i1 = mstate.eax
		mstate.esp += 4
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		i0 =  (2)
		__asm(push(i0), push((i1+4)), op(0x3c))
		f0 =  ((__xasm<Number>(push(_b2_polygonRadius), op(0x38))))
		__asm(push(f0), push((i1+8)), op(0x3d))
		i0 =  (0)
		__asm(push(i0), push((i1+152)), op(0x3c))
		__asm(push(i0), push((i1+16)), op(0x3c))
		__asm(push(i0), push((i1+20)), op(0x3c))
		mstate.esp -= 4
		__asm(push(i1), push(mstate.esp), op(0x3c))
		state = 3
		mstate.esp -= 4;(mstate.funcs[_AS3_Ptr])()
		return
	__asm(lbl("__Z18b2PolygonShape_newPvP8_AS3_Val_state3"))
		i0 = mstate.eax
		mstate.esp += 4
		__asm(push(i0), push(_as3_ptr), op(0x3c))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z18b2PolygonShape_newPvP8_AS3_Val_errState"))
		throw("Invalid state in __Z18b2PolygonShape_newPvP8_AS3_Val")
	}
}



// Async
public const __Z17b2CircleShape_newPvP8_AS3_Val:int = regFunc(FSM__Z17b2CircleShape_newPvP8_AS3_Val.start)

public final class FSM__Z17b2CircleShape_newPvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z17b2CircleShape_newPvP8_AS3_Val = new FSM__Z17b2CircleShape_newPvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int

	public static const intRegCount:int = 2

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z17b2CircleShape_newPvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z17b2CircleShape_newPvP8_AS3_Val_errState",
			"__Z17b2CircleShape_newPvP8_AS3_Val_state0",
			"__Z17b2CircleShape_newPvP8_AS3_Val_state1",
			"__Z17b2CircleShape_newPvP8_AS3_Val_state2",
			"__Z17b2CircleShape_newPvP8_AS3_Val_state3"))
	__asm(lbl("__Z17b2CircleShape_newPvP8_AS3_Val_state0"))
	__asm(lbl("__Z17b2CircleShape_newPvP8_AS3_Val__XprivateX__BB372_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (24)
		i1 =  ((__xasm<int>(push(_as3_ptr), op(0x37))))
		mstate.esp -= 4
		__asm(push(i1), push(mstate.esp), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_Release])()
		return
	__asm(lbl("__Z17b2CircleShape_newPvP8_AS3_Val_state1"))
		mstate.esp += 4
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		i0 =  (__ZTV13b2CircleShape)
		state = 2
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z17b2CircleShape_newPvP8_AS3_Val_state2"))
		i1 = mstate.eax
		mstate.esp += 4
		i0 =  (i0 + 8)
		__asm(push(i0), push(i1), op(0x3c))
		i0 =  (0)
		__asm(push(i0), push((i1+4)), op(0x3c))
		__asm(push(i0), push((i1+8)), op(0x3c))
		__asm(push(i0), push((i1+16)), op(0x3c))
		__asm(push(i0), push((i1+20)), op(0x3c))
		mstate.esp -= 4
		__asm(push(i1), push(mstate.esp), op(0x3c))
		state = 3
		mstate.esp -= 4;(mstate.funcs[_AS3_Ptr])()
		return
	__asm(lbl("__Z17b2CircleShape_newPvP8_AS3_Val_state3"))
		i0 = mstate.eax
		mstate.esp += 4
		__asm(push(i0), push(_as3_ptr), op(0x3c))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z17b2CircleShape_newPvP8_AS3_Val_errState"))
		throw("Invalid state in __Z17b2CircleShape_newPvP8_AS3_Val")
	}
}



// Async
public const __Z13b2BodyDef_newPvP8_AS3_Val:int = regFunc(FSM__Z13b2BodyDef_newPvP8_AS3_Val.start)

public final class FSM__Z13b2BodyDef_newPvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z13b2BodyDef_newPvP8_AS3_Val = new FSM__Z13b2BodyDef_newPvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int

	public static const intRegCount:int = 3

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z13b2BodyDef_newPvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z13b2BodyDef_newPvP8_AS3_Val_errState",
			"__Z13b2BodyDef_newPvP8_AS3_Val_state0",
			"__Z13b2BodyDef_newPvP8_AS3_Val_state1",
			"__Z13b2BodyDef_newPvP8_AS3_Val_state2",
			"__Z13b2BodyDef_newPvP8_AS3_Val_state3"))
	__asm(lbl("__Z13b2BodyDef_newPvP8_AS3_Val_state0"))
	__asm(lbl("__Z13b2BodyDef_newPvP8_AS3_Val__XprivateX__BB373_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (52)
		i1 =  ((__xasm<int>(push(_as3_ptr), op(0x37))))
		mstate.esp -= 4
		__asm(push(i1), push(mstate.esp), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_Release])()
		return
	__asm(lbl("__Z13b2BodyDef_newPvP8_AS3_Val_state1"))
		mstate.esp += 4
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z13b2BodyDef_newPvP8_AS3_Val_state2"))
		i0 = mstate.eax
		mstate.esp += 4
		i1 =  (0)
		__asm(push(i1), push((i0+44)), op(0x3c))
		__asm(push(i1), push((i0+4)), op(0x3c))
		__asm(push(i1), push((i0+8)), op(0x3c))
		__asm(push(i1), push((i0+12)), op(0x3c))
		__asm(push(i1), push((i0+16)), op(0x3c))
		__asm(push(i1), push((i0+20)), op(0x3c))
		__asm(push(i1), push((i0+24)), op(0x3c))
		__asm(push(i1), push((i0+28)), op(0x3c))
		__asm(push(i1), push((i0+32)), op(0x3c))
		i2 =  (1)
		__asm(push(i2), push((i0+36)), op(0x3a))
		__asm(push(i2), push((i0+37)), op(0x3a))
		__asm(push(i1), push((i0+38)), op(0x3a))
		__asm(push(i1), push((i0+39)), op(0x3a))
		__asm(push(i1), push(i0), op(0x3c))
		__asm(push(i2), push((i0+40)), op(0x3a))
		i1 =  (1065353216)
		__asm(push(i1), push((i0+48)), op(0x3c))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 3
		mstate.esp -= 4;(mstate.funcs[_AS3_Ptr])()
		return
	__asm(lbl("__Z13b2BodyDef_newPvP8_AS3_Val_state3"))
		i0 = mstate.eax
		mstate.esp += 4
		__asm(push(i0), push(_as3_ptr), op(0x3c))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z13b2BodyDef_newPvP8_AS3_Val_errState"))
		throw("Invalid state in __Z13b2BodyDef_newPvP8_AS3_Val")
	}
}



// Async
public const __Z17b2Body_ApplyForcePvP8_AS3_Val:int = regFunc(FSM__Z17b2Body_ApplyForcePvP8_AS3_Val.start)

public final class FSM__Z17b2Body_ApplyForcePvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z17b2Body_ApplyForcePvP8_AS3_Val = new FSM__Z17b2Body_ApplyForcePvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int

	public static const intRegCount:int = 8
	public var f0:Number, f1:Number, f2:Number, f3:Number

	public static const NumberRegCount:int = 4
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z17b2Body_ApplyForcePvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z17b2Body_ApplyForcePvP8_AS3_Val_errState",
			"__Z17b2Body_ApplyForcePvP8_AS3_Val_state0",
			"__Z17b2Body_ApplyForcePvP8_AS3_Val_state1",
			"__Z17b2Body_ApplyForcePvP8_AS3_Val_state2"))
	__asm(lbl("__Z17b2Body_ApplyForcePvP8_AS3_Val_state0"))
	__asm(lbl("__Z17b2Body_ApplyForcePvP8_AS3_Val__XprivateX__BB374_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 24
		i0 =  ((mstate.ebp+-24))
		i1 =  ((mstate.ebp+-16))
		mstate.esp -= 28
		i2 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i3 =  (__2E_str44251)
		i4 =  ((mstate.ebp+-4))
		i5 =  (i0 + 4)
		i6 =  (i1 + 4)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i3), push((mstate.esp+4)), op(0x3c))
		__asm(push(i4), push((mstate.esp+8)), op(0x3c))
		__asm(push(i1), push((mstate.esp+12)), op(0x3c))
		__asm(push(i6), push((mstate.esp+16)), op(0x3c))
		__asm(push(i0), push((mstate.esp+20)), op(0x3c))
		__asm(push(i5), push((mstate.esp+24)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_ArrayValue])()
		return
	__asm(lbl("__Z17b2Body_ApplyForcePvP8_AS3_Val_state1"))
		mstate.esp += 28
		i2 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		i3 =  ((__xasm<int>(push(i2), op(0x37))))
		__asm(push(i3!=2), iftrue, target("__Z17b2Body_ApplyForcePvP8_AS3_Val__XprivateX__BB374_4_F"))
	__asm(lbl("__Z17b2Body_ApplyForcePvP8_AS3_Val__XprivateX__BB374_1_F"))
		i3 =  ((__xasm<int>(push((i2+4)), op(0x36))))
		i4 =  (i2 + 4)
		i7 =  (i3 & 2)
		__asm(push(i7!=0), iftrue, target("__Z17b2Body_ApplyForcePvP8_AS3_Val__XprivateX__BB374_3_F"))
	__asm(lbl("__Z17b2Body_ApplyForcePvP8_AS3_Val__XprivateX__BB374_2_F"))
		i7 =  (0)
		i3 =  (i3 | 2)
		__asm(push(i3), push(i4), op(0x3b))
		__asm(push(i7), push((i2+148)), op(0x3c))
	__asm(lbl("__Z17b2Body_ApplyForcePvP8_AS3_Val__XprivateX__BB374_3_F"))
		f0 =  ((__xasm<Number>(push((i2+84)), op(0x38))))
		f1 =  ((__xasm<Number>(push(i1), op(0x38))))
		f0 =  (f0 + f1)
		f0 =  f0/*fround*/
		__asm(push(f0), push((i2+84)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i2+88)), op(0x38))))
		f1 =  ((__xasm<Number>(push(i6), op(0x38))))
		f0 =  (f0 + f1)
		f0 =  f0/*fround*/
		__asm(push(f0), push((i2+88)), op(0x3d))
		f0 =  ((__xasm<Number>(push(i5), op(0x38))))
		f1 =  ((__xasm<Number>(push((i2+56)), op(0x38))))
		f2 =  ((__xasm<Number>(push(i0), op(0x38))))
		f3 =  ((__xasm<Number>(push((i2+52)), op(0x38))))
		f0 =  (f0 - f1)
		f1 =  (f2 - f3)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f2 =  ((__xasm<Number>(push(i6), op(0x38))))
		f1 =  f1/*fextend*/
		f3 =  ((__xasm<Number>(push(i1), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f0 * f3)
		f1 =  (f1 * f2)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  (f1 - f0)
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push((i2+92)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f1 + f0)
		f0 =  f0/*fround*/
		__asm(push(f0), push((i2+92)), op(0x3d))
	__asm(lbl("__Z17b2Body_ApplyForcePvP8_AS3_Val__XprivateX__BB374_4_F"))
		state = 2
		mstate.esp -= 4;(mstate.funcs[_AS3_Null])()
		return
	__asm(lbl("__Z17b2Body_ApplyForcePvP8_AS3_Val_state2"))
		i0 = mstate.eax
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z17b2Body_ApplyForcePvP8_AS3_Val_errState"))
		throw("Invalid state in __Z17b2Body_ApplyForcePvP8_AS3_Val")
	}
}



// Async
public const __Z14b2Body_SetTypePvP8_AS3_Val:int = regFunc(FSM__Z14b2Body_SetTypePvP8_AS3_Val.start)

public final class FSM__Z14b2Body_SetTypePvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z14b2Body_SetTypePvP8_AS3_Val = new FSM__Z14b2Body_SetTypePvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int

	public static const intRegCount:int = 4

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z14b2Body_SetTypePvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z14b2Body_SetTypePvP8_AS3_Val_errState",
			"__Z14b2Body_SetTypePvP8_AS3_Val_state0",
			"__Z14b2Body_SetTypePvP8_AS3_Val_state1",
			"__Z14b2Body_SetTypePvP8_AS3_Val_state2",
			"__Z14b2Body_SetTypePvP8_AS3_Val_state3"))
	__asm(lbl("__Z14b2Body_SetTypePvP8_AS3_Val_state0"))
	__asm(lbl("__Z14b2Body_SetTypePvP8_AS3_Val__XprivateX__BB375_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 8
		i0 =  (__2E_str74281)
		mstate.esp -= 16
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((mstate.ebp+-8))
		i3 =  ((mstate.ebp+-4))
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i3), push((mstate.esp+8)), op(0x3c))
		__asm(push(i2), push((mstate.esp+12)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_ArrayValue])()
		return
	__asm(lbl("__Z14b2Body_SetTypePvP8_AS3_Val_state1"))
		mstate.esp += 16
		i0 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+-8)), op(0x37))))
		i2 =  ((__xasm<int>(push(i0), op(0x37))))
		i3 = i0
		__asm(push(i2==i1), iftrue, target("__Z14b2Body_SetTypePvP8_AS3_Val__XprivateX__BB375_8_F"))
	__asm(lbl("__Z14b2Body_SetTypePvP8_AS3_Val__XprivateX__BB375_1_F"))
		__asm(push(i1), push(i0), op(0x3c))
		mstate.esp -= 4
		__asm(push(i3), push(mstate.esp), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM__ZN6b2Body13ResetMassDataEv.start()
		return
	__asm(lbl("__Z14b2Body_SetTypePvP8_AS3_Val_state2"))
		mstate.esp += 4
		i0 =  ((__xasm<int>(push(i0), op(0x37))))
		__asm(push(i0!=0), iftrue, target("__Z14b2Body_SetTypePvP8_AS3_Val__XprivateX__BB375_3_F"))
	__asm(lbl("__Z14b2Body_SetTypePvP8_AS3_Val__XprivateX__BB375_2_F"))
		i0 =  (0)
		__asm(push(i0), push((i3+72)), op(0x3c))
		__asm(push(i0), push((i3+76)), op(0x3c))
		__asm(push(i0), push((i3+80)), op(0x3c))
	__asm(lbl("__Z14b2Body_SetTypePvP8_AS3_Val__XprivateX__BB375_3_F"))
		i0 =  ((__xasm<int>(push((i3+4)), op(0x36))))
		i1 =  (i3 + 4)
		i2 =  (i0 & 2)
		__asm(push(i2!=0), iftrue, target("__Z14b2Body_SetTypePvP8_AS3_Val__XprivateX__BB375_5_F"))
	__asm(lbl("__Z14b2Body_SetTypePvP8_AS3_Val__XprivateX__BB375_4_F"))
		i2 =  (0)
		i0 =  (i0 | 2)
		__asm(push(i0), push(i1), op(0x3b))
		__asm(push(i2), push((i3+148)), op(0x3c))
	__asm(lbl("__Z14b2Body_SetTypePvP8_AS3_Val__XprivateX__BB375_5_F"))
		i0 =  (0)
		__asm(push(i0), push((i3+84)), op(0x3c))
		__asm(push(i0), push((i3+88)), op(0x3c))
		__asm(push(i0), push((i3+92)), op(0x3c))
		i0 =  ((__xasm<int>(push((i3+120)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__Z14b2Body_SetTypePvP8_AS3_Val__XprivateX__BB375_8_F"))
	__asm(jump, target("__Z14b2Body_SetTypePvP8_AS3_Val__XprivateX__BB375_6_F"), lbl("__Z14b2Body_SetTypePvP8_AS3_Val__XprivateX__BB375_6_B"), label, lbl("__Z14b2Body_SetTypePvP8_AS3_Val__XprivateX__BB375_6_F")); 
		i1 =  ((__xasm<int>(push((i0+4)), op(0x37))))
		i2 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		i2 =  (i2 | 8)
		__asm(push(i2), push((i1+4)), op(0x3c))
		i0 =  ((__xasm<int>(push((i0+12)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__Z14b2Body_SetTypePvP8_AS3_Val__XprivateX__BB375_8_F"))
	__asm(lbl("__Z14b2Body_SetTypePvP8_AS3_Val__XprivateX__BB375_7_F"))
		__asm(jump, target("__Z14b2Body_SetTypePvP8_AS3_Val__XprivateX__BB375_6_B"))
	__asm(lbl("__Z14b2Body_SetTypePvP8_AS3_Val__XprivateX__BB375_8_F"))
		state = 3
		mstate.esp -= 4;(mstate.funcs[_AS3_Null])()
		return
	__asm(lbl("__Z14b2Body_SetTypePvP8_AS3_Val_state3"))
		i0 = mstate.eax
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z14b2Body_SetTypePvP8_AS3_Val_errState"))
		throw("Invalid state in __Z14b2Body_SetTypePvP8_AS3_Val")
	}
}



// Async
public const __Z16b2Body_SetActivePvP8_AS3_Val:int = regFunc(FSM__Z16b2Body_SetActivePvP8_AS3_Val.start)

public final class FSM__Z16b2Body_SetActivePvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z16b2Body_SetActivePvP8_AS3_Val = new FSM__Z16b2Body_SetActivePvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
	public var i8:int, i9:int, i10:int, i11:int, i12:int, i13:int, i14:int, i15:int
	public var i16:int, i17:int

	public static const intRegCount:int = 18

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z16b2Body_SetActivePvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z16b2Body_SetActivePvP8_AS3_Val_errState",
			"__Z16b2Body_SetActivePvP8_AS3_Val_state0",
			"__Z16b2Body_SetActivePvP8_AS3_Val_state1",
			"__Z16b2Body_SetActivePvP8_AS3_Val_state2",
			"__Z16b2Body_SetActivePvP8_AS3_Val_state3",
			"__Z16b2Body_SetActivePvP8_AS3_Val_state4",
			"__Z16b2Body_SetActivePvP8_AS3_Val_state5",
			"__Z16b2Body_SetActivePvP8_AS3_Val_state6",
			"__Z16b2Body_SetActivePvP8_AS3_Val_state7"))
	__asm(lbl("__Z16b2Body_SetActivePvP8_AS3_Val_state0"))
	__asm(lbl("__Z16b2Body_SetActivePvP8_AS3_Val__XprivateX__BB376_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 8
		i0 =  (__2E_str74281)
		mstate.esp -= 16
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((mstate.ebp+-8))
		i3 =  ((mstate.ebp+-4))
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i3), push((mstate.esp+8)), op(0x3c))
		__asm(push(i2), push((mstate.esp+12)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_ArrayValue])()
		return
	__asm(lbl("__Z16b2Body_SetActivePvP8_AS3_Val_state1"))
		mstate.esp += 16
		i0 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+96)), op(0x37))))
		i2 =  ((__xasm<int>(push((i1+102868)), op(0x37))))
		i3 =  ((__xasm<int>(push((mstate.ebp+-8)), op(0x37))))
		i4 =  (i0 + 96)
		i2 =  (i2 & 2)
		__asm(push(i2==0), iftrue, target("__Z16b2Body_SetActivePvP8_AS3_Val__XprivateX__BB376_2_F"))
	__asm(lbl("__Z16b2Body_SetActivePvP8_AS3_Val__XprivateX__BB376_1_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i3 =  (__2E_str54261)
		i4 =  (__ZZN6b2Body9SetActiveEbE8__func__)
		i2 =  (__2E_str53260)
		i5 =  (426)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i3), push((mstate.esp+8)), op(0x3c))
		__asm(push(i4), push((mstate.esp+12)), op(0x3c))
		__asm(push(i2), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z16b2Body_SetActivePvP8_AS3_Val_state2"))
		mstate.esp += 24
		state = 3
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z16b2Body_SetActivePvP8_AS3_Val_state3"))
	__asm(lbl("__Z16b2Body_SetActivePvP8_AS3_Val__XprivateX__BB376_2_F"))
		i2 =  ((__xasm<int>(push((i0+4)), op(0x36))))
		i5 =  (i0 + 4)
		i6 =  ((i3==1) ? 1 : 0)
		i7 =  (i2 >>> 5)
		i6 =  (i6 & 1)
		i7 =  (i7 & 1)
		__asm(push(i7==i6), iftrue, target("__Z16b2Body_SetActivePvP8_AS3_Val__XprivateX__BB376_26_F"))
	__asm(lbl("__Z16b2Body_SetActivePvP8_AS3_Val__XprivateX__BB376_3_F"))
		__asm(push(i3!=1), iftrue, target("__Z16b2Body_SetActivePvP8_AS3_Val__XprivateX__BB376_8_F"))
	__asm(lbl("__Z16b2Body_SetActivePvP8_AS3_Val__XprivateX__BB376_4_F"))
		i2 =  (i2 | 32)
		__asm(push(i2), push(i5), op(0x3b))
		i2 =  ((__xasm<int>(push((i0+108)), op(0x37))))
		i1 =  (i1 + 102872)
		__asm(push(i2==0), iftrue, target("__Z16b2Body_SetActivePvP8_AS3_Val__XprivateX__BB376_26_F"))
	__asm(lbl("__Z16b2Body_SetActivePvP8_AS3_Val__XprivateX__BB376_5_F"))
		i0 =  (i0 + 12)
	__asm(jump, target("__Z16b2Body_SetActivePvP8_AS3_Val__XprivateX__BB376_6_F"), lbl("__Z16b2Body_SetActivePvP8_AS3_Val__XprivateX__BB376_6_B"), label, lbl("__Z16b2Body_SetActivePvP8_AS3_Val__XprivateX__BB376_6_F")); 
		mstate.esp -= 12
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i0), push((mstate.esp+8)), op(0x3c))
		state = 4
		mstate.esp -= 4;FSM__ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform.start()
		return
	__asm(lbl("__Z16b2Body_SetActivePvP8_AS3_Val_state4"))
		mstate.esp += 12
		i2 =  ((__xasm<int>(push((i2+8)), op(0x37))))
		__asm(push(i2==0), iftrue, target("__Z16b2Body_SetActivePvP8_AS3_Val__XprivateX__BB376_26_F"))
	__asm(lbl("__Z16b2Body_SetActivePvP8_AS3_Val__XprivateX__BB376_7_F"))
		__asm(jump, target("__Z16b2Body_SetActivePvP8_AS3_Val__XprivateX__BB376_6_B"))
	__asm(lbl("__Z16b2Body_SetActivePvP8_AS3_Val__XprivateX__BB376_8_F"))
		i2 =  (i2 & -33)
		__asm(push(i2), push(i5), op(0x3b))
		i2 =  ((__xasm<int>(push((i0+108)), op(0x37))))
		__asm(push(i2==0), iftrue, target("__Z16b2Body_SetActivePvP8_AS3_Val__XprivateX__BB376_22_F"))
	__asm(lbl("__Z16b2Body_SetActivePvP8_AS3_Val__XprivateX__BB376_9_F"))
		i3 =  (i1 + 102912)
		i5 =  (i1 + 102900)
		i6 =  (i1 + 102904)
		i1 =  (i1 + 102872)
	__asm(jump, target("__Z16b2Body_SetActivePvP8_AS3_Val__XprivateX__BB376_10_F"), lbl("__Z16b2Body_SetActivePvP8_AS3_Val__XprivateX__BB376_10_B"), label, lbl("__Z16b2Body_SetActivePvP8_AS3_Val__XprivateX__BB376_10_F")); 
		i7 =  ((__xasm<int>(push((i2+32)), op(0x37))))
		i8 =  (i2 + 32)
		__asm(push(i7<1), iftrue, target("__Z16b2Body_SetActivePvP8_AS3_Val__XprivateX__BB376_20_F"))
	__asm(lbl("__Z16b2Body_SetActivePvP8_AS3_Val__XprivateX__BB376_11_F"))
		i7 =  (0)
		i9 =  (24)
		i10 =  (i2 + 28)
	__asm(jump, target("__Z16b2Body_SetActivePvP8_AS3_Val__XprivateX__BB376_12_F"), lbl("__Z16b2Body_SetActivePvP8_AS3_Val__XprivateX__BB376_12_B"), label, lbl("__Z16b2Body_SetActivePvP8_AS3_Val__XprivateX__BB376_12_F")); 
		i11 =  ((__xasm<int>(push(i10), op(0x37))))
		i11 =  (i11 + i9)
		i12 =  ((__xasm<int>(push(i11), op(0x37))))
		i13 =  ((__xasm<int>(push(i3), op(0x37))))
		__asm(push(i13<1), iftrue, target("__Z16b2Body_SetActivePvP8_AS3_Val__XprivateX__BB376_16_F"))
	__asm(lbl("__Z16b2Body_SetActivePvP8_AS3_Val__XprivateX__BB376_13_F"))
		i14 =  (0)
		i15 =  ((__xasm<int>(push(i6), op(0x37))))
	__asm(jump, target("__Z16b2Body_SetActivePvP8_AS3_Val__XprivateX__BB376_14_F"), lbl("__Z16b2Body_SetActivePvP8_AS3_Val__XprivateX__BB376_14_B"), label, lbl("__Z16b2Body_SetActivePvP8_AS3_Val__XprivateX__BB376_14_F")); 
		i16 =  ((__xasm<int>(push(i15), op(0x37))))
		i17 = i15
		__asm(push(i16!=i12), iftrue, target("__Z16b2Body_SetActivePvP8_AS3_Val__XprivateX__BB376_18_F"))
	__asm(lbl("__Z16b2Body_SetActivePvP8_AS3_Val__XprivateX__BB376_15_F"))
		i14 =  (-1)
		__asm(push(i14), push(i17), op(0x3c))
		__asm(jump, target("__Z16b2Body_SetActivePvP8_AS3_Val__XprivateX__BB376_16_F"))
	__asm(jump, target("__Z16b2Body_SetActivePvP8_AS3_Val__XprivateX__BB376_16_F"), lbl("__Z16b2Body_SetActivePvP8_AS3_Val__XprivateX__BB376_16_B"), label, lbl("__Z16b2Body_SetActivePvP8_AS3_Val__XprivateX__BB376_16_F")); 
		i13 =  (-1)
		i14 =  ((__xasm<int>(push(i5), op(0x37))))
		i14 =  (i14 + -1)
		__asm(push(i14), push(i5), op(0x3c))
		mstate.esp -= 8
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i12), push((mstate.esp+4)), op(0x3c))
		state = 5
		mstate.esp -= 4;FSM__ZN13b2DynamicTree12DestroyProxyEi.start()
		return
	__asm(lbl("__Z16b2Body_SetActivePvP8_AS3_Val_state5"))
		mstate.esp += 8
		__asm(push(i13), push(i11), op(0x3c))
		i11 =  ((__xasm<int>(push(i8), op(0x37))))
		i9 =  (i9 + 28)
		i7 =  (i7 + 1)
		__asm(push(i11<=i7), iftrue, target("__Z16b2Body_SetActivePvP8_AS3_Val__XprivateX__BB376_20_F"))
		__asm(jump, target("__Z16b2Body_SetActivePvP8_AS3_Val__XprivateX__BB376_17_F"))
	__asm(lbl("__Z16b2Body_SetActivePvP8_AS3_Val__XprivateX__BB376_17_F"))
		__asm(jump, target("__Z16b2Body_SetActivePvP8_AS3_Val__XprivateX__BB376_12_B"))
	__asm(lbl("__Z16b2Body_SetActivePvP8_AS3_Val__XprivateX__BB376_18_F"))
		i15 =  (i15 + 4)
		i14 =  (i14 + 1)
		__asm(push(i13<=i14), iftrue, target("__Z16b2Body_SetActivePvP8_AS3_Val__XprivateX__BB376_16_B"))
	__asm(lbl("__Z16b2Body_SetActivePvP8_AS3_Val__XprivateX__BB376_19_F"))
		__asm(jump, target("__Z16b2Body_SetActivePvP8_AS3_Val__XprivateX__BB376_14_B"))
	__asm(lbl("__Z16b2Body_SetActivePvP8_AS3_Val__XprivateX__BB376_20_F"))
		i7 =  (0)
		__asm(push(i7), push(i8), op(0x3c))
		i2 =  ((__xasm<int>(push((i2+8)), op(0x37))))
		__asm(push(i2==0), iftrue, target("__Z16b2Body_SetActivePvP8_AS3_Val__XprivateX__BB376_22_F"))
	__asm(lbl("__Z16b2Body_SetActivePvP8_AS3_Val__XprivateX__BB376_21_F"))
		__asm(jump, target("__Z16b2Body_SetActivePvP8_AS3_Val__XprivateX__BB376_10_B"))
	__asm(lbl("__Z16b2Body_SetActivePvP8_AS3_Val__XprivateX__BB376_22_F"))
		i1 =  ((__xasm<int>(push((i0+120)), op(0x37))))
		i0 =  (i0 + 120)
		__asm(push(i1==0), iftrue, target("__Z16b2Body_SetActivePvP8_AS3_Val__XprivateX__BB376_25_F"))
	__asm(jump, target("__Z16b2Body_SetActivePvP8_AS3_Val__XprivateX__BB376_23_F"), lbl("__Z16b2Body_SetActivePvP8_AS3_Val__XprivateX__BB376_23_B"), label, lbl("__Z16b2Body_SetActivePvP8_AS3_Val__XprivateX__BB376_23_F")); 
		i2 =  ((__xasm<int>(push(i4), op(0x37))))
		i3 =  ((__xasm<int>(push((i1+12)), op(0x37))))
		i1 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		mstate.esp -= 8
		i2 =  (i2 + 102872)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 6
		mstate.esp -= 4;FSM__ZN16b2ContactManager7DestroyEP9b2Contact.start()
		return
	__asm(lbl("__Z16b2Body_SetActivePvP8_AS3_Val_state6"))
		mstate.esp += 8
		__asm(push(i3==0), iftrue, target("__Z16b2Body_SetActivePvP8_AS3_Val__XprivateX__BB376_25_F"))
	__asm(lbl("__Z16b2Body_SetActivePvP8_AS3_Val__XprivateX__BB376_24_F"))
		i1 = i3
		__asm(jump, target("__Z16b2Body_SetActivePvP8_AS3_Val__XprivateX__BB376_23_B"))
	__asm(lbl("__Z16b2Body_SetActivePvP8_AS3_Val__XprivateX__BB376_25_F"))
		i1 =  (0)
		__asm(push(i1), push(i0), op(0x3c))
	__asm(lbl("__Z16b2Body_SetActivePvP8_AS3_Val__XprivateX__BB376_26_F"))
		state = 7
		mstate.esp -= 4;(mstate.funcs[_AS3_Null])()
		return
	__asm(lbl("__Z16b2Body_SetActivePvP8_AS3_Val_state7"))
		i0 = mstate.eax
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z16b2Body_SetActivePvP8_AS3_Val_errState"))
		throw("Invalid state in __Z16b2Body_SetActivePvP8_AS3_Val")
	}
}



// Async
public const __Z18b2Body_SetMassDataPvP8_AS3_Val:int = regFunc(FSM__Z18b2Body_SetMassDataPvP8_AS3_Val.start)

public final class FSM__Z18b2Body_SetMassDataPvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z18b2Body_SetMassDataPvP8_AS3_Val = new FSM__Z18b2Body_SetMassDataPvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int

	public static const intRegCount:int = 6
	public var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number
	public var f8:Number

	public static const NumberRegCount:int = 9
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z18b2Body_SetMassDataPvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z18b2Body_SetMassDataPvP8_AS3_Val_errState",
			"__Z18b2Body_SetMassDataPvP8_AS3_Val_state0",
			"__Z18b2Body_SetMassDataPvP8_AS3_Val_state1",
			"__Z18b2Body_SetMassDataPvP8_AS3_Val_state2",
			"__Z18b2Body_SetMassDataPvP8_AS3_Val_state3",
			"__Z18b2Body_SetMassDataPvP8_AS3_Val_state4"))
	__asm(lbl("__Z18b2Body_SetMassDataPvP8_AS3_Val_state0"))
	__asm(lbl("__Z18b2Body_SetMassDataPvP8_AS3_Val__XprivateX__BB377_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 8
		i0 =  (__2E_str34241)
		mstate.esp -= 16
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((mstate.ebp+-8))
		i3 =  ((mstate.ebp+-4))
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i3), push((mstate.esp+8)), op(0x3c))
		__asm(push(i2), push((mstate.esp+12)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_ArrayValue])()
		return
	__asm(lbl("__Z18b2Body_SetMassDataPvP8_AS3_Val_state1"))
		mstate.esp += 16
		i0 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+96)), op(0x37))))
		i1 =  ((__xasm<int>(push((i1+102868)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+-8)), op(0x37))))
		i1 =  (i1 & 2)
		__asm(push(i1==0), iftrue, target("__Z18b2Body_SetMassDataPvP8_AS3_Val__XprivateX__BB377_3_F"))
	__asm(lbl("__Z18b2Body_SetMassDataPvP8_AS3_Val__XprivateX__BB377_1_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i2 =  (__2E_str1670)
		i1 =  (__2E_str54261)
		i3 =  (__ZZN6b2Body11SetMassDataEPK10b2MassDataE8__func__)
		i4 =  (__2E_str53260)
		i5 =  (326)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i2), push((mstate.esp+4)), op(0x3c))
		__asm(push(i1), push((mstate.esp+8)), op(0x3c))
	__asm(jump, target("__Z18b2Body_SetMassDataPvP8_AS3_Val__XprivateX__BB377_2_F"), lbl("__Z18b2Body_SetMassDataPvP8_AS3_Val__XprivateX__BB377_2_B"), label, lbl("__Z18b2Body_SetMassDataPvP8_AS3_Val__XprivateX__BB377_2_F")); 
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z18b2Body_SetMassDataPvP8_AS3_Val_state2"))
		mstate.esp += 24
		state = 3
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z18b2Body_SetMassDataPvP8_AS3_Val_state3"))
	__asm(lbl("__Z18b2Body_SetMassDataPvP8_AS3_Val__XprivateX__BB377_3_F"))
		i1 =  ((__xasm<int>(push(i0), op(0x37))))
		__asm(push(i1!=2), iftrue, target("__Z18b2Body_SetMassDataPvP8_AS3_Val__XprivateX__BB377_10_F"))
	__asm(lbl("__Z18b2Body_SetMassDataPvP8_AS3_Val__XprivateX__BB377_4_F"))
		i1 =  (0)
		__asm(push(i1), push((i0+128)), op(0x3c))
		__asm(push(i1), push((i0+132)), op(0x3c))
		f0 =  (0)
		f1 =  (1)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		__asm(push(i1), push((i0+136)), op(0x3c))
		f2 =  ((__xasm<Number>(push(i2), op(0x38))))
		f1 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		f2 =  ((f2>f0) ? f2 : f1)
		f2 =  f2/*fround*/
		f3 =  f2/*fextend*/
		f1 =  (f1 / f3)
		__asm(push(f2), push((i0+124)), op(0x3d))
		f1 =  f1/*fround*/
		__asm(push(f1), push((i0+128)), op(0x3d))
		f1 =  ((__xasm<Number>(push((i2+12)), op(0x38))))
		i1 =  (i0 + 136)
		i3 =  (i0 + 132)
		f3 =  f1/*fextend*/
		__asm(push(f3<=f0), iftrue, target("__Z18b2Body_SetMassDataPvP8_AS3_Val__XprivateX__BB377_9_F"))
	__asm(lbl("__Z18b2Body_SetMassDataPvP8_AS3_Val__XprivateX__BB377_5_F"))
		i4 =  ((__xasm<int>(push((i0+4)), op(0x36))))
		i4 =  (i4 & 16)
		__asm(push(i4!=0), iftrue, target("__Z18b2Body_SetMassDataPvP8_AS3_Val__XprivateX__BB377_9_F"))
	__asm(lbl("__Z18b2Body_SetMassDataPvP8_AS3_Val__XprivateX__BB377_6_F"))
		f0 =  (0)
		f3 =  ((__xasm<Number>(push((i2+4)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i2+8)), op(0x38))))
		f3 =  (f3 * f3)
		f4 =  (f4 * f4)
		f3 =  f3/*fround*/
		f4 =  f4/*fround*/
		f4 =  f4/*fextend*/
		f3 =  f3/*fextend*/
		f3 =  (f3 + f4)
		f3 =  f3/*fround*/
		f3 =  f3/*fextend*/
		f2 =  f2/*fextend*/
		f2 =  (f2 * f3)
		f2 =  f2/*fround*/
		f2 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		f1 =  (f1 - f2)
		f1 =  f1/*fround*/
		__asm(push(f1), push(i3), op(0x3d))
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f2 =  f1/*fextend*/
		__asm(push(f2>f0), iftrue, target("__Z18b2Body_SetMassDataPvP8_AS3_Val__XprivateX__BB377_8_F"))
	__asm(lbl("__Z18b2Body_SetMassDataPvP8_AS3_Val__XprivateX__BB377_7_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str55262)
		i3 =  (__ZZN6b2Body11SetMassDataEPK10b2MassDataE8__func__)
		i4 =  (__2E_str53260)
		i5 =  (352)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(jump, target("__Z18b2Body_SetMassDataPvP8_AS3_Val__XprivateX__BB377_2_B"))
	__asm(lbl("__Z18b2Body_SetMassDataPvP8_AS3_Val__XprivateX__BB377_8_F"))
		f0 =  (1)
		f0 =  f0/*fround*/
		f1 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 / f1)
		f0 =  f0/*fround*/
		__asm(push(f0), push(i1), op(0x3d))
	__asm(lbl("__Z18b2Body_SetMassDataPvP8_AS3_Val__XprivateX__BB377_9_F"))
		f0 =  ((__xasm<Number>(push((i2+4)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i2+8)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i0+52)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i0+56)), op(0x38))))
		__asm(push(f0), push((i0+36)), op(0x3d))
		__asm(push(f1), push((i0+40)), op(0x3d))
		f4 =  ((__xasm<Number>(push((i0+20)), op(0x38))))
		f0 =  f0/*fextend*/
		f5 =  ((__xasm<Number>(push((i0+24)), op(0x38))))
		f4 =  (f4 * f0)
		f4 =  f4/*fround*/
		f0 =  (f5 * f0)
		f0 =  f0/*fround*/
		f5 =  ((__xasm<Number>(push((i0+12)), op(0x38))))
		f4 =  f4/*fextend*/
		f6 =  ((__xasm<Number>(push((i0+28)), op(0x38))))
		f1 =  f1/*fextend*/
		f7 =  ((__xasm<Number>(push((i0+32)), op(0x38))))
		f8 =  ((__xasm<Number>(push((i0+16)), op(0x38))))
		f4 =  (f5 + f4)
		f5 =  (f6 * f1)
		f0 =  f0/*fextend*/
		f4 =  f4/*fround*/
		f5 =  f5/*fround*/
		f0 =  (f8 + f0)
		f1 =  (f7 * f1)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f5 =  f5/*fextend*/
		f4 =  f4/*fextend*/
		f4 =  (f4 + f5)
		f1 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		f4 =  f4/*fround*/
		f0 =  (f0 + f1)
		f0 =  f0/*fround*/
		__asm(push(f4), push((i0+52)), op(0x3d))
		__asm(push(f0), push((i0+56)), op(0x3d))
		f1 =  f0/*fextend*/
		__asm(push(f4), push((i0+44)), op(0x3d))
		f1 =  (f1 - f3)
		__asm(push(f0), push((i0+48)), op(0x3d))
		f0 =  f1/*fround*/
		f1 =  ((__xasm<Number>(push((i0+80)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f0 * f1)
		f3 =  f4/*fextend*/
		f0 =  f0/*fround*/
		f2 =  (f3 - f2)
		f3 =  ((__xasm<Number>(push((i0+72)), op(0x38))))
		f0 =  f0/*fextend*/
		f2 =  f2/*fround*/
		f2 =  f2/*fextend*/
		f0 =  (f3 - f0)
		f1 =  (f2 * f1)
		f0 =  f0/*fround*/
		__asm(push(f0), push((i0+72)), op(0x3d))
		f0 =  f1/*fround*/
		f1 =  ((__xasm<Number>(push((i0+76)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f1 + f0)
		f0 =  f0/*fround*/
		__asm(push(f0), push((i0+76)), op(0x3d))
	__asm(lbl("__Z18b2Body_SetMassDataPvP8_AS3_Val__XprivateX__BB377_10_F"))
		state = 4
		mstate.esp -= 4;(mstate.funcs[_AS3_Null])()
		return
	__asm(lbl("__Z18b2Body_SetMassDataPvP8_AS3_Val_state4"))
		i0 = mstate.eax
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z18b2Body_SetMassDataPvP8_AS3_Val_errState"))
		throw("Invalid state in __Z18b2Body_SetMassDataPvP8_AS3_Val")
	}
}



// Async
public const __Z20b2Body_ResetMassDataPvP8_AS3_Val:int = regFunc(FSM__Z20b2Body_ResetMassDataPvP8_AS3_Val.start)

public final class FSM__Z20b2Body_ResetMassDataPvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z20b2Body_ResetMassDataPvP8_AS3_Val = new FSM__Z20b2Body_ResetMassDataPvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int

	public static const intRegCount:int = 3

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z20b2Body_ResetMassDataPvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z20b2Body_ResetMassDataPvP8_AS3_Val_errState",
			"__Z20b2Body_ResetMassDataPvP8_AS3_Val_state0",
			"__Z20b2Body_ResetMassDataPvP8_AS3_Val_state1",
			"__Z20b2Body_ResetMassDataPvP8_AS3_Val_state2",
			"__Z20b2Body_ResetMassDataPvP8_AS3_Val_state3"))
	__asm(lbl("__Z20b2Body_ResetMassDataPvP8_AS3_Val_state0"))
	__asm(lbl("__Z20b2Body_ResetMassDataPvP8_AS3_Val__XprivateX__BB378_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 4
		i0 =  (__2E_str26233)
		mstate.esp -= 12
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((mstate.ebp+-4))
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_ArrayValue])()
		return
	__asm(lbl("__Z20b2Body_ResetMassDataPvP8_AS3_Val_state1"))
		mstate.esp += 12
		i0 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM__ZN6b2Body13ResetMassDataEv.start()
		return
	__asm(lbl("__Z20b2Body_ResetMassDataPvP8_AS3_Val_state2"))
		mstate.esp += 4
		state = 3
		mstate.esp -= 4;(mstate.funcs[_AS3_Null])()
		return
	__asm(lbl("__Z20b2Body_ResetMassDataPvP8_AS3_Val_state3"))
		i0 = mstate.eax
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z20b2Body_ResetMassDataPvP8_AS3_Val_errState"))
		throw("Invalid state in __Z20b2Body_ResetMassDataPvP8_AS3_Val")
	}
}



// Async
public const __Z19b2Body_SetTransformPvP8_AS3_Val:int = regFunc(FSM__Z19b2Body_SetTransformPvP8_AS3_Val.start)

public final class FSM__Z19b2Body_SetTransformPvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z19b2Body_SetTransformPvP8_AS3_Val = new FSM__Z19b2Body_SetTransformPvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int

	public static const intRegCount:int = 6
	public var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number

	public static const NumberRegCount:int = 8
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z19b2Body_SetTransformPvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z19b2Body_SetTransformPvP8_AS3_Val_errState",
			"__Z19b2Body_SetTransformPvP8_AS3_Val_state0",
			"__Z19b2Body_SetTransformPvP8_AS3_Val_state1",
			"__Z19b2Body_SetTransformPvP8_AS3_Val_state2",
			"__Z19b2Body_SetTransformPvP8_AS3_Val_state3",
			"__Z19b2Body_SetTransformPvP8_AS3_Val_state4",
			"__Z19b2Body_SetTransformPvP8_AS3_Val_state5",
			"__Z19b2Body_SetTransformPvP8_AS3_Val_state6"))
	__asm(lbl("__Z19b2Body_SetTransformPvP8_AS3_Val_state0"))
	__asm(lbl("__Z19b2Body_SetTransformPvP8_AS3_Val__XprivateX__BB379_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 32
		i0 =  (__2E_str126318)
		mstate.esp -= 24
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((mstate.ebp+-32))
		i3 =  ((mstate.ebp+-24))
		i4 =  ((mstate.ebp+-16))
		i5 =  ((mstate.ebp+-4))
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i5), push((mstate.esp+8)), op(0x3c))
		__asm(push(i4), push((mstate.esp+12)), op(0x3c))
		__asm(push(i3), push((mstate.esp+16)), op(0x3c))
		__asm(push(i2), push((mstate.esp+20)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_ArrayValue])()
		return
	__asm(lbl("__Z19b2Body_SetTransformPvP8_AS3_Val_state1"))
		mstate.esp += 24
		i0 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+96)), op(0x37))))
		f0 =  ((__xasm<Number>(push((mstate.ebp+-24)), op(0x39))))
		f1 =  ((__xasm<Number>(push((mstate.ebp+-16)), op(0x39))))
		f2 =  ((__xasm<Number>(push((mstate.ebp+-32)), op(0x39))))
		i2 =  ((__xasm<int>(push((i1+102868)), op(0x37))))
		i3 =  (i0 + 96)
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		f3 =  f0/*fround*/
		i2 =  (i2 & 2)
		__asm(push(i2==0), iftrue, target("__Z19b2Body_SetTransformPvP8_AS3_Val__XprivateX__BB379_2_F"))
	__asm(lbl("__Z19b2Body_SetTransformPvP8_AS3_Val__XprivateX__BB379_1_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i3 =  (__2E_str54261)
		i2 =  (__ZZN6b2Body12SetTransformERK6b2Vec2fE8__func__)
		i4 =  (__2E_str53260)
		i5 =  (390)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i3), push((mstate.esp+8)), op(0x3c))
		__asm(push(i2), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z19b2Body_SetTransformPvP8_AS3_Val_state2"))
		mstate.esp += 24
		state = 3
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z19b2Body_SetTransformPvP8_AS3_Val_state3"))
	__asm(lbl("__Z19b2Body_SetTransformPvP8_AS3_Val__XprivateX__BB379_2_F"))
		f0 = f2
		//InlineAsmStart
	f0 =  Math.cos(f0);

	//InlineAsmEnd
		f4 = f0
		f0 = f2
		//InlineAsmStart
	f0 =  Math.sin(f0);

	//InlineAsmEnd
		f5 =  f0/*fextend*/
		f6 =  -f5
		__asm(push(f4), push((i0+20)), op(0x3d))
		f6 =  f6/*fround*/
		__asm(push(f6), push((i0+28)), op(0x3d))
		__asm(push(f0), push((i0+24)), op(0x3d))
		__asm(push(f4), push((i0+32)), op(0x3d))
		__asm(push(f1), push((i0+12)), op(0x3d))
		__asm(push(f3), push((i0+16)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i0+36)), op(0x38))))
		f4 =  f4/*fextend*/
		f6 =  (f4 * f0)
		f6 =  f6/*fround*/
		f0 =  (f5 * f0)
		f7 =  ((__xasm<Number>(push((i0+40)), op(0x38))))
		f0 =  f0/*fround*/
		f6 =  f6/*fextend*/
		f1 =  f1/*fextend*/
		f1 =  (f1 + f6)
		f5 =  (f7 * f5)
		f0 =  f0/*fextend*/
		f3 =  f3/*fextend*/
		f1 =  f1/*fround*/
		f0 =  (f3 + f0)
		f3 =  f5/*fround*/
		f4 =  (f4 * f7)
		f0 =  f0/*fround*/
		f4 =  f4/*fround*/
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f1 =  (f1 - f3)
		f3 =  f4/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 + f3)
		f1 =  f1/*fround*/
		__asm(push(f1), push((i0+52)), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push((i0+56)), op(0x3d))
		__asm(push(f1), push((i0+44)), op(0x3d))
		__asm(push(f0), push((i0+48)), op(0x3d))
		__asm(push(f2), push((i0+64)), op(0x3d))
		__asm(push(f2), push((i0+60)), op(0x3d))
		i2 =  ((__xasm<int>(push((i0+108)), op(0x37))))
		i1 =  (i1 + 102872)
		__asm(push(i2==0), iftrue, target("__Z19b2Body_SetTransformPvP8_AS3_Val__XprivateX__BB379_6_F"))
	__asm(lbl("__Z19b2Body_SetTransformPvP8_AS3_Val__XprivateX__BB379_3_F"))
		i0 =  (i0 + 12)
	__asm(jump, target("__Z19b2Body_SetTransformPvP8_AS3_Val__XprivateX__BB379_4_F"), lbl("__Z19b2Body_SetTransformPvP8_AS3_Val__XprivateX__BB379_4_B"), label, lbl("__Z19b2Body_SetTransformPvP8_AS3_Val__XprivateX__BB379_4_F")); 
		mstate.esp -= 16
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i0), push((mstate.esp+8)), op(0x3c))
		__asm(push(i0), push((mstate.esp+12)), op(0x3c))
		state = 4
		mstate.esp -= 4;FSM__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4_.start()
		return
	__asm(lbl("__Z19b2Body_SetTransformPvP8_AS3_Val_state4"))
		mstate.esp += 16
		i2 =  ((__xasm<int>(push((i2+8)), op(0x37))))
		__asm(push(i2==0), iftrue, target("__Z19b2Body_SetTransformPvP8_AS3_Val__XprivateX__BB379_6_F"))
	__asm(lbl("__Z19b2Body_SetTransformPvP8_AS3_Val__XprivateX__BB379_5_F"))
		__asm(jump, target("__Z19b2Body_SetTransformPvP8_AS3_Val__XprivateX__BB379_4_B"))
	__asm(lbl("__Z19b2Body_SetTransformPvP8_AS3_Val__XprivateX__BB379_6_F"))
		i0 =  ((__xasm<int>(push(i3), op(0x37))))
		mstate.esp -= 8
		i0 =  (i0 + 102872)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 5
		mstate.esp -= 4;FSM__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT_.start()
		return
	__asm(lbl("__Z19b2Body_SetTransformPvP8_AS3_Val_state5"))
		mstate.esp += 8
		state = 6
		mstate.esp -= 4;(mstate.funcs[_AS3_Null])()
		return
	__asm(lbl("__Z19b2Body_SetTransformPvP8_AS3_Val_state6"))
		i0 = mstate.eax
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z19b2Body_SetTransformPvP8_AS3_Val_errState"))
		throw("Invalid state in __Z19b2Body_SetTransformPvP8_AS3_Val")
	}
}



// Async
public const __Z21b2Body_DestroyFixturePvP8_AS3_Val:int = regFunc(FSM__Z21b2Body_DestroyFixturePvP8_AS3_Val.start)

public final class FSM__Z21b2Body_DestroyFixturePvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z21b2Body_DestroyFixturePvP8_AS3_Val = new FSM__Z21b2Body_DestroyFixturePvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
	public var i8:int, i9:int, i10:int, i11:int, i12:int, i13:int, i14:int, i15:int
	public var i16:int, i17:int, i18:int, i19:int, i20:int, i21:int

	public static const intRegCount:int = 22

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z21b2Body_DestroyFixturePvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z21b2Body_DestroyFixturePvP8_AS3_Val_errState",
			"__Z21b2Body_DestroyFixturePvP8_AS3_Val_state0",
			"__Z21b2Body_DestroyFixturePvP8_AS3_Val_state1",
			"__Z21b2Body_DestroyFixturePvP8_AS3_Val_state2",
			"__Z21b2Body_DestroyFixturePvP8_AS3_Val_state3",
			"__Z21b2Body_DestroyFixturePvP8_AS3_Val_state4",
			"__Z21b2Body_DestroyFixturePvP8_AS3_Val_state5",
			"__Z21b2Body_DestroyFixturePvP8_AS3_Val_state6",
			"__Z21b2Body_DestroyFixturePvP8_AS3_Val_state7",
			"__Z21b2Body_DestroyFixturePvP8_AS3_Val_state8",
			"__Z21b2Body_DestroyFixturePvP8_AS3_Val_state9"))
	__asm(lbl("__Z21b2Body_DestroyFixturePvP8_AS3_Val_state0"))
	__asm(lbl("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 8
		i0 =  (__2E_str34241)
		mstate.esp -= 16
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((mstate.ebp+-8))
		i3 =  ((mstate.ebp+-4))
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i3), push((mstate.esp+8)), op(0x3c))
		__asm(push(i2), push((mstate.esp+12)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_ArrayValue])()
		return
	__asm(lbl("__Z21b2Body_DestroyFixturePvP8_AS3_Val_state1"))
		mstate.esp += 16
		i0 =  ((__xasm<int>(push((mstate.ebp+-8)), op(0x37))))
		i0 =  ((__xasm<int>(push((i0+44)), op(0x37))))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 2
		mstate.esp -= 4;(mstate.funcs[_AS3_Release])()
		return
	__asm(lbl("__Z21b2Body_DestroyFixturePvP8_AS3_Val_state2"))
		mstate.esp += 4
		i0 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+96)), op(0x37))))
		i1 =  ((__xasm<int>(push((i1+102868)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+-8)), op(0x37))))
		i3 =  (i0 + 96)
		i1 =  (i1 & 2)
		__asm(push(i1==0), iftrue, target("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_5_F"))
	__asm(lbl("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_1_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i2 =  (__2E_str1670)
		i3 =  (__2E_str54261)
		i1 =  (__ZZN6b2Body14DestroyFixtureEP9b2FixtureE8__func__)
		i4 =  (__2E_str53260)
		i5 =  (189)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i2), push((mstate.esp+4)), op(0x3c))
		__asm(push(i3), push((mstate.esp+8)), op(0x3c))
		__asm(push(i1), push((mstate.esp+12)), op(0x3c))
	__asm(jump, target("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_2_F"), lbl("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_2_B"), label, lbl("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_2_F")); 
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
	__asm(jump, target("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_3_F"), lbl("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_3_B"), label, lbl("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_3_F")); 
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
	__asm(jump, target("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_4_F"), lbl("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_4_B"), label, lbl("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_4_F")); 
		state = 3
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z21b2Body_DestroyFixturePvP8_AS3_Val_state3"))
		mstate.esp += 24
		state = 4
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z21b2Body_DestroyFixturePvP8_AS3_Val_state4"))
	__asm(lbl("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_5_F"))
		i1 =  ((__xasm<int>(push((i2+12)), op(0x37))))
		i4 =  (i2 + 12)
		__asm(push(i1==i0), iftrue, target("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_7_F"))
	__asm(lbl("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_6_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i2 =  (__2E_str1670)
		i3 =  (__2E_str178)
		i4 =  (__ZZN6b2Body14DestroyFixtureEP9b2FixtureE8__func__)
		i1 =  (__2E_str53260)
		i5 =  (195)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i2), push((mstate.esp+4)), op(0x3c))
		__asm(push(i3), push((mstate.esp+8)), op(0x3c))
		__asm(push(i4), push((mstate.esp+12)), op(0x3c))
		__asm(push(i1), push((mstate.esp+16)), op(0x3c))
		__asm(jump, target("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_3_B"))
	__asm(lbl("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_7_F"))
		i1 =  ((__xasm<int>(push((i0+112)), op(0x37))))
		i5 =  (i0 + 108)
		i6 =  (i0 + 112)
		__asm(push(i1>0), iftrue, target("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_9_F"))
	__asm(lbl("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_8_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i2 =  (__2E_str1670)
		i3 =  (__2E_str179339)
		i4 =  (__ZZN6b2Body14DestroyFixtureEP9b2FixtureE8__func__)
		i5 =  (__2E_str53260)
		i6 =  (198)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i2), push((mstate.esp+4)), op(0x3c))
		__asm(push(i3), push((mstate.esp+8)), op(0x3c))
		__asm(push(i4), push((mstate.esp+12)), op(0x3c))
		__asm(push(i5), push((mstate.esp+16)), op(0x3c))
		__asm(push(i6), push((mstate.esp+20)), op(0x3c))
		__asm(jump, target("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_4_B"))
	__asm(lbl("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_9_F"))
		i1 =  ((__xasm<int>(push(i5), op(0x37))))
		__asm(push(i1==0), iftrue, target("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_21_F"))
	__asm(lbl("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_10_F"))
		i1 = i5
	__asm(jump, target("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_11_F"), lbl("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_11_B"), label, lbl("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_11_F")); 
		i5 =  ((__xasm<int>(push(i1), op(0x37))))
		__asm(push(i5!=i2), iftrue, target("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_19_F"))
	__asm(lbl("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_12_F"))
		i5 =  ((__xasm<int>(push((i2+8)), op(0x37))))
		__asm(push(i5), push(i1), op(0x3c))
		i1 =  ((__xasm<int>(push((i0+120)), op(0x37))))
		i5 =  (i2 + 8)
		__asm(push(i1==0), iftrue, target("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_22_F"))
	__asm(lbl("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_13_F"))
		__asm(jump, target("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_14_F"))
	__asm(jump, target("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_14_F"), lbl("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_14_B"), label, lbl("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_14_F")); 
		i7 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		i1 =  ((__xasm<int>(push((i1+12)), op(0x37))))
		i8 =  ((__xasm<int>(push((i7+48)), op(0x37))))
		i9 =  ((__xasm<int>(push((i7+52)), op(0x37))))
		__asm(push(i9==i2), iftrue, target("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_16_F"))
		__asm(jump, target("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_15_F"))
	__asm(lbl("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_15_F"))
		__asm(push(i8!=i2), iftrue, target("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_17_F"))
		__asm(jump, target("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_16_F"))
	__asm(lbl("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_16_F"))
		i8 =  ((__xasm<int>(push(i3), op(0x37))))
		mstate.esp -= 8
		i8 =  (i8 + 102872)
		__asm(push(i8), push(mstate.esp), op(0x3c))
		__asm(push(i7), push((mstate.esp+4)), op(0x3c))
		state = 5
		mstate.esp -= 4;FSM__ZN16b2ContactManager7DestroyEP9b2Contact.start()
		return
	__asm(lbl("__Z21b2Body_DestroyFixturePvP8_AS3_Val_state5"))
		mstate.esp += 8
		__asm(jump, target("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_17_F"))
	__asm(lbl("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_17_F"))
		__asm(push(i1==0), iftrue, target("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_22_F"))
		__asm(jump, target("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_18_F"))
	__asm(lbl("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_18_F"))
		__asm(jump, target("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_14_B"))
	__asm(lbl("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_19_F"))
		i1 =  ((__xasm<int>(push((i5+8)), op(0x37))))
		i5 =  (i5 + 8)
		__asm(push(i1==0), iftrue, target("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_21_F"))
	__asm(lbl("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_20_F"))
		i1 = i5
		__asm(jump, target("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_11_B"))
	__asm(lbl("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_21_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str180)
		i3 =  (__ZZN6b2Body14DestroyFixtureEP9b2FixtureE8__func__)
		i4 =  (__2E_str53260)
		i5 =  (214)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(jump, target("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_2_B"))
	__asm(lbl("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_22_F"))
		i1 =  ((__xasm<int>(push((i0+4)), op(0x36))))
		i3 =  ((__xasm<int>(push(i3), op(0x37))))
		i7 = i3
		i1 =  (i1 & 32)
		__asm(push(i1==0), iftrue, target("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_34_F"))
	__asm(lbl("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_23_F"))
		i1 =  ((__xasm<int>(push((i2+32)), op(0x37))))
		i8 =  (i2 + 32)
		__asm(push(i1<1), iftrue, target("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_33_F"))
	__asm(lbl("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_24_F"))
		i1 =  (0)
		i9 =  (i7 + 102912)
		i10 =  (i7 + 102900)
		i11 =  (i7 + 102904)
		i12 =  (24)
		i13 =  (i7 + 102872)
		i14 =  (i2 + 28)
	__asm(jump, target("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_25_F"), lbl("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_25_B"), label, lbl("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_25_F")); 
		i15 =  ((__xasm<int>(push(i14), op(0x37))))
		i15 =  (i15 + i12)
		i16 =  ((__xasm<int>(push(i15), op(0x37))))
		i17 =  ((__xasm<int>(push(i9), op(0x37))))
		__asm(push(i17<1), iftrue, target("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_29_F"))
	__asm(lbl("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_26_F"))
		i18 =  (0)
		i19 =  ((__xasm<int>(push(i11), op(0x37))))
	__asm(jump, target("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_27_F"), lbl("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_27_B"), label, lbl("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_27_F")); 
		i20 =  ((__xasm<int>(push(i19), op(0x37))))
		i21 = i19
		__asm(push(i20!=i16), iftrue, target("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_31_F"))
	__asm(lbl("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_28_F"))
		i18 =  (-1)
		__asm(push(i18), push(i21), op(0x3c))
		__asm(jump, target("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_29_F"))
	__asm(jump, target("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_29_F"), lbl("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_29_B"), label, lbl("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_29_F")); 
		i17 =  (-1)
		i18 =  ((__xasm<int>(push(i10), op(0x37))))
		i18 =  (i18 + -1)
		__asm(push(i18), push(i10), op(0x3c))
		mstate.esp -= 8
		__asm(push(i13), push(mstate.esp), op(0x3c))
		__asm(push(i16), push((mstate.esp+4)), op(0x3c))
		state = 6
		mstate.esp -= 4;FSM__ZN13b2DynamicTree12DestroyProxyEi.start()
		return
	__asm(lbl("__Z21b2Body_DestroyFixturePvP8_AS3_Val_state6"))
		mstate.esp += 8
		__asm(push(i17), push(i15), op(0x3c))
		i15 =  ((__xasm<int>(push(i8), op(0x37))))
		i12 =  (i12 + 28)
		i1 =  (i1 + 1)
		__asm(push(i15<=i1), iftrue, target("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_33_F"))
		__asm(jump, target("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_30_F"))
	__asm(lbl("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_30_F"))
		__asm(jump, target("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_25_B"))
	__asm(lbl("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_31_F"))
		i19 =  (i19 + 4)
		i18 =  (i18 + 1)
		__asm(push(i17<=i18), iftrue, target("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_29_B"))
	__asm(lbl("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_32_F"))
		__asm(jump, target("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_27_B"))
	__asm(lbl("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_33_F"))
		i1 =  (0)
		__asm(push(i1), push(i8), op(0x3c))
	__asm(lbl("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_34_F"))
		i1 =  (0)
		mstate.esp -= 8
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i3), push((mstate.esp+4)), op(0x3c))
		state = 7
		mstate.esp -= 4;FSM__ZN9b2Fixture7DestroyEP16b2BlockAllocator.start()
		return
	__asm(lbl("__Z21b2Body_DestroyFixturePvP8_AS3_Val_state7"))
		mstate.esp += 8
		__asm(push(i1), push(i4), op(0x3c))
		__asm(push(i1), push(i5), op(0x3c))
		i1 =  ((__xasm<int>(push((__ZN16b2BlockAllocator17s_blockSizeLookupE+52)), op(0x35))))
		__asm(push(uint(i1)<uint(14)), iftrue, target("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_36_F"))
	__asm(lbl("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_35_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str83290)
		i6 =  (__ZZN16b2BlockAllocator4FreeEPviE8__func__)
		i7 =  (__2E_str78285)
		i3 =  (173)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i6), push((mstate.esp+12)), op(0x3c))
		__asm(push(i7), push((mstate.esp+16)), op(0x3c))
		__asm(push(i3), push((mstate.esp+20)), op(0x3c))
		__asm(jump, target("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_4_B"))
	__asm(lbl("__Z21b2Body_DestroyFixturePvP8_AS3_Val__XprivateX__BB380_36_F"))
		i1 =  (i1 & 255)
		i1 =  (i1 << 2)
		i1 =  (i7 + i1)
		i3 =  ((__xasm<int>(push((i1+12)), op(0x37))))
		__asm(push(i3), push(i2), op(0x3c))
		__asm(push(i2), push((i1+12)), op(0x3c))
		i1 =  ((__xasm<int>(push(i6), op(0x37))))
		i1 =  (i1 + -1)
		__asm(push(i1), push(i6), op(0x3c))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 8
		mstate.esp -= 4;FSM__ZN6b2Body13ResetMassDataEv.start()
		return
	__asm(lbl("__Z21b2Body_DestroyFixturePvP8_AS3_Val_state8"))
		mstate.esp += 4
		state = 9
		mstate.esp -= 4;(mstate.funcs[_AS3_Null])()
		return
	__asm(lbl("__Z21b2Body_DestroyFixturePvP8_AS3_Val_state9"))
		i0 = mstate.eax
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z21b2Body_DestroyFixturePvP8_AS3_Val_errState"))
		throw("Invalid state in __Z21b2Body_DestroyFixturePvP8_AS3_Val")
	}
}



// Async
public const __Z20b2Body_CreateFixturePvP8_AS3_Val:int = regFunc(FSM__Z20b2Body_CreateFixturePvP8_AS3_Val.start)

public final class FSM__Z20b2Body_CreateFixturePvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z20b2Body_CreateFixturePvP8_AS3_Val = new FSM__Z20b2Body_CreateFixturePvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
	public var i8:int, i9:int, i10:int, i11:int, i12:int

	public static const intRegCount:int = 13
	public var f0:Number, f1:Number

	public static const NumberRegCount:int = 2
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z20b2Body_CreateFixturePvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z20b2Body_CreateFixturePvP8_AS3_Val_errState",
			"__Z20b2Body_CreateFixturePvP8_AS3_Val_state0",
			"__Z20b2Body_CreateFixturePvP8_AS3_Val_state1",
			"__Z20b2Body_CreateFixturePvP8_AS3_Val_state2",
			"__Z20b2Body_CreateFixturePvP8_AS3_Val_state3",
			"__Z20b2Body_CreateFixturePvP8_AS3_Val_state4",
			"__Z20b2Body_CreateFixturePvP8_AS3_Val_state5",
			"__Z20b2Body_CreateFixturePvP8_AS3_Val_state6",
			"__Z20b2Body_CreateFixturePvP8_AS3_Val_state7",
			"__Z20b2Body_CreateFixturePvP8_AS3_Val_state8",
			"__Z20b2Body_CreateFixturePvP8_AS3_Val_state9",
			"__Z20b2Body_CreateFixturePvP8_AS3_Val_state10",
			"__Z20b2Body_CreateFixturePvP8_AS3_Val_state11"))
	__asm(lbl("__Z20b2Body_CreateFixturePvP8_AS3_Val_state0"))
	__asm(lbl("__Z20b2Body_CreateFixturePvP8_AS3_Val__XprivateX__BB381_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 12
		i0 =  (__2E_str97304)
		mstate.esp -= 20
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((mstate.ebp+-12))
		i3 =  ((mstate.ebp+-8))
		i4 =  ((mstate.ebp+-4))
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i4), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i2), push((mstate.esp+16)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_ArrayValue])()
		return
	__asm(lbl("__Z20b2Body_CreateFixturePvP8_AS3_Val_state1"))
		mstate.esp += 20
		i0 =  ((__xasm<int>(push((mstate.ebp+-8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+96)), op(0x37))))
		i2 =  ((__xasm<int>(push((i1+102868)), op(0x37))))
		i3 =  ((__xasm<int>(push((mstate.ebp+-12)), op(0x37))))
		i4 =  (i0 + 96)
		i2 =  (i2 & 2)
		__asm(push(i2==0), iftrue, target("__Z20b2Body_CreateFixturePvP8_AS3_Val__XprivateX__BB381_2_F"))
	__asm(lbl("__Z20b2Body_CreateFixturePvP8_AS3_Val__XprivateX__BB381_1_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i3 =  (__2E_str54261)
		i4 =  (__ZZN6b2Body13CreateFixtureEPK12b2FixtureDefE8__func__)
		i2 =  (__2E_str53260)
		i5 =  (141)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i3), push((mstate.esp+8)), op(0x3c))
		__asm(push(i4), push((mstate.esp+12)), op(0x3c))
		__asm(push(i2), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z20b2Body_CreateFixturePvP8_AS3_Val_state2"))
		mstate.esp += 24
		state = 3
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z20b2Body_CreateFixturePvP8_AS3_Val_state3"))
	__asm(lbl("__Z20b2Body_CreateFixturePvP8_AS3_Val__XprivateX__BB381_2_F"))
		i2 =  (52)
		mstate.esp -= 8
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i2), push((mstate.esp+4)), op(0x3c))
		state = 4
		mstate.esp -= 4;FSM__ZN16b2BlockAllocator8AllocateEi.start()
		return
	__asm(lbl("__Z20b2Body_CreateFixturePvP8_AS3_Val_state4"))
		i2 = mstate.eax
		mstate.esp += 8
		i5 = i2
		__asm(push(i2==0), iftrue, target("__Z20b2Body_CreateFixturePvP8_AS3_Val__XprivateX__BB381_4_F"))
	__asm(lbl("__Z20b2Body_CreateFixturePvP8_AS3_Val__XprivateX__BB381_3_F"))
		i6 =  (0)
		__asm(push(i6), push((i5+44)), op(0x3c))
		__asm(push(i6), push((i5+12)), op(0x3c))
		__asm(push(i6), push((i5+8)), op(0x3c))
		__asm(push(i6), push((i5+28)), op(0x3c))
		__asm(push(i6), push((i5+32)), op(0x3c))
		__asm(push(i6), push((i5+16)), op(0x3c))
		__asm(push(i6), push((i5+4)), op(0x3c))
		__asm(push(i6), push(i2), op(0x3a))
		__asm(push(i6), push((i5+1)), op(0x3a))
		__asm(push(i6), push((i5+2)), op(0x3a))
		__asm(push(i6), push((i5+3)), op(0x3a))
		__asm(push(i6), push((i5+48)), op(0x3c))
	__asm(lbl("__Z20b2Body_CreateFixturePvP8_AS3_Val__XprivateX__BB381_4_F"))
		i6 =  (0)
		i7 =  ((__xasm<int>(push((i3+8)), op(0x37))))
		__asm(push(i7), push((i5+44)), op(0x3c))
		f0 =  ((__xasm<Number>(push((i3+12)), op(0x38))))
		__asm(push(f0), push((i5+20)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i3+16)), op(0x38))))
		__asm(push(f0), push((i5+24)), op(0x3d))
		__asm(push(i0), push((i5+12)), op(0x3c))
		__asm(push(i6), push((i5+8)), op(0x3c))
		i6 =  ((__xasm<int>(push((i3+26)), op(0x36))))
		__asm(push(i6), push((i5+36)), op(0x3b))
		i6 =  ((__xasm<int>(push((i3+28)), op(0x36))))
		__asm(push(i6), push((i5+38)), op(0x3b))
		i6 =  ((__xasm<int>(push((i3+30)), op(0x36))))
		__asm(push(i6), push((i5+40)), op(0x3b))
		i6 =  ((__xasm<int>(push((i3+24)), op(0x35))))
		__asm(push(i6), push((i5+42)), op(0x3a))
		i6 =  ((__xasm<int>(push((i3+4)), op(0x37))))
		i7 =  ((__xasm<int>(push(i6), op(0x37))))
		i7 =  ((__xasm<int>(push((i7+8)), op(0x37))))
		mstate.esp -= 8
		__asm(push(i6), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 5
		mstate.esp -= 4;(mstate.funcs[i7])()
		return
	__asm(lbl("__Z20b2Body_CreateFixturePvP8_AS3_Val_state5"))
		i6 = mstate.eax
		mstate.esp += 8
		__asm(push(i6), push((i5+16)), op(0x3c))
		i7 =  ((__xasm<int>(push(i6), op(0x37))))
		i7 =  ((__xasm<int>(push((i7+12)), op(0x37))))
		mstate.esp -= 4
		__asm(push(i6), push(mstate.esp), op(0x3c))
		state = 6
		mstate.esp -= 4;(mstate.funcs[i7])()
		return
	__asm(lbl("__Z20b2Body_CreateFixturePvP8_AS3_Val_state6"))
		i6 = mstate.eax
		mstate.esp += 4
		mstate.esp -= 8
		i7 =  (i6 * 28)
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i7), push((mstate.esp+4)), op(0x3c))
		state = 7
		mstate.esp -= 4;FSM__ZN16b2BlockAllocator8AllocateEi.start()
		return
	__asm(lbl("__Z20b2Body_CreateFixturePvP8_AS3_Val_state7"))
		i1 = mstate.eax
		mstate.esp += 8
		__asm(push(i1), push((i5+28)), op(0x3c))
		i1 =  (i5 + 28)
		i7 =  (i5 + 8)
		i8 =  (i5 + 12)
		__asm(push(i6<1), iftrue, target("__Z20b2Body_CreateFixturePvP8_AS3_Val__XprivateX__BB381_8_F"))
	__asm(lbl("__Z20b2Body_CreateFixturePvP8_AS3_Val__XprivateX__BB381_5_F"))
		i9 =  (0)
		i10 = i9
	__asm(jump, target("__Z20b2Body_CreateFixturePvP8_AS3_Val__XprivateX__BB381_6_F"), lbl("__Z20b2Body_CreateFixturePvP8_AS3_Val__XprivateX__BB381_6_B"), label, lbl("__Z20b2Body_CreateFixturePvP8_AS3_Val__XprivateX__BB381_6_F")); 
		i11 =  (0)
		i12 =  ((__xasm<int>(push(i1), op(0x37))))
		i12 =  (i12 + i10)
		__asm(push(i11), push((i12+16)), op(0x3c))
		i11 =  ((__xasm<int>(push(i1), op(0x37))))
		i12 =  (-1)
		i11 =  (i11 + i10)
		__asm(push(i12), push((i11+24)), op(0x3c))
		i10 =  (i10 + 28)
		i9 =  (i9 + 1)
		__asm(push(i9==i6), iftrue, target("__Z20b2Body_CreateFixturePvP8_AS3_Val__XprivateX__BB381_8_F"))
	__asm(lbl("__Z20b2Body_CreateFixturePvP8_AS3_Val__XprivateX__BB381_7_F"))
		__asm(jump, target("__Z20b2Body_CreateFixturePvP8_AS3_Val__XprivateX__BB381_6_B"))
	__asm(lbl("__Z20b2Body_CreateFixturePvP8_AS3_Val__XprivateX__BB381_8_F"))
		i1 =  (0)
		__asm(push(i1), push((i5+32)), op(0x3c))
		f0 =  ((__xasm<Number>(push((i3+20)), op(0x38))))
		__asm(push(f0), push((i5+4)), op(0x3d))
		i1 =  ((__xasm<int>(push((i0+4)), op(0x36))))
		i3 =  (i5 + 4)
		i1 =  (i1 & 32)
		__asm(push(i1==0), iftrue, target("__Z20b2Body_CreateFixturePvP8_AS3_Val__XprivateX__BB381_10_F"))
	__asm(lbl("__Z20b2Body_CreateFixturePvP8_AS3_Val__XprivateX__BB381_9_F"))
		i1 =  ((__xasm<int>(push(i4), op(0x37))))
		mstate.esp -= 12
		i6 =  (i0 + 12)
		i1 =  (i1 + 102872)
		__asm(push(i5), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i6), push((mstate.esp+8)), op(0x3c))
		state = 8
		mstate.esp -= 4;FSM__ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform.start()
		return
	__asm(lbl("__Z20b2Body_CreateFixturePvP8_AS3_Val_state8"))
		mstate.esp += 12
	__asm(lbl("__Z20b2Body_CreateFixturePvP8_AS3_Val__XprivateX__BB381_10_F"))
		f0 =  (0)
		i1 =  ((__xasm<int>(push((i0+108)), op(0x37))))
		__asm(push(i1), push(i7), op(0x3c))
		__asm(push(i5), push((i0+108)), op(0x3c))
		i1 =  ((__xasm<int>(push((i0+112)), op(0x37))))
		i1 =  (i1 + 1)
		__asm(push(i1), push((i0+112)), op(0x3c))
		f0 =  f0/*fround*/
		__asm(push(i0), push(i8), op(0x3c))
		f1 =  ((__xasm<Number>(push(i3), op(0x38))))
		f0 =  f0/*fextend*/
		__asm(push(f1<=f0), iftrue, target("__Z20b2Body_CreateFixturePvP8_AS3_Val__XprivateX__BB381_12_F"))
	__asm(lbl("__Z20b2Body_CreateFixturePvP8_AS3_Val__XprivateX__BB381_11_F"))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 9
		mstate.esp -= 4;FSM__ZN6b2Body13ResetMassDataEv.start()
		return
	__asm(lbl("__Z20b2Body_CreateFixturePvP8_AS3_Val_state9"))
		mstate.esp += 4
	__asm(lbl("__Z20b2Body_CreateFixturePvP8_AS3_Val__XprivateX__BB381_12_F"))
		i0 =  ((__xasm<int>(push(i4), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+102868)), op(0x37))))
		i1 =  (i1 | 1)
		__asm(push(i1), push((i0+102868)), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		__asm(push(i0), push((i5+44)), op(0x3c))
		i0 =  ((__xasm<int>(push(_as3_ptr), op(0x37))))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 10
		mstate.esp -= 4;(mstate.funcs[_AS3_Release])()
		return
	__asm(lbl("__Z20b2Body_CreateFixturePvP8_AS3_Val_state10"))
		mstate.esp += 4
		mstate.esp -= 4
		__asm(push(i2), push(mstate.esp), op(0x3c))
		state = 11
		mstate.esp -= 4;(mstate.funcs[_AS3_Ptr])()
		return
	__asm(lbl("__Z20b2Body_CreateFixturePvP8_AS3_Val_state11"))
		i0 = mstate.eax
		mstate.esp += 4
		__asm(push(i0), push(_as3_ptr), op(0x3c))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z20b2Body_CreateFixturePvP8_AS3_Val_errState"))
		throw("Invalid state in __Z20b2Body_CreateFixturePvP8_AS3_Val")
	}
}



// Async
public const __Z15b2World_RayCastPvP8_AS3_Val:int = regFunc(FSM__Z15b2World_RayCastPvP8_AS3_Val.start)

public final class FSM__Z15b2World_RayCastPvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z15b2World_RayCastPvP8_AS3_Val = new FSM__Z15b2World_RayCastPvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
	public var i8:int, i9:int, i10:int, i11:int, i12:int, i13:int, i14:int, i15:int
	public var i16:int, i17:int, i18:int, i19:int, i20:int, i21:int, i22:int, i23:int
	public var i24:int, i25:int
	public static const intRegCount:int = 26
	public var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number
	public var f8:Number, f9:Number, f10:Number, f11:Number, f12:Number, f13:Number, f14:Number, f15:Number
	public var f16:Number, f17:Number, f18:Number, f19:Number, f20:Number, f21:Number, f22:Number, f23:Number

	public static const NumberRegCount:int = 24
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z15b2World_RayCastPvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z15b2World_RayCastPvP8_AS3_Val_errState",
			"__Z15b2World_RayCastPvP8_AS3_Val_state0",
			"__Z15b2World_RayCastPvP8_AS3_Val_state1",
			"__Z15b2World_RayCastPvP8_AS3_Val_state2",
			"__Z15b2World_RayCastPvP8_AS3_Val_state3",
			"__Z15b2World_RayCastPvP8_AS3_Val_state4",
			"__Z15b2World_RayCastPvP8_AS3_Val_state5",
			"__Z15b2World_RayCastPvP8_AS3_Val_state6",
			"__Z15b2World_RayCastPvP8_AS3_Val_state7",
			"__Z15b2World_RayCastPvP8_AS3_Val_state8",
			"__Z15b2World_RayCastPvP8_AS3_Val_state9",
			"__Z15b2World_RayCastPvP8_AS3_Val_state10",
			"__Z15b2World_RayCastPvP8_AS3_Val_state11",
			"__Z15b2World_RayCastPvP8_AS3_Val_state12",
			"__Z15b2World_RayCastPvP8_AS3_Val_state13",
			"__Z15b2World_RayCastPvP8_AS3_Val_state14",
			"__Z15b2World_RayCastPvP8_AS3_Val_state15",
			"__Z15b2World_RayCastPvP8_AS3_Val_state16",
			"__Z15b2World_RayCastPvP8_AS3_Val_state17"))
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val_state0"))
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 1152
		i0 =  (__ZTV15RayCastCallback)
		i0 =  (i0 + 8)
		__asm(push(i0), push((mstate.ebp+-1152)), op(0x3c))
		mstate.esp -= 32
		i0 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i1 =  (__2E_str127319)
		i2 =  ((mstate.ebp+-1136))
		i3 =  ((mstate.ebp+-1120))
		i4 =  ((mstate.ebp+-1128))
		i5 =  ((mstate.ebp+-1112))
		i6 =  ((mstate.ebp+-1140))
		i7 =  ((mstate.ebp+-1100))
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i7), push((mstate.esp+8)), op(0x3c))
		__asm(push(i6), push((mstate.esp+12)), op(0x3c))
		__asm(push(i5), push((mstate.esp+16)), op(0x3c))
		__asm(push(i4), push((mstate.esp+20)), op(0x3c))
		__asm(push(i3), push((mstate.esp+24)), op(0x3c))
		__asm(push(i2), push((mstate.esp+28)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_ArrayValue])()
		return
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val_state1"))
		mstate.esp += 32
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_1_F"))
		f0 =  (0)
		f1 =  ((__xasm<Number>(push((mstate.ebp+-1128)), op(0x39))))
		f2 =  ((__xasm<Number>(push((mstate.ebp+-1112)), op(0x39))))
		f3 =  ((__xasm<Number>(push((mstate.ebp+-1136)), op(0x39))))
		f4 =  ((__xasm<Number>(push((mstate.ebp+-1120)), op(0x39))))
		f4 =  f4/*fround*/
		f3 =  f3/*fround*/
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		f5 =  f1/*fextend*/
		f6 =  f3/*fextend*/
		f7 =  f2/*fextend*/
		f8 =  f4/*fextend*/
		f5 =  (f6 - f5)
		f6 =  (f8 - f7)
		f5 =  f5/*fround*/
		f6 =  f6/*fround*/
		f7 =  f5/*fextend*/
		f8 =  f6/*fextend*/
		f7 =  (f7 * f7)
		f8 =  (f8 * f8)
		i0 =  ((__xasm<int>(push((mstate.ebp+-1140)), op(0x37))))
		f7 =  f7/*fround*/
		f8 =  f8/*fround*/
		f7 =  f7/*fextend*/
		f8 =  f8/*fextend*/
		__asm(push(i0), push((mstate.ebp+-1148)), op(0x3c))
		f7 =  (f8 + f7)
		i0 =  ((__xasm<int>(push((mstate.ebp+-1100)), op(0x37))))
		f7 =  f7/*fround*/
		i1 =  ((mstate.ebp+-1152))
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f8 =  f7/*fextend*/
		__asm(push(f8>f0), iftrue, target("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_4_F"))
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_2_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str148331)
		i3 =  (__ZZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2TransformiE8__func__)
		i4 =  (__2E_str2209)
		i5 =  (192)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val_state2"))
		mstate.esp += 24
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_3_F"))
		state = 3
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val_state3"))
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_4_F"))
		f0 =  (1.19209e-07)
		f7 =  f7/*fextend*/
		f7 =  Math.sqrt(f7)
		f7 =  f7/*fround*/
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f8 =  f7/*fextend*/
		__asm(push(f8>=f0), iftrue, target("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_6_F"))
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_5_F"))
		f7 = f6
		f0 = f5
		__asm(jump, target("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_7_F"))
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_6_F"))
		f0 =  (1)
		f0 =  f0/*fround*/
		f7 =  f7/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 / f7)
		f0 =  f0/*fround*/
		f7 =  f6/*fextend*/
		f0 =  f0/*fextend*/
		f8 =  f5/*fextend*/
		f7 =  (f7 * f0)
		f0 =  (f8 * f0)
		f7 =  f7/*fround*/
		f0 =  f0/*fround*/
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_7_F"))
		i2 =  ((mstate.ebp+-1040))
		i3 =  (i2 + 4)
		f0 =  f0/*fextend*/
		f8 =  f7/*fextend*/
		__asm(push(i3), push((mstate.ebp+-1040)), op(0x3c))
		i4 =  (0)
		f9 =  f5/*fextend*/
		f10 =  f1/*fextend*/
		f11 =  f6/*fextend*/
		f12 =  f2/*fextend*/
		f13 =  -f0
		f14 =  -f8
		f9 =  (f10 + f9)
		f11 =  (f12 + f11)
		f15 =  (0)
		__asm(push(i4), push((mstate.ebp+-12)), op(0x3c))
		i4 =  (256)
		__asm(push(i4), push((mstate.ebp+-8)), op(0x3c))
		f13 =  f13/*fround*/
		f14 =  f14/*fround*/
		f9 =  f9/*fround*/
		f11 =  f11/*fround*/
		f15 =  f15/*fround*/
		i4 =  ((__xasm<int>(push((i0+102872)), op(0x37))))
		f9 =  f9/*fextend*/
		f11 =  f11/*fextend*/
		f16 =  f13/*fextend*/
		f15 =  f15/*fextend*/
		f14 =  f14/*fextend*/
		i5 =  ((mstate.ebp+-1072))
		f0 =  ((f16<=f15) ? f0 : f16)
		f8 =  ((f8<=f15) ? f14 : f8)
		f14 =  ((f10<f9) ? f10 : f9)
		f9 =  ((f10>f9) ? f10 : f9)
		f10 =  ((f12<f11) ? f12 : f11)
		f11 =  ((f12>f11) ? f12 : f11)
		f12 =  (1)
		i6 =  ((mstate.ebp+-1096))
		i7 =  ((mstate.ebp+-1088))
		__asm(push(i4), push((mstate.ebp+-1036)), op(0x3c))
		i4 =  (1)
		__asm(push(i4), push((mstate.ebp+-12)), op(0x3c))
		i8 =  (i0 + 102876)
		f0 =  f0/*fround*/
		f8 =  f8/*fround*/
		f14 =  f14/*fround*/
		f9 =  f9/*fround*/
		f10 =  f10/*fround*/
		f11 =  f11/*fround*/
		f12 =  f12/*fround*/
		i9 =  (i5 + 12)
		i0 =  (i0 + 102884)
		i10 =  ((mstate.ebp+-1152))
		i11 =  (i6 + 4)
		i12 =  (i7 + 8)
		i13 =  (i5 + 16)
		i14 =  (i5 + 8)
		i15 =  (i5 + 4)
		i16 =  (i2 + 1032)
		i17 =  (i2 + 1028)
		i18 = i8
		i19 = i4
		__asm(jump, target("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_42_F"))
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_8_B"), label)
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str38245)
		i3 =  (__ZZN15b2GrowableStackIiLi256EE3PopEvE8__func__)
		i4 =  (__2E_str37244)
		i5 =  (67)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 4
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val_state4"))
		mstate.esp += 24
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_9_F"))
		state = 5
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val_state5"))
	__asm(jump, target("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_10_F"), lbl("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_10_B"), label, lbl("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_10_F")); 
		i19 =  (i19 + -1)
		__asm(push(i19), push(i17), op(0x3c))
		i4 =  ((__xasm<int>(push(i2), op(0x37))))
		i20 =  (i19 << 2)
		i20 =  (i4 + i20)
		i20 =  ((__xasm<int>(push(i20), op(0x37))))
		__asm(push(i20!=-1), iftrue, target("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_12_F"))
	__asm(jump, target("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_11_F"), lbl("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_11_B"), label, lbl("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_11_F")); 
		f12 = f15
		__asm(jump, target("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_40_F"))
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_12_F"))
		f12 =  (0)
		i21 =  ((__xasm<int>(push(i8), op(0x37))))
		i22 =  (i20 * 36)
		i22 =  (i21 + i22)
		f16 =  ((__xasm<Number>(push((i22+4)), op(0x38))))
		f17 =  ((__xasm<Number>(push(i22), op(0x38))))
		f18 =  ((__xasm<Number>(push((i22+8)), op(0x38))))
		f19 =  f10/*fextend*/
		f20 =  f16/*fextend*/
		f21 =  f11/*fextend*/
		f22 =  f17/*fextend*/
		f19 =  (f20 - f19)
		f20 =  (f22 - f21)
		f21 =  f18/*fextend*/
		f22 =  f15/*fextend*/
		f21 =  (f22 - f21)
		f19 =  f19/*fround*/
		f20 =  f20/*fround*/
		f21 =  f21/*fround*/
		f12 =  f12/*fround*/
		f12 =  f12/*fextend*/
		f21 =  f21/*fextend*/
		__asm(push(f21>f12), iftrue, target("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_11_B"))
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_13_F"))
		f12 =  (0)
		i22 =  (i20 * 36)
		i22 =  (i21 + i22)
		f21 =  ((__xasm<Number>(push((i22+12)), op(0x38))))
		f22 =  f21/*fextend*/
		f23 =  f14/*fextend*/
		f22 =  (f23 - f22)
		f22 =  f22/*fround*/
		f12 =  f12/*fround*/
		f12 =  f12/*fextend*/
		f22 =  f22/*fextend*/
		__asm(push(f22>f12), iftrue, target("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_11_B"))
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_14_F"))
		f12 =  (0)
		f12 =  f12/*fround*/
		f12 =  f12/*fextend*/
		f20 =  f20/*fextend*/
		__asm(push(f20>f12), iftrue, target("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_11_B"))
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_15_F"))
		f12 =  (0)
		f12 =  f12/*fround*/
		f12 =  f12/*fextend*/
		f19 =  f19/*fextend*/
		__asm(push(f19>f12), iftrue, target("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_11_B"))
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_16_F"))
		f12 =  (0.5)
		f16 =  f16/*fextend*/
		f19 =  f21/*fextend*/
		f17 =  f17/*fextend*/
		f18 =  f18/*fextend*/
		f20 =  (f16 + f19)
		f21 =  (f17 + f18)
		f20 =  f20/*fround*/
		f21 =  f21/*fround*/
		f12 =  f12/*fround*/
		f20 =  f20/*fextend*/
		f12 =  f12/*fextend*/
		f21 =  f21/*fextend*/
		f20 =  (f20 * f12)
		f21 =  (f21 * f12)
		f20 =  f20/*fround*/
		f21 =  f21/*fround*/
		f20 =  f20/*fextend*/
		f22 =  f1/*fextend*/
		f21 =  f21/*fextend*/
		f23 =  f2/*fextend*/
		f20 =  (f22 - f20)
		f21 =  (f23 - f21)
		f20 =  f20/*fround*/
		f21 =  f21/*fround*/
		f20 =  f20/*fextend*/
		f22 =  f7/*fextend*/
		f21 =  f21/*fextend*/
		f23 =  f13/*fextend*/
		f20 =  (f22 * f20)
		f16 =  (f19 - f16)
		f19 =  (f23 * f21)
		f17 =  (f18 - f17)
		f18 =  f20/*fround*/
		f16 =  f16/*fround*/
		f19 =  f19/*fround*/
		f17 =  f17/*fround*/
		f16 =  f16/*fextend*/
		f17 =  f17/*fextend*/
		f18 =  f18/*fextend*/
		f19 =  f19/*fextend*/
		f18 =  (f19 + f18)
		f16 =  (f16 * f12)
		f12 =  (f17 * f12)
		f17 =  f18/*fround*/
		f16 =  f16/*fround*/
		f12 =  f12/*fround*/
		f17 =  f17/*fextend*/
		f16 =  f16/*fextend*/
		f18 =  f8/*fextend*/
		f12 =  f12/*fextend*/
		f19 =  f0/*fextend*/
		f20 =  -f17
		f16 =  (f18 * f16)
		f12 =  (f19 * f12)
		f18 =  (0)
		f19 =  f20/*fround*/
		f16 =  f16/*fround*/
		f12 =  f12/*fround*/
		f18 =  f18/*fround*/
		f19 =  f19/*fextend*/
		f18 =  f18/*fextend*/
		f16 =  f16/*fextend*/
		f12 =  f12/*fextend*/
		f17 =  ((f17<=f18) ? f19 : f17)
		f12 =  (f12 + f16)
		f16 =  f17/*fround*/
		f12 =  f12/*fround*/
		f12 =  f12/*fextend*/
		f16 =  f16/*fextend*/
		f12 =  (f16 - f12)
		f12 =  f12/*fround*/
		f12 =  f12/*fextend*/
		__asm(push(f12>f18), iftrue, target("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_11_B"))
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_17_F"))
		i22 =  (i20 * 36)
		i22 =  (i21 + i22)
		i23 =  ((__xasm<int>(push((i22+24)), op(0x37))))
		i22 =  (i22 + 24)
		__asm(push(i23!=-1), iftrue, target("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_31_F"))
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_18_F"))
		__asm(push(f2), push(i5), op(0x3d))
		__asm(push(f1), push(i15), op(0x3d))
		__asm(push(f4), push(i14), op(0x3d))
		__asm(push(f3), push(i9), op(0x3d))
		__asm(push(f9), push(i13), op(0x3d))
		__asm(push(i20<0), iftrue, target("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_20_F"))
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_19_F"))
		i19 =  ((__xasm<int>(push(i0), op(0x37))))
		__asm(push(i19>i20), iftrue, target("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_22_F"))
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_20_F"))
		i19 =  (___sF)
		mstate.esp -= 24
		i4 =  (__2E_str1670)
		i0 =  (__2E_str3210)
		i1 =  (__ZZNK13b2DynamicTree11GetUserDataEiE8__func__)
		i2 =  (__2E_str2209)
		i3 =  (141)
		i19 =  (i19 + 176)
		__asm(push(i19), push(mstate.esp), op(0x3c))
		__asm(push(i4), push((mstate.esp+4)), op(0x3c))
		__asm(push(i0), push((mstate.esp+8)), op(0x3c))
		__asm(push(i1), push((mstate.esp+12)), op(0x3c))
		__asm(push(i2), push((mstate.esp+16)), op(0x3c))
		__asm(push(i3), push((mstate.esp+20)), op(0x3c))
		state = 6
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val_state6"))
		mstate.esp += 24
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_21_F"))
		state = 7
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val_state7"))
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_22_F"))
		i19 =  ((mstate.ebp+-1072))
		i4 =  ((__xasm<int>(push(i18), op(0x37))))
		i20 =  (i20 * 36)
		i4 =  (i4 + i20)
		i4 =  ((__xasm<int>(push((i4+16)), op(0x37))))
		i20 =  ((__xasm<int>(push((i4+16)), op(0x37))))
		i21 =  ((__xasm<int>(push((i20+16)), op(0x37))))
		i22 =  ((__xasm<int>(push(i21), op(0x37))))
		i23 =  ((__xasm<int>(push((i20+12)), op(0x37))))
		i4 =  ((__xasm<int>(push((i4+20)), op(0x37))))
		i22 =  ((__xasm<int>(push((i22+20)), op(0x37))))
		mstate.esp -= 20
		i24 =  ((mstate.ebp+-1088))
		i23 =  (i23 + 12)
		__asm(push(i21), push(mstate.esp), op(0x3c))
		__asm(push(i24), push((mstate.esp+4)), op(0x3c))
		__asm(push(i19), push((mstate.esp+8)), op(0x3c))
		__asm(push(i23), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		state = 8
		mstate.esp -= 4;(mstate.funcs[i22])()
		return
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val_state8"))
		i19 = mstate.eax
		mstate.esp += 20
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_23_F"))
		i19 =  (i19 & 255)
		__asm(push(i19==0), iftrue, target("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_25_F"))
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_24_F"))
		f12 =  (1)
		f16 =  ((__xasm<Number>(push(i12), op(0x38))))
		f12 =  f12/*fround*/
		f17 =  f16/*fextend*/
		f12 =  f12/*fextend*/
		f12 =  (f12 - f17)
		f12 =  f12/*fround*/
		f18 =  ((__xasm<Number>(push(i14), op(0x38))))
		f19 =  ((__xasm<Number>(push(i5), op(0x38))))
		f12 =  f12/*fextend*/
		f20 =  ((__xasm<Number>(push(i9), op(0x38))))
		f21 =  ((__xasm<Number>(push(i15), op(0x38))))
		f18 =  (f18 * f17)
		f19 =  (f19 * f12)
		f17 =  (f20 * f17)
		f18 =  f18/*fround*/
		f12 =  (f21 * f12)
		f19 =  f19/*fround*/
		f17 =  f17/*fround*/
		f12 =  f12/*fround*/
		f18 =  f18/*fextend*/
		f19 =  f19/*fextend*/
		f18 =  (f19 + f18)
		f17 =  f17/*fextend*/
		f12 =  f12/*fextend*/
		f12 =  (f12 + f17)
		f17 =  f18/*fround*/
		__asm(push(f17), push(i6), op(0x3d))
		f12 =  f12/*fround*/
		__asm(push(f12), push(i11), op(0x3d))
		i19 =  ((__xasm<int>(push(i10), op(0x37))))
		i19 =  ((__xasm<int>(push((i19+8)), op(0x37))))
		mstate.esp -= 20
		i4 =  ((mstate.ebp+-1096))
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i20), push((mstate.esp+4)), op(0x3c))
		__asm(push(i4), push((mstate.esp+8)), op(0x3c))
		__asm(push(i7), push((mstate.esp+12)), op(0x3c))
		__asm(push(f16), push((mstate.esp+16)), op(0x3d))
		state = 9
		mstate.esp -= 4;(mstate.funcs[i19])()
		return
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val_state9"))
		f12 = mstate.st0
		mstate.esp += 20
		__asm(jump, target("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_26_F"))
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_25_F"))
		f12 =  ((__xasm<Number>(push(i13), op(0x38))))
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_26_F"))
		f16 = f12
		f12 =  (0)
		f12 =  f12/*fround*/
		f12 =  f12/*fextend*/
		f17 =  f16/*fextend*/
		__asm(push(f17==f12), iftrue, target("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_43_F"))
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_27_F"))
		f12 =  (0)
		f12 =  f12/*fround*/
		f12 =  f12/*fextend*/
		f17 =  f16/*fextend*/
		__asm(push(f17<=f12), iftrue, target("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_11_B"))
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_28_F"))
		f9 =  f5/*fextend*/
		f10 =  f16/*fextend*/
		f11 =  f6/*fextend*/
		f9 =  (f9 * f10)
		f10 =  (f11 * f10)
		f9 =  f9/*fround*/
		f10 =  f10/*fround*/
		f9 =  f9/*fextend*/
		f11 =  f1/*fextend*/
		f10 =  f10/*fextend*/
		f12 =  f2/*fextend*/
		f9 =  (f11 + f9)
		f10 =  (f12 + f10)
		f9 =  f9/*fround*/
		f10 =  f10/*fround*/
		f9 =  f9/*fextend*/
		f14 =  f10/*fextend*/
		f15 =  ((f11<f9) ? f11 : f9)
		f9 =  ((f11>f9) ? f11 : f9)
		f11 =  ((f12<f14) ? f12 : f14)
		f15 =  f15/*fround*/
		f9 =  f9/*fround*/
		f11 =  f11/*fround*/
		__asm(push(f12<=f14), iftrue, target("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_30_F"))
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_29_F"))
		f12 = f11
		f14 = f15
		f11 = f2
		f10 = f9
		f9 = f16
		__asm(jump, target("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_40_F"))
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_30_F"))
		f12 = f11
		f14 = f15
		f11 = f10
		f10 = f9
		f9 = f16
		__asm(jump, target("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_40_F"))
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_31_F"))
		i23 =  ((__xasm<int>(push(i16), op(0x37))))
		__asm(push(i19!=i23), iftrue, target("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_35_F"))
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_32_F"))
		i24 =  (0)
		i25 =  (i23 << 1)
		__asm(push(i25), push(i16), op(0x3c))
		mstate.esp -= 8
		i23 =  (i23 << 3)
		__asm(push(i24), push(mstate.esp), op(0x3c))
		__asm(push(i23), push((mstate.esp+4)), op(0x3c))
		state = 10
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val_state10"))
		i23 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_33_F"))
		__asm(push(i23), push(i2), op(0x3c))
		i24 = i4
		i19 =  (i19 << 2)
		memcpy(i23, i24, i19)
		i19 = i4
		__asm(push(i3==i4), iftrue, target("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_35_F"))
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_34_F"))
		i4 =  (0)
		mstate.esp -= 8
		__asm(push(i19), push(mstate.esp), op(0x3c))
		__asm(push(i4), push((mstate.esp+4)), op(0x3c))
		state = 11
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val_state11"))
		i19 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_35_F"))
		i19 =  ((__xasm<int>(push(i17), op(0x37))))
		i4 =  ((__xasm<int>(push(i2), op(0x37))))
		i22 =  ((__xasm<int>(push(i22), op(0x37))))
		i19 =  (i19 << 2)
		i19 =  (i4 + i19)
		__asm(push(i22), push(i19), op(0x3c))
		i19 =  ((__xasm<int>(push(i17), op(0x37))))
		i19 =  (i19 + 1)
		i4 =  (i20 * 36)
		i4 =  (i21 + i4)
		__asm(push(i19), push(i17), op(0x3c))
		i20 =  ((__xasm<int>(push(i16), op(0x37))))
		i4 =  (i4 + 28)
		__asm(push(i19!=i20), iftrue, target("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_39_F"))
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_36_F"))
		i21 =  (0)
		i22 =  ((__xasm<int>(push(i2), op(0x37))))
		i23 =  (i20 << 1)
		__asm(push(i23), push(i16), op(0x3c))
		mstate.esp -= 8
		i20 =  (i20 << 3)
		__asm(push(i21), push(mstate.esp), op(0x3c))
		__asm(push(i20), push((mstate.esp+4)), op(0x3c))
		state = 12
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val_state12"))
		i20 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_37_F"))
		__asm(push(i20), push(i2), op(0x3c))
		i21 = i22
		i19 =  (i19 << 2)
		memcpy(i20, i21, i19)
		i19 = i22
		__asm(push(i3==i22), iftrue, target("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_39_F"))
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_38_F"))
		i20 =  (0)
		mstate.esp -= 8
		__asm(push(i19), push(mstate.esp), op(0x3c))
		__asm(push(i20), push((mstate.esp+4)), op(0x3c))
		state = 13
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val_state13"))
		i19 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_39_F"))
		i19 =  ((__xasm<int>(push(i17), op(0x37))))
		i20 =  ((__xasm<int>(push(i2), op(0x37))))
		i4 =  ((__xasm<int>(push(i4), op(0x37))))
		i19 =  (i19 << 2)
		i19 =  (i20 + i19)
		__asm(push(i4), push(i19), op(0x3c))
		i19 =  ((__xasm<int>(push(i17), op(0x37))))
		i19 =  (i19 + 1)
		__asm(push(i19), push(i17), op(0x3c))
		f12 = f15
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_40_F"))
		f15 = f10
		f16 = f9
		i4 =  ((__xasm<int>(push(i17), op(0x37))))
		__asm(push(i4<1), iftrue, target("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_45_F"))
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_41_F"))
		i19 = i4
		f10 = f12
		f9 = f15
		f12 = f16
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_42_F"))
		f15 = f10
		f10 = f9
		f9 = f12
		__asm(push(i4<1), iftrue, target("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_8_B"))
		__asm(jump, target("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_10_B"))
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_43_F"))
		i2 =  ((__xasm<int>(push(i2), op(0x37))))
		__asm(push(i2==i3), iftrue, target("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_47_F"))
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_44_F"))
		i3 =  (0)
		mstate.esp -= 8
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i3), push((mstate.esp+4)), op(0x3c))
		state = 14
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val_state14"))
		i2 = mstate.eax
		mstate.esp += 8
		__asm(jump, target("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_47_F"))
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_45_F"))
		i0 =  ((__xasm<int>(push(i2), op(0x37))))
		__asm(push(i0==i3), iftrue, target("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_47_F"))
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_46_F"))
		i1 =  (0)
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 15
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val_state15"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_47_F"))
		i0 =  ((__xasm<int>(push((mstate.ebp+-1140)), op(0x37))))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 16
		mstate.esp -= 4;(mstate.funcs[_AS3_Release])()
		return
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val_state16"))
		mstate.esp += 4
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_48_F"))
		state = 17
		mstate.esp -= 4;(mstate.funcs[_AS3_Null])()
		return
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val_state17"))
		i0 = mstate.eax
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val__XprivateX__BB382_49_F"))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z15b2World_RayCastPvP8_AS3_Val_errState"))
		throw("Invalid state in __Z15b2World_RayCastPvP8_AS3_Val")
	}
}



// Async
public const __Z17b2World_QueryAABBPvP8_AS3_Val:int = regFunc(FSM__Z17b2World_QueryAABBPvP8_AS3_Val.start)

public final class FSM__Z17b2World_QueryAABBPvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z17b2World_QueryAABBPvP8_AS3_Val = new FSM__Z17b2World_QueryAABBPvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
	public var i8:int, i9:int, i10:int, i11:int, i12:int, i13:int, i14:int, i15:int

	public static const intRegCount:int = 16
	public var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number
	public var f8:Number, f9:Number, f10:Number

	public static const NumberRegCount:int = 11
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z17b2World_QueryAABBPvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z17b2World_QueryAABBPvP8_AS3_Val_errState",
			"__Z17b2World_QueryAABBPvP8_AS3_Val_state0",
			"__Z17b2World_QueryAABBPvP8_AS3_Val_state1",
			"__Z17b2World_QueryAABBPvP8_AS3_Val_state2",
			"__Z17b2World_QueryAABBPvP8_AS3_Val_state3",
			"__Z17b2World_QueryAABBPvP8_AS3_Val_state4",
			"__Z17b2World_QueryAABBPvP8_AS3_Val_state5",
			"__Z17b2World_QueryAABBPvP8_AS3_Val_state6",
			"__Z17b2World_QueryAABBPvP8_AS3_Val_state7",
			"__Z17b2World_QueryAABBPvP8_AS3_Val_state8",
			"__Z17b2World_QueryAABBPvP8_AS3_Val_state9",
			"__Z17b2World_QueryAABBPvP8_AS3_Val_state10",
			"__Z17b2World_QueryAABBPvP8_AS3_Val_state11",
			"__Z17b2World_QueryAABBPvP8_AS3_Val_state12",
			"__Z17b2World_QueryAABBPvP8_AS3_Val_state13",
			"__Z17b2World_QueryAABBPvP8_AS3_Val_state14"))
	__asm(lbl("__Z17b2World_QueryAABBPvP8_AS3_Val_state0"))
	__asm(lbl("__Z17b2World_QueryAABBPvP8_AS3_Val__XprivateX__BB383_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 1104
		i0 =  (__ZTV13QueryCallback)
		i0 =  (i0 + 8)
		__asm(push(i0), push((mstate.ebp+-1104)), op(0x3c))
		mstate.esp -= 32
		i0 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i1 =  (__2E_str127319)
		i2 =  ((mstate.ebp+-1080))
		i3 =  ((mstate.ebp+-1064))
		i4 =  ((mstate.ebp+-1072))
		i5 =  ((mstate.ebp+-1056))
		i6 =  ((mstate.ebp+-1084))
		i7 =  ((mstate.ebp+-1044))
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i7), push((mstate.esp+8)), op(0x3c))
		__asm(push(i6), push((mstate.esp+12)), op(0x3c))
		__asm(push(i5), push((mstate.esp+16)), op(0x3c))
		__asm(push(i4), push((mstate.esp+20)), op(0x3c))
		__asm(push(i3), push((mstate.esp+24)), op(0x3c))
		__asm(push(i2), push((mstate.esp+28)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_ArrayValue])()
		return
	__asm(lbl("__Z17b2World_QueryAABBPvP8_AS3_Val_state1"))
		mstate.esp += 32
		i0 =  ((mstate.ebp+-1104))
	__asm(lbl("__Z17b2World_QueryAABBPvP8_AS3_Val__XprivateX__BB383_1_F"))
		i1 =  ((mstate.ebp+-1040))
		f0 =  ((__xasm<Number>(push((mstate.ebp+-1056)), op(0x39))))
		f1 =  ((__xasm<Number>(push((mstate.ebp+-1072)), op(0x39))))
		f2 =  ((__xasm<Number>(push((mstate.ebp+-1064)), op(0x39))))
		f3 =  ((__xasm<Number>(push((mstate.ebp+-1080)), op(0x39))))
		i2 =  ((__xasm<int>(push((mstate.ebp+-1084)), op(0x37))))
		__asm(push(i2), push((mstate.ebp+-1100)), op(0x3c))
		i2 =  ((__xasm<int>(push((mstate.ebp+-1044)), op(0x37))))
		i3 =  (i1 + 4)
		__asm(push(i3), push((mstate.ebp+-1040)), op(0x3c))
		i4 =  (0)
		__asm(push(i4), push((mstate.ebp+-12)), op(0x3c))
		i4 =  (256)
		__asm(push(i4), push((mstate.ebp+-8)), op(0x3c))
		i4 =  ((__xasm<int>(push((i2+102872)), op(0x37))))
		__asm(push(i4), push((mstate.ebp+-1036)), op(0x3c))
		i4 =  (1)
		__asm(push(i4), push((mstate.ebp+-12)), op(0x3c))
		i5 =  (i2 + 102876)
		i2 =  (i2 + 102884)
		i6 =  (i1 + 1032)
		i7 =  (i1 + 1028)
		i8 =  ((mstate.ebp+-1104))
		f3 =  f3/*fround*/
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		i9 = i4
		__asm(jump, target("__Z17b2World_QueryAABBPvP8_AS3_Val__XprivateX__BB383_29_F"))
	__asm(lbl("__Z17b2World_QueryAABBPvP8_AS3_Val__XprivateX__BB383_2_B"), label)
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str38245)
		i3 =  (__ZZN15b2GrowableStackIiLi256EE3PopEvE8__func__)
		i4 =  (__2E_str37244)
		i5 =  (67)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z17b2World_QueryAABBPvP8_AS3_Val_state2"))
		mstate.esp += 24
	__asm(lbl("__Z17b2World_QueryAABBPvP8_AS3_Val__XprivateX__BB383_3_F"))
		state = 3
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z17b2World_QueryAABBPvP8_AS3_Val_state3"))
	__asm(jump, target("__Z17b2World_QueryAABBPvP8_AS3_Val__XprivateX__BB383_4_F"), lbl("__Z17b2World_QueryAABBPvP8_AS3_Val__XprivateX__BB383_4_B"), label, lbl("__Z17b2World_QueryAABBPvP8_AS3_Val__XprivateX__BB383_4_F")); 
		i9 =  (i9 + -1)
		__asm(push(i9), push(i7), op(0x3c))
		i4 =  ((__xasm<int>(push(i1), op(0x37))))
		i10 =  (i9 << 2)
		i10 =  (i4 + i10)
		i10 =  ((__xasm<int>(push(i10), op(0x37))))
		__asm(push(i10==-1), iftrue, target("__Z17b2World_QueryAABBPvP8_AS3_Val__XprivateX__BB383_27_F"))
	__asm(lbl("__Z17b2World_QueryAABBPvP8_AS3_Val__XprivateX__BB383_5_F"))
		f4 =  (0)
		i11 =  ((__xasm<int>(push(i5), op(0x37))))
		i12 =  (i10 * 36)
		i12 =  (i11 + i12)
		f5 =  ((__xasm<Number>(push((i12+4)), op(0x38))))
		f6 =  f3/*fextend*/
		f7 =  ((__xasm<Number>(push(i12), op(0x38))))
		f8 =  f2/*fextend*/
		f9 =  ((__xasm<Number>(push((i12+8)), op(0x38))))
		f10 =  f0/*fextend*/
		f5 =  (f5 - f6)
		f6 =  (f7 - f8)
		f7 =  (f10 - f9)
		f5 =  f5/*fround*/
		f6 =  f6/*fround*/
		f7 =  f7/*fround*/
		f4 =  f4/*fround*/
		f4 =  f4/*fextend*/
		f7 =  f7/*fextend*/
		__asm(push(f7>f4), iftrue, target("__Z17b2World_QueryAABBPvP8_AS3_Val__XprivateX__BB383_27_F"))
	__asm(lbl("__Z17b2World_QueryAABBPvP8_AS3_Val__XprivateX__BB383_6_F"))
		f4 =  (0)
		i12 =  (i10 * 36)
		i12 =  (i11 + i12)
		f7 =  ((__xasm<Number>(push((i12+12)), op(0x38))))
		f8 =  f1/*fextend*/
		f7 =  (f8 - f7)
		f7 =  f7/*fround*/
		f4 =  f4/*fround*/
		f4 =  f4/*fextend*/
		f7 =  f7/*fextend*/
		__asm(push(f7>f4), iftrue, target("__Z17b2World_QueryAABBPvP8_AS3_Val__XprivateX__BB383_27_F"))
	__asm(lbl("__Z17b2World_QueryAABBPvP8_AS3_Val__XprivateX__BB383_7_F"))
		f4 =  (0)
		f4 =  f4/*fround*/
		f4 =  f4/*fextend*/
		f6 =  f6/*fextend*/
		__asm(push(f6>f4), iftrue, target("__Z17b2World_QueryAABBPvP8_AS3_Val__XprivateX__BB383_27_F"))
	__asm(lbl("__Z17b2World_QueryAABBPvP8_AS3_Val__XprivateX__BB383_8_F"))
		f4 =  (0)
		f4 =  f4/*fround*/
		f4 =  f4/*fextend*/
		f5 =  f5/*fextend*/
		__asm(push(f5>f4), iftrue, target("__Z17b2World_QueryAABBPvP8_AS3_Val__XprivateX__BB383_27_F"))
	__asm(lbl("__Z17b2World_QueryAABBPvP8_AS3_Val__XprivateX__BB383_9_F"))
		i12 =  (i10 * 36)
		i12 =  (i11 + i12)
		i13 =  ((__xasm<int>(push((i12+24)), op(0x37))))
		i12 =  (i12 + 24)
		__asm(push(i13!=-1), iftrue, target("__Z17b2World_QueryAABBPvP8_AS3_Val__XprivateX__BB383_18_F"))
	__asm(lbl("__Z17b2World_QueryAABBPvP8_AS3_Val__XprivateX__BB383_10_F"))
		__asm(push(i10<0), iftrue, target("__Z17b2World_QueryAABBPvP8_AS3_Val__XprivateX__BB383_12_F"))
	__asm(lbl("__Z17b2World_QueryAABBPvP8_AS3_Val__XprivateX__BB383_11_F"))
		i9 =  ((__xasm<int>(push(i2), op(0x37))))
		__asm(push(i9>i10), iftrue, target("__Z17b2World_QueryAABBPvP8_AS3_Val__XprivateX__BB383_14_F"))
	__asm(lbl("__Z17b2World_QueryAABBPvP8_AS3_Val__XprivateX__BB383_12_F"))
		i9 =  (___sF)
		mstate.esp -= 24
		i4 =  (__2E_str1670)
		i0 =  (__2E_str3210)
		i1 =  (__ZZNK13b2DynamicTree11GetUserDataEiE8__func__)
		i2 =  (__2E_str2209)
		i3 =  (141)
		i9 =  (i9 + 176)
		__asm(push(i9), push(mstate.esp), op(0x3c))
		__asm(push(i4), push((mstate.esp+4)), op(0x3c))
		__asm(push(i0), push((mstate.esp+8)), op(0x3c))
		__asm(push(i1), push((mstate.esp+12)), op(0x3c))
		__asm(push(i2), push((mstate.esp+16)), op(0x3c))
		__asm(push(i3), push((mstate.esp+20)), op(0x3c))
		state = 4
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z17b2World_QueryAABBPvP8_AS3_Val_state4"))
		mstate.esp += 24
	__asm(lbl("__Z17b2World_QueryAABBPvP8_AS3_Val__XprivateX__BB383_13_F"))
		state = 5
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z17b2World_QueryAABBPvP8_AS3_Val_state5"))
	__asm(lbl("__Z17b2World_QueryAABBPvP8_AS3_Val__XprivateX__BB383_14_F"))
		i9 =  (i10 * 36)
		i9 =  (i11 + i9)
		i4 =  ((__xasm<int>(push(i0), op(0x37))))
		i9 =  ((__xasm<int>(push((i9+16)), op(0x37))))
		i4 =  ((__xasm<int>(push((i4+8)), op(0x37))))
		i9 =  ((__xasm<int>(push((i9+16)), op(0x37))))
		mstate.esp -= 8
		__asm(push(i8), push(mstate.esp), op(0x3c))
		__asm(push(i9), push((mstate.esp+4)), op(0x3c))
		state = 6
		mstate.esp -= 4;(mstate.funcs[i4])()
		return
	__asm(lbl("__Z17b2World_QueryAABBPvP8_AS3_Val_state6"))
		i9 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z17b2World_QueryAABBPvP8_AS3_Val__XprivateX__BB383_15_F"))
		i9 =  (i9 & 255)
		__asm(push(i9==0), iftrue, target("__Z17b2World_QueryAABBPvP8_AS3_Val__XprivateX__BB383_16_F"))
		__asm(jump, target("__Z17b2World_QueryAABBPvP8_AS3_Val__XprivateX__BB383_27_F"))
	__asm(lbl("__Z17b2World_QueryAABBPvP8_AS3_Val__XprivateX__BB383_16_F"))
		i1 =  ((__xasm<int>(push(i1), op(0x37))))
		__asm(push(i1==i3), iftrue, target("__Z17b2World_QueryAABBPvP8_AS3_Val__XprivateX__BB383_32_F"))
		__asm(jump, target("__Z17b2World_QueryAABBPvP8_AS3_Val__XprivateX__BB383_17_F"))
	__asm(lbl("__Z17b2World_QueryAABBPvP8_AS3_Val__XprivateX__BB383_17_F"))
		i3 =  (0)
		mstate.esp -= 8
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i3), push((mstate.esp+4)), op(0x3c))
		state = 7
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z17b2World_QueryAABBPvP8_AS3_Val_state7"))
		i1 = mstate.eax
		mstate.esp += 8
		__asm(jump, target("__Z17b2World_QueryAABBPvP8_AS3_Val__XprivateX__BB383_32_F"))
	__asm(lbl("__Z17b2World_QueryAABBPvP8_AS3_Val__XprivateX__BB383_18_F"))
		i13 =  ((__xasm<int>(push(i6), op(0x37))))
		__asm(push(i9!=i13), iftrue, target("__Z17b2World_QueryAABBPvP8_AS3_Val__XprivateX__BB383_22_F"))
	__asm(lbl("__Z17b2World_QueryAABBPvP8_AS3_Val__XprivateX__BB383_19_F"))
		i14 =  (0)
		i15 =  (i13 << 1)
		__asm(push(i15), push(i6), op(0x3c))
		mstate.esp -= 8
		i13 =  (i13 << 3)
		__asm(push(i14), push(mstate.esp), op(0x3c))
		__asm(push(i13), push((mstate.esp+4)), op(0x3c))
		state = 8
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z17b2World_QueryAABBPvP8_AS3_Val_state8"))
		i13 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z17b2World_QueryAABBPvP8_AS3_Val__XprivateX__BB383_20_F"))
		__asm(push(i13), push(i1), op(0x3c))
		i14 = i4
		i9 =  (i9 << 2)
		memcpy(i13, i14, i9)
		i9 = i4
		__asm(push(i3==i4), iftrue, target("__Z17b2World_QueryAABBPvP8_AS3_Val__XprivateX__BB383_22_F"))
	__asm(lbl("__Z17b2World_QueryAABBPvP8_AS3_Val__XprivateX__BB383_21_F"))
		i4 =  (0)
		mstate.esp -= 8
		__asm(push(i9), push(mstate.esp), op(0x3c))
		__asm(push(i4), push((mstate.esp+4)), op(0x3c))
		state = 9
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z17b2World_QueryAABBPvP8_AS3_Val_state9"))
		i9 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z17b2World_QueryAABBPvP8_AS3_Val__XprivateX__BB383_22_F"))
		i9 =  ((__xasm<int>(push(i7), op(0x37))))
		i4 =  ((__xasm<int>(push(i1), op(0x37))))
		i12 =  ((__xasm<int>(push(i12), op(0x37))))
		i9 =  (i9 << 2)
		i9 =  (i4 + i9)
		__asm(push(i12), push(i9), op(0x3c))
		i9 =  ((__xasm<int>(push(i7), op(0x37))))
		i9 =  (i9 + 1)
		i4 =  (i10 * 36)
		i4 =  (i11 + i4)
		__asm(push(i9), push(i7), op(0x3c))
		i10 =  ((__xasm<int>(push(i6), op(0x37))))
		i4 =  (i4 + 28)
		__asm(push(i9!=i10), iftrue, target("__Z17b2World_QueryAABBPvP8_AS3_Val__XprivateX__BB383_26_F"))
	__asm(lbl("__Z17b2World_QueryAABBPvP8_AS3_Val__XprivateX__BB383_23_F"))
		i11 =  (0)
		i12 =  ((__xasm<int>(push(i1), op(0x37))))
		i13 =  (i10 << 1)
		__asm(push(i13), push(i6), op(0x3c))
		mstate.esp -= 8
		i10 =  (i10 << 3)
		__asm(push(i11), push(mstate.esp), op(0x3c))
		__asm(push(i10), push((mstate.esp+4)), op(0x3c))
		state = 10
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z17b2World_QueryAABBPvP8_AS3_Val_state10"))
		i10 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z17b2World_QueryAABBPvP8_AS3_Val__XprivateX__BB383_24_F"))
		__asm(push(i10), push(i1), op(0x3c))
		i11 = i12
		i9 =  (i9 << 2)
		memcpy(i10, i11, i9)
		i9 = i12
		__asm(push(i3==i12), iftrue, target("__Z17b2World_QueryAABBPvP8_AS3_Val__XprivateX__BB383_26_F"))
	__asm(lbl("__Z17b2World_QueryAABBPvP8_AS3_Val__XprivateX__BB383_25_F"))
		i10 =  (0)
		mstate.esp -= 8
		__asm(push(i9), push(mstate.esp), op(0x3c))
		__asm(push(i10), push((mstate.esp+4)), op(0x3c))
		state = 11
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z17b2World_QueryAABBPvP8_AS3_Val_state11"))
		i9 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z17b2World_QueryAABBPvP8_AS3_Val__XprivateX__BB383_26_F"))
		i9 =  ((__xasm<int>(push(i7), op(0x37))))
		i10 =  ((__xasm<int>(push(i1), op(0x37))))
		i4 =  ((__xasm<int>(push(i4), op(0x37))))
		i9 =  (i9 << 2)
		i9 =  (i10 + i9)
		__asm(push(i4), push(i9), op(0x3c))
		i9 =  ((__xasm<int>(push(i7), op(0x37))))
		i9 =  (i9 + 1)
		__asm(push(i9), push(i7), op(0x3c))
	__asm(lbl("__Z17b2World_QueryAABBPvP8_AS3_Val__XprivateX__BB383_27_F"))
		i4 =  ((__xasm<int>(push(i7), op(0x37))))
		__asm(push(i4<1), iftrue, target("__Z17b2World_QueryAABBPvP8_AS3_Val__XprivateX__BB383_30_F"))
	__asm(lbl("__Z17b2World_QueryAABBPvP8_AS3_Val__XprivateX__BB383_28_F"))
		i9 = i4
	__asm(lbl("__Z17b2World_QueryAABBPvP8_AS3_Val__XprivateX__BB383_29_F"))
		__asm(push(i4<1), iftrue, target("__Z17b2World_QueryAABBPvP8_AS3_Val__XprivateX__BB383_2_B"))
		__asm(jump, target("__Z17b2World_QueryAABBPvP8_AS3_Val__XprivateX__BB383_4_B"))
	__asm(lbl("__Z17b2World_QueryAABBPvP8_AS3_Val__XprivateX__BB383_30_F"))
		i0 =  ((__xasm<int>(push(i1), op(0x37))))
		__asm(push(i0==i3), iftrue, target("__Z17b2World_QueryAABBPvP8_AS3_Val__XprivateX__BB383_32_F"))
	__asm(lbl("__Z17b2World_QueryAABBPvP8_AS3_Val__XprivateX__BB383_31_F"))
		i1 =  (0)
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 12
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z17b2World_QueryAABBPvP8_AS3_Val_state12"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z17b2World_QueryAABBPvP8_AS3_Val__XprivateX__BB383_32_F"))
		i0 =  ((__xasm<int>(push((mstate.ebp+-1084)), op(0x37))))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 13
		mstate.esp -= 4;(mstate.funcs[_AS3_Release])()
		return
	__asm(lbl("__Z17b2World_QueryAABBPvP8_AS3_Val_state13"))
		mstate.esp += 4
	__asm(lbl("__Z17b2World_QueryAABBPvP8_AS3_Val__XprivateX__BB383_33_F"))
		state = 14
		mstate.esp -= 4;(mstate.funcs[_AS3_Null])()
		return
	__asm(lbl("__Z17b2World_QueryAABBPvP8_AS3_Val_state14"))
		i0 = mstate.eax
	__asm(lbl("__Z17b2World_QueryAABBPvP8_AS3_Val__XprivateX__BB383_34_F"))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z17b2World_QueryAABBPvP8_AS3_Val_errState"))
		throw("Invalid state in __Z17b2World_QueryAABBPvP8_AS3_Val")
	}
}



// Async
public const __Z14b2World_deletePvP8_AS3_Val:int = regFunc(FSM__Z14b2World_deletePvP8_AS3_Val.start)

public final class FSM__Z14b2World_deletePvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z14b2World_deletePvP8_AS3_Val = new FSM__Z14b2World_deletePvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int

	public static const intRegCount:int = 7

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z14b2World_deletePvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z14b2World_deletePvP8_AS3_Val_errState",
			"__Z14b2World_deletePvP8_AS3_Val_state0",
			"__Z14b2World_deletePvP8_AS3_Val_state1",
			"__Z14b2World_deletePvP8_AS3_Val_state2",
			"__Z14b2World_deletePvP8_AS3_Val_state3",
			"__Z14b2World_deletePvP8_AS3_Val_state4",
			"__Z14b2World_deletePvP8_AS3_Val_state5",
			"__Z14b2World_deletePvP8_AS3_Val_state6",
			"__Z14b2World_deletePvP8_AS3_Val_state7",
			"__Z14b2World_deletePvP8_AS3_Val_state8",
			"__Z14b2World_deletePvP8_AS3_Val_state9",
			"__Z14b2World_deletePvP8_AS3_Val_state10",
			"__Z14b2World_deletePvP8_AS3_Val_state11",
			"__Z14b2World_deletePvP8_AS3_Val_state12",
			"__Z14b2World_deletePvP8_AS3_Val_state13",
			"__Z14b2World_deletePvP8_AS3_Val_state14",
			"__Z14b2World_deletePvP8_AS3_Val_state15",
			"__Z14b2World_deletePvP8_AS3_Val_state16",
			"__Z14b2World_deletePvP8_AS3_Val_state17",
			"__Z14b2World_deletePvP8_AS3_Val_state18"))
	__asm(lbl("__Z14b2World_deletePvP8_AS3_Val_state0"))
	__asm(lbl("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 4
		i0 =  (__2E_str26233)
		mstate.esp -= 12
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((mstate.ebp+-4))
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_ArrayValue])()
		return
	__asm(lbl("__Z14b2World_deletePvP8_AS3_Val_state1"))
		mstate.esp += 12
		i0 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		i0 =  ((__xasm<int>(push((i0+102952)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_6_F"))
	__asm(jump, target("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_1_F"), lbl("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_1_B"), label, lbl("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_1_F")); 
		i1 =  ((__xasm<int>(push((i0+108)), op(0x37))))
		__asm(push(i1==0), iftrue, target("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_4_F"))
	__asm(jump, target("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_2_F"), lbl("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_2_B"), label, lbl("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_2_F")); 
		i2 =  ((__xasm<int>(push((i1+44)), op(0x37))))
		mstate.esp -= 4
		__asm(push(i2), push(mstate.esp), op(0x3c))
		state = 2
		mstate.esp -= 4;(mstate.funcs[_AS3_Release])()
		return
	__asm(lbl("__Z14b2World_deletePvP8_AS3_Val_state2"))
		mstate.esp += 4
		i1 =  ((__xasm<int>(push((i1+8)), op(0x37))))
		__asm(push(i1==0), iftrue, target("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_4_F"))
	__asm(lbl("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_3_F"))
		__asm(jump, target("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_2_B"))
	__asm(lbl("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_4_F"))
		i1 =  ((__xasm<int>(push((i0+152)), op(0x37))))
		mstate.esp -= 4
		__asm(push(i1), push(mstate.esp), op(0x3c))
		state = 3
		mstate.esp -= 4;(mstate.funcs[_AS3_Release])()
		return
	__asm(lbl("__Z14b2World_deletePvP8_AS3_Val_state3"))
		mstate.esp += 4
		i0 =  ((__xasm<int>(push((i0+104)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_6_F"))
	__asm(lbl("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_5_F"))
		__asm(jump, target("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_1_B"))
	__asm(lbl("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_6_F"))
		i0 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		i0 =  ((__xasm<int>(push((i0+102956)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_9_F"))
	__asm(jump, target("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_7_F"), lbl("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_7_B"), label, lbl("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_7_F")); 
		i1 =  ((__xasm<int>(push((i0+60)), op(0x37))))
		mstate.esp -= 4
		__asm(push(i1), push(mstate.esp), op(0x3c))
		state = 4
		mstate.esp -= 4;(mstate.funcs[_AS3_Release])()
		return
	__asm(lbl("__Z14b2World_deletePvP8_AS3_Val_state4"))
		mstate.esp += 4
		i0 =  ((__xasm<int>(push((i0+12)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_9_F"))
	__asm(lbl("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_8_F"))
		__asm(jump, target("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_7_B"))
	__asm(lbl("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_9_F"))
		i0 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		i0 =  ((__xasm<int>(push((i0+102980)), op(0x37))))
		__asm(push(i0!=0), iftrue, target("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_11_F"))
	__asm(lbl("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_10_F"))
		i0 =  (0)
		__asm(jump, target("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_12_F"))
	__asm(lbl("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_11_F"))
		i0 =  (i0 + -4)
	__asm(lbl("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_12_F"))
		i1 =  ((__xasm<int>(push((i0+8)), op(0x37))))
		mstate.esp -= 4
		__asm(push(i1), push(mstate.esp), op(0x3c))
		state = 5
		mstate.esp -= 4;(mstate.funcs[_AS3_Release])()
		return
	__asm(lbl("__Z14b2World_deletePvP8_AS3_Val_state5"))
		mstate.esp += 4
		__asm(push(i0==0), iftrue, target("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_14_F"))
	__asm(lbl("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_13_F"))
		i1 =  ((__xasm<int>(push(i0), op(0x37))))
		i1 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 6
		mstate.esp -= 4;(mstate.funcs[i1])()
		return
	__asm(lbl("__Z14b2World_deletePvP8_AS3_Val_state6"))
		mstate.esp += 4
	__asm(lbl("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_14_F"))
		i0 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_36_F"))
	__asm(lbl("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_15_F"))
		i1 =  ((__xasm<int>(push((i0+102952)), op(0x37))))
		__asm(push(i1==0), iftrue, target("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_22_F"))
	__asm(lbl("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_16_F"))
		i2 = i0
		__asm(jump, target("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_20_F"))
	__asm(lbl("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_17_B"), label)
		__asm(push(i3==0), iftrue, target("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_19_F"))
	__asm(jump, target("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_18_F"), lbl("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_18_B"), label, lbl("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_18_F")); 
		i4 = i3
		i5 =  (0)
		i3 =  ((__xasm<int>(push((i4+8)), op(0x37))))
		__asm(push(i5), push((i4+32)), op(0x3c))
		mstate.esp -= 8
		__asm(push(i4), push(mstate.esp), op(0x3c))
		__asm(push(i2), push((mstate.esp+4)), op(0x3c))
		state = 7
		mstate.esp -= 4;FSM__ZN9b2Fixture7DestroyEP16b2BlockAllocator.start()
		return
	__asm(lbl("__Z14b2World_deletePvP8_AS3_Val_state7"))
		mstate.esp += 8
		__asm(jump, target("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_17_B"))
	__asm(lbl("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_19_B"), label, lbl("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_19_F")); 
		__asm(push(i1==0), iftrue, target("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_22_F"))
	__asm(lbl("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_20_F"))
		i3 = i1
		i1 =  ((__xasm<int>(push((i3+104)), op(0x37))))
		i3 =  ((__xasm<int>(push((i3+108)), op(0x37))))
		__asm(push(i3==0), iftrue, target("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_19_B"))
	__asm(lbl("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_21_F"))
		__asm(jump, target("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_18_B"))
	__asm(lbl("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_22_F"))
		i1 =  (0)
		i2 =  ((__xasm<int>(push((i0+102904)), op(0x37))))
		mstate.esp -= 8
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 8
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z14b2World_deletePvP8_AS3_Val_state8"))
		i2 = mstate.eax
		mstate.esp += 8
		i2 =  ((__xasm<int>(push((i0+102916)), op(0x37))))
		mstate.esp -= 8
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 9
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z14b2World_deletePvP8_AS3_Val_state9"))
		i2 = mstate.eax
		mstate.esp += 8
		i2 =  ((__xasm<int>(push((i0+102876)), op(0x37))))
		mstate.esp -= 8
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 10
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z14b2World_deletePvP8_AS3_Val_state10"))
		i1 = mstate.eax
		mstate.esp += 8
		i1 =  ((__xasm<int>(push((i0+102468)), op(0x37))))
		__asm(push(i1==0), iftrue, target("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_25_F"))
	__asm(lbl("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_23_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str11218)
		i3 =  (__ZZN16b2StackAllocatorD4EvE8__func__)
		i4 =  (__2E_str10217)
		i5 =  (32)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 11
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z14b2World_deletePvP8_AS3_Val_state11"))
		mstate.esp += 24
	__asm(lbl("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_24_F"))
		state = 12
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z14b2World_deletePvP8_AS3_Val_state12"))
	__asm(lbl("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_25_F"))
		i1 =  ((__xasm<int>(push((i0+102864)), op(0x37))))
		__asm(push(i1==0), iftrue, target("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_28_F"))
	__asm(lbl("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_26_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str12219)
		i3 =  (__ZZN16b2StackAllocatorD4EvE8__func__)
		i4 =  (__2E_str10217)
		i5 =  (33)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 13
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z14b2World_deletePvP8_AS3_Val_state13"))
		mstate.esp += 24
	__asm(lbl("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_27_F"))
		state = 14
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z14b2World_deletePvP8_AS3_Val_state14"))
	__asm(lbl("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_28_F"))
		i1 =  ((__xasm<int>(push((i0+4)), op(0x37))))
		i2 =  ((__xasm<int>(push(i0), op(0x37))))
		i3 =  (i0 + 4)
		i4 = i0
		__asm(push(i1>0), iftrue, target("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_30_F"))
	__asm(lbl("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_29_F"))
		__asm(jump, target("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_33_F"))
	__asm(lbl("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_30_F"))
		i1 =  (0)
		i5 =  (4)
	__asm(jump, target("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_31_F"), lbl("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_31_B"), label, lbl("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_31_F")); 
		i6 =  (0)
		i2 =  (i2 + i5)
		i2 =  ((__xasm<int>(push(i2), op(0x37))))
		mstate.esp -= 8
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i6), push((mstate.esp+4)), op(0x3c))
		state = 15
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z14b2World_deletePvP8_AS3_Val_state15"))
		i2 = mstate.eax
		mstate.esp += 8
		i2 =  ((__xasm<int>(push(i3), op(0x37))))
		i6 =  ((__xasm<int>(push(i4), op(0x37))))
		i5 =  (i5 + 8)
		i1 =  (i1 + 1)
		__asm(push(i2>i1), iftrue, target("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_37_F"))
	__asm(lbl("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_32_F"))
		i2 = i6
		__asm(jump, target("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_33_F"))
	__asm(lbl("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_33_F"))
		i1 = i2
		i2 =  (0)
		mstate.esp -= 8
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i2), push((mstate.esp+4)), op(0x3c))
		state = 16
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z14b2World_deletePvP8_AS3_Val_state16"))
		i1 = mstate.eax
		mstate.esp += 8
		__asm(push(i0==0), iftrue, target("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_35_F"))
	__asm(lbl("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_34_F"))
		i1 =  (0)
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 17
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z14b2World_deletePvP8_AS3_Val_state17"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(jump, target("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_35_F"), lbl("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_35_B"), label, lbl("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_35_F")); 
		state = 18
		mstate.esp -= 4;(mstate.funcs[_AS3_Null])()
		return
	__asm(lbl("__Z14b2World_deletePvP8_AS3_Val_state18"))
		i0 = mstate.eax
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_36_F"))
		__asm(jump, target("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_35_B"))
	__asm(lbl("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_37_F"))
		i2 = i6
		__asm(jump, target("__Z14b2World_deletePvP8_AS3_Val__XprivateX__BB384_31_B"))
	__asm(lbl("__Z14b2World_deletePvP8_AS3_Val_errState"))
		throw("Invalid state in __Z14b2World_deletePvP8_AS3_Val")
	}
}



// Async
public const __Z20b2World_DestroyJointPvP8_AS3_Val:int = regFunc(FSM__Z20b2World_DestroyJointPvP8_AS3_Val.start)

public final class FSM__Z20b2World_DestroyJointPvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z20b2World_DestroyJointPvP8_AS3_Val = new FSM__Z20b2World_DestroyJointPvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int

	public static const intRegCount:int = 4

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z20b2World_DestroyJointPvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z20b2World_DestroyJointPvP8_AS3_Val_errState",
			"__Z20b2World_DestroyJointPvP8_AS3_Val_state0",
			"__Z20b2World_DestroyJointPvP8_AS3_Val_state1",
			"__Z20b2World_DestroyJointPvP8_AS3_Val_state2",
			"__Z20b2World_DestroyJointPvP8_AS3_Val_state3",
			"__Z20b2World_DestroyJointPvP8_AS3_Val_state4"))
	__asm(lbl("__Z20b2World_DestroyJointPvP8_AS3_Val_state0"))
	__asm(lbl("__Z20b2World_DestroyJointPvP8_AS3_Val__XprivateX__BB385_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 8
		i0 =  (__2E_str34241)
		mstate.esp -= 16
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((mstate.ebp+-8))
		i3 =  ((mstate.ebp+-4))
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i3), push((mstate.esp+8)), op(0x3c))
		__asm(push(i2), push((mstate.esp+12)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_ArrayValue])()
		return
	__asm(lbl("__Z20b2World_DestroyJointPvP8_AS3_Val_state1"))
		mstate.esp += 16
		i0 =  ((__xasm<int>(push((mstate.ebp+-8)), op(0x37))))
		i0 =  ((__xasm<int>(push((i0+60)), op(0x37))))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 2
		mstate.esp -= 4;(mstate.funcs[_AS3_Release])()
		return
	__asm(lbl("__Z20b2World_DestroyJointPvP8_AS3_Val_state2"))
		mstate.esp += 4
		i0 =  ((__xasm<int>(push((mstate.ebp+-8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		mstate.esp -= 8
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 3
		mstate.esp -= 4;FSM__ZN7b2World12DestroyJointEP7b2Joint.start()
		return
	__asm(lbl("__Z20b2World_DestroyJointPvP8_AS3_Val_state3"))
		mstate.esp += 8
		state = 4
		mstate.esp -= 4;(mstate.funcs[_AS3_Null])()
		return
	__asm(lbl("__Z20b2World_DestroyJointPvP8_AS3_Val_state4"))
		i0 = mstate.eax
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z20b2World_DestroyJointPvP8_AS3_Val_errState"))
		throw("Invalid state in __Z20b2World_DestroyJointPvP8_AS3_Val")
	}
}



// Async
public const __Z19b2World_CreateJointPvP8_AS3_Val:int = regFunc(FSM__Z19b2World_CreateJointPvP8_AS3_Val.start)

public final class FSM__Z19b2World_CreateJointPvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z19b2World_CreateJointPvP8_AS3_Val = new FSM__Z19b2World_CreateJointPvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
	public var i8:int, i9:int, i10:int, i11:int, i12:int, i13:int

	public static const intRegCount:int = 14
	public var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number

	public static const NumberRegCount:int = 6
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z19b2World_CreateJointPvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z19b2World_CreateJointPvP8_AS3_Val_errState",
			"__Z19b2World_CreateJointPvP8_AS3_Val_state0",
			"__Z19b2World_CreateJointPvP8_AS3_Val_state1",
			"__Z19b2World_CreateJointPvP8_AS3_Val_state2",
			"__Z19b2World_CreateJointPvP8_AS3_Val_state3",
			"__Z19b2World_CreateJointPvP8_AS3_Val_state4",
			"__Z19b2World_CreateJointPvP8_AS3_Val_state5",
			"__Z19b2World_CreateJointPvP8_AS3_Val_state6",
			"__Z19b2World_CreateJointPvP8_AS3_Val_state7",
			"__Z19b2World_CreateJointPvP8_AS3_Val_state8",
			"__Z19b2World_CreateJointPvP8_AS3_Val_state9",
			"__Z19b2World_CreateJointPvP8_AS3_Val_state10",
			"__Z19b2World_CreateJointPvP8_AS3_Val_state11",
			"__Z19b2World_CreateJointPvP8_AS3_Val_state12",
			"__Z19b2World_CreateJointPvP8_AS3_Val_state13",
			"__Z19b2World_CreateJointPvP8_AS3_Val_state14",
			"__Z19b2World_CreateJointPvP8_AS3_Val_state15",
			"__Z19b2World_CreateJointPvP8_AS3_Val_state16",
			"__Z19b2World_CreateJointPvP8_AS3_Val_state17",
			"__Z19b2World_CreateJointPvP8_AS3_Val_state18",
			"__Z19b2World_CreateJointPvP8_AS3_Val_state19",
			"__Z19b2World_CreateJointPvP8_AS3_Val_state20",
			"__Z19b2World_CreateJointPvP8_AS3_Val_state21",
			"__Z19b2World_CreateJointPvP8_AS3_Val_state22",
			"__Z19b2World_CreateJointPvP8_AS3_Val_state23",
			"__Z19b2World_CreateJointPvP8_AS3_Val_state24",
			"__Z19b2World_CreateJointPvP8_AS3_Val_state25",
			"__Z19b2World_CreateJointPvP8_AS3_Val_state26",
			"__Z19b2World_CreateJointPvP8_AS3_Val_state27",
			"__Z19b2World_CreateJointPvP8_AS3_Val_state28",
			"__Z19b2World_CreateJointPvP8_AS3_Val_state29",
			"__Z19b2World_CreateJointPvP8_AS3_Val_state30",
			"__Z19b2World_CreateJointPvP8_AS3_Val_state31",
			"__Z19b2World_CreateJointPvP8_AS3_Val_state32",
			"__Z19b2World_CreateJointPvP8_AS3_Val_state33",
			"__Z19b2World_CreateJointPvP8_AS3_Val_state34",
			"__Z19b2World_CreateJointPvP8_AS3_Val_state35",
			"__Z19b2World_CreateJointPvP8_AS3_Val_state36",
			"__Z19b2World_CreateJointPvP8_AS3_Val_state37",
			"__Z19b2World_CreateJointPvP8_AS3_Val_state38",
			"__Z19b2World_CreateJointPvP8_AS3_Val_state39",
			"__Z19b2World_CreateJointPvP8_AS3_Val_state40",
			"__Z19b2World_CreateJointPvP8_AS3_Val_state41",
			"__Z19b2World_CreateJointPvP8_AS3_Val_state42",
			"__Z19b2World_CreateJointPvP8_AS3_Val_state43",
			"__Z19b2World_CreateJointPvP8_AS3_Val_state44",
			"__Z19b2World_CreateJointPvP8_AS3_Val_state45",
			"__Z19b2World_CreateJointPvP8_AS3_Val_state46",
			"__Z19b2World_CreateJointPvP8_AS3_Val_state47",
			"__Z19b2World_CreateJointPvP8_AS3_Val_state48",
			"__Z19b2World_CreateJointPvP8_AS3_Val_state49",
			"__Z19b2World_CreateJointPvP8_AS3_Val_state50",
			"__Z19b2World_CreateJointPvP8_AS3_Val_state51",
			"__Z19b2World_CreateJointPvP8_AS3_Val_state52",
			"__Z19b2World_CreateJointPvP8_AS3_Val_state53",
			"__Z19b2World_CreateJointPvP8_AS3_Val_state54",
			"__Z19b2World_CreateJointPvP8_AS3_Val_state55"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val_state0"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 12
		i0 =  (__2E_str97304)
		mstate.esp -= 20
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((mstate.ebp+-12))
		i3 =  ((mstate.ebp+-8))
		i4 =  ((mstate.ebp+-4))
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i4), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i2), push((mstate.esp+16)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_ArrayValue])()
		return
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val_state1"))
		mstate.esp += 20
		i0 =  ((__xasm<int>(push((mstate.ebp+-8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+102868)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+-12)), op(0x37))))
		i1 =  (i1 & 2)
		__asm(push(i1==0), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_3_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_1_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i2 =  (__2E_str1670)
		i1 =  (__2E_str121314)
		i3 =  (__ZZN7b2World11CreateJointEPK10b2JointDefE8__func__)
		i4 =  (__2E_str69276)
		i5 =  (210)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i2), push((mstate.esp+4)), op(0x3c))
		__asm(push(i1), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
	__asm(jump, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_2_F"), lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_2_B"), label, lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_2_F")); 
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val_state2"))
		mstate.esp += 24
		state = 3
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val_state3"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_3_F"))
		i1 =  ((__xasm<int>(push(i2), op(0x37))))
		i3 = i2
		i4 = i0
		__asm(push(i1>5), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_14_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_4_F"))
		__asm(push(i1>2), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_9_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_5_F"))
		__asm(push(i1==1), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_64_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_6_F"))
		__asm(push(i1==2), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_7_F"))
		__asm(jump, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_136_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_7_F"))
		i1 =  (244)
		mstate.esp -= 8
		__asm(push(i4), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 4
		mstate.esp -= 4;FSM__ZN16b2BlockAllocator8AllocateEi.start()
		return
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val_state4"))
		i4 = mstate.eax
		mstate.esp += 8
		__asm(push(i4!=0), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_60_F"))
		__asm(jump, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_8_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_8_F"))
		__asm(jump, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_123_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_9_F"))
		__asm(push(i1==3), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_24_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_10_F"))
		__asm(push(i1==4), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_70_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_11_F"))
		__asm(push(i1==5), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_12_F"))
		__asm(jump, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_136_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_12_F"))
		i1 =  (164)
		mstate.esp -= 8
		__asm(push(i4), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 5
		mstate.esp -= 4;FSM__ZN16b2BlockAllocator8AllocateEi.start()
		return
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val_state5"))
		i4 = mstate.eax
		mstate.esp += 8
		__asm(push(i4!=0), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_30_F"))
		__asm(jump, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_13_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_13_F"))
		__asm(jump, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_123_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_14_F"))
		__asm(push(i1>7), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_19_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_15_F"))
		__asm(push(i1==6), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_79_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_16_F"))
		__asm(push(i1==7), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_17_F"))
		__asm(jump, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_136_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_17_F"))
		i1 =  (216)
		mstate.esp -= 8
		__asm(push(i4), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 6
		mstate.esp -= 4;FSM__ZN16b2BlockAllocator8AllocateEi.start()
		return
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val_state6"))
		i4 = mstate.eax
		mstate.esp += 8
		__asm(push(i4!=0), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_103_F"))
		__asm(jump, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_18_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_18_F"))
		__asm(jump, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_123_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_19_F"))
		__asm(push(i1==8), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_107_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_20_F"))
		__asm(push(i1==9), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_113_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_21_F"))
		__asm(push(i1==10), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_22_F"))
		__asm(jump, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_136_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_22_F"))
		i1 =  (156)
		mstate.esp -= 8
		__asm(push(i4), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 7
		mstate.esp -= 4;FSM__ZN16b2BlockAllocator8AllocateEi.start()
		return
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val_state7"))
		i4 = mstate.eax
		mstate.esp += 8
		__asm(push(i4!=0), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_119_F"))
		__asm(jump, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_23_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_23_F"))
		__asm(jump, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_123_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_24_F"))
		i1 =  (148)
		mstate.esp -= 8
		__asm(push(i4), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 8
		mstate.esp -= 4;FSM__ZN16b2BlockAllocator8AllocateEi.start()
		return
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val_state8"))
		i4 = mstate.eax
		mstate.esp += 8
		__asm(push(i4!=0), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_26_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_25_F"))
		__asm(jump, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_123_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_26_F"))
		i1 =  (__ZTV7b2Joint)
		i1 =  (i1 + 8)
		__asm(push(i1), push(i4), op(0x3c))
		i1 =  ((__xasm<int>(push((i2+8)), op(0x37))))
		i5 =  ((__xasm<int>(push((i2+12)), op(0x37))))
		i6 =  (i2 + 12)
		i7 =  (i2 + 8)
		i8 = i4
		i9 = i2
		i10 = i4
		__asm(push(i1!=i5), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_29_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_27_F"))
		i4 =  (___sF)
		mstate.esp -= 24
		i0 =  (__2E_str1670)
		i2 =  (__2E_str40247)
		i3 =  (__ZZN7b2JointC4EPK10b2JointDefE8__func__)
		i6 =  (__2E_str39246)
		i7 =  (173)
		i4 =  (i4 + 176)
		__asm(push(i4), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i6), push((mstate.esp+16)), op(0x3c))
		__asm(push(i7), push((mstate.esp+20)), op(0x3c))
		state = 9
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val_state9"))
		mstate.esp += 24
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_28_F"))
		state = 10
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val_state10"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_29_F"))
		i1 =  (0)
		i3 =  ((__xasm<int>(push(i3), op(0x37))))
		__asm(push(i3), push((i10+4)), op(0x3c))
		__asm(push(i1), push((i10+8)), op(0x3c))
		__asm(push(i1), push((i10+12)), op(0x3c))
		i3 =  ((__xasm<int>(push(i7), op(0x37))))
		__asm(push(i3), push((i10+48)), op(0x3c))
		i3 =  ((__xasm<int>(push(i6), op(0x37))))
		__asm(push(i3), push((i10+52)), op(0x3c))
		i3 =  ((__xasm<int>(push((i9+16)), op(0x35))))
		__asm(push(i3), push((i10+57)), op(0x3a))
		__asm(push(i1), push((i10+56)), op(0x3a))
		i3 =  ((__xasm<int>(push((i9+4)), op(0x37))))
		__asm(push(i3), push((i10+60)), op(0x3c))
		__asm(push(i1), push((i10+20)), op(0x3c))
		__asm(push(i1), push((i10+16)), op(0x3c))
		__asm(push(i1), push((i10+24)), op(0x3c))
		__asm(push(i1), push((i10+28)), op(0x3c))
		__asm(push(i1), push((i10+36)), op(0x3c))
		__asm(push(i1), push((i10+32)), op(0x3c))
		__asm(push(i1), push((i10+40)), op(0x3c))
		i3 =  (__ZTV15b2DistanceJoint)
		__asm(push(i1), push((i10+44)), op(0x3c))
		i3 =  (i3 + 8)
		__asm(push(i3), push(i8), op(0x3c))
		f0 =  ((__xasm<Number>(push((i9+20)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i9+24)), op(0x38))))
		__asm(push(f0), push((i10+96)), op(0x3d))
		__asm(push(f1), push((i10+100)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i9+28)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i9+32)), op(0x38))))
		__asm(push(f0), push((i10+104)), op(0x3d))
		__asm(push(f1), push((i10+108)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i9+36)), op(0x38))))
		__asm(push(f0), push((i10+144)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i9+40)), op(0x38))))
		__asm(push(f0), push((i10+120)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i9+44)), op(0x38))))
		__asm(push(f0), push((i10+124)), op(0x3d))
		__asm(push(i1), push((i10+136)), op(0x3c))
		__asm(push(i1), push((i10+128)), op(0x3c))
		__asm(push(i1), push((i10+132)), op(0x3c))
		__asm(jump, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_123_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_30_F"))
		i1 =  (__ZTV7b2Joint)
		i1 =  (i1 + 8)
		__asm(push(i1), push(i4), op(0x3c))
		i1 =  ((__xasm<int>(push((i2+8)), op(0x37))))
		i5 =  ((__xasm<int>(push((i2+12)), op(0x37))))
		i6 =  (i2 + 12)
		i7 =  (i2 + 8)
		i8 = i4
		i9 = i2
		i10 = i4
		__asm(push(i1!=i5), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_33_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_31_F"))
		i4 =  (___sF)
		mstate.esp -= 24
		i0 =  (__2E_str1670)
		i2 =  (__2E_str40247)
		i3 =  (__ZZN7b2JointC4EPK10b2JointDefE8__func__)
		i6 =  (__2E_str39246)
		i7 =  (173)
		i4 =  (i4 + 176)
		__asm(push(i4), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i6), push((mstate.esp+16)), op(0x3c))
		__asm(push(i7), push((mstate.esp+20)), op(0x3c))
		state = 11
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val_state11"))
		mstate.esp += 24
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_32_F"))
		state = 12
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val_state12"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_33_F"))
		i1 =  (0)
		i3 =  ((__xasm<int>(push(i3), op(0x37))))
		__asm(push(i3), push((i10+4)), op(0x3c))
		__asm(push(i1), push((i10+8)), op(0x3c))
		__asm(push(i1), push((i10+12)), op(0x3c))
		i3 =  ((__xasm<int>(push(i7), op(0x37))))
		__asm(push(i3), push((i10+48)), op(0x3c))
		i3 =  ((__xasm<int>(push(i6), op(0x37))))
		__asm(push(i3), push((i10+52)), op(0x3c))
		i5 =  ((__xasm<int>(push((i9+16)), op(0x35))))
		__asm(push(i5), push((i10+57)), op(0x3a))
		__asm(push(i1), push((i10+56)), op(0x3a))
		i5 =  ((__xasm<int>(push((i9+4)), op(0x37))))
		__asm(push(i5), push((i10+60)), op(0x3c))
		__asm(push(i1), push((i10+20)), op(0x3c))
		__asm(push(i1), push((i10+16)), op(0x3c))
		__asm(push(i1), push((i10+24)), op(0x3c))
		__asm(push(i1), push((i10+28)), op(0x3c))
		__asm(push(i1), push((i10+36)), op(0x3c))
		__asm(push(i1), push((i10+32)), op(0x3c))
		__asm(push(i1), push((i10+40)), op(0x3c))
		i5 =  (__ZTV12b2MouseJoint)
		__asm(push(i1), push((i10+44)), op(0x3c))
		i1 =  (i5 + 8)
		__asm(push(i1), push(i8), op(0x3c))
		f0 =  ((__xasm<Number>(push((i9+20)), op(0x38))))
		f1 =  (0)
		f1 =  f1/*fround*/
		f1 =  f1/*fextend*/
		f2 =  f0/*fextend*/
		__asm(push(f2 == Number.NaN || f1 == Number.NaN), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_39_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_34_F"))
		f1 =  (-inf)
		f1 =  f1/*fround*/
		f1 =  f1/*fextend*/
		f2 =  f0/*fextend*/
		__asm(push(f2<=f1), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_39_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_35_F"))
		f1 =  (inf)
		f1 =  f1/*fround*/
		f1 =  f1/*fextend*/
		f2 =  f0/*fextend*/
		__asm(push(f2>=f1), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_39_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_36_F"))
		f1 =  (0)
		f2 =  ((__xasm<Number>(push((i9+24)), op(0x38))))
		f1 =  f1/*fround*/
		f1 =  f1/*fextend*/
		f3 =  f2/*fextend*/
		__asm(push(f3 == Number.NaN || f1 == Number.NaN), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_39_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_37_F"))
		f1 =  (-inf)
		f1 =  f1/*fround*/
		f1 =  f1/*fextend*/
		f3 =  f2/*fextend*/
		__asm(push(f3<=f1), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_39_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_38_F"))
		f1 =  (inf)
		f1 =  f1/*fround*/
		f1 =  f1/*fextend*/
		f3 =  f2/*fextend*/
		__asm(push(f3<f1), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_41_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_39_F"))
		i4 =  (___sF)
		mstate.esp -= 24
		i3 =  (__2E_str1670)
		i0 =  (__2E_str134)
		i2 =  (__ZZN12b2MouseJointC4EPK15b2MouseJointDefE8__func__)
		i9 =  (__2E_str92299)
		i10 =  (34)
		i4 =  (i4 + 176)
		__asm(push(i4), push(mstate.esp), op(0x3c))
		__asm(push(i3), push((mstate.esp+4)), op(0x3c))
		__asm(push(i0), push((mstate.esp+8)), op(0x3c))
		__asm(push(i2), push((mstate.esp+12)), op(0x3c))
		__asm(push(i9), push((mstate.esp+16)), op(0x3c))
		__asm(push(i10), push((mstate.esp+20)), op(0x3c))
		state = 13
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val_state13"))
		mstate.esp += 24
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_40_F"))
		state = 14
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val_state14"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_41_F"))
		f1 =  (0)
		f3 =  ((__xasm<Number>(push((i9+28)), op(0x38))))
		i1 =  (i9 + 28)
		f1 =  f1/*fround*/
		f1 =  f1/*fextend*/
		f4 =  f3/*fextend*/
		__asm(push(f4 == Number.NaN || f1 == Number.NaN), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_45_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_42_F"))
		f1 =  (-inf)
		f1 =  f1/*fround*/
		f1 =  f1/*fextend*/
		f4 =  f3/*fextend*/
		__asm(push(f4<=f1), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_45_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_43_F"))
		f1 =  (inf)
		f1 =  f1/*fround*/
		f1 =  f1/*fextend*/
		f4 =  f3/*fextend*/
		__asm(push(f4>=f1), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_45_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_44_F"))
		f1 =  (0)
		f1 =  f1/*fround*/
		f1 =  f1/*fextend*/
		f3 =  f3/*fextend*/
		__asm(push(f3>=f1), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_47_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_45_F"))
		i4 =  (___sF)
		mstate.esp -= 24
		i3 =  (__2E_str1670)
		i0 =  (__2E_str135)
		i1 =  (__ZZN12b2MouseJointC4EPK15b2MouseJointDefE8__func__)
		i2 =  (__2E_str92299)
		i9 =  (35)
		i4 =  (i4 + 176)
		__asm(push(i4), push(mstate.esp), op(0x3c))
		__asm(push(i3), push((mstate.esp+4)), op(0x3c))
		__asm(push(i0), push((mstate.esp+8)), op(0x3c))
		__asm(push(i1), push((mstate.esp+12)), op(0x3c))
		__asm(push(i2), push((mstate.esp+16)), op(0x3c))
		__asm(push(i9), push((mstate.esp+20)), op(0x3c))
		state = 15
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val_state15"))
		mstate.esp += 24
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_46_F"))
		state = 16
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val_state16"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_47_F"))
		f1 =  (0)
		f3 =  ((__xasm<Number>(push((i9+32)), op(0x38))))
		i5 =  (i9 + 32)
		f1 =  f1/*fround*/
		f1 =  f1/*fextend*/
		f4 =  f3/*fextend*/
		__asm(push(f4 == Number.NaN || f1 == Number.NaN), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_51_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_48_F"))
		f1 =  (-inf)
		f1 =  f1/*fround*/
		f1 =  f1/*fextend*/
		f4 =  f3/*fextend*/
		__asm(push(f4<=f1), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_51_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_49_F"))
		f1 =  (inf)
		f1 =  f1/*fround*/
		f1 =  f1/*fextend*/
		f4 =  f3/*fextend*/
		__asm(push(f4>=f1), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_51_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_50_F"))
		f1 =  (0)
		f1 =  f1/*fround*/
		f1 =  f1/*fextend*/
		f3 =  f3/*fextend*/
		__asm(push(f3>=f1), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_53_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_51_F"))
		i4 =  (___sF)
		mstate.esp -= 24
		i3 =  (__2E_str1670)
		i0 =  (__2E_str136325)
		i1 =  (__ZZN12b2MouseJointC4EPK15b2MouseJointDefE8__func__)
		i2 =  (__2E_str92299)
		i5 =  (36)
		i4 =  (i4 + 176)
		__asm(push(i4), push(mstate.esp), op(0x3c))
		__asm(push(i3), push((mstate.esp+4)), op(0x3c))
		__asm(push(i0), push((mstate.esp+8)), op(0x3c))
		__asm(push(i1), push((mstate.esp+12)), op(0x3c))
		__asm(push(i2), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 17
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val_state17"))
		mstate.esp += 24
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_52_F"))
		state = 18
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val_state18"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_53_F"))
		f1 =  (0)
		f3 =  ((__xasm<Number>(push((i9+36)), op(0x38))))
		i6 =  (i9 + 36)
		f1 =  f1/*fround*/
		f1 =  f1/*fextend*/
		f4 =  f3/*fextend*/
		__asm(push(f4 == Number.NaN || f1 == Number.NaN), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_57_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_54_F"))
		f1 =  (-inf)
		f1 =  f1/*fround*/
		f1 =  f1/*fextend*/
		f4 =  f3/*fextend*/
		__asm(push(f4<=f1), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_57_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_55_F"))
		f1 =  (inf)
		f1 =  f1/*fround*/
		f1 =  f1/*fextend*/
		f4 =  f3/*fextend*/
		__asm(push(f4>=f1), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_57_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_56_F"))
		f1 =  (0)
		f1 =  f1/*fround*/
		f1 =  f1/*fextend*/
		f3 =  f3/*fextend*/
		__asm(push(f3>=f1), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_59_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_57_F"))
		i4 =  (___sF)
		mstate.esp -= 24
		i3 =  (__2E_str1670)
		i0 =  (__2E_str137326)
		i1 =  (__ZZN12b2MouseJointC4EPK15b2MouseJointDefE8__func__)
		i2 =  (__2E_str92299)
		i5 =  (37)
		i4 =  (i4 + 176)
		__asm(push(i4), push(mstate.esp), op(0x3c))
		__asm(push(i3), push((mstate.esp+4)), op(0x3c))
		__asm(push(i0), push((mstate.esp+8)), op(0x3c))
		__asm(push(i1), push((mstate.esp+12)), op(0x3c))
		__asm(push(i2), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 19
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val_state19"))
		mstate.esp += 24
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_58_F"))
		state = 20
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val_state20"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_59_F"))
		i7 =  (0)
		__asm(push(f0), push((i10+104)), op(0x3d))
		__asm(push(f2), push((i10+108)), op(0x3d))
		f1 =  ((__xasm<Number>(push((i3+16)), op(0x38))))
		f2 =  f2/*fextend*/
		f3 =  ((__xasm<Number>(push((i3+12)), op(0x38))))
		f0 =  f0/*fextend*/
		f1 =  (f2 - f1)
		f0 =  (f0 - f3)
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		f2 =  ((__xasm<Number>(push((i3+20)), op(0x38))))
		f0 =  f0/*fextend*/
		f3 =  ((__xasm<Number>(push((i3+24)), op(0x38))))
		f1 =  f1/*fextend*/
		f4 =  ((__xasm<Number>(push((i3+28)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i3+32)), op(0x38))))
		f3 =  (f1 * f3)
		f2 =  (f0 * f2)
		f1 =  (f1 * f5)
		f3 =  f3/*fround*/
		f0 =  (f0 * f4)
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		f3 =  f3/*fextend*/
		f2 =  f2/*fextend*/
		f2 =  (f2 + f3)
		f1 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 + f1)
		f1 =  f2/*fround*/
		__asm(push(f1), push((i10+96)), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push((i10+100)), op(0x3d))
		f0 =  ((__xasm<Number>(push(i1), op(0x38))))
		__asm(push(f0), push((i10+144)), op(0x3d))
		__asm(push(i7), push((i10+112)), op(0x3c))
		__asm(push(i7), push((i10+116)), op(0x3c))
		f0 =  ((__xasm<Number>(push(i5), op(0x38))))
		__asm(push(f0), push((i10+148)), op(0x3d))
		f0 =  ((__xasm<Number>(push(i6), op(0x38))))
		__asm(push(f0), push((i10+152)), op(0x3d))
		__asm(push(i7), push((i10+156)), op(0x3c))
		__asm(push(i7), push((i10+160)), op(0x3c))
		__asm(jump, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_123_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_60_F"))
		i1 =  (__ZTV7b2Joint)
		i1 =  (i1 + 8)
		__asm(push(i1), push(i4), op(0x3c))
		i1 =  ((__xasm<int>(push((i2+8)), op(0x37))))
		i5 =  ((__xasm<int>(push((i2+12)), op(0x37))))
		i6 =  (i2 + 12)
		i7 =  (i2 + 8)
		i8 = i4
		i9 = i2
		i10 = i4
		__asm(push(i1!=i5), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_63_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_61_F"))
		i4 =  (___sF)
		mstate.esp -= 24
		i0 =  (__2E_str1670)
		i2 =  (__2E_str40247)
		i3 =  (__ZZN7b2JointC4EPK10b2JointDefE8__func__)
		i6 =  (__2E_str39246)
		i7 =  (173)
		i4 =  (i4 + 176)
		__asm(push(i4), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i6), push((mstate.esp+16)), op(0x3c))
		__asm(push(i7), push((mstate.esp+20)), op(0x3c))
		state = 21
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val_state21"))
		mstate.esp += 24
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_62_F"))
		state = 22
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val_state22"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_63_F"))
		i1 =  (0)
		i3 =  ((__xasm<int>(push(i3), op(0x37))))
		__asm(push(i3), push((i10+4)), op(0x3c))
		__asm(push(i1), push((i10+8)), op(0x3c))
		__asm(push(i1), push((i10+12)), op(0x3c))
		i3 =  ((__xasm<int>(push(i7), op(0x37))))
		__asm(push(i3), push((i10+48)), op(0x3c))
		i3 =  ((__xasm<int>(push(i6), op(0x37))))
		__asm(push(i3), push((i10+52)), op(0x3c))
		i3 =  ((__xasm<int>(push((i9+16)), op(0x35))))
		__asm(push(i3), push((i10+57)), op(0x3a))
		__asm(push(i1), push((i10+56)), op(0x3a))
		i3 =  ((__xasm<int>(push((i9+4)), op(0x37))))
		__asm(push(i3), push((i10+60)), op(0x3c))
		__asm(push(i1), push((i10+20)), op(0x3c))
		__asm(push(i1), push((i10+16)), op(0x3c))
		__asm(push(i1), push((i10+24)), op(0x3c))
		__asm(push(i1), push((i10+28)), op(0x3c))
		__asm(push(i1), push((i10+36)), op(0x3c))
		__asm(push(i1), push((i10+32)), op(0x3c))
		__asm(push(i1), push((i10+40)), op(0x3c))
		i3 =  (__ZTV16b2PrismaticJoint)
		__asm(push(i1), push((i10+44)), op(0x3c))
		i3 =  (i3 + 8)
		__asm(push(i3), push(i8), op(0x3c))
		f0 =  ((__xasm<Number>(push((i9+20)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i9+24)), op(0x38))))
		__asm(push(f0), push((i10+96)), op(0x3d))
		__asm(push(f1), push((i10+100)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i9+28)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i9+32)), op(0x38))))
		__asm(push(f0), push((i10+104)), op(0x3d))
		__asm(push(f1), push((i10+108)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i9+40)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i9+36)), op(0x38))))
		f2 =  f0/*fextend*/
		__asm(push(f1), push((i10+112)), op(0x3d))
		f2 =  -f2
		__asm(push(f0), push((i10+116)), op(0x3d))
		f0 =  f2/*fround*/
		__asm(push(f0), push((i10+120)), op(0x3d))
		__asm(push(f1), push((i10+124)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i9+44)), op(0x38))))
		__asm(push(f0), push((i10+128)), op(0x3d))
		__asm(push(i1), push((i10+200)), op(0x3c))
		__asm(push(i1), push((i10+204)), op(0x3c))
		__asm(push(i1), push((i10+208)), op(0x3c))
		__asm(push(i1), push((i10+212)), op(0x3c))
		__asm(push(i1), push((i10+216)), op(0x3c))
		f0 =  ((__xasm<Number>(push((i9+52)), op(0x38))))
		__asm(push(f0), push((i10+220)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i9+56)), op(0x38))))
		__asm(push(f0), push((i10+224)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i9+64)), op(0x38))))
		__asm(push(f0), push((i10+228)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i9+68)), op(0x38))))
		__asm(push(f0), push((i10+232)), op(0x3d))
		i3 =  ((__xasm<int>(push((i9+48)), op(0x35))))
		__asm(push(i3), push((i10+236)), op(0x3a))
		i3 =  ((__xasm<int>(push((i9+60)), op(0x35))))
		__asm(push(i3), push((i10+237)), op(0x3a))
		__asm(push(i1), push((i10+240)), op(0x3c))
		__asm(push(i1), push((i10+132)), op(0x3c))
		__asm(push(i1), push((i10+136)), op(0x3c))
		__asm(push(i1), push((i10+140)), op(0x3c))
		__asm(push(i1), push((i10+144)), op(0x3c))
		__asm(jump, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_123_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_64_F"))
		i1 =  (200)
		mstate.esp -= 8
		__asm(push(i4), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 23
		mstate.esp -= 4;FSM__ZN16b2BlockAllocator8AllocateEi.start()
		return
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val_state23"))
		i4 = mstate.eax
		mstate.esp += 8
		__asm(push(i4!=0), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_66_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_65_F"))
		__asm(jump, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_123_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_66_F"))
		i1 =  (__ZTV7b2Joint)
		i1 =  (i1 + 8)
		__asm(push(i1), push(i4), op(0x3c))
		i1 =  ((__xasm<int>(push((i2+8)), op(0x37))))
		i5 =  ((__xasm<int>(push((i2+12)), op(0x37))))
		i6 =  (i2 + 12)
		i7 =  (i2 + 8)
		i8 = i4
		i9 = i2
		i10 = i4
		__asm(push(i1!=i5), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_69_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_67_F"))
		i4 =  (___sF)
		mstate.esp -= 24
		i0 =  (__2E_str1670)
		i2 =  (__2E_str40247)
		i3 =  (__ZZN7b2JointC4EPK10b2JointDefE8__func__)
		i6 =  (__2E_str39246)
		i7 =  (173)
		i4 =  (i4 + 176)
		__asm(push(i4), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i6), push((mstate.esp+16)), op(0x3c))
		__asm(push(i7), push((mstate.esp+20)), op(0x3c))
		state = 24
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val_state24"))
		mstate.esp += 24
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_68_F"))
		state = 25
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val_state25"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_69_F"))
		i1 =  (0)
		i3 =  ((__xasm<int>(push(i3), op(0x37))))
		__asm(push(i3), push((i10+4)), op(0x3c))
		__asm(push(i1), push((i10+8)), op(0x3c))
		__asm(push(i1), push((i10+12)), op(0x3c))
		i3 =  ((__xasm<int>(push(i7), op(0x37))))
		__asm(push(i3), push((i10+48)), op(0x3c))
		i3 =  ((__xasm<int>(push(i6), op(0x37))))
		__asm(push(i3), push((i10+52)), op(0x3c))
		i3 =  ((__xasm<int>(push((i9+16)), op(0x35))))
		__asm(push(i3), push((i10+57)), op(0x3a))
		__asm(push(i1), push((i10+56)), op(0x3a))
		i3 =  ((__xasm<int>(push((i9+4)), op(0x37))))
		__asm(push(i3), push((i10+60)), op(0x3c))
		__asm(push(i1), push((i10+20)), op(0x3c))
		__asm(push(i1), push((i10+16)), op(0x3c))
		__asm(push(i1), push((i10+24)), op(0x3c))
		__asm(push(i1), push((i10+28)), op(0x3c))
		__asm(push(i1), push((i10+36)), op(0x3c))
		__asm(push(i1), push((i10+32)), op(0x3c))
		__asm(push(i1), push((i10+40)), op(0x3c))
		i3 =  (__ZTV15b2RevoluteJoint)
		__asm(push(i1), push((i10+44)), op(0x3c))
		i3 =  (i3 + 8)
		__asm(push(i3), push(i8), op(0x3c))
		f0 =  ((__xasm<Number>(push((i9+20)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i9+24)), op(0x38))))
		__asm(push(f0), push((i10+96)), op(0x3d))
		__asm(push(f1), push((i10+100)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i9+28)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i9+32)), op(0x38))))
		__asm(push(f0), push((i10+104)), op(0x3d))
		__asm(push(f1), push((i10+108)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i9+36)), op(0x38))))
		__asm(push(f0), push((i10+184)), op(0x3d))
		__asm(push(i1), push((i10+112)), op(0x3c))
		__asm(push(i1), push((i10+116)), op(0x3c))
		__asm(push(i1), push((i10+120)), op(0x3c))
		__asm(push(i1), push((i10+124)), op(0x3c))
		f0 =  ((__xasm<Number>(push((i9+44)), op(0x38))))
		__asm(push(f0), push((i10+188)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i9+48)), op(0x38))))
		__asm(push(f0), push((i10+192)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i9+60)), op(0x38))))
		__asm(push(f0), push((i10+172)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i9+56)), op(0x38))))
		__asm(push(f0), push((i10+176)), op(0x3d))
		i3 =  ((__xasm<int>(push((i9+40)), op(0x35))))
		__asm(push(i3), push((i10+180)), op(0x3a))
		i3 =  ((__xasm<int>(push((i9+52)), op(0x35))))
		__asm(push(i3), push((i10+168)), op(0x3a))
		__asm(push(i1), push((i10+196)), op(0x3c))
		__asm(jump, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_123_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_70_F"))
		i1 =  (196)
		mstate.esp -= 8
		__asm(push(i4), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 26
		mstate.esp -= 4;FSM__ZN16b2BlockAllocator8AllocateEi.start()
		return
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val_state26"))
		i4 = mstate.eax
		mstate.esp += 8
		__asm(push(i4!=0), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_72_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_71_F"))
		__asm(jump, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_123_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_72_F"))
		i1 =  (__ZTV7b2Joint)
		i1 =  (i1 + 8)
		__asm(push(i1), push(i4), op(0x3c))
		i1 =  ((__xasm<int>(push((i2+8)), op(0x37))))
		i5 =  ((__xasm<int>(push((i2+12)), op(0x37))))
		i6 =  (i2 + 12)
		i7 =  (i2 + 8)
		i8 = i4
		i9 = i2
		i10 = i4
		__asm(push(i1!=i5), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_75_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_73_F"))
		i4 =  (___sF)
		mstate.esp -= 24
		i0 =  (__2E_str1670)
		i2 =  (__2E_str40247)
		i3 =  (__ZZN7b2JointC4EPK10b2JointDefE8__func__)
		i6 =  (__2E_str39246)
		i7 =  (173)
		i4 =  (i4 + 176)
		__asm(push(i4), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i6), push((mstate.esp+16)), op(0x3c))
		__asm(push(i7), push((mstate.esp+20)), op(0x3c))
		state = 27
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val_state27"))
		mstate.esp += 24
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_74_F"))
		state = 28
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val_state28"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_75_F"))
		i1 =  (0)
		i3 =  ((__xasm<int>(push(i3), op(0x37))))
		__asm(push(i3), push((i10+4)), op(0x3c))
		__asm(push(i1), push((i10+8)), op(0x3c))
		__asm(push(i1), push((i10+12)), op(0x3c))
		i3 =  ((__xasm<int>(push(i7), op(0x37))))
		__asm(push(i3), push((i10+48)), op(0x3c))
		i3 =  ((__xasm<int>(push(i6), op(0x37))))
		__asm(push(i3), push((i10+52)), op(0x3c))
		i3 =  ((__xasm<int>(push((i9+16)), op(0x35))))
		__asm(push(i3), push((i10+57)), op(0x3a))
		__asm(push(i1), push((i10+56)), op(0x3a))
		i3 =  ((__xasm<int>(push((i9+4)), op(0x37))))
		__asm(push(i3), push((i10+60)), op(0x3c))
		__asm(push(i1), push((i10+20)), op(0x3c))
		__asm(push(i1), push((i10+16)), op(0x3c))
		__asm(push(i1), push((i10+24)), op(0x3c))
		__asm(push(i1), push((i10+28)), op(0x3c))
		__asm(push(i1), push((i10+36)), op(0x3c))
		__asm(push(i1), push((i10+32)), op(0x3c))
		__asm(push(i1), push((i10+40)), op(0x3c))
		i3 =  (__ZTV13b2PulleyJoint)
		__asm(push(i1), push((i10+44)), op(0x3c))
		i3 =  (i3 + 8)
		__asm(push(i3), push(i8), op(0x3c))
		f0 =  ((__xasm<Number>(push((i9+20)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i9+24)), op(0x38))))
		__asm(push(f0), push((i10+96)), op(0x3d))
		__asm(push(f1), push((i10+100)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i9+28)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i9+32)), op(0x38))))
		__asm(push(f0), push((i10+104)), op(0x3d))
		__asm(push(f1), push((i10+108)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i9+36)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i9+40)), op(0x38))))
		__asm(push(f0), push((i10+112)), op(0x3d))
		__asm(push(f1), push((i10+116)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i9+44)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i9+48)), op(0x38))))
		__asm(push(f0), push((i10+120)), op(0x3d))
		__asm(push(f1), push((i10+124)), op(0x3d))
		f0 =  (0)
		f1 =  ((__xasm<Number>(push((i9+68)), op(0x38))))
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f2 =  f1/*fextend*/
		__asm(push(f2!=f0), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_78_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_76_F"))
		i4 =  (___sF)
		mstate.esp -= 24
		i0 =  (__2E_str1670)
		i2 =  (__2E_str138327)
		i3 =  (__ZZN13b2PulleyJointC4EPK16b2PulleyJointDefE8__func__)
		i9 =  (__2E_str88295)
		i10 =  (72)
		i4 =  (i4 + 176)
		__asm(push(i4), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i9), push((mstate.esp+16)), op(0x3c))
		__asm(push(i10), push((mstate.esp+20)), op(0x3c))
		state = 29
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val_state29"))
		mstate.esp += 24
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_77_F"))
		state = 30
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val_state30"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_78_F"))
		f0 =  (0.001)
		__asm(push(f1), push((i10+148)), op(0x3d))
		f2 =  ((__xasm<Number>(push((i9+60)), op(0x38))))
		f1 =  f1/*fextend*/
		f2 =  (f1 * f2)
		f2 =  f2/*fround*/
		f0 =  f0/*fround*/
		f3 =  ((__xasm<Number>(push((i9+52)), op(0x38))))
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f2 =  (f3 + f2)
		f3 =  (f1 * f0)
		f2 =  f2/*fround*/
		f3 =  f3/*fround*/
		f4 =  f2/*fextend*/
		f3 =  f3/*fextend*/
		f3 =  (f4 - f3)
		__asm(push(f2), push((i10+144)), op(0x3d))
		f2 =  f3/*fround*/
		f0 =  (f4 - f0)
		f0 =  f0/*fround*/
		f3 =  ((__xasm<Number>(push((i9+56)), op(0x38))))
		f2 =  f2/*fextend*/
		f2 =  ((f3<f2) ? f3 : f2)
		f0 =  f0/*fextend*/
		f2 =  f2/*fround*/
		f0 =  (f0 / f1)
		__asm(push(f2), push((i10+152)), op(0x3d))
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push((i9+64)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  ((f1<f0) ? f1 : f0)
		f0 =  f0/*fround*/
		__asm(push(f0), push((i10+156)), op(0x3d))
		i3 =  (0)
		__asm(push(i3), push((i10+172)), op(0x3c))
		__asm(push(i3), push((i10+176)), op(0x3c))
		__asm(push(i3), push((i10+180)), op(0x3c))
		__asm(jump, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_123_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_79_F"))
		i1 =  (192)
		mstate.esp -= 8
		__asm(push(i4), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 31
		mstate.esp -= 4;FSM__ZN16b2BlockAllocator8AllocateEi.start()
		return
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val_state31"))
		i4 = mstate.eax
		mstate.esp += 8
		__asm(push(i4!=0), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_81_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_80_F"))
		__asm(jump, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_123_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_81_F"))
		i1 =  (__ZTV7b2Joint)
		i1 =  (i1 + 8)
		__asm(push(i1), push(i4), op(0x3c))
		i1 =  ((__xasm<int>(push((i2+8)), op(0x37))))
		i5 =  ((__xasm<int>(push((i2+12)), op(0x37))))
		i6 =  (i2 + 12)
		i7 =  (i2 + 8)
		i8 = i4
		i9 = i2
		i10 = i4
		__asm(push(i1!=i5), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_84_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_82_F"))
		i4 =  (___sF)
		mstate.esp -= 24
		i0 =  (__2E_str1670)
		i2 =  (__2E_str40247)
		i3 =  (__ZZN7b2JointC4EPK10b2JointDefE8__func__)
		i6 =  (__2E_str39246)
		i7 =  (173)
		i4 =  (i4 + 176)
		__asm(push(i4), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i6), push((mstate.esp+16)), op(0x3c))
		__asm(push(i7), push((mstate.esp+20)), op(0x3c))
		state = 32
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val_state32"))
		mstate.esp += 24
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_83_F"))
		state = 33
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val_state33"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_84_F"))
		i1 =  (0)
		i3 =  ((__xasm<int>(push(i3), op(0x37))))
		__asm(push(i3), push((i10+4)), op(0x3c))
		__asm(push(i1), push((i10+8)), op(0x3c))
		__asm(push(i1), push((i10+12)), op(0x3c))
		i3 =  ((__xasm<int>(push(i7), op(0x37))))
		__asm(push(i3), push((i10+48)), op(0x3c))
		i3 =  ((__xasm<int>(push(i6), op(0x37))))
		__asm(push(i3), push((i10+52)), op(0x3c))
		i3 =  ((__xasm<int>(push((i9+16)), op(0x35))))
		__asm(push(i3), push((i10+57)), op(0x3a))
		__asm(push(i1), push((i10+56)), op(0x3a))
		i3 =  ((__xasm<int>(push((i9+4)), op(0x37))))
		__asm(push(i3), push((i10+60)), op(0x3c))
		__asm(push(i1), push((i10+20)), op(0x3c))
		__asm(push(i1), push((i10+16)), op(0x3c))
		__asm(push(i1), push((i10+24)), op(0x3c))
		__asm(push(i1), push((i10+28)), op(0x3c))
		__asm(push(i1), push((i10+36)), op(0x3c))
		__asm(push(i1), push((i10+32)), op(0x3c))
		__asm(push(i1), push((i10+40)), op(0x3c))
		i3 =  (__ZTV11b2GearJoint)
		__asm(push(i1), push((i10+44)), op(0x3c))
		i3 =  (i3 + 8)
		__asm(push(i3), push(i8), op(0x3c))
		i3 =  ((__xasm<int>(push((i9+20)), op(0x37))))
		i1 =  ((__xasm<int>(push((i9+24)), op(0x37))))
		i5 =  ((__xasm<int>(push((i3+4)), op(0x37))))
		i6 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		i7 =  (i9 + 24)
		i8 =  (i9 + 20)
		i11 =  (i10 + 52)
		i12 =  (i10 + 48)
		i13 =  (i5 + -1)
		__asm(push(uint(i13)<uint(2)), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_87_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_85_F"))
		i4 =  (___sF)
		mstate.esp -= 24
		i3 =  (__2E_str1670)
		i0 =  (__2E_str130322)
		i1 =  (__ZZN11b2GearJointC4EPK14b2GearJointDefE8__func__)
		i2 =  (__2E_str122315)
		i5 =  (51)
		i4 =  (i4 + 176)
		__asm(push(i4), push(mstate.esp), op(0x3c))
		__asm(push(i3), push((mstate.esp+4)), op(0x3c))
		__asm(push(i0), push((mstate.esp+8)), op(0x3c))
		__asm(push(i1), push((mstate.esp+12)), op(0x3c))
		__asm(push(i2), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 34
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val_state34"))
		mstate.esp += 24
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_86_F"))
		state = 35
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val_state35"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_87_F"))
		i13 =  (i6 + -1)
		__asm(push(uint(i13)<uint(2)), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_90_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_88_F"))
		i4 =  (___sF)
		mstate.esp -= 24
		i3 =  (__2E_str1670)
		i0 =  (__2E_str131)
		i1 =  (__ZZN11b2GearJointC4EPK14b2GearJointDefE8__func__)
		i2 =  (__2E_str122315)
		i5 =  (52)
		i4 =  (i4 + 176)
		__asm(push(i4), push(mstate.esp), op(0x3c))
		__asm(push(i3), push((mstate.esp+4)), op(0x3c))
		__asm(push(i0), push((mstate.esp+8)), op(0x3c))
		__asm(push(i1), push((mstate.esp+12)), op(0x3c))
		__asm(push(i2), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 36
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val_state36"))
		mstate.esp += 24
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_89_F"))
		state = 37
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val_state37"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_90_F"))
		i3 =  ((__xasm<int>(push((i3+48)), op(0x37))))
		i3 =  ((__xasm<int>(push(i3), op(0x37))))
		__asm(push(i3==0), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_93_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_91_F"))
		i4 =  (___sF)
		mstate.esp -= 24
		i0 =  (__2E_str1670)
		i1 =  (__2E_str132323)
		i2 =  (__ZZN11b2GearJointC4EPK14b2GearJointDefE8__func__)
		i3 =  (__2E_str122315)
		i5 =  (53)
		i4 =  (i4 + 176)
		__asm(push(i4), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i1), push((mstate.esp+8)), op(0x3c))
		__asm(push(i2), push((mstate.esp+12)), op(0x3c))
		__asm(push(i3), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 38
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val_state38"))
		mstate.esp += 24
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_92_F"))
		state = 39
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val_state39"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_93_F"))
		i3 =  ((__xasm<int>(push((i1+48)), op(0x37))))
		i3 =  ((__xasm<int>(push(i3), op(0x37))))
		__asm(push(i3==0), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_96_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_94_F"))
		i4 =  (___sF)
		mstate.esp -= 24
		i0 =  (__2E_str1670)
		i2 =  (__2E_str133324)
		i3 =  (__ZZN11b2GearJointC4EPK14b2GearJointDefE8__func__)
		i5 =  (__2E_str122315)
		i6 =  (54)
		i4 =  (i4 + 176)
		__asm(push(i4), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i5), push((mstate.esp+16)), op(0x3c))
		__asm(push(i6), push((mstate.esp+20)), op(0x3c))
		state = 40
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val_state40"))
		mstate.esp += 24
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_95_F"))
		state = 41
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val_state41"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_96_F"))
		i3 =  (0)
		__asm(push(i3), push((i10+104)), op(0x3c))
		__asm(push(i3), push((i10+108)), op(0x3c))
		__asm(push(i3), push((i10+112)), op(0x3c))
		__asm(push(i3), push((i10+116)), op(0x3c))
		i3 =  ((__xasm<int>(push(i8), op(0x37))))
		i3 =  ((__xasm<int>(push((i3+48)), op(0x37))))
		__asm(push(i3), push((i10+96)), op(0x3c))
		i3 =  ((__xasm<int>(push(i8), op(0x37))))
		i3 =  ((__xasm<int>(push((i3+52)), op(0x37))))
		__asm(push(i3), push(i12), op(0x3c))
		i3 =  ((__xasm<int>(push(i8), op(0x37))))
		i1 =  (i10 + 116)
		i8 =  (i10 + 112)
		i12 =  (i10 + 108)
		i13 =  (i10 + 104)
		__asm(push(i5!=1), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_98_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_97_F"))
		__asm(push(i3), push(i13), op(0x3c))
		f0 =  ((__xasm<Number>(push((i3+96)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i3+100)), op(0x38))))
		__asm(push(f0), push((i10+120)), op(0x3d))
		__asm(push(f1), push((i10+124)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i3+104)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i3+108)), op(0x38))))
		__asm(push(f0), push((i10+136)), op(0x3d))
		__asm(push(f1), push((i10+140)), op(0x3d))
		i12 =  ((__xasm<int>(push((i3+52)), op(0x37))))
		i5 =  ((__xasm<int>(push((i3+48)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i12+64)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i5+64)), op(0x38))))
		f0 =  (f0 - f1)
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push((i3+184)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f0 - f1)
		f0 =  f0/*fround*/
		__asm(jump, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_99_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_98_F"))
		__asm(push(i3), push(i12), op(0x3c))
		f0 =  ((__xasm<Number>(push((i3+96)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i3+100)), op(0x38))))
		__asm(push(f0), push((i10+120)), op(0x3d))
		__asm(push(f1), push((i10+124)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i3+104)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i3+108)), op(0x38))))
		__asm(push(f0), push((i10+136)), op(0x3d))
		__asm(push(f1), push((i10+140)), op(0x3d))
		mstate.esp -= 4
		__asm(push(i3), push(mstate.esp), op(0x3c))
		mstate.esp -= 4;FSM__ZNK16b2PrismaticJoint19GetJointTranslationEv.start()
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val_state42"))
		f0 = mstate.st0
		mstate.esp += 4
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_99_F"))
		i3 =  ((__xasm<int>(push(i7), op(0x37))))
		i3 =  ((__xasm<int>(push((i3+48)), op(0x37))))
		__asm(push(i3), push((i10+100)), op(0x3c))
		i3 =  ((__xasm<int>(push(i7), op(0x37))))
		i3 =  ((__xasm<int>(push((i3+52)), op(0x37))))
		__asm(push(i3), push(i11), op(0x3c))
		i3 =  ((__xasm<int>(push(i7), op(0x37))))
		__asm(push(i6!=1), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_101_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_100_F"))
		__asm(push(i3), push(i8), op(0x3c))
		f1 =  ((__xasm<Number>(push((i3+96)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i3+100)), op(0x38))))
		__asm(push(f1), push((i10+128)), op(0x3d))
		__asm(push(f2), push((i10+132)), op(0x3d))
		f1 =  ((__xasm<Number>(push((i3+104)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i3+108)), op(0x38))))
		__asm(push(f1), push((i10+144)), op(0x3d))
		__asm(push(f2), push((i10+148)), op(0x3d))
		i1 =  ((__xasm<int>(push((i3+52)), op(0x37))))
		i5 =  ((__xasm<int>(push((i3+48)), op(0x37))))
		f1 =  ((__xasm<Number>(push((i1+64)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i5+64)), op(0x38))))
		f1 =  (f1 - f2)
		f1 =  f1/*fround*/
		f2 =  ((__xasm<Number>(push((i3+184)), op(0x38))))
		f1 =  f1/*fextend*/
		f1 =  (f1 - f2)
		f1 =  f1/*fround*/
		__asm(jump, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_102_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_101_F"))
		__asm(push(i3), push(i1), op(0x3c))
		f1 =  ((__xasm<Number>(push((i3+96)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i3+100)), op(0x38))))
		__asm(push(f1), push((i10+128)), op(0x3d))
		__asm(push(f2), push((i10+132)), op(0x3d))
		f1 =  ((__xasm<Number>(push((i3+104)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i3+108)), op(0x38))))
		__asm(push(f1), push((i10+144)), op(0x3d))
		__asm(push(f2), push((i10+148)), op(0x3d))
		mstate.esp -= 4
		__asm(push(i3), push(mstate.esp), op(0x3c))
		mstate.esp -= 4;FSM__ZNK16b2PrismaticJoint19GetJointTranslationEv.start()
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val_state43"))
		f1 = mstate.st0
		mstate.esp += 4
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_102_F"))
		i3 =  (0)
		f2 =  ((__xasm<Number>(push((i9+28)), op(0x38))))
		f1 =  f1/*fextend*/
		f3 =  f2/*fextend*/
		f1 =  (f3 * f1)
		f1 =  f1/*fround*/
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  (f1 + f0)
		__asm(push(f2), push((i10+180)), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push((i10+176)), op(0x3d))
		__asm(push(i3), push((i10+188)), op(0x3c))
		__asm(jump, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_123_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_103_F"))
		i1 =  (__ZTV7b2Joint)
		i1 =  (i1 + 8)
		__asm(push(i1), push(i4), op(0x3c))
		i1 =  ((__xasm<int>(push((i2+8)), op(0x37))))
		i5 =  ((__xasm<int>(push((i2+12)), op(0x37))))
		i6 =  (i2 + 12)
		i7 =  (i2 + 8)
		i8 = i4
		i9 = i2
		i10 = i4
		__asm(push(i1!=i5), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_106_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_104_F"))
		i4 =  (___sF)
		mstate.esp -= 24
		i0 =  (__2E_str1670)
		i2 =  (__2E_str40247)
		i3 =  (__ZZN7b2JointC4EPK10b2JointDefE8__func__)
		i6 =  (__2E_str39246)
		i7 =  (173)
		i4 =  (i4 + 176)
		__asm(push(i4), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i6), push((mstate.esp+16)), op(0x3c))
		__asm(push(i7), push((mstate.esp+20)), op(0x3c))
		state = 44
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val_state44"))
		mstate.esp += 24
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_105_F"))
		state = 45
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val_state45"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_106_F"))
		i1 =  (0)
		i3 =  ((__xasm<int>(push(i3), op(0x37))))
		__asm(push(i3), push((i10+4)), op(0x3c))
		__asm(push(i1), push((i10+8)), op(0x3c))
		__asm(push(i1), push((i10+12)), op(0x3c))
		i3 =  ((__xasm<int>(push(i7), op(0x37))))
		__asm(push(i3), push((i10+48)), op(0x3c))
		i3 =  ((__xasm<int>(push(i6), op(0x37))))
		__asm(push(i3), push((i10+52)), op(0x3c))
		i3 =  ((__xasm<int>(push((i9+16)), op(0x35))))
		__asm(push(i3), push((i10+57)), op(0x3a))
		__asm(push(i1), push((i10+56)), op(0x3a))
		i3 =  ((__xasm<int>(push((i9+4)), op(0x37))))
		__asm(push(i3), push((i10+60)), op(0x3c))
		__asm(push(i1), push((i10+20)), op(0x3c))
		__asm(push(i1), push((i10+16)), op(0x3c))
		__asm(push(i1), push((i10+24)), op(0x3c))
		__asm(push(i1), push((i10+28)), op(0x3c))
		__asm(push(i1), push((i10+36)), op(0x3c))
		__asm(push(i1), push((i10+32)), op(0x3c))
		__asm(push(i1), push((i10+40)), op(0x3c))
		i3 =  (__ZTV11b2LineJoint)
		__asm(push(i1), push((i10+44)), op(0x3c))
		i3 =  (i3 + 8)
		__asm(push(i3), push(i8), op(0x3c))
		f0 =  ((__xasm<Number>(push((i9+20)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i9+24)), op(0x38))))
		__asm(push(f0), push((i10+96)), op(0x3d))
		__asm(push(f1), push((i10+100)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i9+28)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i9+32)), op(0x38))))
		__asm(push(f0), push((i10+104)), op(0x3d))
		__asm(push(f1), push((i10+108)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i9+40)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i9+36)), op(0x38))))
		f2 =  f0/*fextend*/
		__asm(push(f1), push((i10+112)), op(0x3d))
		f2 =  -f2
		__asm(push(f0), push((i10+116)), op(0x3d))
		f0 =  f2/*fround*/
		__asm(push(f0), push((i10+120)), op(0x3d))
		__asm(push(f1), push((i10+124)), op(0x3d))
		__asm(push(i1), push((i10+176)), op(0x3c))
		__asm(push(i1), push((i10+180)), op(0x3c))
		__asm(push(i1), push((i10+184)), op(0x3c))
		__asm(push(i1), push((i10+188)), op(0x3c))
		f0 =  ((__xasm<Number>(push((i9+48)), op(0x38))))
		__asm(push(f0), push((i10+192)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i9+52)), op(0x38))))
		__asm(push(f0), push((i10+196)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i9+60)), op(0x38))))
		__asm(push(f0), push((i10+200)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i9+64)), op(0x38))))
		__asm(push(f0), push((i10+204)), op(0x3d))
		i3 =  ((__xasm<int>(push((i9+44)), op(0x35))))
		__asm(push(i3), push((i10+208)), op(0x3a))
		i3 =  ((__xasm<int>(push((i9+56)), op(0x35))))
		__asm(push(i3), push((i10+209)), op(0x3a))
		__asm(push(i1), push((i10+212)), op(0x3c))
		__asm(push(i1), push((i10+128)), op(0x3c))
		__asm(push(i1), push((i10+132)), op(0x3c))
		__asm(push(i1), push((i10+136)), op(0x3c))
		__asm(push(i1), push((i10+140)), op(0x3c))
		__asm(jump, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_123_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_107_F"))
		i1 =  (164)
		mstate.esp -= 8
		__asm(push(i4), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 46
		mstate.esp -= 4;FSM__ZN16b2BlockAllocator8AllocateEi.start()
		return
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val_state46"))
		i4 = mstate.eax
		mstate.esp += 8
		__asm(push(i4!=0), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_109_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_108_F"))
		__asm(jump, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_123_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_109_F"))
		i1 =  (__ZTV7b2Joint)
		i1 =  (i1 + 8)
		__asm(push(i1), push(i4), op(0x3c))
		i1 =  ((__xasm<int>(push((i2+8)), op(0x37))))
		i5 =  ((__xasm<int>(push((i2+12)), op(0x37))))
		i6 =  (i2 + 12)
		i7 =  (i2 + 8)
		i8 = i4
		i9 = i2
		i10 = i4
		__asm(push(i1!=i5), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_112_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_110_F"))
		i4 =  (___sF)
		mstate.esp -= 24
		i0 =  (__2E_str1670)
		i2 =  (__2E_str40247)
		i3 =  (__ZZN7b2JointC4EPK10b2JointDefE8__func__)
		i6 =  (__2E_str39246)
		i7 =  (173)
		i4 =  (i4 + 176)
		__asm(push(i4), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i6), push((mstate.esp+16)), op(0x3c))
		__asm(push(i7), push((mstate.esp+20)), op(0x3c))
		state = 47
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val_state47"))
		mstate.esp += 24
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_111_F"))
		state = 48
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val_state48"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_112_F"))
		i1 =  (0)
		i3 =  ((__xasm<int>(push(i3), op(0x37))))
		__asm(push(i3), push((i10+4)), op(0x3c))
		__asm(push(i1), push((i10+8)), op(0x3c))
		__asm(push(i1), push((i10+12)), op(0x3c))
		i3 =  ((__xasm<int>(push(i7), op(0x37))))
		__asm(push(i3), push((i10+48)), op(0x3c))
		i3 =  ((__xasm<int>(push(i6), op(0x37))))
		__asm(push(i3), push((i10+52)), op(0x3c))
		i3 =  ((__xasm<int>(push((i9+16)), op(0x35))))
		__asm(push(i3), push((i10+57)), op(0x3a))
		__asm(push(i1), push((i10+56)), op(0x3a))
		i3 =  ((__xasm<int>(push((i9+4)), op(0x37))))
		__asm(push(i3), push((i10+60)), op(0x3c))
		__asm(push(i1), push((i10+20)), op(0x3c))
		__asm(push(i1), push((i10+16)), op(0x3c))
		__asm(push(i1), push((i10+24)), op(0x3c))
		__asm(push(i1), push((i10+28)), op(0x3c))
		__asm(push(i1), push((i10+36)), op(0x3c))
		__asm(push(i1), push((i10+32)), op(0x3c))
		__asm(push(i1), push((i10+40)), op(0x3c))
		i3 =  (__ZTV11b2WeldJoint)
		__asm(push(i1), push((i10+44)), op(0x3c))
		i3 =  (i3 + 8)
		__asm(push(i3), push(i8), op(0x3c))
		f0 =  ((__xasm<Number>(push((i9+20)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i9+24)), op(0x38))))
		__asm(push(f0), push((i10+96)), op(0x3d))
		__asm(push(f1), push((i10+100)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i9+28)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i9+32)), op(0x38))))
		__asm(push(f0), push((i10+104)), op(0x3d))
		__asm(push(f1), push((i10+108)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i9+36)), op(0x38))))
		__asm(push(f0), push((i10+112)), op(0x3d))
		__asm(push(i1), push((i10+116)), op(0x3c))
		__asm(push(i1), push((i10+120)), op(0x3c))
		__asm(push(i1), push((i10+124)), op(0x3c))
		__asm(jump, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_123_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_113_F"))
		i1 =  (152)
		mstate.esp -= 8
		__asm(push(i4), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 49
		mstate.esp -= 4;FSM__ZN16b2BlockAllocator8AllocateEi.start()
		return
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val_state49"))
		i4 = mstate.eax
		mstate.esp += 8
		__asm(push(i4!=0), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_115_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_114_F"))
		__asm(jump, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_123_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_115_F"))
		i1 =  (__ZTV7b2Joint)
		i1 =  (i1 + 8)
		__asm(push(i1), push(i4), op(0x3c))
		i1 =  ((__xasm<int>(push((i2+8)), op(0x37))))
		i5 =  ((__xasm<int>(push((i2+12)), op(0x37))))
		i6 =  (i2 + 12)
		i7 =  (i2 + 8)
		i8 = i4
		i9 = i2
		i10 = i4
		__asm(push(i1!=i5), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_118_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_116_F"))
		i4 =  (___sF)
		mstate.esp -= 24
		i0 =  (__2E_str1670)
		i2 =  (__2E_str40247)
		i3 =  (__ZZN7b2JointC4EPK10b2JointDefE8__func__)
		i6 =  (__2E_str39246)
		i7 =  (173)
		i4 =  (i4 + 176)
		__asm(push(i4), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i6), push((mstate.esp+16)), op(0x3c))
		__asm(push(i7), push((mstate.esp+20)), op(0x3c))
		state = 50
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val_state50"))
		mstate.esp += 24
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_117_F"))
		state = 51
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val_state51"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_118_F"))
		i1 =  (0)
		i3 =  ((__xasm<int>(push(i3), op(0x37))))
		__asm(push(i3), push((i10+4)), op(0x3c))
		__asm(push(i1), push((i10+8)), op(0x3c))
		__asm(push(i1), push((i10+12)), op(0x3c))
		i3 =  ((__xasm<int>(push(i7), op(0x37))))
		__asm(push(i3), push((i10+48)), op(0x3c))
		i3 =  ((__xasm<int>(push(i6), op(0x37))))
		__asm(push(i3), push((i10+52)), op(0x3c))
		i3 =  ((__xasm<int>(push((i9+16)), op(0x35))))
		__asm(push(i3), push((i10+57)), op(0x3a))
		__asm(push(i1), push((i10+56)), op(0x3a))
		i3 =  ((__xasm<int>(push((i9+4)), op(0x37))))
		__asm(push(i3), push((i10+60)), op(0x3c))
		__asm(push(i1), push((i10+20)), op(0x3c))
		__asm(push(i1), push((i10+16)), op(0x3c))
		__asm(push(i1), push((i10+24)), op(0x3c))
		__asm(push(i1), push((i10+28)), op(0x3c))
		__asm(push(i1), push((i10+36)), op(0x3c))
		__asm(push(i1), push((i10+32)), op(0x3c))
		__asm(push(i1), push((i10+40)), op(0x3c))
		i3 =  (__ZTV15b2FrictionJoint)
		__asm(push(i1), push((i10+44)), op(0x3c))
		i3 =  (i3 + 8)
		__asm(push(i3), push(i8), op(0x3c))
		f0 =  ((__xasm<Number>(push((i9+20)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i9+24)), op(0x38))))
		__asm(push(f0), push((i10+96)), op(0x3d))
		__asm(push(f1), push((i10+100)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i9+28)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i9+32)), op(0x38))))
		__asm(push(f0), push((i10+104)), op(0x3d))
		__asm(push(f1), push((i10+108)), op(0x3d))
		__asm(push(i1), push((i10+132)), op(0x3c))
		__asm(push(i1), push((i10+136)), op(0x3c))
		__asm(push(i1), push((i10+140)), op(0x3c))
		f0 =  ((__xasm<Number>(push((i9+36)), op(0x38))))
		__asm(push(f0), push((i10+144)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i9+40)), op(0x38))))
		__asm(push(f0), push((i10+148)), op(0x3d))
		__asm(jump, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_123_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_119_F"))
		i1 =  (__ZTV7b2Joint)
		i1 =  (i1 + 8)
		__asm(push(i1), push(i4), op(0x3c))
		i1 =  ((__xasm<int>(push((i2+8)), op(0x37))))
		i5 =  ((__xasm<int>(push((i2+12)), op(0x37))))
		i6 =  (i2 + 12)
		i7 =  (i2 + 8)
		i8 = i4
		i9 = i2
		i10 = i4
		__asm(push(i1!=i5), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_122_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_120_F"))
		i4 =  (___sF)
		mstate.esp -= 24
		i0 =  (__2E_str1670)
		i2 =  (__2E_str40247)
		i3 =  (__ZZN7b2JointC4EPK10b2JointDefE8__func__)
		i6 =  (__2E_str39246)
		i7 =  (173)
		i4 =  (i4 + 176)
		__asm(push(i4), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i6), push((mstate.esp+16)), op(0x3c))
		__asm(push(i7), push((mstate.esp+20)), op(0x3c))
		state = 52
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val_state52"))
		mstate.esp += 24
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_121_F"))
		state = 53
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val_state53"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_122_F"))
		i1 =  (0)
		i3 =  ((__xasm<int>(push(i3), op(0x37))))
		__asm(push(i3), push((i10+4)), op(0x3c))
		__asm(push(i1), push((i10+8)), op(0x3c))
		__asm(push(i1), push((i10+12)), op(0x3c))
		i3 =  ((__xasm<int>(push(i7), op(0x37))))
		__asm(push(i3), push((i10+48)), op(0x3c))
		i3 =  ((__xasm<int>(push(i6), op(0x37))))
		__asm(push(i3), push((i10+52)), op(0x3c))
		i3 =  ((__xasm<int>(push((i9+16)), op(0x35))))
		__asm(push(i3), push((i10+57)), op(0x3a))
		__asm(push(i1), push((i10+56)), op(0x3a))
		i3 =  ((__xasm<int>(push((i9+4)), op(0x37))))
		__asm(push(i3), push((i10+60)), op(0x3c))
		__asm(push(i1), push((i10+20)), op(0x3c))
		__asm(push(i1), push((i10+16)), op(0x3c))
		__asm(push(i1), push((i10+24)), op(0x3c))
		__asm(push(i1), push((i10+28)), op(0x3c))
		__asm(push(i1), push((i10+36)), op(0x3c))
		__asm(push(i1), push((i10+32)), op(0x3c))
		__asm(push(i1), push((i10+40)), op(0x3c))
		i3 =  (__ZTV11b2RopeJoint)
		__asm(push(i1), push((i10+44)), op(0x3c))
		i3 =  (i3 + 8)
		__asm(push(i3), push(i8), op(0x3c))
		f0 =  ((__xasm<Number>(push((i9+20)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i9+24)), op(0x38))))
		__asm(push(f0), push((i10+96)), op(0x3d))
		__asm(push(f1), push((i10+100)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i9+28)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i9+32)), op(0x38))))
		__asm(push(f0), push((i10+104)), op(0x3d))
		__asm(push(f1), push((i10+108)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i9+36)), op(0x38))))
		__asm(push(f0), push((i10+112)), op(0x3d))
		__asm(push(i1), push((i10+144)), op(0x3c))
		__asm(push(i1), push((i10+148)), op(0x3c))
		__asm(push(i1), push((i10+152)), op(0x3c))
		__asm(push(i1), push((i10+116)), op(0x3c))
		__asm(jump, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_123_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_123_F"))
		i1 = i4
		i3 =  (0)
		__asm(push(i3), push((i1+8)), op(0x3c))
		i3 =  ((__xasm<int>(push((i0+102956)), op(0x37))))
		__asm(push(i3), push((i1+12)), op(0x3c))
		i3 =  ((__xasm<int>(push((i0+102956)), op(0x37))))
		i4 =  (i0 + 102956)
		i5 = i1
		__asm(push(i3==0), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_125_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_124_F"))
		__asm(push(i5), push((i3+8)), op(0x3c))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_125_F"))
		i3 =  (0)
		__asm(push(i5), push(i4), op(0x3c))
		i4 =  ((__xasm<int>(push((i0+102964)), op(0x37))))
		i4 =  (i4 + 1)
		__asm(push(i4), push((i0+102964)), op(0x3c))
		__asm(push(i5), push((i5+20)), op(0x3c))
		i0 =  ((__xasm<int>(push((i5+52)), op(0x37))))
		__asm(push(i0), push((i5+16)), op(0x3c))
		__asm(push(i3), push((i5+24)), op(0x3c))
		i0 =  ((__xasm<int>(push((i5+48)), op(0x37))))
		i3 =  ((__xasm<int>(push((i0+116)), op(0x37))))
		__asm(push(i3), push((i5+28)), op(0x3c))
		i0 =  ((__xasm<int>(push((i0+116)), op(0x37))))
		i3 =  (i5 + 48)
		i4 =  (i5 + 52)
		__asm(push(i0==0), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_127_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_126_F"))
		i6 =  (i5 + 16)
		__asm(push(i6), push((i0+8)), op(0x3c))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_127_F"))
		i0 =  (0)
		i6 =  ((__xasm<int>(push(i3), op(0x37))))
		i7 =  (i5 + 16)
		__asm(push(i7), push((i6+116)), op(0x3c))
		__asm(push(i5), push((i5+36)), op(0x3c))
		i3 =  ((__xasm<int>(push(i3), op(0x37))))
		__asm(push(i3), push((i5+32)), op(0x3c))
		__asm(push(i0), push((i5+40)), op(0x3c))
		i0 =  ((__xasm<int>(push(i4), op(0x37))))
		i3 =  ((__xasm<int>(push((i0+116)), op(0x37))))
		__asm(push(i3), push((i5+44)), op(0x3c))
		i0 =  ((__xasm<int>(push((i0+116)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_129_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_128_F"))
		i3 =  (i5 + 32)
		__asm(push(i3), push((i0+8)), op(0x3c))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_129_F"))
		i0 =  ((__xasm<int>(push(i4), op(0x37))))
		i3 =  (i5 + 32)
		__asm(push(i3), push((i0+116)), op(0x3c))
		i0 =  ((__xasm<int>(push((i2+8)), op(0x37))))
		i3 =  ((__xasm<int>(push((i2+16)), op(0x35))))
		__asm(push(i3!=0), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_135_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_130_F"))
		i2 =  ((__xasm<int>(push((i2+12)), op(0x37))))
		i2 =  ((__xasm<int>(push((i2+120)), op(0x37))))
		__asm(push(i2==0), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_135_F"))
	__asm(jump, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_131_F"), lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_131_B"), label, lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_131_F")); 
		i3 =  ((__xasm<int>(push(i2), op(0x37))))
		__asm(push(i3!=i0), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_133_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_132_F"))
		i3 =  ((__xasm<int>(push((i2+4)), op(0x37))))
		i4 =  ((__xasm<int>(push((i3+4)), op(0x37))))
		i4 =  (i4 | 8)
		__asm(push(i4), push((i3+4)), op(0x3c))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_133_F"))
		i2 =  ((__xasm<int>(push((i2+12)), op(0x37))))
		__asm(push(i2==0), iftrue, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_135_F"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_134_F"))
		__asm(jump, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_131_B"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_135_F"))
		i0 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		__asm(push(i0), push((i5+60)), op(0x3c))
		i0 =  ((__xasm<int>(push(_as3_ptr), op(0x37))))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 54
		mstate.esp -= 4;(mstate.funcs[_AS3_Release])()
		return
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val_state54"))
		mstate.esp += 4
		mstate.esp -= 4
		__asm(push(i1), push(mstate.esp), op(0x3c))
		state = 55
		mstate.esp -= 4;(mstate.funcs[_AS3_Ptr])()
		return
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val_state55"))
		i0 = mstate.eax
		mstate.esp += 4
		__asm(push(i0), push(_as3_ptr), op(0x3c))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_136_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i2 =  (__2E_str1670)
		i4 =  (__2E_str46253)
		i1 =  (__ZZN11b2LoopShape6CreateEPK6b2Vec2iE8__func__)
		i3 =  (__2E_str39246)
		i5 =  (113)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i2), push((mstate.esp+4)), op(0x3c))
		__asm(push(i4), push((mstate.esp+8)), op(0x3c))
		__asm(push(i1), push((mstate.esp+12)), op(0x3c))
		__asm(push(i3), push((mstate.esp+16)), op(0x3c))
		__asm(jump, target("__Z19b2World_CreateJointPvP8_AS3_Val__XprivateX__BB386_2_B"))
	__asm(lbl("__Z19b2World_CreateJointPvP8_AS3_Val_errState"))
		throw("Invalid state in __Z19b2World_CreateJointPvP8_AS3_Val")
	}
}



// Async
public const __Z19b2World_DestroyBodyPvP8_AS3_Val:int = regFunc(FSM__Z19b2World_DestroyBodyPvP8_AS3_Val.start)

public final class FSM__Z19b2World_DestroyBodyPvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z19b2World_DestroyBodyPvP8_AS3_Val = new FSM__Z19b2World_DestroyBodyPvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
	public var i8:int, i9:int, i10:int, i11:int, i12:int, i13:int, i14:int, i15:int
	public var i16:int, i17:int, i18:int, i19:int, i20:int

	public static const intRegCount:int = 21

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z19b2World_DestroyBodyPvP8_AS3_Val_errState",
			"__Z19b2World_DestroyBodyPvP8_AS3_Val_state0",
			"__Z19b2World_DestroyBodyPvP8_AS3_Val_state1",
			"__Z19b2World_DestroyBodyPvP8_AS3_Val_state2",
			"__Z19b2World_DestroyBodyPvP8_AS3_Val_state3",
			"__Z19b2World_DestroyBodyPvP8_AS3_Val_state4",
			"__Z19b2World_DestroyBodyPvP8_AS3_Val_state5",
			"__Z19b2World_DestroyBodyPvP8_AS3_Val_state6",
			"__Z19b2World_DestroyBodyPvP8_AS3_Val_state7",
			"__Z19b2World_DestroyBodyPvP8_AS3_Val_state8",
			"__Z19b2World_DestroyBodyPvP8_AS3_Val_state9",
			"__Z19b2World_DestroyBodyPvP8_AS3_Val_state10",
			"__Z19b2World_DestroyBodyPvP8_AS3_Val_state11",
			"__Z19b2World_DestroyBodyPvP8_AS3_Val_state12",
			"__Z19b2World_DestroyBodyPvP8_AS3_Val_state13"))
	__asm(lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val_state0"))
	__asm(lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 8
		i0 =  (__2E_str34241)
		mstate.esp -= 16
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((mstate.ebp+-8))
		i3 =  ((mstate.ebp+-4))
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i3), push((mstate.esp+8)), op(0x3c))
		__asm(push(i2), push((mstate.esp+12)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_ArrayValue])()
		return
	__asm(lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val_state1"))
		mstate.esp += 16
		i0 =  ((__xasm<int>(push((mstate.ebp+-8)), op(0x37))))
		i0 =  ((__xasm<int>(push((i0+152)), op(0x37))))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 2
		mstate.esp -= 4;(mstate.funcs[_AS3_Release])()
		return
	__asm(lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val_state2"))
		mstate.esp += 4
		i0 =  ((__xasm<int>(push((mstate.ebp+-8)), op(0x37))))
		i0 =  ((__xasm<int>(push((i0+108)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_3_F"))
	__asm(jump, target("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_1_F"), lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_1_B"), label, lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_1_F")); 
		i1 =  ((__xasm<int>(push((i0+44)), op(0x37))))
		mstate.esp -= 4
		__asm(push(i1), push(mstate.esp), op(0x3c))
		state = 3
		mstate.esp -= 4;(mstate.funcs[_AS3_Release])()
		return
	__asm(lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val_state3"))
		mstate.esp += 4
		i0 =  ((__xasm<int>(push((i0+8)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_3_F"))
	__asm(lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_2_F"))
		__asm(jump, target("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_1_B"))
	__asm(lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_3_F"))
		i0 =  ((__xasm<int>(push((mstate.ebp+-8)), op(0x37))))
		i0 =  ((__xasm<int>(push((i0+116)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_6_F"))
	__asm(jump, target("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_4_F"), lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_4_B"), label, lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_4_F")); 
		i1 =  ((__xasm<int>(push((i0+4)), op(0x37))))
		i1 =  ((__xasm<int>(push((i1+60)), op(0x37))))
		mstate.esp -= 4
		__asm(push(i1), push(mstate.esp), op(0x3c))
		state = 4
		mstate.esp -= 4;(mstate.funcs[_AS3_Release])()
		return
	__asm(lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val_state4"))
		mstate.esp += 4
		i0 =  ((__xasm<int>(push((i0+12)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_6_F"))
	__asm(lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_5_F"))
		__asm(jump, target("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_4_B"))
	__asm(lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_6_F"))
		i0 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+-8)), op(0x37))))
		i2 =  ((__xasm<int>(push((i0+102960)), op(0x37))))
		i3 =  (i0 + 102960)
		__asm(push(i2>0), iftrue, target("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_9_F"))
	__asm(lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_7_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i3 =  (__2E_str182)
		i2 =  (__ZZN7b2World11DestroyBodyEP6b2BodyE8__func__)
		i4 =  (__2E_str69276)
		i5 =  (129)
	__asm(jump, target("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_8_F"), lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_8_B"), label, lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_8_F")); 
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i3), push((mstate.esp+8)), op(0x3c))
		__asm(push(i2), push((mstate.esp+12)), op(0x3c))
		__asm(jump, target("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_39_F"))
	__asm(lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_9_F"))
		i2 =  ((__xasm<int>(push((i0+102868)), op(0x37))))
		i2 =  (i2 & 2)
		__asm(push(i2==0), iftrue, target("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_11_F"))
	__asm(lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_10_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i3 =  (__2E_str121314)
		i2 =  (__ZZN7b2World11DestroyBodyEP6b2BodyE8__func__)
		i4 =  (__2E_str69276)
		i5 =  (130)
		__asm(jump, target("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_8_B"))
	__asm(lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_11_F"))
		i2 =  ((__xasm<int>(push((i1+116)), op(0x37))))
		i4 =  (i1 + 116)
		__asm(push(i2==0), iftrue, target("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_17_F"))
	__asm(lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_12_F"))
		i5 =  (i0 + 102980)
	__asm(jump, target("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_13_F"), lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_13_B"), label, lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_13_F")); 
		i6 =  ((__xasm<int>(push((i2+12)), op(0x37))))
		i7 =  ((__xasm<int>(push(i5), op(0x37))))
		__asm(push(i7==0), iftrue, target("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_15_F"))
	__asm(lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_14_F"))
		i8 =  ((__xasm<int>(push(i7), op(0x37))))
		i8 =  ((__xasm<int>(push((i8+8)), op(0x37))))
		i9 =  ((__xasm<int>(push((i2+4)), op(0x37))))
		mstate.esp -= 8
		__asm(push(i7), push(mstate.esp), op(0x3c))
		__asm(push(i9), push((mstate.esp+4)), op(0x3c))
		state = 5
		mstate.esp -= 4;(mstate.funcs[i8])()
		return
	__asm(lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val_state5"))
		mstate.esp += 8
	__asm(lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_15_F"))
		i2 =  ((__xasm<int>(push((i2+4)), op(0x37))))
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i2), push((mstate.esp+4)), op(0x3c))
		state = 6
		mstate.esp -= 4;FSM__ZN7b2World12DestroyJointEP7b2Joint.start()
		return
	__asm(lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val_state6"))
		mstate.esp += 8
		__asm(push(i6), push(i4), op(0x3c))
		__asm(push(i6==0), iftrue, target("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_17_F"))
	__asm(lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_16_F"))
		i2 = i6
		__asm(jump, target("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_13_B"))
	__asm(lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_17_F"))
		i2 =  (0)
		__asm(push(i2), push(i4), op(0x3c))
		i2 =  ((__xasm<int>(push((i1+120)), op(0x37))))
		i4 =  (i1 + 120)
		__asm(push(i2==0), iftrue, target("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_21_F"))
	__asm(lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_18_F"))
		i5 =  (i0 + 102872)
	__asm(jump, target("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_19_F"), lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_19_B"), label, lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_19_F")); 
		i6 =  ((__xasm<int>(push((i2+12)), op(0x37))))
		i2 =  ((__xasm<int>(push((i2+4)), op(0x37))))
		mstate.esp -= 8
		__asm(push(i5), push(mstate.esp), op(0x3c))
		__asm(push(i2), push((mstate.esp+4)), op(0x3c))
		state = 7
		mstate.esp -= 4;FSM__ZN16b2ContactManager7DestroyEP9b2Contact.start()
		return
	__asm(lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val_state7"))
		mstate.esp += 8
		__asm(push(i6==0), iftrue, target("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_21_F"))
	__asm(lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_20_F"))
		i2 = i6
		__asm(jump, target("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_19_B"))
	__asm(lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_21_F"))
		i2 =  (0)
		__asm(push(i2), push(i4), op(0x3c))
		i2 =  ((__xasm<int>(push((i1+108)), op(0x37))))
		i4 =  (i1 + 108)
		__asm(push(i2==0), iftrue, target("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_42_F"))
	__asm(lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_22_F"))
		i5 =  (i0 + 102912)
		i6 =  (i0 + 102900)
		i7 =  (i0 + 102904)
		i8 =  (i1 + 112)
		i9 =  (i0 + 102872)
		i10 =  (i0 + 102980)
		i11 = i0
	__asm(jump, target("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_23_F"), lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_23_B"), label, lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_23_F")); 
		i12 =  ((__xasm<int>(push((i2+8)), op(0x37))))
		i13 =  ((__xasm<int>(push(i10), op(0x37))))
		__asm(push(i13!=0), iftrue, target("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_27_F"))
	__asm(lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_24_F"))
		i13 =  (0)
		__asm(jump, target("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_25_F"))
	__asm(jump, target("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_25_F"), lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_25_B"), label, lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_25_F")); 
		i14 =  ((__xasm<int>(push((i2+32)), op(0x37))))
		__asm(push(i14<=i13), iftrue, target("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_36_F"))
		__asm(jump, target("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_26_F"))
	__asm(lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_26_F"))
		__asm(jump, target("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_29_F"))
	__asm(lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_27_F"))
		i14 =  ((__xasm<int>(push(i13), op(0x37))))
		i14 =  ((__xasm<int>(push((i14+12)), op(0x37))))
		mstate.esp -= 8
		__asm(push(i13), push(mstate.esp), op(0x3c))
		__asm(push(i2), push((mstate.esp+4)), op(0x3c))
		state = 8
		mstate.esp -= 4;(mstate.funcs[i14])()
		return
	__asm(lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val_state8"))
		mstate.esp += 8
		i13 =  ((__xasm<int>(push((i2+32)), op(0x37))))
		__asm(push(i13<1), iftrue, target("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_36_F"))
	__asm(lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_28_F"))
		i13 =  (0)
	__asm(lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_29_F"))
		i14 =  ((__xasm<int>(push((i2+28)), op(0x37))))
		i15 =  (i13 * 28)
		i14 =  (i14 + i15)
		i15 =  ((__xasm<int>(push((i14+24)), op(0x37))))
		i16 =  ((__xasm<int>(push(i5), op(0x37))))
		i14 =  (i14 + 24)
		__asm(push(i16<1), iftrue, target("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_33_F"))
	__asm(lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_30_F"))
		i17 =  (0)
		i18 =  ((__xasm<int>(push(i7), op(0x37))))
	__asm(jump, target("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_31_F"), lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_31_B"), label, lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_31_F")); 
		i19 =  ((__xasm<int>(push(i18), op(0x37))))
		i20 = i18
		__asm(push(i19!=i15), iftrue, target("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_34_F"))
	__asm(lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_32_F"))
		i17 =  (-1)
		__asm(push(i17), push(i20), op(0x3c))
		__asm(jump, target("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_33_F"))
	__asm(jump, target("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_33_F"), lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_33_B"), label, lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_33_F")); 
		i16 =  (-1)
		i17 =  ((__xasm<int>(push(i6), op(0x37))))
		i17 =  (i17 + -1)
		__asm(push(i17), push(i6), op(0x3c))
		mstate.esp -= 8
		__asm(push(i9), push(mstate.esp), op(0x3c))
		__asm(push(i15), push((mstate.esp+4)), op(0x3c))
		state = 9
		mstate.esp -= 4;FSM__ZN13b2DynamicTree12DestroyProxyEi.start()
		return
	__asm(lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val_state9"))
		mstate.esp += 8
		__asm(push(i16), push(i14), op(0x3c))
		i13 =  (i13 + 1)
		__asm(jump, target("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_25_B"))
	__asm(lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_34_F"))
		i18 =  (i18 + 4)
		i17 =  (i17 + 1)
		__asm(push(i16<=i17), iftrue, target("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_33_B"))
	__asm(lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_35_F"))
		__asm(jump, target("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_31_B"))
	__asm(lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_36_F"))
		i13 =  (0)
		__asm(push(i13), push((i2+32)), op(0x3c))
		mstate.esp -= 8
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i11), push((mstate.esp+4)), op(0x3c))
		state = 10
		mstate.esp -= 4;FSM__ZN9b2Fixture7DestroyEP16b2BlockAllocator.start()
		return
	__asm(lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val_state10"))
		mstate.esp += 8
		i13 =  ((__xasm<int>(push((__ZN16b2BlockAllocator17s_blockSizeLookupE+52)), op(0x35))))
		__asm(push(uint(i13)<uint(14)), iftrue, target("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_40_F"))
	__asm(lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_37_F"))
		i2 =  (___sF)
		mstate.esp -= 24
		i0 =  (__2E_str1670)
		i1 =  (__2E_str83290)
		i3 =  (__ZZN16b2BlockAllocator4FreeEPviE8__func__)
		i4 =  (__2E_str78285)
		i5 =  (173)
		i2 =  (i2 + 176)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i1), push((mstate.esp+8)), op(0x3c))
	__asm(jump, target("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_38_F"), lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_38_B"), label, lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_38_F")); 
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
	__asm(lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_39_F"))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 11
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val_state11"))
		mstate.esp += 24
		state = 12
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val_state12"))
	__asm(lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_40_F"))
		i13 =  (i13 & 255)
		i13 =  (i13 << 2)
		i13 =  (i0 + i13)
		i14 =  ((__xasm<int>(push((i13+12)), op(0x37))))
		__asm(push(i14), push(i2), op(0x3c))
		__asm(push(i2), push((i13+12)), op(0x3c))
		__asm(push(i12), push(i4), op(0x3c))
		i2 =  ((__xasm<int>(push(i8), op(0x37))))
		i2 =  (i2 + -1)
		__asm(push(i2), push(i8), op(0x3c))
		__asm(push(i12==0), iftrue, target("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_42_F"))
	__asm(lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_41_F"))
		i2 = i12
		__asm(jump, target("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_23_B"))
	__asm(lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_42_F"))
		i2 =  (0)
		__asm(push(i2), push(i4), op(0x3c))
		__asm(push(i2), push((i1+112)), op(0x3c))
		i2 =  ((__xasm<int>(push((i1+100)), op(0x37))))
		i4 =  (i1 + 100)
		__asm(push(i2==0), iftrue, target("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_44_F"))
	__asm(lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_43_F"))
		i5 =  ((__xasm<int>(push((i1+104)), op(0x37))))
		__asm(push(i5), push((i2+104)), op(0x3c))
	__asm(lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_44_F"))
		i2 =  ((__xasm<int>(push((i1+104)), op(0x37))))
		i5 =  (i1 + 104)
		__asm(push(i2==0), iftrue, target("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_46_F"))
	__asm(lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_45_F"))
		i4 =  ((__xasm<int>(push(i4), op(0x37))))
		__asm(push(i4), push((i2+100)), op(0x3c))
	__asm(lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_46_F"))
		i2 =  ((__xasm<int>(push((i0+102952)), op(0x37))))
		i4 =  (i0 + 102952)
		__asm(push(i2!=i1), iftrue, target("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_48_F"))
	__asm(lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_47_F"))
		i2 =  ((__xasm<int>(push(i5), op(0x37))))
		__asm(push(i2), push(i4), op(0x3c))
	__asm(lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_48_F"))
		i2 =  ((__xasm<int>(push(i3), op(0x37))))
		i2 =  (i2 + -1)
		__asm(push(i2), push(i3), op(0x3c))
		i2 =  ((__xasm<int>(push((__ZN16b2BlockAllocator17s_blockSizeLookupE+156)), op(0x35))))
		__asm(push(uint(i2)<uint(14)), iftrue, target("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_50_F"))
	__asm(lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_49_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str83290)
		i3 =  (__ZZN16b2BlockAllocator4FreeEPviE8__func__)
		i4 =  (__2E_str78285)
		i5 =  (173)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(jump, target("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_38_B"))
	__asm(lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val__XprivateX__BB387_50_F"))
		i2 =  (i2 & 255)
		i2 =  (i2 << 2)
		i0 =  (i0 + i2)
		i2 =  ((__xasm<int>(push((i0+12)), op(0x37))))
		__asm(push(i2), push(i1), op(0x3c))
		__asm(push(i1), push((i0+12)), op(0x3c))
		state = 13
		mstate.esp -= 4;(mstate.funcs[_AS3_Null])()
		return
	__asm(lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val_state13"))
		i0 = mstate.eax
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z19b2World_DestroyBodyPvP8_AS3_Val_errState"))
		throw("Invalid state in __Z19b2World_DestroyBodyPvP8_AS3_Val")
	}
}



// Async
public const __Z18b2World_CreateBodyPvP8_AS3_Val:int = regFunc(FSM__Z18b2World_CreateBodyPvP8_AS3_Val.start)

public final class FSM__Z18b2World_CreateBodyPvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z18b2World_CreateBodyPvP8_AS3_Val = new FSM__Z18b2World_CreateBodyPvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
	public var i8:int, i9:int, i10:int, i11:int, i12:int, i13:int, i14:int

	public static const intRegCount:int = 15
	public var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number

	public static const NumberRegCount:int = 6
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z18b2World_CreateBodyPvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z18b2World_CreateBodyPvP8_AS3_Val_errState",
			"__Z18b2World_CreateBodyPvP8_AS3_Val_state0",
			"__Z18b2World_CreateBodyPvP8_AS3_Val_state1",
			"__Z18b2World_CreateBodyPvP8_AS3_Val_state2",
			"__Z18b2World_CreateBodyPvP8_AS3_Val_state3",
			"__Z18b2World_CreateBodyPvP8_AS3_Val_state4",
			"__Z18b2World_CreateBodyPvP8_AS3_Val_state5",
			"__Z18b2World_CreateBodyPvP8_AS3_Val_state6",
			"__Z18b2World_CreateBodyPvP8_AS3_Val_state7",
			"__Z18b2World_CreateBodyPvP8_AS3_Val_state8",
			"__Z18b2World_CreateBodyPvP8_AS3_Val_state9",
			"__Z18b2World_CreateBodyPvP8_AS3_Val_state10",
			"__Z18b2World_CreateBodyPvP8_AS3_Val_state11",
			"__Z18b2World_CreateBodyPvP8_AS3_Val_state12",
			"__Z18b2World_CreateBodyPvP8_AS3_Val_state13",
			"__Z18b2World_CreateBodyPvP8_AS3_Val_state14",
			"__Z18b2World_CreateBodyPvP8_AS3_Val_state15",
			"__Z18b2World_CreateBodyPvP8_AS3_Val_state16",
			"__Z18b2World_CreateBodyPvP8_AS3_Val_state17",
			"__Z18b2World_CreateBodyPvP8_AS3_Val_state18",
			"__Z18b2World_CreateBodyPvP8_AS3_Val_state19",
			"__Z18b2World_CreateBodyPvP8_AS3_Val_state20"))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val_state0"))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 12
		i0 =  (__2E_str97304)
		mstate.esp -= 20
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((mstate.ebp+-12))
		i3 =  ((mstate.ebp+-8))
		i4 =  ((mstate.ebp+-4))
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i4), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i2), push((mstate.esp+16)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_ArrayValue])()
		return
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val_state1"))
		mstate.esp += 20
		i0 =  ((__xasm<int>(push((mstate.ebp+-8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+102868)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+-12)), op(0x37))))
		i1 =  (i1 & 2)
		__asm(push(i1==0), iftrue, target("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_2_F"))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_1_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i2 =  (__2E_str1670)
		i1 =  (__2E_str121314)
		i3 =  (__ZZN7b2World10CreateBodyEPK9b2BodyDefE8__func__)
		i4 =  (__2E_str69276)
		i5 =  (105)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i2), push((mstate.esp+4)), op(0x3c))
		__asm(push(i1), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val_state2"))
		mstate.esp += 24
		state = 3
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val_state3"))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_2_F"))
		i1 =  (156)
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 4
		mstate.esp -= 4;FSM__ZN16b2BlockAllocator8AllocateEi.start()
		return
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val_state4"))
		i1 = mstate.eax
		mstate.esp += 8
		i3 = i1
		__asm(push(i1==0), iftrue, target("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_65_F"))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_3_F"))
		f0 =  (0)
		f1 =  ((__xasm<Number>(push((i2+4)), op(0x38))))
		i4 =  (i2 + 4)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f2 =  f1/*fextend*/
		__asm(push(f2 == Number.NaN || f0 == Number.NaN), iftrue, target("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_9_F"))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_4_F"))
		f0 =  (-inf)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f2 =  f1/*fextend*/
		__asm(push(f2<=f0), iftrue, target("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_9_F"))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_5_F"))
		f0 =  (inf)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		__asm(push(f1>=f0), iftrue, target("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_9_F"))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_6_F"))
		f0 =  (0)
		f1 =  ((__xasm<Number>(push((i2+8)), op(0x38))))
		i5 =  (i2 + 8)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f2 =  f1/*fextend*/
		__asm(push(f2 == Number.NaN || f0 == Number.NaN), iftrue, target("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_9_F"))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_7_F"))
		f0 =  (-inf)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f2 =  f1/*fextend*/
		__asm(push(f2<=f0), iftrue, target("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_9_F"))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_8_F"))
		f0 =  (inf)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		__asm(push(f1<f0), iftrue, target("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_11_F"))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_9_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str114309)
		i3 =  (__ZZN6b2BodyC4EPK9b2BodyDefP7b2WorldE8__func__)
		i4 =  (__2E_str53260)
		i5 =  (27)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 5
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val_state5"))
		mstate.esp += 24
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_10_F"))
		state = 6
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val_state6"))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_11_F"))
		f0 =  (0)
		f1 =  ((__xasm<Number>(push((i2+16)), op(0x38))))
		i6 =  (i2 + 16)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f2 =  f1/*fextend*/
		__asm(push(f2 == Number.NaN || f0 == Number.NaN), iftrue, target("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_17_F"))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_12_F"))
		f0 =  (-inf)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f2 =  f1/*fextend*/
		__asm(push(f2<=f0), iftrue, target("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_17_F"))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_13_F"))
		f0 =  (inf)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		__asm(push(f1>=f0), iftrue, target("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_17_F"))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_14_F"))
		f0 =  (0)
		f1 =  ((__xasm<Number>(push((i2+20)), op(0x38))))
		i7 =  (i2 + 20)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f2 =  f1/*fextend*/
		__asm(push(f2 == Number.NaN || f0 == Number.NaN), iftrue, target("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_17_F"))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_15_F"))
		f0 =  (-inf)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f2 =  f1/*fextend*/
		__asm(push(f2<=f0), iftrue, target("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_17_F"))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_16_F"))
		f0 =  (inf)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		__asm(push(f1<f0), iftrue, target("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_19_F"))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_17_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str115)
		i3 =  (__ZZN6b2BodyC4EPK9b2BodyDefP7b2WorldE8__func__)
		i4 =  (__2E_str53260)
		i5 =  (28)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 7
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val_state7"))
		mstate.esp += 24
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_18_F"))
		state = 8
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val_state8"))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_19_F"))
		f0 =  (0)
		f1 =  ((__xasm<Number>(push((i2+12)), op(0x38))))
		i8 =  (i2 + 12)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f2 =  f1/*fextend*/
		__asm(push(f2 == Number.NaN || f0 == Number.NaN), iftrue, target("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_22_F"))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_20_F"))
		f0 =  (-inf)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f2 =  f1/*fextend*/
		__asm(push(f2<=f0), iftrue, target("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_22_F"))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_21_F"))
		f0 =  (inf)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		__asm(push(f1<f0), iftrue, target("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_24_F"))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_22_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str116)
		i3 =  (__ZZN6b2BodyC4EPK9b2BodyDefP7b2WorldE8__func__)
		i4 =  (__2E_str53260)
		i5 =  (29)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 9
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val_state9"))
		mstate.esp += 24
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_23_F"))
		state = 10
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val_state10"))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_24_F"))
		f0 =  (0)
		f1 =  ((__xasm<Number>(push((i2+24)), op(0x38))))
		i9 =  (i2 + 24)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f2 =  f1/*fextend*/
		__asm(push(f2 == Number.NaN || f0 == Number.NaN), iftrue, target("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_27_F"))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_25_F"))
		f0 =  (-inf)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f2 =  f1/*fextend*/
		__asm(push(f2<=f0), iftrue, target("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_27_F"))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_26_F"))
		f0 =  (inf)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		__asm(push(f1<f0), iftrue, target("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_29_F"))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_27_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str117310)
		i3 =  (__ZZN6b2BodyC4EPK9b2BodyDefP7b2WorldE8__func__)
		i4 =  (__2E_str53260)
		i5 =  (30)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 11
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val_state11"))
		mstate.esp += 24
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_28_F"))
		state = 12
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val_state12"))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_29_F"))
		f0 =  (0)
		f1 =  ((__xasm<Number>(push((i2+48)), op(0x38))))
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f2 =  f1/*fextend*/
		__asm(push(f2 == Number.NaN || f0 == Number.NaN), iftrue, target("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_33_F"))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_30_F"))
		f0 =  (-inf)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f2 =  f1/*fextend*/
		__asm(push(f2<=f0), iftrue, target("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_33_F"))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_31_F"))
		f0 =  (inf)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f2 =  f1/*fextend*/
		__asm(push(f2>=f0), iftrue, target("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_33_F"))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_32_F"))
		f0 =  (0)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		__asm(push(f1>=f0), iftrue, target("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_35_F"))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_33_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str118311)
		i3 =  (__ZZN6b2BodyC4EPK9b2BodyDefP7b2WorldE8__func__)
		i4 =  (__2E_str53260)
		i5 =  (31)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 13
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val_state13"))
		mstate.esp += 24
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_34_F"))
		state = 14
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val_state14"))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_35_F"))
		f0 =  (0)
		f1 =  ((__xasm<Number>(push((i2+32)), op(0x38))))
		i10 =  (i2 + 32)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f2 =  f1/*fextend*/
		__asm(push(f2 == Number.NaN || f0 == Number.NaN), iftrue, target("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_39_F"))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_36_F"))
		f0 =  (-inf)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f2 =  f1/*fextend*/
		__asm(push(f2<=f0), iftrue, target("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_39_F"))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_37_F"))
		f0 =  (inf)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f2 =  f1/*fextend*/
		__asm(push(f2>=f0), iftrue, target("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_39_F"))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_38_F"))
		f0 =  (0)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		__asm(push(f1>=f0), iftrue, target("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_41_F"))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_39_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str119312)
		i3 =  (__ZZN6b2BodyC4EPK9b2BodyDefP7b2WorldE8__func__)
		i4 =  (__2E_str53260)
		i5 =  (32)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 15
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val_state15"))
		mstate.esp += 24
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_40_F"))
		state = 16
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val_state16"))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_41_F"))
		f0 =  (0)
		f1 =  ((__xasm<Number>(push((i2+28)), op(0x38))))
		i11 =  (i2 + 28)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f2 =  f1/*fextend*/
		__asm(push(f2 == Number.NaN || f0 == Number.NaN), iftrue, target("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_45_F"))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_42_F"))
		f0 =  (-inf)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f2 =  f1/*fextend*/
		__asm(push(f2<=f0), iftrue, target("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_45_F"))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_43_F"))
		f0 =  (inf)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f2 =  f1/*fextend*/
		__asm(push(f2>=f0), iftrue, target("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_45_F"))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_44_F"))
		f0 =  (0)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		__asm(push(f1>=f0), iftrue, target("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_47_F"))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_45_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str120313)
		i3 =  (__ZZN6b2BodyC4EPK9b2BodyDefP7b2WorldE8__func__)
		i4 =  (__2E_str53260)
		i5 =  (33)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 17
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val_state17"))
		mstate.esp += 24
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_46_F"))
		state = 18
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val_state18"))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_47_F"))
		i12 =  (0)
		__asm(push(i12), push((i3+4)), op(0x3b))
		i12 =  ((__xasm<int>(push((i2+39)), op(0x35))))
		i13 =  (i3 + 4)
		__asm(push(i12!=0), iftrue, target("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_49_F"))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_48_F"))
		i12 =  (0)
		__asm(jump, target("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_50_F"))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_49_F"))
		i12 =  (8)
		__asm(push(i12), push(i13), op(0x3b))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_50_F"))
		i14 =  ((__xasm<int>(push((i2+38)), op(0x35))))
		__asm(push(i14!=0), iftrue, target("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_52_F"))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_51_F"))
		__asm(jump, target("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_53_F"))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_52_F"))
		i12 =  (i12 | 16)
		__asm(push(i12), push(i13), op(0x3b))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_53_F"))
		i14 =  ((__xasm<int>(push((i2+36)), op(0x35))))
		__asm(push(i14!=0), iftrue, target("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_55_F"))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_54_F"))
		__asm(jump, target("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_56_F"))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_55_F"))
		i12 =  (i12 | 4)
		__asm(push(i12), push(i13), op(0x3b))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_56_F"))
		i14 =  ((__xasm<int>(push((i2+37)), op(0x35))))
		__asm(push(i14!=0), iftrue, target("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_58_F"))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_57_F"))
		__asm(jump, target("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_59_F"))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_58_F"))
		i12 =  (i12 | 2)
		__asm(push(i12), push(i13), op(0x3b))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_59_F"))
		i14 =  ((__xasm<int>(push((i2+40)), op(0x35))))
		__asm(push(i14==0), iftrue, target("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_61_F"))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_60_F"))
		i12 =  (i12 | 32)
		__asm(push(i12), push(i13), op(0x3b))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_61_F"))
		f1 =  (0)
		__asm(push(i0), push((i3+96)), op(0x3c))
		f2 =  ((__xasm<Number>(push(i4), op(0x38))))
		f3 =  ((__xasm<Number>(push(i5), op(0x38))))
		__asm(push(f2), push((i3+12)), op(0x3d))
		__asm(push(f3), push((i3+16)), op(0x3d))
		f4 =  ((__xasm<Number>(push(i8), op(0x38))))
		f0 = f4
		//InlineAsmStart
	f0 =  Math.cos(f0);

	//InlineAsmEnd
		f5 = f0
		f0 = f4
		//InlineAsmStart
	f0 =  Math.sin(f0);

	//InlineAsmEnd
		f4 =  f0/*fextend*/
		f4 =  -f4
		__asm(push(f5), push((i3+20)), op(0x3d))
		f4 =  f4/*fround*/
		__asm(push(f4), push((i3+28)), op(0x3d))
		__asm(push(f0), push((i3+24)), op(0x3d))
		f0 =  f1/*fround*/
		__asm(push(f5), push((i3+32)), op(0x3d))
		i4 =  (0)
		f1 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		__asm(push(i4), push((i3+36)), op(0x3c))
		f1 =  (f1 + f0)
		f2 =  f3/*fextend*/
		__asm(push(i4), push((i3+40)), op(0x3c))
		f1 =  f1/*fround*/
		f2 =  (f2 + f0)
		f3 =  ((__xasm<Number>(push(i8), op(0x38))))
		f1 =  f1/*fextend*/
		f2 =  f2/*fround*/
		__asm(push(f3), push((i3+64)), op(0x3d))
		f1 =  (f1 + f0)
		f2 =  f2/*fextend*/
		f0 =  (f2 + f0)
		__asm(push(f3), push((i3+60)), op(0x3d))
		f1 =  f1/*fround*/
		__asm(push(f1), push((i3+52)), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push((i3+56)), op(0x3d))
		__asm(push(f1), push((i3+44)), op(0x3d))
		__asm(push(f0), push((i3+48)), op(0x3d))
		__asm(push(i4), push((i3+116)), op(0x3c))
		__asm(push(i4), push((i3+120)), op(0x3c))
		__asm(push(i4), push((i3+100)), op(0x3c))
		__asm(push(i4), push((i3+104)), op(0x3c))
		f0 =  ((__xasm<Number>(push(i6), op(0x38))))
		f1 =  ((__xasm<Number>(push(i7), op(0x38))))
		__asm(push(f0), push((i3+72)), op(0x3d))
		__asm(push(f1), push((i3+76)), op(0x3d))
		f0 =  ((__xasm<Number>(push(i9), op(0x38))))
		__asm(push(f0), push((i3+80)), op(0x3d))
		f0 =  ((__xasm<Number>(push(i11), op(0x38))))
		__asm(push(f0), push((i3+140)), op(0x3d))
		f0 =  ((__xasm<Number>(push(i10), op(0x38))))
		__asm(push(f0), push((i3+144)), op(0x3d))
		__asm(push(i4), push((i3+84)), op(0x3c))
		__asm(push(i4), push((i3+88)), op(0x3c))
		__asm(push(i4), push((i3+92)), op(0x3c))
		__asm(push(i4), push((i3+148)), op(0x3c))
		i4 =  ((__xasm<int>(push(i2), op(0x37))))
		__asm(push(i4), push(i1), op(0x3c))
		i5 =  (i3 + 124)
		__asm(push(i4!=2), iftrue, target("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_63_F"))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_62_F"))
		i4 =  (1065353216)
		__asm(push(i4), push(i5), op(0x3c))
		__asm(push(i4), push((i3+128)), op(0x3c))
		__asm(jump, target("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_64_F"))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_63_F"))
		i4 =  (0)
		__asm(push(i4), push(i5), op(0x3c))
		__asm(push(i4), push((i3+128)), op(0x3c))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_64_F"))
		i4 =  (0)
		__asm(push(i4), push((i3+132)), op(0x3c))
		__asm(push(i4), push((i3+136)), op(0x3c))
		i2 =  ((__xasm<int>(push((i2+44)), op(0x37))))
		__asm(push(i2), push((i3+152)), op(0x3c))
		__asm(push(i4), push((i3+108)), op(0x3c))
		__asm(push(i4), push((i3+112)), op(0x3c))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_65_F"))
		i2 =  (0)
		__asm(push(i2), push((i3+100)), op(0x3c))
		i2 =  ((__xasm<int>(push((i0+102952)), op(0x37))))
		__asm(push(i2), push((i3+104)), op(0x3c))
		i2 =  ((__xasm<int>(push((i0+102952)), op(0x37))))
		i4 =  (i0 + 102952)
		__asm(push(i2==0), iftrue, target("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_67_F"))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_66_F"))
		__asm(push(i3), push((i2+100)), op(0x3c))
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val__XprivateX__BB388_67_F"))
		__asm(push(i3), push(i4), op(0x3c))
		i2 =  ((__xasm<int>(push((i0+102960)), op(0x37))))
		i2 =  (i2 + 1)
		__asm(push(i2), push((i0+102960)), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		__asm(push(i0), push((i3+152)), op(0x3c))
		i0 =  ((__xasm<int>(push(_as3_ptr), op(0x37))))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 19
		mstate.esp -= 4;(mstate.funcs[_AS3_Release])()
		return
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val_state19"))
		mstate.esp += 4
		mstate.esp -= 4
		__asm(push(i1), push(mstate.esp), op(0x3c))
		state = 20
		mstate.esp -= 4;(mstate.funcs[_AS3_Ptr])()
		return
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val_state20"))
		i0 = mstate.eax
		mstate.esp += 4
		__asm(push(i0), push(_as3_ptr), op(0x3c))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z18b2World_CreateBodyPvP8_AS3_Val_errState"))
		throw("Invalid state in __Z18b2World_CreateBodyPvP8_AS3_Val")
	}
}



// Async
public const __Z12b2World_StepPvP8_AS3_Val:int = regFunc(FSM__Z12b2World_StepPvP8_AS3_Val.start)

public final class FSM__Z12b2World_StepPvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z12b2World_StepPvP8_AS3_Val = new FSM__Z12b2World_StepPvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
	public var i8:int, i9:int, i10:int, i11:int, i12:int, i13:int, i14:int, i15:int
	public var i16:int, i17:int, i18:int, i19:int, i20:int, i21:int, i22:int, i23:int
	public var i24:int, i25:int, i26:int, i27:int, i28:int, i29:int, i30:int, i31:int
	public static const intRegCount:int = 32
	public var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number
	public var f8:Number, f9:Number, f10:Number, f11:Number, f12:Number, f13:Number, f14:Number, f15:Number
	public var f16:Number, f17:Number, f18:Number, f19:Number, f20:Number, f21:Number, f22:Number, f23:Number
	public var f24:Number, f25:Number, f26:Number, f27:Number, f28:Number, f29:Number, f30:Number, f31:Number
	public static const NumberRegCount:int = 32
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z12b2World_StepPvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z12b2World_StepPvP8_AS3_Val_errState",
			"__Z12b2World_StepPvP8_AS3_Val_state0",
			"__Z12b2World_StepPvP8_AS3_Val_state1",
			"__Z12b2World_StepPvP8_AS3_Val_state2",
			"__Z12b2World_StepPvP8_AS3_Val_state3",
			"__Z12b2World_StepPvP8_AS3_Val_state4",
			"__Z12b2World_StepPvP8_AS3_Val_state5",
			"__Z12b2World_StepPvP8_AS3_Val_state6",
			"__Z12b2World_StepPvP8_AS3_Val_state7",
			"__Z12b2World_StepPvP8_AS3_Val_state8",
			"__Z12b2World_StepPvP8_AS3_Val_state9",
			"__Z12b2World_StepPvP8_AS3_Val_state10",
			"__Z12b2World_StepPvP8_AS3_Val_state11",
			"__Z12b2World_StepPvP8_AS3_Val_state12",
			"__Z12b2World_StepPvP8_AS3_Val_state13",
			"__Z12b2World_StepPvP8_AS3_Val_state14",
			"__Z12b2World_StepPvP8_AS3_Val_state15",
			"__Z12b2World_StepPvP8_AS3_Val_state16",
			"__Z12b2World_StepPvP8_AS3_Val_state17",
			"__Z12b2World_StepPvP8_AS3_Val_state18",
			"__Z12b2World_StepPvP8_AS3_Val_state19",
			"__Z12b2World_StepPvP8_AS3_Val_state20",
			"__Z12b2World_StepPvP8_AS3_Val_state21",
			"__Z12b2World_StepPvP8_AS3_Val_state22",
			"__Z12b2World_StepPvP8_AS3_Val_state23",
			"__Z12b2World_StepPvP8_AS3_Val_state24",
			"__Z12b2World_StepPvP8_AS3_Val_state25",
			"__Z12b2World_StepPvP8_AS3_Val_state26",
			"__Z12b2World_StepPvP8_AS3_Val_state27",
			"__Z12b2World_StepPvP8_AS3_Val_state28",
			"__Z12b2World_StepPvP8_AS3_Val_state29",
			"__Z12b2World_StepPvP8_AS3_Val_state30",
			"__Z12b2World_StepPvP8_AS3_Val_state31",
			"__Z12b2World_StepPvP8_AS3_Val_state32",
			"__Z12b2World_StepPvP8_AS3_Val_state33",
			"__Z12b2World_StepPvP8_AS3_Val_state34",
			"__Z12b2World_StepPvP8_AS3_Val_state35",
			"__Z12b2World_StepPvP8_AS3_Val_state36",
			"__Z12b2World_StepPvP8_AS3_Val_state37",
			"__Z12b2World_StepPvP8_AS3_Val_state38",
			"__Z12b2World_StepPvP8_AS3_Val_state39",
			"__Z12b2World_StepPvP8_AS3_Val_state40",
			"__Z12b2World_StepPvP8_AS3_Val_state41",
			"__Z12b2World_StepPvP8_AS3_Val_state42",
			"__Z12b2World_StepPvP8_AS3_Val_state43",
			"__Z12b2World_StepPvP8_AS3_Val_state44",
			"__Z12b2World_StepPvP8_AS3_Val_state45",
			"__Z12b2World_StepPvP8_AS3_Val_state46",
			"__Z12b2World_StepPvP8_AS3_Val_state47",
			"__Z12b2World_StepPvP8_AS3_Val_state48",
			"__Z12b2World_StepPvP8_AS3_Val_state49",
			"__Z12b2World_StepPvP8_AS3_Val_state50",
			"__Z12b2World_StepPvP8_AS3_Val_state51",
			"__Z12b2World_StepPvP8_AS3_Val_state52",
			"__Z12b2World_StepPvP8_AS3_Val_state53",
			"__Z12b2World_StepPvP8_AS3_Val_state54",
			"__Z12b2World_StepPvP8_AS3_Val_state55",
			"__Z12b2World_StepPvP8_AS3_Val_state56",
			"__Z12b2World_StepPvP8_AS3_Val_state57",
			"__Z12b2World_StepPvP8_AS3_Val_state58",
			"__Z12b2World_StepPvP8_AS3_Val_state59",
			"__Z12b2World_StepPvP8_AS3_Val_state60",
			"__Z12b2World_StepPvP8_AS3_Val_state61",
			"__Z12b2World_StepPvP8_AS3_Val_state62",
			"__Z12b2World_StepPvP8_AS3_Val_state63",
			"__Z12b2World_StepPvP8_AS3_Val_state64",
			"__Z12b2World_StepPvP8_AS3_Val_state65",
			"__Z12b2World_StepPvP8_AS3_Val_state66",
			"__Z12b2World_StepPvP8_AS3_Val_state67",
			"__Z12b2World_StepPvP8_AS3_Val_state68",
			"__Z12b2World_StepPvP8_AS3_Val_state69",
			"__Z12b2World_StepPvP8_AS3_Val_state70",
			"__Z12b2World_StepPvP8_AS3_Val_state71",
			"__Z12b2World_StepPvP8_AS3_Val_state72",
			"__Z12b2World_StepPvP8_AS3_Val_state73",
			"__Z12b2World_StepPvP8_AS3_Val_state74",
			"__Z12b2World_StepPvP8_AS3_Val_state75",
			"__Z12b2World_StepPvP8_AS3_Val_state76",
			"__Z12b2World_StepPvP8_AS3_Val_state77",
			"__Z12b2World_StepPvP8_AS3_Val_state78",
			"__Z12b2World_StepPvP8_AS3_Val_state79",
			"__Z12b2World_StepPvP8_AS3_Val_state80",
			"__Z12b2World_StepPvP8_AS3_Val_state81",
			"__Z12b2World_StepPvP8_AS3_Val_state82",
			"__Z12b2World_StepPvP8_AS3_Val_state83",
			"__Z12b2World_StepPvP8_AS3_Val_state84",
			"__Z12b2World_StepPvP8_AS3_Val_state85",
			"__Z12b2World_StepPvP8_AS3_Val_state86",
			"__Z12b2World_StepPvP8_AS3_Val_state87",
			"__Z12b2World_StepPvP8_AS3_Val_state88",
			"__Z12b2World_StepPvP8_AS3_Val_state89",
			"__Z12b2World_StepPvP8_AS3_Val_state90",
			"__Z12b2World_StepPvP8_AS3_Val_state91",
			"__Z12b2World_StepPvP8_AS3_Val_state92",
			"__Z12b2World_StepPvP8_AS3_Val_state93",
			"__Z12b2World_StepPvP8_AS3_Val_state94",
			"__Z12b2World_StepPvP8_AS3_Val_state95",
			"__Z12b2World_StepPvP8_AS3_Val_state96",
			"__Z12b2World_StepPvP8_AS3_Val_state97",
			"__Z12b2World_StepPvP8_AS3_Val_state98",
			"__Z12b2World_StepPvP8_AS3_Val_state99",
			"__Z12b2World_StepPvP8_AS3_Val_state100",
			"__Z12b2World_StepPvP8_AS3_Val_state101",
			"__Z12b2World_StepPvP8_AS3_Val_state102",
			"__Z12b2World_StepPvP8_AS3_Val_state103",
			"__Z12b2World_StepPvP8_AS3_Val_state104",
			"__Z12b2World_StepPvP8_AS3_Val_state105",
			"__Z12b2World_StepPvP8_AS3_Val_state106",
			"__Z12b2World_StepPvP8_AS3_Val_state107",
			"__Z12b2World_StepPvP8_AS3_Val_state108",
			"__Z12b2World_StepPvP8_AS3_Val_state109",
			"__Z12b2World_StepPvP8_AS3_Val_state110",
			"__Z12b2World_StepPvP8_AS3_Val_state111",
			"__Z12b2World_StepPvP8_AS3_Val_state112",
			"__Z12b2World_StepPvP8_AS3_Val_state113",
			"__Z12b2World_StepPvP8_AS3_Val_state114",
			"__Z12b2World_StepPvP8_AS3_Val_state115"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state0"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 2664
		i0 =  (__2E_str177)
		mstate.esp -= 24
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((mstate.ebp+-792))
		i3 =  ((mstate.ebp+-788))
		i4 =  ((mstate.ebp+-784))
		i5 =  ((mstate.ebp+-772))
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i5), push((mstate.esp+8)), op(0x3c))
		__asm(push(i4), push((mstate.esp+12)), op(0x3c))
		__asm(push(i3), push((mstate.esp+16)), op(0x3c))
		__asm(push(i2), push((mstate.esp+20)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_ArrayValue])()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state1"))
		mstate.esp += 24
		i0 =  ((__xasm<int>(push((mstate.ebp+-772)), op(0x37))))
		__asm(push(i0), push((mstate.ebp+-963)), op(0x3c))
		f0 =  ((__xasm<Number>(push((mstate.ebp+-784)), op(0x39))))
		i0 =  ((__xasm<int>(push((i0+102868)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+-792)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+-788)), op(0x37))))
		i3 =  ((__xasm<int>(push((mstate.ebp+-963)), op(0x37))))
		i3 =  (i3 + 102868)
		__asm(push(i3), push((mstate.ebp+-819)), op(0x3c))
		f0 =  f0/*fround*/
		i3 =  ((mstate.ebp+-256))
		__asm(push(i3), push((mstate.ebp+-990)), op(0x3c))
		i3 =  ((mstate.ebp+-96))
		__asm(push(i3), push((mstate.ebp+-1017)), op(0x3c))
		i3 =  (i0 & 1)
		__asm(push(i3!=0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_2_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_1_F"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_3_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_2_F"))
		mstate.esp -= 8
		i0 =  ((__xasm<int>(push((mstate.ebp+-963)), op(0x37))))
		i0 =  (i0 + 102872)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT_.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state2"))
		mstate.esp += 8
		i0 =  ((__xasm<int>(push((mstate.ebp+-819)), op(0x37))))
		i0 =  ((__xasm<int>(push(i0), op(0x37))))
		i0 =  (i0 & -2)
		i3 =  ((__xasm<int>(push((mstate.ebp+-819)), op(0x37))))
		__asm(push(i0), push(i3), op(0x3c))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_3_F"))
		i3 =  ((mstate.ebp+-768))
		__asm(push(i3), push((mstate.ebp+-1080)), op(0x3c))
		i0 =  (i0 | 2)
		i3 =  ((__xasm<int>(push((mstate.ebp+-819)), op(0x37))))
		__asm(push(i0), push(i3), op(0x3c))
		__asm(push(f0), push((mstate.ebp+-768)), op(0x3d))
		__asm(push(i2), push((mstate.ebp+-756)), op(0x3c))
		__asm(push(i1), push((mstate.ebp+-752)), op(0x3c))
		f1 =  (0)
		i0 =  ((__xasm<int>(push((mstate.ebp+-1080)), op(0x37))))
		i0 =  (i0 + 16)
		__asm(push(i0), push((mstate.ebp+-1026)), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+-1080)), op(0x37))))
		i0 =  (i0 + 12)
		__asm(push(i0), push((mstate.ebp+-999)), op(0x3c))
		f1 =  f1/*fround*/
		f1 =  f1/*fextend*/
		f2 =  f0/*fextend*/
		__asm(push(f2<=f1), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_5_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_4_F"))
		f1 =  (1)
		f1 =  f1/*fround*/
		f2 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		f1 =  (f1 / f2)
		f1 =  f1/*fround*/
		__asm(push(f1), push((mstate.ebp+-764)), op(0x3d))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_6_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_5_F"))
		i0 =  (0)
		__asm(push(i0), push((mstate.ebp+-764)), op(0x3c))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_6_F"))
		i0 =  ((mstate.ebp+-768))
		i1 =  ((__xasm<int>(push((mstate.ebp+-963)), op(0x37))))
		f1 =  ((__xasm<Number>(push((i1+102988)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f1 * f0)
		f0 =  f0/*fround*/
		__asm(push(f0), push((mstate.ebp+-760)), op(0x3d))
		i1 =  ((__xasm<int>(push((i1+102992)), op(0x35))))
		__asm(push(i1), push((mstate.ebp+-748)), op(0x3a))
		i1 =  ((__xasm<int>(push((mstate.ebp+-963)), op(0x37))))
		i1 =  ((__xasm<int>(push((i1+102932)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+-963)), op(0x37))))
		i2 =  (i2 + 102932)
		__asm(push(i2), push((mstate.ebp+-855)), op(0x3c))
		i2 =  ((__xasm<int>(push((mstate.ebp+-963)), op(0x37))))
		i2 =  (i2 + 102872)
		__asm(push(i2), push((mstate.ebp+-936)), op(0x3c))
		i2 =  (i0 + 20)
		__asm(push(i2), push((mstate.ebp+-972)), op(0x3c))
		i0 =  (i0 + 8)
		__asm(push(i0), push((mstate.ebp+-882)), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+-963)), op(0x37))))
		i0 =  (i0 + 102988)
		__asm(push(i0), push((mstate.ebp+-801)), op(0x3c))
		__asm(push(i1==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_41_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_7_F"))
		i0 =  ((__xasm<int>(push((mstate.ebp+-963)), op(0x37))))
		i0 =  (i0 + 102940)
		i2 =  ((__xasm<int>(push((mstate.ebp+-963)), op(0x37))))
		i2 =  (i2 + 102884)
		i3 =  ((__xasm<int>(push((mstate.ebp+-963)), op(0x37))))
		i3 =  (i3 + 102876)
		i4 =  ((__xasm<int>(push((mstate.ebp+-963)), op(0x37))))
		i4 =  (i4 + 102944)
	__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_8_F"), lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_8_B"), label, lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_8_F")); 
		i5 =  ((__xasm<int>(push((i1+48)), op(0x37))))
		i6 =  ((__xasm<int>(push((i1+52)), op(0x37))))
		i7 =  ((__xasm<int>(push((i5+12)), op(0x37))))
		i8 =  ((__xasm<int>(push((i7+4)), op(0x36))))
		i9 =  ((__xasm<int>(push((i1+56)), op(0x37))))
		i10 =  ((__xasm<int>(push((i1+60)), op(0x37))))
		i11 =  ((__xasm<int>(push((i6+12)), op(0x37))))
		i8 =  (i8 & 2)
		__asm(push(i8!=0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_10_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_9_F"))
		i8 =  ((__xasm<int>(push((i11+4)), op(0x36))))
		i8 =  (i8 & 2)
		__asm(push(i8==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_18_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_10_F"))
		i8 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		i12 =  (i1 + 4)
		i8 =  (i8 & 8)
		__asm(push(i8==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_25_F"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_11_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_11_F"))
		i8 =  ((__xasm<int>(push(i11), op(0x37))))
		__asm(push(i8==2), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_13_F"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_12_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_12_F"))
		i8 =  ((__xasm<int>(push(i7), op(0x37))))
		__asm(push(i8!=2), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_20_F"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_13_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_13_F"))
		i8 =  ((__xasm<int>(push((i11+116)), op(0x37))))
		__asm(push(i8==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_22_F"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_14_F"))
	__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_14_F"), lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_14_B"), label, lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_14_F")); 
		i11 =  ((__xasm<int>(push(i8), op(0x37))))
		__asm(push(i11!=i7), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_16_F"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_15_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_15_F"))
		i11 =  ((__xasm<int>(push((i8+4)), op(0x37))))
		i11 =  ((__xasm<int>(push((i11+57)), op(0x35))))
		__asm(push(i11==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_20_F"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_16_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_16_F"))
		i8 =  ((__xasm<int>(push((i8+12)), op(0x37))))
		__asm(push(i8==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_22_F"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_17_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_17_F"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_14_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_18_F"))
		i1 =  ((__xasm<int>(push((i1+12)), op(0x37))))
		__asm(push(i1==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_41_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_19_F"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_8_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_20_F"))
		i5 =  ((__xasm<int>(push((i1+12)), op(0x37))))
		mstate.esp -= 8
		i6 =  ((__xasm<int>(push((mstate.ebp+-936)), op(0x37))))
		__asm(push(i6), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 3
		mstate.esp -= 4;FSM__ZN16b2ContactManager7DestroyEP9b2Contact.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state3"))
		mstate.esp += 8
		__asm(push(i5==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_41_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_21_F"))
		i1 = i5
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_8_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_22_F"))
		i7 =  ((__xasm<int>(push(i0), op(0x37))))
		__asm(push(i7==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_24_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_23_F"))
		i8 =  ((__xasm<int>(push(i7), op(0x37))))
		i8 =  ((__xasm<int>(push((i8+8)), op(0x37))))
		mstate.esp -= 12
		__asm(push(i7), push(mstate.esp), op(0x3c))
		__asm(push(i5), push((mstate.esp+4)), op(0x3c))
		__asm(push(i6), push((mstate.esp+8)), op(0x3c))
		state = 4
		mstate.esp -= 4;(mstate.funcs[i8])()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state4"))
		i7 = mstate.eax
		mstate.esp += 12
		__asm(push(i7==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_28_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_24_F"))
		i7 =  ((__xasm<int>(push(i12), op(0x37))))
		i7 =  (i7 & -9)
		__asm(push(i7), push(i12), op(0x3c))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_25_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_25_F"))
		i5 =  ((__xasm<int>(push((i5+28)), op(0x37))))
		i7 =  (i9 * 28)
		i6 =  ((__xasm<int>(push((i6+28)), op(0x37))))
		i8 =  (i10 * 28)
		i6 =  (i6 + i8)
		i5 =  (i5 + i7)
		i5 =  ((__xasm<int>(push((i5+24)), op(0x37))))
		i6 =  ((__xasm<int>(push((i6+24)), op(0x37))))
		__asm(push(i5<0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_27_F"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_26_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_26_F"))
		i7 =  ((__xasm<int>(push(i2), op(0x37))))
		__asm(push(i7>i5), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_30_F"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_27_F"))
	__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_27_F"), lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_27_B"), label, lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_27_F")); 
		i1 =  (___sF)
		mstate.esp -= 24
		i0 =  (__2E_str1670)
		i2 =  (__2E_str3210)
		i3 =  (__ZZNK13b2DynamicTree10GetFatAABBEiE8__func__)
		i4 =  (__2E_str2209)
		i5 =  (147)
		i1 =  (i1 + 176)
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 5
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state5"))
		mstate.esp += 24
		state = 6
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state6"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_28_F"))
		i5 =  ((__xasm<int>(push((i1+12)), op(0x37))))
		mstate.esp -= 8
		i6 =  ((__xasm<int>(push((mstate.ebp+-936)), op(0x37))))
		__asm(push(i6), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 7
		mstate.esp -= 4;FSM__ZN16b2ContactManager7DestroyEP9b2Contact.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state7"))
		mstate.esp += 8
		__asm(push(i5==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_41_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_29_F"))
		i1 = i5
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_8_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_30_F"))
		i8 =  ((__xasm<int>(push(i3), op(0x37))))
		__asm(push(i7<=i6), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_32_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_31_F"))
		__asm(push(i6>-1), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_33_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_32_F"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_27_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_33_F"))
		f0 =  (0)
		i7 =  (i5 * 36)
		i9 =  (i6 * 36)
		i7 =  (i8 + i7)
		i9 =  (i8 + i9)
		f1 =  ((__xasm<Number>(push((i7+4)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i9+12)), op(0x38))))
		f3 =  ((__xasm<Number>(push(i7), op(0x38))))
		f4 =  ((__xasm<Number>(push((i9+8)), op(0x38))))
		f3 =  (f3 - f4)
		f1 =  (f1 - f2)
		f2 =  ((__xasm<Number>(push(i9), op(0x38))))
		f4 =  ((__xasm<Number>(push((i7+8)), op(0x38))))
		f2 =  (f2 - f4)
		f3 =  f3/*fround*/
		f1 =  f1/*fround*/
		f2 =  f2/*fround*/
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f2 =  f2/*fextend*/
		__asm(push(f2>f0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_39_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_34_F"))
		f0 =  (0)
		i5 =  (i5 * 36)
		i6 =  (i6 * 36)
		i5 =  (i8 + i5)
		i6 =  (i8 + i6)
		f2 =  ((__xasm<Number>(push((i6+4)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i5+12)), op(0x38))))
		f2 =  (f2 - f4)
		f2 =  f2/*fround*/
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f2 =  f2/*fextend*/
		__asm(push(f2>f0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_39_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_35_F"))
		f0 =  (0)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f2 =  f3/*fextend*/
		__asm(push(f2>f0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_39_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_36_F"))
		f0 =  (0)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		__asm(push(f1>f0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_39_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_37_F"))
		i5 =  ((__xasm<int>(push(i4), op(0x37))))
		mstate.esp -= 8
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i5), push((mstate.esp+4)), op(0x3c))
		state = 8
		mstate.esp -= 4;FSM__ZN9b2Contact6UpdateEP17b2ContactListener.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state8"))
		mstate.esp += 8
		i1 =  ((__xasm<int>(push((i1+12)), op(0x37))))
		__asm(push(i1==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_41_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_38_F"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_8_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_39_F"))
		i5 =  ((__xasm<int>(push((i1+12)), op(0x37))))
		mstate.esp -= 8
		i6 =  ((__xasm<int>(push((mstate.ebp+-936)), op(0x37))))
		__asm(push(i6), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 9
		mstate.esp -= 4;FSM__ZN16b2ContactManager7DestroyEP9b2Contact.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state9"))
		mstate.esp += 8
		__asm(push(i5==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_41_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_40_F"))
		i1 = i5
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_8_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_41_F"))
		i0 =  ((__xasm<int>(push((mstate.ebp+-963)), op(0x37))))
		i0 =  ((__xasm<int>(push((i0+102995)), op(0x35))))
		i1 =  ((__xasm<int>(push((mstate.ebp+-963)), op(0x37))))
		i1 =  (i1 + 102995)
		__asm(push(i1), push((mstate.ebp+-810)), op(0x3c))
		__asm(push(i0==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_262_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_42_F"))
		f0 =  (0)
		f0 =  f0/*fround*/
		i0 =  ((__xasm<int>(push((mstate.ebp+-1080)), op(0x37))))
		f1 =  ((__xasm<Number>(push(i0), op(0x38))))
		f0 =  f0/*fextend*/
		__asm(push(f1<=f0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_262_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_43_F"))
		i0 =  ((mstate.ebp+-160))
		i1 =  ((__xasm<int>(push((mstate.ebp+-963)), op(0x37))))
		i1 =  ((__xasm<int>(push((i1+102944)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+-963)), op(0x37))))
		i2 =  ((__xasm<int>(push((i2+102964)), op(0x37))))
		i3 =  ((__xasm<int>(push((mstate.ebp+-963)), op(0x37))))
		i3 =  ((__xasm<int>(push((i3+102936)), op(0x37))))
		i4 =  ((__xasm<int>(push((mstate.ebp+-963)), op(0x37))))
		i4 =  ((__xasm<int>(push((i4+102960)), op(0x37))))
		mstate.esp -= 24
		i5 =  ((__xasm<int>(push((mstate.ebp+-963)), op(0x37))))
		i5 =  (i5 + 68)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i4), push((mstate.esp+4)), op(0x3c))
		__asm(push(i3), push((mstate.esp+8)), op(0x3c))
		__asm(push(i2), push((mstate.esp+12)), op(0x3c))
		__asm(push(i5), push((mstate.esp+16)), op(0x3c))
		__asm(push(i1), push((mstate.esp+20)), op(0x3c))
		state = 10
		mstate.esp -= 4;FSM__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state10"))
		mstate.esp += 24
		i0 =  ((__xasm<int>(push((mstate.ebp+-963)), op(0x37))))
		i0 =  ((__xasm<int>(push((i0+102952)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+-963)), op(0x37))))
		i1 =  (i1 + 102952)
		__asm(push(i1), push((mstate.ebp+-828)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-963)), op(0x37))))
		i1 =  (i1 + 102960)
		__asm(push(i0==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_46_F"))
	__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_44_F"), lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_44_B"), label, lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_44_F")); 
		i2 =  ((__xasm<int>(push((i0+4)), op(0x36))))
		i2 =  (i2 & -2)
		__asm(push(i2), push((i0+4)), op(0x3b))
		i0 =  ((__xasm<int>(push((i0+104)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_46_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_45_F"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_44_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_46_F"))
		i0 =  ((__xasm<int>(push((mstate.ebp+-855)), op(0x37))))
		i0 =  ((__xasm<int>(push(i0), op(0x37))))
		__asm(push(i0==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_49_F"))
	__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_47_F"), lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_47_B"), label, lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_47_F")); 
		i2 =  ((__xasm<int>(push((i0+4)), op(0x37))))
		i2 =  (i2 & -2)
		__asm(push(i2), push((i0+4)), op(0x3c))
		i0 =  ((__xasm<int>(push((i0+12)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_49_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_48_F"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_47_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_49_F"))
		i0 =  ((__xasm<int>(push((mstate.ebp+-963)), op(0x37))))
		i0 =  ((__xasm<int>(push((i0+102956)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_52_F"))
	__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_50_F"), lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_50_B"), label, lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_50_F")); 
		i2 =  (0)
		__asm(push(i2), push((i0+56)), op(0x3a))
		i0 =  ((__xasm<int>(push((i0+12)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_52_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_51_F"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_50_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_52_F"))
		i0 =  ((__xasm<int>(push(i1), op(0x37))))
		__asm(push(i0), push((mstate.ebp+-1161)), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+-963)), op(0x37))))
		i0 =  ((__xasm<int>(push((i0+102864)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+-963)), op(0x37))))
		i1 =  (i1 + 102864)
		__asm(push(i1), push((mstate.ebp+-873)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-1161)), op(0x37))))
		i1 =  (i1 << 2)
		__asm(push(i0<32), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_55_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_53_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str80287)
		i3 =  (__ZZN16b2StackAllocator8AllocateEiE8__func__)
		i4 =  (__2E_str10217)
		i5 =  (38)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 11
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state11"))
		mstate.esp += 24
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_54_F"))
		state = 12
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state12"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_55_F"))
		i2 =  (i0 * 12)
		i3 =  ((__xasm<int>(push((mstate.ebp+-963)), op(0x37))))
		i2 =  (i3 + i2)
		__asm(push(i1), push((i2+102484)), op(0x3c))
		i2 =  ((__xasm<int>(push((i3+102468)), op(0x37))))
		i3 =  (i3 + 102468)
		__asm(push(i3), push((mstate.ebp+-864)), op(0x3c))
		i3 =  (i2 + i1)
		__asm(push(i3<102401), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_57_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_56_F"))
		i2 =  (0)
		mstate.esp -= 8
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 13
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state13"))
		i2 = mstate.eax
		i3 =  (i0 * 12)
		mstate.esp += 8
		i4 =  ((__xasm<int>(push((mstate.ebp+-963)), op(0x37))))
		i3 =  (i4 + i3)
		__asm(push(i2), push((i3+102480)), op(0x3c))
		i2 =  (1)
		__asm(push(i2), push((i3+102488)), op(0x3a))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_58_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_57_F"))
		i4 =  (0)
		i5 =  (i0 * 12)
		i6 =  ((__xasm<int>(push((mstate.ebp+-963)), op(0x37))))
		i6 =  (i6 + 68)
		i5 =  (i6 + i5)
		i2 =  (i6 + i2)
		__asm(push(i2), push((i5+102412)), op(0x3c))
		__asm(push(i4), push((i5+102420)), op(0x3a))
		i2 =  ((__xasm<int>(push((mstate.ebp+-864)), op(0x37))))
		__asm(push(i3), push(i2), op(0x3c))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_58_F"))
		i2 =  ((__xasm<int>(push((mstate.ebp+-963)), op(0x37))))
		i2 =  ((__xasm<int>(push((i2+102472)), op(0x37))))
		i1 =  (i2 + i1)
		i2 =  ((__xasm<int>(push((mstate.ebp+-963)), op(0x37))))
		__asm(push(i1), push((i2+102472)), op(0x3c))
		i2 =  ((__xasm<int>(push((i2+102476)), op(0x37))))
		i1 =  ((i2>i1) ? i2 : i1)
		i2 =  (i0 * 12)
		i3 =  ((__xasm<int>(push((mstate.ebp+-963)), op(0x37))))
		__asm(push(i1), push((i3+102476)), op(0x3c))
		i0 =  (i0 + 1)
		i1 =  ((__xasm<int>(push((mstate.ebp+-873)), op(0x37))))
		__asm(push(i0), push(i1), op(0x3c))
		i0 =  (i3 + i2)
		i0 =  ((__xasm<int>(push((i0+102480)), op(0x37))))
		__asm(push(i0), push((mstate.ebp+-1170)), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+-828)), op(0x37))))
		i0 =  ((__xasm<int>(push(i0), op(0x37))))
		i1 =  (i3 + 102472)
		__asm(push(i1), push((mstate.ebp+-837)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-1170)), op(0x37))))
		__asm(push(i1), push((mstate.ebp+-846)), op(0x3c))
		__asm(push(i0==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_245_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_59_F"))
		i1 =  ((mstate.ebp+-160))
		__asm(push(i1), push((mstate.ebp+-981)), op(0x3c))
		i1 =  ((mstate.ebp+-32))
		i2 =  ((mstate.ebp+-64))
		__asm(push(i2), push((mstate.ebp+-954)), op(0x3c))
		i2 =  ((mstate.ebp+-80))
		__asm(push(i2), push((mstate.ebp+-945)), op(0x3c))
		i2 =  ((__xasm<int>(push((mstate.ebp+-963)), op(0x37))))
		i2 =  (i2 + 102972)
		__asm(push(i2), push((mstate.ebp+-1044)), op(0x3c))
		i2 =  (i1 + 12)
		i3 =  ((__xasm<int>(push((mstate.ebp+-981)), op(0x37))))
		i3 =  (i3 + 4)
		__asm(push(i3), push((mstate.ebp+-1071)), op(0x3c))
		i3 =  (i1 + 16)
		i4 =  (i1 + 8)
		i5 =  (i1 + 4)
		i6 =  ((__xasm<int>(push((mstate.ebp+-945)), op(0x37))))
		i6 =  (i6 + 4)
		__asm(push(i6), push((mstate.ebp+-1143)), op(0x3c))
		i6 =  ((__xasm<int>(push((mstate.ebp+-945)), op(0x37))))
		i6 =  (i6 + 8)
		__asm(push(i6), push((mstate.ebp+-1152)), op(0x3c))
		i6 =  ((__xasm<int>(push((mstate.ebp+-954)), op(0x37))))
		i6 =  (i6 + 16)
		__asm(push(i6), push((mstate.ebp+-891)), op(0x3c))
		i6 =  ((__xasm<int>(push((mstate.ebp+-954)), op(0x37))))
		i6 =  (i6 + 12)
		__asm(push(i6), push((mstate.ebp+-900)), op(0x3c))
		i6 =  ((__xasm<int>(push((mstate.ebp+-954)), op(0x37))))
		i6 =  (i6 + 8)
		__asm(push(i6), push((mstate.ebp+-909)), op(0x3c))
		i6 =  ((__xasm<int>(push((mstate.ebp+-954)), op(0x37))))
		i6 =  (i6 + 4)
		__asm(push(i6), push((mstate.ebp+-918)), op(0x3c))
		i6 =  ((__xasm<int>(push((mstate.ebp+-963)), op(0x37))))
		i6 =  (i6 + 102968)
		__asm(push(i6), push((mstate.ebp+-1053)), op(0x3c))
		i6 =  ((__xasm<int>(push((mstate.ebp+-963)), op(0x37))))
		i6 =  (i6 + 102976)
		__asm(push(i6), push((mstate.ebp+-927)), op(0x3c))
		i6 =  ((__xasm<int>(push((mstate.ebp+-981)), op(0x37))))
		i6 =  (i6 + 12)
		__asm(push(i6), push((mstate.ebp+-1134)), op(0x3c))
		i6 =  ((__xasm<int>(push((mstate.ebp+-981)), op(0x37))))
		i6 =  (i6 + 44)
		__asm(push(i6), push((mstate.ebp+-1107)), op(0x3c))
		i6 =  ((__xasm<int>(push((mstate.ebp+-981)), op(0x37))))
		i6 =  (i6 + 16)
		__asm(push(i6), push((mstate.ebp+-1188)), op(0x3c))
		i6 =  ((__xasm<int>(push((mstate.ebp+-981)), op(0x37))))
		i6 =  (i6 + 48)
		__asm(push(i6), push((mstate.ebp+-1116)), op(0x3c))
		i6 =  ((__xasm<int>(push((mstate.ebp+-981)), op(0x37))))
		i6 =  (i6 + 8)
		__asm(push(i6), push((mstate.ebp+-1089)), op(0x3c))
		i6 =  ((__xasm<int>(push((mstate.ebp+-981)), op(0x37))))
		i6 =  (i6 + 40)
		__asm(push(i6), push((mstate.ebp+-1062)), op(0x3c))
		i6 =  ((__xasm<int>(push((mstate.ebp+-981)), op(0x37))))
		i6 =  (i6 + 32)
		__asm(push(i6), push((mstate.ebp+-1197)), op(0x3c))
		i6 =  ((__xasm<int>(push((mstate.ebp+-981)), op(0x37))))
		i6 =  (i6 + 36)
		__asm(push(i6), push((mstate.ebp+-1179)), op(0x3c))
		i6 =  ((__xasm<int>(push((mstate.ebp+-981)), op(0x37))))
		i6 =  (i6 + 28)
		__asm(push(i6), push((mstate.ebp+-1098)), op(0x3c))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_244_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_60_B"), label)
		i7 =  (i0 & 2)
		__asm(push(i7==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_243_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_61_F"))
		i0 =  (i0 & 32)
		__asm(push(i0==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_243_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_62_F"))
		i0 =  ((__xasm<int>(push((mstate.ebp+-1008)), op(0x37))))
		i0 =  ((__xasm<int>(push(i0), op(0x37))))
		__asm(push(i0==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_243_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_63_F"))
		i0 =  (0)
		i7 =  ((__xasm<int>(push((mstate.ebp+-1098)), op(0x37))))
		__asm(push(i0), push(i7), op(0x3c))
		i7 =  ((__xasm<int>(push((mstate.ebp+-1179)), op(0x37))))
		__asm(push(i0), push(i7), op(0x3c))
		i7 =  ((__xasm<int>(push((mstate.ebp+-1197)), op(0x37))))
		__asm(push(i0), push(i7), op(0x3c))
		i7 =  ((__xasm<int>(push((mstate.ebp+-1170)), op(0x37))))
		i0 =  ((__xasm<int>(push((mstate.ebp+-1008)), op(0x37))))
		__asm(push(i0), push(i7), op(0x3c))
		i0 =  ((__xasm<int>(push(i6), op(0x36))))
		i0 =  (i0 | 1)
		__asm(push(i0), push(i6), op(0x3b))
		i0 =  (1)
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_109_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_64_B"), label)
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str174)
		i3 =  (__ZZN7b2World5SolveERK10b2TimeStepE8__func__)
		i4 =  (__2E_str69276)
		i5 =  (419)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 14
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state14"))
		mstate.esp += 24
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_65_F"))
		state = 15
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state15"))
	__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_66_F"), lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_66_B"), label, lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_66_F")); 
		i0 =  ((__xasm<int>(push((mstate.ebp+-1098)), op(0x37))))
		i0 =  ((__xasm<int>(push(i0), op(0x37))))
		i9 =  ((__xasm<int>(push((mstate.ebp+-1062)), op(0x37))))
		i9 =  ((__xasm<int>(push(i9), op(0x37))))
		__asm(push(i0<i9), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_69_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_67_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i6 =  (__2E_str1670)
		i1 =  (__2E_str14221)
		i2 =  (__ZZN8b2Island3AddEP6b2BodyE8__func__)
		i3 =  (__2E_str13220)
		i4 =  (67)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i6), push((mstate.esp+4)), op(0x3c))
		__asm(push(i1), push((mstate.esp+8)), op(0x3c))
		__asm(push(i2), push((mstate.esp+12)), op(0x3c))
		__asm(push(i3), push((mstate.esp+16)), op(0x3c))
		__asm(push(i4), push((mstate.esp+20)), op(0x3c))
		state = 16
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state16"))
		mstate.esp += 24
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_68_F"))
		state = 17
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state17"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_69_F"))
		__asm(push(i0), push((i7+8)), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+-1098)), op(0x37))))
		i0 =  ((__xasm<int>(push(i0), op(0x37))))
		i9 =  ((__xasm<int>(push((mstate.ebp+-1089)), op(0x37))))
		i9 =  ((__xasm<int>(push(i9), op(0x37))))
		i10 =  (i0 << 2)
		i9 =  (i9 + i10)
		__asm(push(i7), push(i9), op(0x3c))
		i0 =  (i0 + 1)
		i9 =  ((__xasm<int>(push((mstate.ebp+-1098)), op(0x37))))
		__asm(push(i0), push(i9), op(0x3c))
		i0 =  ((__xasm<int>(push(i6), op(0x36))))
		i9 =  (i0 & 2)
		__asm(push(i9!=0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_71_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_70_F"))
		i9 =  (0)
		i0 =  (i0 | 2)
		__asm(push(i0), push(i6), op(0x3b))
		__asm(push(i9), push((i7+148)), op(0x3c))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_71_F"))
		i0 =  ((__xasm<int>(push(i7), op(0x37))))
		__asm(push(i0!=0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_73_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_72_F"))
		i0 = i8
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_108_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_73_F"))
		i0 =  ((__xasm<int>(push((i7+120)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_91_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_74_F"))
		i6 = i8
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_90_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_75_B"), label)
		i11 =  (i9 & 4)
		__asm(push(i11!=0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_77_F"))
	__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_76_F"), lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_76_B"), label, lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_76_F")); 
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_88_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_77_F"))
		i9 =  (i9 & 2)
		__asm(push(i9==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_76_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_78_F"))
		i9 =  ((__xasm<int>(push((i8+48)), op(0x37))))
		i9 =  ((__xasm<int>(push((i9+42)), op(0x35))))
		__asm(push(i9!=0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_76_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_79_F"))
		i9 =  ((__xasm<int>(push((i8+52)), op(0x37))))
		i9 =  ((__xasm<int>(push((i9+42)), op(0x35))))
		__asm(push(i9!=0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_76_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_80_F"))
		i9 =  ((__xasm<int>(push((mstate.ebp+-1179)), op(0x37))))
		i9 =  ((__xasm<int>(push(i9), op(0x37))))
		i11 =  ((__xasm<int>(push((mstate.ebp+-1107)), op(0x37))))
		i11 =  ((__xasm<int>(push(i11), op(0x37))))
		__asm(push(i9<i11), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_83_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_81_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i6 =  (__2E_str1670)
		i8 =  (__2E_str15222)
		i9 =  (__ZZN8b2Island3AddEP6b2BodyE8__func__)
		i1 =  (__2E_str13220)
		i2 =  (74)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i6), push((mstate.esp+4)), op(0x3c))
		__asm(push(i8), push((mstate.esp+8)), op(0x3c))
		__asm(push(i9), push((mstate.esp+12)), op(0x3c))
		__asm(push(i1), push((mstate.esp+16)), op(0x3c))
		__asm(push(i2), push((mstate.esp+20)), op(0x3c))
		state = 18
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state18"))
		mstate.esp += 24
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_82_F"))
		state = 19
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state19"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_83_F"))
		i11 =  ((__xasm<int>(push((mstate.ebp+-1134)), op(0x37))))
		i11 =  ((__xasm<int>(push(i11), op(0x37))))
		i12 =  (i9 << 2)
		i11 =  (i11 + i12)
		__asm(push(i8), push(i11), op(0x3c))
		i8 =  (i9 + 1)
		i9 =  ((__xasm<int>(push((mstate.ebp+-1179)), op(0x37))))
		__asm(push(i8), push(i9), op(0x3c))
		i8 =  ((__xasm<int>(push(i10), op(0x37))))
		i8 =  (i8 | 1)
		__asm(push(i8), push(i10), op(0x3c))
		i8 =  ((__xasm<int>(push(i0), op(0x37))))
		i9 =  ((__xasm<int>(push((i8+4)), op(0x36))))
		i10 =  (i8 + 4)
		i9 =  (i9 & 1)
		__asm(push(i9!=0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_76_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_84_F"))
		i9 =  ((__xasm<int>(push((mstate.ebp+-1161)), op(0x37))))
		__asm(push(i6<i9), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_87_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_85_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i6 =  (__2E_str1670)
		i8 =  (__2E_str175338)
		i10 =  (__ZZN7b2World5SolveERK10b2TimeStepE8__func__)
		i1 =  (__2E_str69276)
		i2 =  (469)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i6), push((mstate.esp+4)), op(0x3c))
		__asm(push(i8), push((mstate.esp+8)), op(0x3c))
		__asm(push(i10), push((mstate.esp+12)), op(0x3c))
		__asm(push(i1), push((mstate.esp+16)), op(0x3c))
		__asm(push(i2), push((mstate.esp+20)), op(0x3c))
		state = 20
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state20"))
		mstate.esp += 24
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_86_F"))
		state = 21
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state21"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_87_F"))
		i9 =  (i6 << 2)
		i11 =  ((__xasm<int>(push((mstate.ebp+-1170)), op(0x37))))
		i9 =  (i11 + i9)
		__asm(push(i8), push(i9), op(0x3c))
		i8 =  ((__xasm<int>(push(i10), op(0x36))))
		i8 =  (i8 | 1)
		__asm(push(i8), push(i10), op(0x3b))
		i6 =  (i6 + 1)
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_88_F"))
		i0 =  ((__xasm<int>(push((i0+12)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_544_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_89_F"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_90_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_90_F"))
		i8 =  ((__xasm<int>(push((i0+4)), op(0x37))))
		i9 =  ((__xasm<int>(push((i8+4)), op(0x37))))
		i10 =  (i8 + 4)
		i11 =  (i9 & 1)
		__asm(push(i11==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_75_B"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_76_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_91_F"))
		i0 = i8
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_92_F"))
	__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_92_F"), lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_92_B"), label, lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_92_F")); 
		i6 =  ((__xasm<int>(push((i7+116)), op(0x37))))
		__asm(push(i6==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_107_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_93_F"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_106_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_94_B"), label)
		i9 =  ((__xasm<int>(push(i6), op(0x37))))
		i10 =  ((__xasm<int>(push((i9+4)), op(0x36))))
		i11 =  (i9 + 4)
		i10 =  (i10 & 32)
		__asm(push(i10!=0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_96_F"))
	__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_95_F"), lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_95_B"), label, lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_95_F")); 
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_104_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_96_F"))
		i10 =  ((__xasm<int>(push((mstate.ebp+-1197)), op(0x37))))
		i10 =  ((__xasm<int>(push(i10), op(0x37))))
		i12 =  ((__xasm<int>(push((mstate.ebp+-1116)), op(0x37))))
		i12 =  ((__xasm<int>(push(i12), op(0x37))))
		__asm(push(i10<i12), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_99_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_97_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i6 =  (__2E_str1670)
		i7 =  (__2E_str16223)
		i8 =  (__ZZN8b2Island3AddEP6b2BodyE8__func__)
		i1 =  (__2E_str13220)
		i2 =  (80)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i6), push((mstate.esp+4)), op(0x3c))
		__asm(push(i7), push((mstate.esp+8)), op(0x3c))
		__asm(push(i8), push((mstate.esp+12)), op(0x3c))
		__asm(push(i1), push((mstate.esp+16)), op(0x3c))
		__asm(push(i2), push((mstate.esp+20)), op(0x3c))
		state = 22
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state22"))
		mstate.esp += 24
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_98_F"))
		state = 23
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state23"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_99_F"))
		i12 =  (1)
		i13 =  ((__xasm<int>(push((mstate.ebp+-1188)), op(0x37))))
		i13 =  ((__xasm<int>(push(i13), op(0x37))))
		i14 =  (i10 << 2)
		i13 =  (i13 + i14)
		__asm(push(i8), push(i13), op(0x3c))
		i8 =  (i10 + 1)
		i10 =  ((__xasm<int>(push((mstate.ebp+-1197)), op(0x37))))
		__asm(push(i8), push(i10), op(0x3c))
		i7 =  ((__xasm<int>(push(i7), op(0x37))))
		__asm(push(i12), push((i7+56)), op(0x3a))
		i7 =  ((__xasm<int>(push(i11), op(0x36))))
		i7 =  (i7 & 1)
		__asm(push(i7!=0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_95_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_100_F"))
		i7 =  ((__xasm<int>(push((mstate.ebp+-1161)), op(0x37))))
		__asm(push(i0<i7), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_103_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_101_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i6 =  (__2E_str1670)
		i7 =  (__2E_str175338)
		i8 =  (__ZZN7b2World5SolveERK10b2TimeStepE8__func__)
		i1 =  (__2E_str69276)
		i2 =  (498)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i6), push((mstate.esp+4)), op(0x3c))
		__asm(push(i7), push((mstate.esp+8)), op(0x3c))
		__asm(push(i8), push((mstate.esp+12)), op(0x3c))
		__asm(push(i1), push((mstate.esp+16)), op(0x3c))
		__asm(push(i2), push((mstate.esp+20)), op(0x3c))
		state = 24
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state24"))
		mstate.esp += 24
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_102_F"))
		state = 25
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state25"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_103_F"))
		i7 =  (i0 << 2)
		i8 =  ((__xasm<int>(push((mstate.ebp+-1170)), op(0x37))))
		i7 =  (i8 + i7)
		__asm(push(i9), push(i7), op(0x3c))
		i7 =  ((__xasm<int>(push(i11), op(0x36))))
		i7 =  (i7 | 1)
		__asm(push(i7), push(i11), op(0x3b))
		i0 =  (i0 + 1)
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_104_F"))
		i6 =  ((__xasm<int>(push((i6+12)), op(0x37))))
		__asm(push(i6==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_545_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_105_F"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_106_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_106_F"))
		i8 =  ((__xasm<int>(push((i6+4)), op(0x37))))
		i9 =  ((__xasm<int>(push((i8+56)), op(0x35))))
		i7 =  (i6 + 4)
		__asm(push(i9==1), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_95_B"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_94_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_107_F"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_108_F"))
	__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_108_F"), lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_108_B"), label, lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_108_F")); 
		__asm(push(i0<1), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_110_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_109_F"))
		i8 =  (i0 + -1)
		i0 =  (i8 << 2)
		i6 =  ((__xasm<int>(push((mstate.ebp+-1170)), op(0x37))))
		i0 =  (i6 + i0)
		i7 =  ((__xasm<int>(push(i0), op(0x37))))
		i0 =  ((__xasm<int>(push((i7+4)), op(0x36))))
		i6 =  (i7 + 4)
		i0 =  (i0 & 32)
		__asm(push(i0==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_64_B"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_66_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_110_F"))
		i0 =  ((__xasm<int>(push((mstate.ebp+-927)), op(0x37))))
		i0 =  ((__xasm<int>(push(i0), op(0x35))))
		__asm(push(i0), push((mstate.ebp+-1035)), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+-1098)), op(0x37))))
		i0 =  ((__xasm<int>(push(i0), op(0x37))))
		__asm(push(i0<1), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_123_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_111_F"))
		i0 =  (0)
		i6 = i0
	__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_112_F"), lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_112_B"), label, lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_112_F")); 
		i7 =  ((__xasm<int>(push((mstate.ebp+-1089)), op(0x37))))
		i7 =  ((__xasm<int>(push(i7), op(0x37))))
		i7 =  (i7 + i6)
		i7 =  ((__xasm<int>(push(i7), op(0x37))))
		i8 =  ((__xasm<int>(push(i7), op(0x37))))
		__asm(push(i8!=2), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_114_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_113_F"))
		f0 =  (1)
		f1 =  ((__xasm<Number>(push((i7+128)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i7+84)), op(0x38))))
		f2 =  (f2 * f1)
		f2 =  f2/*fround*/
		i8 =  ((__xasm<int>(push((mstate.ebp+-1053)), op(0x37))))
		f3 =  ((__xasm<Number>(push(i8), op(0x38))))
		f2 =  f2/*fextend*/
		f4 =  ((__xasm<Number>(push((i7+88)), op(0x38))))
		f2 =  (f3 + f2)
		f1 =  (f4 * f1)
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		i8 =  ((__xasm<int>(push((mstate.ebp+-1080)), op(0x37))))
		f3 =  ((__xasm<Number>(push(i8), op(0x38))))
		f2 =  f2/*fextend*/
		f2 =  (f2 * f3)
		i8 =  ((__xasm<int>(push((mstate.ebp+-1044)), op(0x37))))
		f4 =  ((__xasm<Number>(push(i8), op(0x38))))
		f1 =  f1/*fextend*/
		f1 =  (f4 + f1)
		f2 =  f2/*fround*/
		f4 =  ((__xasm<Number>(push((i7+72)), op(0x38))))
		f1 =  f1/*fround*/
		f2 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		f2 =  (f4 + f2)
		f1 =  (f1 * f3)
		f2 =  f2/*fround*/
		__asm(push(f2), push((i7+72)), op(0x3d))
		f1 =  f1/*fround*/
		f3 =  ((__xasm<Number>(push((i7+76)), op(0x38))))
		f1 =  f1/*fextend*/
		f1 =  (f3 + f1)
		f1 =  f1/*fround*/
		__asm(push(f1), push((i7+76)), op(0x3d))
		i8 =  ((__xasm<int>(push((mstate.ebp+-1080)), op(0x37))))
		f3 =  ((__xasm<Number>(push(i8), op(0x38))))
		f4 =  ((__xasm<Number>(push((i7+136)), op(0x38))))
		f3 =  (f3 * f4)
		f3 =  f3/*fround*/
		f4 =  ((__xasm<Number>(push((i7+92)), op(0x38))))
		f3 =  f3/*fextend*/
		f3 =  (f3 * f4)
		f3 =  f3/*fround*/
		f4 =  ((__xasm<Number>(push((i7+80)), op(0x38))))
		f3 =  f3/*fextend*/
		f3 =  (f4 + f3)
		f3 =  f3/*fround*/
		__asm(push(f3), push((i7+80)), op(0x3d))
		f4 =  ((__xasm<Number>(push(i8), op(0x38))))
		f5 =  ((__xasm<Number>(push((i7+140)), op(0x38))))
		f4 =  (f4 * f5)
		f4 =  f4/*fround*/
		f0 =  f0/*fround*/
		f4 =  f4/*fextend*/
		f0 =  f0/*fextend*/
		f4 =  (f0 - f4)
		f4 =  f4/*fround*/
		f4 =  f4/*fextend*/
		f4 =  ((f4<f0) ? f4 : f0)
		f5 =  (0)
		f4 =  f4/*fround*/
		f5 =  f5/*fround*/
		f5 =  f5/*fextend*/
		f4 =  f4/*fextend*/
		f4 =  ((f4<f5) ? f5 : f4)
		f4 =  f4/*fround*/
		f2 =  f2/*fextend*/
		f4 =  f4/*fextend*/
		f2 =  (f2 * f4)
		f1 =  f1/*fextend*/
		f1 =  (f1 * f4)
		f2 =  f2/*fround*/
		__asm(push(f2), push((i7+72)), op(0x3d))
		f1 =  f1/*fround*/
		__asm(push(f1), push((i7+76)), op(0x3d))
		f1 =  ((__xasm<Number>(push(i8), op(0x38))))
		f2 =  ((__xasm<Number>(push((i7+144)), op(0x38))))
		f1 =  (f1 * f2)
		f1 =  f1/*fround*/
		f1 =  f1/*fextend*/
		f1 =  (f0 - f1)
		f1 =  f1/*fround*/
		f1 =  f1/*fextend*/
		f0 =  ((f1<f0) ? f1 : f0)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f0 =  ((f0<f5) ? f5 : f0)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f1 =  f3/*fextend*/
		f0 =  (f1 * f0)
		f0 =  f0/*fround*/
		__asm(push(f0), push((i7+80)), op(0x3d))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_114_F"))
		i7 =  ((__xasm<int>(push((mstate.ebp+-1098)), op(0x37))))
		i7 =  ((__xasm<int>(push(i7), op(0x37))))
		i6 =  (i6 + 4)
		i0 =  (i0 + 1)
		__asm(push(i7<=i0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_123_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_115_F"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_112_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_116_B"), label)
		i9 = i10
		i6 = i10
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_117_F"))
	__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_117_F"), lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_117_B"), label, lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_117_F")); 
		i6 =  (i6 + i8)
		i6 =  ((__xasm<int>(push(i6), op(0x37))))
		i6 =  ((__xasm<int>(push((i6+48)), op(0x37))))
		i6 =  ((__xasm<int>(push((i6+12)), op(0x37))))
		i6 =  ((__xasm<int>(push(i6), op(0x37))))
		i10 = i9
		__asm(push(i6!=0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_119_F"))
	__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_118_F"), lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_118_B"), label, lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_118_F")); 
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_121_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_119_F"))
		i6 =  (i10 + i8)
		i10 =  ((__xasm<int>(push(i6), op(0x37))))
		i11 =  ((__xasm<int>(push((i10+52)), op(0x37))))
		i11 =  ((__xasm<int>(push((i11+12)), op(0x37))))
		i11 =  ((__xasm<int>(push(i11), op(0x37))))
		__asm(push(i11==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_118_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_120_F"))
		i0 =  (i0 + 1)
		i11 =  (i0 << 2)
		i9 =  (i9 + i11)
		i11 =  ((__xasm<int>(push(i9), op(0x37))))
		__asm(push(i10), push(i9), op(0x3c))
		__asm(push(i11), push(i6), op(0x3c))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_121_F"))
		i6 =  ((__xasm<int>(push((mstate.ebp+-1179)), op(0x37))))
		i6 =  ((__xasm<int>(push(i6), op(0x37))))
		i9 =  ((__xasm<int>(push((mstate.ebp+-1134)), op(0x37))))
		i10 =  ((__xasm<int>(push(i9), op(0x37))))
		i8 =  (i8 + 4)
		i7 =  (i7 + 1)
		__asm(push(i6>i7), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_116_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_122_F"))
		i0 = i6
		i6 = i10
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_125_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_123_F"))
		i0 =  ((__xasm<int>(push((mstate.ebp+-1179)), op(0x37))))
		i0 =  ((__xasm<int>(push(i0), op(0x37))))
		i6 =  ((__xasm<int>(push((mstate.ebp+-1134)), op(0x37))))
		i6 =  ((__xasm<int>(push(i6), op(0x37))))
		__asm(push(i0>0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_546_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_124_F"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_125_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_125_F"))
		i7 =  ((mstate.ebp+-64))
		i8 =  ((__xasm<int>(push((mstate.ebp+-954)), op(0x37))))
		__asm(push(i6), push(i8), op(0x3c))
		i6 =  ((__xasm<int>(push((mstate.ebp+-918)), op(0x37))))
		__asm(push(i0), push(i6), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+-981)), op(0x37))))
		i0 =  ((__xasm<int>(push(i0), op(0x37))))
		i6 =  ((__xasm<int>(push((mstate.ebp+-909)), op(0x37))))
		__asm(push(i0), push(i6), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+-882)), op(0x37))))
		f0 =  ((__xasm<Number>(push(i0), op(0x38))))
		i0 =  ((__xasm<int>(push((mstate.ebp+-900)), op(0x37))))
		__asm(push(f0), push(i0), op(0x3d))
		i0 =  ((__xasm<int>(push((mstate.ebp+-972)), op(0x37))))
		i0 =  ((__xasm<int>(push(i0), op(0x35))))
		i6 =  ((__xasm<int>(push((mstate.ebp+-891)), op(0x37))))
		__asm(push(i0), push(i6), op(0x3a))
		mstate.esp -= 8
		i0 =  ((mstate.ebp+-80))
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i7), push((mstate.esp+4)), op(0x3c))
		state = 26
		mstate.esp -= 4;FSM__ZN15b2ContactSolverC1EP18b2ContactSolverDef.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state26"))
		mstate.esp += 8
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_126_F"))
		i0 =  ((mstate.ebp+-80))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 27
		mstate.esp -= 4;FSM__ZN15b2ContactSolver29InitializeVelocityConstraintsEv.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state27"))
		mstate.esp += 4
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_127_F"))
		i0 =  ((__xasm<int>(push((mstate.ebp+-972)), op(0x37))))
		i0 =  ((__xasm<int>(push(i0), op(0x35))))
		__asm(push(i0!=0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_129_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_128_F"))
		i0 =  (0)
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_140_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_129_F"))
		i0 =  ((__xasm<int>(push((mstate.ebp+-1152)), op(0x37))))
		i0 =  ((__xasm<int>(push(i0), op(0x37))))
		__asm(push(i0<1), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_137_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_130_F"))
		i0 =  (0)
		i6 = i0
	__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_131_F"), lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_131_B"), label, lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_131_F")); 
		i7 =  ((__xasm<int>(push((mstate.ebp+-1143)), op(0x37))))
		i7 =  ((__xasm<int>(push(i7), op(0x37))))
		i8 =  (i7 + i6)
		f0 =  ((__xasm<Number>(push((i8+104)), op(0x38))))
		f1 =  f0/*fextend*/
		i9 =  ((__xasm<int>(push((i8+144)), op(0x37))))
		i10 =  ((__xasm<int>(push((i8+148)), op(0x37))))
		f1 =  -f1
		f2 =  ((__xasm<Number>(push((i9+128)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i9+136)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i10+128)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i10+136)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i8+108)), op(0x38))))
		i11 =  ((__xasm<int>(push((i8+172)), op(0x37))))
		f1 =  f1/*fround*/
		i8 =  (i8 + 172)
		__asm(push(i11<1), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_135_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_132_F"))
		i11 =  (0)
		i12 =  (i9 + 76)
		i13 =  (i10 + 76)
		i7 =  (i7 + i6)
		i14 =  (i10 + 72)
		i10 =  (i10 + 80)
		i15 =  (i9 + 72)
		i9 =  (i9 + 80)
	__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_133_F"), lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_133_B"), label, lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_133_F")); 
		f7 =  ((__xasm<Number>(push((i7+28)), op(0x38))))
		f8 =  f1/*fextend*/
		f9 =  f6/*fextend*/
		f10 =  ((__xasm<Number>(push((i7+24)), op(0x38))))
		f11 =  f0/*fextend*/
		f8 =  (f8 * f7)
		f7 =  (f9 * f7)
		f9 =  (f9 * f10)
		f10 =  (f11 * f10)
		f8 =  f8/*fround*/
		f7 =  f7/*fround*/
		f9 =  f9/*fround*/
		f10 =  f10/*fround*/
		f8 =  f8/*fextend*/
		f9 =  f9/*fextend*/
		f7 =  f7/*fextend*/
		f10 =  f10/*fextend*/
		f8 =  (f9 + f8)
		f7 =  (f10 + f7)
		f8 =  f8/*fround*/
		f7 =  f7/*fround*/
		f9 =  ((__xasm<Number>(push((i7+8)), op(0x38))))
		f8 =  f8/*fextend*/
		f10 =  ((__xasm<Number>(push((i7+12)), op(0x38))))
		f7 =  f7/*fextend*/
		f9 =  (f9 * f8)
		f10 =  (f10 * f7)
		f9 =  f9/*fround*/
		f10 =  f10/*fround*/
		f10 =  f10/*fextend*/
		f9 =  f9/*fextend*/
		f9 =  (f9 - f10)
		f9 =  f9/*fround*/
		f10 =  f3/*fextend*/
		f9 =  f9/*fextend*/
		f9 =  (f9 * f10)
		f9 =  f9/*fround*/
		f10 =  ((__xasm<Number>(push(i9), op(0x38))))
		f9 =  f9/*fextend*/
		f11 =  f2/*fextend*/
		f9 =  (f10 - f9)
		f10 =  (f7 * f11)
		f9 =  f9/*fround*/
		f10 =  f10/*fround*/
		__asm(push(f9), push(i9), op(0x3d))
		f9 =  ((__xasm<Number>(push(i15), op(0x38))))
		f10 =  f10/*fextend*/
		f9 =  (f9 - f10)
		f9 =  f9/*fround*/
		f10 =  (f8 * f11)
		f10 =  f10/*fround*/
		__asm(push(f9), push(i15), op(0x3d))
		f9 =  ((__xasm<Number>(push(i12), op(0x38))))
		f10 =  f10/*fextend*/
		f9 =  (f9 - f10)
		f9 =  f9/*fround*/
		__asm(push(f9), push(i12), op(0x3d))
		f9 =  ((__xasm<Number>(push((i7+16)), op(0x38))))
		f10 =  ((__xasm<Number>(push((i7+20)), op(0x38))))
		f9 =  (f9 * f8)
		f10 =  (f10 * f7)
		f9 =  f9/*fround*/
		f10 =  f10/*fround*/
		f10 =  f10/*fextend*/
		f9 =  f9/*fextend*/
		f9 =  (f9 - f10)
		f9 =  f9/*fround*/
		f10 =  f5/*fextend*/
		f9 =  f9/*fextend*/
		f9 =  (f9 * f10)
		f9 =  f9/*fround*/
		f10 =  ((__xasm<Number>(push(i10), op(0x38))))
		f9 =  f9/*fextend*/
		f11 =  f4/*fextend*/
		f9 =  (f10 + f9)
		f7 =  (f7 * f11)
		f9 =  f9/*fround*/
		f7 =  f7/*fround*/
		__asm(push(f9), push(i10), op(0x3d))
		f9 =  ((__xasm<Number>(push(i14), op(0x38))))
		f7 =  f7/*fextend*/
		f7 =  (f9 + f7)
		f7 =  f7/*fround*/
		f8 =  (f8 * f11)
		f8 =  f8/*fround*/
		__asm(push(f7), push(i14), op(0x3d))
		f7 =  ((__xasm<Number>(push(i13), op(0x38))))
		f8 =  f8/*fextend*/
		f7 =  (f7 + f8)
		f7 =  f7/*fround*/
		__asm(push(f7), push(i13), op(0x3d))
		i16 =  ((__xasm<int>(push(i8), op(0x37))))
		i7 =  (i7 + 44)
		i11 =  (i11 + 1)
		__asm(push(i16<=i11), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_135_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_134_F"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_133_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_135_F"))
		i7 =  ((__xasm<int>(push((mstate.ebp+-1152)), op(0x37))))
		i7 =  ((__xasm<int>(push(i7), op(0x37))))
		i6 =  (i6 + 188)
		i0 =  (i0 + 1)
		__asm(push(i7<=i0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_137_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_136_F"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_131_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_137_F"))
		i0 =  ((__xasm<int>(push((mstate.ebp+-1197)), op(0x37))))
		i0 =  ((__xasm<int>(push(i0), op(0x37))))
		__asm(push(i0<1), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_149_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_138_F"))
		i0 =  (0)
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_141_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_139_B"), label)
		i0 =  (i0 + 1)
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_140_F"))
		i6 =  ((__xasm<int>(push((mstate.ebp+-1197)), op(0x37))))
		i6 =  ((__xasm<int>(push(i6), op(0x37))))
		__asm(push(i6<=i0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_149_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_141_F"))
		i6 =  ((mstate.ebp+-768))
		i7 =  ((__xasm<int>(push((mstate.ebp+-1188)), op(0x37))))
		i7 =  ((__xasm<int>(push(i7), op(0x37))))
		i8 =  (i0 << 2)
		i7 =  (i7 + i8)
		i7 =  ((__xasm<int>(push(i7), op(0x37))))
		i8 =  ((__xasm<int>(push(i7), op(0x37))))
		i8 =  ((__xasm<int>(push((i8+24)), op(0x37))))
		mstate.esp -= 8
		__asm(push(i7), push(mstate.esp), op(0x3c))
		__asm(push(i6), push((mstate.esp+4)), op(0x3c))
		state = 28
		mstate.esp -= 4;(mstate.funcs[i8])()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state28"))
		mstate.esp += 8
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_139_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_142_B"), label)
		i0 =  (i0 + 4)
		i6 =  (i6 + 1)
	__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_143_F"), lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_143_B"), label, lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_143_F")); 
		i8 =  ((__xasm<int>(push((mstate.ebp+-1197)), op(0x37))))
		i8 =  ((__xasm<int>(push(i8), op(0x37))))
		__asm(push(i8<=i6), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_145_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_144_F"))
		i8 =  ((mstate.ebp+-768))
		i9 =  ((__xasm<int>(push((mstate.ebp+-1188)), op(0x37))))
		i9 =  ((__xasm<int>(push(i9), op(0x37))))
		i9 =  (i9 + i0)
		i9 =  ((__xasm<int>(push(i9), op(0x37))))
		i10 =  ((__xasm<int>(push(i9), op(0x37))))
		i10 =  ((__xasm<int>(push((i10+28)), op(0x37))))
		mstate.esp -= 8
		__asm(push(i9), push(mstate.esp), op(0x3c))
		__asm(push(i8), push((mstate.esp+4)), op(0x3c))
		state = 29
		mstate.esp -= 4;(mstate.funcs[i10])()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state29"))
		mstate.esp += 8
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_142_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_145_F"))
		i0 =  ((mstate.ebp+-80))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 30
		mstate.esp -= 4;FSM__ZN15b2ContactSolver24SolveVelocityConstraintsEv.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state30"))
		mstate.esp += 4
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_146_F"))
		i0 =  ((__xasm<int>(push((mstate.ebp+-999)), op(0x37))))
		i0 =  ((__xasm<int>(push(i0), op(0x37))))
		i6 =  (i7 + 1)
		__asm(push(i0<=i6), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_156_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_147_F"))
		i0 = i6
	__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_148_F"), lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_148_B"), label, lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_148_F")); 
		i7 = i0
		i6 =  (0)
		i0 = i6
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_143_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_149_F"))
		i0 =  ((__xasm<int>(push((mstate.ebp+-999)), op(0x37))))
		i0 =  ((__xasm<int>(push(i0), op(0x37))))
		__asm(push(i0<1), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_156_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_150_F"))
		i0 =  (0)
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_148_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_151_B"), label)
		f0 =  ((__xasm<Number>(push((i9+24)), op(0x38))))
		__asm(push(f0), push((i8+8)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i9+28)), op(0x38))))
		__asm(push(f0), push((i8+12)), op(0x3d))
		i11 =  ((__xasm<int>(push(i7), op(0x37))))
		i9 =  (i9 + 44)
		i8 =  (i8 + 24)
		i10 =  (i10 + 1)
		__asm(push(i11<=i10), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_153_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_152_F"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_151_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_153_B"), label, lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_153_F")); 
		i7 =  ((__xasm<int>(push((mstate.ebp+-1152)), op(0x37))))
		i7 =  ((__xasm<int>(push(i7), op(0x37))))
		i0 =  (i0 + 188)
		i6 =  (i6 + 1)
		__asm(push(i7>i6), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_155_F"))
	__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_154_F"), lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_154_B"), label, lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_154_F")); 
		i0 =  (0)
		i6 = i0
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_166_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_155_F"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_158_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_156_F"))
		i0 =  ((__xasm<int>(push((mstate.ebp+-1152)), op(0x37))))
		i0 =  ((__xasm<int>(push(i0), op(0x37))))
		__asm(push(i0<1), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_154_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_157_F"))
		i6 =  (0)
		i0 = i6
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_158_F"))
		i7 =  ((__xasm<int>(push((mstate.ebp+-1143)), op(0x37))))
		i8 =  ((__xasm<int>(push(i7), op(0x37))))
		i7 =  (i8 + i0)
		i10 =  ((__xasm<int>(push((i7+176)), op(0x37))))
		i9 =  ((__xasm<int>(push((i7+172)), op(0x37))))
		i7 =  (i7 + 172)
		__asm(push(i9<1), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_153_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_159_F"))
		i11 =  (0)
		i8 =  (i8 + i0)
		i9 = i8
		i8 = i10
		i10 = i11
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_151_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_160_B"), label)
		f0 =  ((__xasm<Number>(push((i7+76)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i7+72)), op(0x38))))
		i8 =  ((__xasm<int>(push((mstate.ebp+-1080)), op(0x37))))
		f2 =  ((__xasm<Number>(push(i8), op(0x38))))
		f3 =  f0/*fextend*/
		f4 =  f1/*fextend*/
		f3 =  (f3 * f2)
		f2 =  (f4 * f2)
		f3 =  f3/*fround*/
		f2 =  f2/*fround*/
		f3 =  f3/*fextend*/
		f2 =  f2/*fextend*/
		f3 =  (f3 * f3)
		f2 =  (f2 * f2)
		f3 =  f3/*fround*/
		f2 =  f2/*fround*/
		f3 =  f3/*fextend*/
		f2 =  f2/*fextend*/
		f4 =  ((__xasm<Number>(push(_b2_maxTranslationSquared), op(0x38))))
		f2 =  (f2 + f3)
		f2 =  f2/*fround*/
		i8 =  (i7 + 76)
		i9 =  (i7 + 72)
		f3 =  f2/*fextend*/
		__asm(push(f3<=f4), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_162_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_161_F"))
		f2 =  f2/*fextend*/
		f2 =  Math.sqrt(f2)
		f2 =  f2/*fround*/
		f3 =  ((__xasm<Number>(push(_b2_maxTranslation), op(0x38))))
		f2 =  f2/*fextend*/
		f2 =  (f3 / f2)
		f2 =  f2/*fround*/
		f1 =  f1/*fextend*/
		f2 =  f2/*fextend*/
		f1 =  (f1 * f2)
		f0 =  f0/*fextend*/
		f0 =  (f0 * f2)
		f1 =  f1/*fround*/
		__asm(push(f1), push(i9), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push(i8), op(0x3d))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_162_F"))
		f0 =  ((__xasm<Number>(push((i7+80)), op(0x38))))
		i8 =  ((__xasm<int>(push((mstate.ebp+-1080)), op(0x37))))
		f1 =  ((__xasm<Number>(push(i8), op(0x38))))
		f2 =  f0/*fextend*/
		f1 =  (f1 * f2)
		f1 =  f1/*fround*/
		f2 =  ((__xasm<Number>(push(_b2_maxRotationSquared), op(0x38))))
		f3 =  f1/*fextend*/
		f3 =  (f3 * f3)
		i8 =  (i7 + 80)
		f3 =  f3/*fround*/
		f3 =  f3/*fextend*/
		__asm(push(f3<=f2), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_164_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_163_F"))
		f2 =  (0)
		f1 =  f1/*fextend*/
		f3 =  -f1
		f3 =  f3/*fround*/
		f2 =  f2/*fround*/
		f3 =  f3/*fextend*/
		f2 =  f2/*fextend*/
		f1 =  ((f1<=f2) ? f3 : f1)
		f1 =  f1/*fround*/
		f2 =  ((__xasm<Number>(push(_b2_maxRotation), op(0x38))))
		f1 =  f1/*fextend*/
		f1 =  (f2 / f1)
		f1 =  f1/*fround*/
		f1 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 * f1)
		f0 =  f0/*fround*/
		__asm(push(f0), push(i8), op(0x3d))
	__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_164_F"), lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_164_B"), label, lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_164_F")); 
		f0 =  ((__xasm<Number>(push((i7+52)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i7+56)), op(0x38))))
		__asm(push(f0), push((i7+44)), op(0x3d))
		__asm(push(f1), push((i7+48)), op(0x3d))
		f2 =  ((__xasm<Number>(push((i7+64)), op(0x38))))
		__asm(push(f2), push((i7+60)), op(0x3d))
		i8 =  ((__xasm<int>(push((mstate.ebp+-1080)), op(0x37))))
		f3 =  ((__xasm<Number>(push(i8), op(0x38))))
		f4 =  ((__xasm<Number>(push((i7+72)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i7+76)), op(0x38))))
		f4 =  (f4 * f3)
		f4 =  f4/*fround*/
		f3 =  (f5 * f3)
		f3 =  f3/*fround*/
		f4 =  f4/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 + f4)
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f4 =  f0/*fround*/
		f0 =  (f1 + f3)
		f1 =  f0/*fround*/
		__asm(push(f4), push((i7+52)), op(0x3d))
		__asm(push(f1), push((i7+56)), op(0x3d))
		f0 =  ((__xasm<Number>(push(i8), op(0x38))))
		f3 =  ((__xasm<Number>(push((i7+80)), op(0x38))))
		f0 =  (f0 * f3)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f2 =  f2/*fextend*/
		f0 =  (f2 + f0)
		f2 =  f0/*fround*/
		__asm(push(f2), push((i7+64)), op(0x3d))
		f0 = f2
		//InlineAsmStart
	f0 =  Math.cos(f0);

	//InlineAsmEnd
		f3 = f0
		f0 = f2
		//InlineAsmStart
	f0 =  Math.sin(f0);

	//InlineAsmEnd
		f2 =  f0/*fextend*/
		f5 =  -f2
		__asm(push(f3), push((i7+20)), op(0x3d))
		f5 =  f5/*fround*/
		__asm(push(f5), push((i7+28)), op(0x3d))
		__asm(push(f0), push((i7+24)), op(0x3d))
		__asm(push(f3), push((i7+32)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i7+36)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i7+40)), op(0x38))))
		f3 =  f3/*fextend*/
		f6 =  (f3 * f0)
		f7 =  (f5 * f2)
		f0 =  (f2 * f0)
		f2 =  f6/*fround*/
		f3 =  (f3 * f5)
		f5 =  f7/*fround*/
		f0 =  f0/*fround*/
		f3 =  f3/*fround*/
		f5 =  f5/*fextend*/
		f2 =  f2/*fextend*/
		f2 =  (f2 - f5)
		f3 =  f3/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 + f3)
		f2 =  f2/*fround*/
		f0 =  f0/*fround*/
		f2 =  f2/*fextend*/
		f3 =  f4/*fextend*/
		f2 =  (f3 - f2)
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  (f1 - f0)
		f1 =  f2/*fround*/
		__asm(push(f1), push((i7+12)), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push((i7+16)), op(0x3d))
	__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_165_F"), lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_165_B"), label, lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_165_F")); 
		i6 =  (i6 + 4)
		i0 =  (i0 + 1)
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_166_F"))
		i7 =  ((__xasm<int>(push((mstate.ebp+-1098)), op(0x37))))
		i7 =  ((__xasm<int>(push(i7), op(0x37))))
		__asm(push(i7>i0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_168_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_167_F"))
		i0 =  (0)
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_176_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_168_F"))
		i7 =  ((__xasm<int>(push((mstate.ebp+-1089)), op(0x37))))
		i7 =  ((__xasm<int>(push(i7), op(0x37))))
		i7 =  (i7 + i6)
		i7 =  ((__xasm<int>(push(i7), op(0x37))))
		i8 =  ((__xasm<int>(push(i7), op(0x37))))
		__asm(push(i8==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_165_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_169_F"))
		__asm(push(i8==1), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_164_B"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_160_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_170_B"), label)
		i6 =  (i6 & 255)
		i0 =  (i0 & 255)
		i6 =  ((i6==0) ? 1 : 0)
		i0 =  ((i0==0) ? 1 : 0)
		i0 =  (i0 | i6)
		i0 =  (i0 & 1)
		i0 =  (i0 ^ 1)
		i6 =  (i7 + 4)
		i7 =  (i8 + 1)
		i8 = i7
	__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_171_F"), lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_171_B"), label, lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_171_F")); 
		i7 = i6
		i6 = i0
		i0 =  ((__xasm<int>(push((mstate.ebp+-1197)), op(0x37))))
		i0 =  ((__xasm<int>(push(i0), op(0x37))))
		__asm(push(i0<=i8), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_173_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_172_F"))
		i0 =  ((__xasm<int>(push((mstate.ebp+-1188)), op(0x37))))
		i0 =  ((__xasm<int>(push(i0), op(0x37))))
		i0 =  (i0 + i7)
		i0 =  ((__xasm<int>(push(i0), op(0x37))))
		i9 =  ((__xasm<int>(push(i0), op(0x37))))
		i9 =  ((__xasm<int>(push((i9+32)), op(0x37))))
		f2 =  ((__xasm<Number>(push(_b2_contactBaumgarte), op(0x38))))
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(f2), push((mstate.esp+4)), op(0x3d))
		state = 31
		mstate.esp -= 4;(mstate.funcs[i9])()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state31"))
		i0 = mstate.eax
		mstate.esp += 8
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_170_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_173_F"))
		i0 =  (i6 & 255)
		__asm(push(i0==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_175_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_174_F"))
		f1 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		__asm(push(f0<=f1), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_192_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_175_F"))
		i0 =  ((__xasm<int>(push((mstate.ebp+-1125)), op(0x37))))
		i0 =  (i0 + 1)
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_176_F"))
		__asm(push(i0), push((mstate.ebp+-1125)), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+-1026)), op(0x37))))
		i0 =  ((__xasm<int>(push(i0), op(0x37))))
		i6 =  ((__xasm<int>(push((mstate.ebp+-1125)), op(0x37))))
		__asm(push(i0<=i6), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_192_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_177_F"))
		f1 =  ((__xasm<Number>(push(_b2_contactBaumgarte), op(0x38))))
		i0 =  ((__xasm<int>(push((mstate.ebp+-1152)), op(0x37))))
		i0 =  ((__xasm<int>(push(i0), op(0x37))))
		__asm(push(i0>0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_179_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_178_F"))
		f0 =  (0)
		f1 =  f0/*fround*/
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_191_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_179_F"))
		f0 =  (0)
		f0 =  f0/*fround*/
		i0 =  (0)
		i6 = i0
	__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_180_F"), lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_180_B"), label, lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_180_F")); 
		__asm(push(i0), push((mstate.ebp+-1206)), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+-1143)), op(0x37))))
		i0 =  ((__xasm<int>(push(i0), op(0x37))))
		i0 =  (i0 + i6)
		i8 =  ((__xasm<int>(push((i0+144)), op(0x37))))
		i7 =  ((__xasm<int>(push((i0+148)), op(0x37))))
		f2 =  ((__xasm<Number>(push((i8+124)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i8+128)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i8+136)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i7+124)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i7+128)), op(0x38))))
		f7 =  ((__xasm<Number>(push((i7+136)), op(0x38))))
		i9 =  ((__xasm<int>(push((i0+172)), op(0x37))))
		f3 =  (f2 * f3)
		f2 =  (f2 * f4)
		f4 =  (f5 * f6)
		f5 =  (f5 * f7)
		f3 =  f3/*fround*/
		f2 =  f2/*fround*/
		f4 =  f4/*fround*/
		f5 =  f5/*fround*/
		i10 =  (i0 + 172)
		__asm(push(i9>0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_182_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_181_F"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_189_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_182_F"))
		i9 =  (0)
		f6 =  f4/*fextend*/
		f7 =  f3/*fextend*/
		f6 =  (f7 + f6)
		f6 =  f6/*fround*/
		i11 =  (i8 + 52)
		i12 =  (i8 + 56)
		i13 =  (i7 + 52)
		i14 =  (i7 + 56)
		i15 =  (i8 + 64)
		i16 =  (i8 + 20)
		i17 =  (i8 + 28)
		i18 =  (i8 + 24)
		i19 =  (i8 + 32)
		i20 =  (i8 + 40)
		i21 =  (i8 + 16)
		i22 =  (i7 + 64)
		i23 =  (i7 + 20)
		i24 =  (i7 + 28)
		i25 =  (i7 + 24)
		i26 =  (i7 + 32)
		i27 =  (i7 + 40)
		i28 =  (i7 + 16)
		i29 =  (i7 + 12)
		i30 =  (i8 + 12)
		i7 =  (i7 + 36)
		i8 =  (i8 + 36)
	__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_183_F"), lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_183_B"), label, lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_183_F")); 
		i31 =  ((mstate.ebp+-32))
		mstate.esp -= 12
		__asm(push(i31), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i9), push((mstate.esp+8)), op(0x3c))
		state = 32
		mstate.esp -= 4;FSM__ZN24b2PositionSolverManifold10InitializeEP19b2ContactConstrainti.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state32"))
		mstate.esp += 12
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_184_F"))
		f7 =  (0)
		f8 =  ((__xasm<Number>(push(i12), op(0x38))))
		f9 =  ((__xasm<Number>(push(i11), op(0x38))))
		f10 =  ((__xasm<Number>(push(i4), op(0x38))))
		f11 =  f9/*fextend*/
		f12 =  ((__xasm<Number>(push(i2), op(0x38))))
		f13 =  f8/*fextend*/
		f11 =  (f10 - f11)
		f13 =  (f12 - f13)
		f14 =  ((__xasm<Number>(push(i1), op(0x38))))
		f15 =  ((__xasm<Number>(push(i5), op(0x38))))
		f11 =  f11/*fround*/
		f13 =  f13/*fround*/
		f16 =  ((__xasm<Number>(push(i14), op(0x38))))
		f17 =  ((__xasm<Number>(push(i13), op(0x38))))
		f18 =  f13/*fextend*/
		f19 =  f14/*fextend*/
		f20 =  f11/*fextend*/
		f21 =  f15/*fextend*/
		f18 =  (f18 * f19)
		f20 =  (f20 * f21)
		f10 =  (f10 - f17)
		f12 =  (f12 - f16)
		f16 =  f18/*fround*/
		f17 =  f20/*fround*/
		f10 =  f10/*fround*/
		f12 =  f12/*fround*/
		f18 =  f12/*fextend*/
		f20 =  f10/*fextend*/
		f16 =  f16/*fextend*/
		f17 =  f17/*fextend*/
		f16 =  (f17 - f16)
		f17 =  (f18 * f19)
		f18 =  (f20 * f21)
		f16 =  f16/*fround*/
		f17 =  f17/*fround*/
		f18 =  f18/*fround*/
		f16 =  f16/*fextend*/
		f19 =  f2/*fextend*/
		f17 =  f17/*fextend*/
		f18 =  f18/*fextend*/
		f19 =  (f19 * f16)
		f17 =  (f18 - f17)
		f18 =  f19/*fround*/
		f17 =  f17/*fround*/
		f18 =  f18/*fextend*/
		f19 =  ((__xasm<Number>(push(i3), op(0x38))))
		f20 =  ((__xasm<Number>(push(_b2_linearSlop), op(0x38))))
		f17 =  f17/*fextend*/
		f21 =  f5/*fextend*/
		f16 =  (f18 * f16)
		f18 =  (f21 * f17)
		f20 =  (f19 + f20)
		f16 =  f16/*fround*/
		f18 =  f18/*fround*/
		f20 =  f20/*fround*/
		f18 =  f18/*fextend*/
		f16 =  f16/*fextend*/
		f21 =  f6/*fextend*/
		f22 =  f1/*fextend*/
		f20 =  f20/*fextend*/
		f16 =  (f21 + f16)
		f17 =  (f18 * f17)
		f18 =  (f20 * f22)
		f16 =  f16/*fround*/
		f17 =  f17/*fround*/
		f18 =  f18/*fround*/
		f7 =  f7/*fround*/
		f20 =  ((__xasm<Number>(push(_b2_maxLinearCorrection), op(0x38))))
		f0 =  f0/*fextend*/
		f17 =  f17/*fextend*/
		f16 =  f16/*fextend*/
		f7 =  f7/*fextend*/
		f18 =  f18/*fextend*/
		f16 =  (f16 + f17)
		f0 =  ((f0<f19) ? f0 : f19)
		f17 =  ((f18<f7) ? f18 : f7)
		f18 =  -f20
		f16 =  f16/*fround*/
		f19 =  f0/*fround*/
		f0 =  f17/*fround*/
		f17 =  f18/*fround*/
		f18 =  f16/*fextend*/
		__asm(push(f18>f7), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_186_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_185_F"))
		f0 =  (0)
		f0 =  f0/*fround*/
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_187_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_186_F"))
		f7 =  f17/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  ((f0<f7) ? f7 : f0)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f0 =  -f0
		f0 =  f0/*fround*/
		f7 =  f16/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 / f7)
		f0 =  f0/*fround*/
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_187_F"))
		f7 =  f15/*fextend*/
		f0 =  f0/*fextend*/
		f14 =  f14/*fextend*/
		f7 =  (f7 * f0)
		f0 =  (f14 * f0)
		f7 =  f7/*fround*/
		f0 =  f0/*fround*/
		f11 =  f11/*fextend*/
		f7 =  f7/*fextend*/
		f13 =  f13/*fextend*/
		f14 =  f0/*fextend*/
		f0 =  f3/*fextend*/
		f11 =  (f11 * f7)
		f13 =  (f13 * f14)
		f11 =  f11/*fround*/
		f15 =  (f14 * f0)
		f13 =  f13/*fround*/
		f0 =  (f7 * f0)
		f15 =  f15/*fround*/
		f13 =  f13/*fextend*/
		f11 =  f11/*fextend*/
		f0 =  f0/*fround*/
		f11 =  (f11 - f13)
		f13 =  f15/*fextend*/
		f9 =  f9/*fextend*/
		f11 =  f11/*fround*/
		f9 =  (f9 - f13)
		f0 =  f0/*fextend*/
		f8 =  f8/*fextend*/
		f0 =  (f8 - f0)
		f8 =  f9/*fround*/
		f9 =  f2/*fextend*/
		f11 =  f11/*fextend*/
		f13 =  f0/*fround*/
		f0 =  (f11 * f9)
		__asm(push(f8), push(i11), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f13), push(i12), op(0x3d))
		f9 =  ((__xasm<Number>(push(i15), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f9 - f0)
		f9 =  f0/*fround*/
		__asm(push(f9), push(i15), op(0x3d))
		f0 = f9
		//InlineAsmStart
	f0 =  Math.cos(f0);

	//InlineAsmEnd
		f11 = f0
		f0 = f9
		//InlineAsmStart
	f0 =  Math.sin(f0);

	//InlineAsmEnd
		f9 =  f0/*fextend*/
		f15 =  -f9
		__asm(push(f11), push(i16), op(0x3d))
		f15 =  f15/*fround*/
		__asm(push(f15), push(i17), op(0x3d))
		__asm(push(f0), push(i18), op(0x3d))
		__asm(push(f11), push(i19), op(0x3d))
		f0 =  ((__xasm<Number>(push(i8), op(0x38))))
		f15 =  ((__xasm<Number>(push(i20), op(0x38))))
		f11 =  f11/*fextend*/
		f16 =  (f11 * f0)
		f17 =  (f15 * f9)
		f0 =  (f9 * f0)
		f9 =  f16/*fround*/
		f11 =  (f11 * f15)
		f15 =  f17/*fround*/
		f0 =  f0/*fround*/
		f11 =  f11/*fround*/
		f15 =  f15/*fextend*/
		f9 =  f9/*fextend*/
		f9 =  (f9 - f15)
		f11 =  f11/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 + f11)
		f9 =  f9/*fround*/
		f0 =  f0/*fround*/
		f9 =  f9/*fextend*/
		f8 =  f8/*fextend*/
		f8 =  (f8 - f9)
		f0 =  f0/*fextend*/
		f9 =  f13/*fextend*/
		f11 =  f4/*fextend*/
		f0 =  (f9 - f0)
		f8 =  f8/*fround*/
		f9 =  (f14 * f11)
		__asm(push(f8), push(i30), op(0x3d))
		f0 =  f0/*fround*/
		f8 =  f10/*fextend*/
		f9 =  f9/*fround*/
		f10 =  f12/*fextend*/
		__asm(push(f0), push(i21), op(0x3d))
		f0 =  (f8 * f7)
		f8 =  (f10 * f14)
		f10 =  ((__xasm<Number>(push(i13), op(0x38))))
		f9 =  f9/*fextend*/
		f9 =  (f10 + f9)
		f0 =  f0/*fround*/
		f8 =  f8/*fround*/
		f9 =  f9/*fround*/
		f7 =  (f7 * f11)
		f8 =  f8/*fextend*/
		f0 =  f0/*fextend*/
		f7 =  f7/*fround*/
		f0 =  (f0 - f8)
		__asm(push(f9), push(i13), op(0x3d))
		f0 =  f0/*fround*/
		f8 =  ((__xasm<Number>(push(i14), op(0x38))))
		f7 =  f7/*fextend*/
		f7 =  (f8 + f7)
		f8 =  f5/*fextend*/
		f0 =  f0/*fextend*/
		f7 =  f7/*fround*/
		f0 =  (f0 * f8)
		f0 =  f0/*fround*/
		__asm(push(f7), push(i14), op(0x3d))
		f8 =  ((__xasm<Number>(push(i22), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f8 + f0)
		f8 =  f0/*fround*/
		__asm(push(f8), push(i22), op(0x3d))
		f0 = f8
		//InlineAsmStart
	f0 =  Math.cos(f0);

	//InlineAsmEnd
		f10 = f0
		f0 = f8
		//InlineAsmStart
	f0 =  Math.sin(f0);

	//InlineAsmEnd
		f8 =  f0/*fextend*/
		f11 =  -f8
		__asm(push(f10), push(i23), op(0x3d))
		f11 =  f11/*fround*/
		__asm(push(f11), push(i24), op(0x3d))
		__asm(push(f0), push(i25), op(0x3d))
		__asm(push(f10), push(i26), op(0x3d))
		f0 =  ((__xasm<Number>(push(i7), op(0x38))))
		f11 =  ((__xasm<Number>(push(i27), op(0x38))))
		f10 =  f10/*fextend*/
		f12 =  (f10 * f0)
		f13 =  (f11 * f8)
		f0 =  (f8 * f0)
		f8 =  f12/*fround*/
		f10 =  (f10 * f11)
		f11 =  f13/*fround*/
		f0 =  f0/*fround*/
		f10 =  f10/*fround*/
		f11 =  f11/*fextend*/
		f8 =  f8/*fextend*/
		f8 =  (f8 - f11)
		f10 =  f10/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 + f10)
		f8 =  f8/*fround*/
		f0 =  f0/*fround*/
		f8 =  f8/*fextend*/
		f9 =  f9/*fextend*/
		f8 =  (f9 - f8)
		f0 =  f0/*fextend*/
		f7 =  f7/*fextend*/
		f0 =  (f7 - f0)
		f7 =  f8/*fround*/
		__asm(push(f7), push(i29), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push(i28), op(0x3d))
		i31 =  ((__xasm<int>(push(i10), op(0x37))))
		i9 =  (i9 + 1)
		__asm(push(i31>i9), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_547_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_188_F"))
		f0 = f19
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_189_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_189_F"))
		i0 =  ((__xasm<int>(push((mstate.ebp+-1152)), op(0x37))))
		i0 =  ((__xasm<int>(push(i0), op(0x37))))
		i6 =  (i6 + 188)
		i8 =  ((__xasm<int>(push((mstate.ebp+-1206)), op(0x37))))
		i8 =  (i8 + 1)
		__asm(push(i0>i8), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_548_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_190_F"))
		f1 = f0
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_191_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_191_F"))
		f0 =  (-1.5)
		f0 =  f0/*fround*/
		f2 =  ((__xasm<Number>(push(_b2_linearSlop), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f2 * f0)
		f0 =  f0/*fround*/
		i0 =  (1)
		i8 =  (0)
		i6 = i8
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_171_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_192_F"))
		i0 =  ((__xasm<int>(push((mstate.ebp+-1143)), op(0x37))))
		i0 =  ((__xasm<int>(push(i0), op(0x37))))
		i6 =  ((__xasm<int>(push((mstate.ebp+-1071)), op(0x37))))
		i6 =  ((__xasm<int>(push(i6), op(0x37))))
		__asm(push(i6==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_201_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_193_F"))
		i6 =  (0)
		i7 = i6
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_198_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_194_B"), label)
		f0 =  ((__xasm<Number>(push((i6+24)), op(0x38))))
		__asm(push(f0), push(i0), op(0x3d))
		f0 =  ((__xasm<Number>(push((i6+28)), op(0x38))))
		__asm(push(f0), push((i0+8)), op(0x3d))
		i13 =  ((__xasm<int>(push(i8), op(0x37))))
		i6 =  (i6 + 44)
		i0 =  (i0 + 4)
		i7 =  (i7 + 1)
		__asm(push(i13<=i7), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_196_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_195_F"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_194_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_196_B"), label, lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_196_F")); 
		i0 =  ((mstate.ebp+-96))
		i6 =  ((__xasm<int>(push((mstate.ebp+-1071)), op(0x37))))
		i6 =  ((__xasm<int>(push(i6), op(0x37))))
		i7 =  ((__xasm<int>(push(i6), op(0x37))))
		i7 =  ((__xasm<int>(push((i7+20)), op(0x37))))
		mstate.esp -= 12
		__asm(push(i6), push(mstate.esp), op(0x3c))
		__asm(push(i9), push((mstate.esp+4)), op(0x3c))
		__asm(push(i0), push((mstate.esp+8)), op(0x3c))
		state = 33
		mstate.esp -= 4;(mstate.funcs[i7])()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state33"))
		mstate.esp += 12
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_197_F"))
		i0 =  (i12 + 188)
		i6 =  (i11 + 4)
		i8 =  (i10 + 1)
		i7 = i6
		i6 = i8
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_198_F"))
		i12 = i0
		i11 = i7
		i10 = i6
		i0 =  ((__xasm<int>(push((mstate.ebp+-1179)), op(0x37))))
		i0 =  ((__xasm<int>(push(i0), op(0x37))))
		__asm(push(i0<=i10), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_201_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_199_F"))
		i0 =  ((__xasm<int>(push((mstate.ebp+-1134)), op(0x37))))
		i0 =  ((__xasm<int>(push(i0), op(0x37))))
		i0 =  (i0 + i11)
		i9 =  ((__xasm<int>(push(i0), op(0x37))))
		i0 =  ((__xasm<int>(push((i12+172)), op(0x37))))
		i8 =  (i12 + 172)
		__asm(push(i0<1), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_196_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_200_F"))
		i7 =  (0)
		i6 = i12
		i0 =  ((__xasm<int>(push((mstate.ebp+-1017)), op(0x37))))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_194_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_201_F"))
		i0 =  ((__xasm<int>(push((mstate.ebp+-1035)), op(0x37))))
		i0 =  (i0 & 255)
		__asm(push(i0==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_228_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_202_F"))
		f0 =  ((__xasm<Number>(push(_b2_linearSleepTolerance), op(0x38))))
		f1 =  ((__xasm<Number>(push(_b2_angularSleepTolerance), op(0x38))))
		i0 =  ((__xasm<int>(push((mstate.ebp+-1098)), op(0x37))))
		i0 =  ((__xasm<int>(push(i0), op(0x37))))
		f0 =  (f0 * f0)
		f1 =  (f1 * f1)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		__asm(push(i0>0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_209_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_203_F"))
		f0 =  (3.40282e+38)
		f0 =  f0/*fround*/
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_204_F"))
	__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_204_F"), lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_204_B"), label, lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_204_F")); 
		f1 =  ((__xasm<Number>(push(_b2_timeToSleep), op(0x38))))
		__asm(push(i0<1), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_228_F"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_205_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_205_F"))
		f1 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		__asm(push(f0<f1), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_228_F"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_206_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_206_F"))
		i0 =  (0)
		i6 = i0
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_207_F"))
	__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_207_F"), lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_207_B"), label, lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_207_F")); 
		i7 =  (0)
		i8 =  ((__xasm<int>(push((mstate.ebp+-1089)), op(0x37))))
		i8 =  ((__xasm<int>(push(i8), op(0x37))))
		i8 =  (i8 + i6)
		i8 =  ((__xasm<int>(push(i8), op(0x37))))
		i9 =  ((__xasm<int>(push((i8+4)), op(0x36))))
		i9 =  (i9 & -3)
		__asm(push(i9), push((i8+4)), op(0x3b))
		__asm(push(i7), push((i8+148)), op(0x3c))
		__asm(push(i7), push((i8+72)), op(0x3c))
		__asm(push(i7), push((i8+76)), op(0x3c))
		__asm(push(i7), push((i8+80)), op(0x3c))
		__asm(push(i7), push((i8+84)), op(0x3c))
		__asm(push(i7), push((i8+88)), op(0x3c))
		__asm(push(i7), push((i8+92)), op(0x3c))
		i7 =  ((__xasm<int>(push((mstate.ebp+-1098)), op(0x37))))
		i7 =  ((__xasm<int>(push(i7), op(0x37))))
		i6 =  (i6 + 4)
		i0 =  (i0 + 1)
		__asm(push(i7<=i0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_228_F"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_208_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_208_F"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_207_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_209_F"))
		f2 =  (3.40282e+38)
		f2 =  f2/*fround*/
		i0 =  (0)
		i6 = i0
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_226_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_210_B"), label)
		i8 =  ((__xasm<int>(push((i0+4)), op(0x36))))
		i8 =  (i8 & 4)
		__asm(push(i8==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_212_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_211_F"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_213_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_212_F"))
		f2 =  (0)
		i9 =  (0)
		__asm(push(i9), push((i0+148)), op(0x3c))
		f2 =  f2/*fround*/
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_213_F"))
		__asm(push(i8!=0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_215_F"))
	__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_214_F"), lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_214_B"), label, lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_214_F")); 
		i8 =  (0)
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_218_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_215_F"))
		f3 =  ((__xasm<Number>(push((i0+80)), op(0x38))))
		f3 =  (f3 * f3)
		f3 =  f3/*fround*/
		f4 =  f1/*fextend*/
		f3 =  f3/*fextend*/
		__asm(push(f3>f4), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_214_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_216_F"))
		f3 =  ((__xasm<Number>(push((i0+72)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i0+76)), op(0x38))))
		f3 =  (f3 * f3)
		f4 =  (f4 * f4)
		f3 =  f3/*fround*/
		f4 =  f4/*fround*/
		f4 =  f4/*fextend*/
		f3 =  f3/*fextend*/
		f3 =  (f3 + f4)
		f3 =  f3/*fround*/
		f4 =  f0/*fextend*/
		f3 =  f3/*fextend*/
		__asm(push(f3>f4), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_214_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_217_F"))
		i8 =  (1)
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_218_F"))
		i0 =  (i0 + 148)
		i8 =  (i8 & 1)
		__asm(push(i8!=0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_220_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_219_F"))
		f2 =  (0)
		i8 =  (0)
		__asm(push(i8), push(i0), op(0x3c))
		f2 =  f2/*fround*/
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_223_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_220_F"))
		f3 =  ((__xasm<Number>(push(i0), op(0x38))))
		i8 =  ((__xasm<int>(push((mstate.ebp+-1080)), op(0x37))))
		f4 =  ((__xasm<Number>(push(i8), op(0x38))))
		f3 =  (f3 + f4)
		f3 =  f3/*fround*/
		__asm(push(f3), push(i0), op(0x3d))
		f4 =  f3/*fextend*/
		f5 =  f2/*fextend*/
		__asm(push(f5>=f4), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_222_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_221_F"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_223_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_222_F"))
		f2 = f3
	__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_223_F"), lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_223_B"), label, lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_223_F")); 
		i0 =  ((__xasm<int>(push((mstate.ebp+-1098)), op(0x37))))
		i0 =  ((__xasm<int>(push(i0), op(0x37))))
		i7 =  (i7 + 4)
		i8 =  (i6 + 1)
		__asm(push(i0>i8), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_225_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_224_F"))
		f0 = f2
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_204_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_225_F"))
		i6 = i7
		i0 = i8
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_226_F"))
		i7 = i6
		i6 = i0
		i0 =  ((__xasm<int>(push((mstate.ebp+-1089)), op(0x37))))
		i0 =  ((__xasm<int>(push(i0), op(0x37))))
		i0 =  (i0 + i7)
		i0 =  ((__xasm<int>(push(i0), op(0x37))))
		i8 =  ((__xasm<int>(push(i0), op(0x37))))
		__asm(push(i8!=0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_210_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_227_F"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_223_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_228_F"))
		i0 =  ((__xasm<int>(push((mstate.ebp+-945)), op(0x37))))
		i0 =  ((__xasm<int>(push(i0), op(0x37))))
		i6 =  ((__xasm<int>(push((i0+102796)), op(0x37))))
		i7 =  (i0 + 102796)
		__asm(push(i6>0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_231_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_229_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i6 =  (__2E_str1670)
		i1 =  (__2E_str85292)
		i2 =  (__ZZN16b2BlockAllocator4FreeEPviE8__func__)
		i3 =  (__2E_str10217)
		i4 =  (63)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i6), push((mstate.esp+4)), op(0x3c))
		__asm(push(i1), push((mstate.esp+8)), op(0x3c))
		__asm(push(i2), push((mstate.esp+12)), op(0x3c))
		__asm(push(i3), push((mstate.esp+16)), op(0x3c))
		__asm(push(i4), push((mstate.esp+20)), op(0x3c))
		state = 34
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state34"))
		mstate.esp += 24
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_230_F"))
		state = 35
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state35"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_231_F"))
		i6 =  (i6 + -1)
		i8 =  (i6 * 12)
		i8 =  (i0 + i8)
		i9 =  ((__xasm<int>(push((mstate.ebp+-1143)), op(0x37))))
		i9 =  ((__xasm<int>(push(i9), op(0x37))))
		i8 =  ((__xasm<int>(push((i8+102412)), op(0x37))))
		__asm(push(i8==i9), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_234_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_232_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i6 =  (__2E_str1670)
		i1 =  (__2E_str86293)
		i2 =  (__ZZN16b2BlockAllocator4FreeEPviE8__func__)
		i3 =  (__2E_str10217)
		i4 =  (65)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i6), push((mstate.esp+4)), op(0x3c))
		__asm(push(i1), push((mstate.esp+8)), op(0x3c))
		__asm(push(i2), push((mstate.esp+12)), op(0x3c))
		__asm(push(i3), push((mstate.esp+16)), op(0x3c))
		__asm(push(i4), push((mstate.esp+20)), op(0x3c))
		state = 36
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state36"))
		mstate.esp += 24
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_233_F"))
		state = 37
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state37"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_234_F"))
		i8 =  (i6 * 12)
		i8 =  (i0 + i8)
		i8 =  ((__xasm<int>(push((i8+102420)), op(0x35))))
		__asm(push(i8==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_236_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_235_F"))
		i8 =  (0)
		mstate.esp -= 8
		__asm(push(i9), push(mstate.esp), op(0x3c))
		__asm(push(i8), push((mstate.esp+4)), op(0x3c))
		state = 38
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state38"))
		i8 = mstate.eax
		mstate.esp += 8
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_237_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_236_F"))
		i8 =  (i6 * 12)
		i8 =  (i0 + i8)
		i9 =  ((__xasm<int>(push((i0+102400)), op(0x37))))
		i8 =  ((__xasm<int>(push((i8+102416)), op(0x37))))
		i8 =  (i9 - i8)
		__asm(push(i8), push((i0+102400)), op(0x3c))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_237_F"))
		i6 =  (i6 * 12)
		i6 =  (i0 + i6)
		i8 =  ((__xasm<int>(push((i0+102404)), op(0x37))))
		i6 =  ((__xasm<int>(push((i6+102416)), op(0x37))))
		i6 =  (i8 - i6)
		__asm(push(i6), push((i0+102404)), op(0x3c))
		i0 =  ((__xasm<int>(push(i7), op(0x37))))
		i0 =  (i0 + -1)
		__asm(push(i0), push(i7), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+-1098)), op(0x37))))
		i0 =  ((__xasm<int>(push(i0), op(0x37))))
		__asm(push(i0<1), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_243_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_238_F"))
		i0 =  (0)
		i6 = i0
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_242_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_239_B"), label)
		i8 =  ((__xasm<int>(push((i0+4)), op(0x36))))
		i8 =  (i8 & -2)
		__asm(push(i8), push((i0+4)), op(0x3b))
	__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_240_F"), lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_240_B"), label, lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_240_F")); 
		i0 =  ((__xasm<int>(push((mstate.ebp+-1098)), op(0x37))))
		i0 =  ((__xasm<int>(push(i0), op(0x37))))
		i7 =  (i7 + 4)
		i8 =  (i6 + 1)
		__asm(push(i0<=i8), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_243_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_241_F"))
		i6 = i7
		i0 = i8
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_242_F"))
		i7 = i6
		i6 = i0
		i0 =  ((__xasm<int>(push((mstate.ebp+-1089)), op(0x37))))
		i0 =  ((__xasm<int>(push(i0), op(0x37))))
		i0 =  (i0 + i7)
		i0 =  ((__xasm<int>(push(i0), op(0x37))))
		i8 =  ((__xasm<int>(push(i0), op(0x37))))
		__asm(push(i8==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_239_B"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_240_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_243_B"), label, lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_243_F")); 
		i0 =  ((__xasm<int>(push((mstate.ebp+-1008)), op(0x37))))
		i0 =  ((__xasm<int>(push((i0+104)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_245_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_244_F"))
		__asm(push(i0), push((mstate.ebp+-1008)), op(0x3c))
		i0 =  ((__xasm<int>(push((i0+4)), op(0x36))))
		i6 =  ((__xasm<int>(push((mstate.ebp+-1008)), op(0x37))))
		i6 =  (i6 + 4)
		i7 =  (i0 & 1)
		__asm(push(i7==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_60_B"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_243_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_245_F"))
		i0 =  ((__xasm<int>(push((mstate.ebp+-873)), op(0x37))))
		i0 =  ((__xasm<int>(push(i0), op(0x37))))
		__asm(push(i0>0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_248_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_246_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str85292)
		i3 =  (__ZZN16b2BlockAllocator4FreeEPviE8__func__)
		i4 =  (__2E_str10217)
		i5 =  (63)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 39
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state39"))
		mstate.esp += 24
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_247_F"))
		state = 40
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state40"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_248_F"))
		i0 =  (i0 + -1)
		i1 =  (i0 * 12)
		i2 =  ((__xasm<int>(push((mstate.ebp+-963)), op(0x37))))
		i1 =  (i2 + i1)
		i1 =  ((__xasm<int>(push((i1+102480)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+-846)), op(0x37))))
		__asm(push(i1==i2), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_251_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_249_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str86293)
		i3 =  (__ZZN16b2BlockAllocator4FreeEPviE8__func__)
		i4 =  (__2E_str10217)
		i5 =  (65)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 41
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state41"))
		mstate.esp += 24
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_250_F"))
		state = 42
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state42"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_251_F"))
		i1 =  (i0 * 12)
		i2 =  ((__xasm<int>(push((mstate.ebp+-963)), op(0x37))))
		i1 =  (i2 + i1)
		i1 =  ((__xasm<int>(push((i1+102488)), op(0x35))))
		__asm(push(i1==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_253_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_252_F"))
		i1 =  (0)
		mstate.esp -= 8
		i2 =  ((__xasm<int>(push((mstate.ebp+-846)), op(0x37))))
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 43
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state43"))
		i1 = mstate.eax
		mstate.esp += 8
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_254_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_253_F"))
		i1 =  (i0 * 12)
		i2 =  ((__xasm<int>(push((mstate.ebp+-963)), op(0x37))))
		i1 =  (i2 + i1)
		i2 =  ((__xasm<int>(push((mstate.ebp+-864)), op(0x37))))
		i2 =  ((__xasm<int>(push(i2), op(0x37))))
		i1 =  ((__xasm<int>(push((i1+102484)), op(0x37))))
		i1 =  (i2 - i1)
		i2 =  ((__xasm<int>(push((mstate.ebp+-864)), op(0x37))))
		__asm(push(i1), push(i2), op(0x3c))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_254_F"))
		i0 =  (i0 * 12)
		i1 =  ((__xasm<int>(push((mstate.ebp+-963)), op(0x37))))
		i0 =  (i1 + i0)
		i1 =  ((__xasm<int>(push((mstate.ebp+-837)), op(0x37))))
		i1 =  ((__xasm<int>(push(i1), op(0x37))))
		i0 =  ((__xasm<int>(push((i0+102484)), op(0x37))))
		i0 =  (i1 - i0)
		i1 =  ((__xasm<int>(push((mstate.ebp+-837)), op(0x37))))
		__asm(push(i0), push(i1), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+-873)), op(0x37))))
		i0 =  ((__xasm<int>(push(i0), op(0x37))))
		i0 =  (i0 + -1)
		i1 =  ((__xasm<int>(push((mstate.ebp+-873)), op(0x37))))
		__asm(push(i0), push(i1), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+-828)), op(0x37))))
		i0 =  ((__xasm<int>(push(i0), op(0x37))))
		__asm(push(i0==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_260_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_255_F"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_259_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_256_B"), label)
		i1 =  ((__xasm<int>(push(i0), op(0x37))))
		__asm(push(i1==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_258_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_257_F"))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 44
		mstate.esp -= 4;FSM__ZN6b2Body19SynchronizeFixturesEv.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state44"))
		mstate.esp += 4
	__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_258_F"), lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_258_B"), label, lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_258_F")); 
		i0 =  ((__xasm<int>(push((i0+104)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_260_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_259_F"))
		i1 =  ((__xasm<int>(push((i0+4)), op(0x36))))
		i1 =  (i1 & 1)
		__asm(push(i1==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_258_B"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_256_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_260_F"))
		mstate.esp -= 8
		i0 =  ((__xasm<int>(push((mstate.ebp+-963)), op(0x37))))
		i0 =  (i0 + 102872)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+-936)), op(0x37))))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 45
		mstate.esp -= 4;FSM__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT_.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state45"))
		mstate.esp += 8
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_261_F"))
		i0 =  ((mstate.ebp+-160))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 46
		mstate.esp -= 4;FSM__ZN8b2IslandD1Ev.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state46"))
		mstate.esp += 4
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_262_F"))
		i0 =  ((__xasm<int>(push((mstate.ebp+-963)), op(0x37))))
		i0 =  ((__xasm<int>(push((i0+102993)), op(0x35))))
		__asm(push(i0==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_537_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_263_F"))
		f0 =  (0)
		f0 =  f0/*fround*/
		i0 =  ((__xasm<int>(push((mstate.ebp+-1080)), op(0x37))))
		f1 =  ((__xasm<Number>(push(i0), op(0x38))))
		f0 =  f0/*fextend*/
		__asm(push(f1<=f0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_537_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_264_F"))
		i0 =  (0)
		i1 =  ((__xasm<int>(push(_b2_maxTOIContacts), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+-963)), op(0x37))))
		i2 =  ((__xasm<int>(push((i2+102944)), op(0x37))))
		mstate.esp -= 24
		i3 =  ((mstate.ebp+-592))
		i4 =  (i1 << 1)
		i5 =  ((__xasm<int>(push((mstate.ebp+-963)), op(0x37))))
		i5 =  (i5 + 68)
		__asm(push(i3), push(mstate.esp), op(0x3c))
		__asm(push(i4), push((mstate.esp+4)), op(0x3c))
		__asm(push(i1), push((mstate.esp+8)), op(0x3c))
		__asm(push(i0), push((mstate.esp+12)), op(0x3c))
		__asm(push(i5), push((mstate.esp+16)), op(0x3c))
		__asm(push(i2), push((mstate.esp+20)), op(0x3c))
		state = 47
		mstate.esp -= 4;FSM__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state47"))
		mstate.esp += 24
		i0 =  ((__xasm<int>(push((mstate.ebp+-810)), op(0x37))))
		i0 =  ((__xasm<int>(push(i0), op(0x35))))
		i1 =  ((__xasm<int>(push((mstate.ebp+-963)), op(0x37))))
		i1 =  (i1 + 102944)
		__asm(push(i1), push((mstate.ebp+-1521)), op(0x3c))
		__asm(push(i0==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_271_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_265_F"))
		i0 =  ((__xasm<int>(push((mstate.ebp+-963)), op(0x37))))
		i0 =  ((__xasm<int>(push((i0+102952)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_268_F"))
	__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_266_F"), lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_266_B"), label, lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_266_F")); 
		i1 =  (0)
		i2 =  ((__xasm<int>(push((i0+4)), op(0x36))))
		i2 =  (i2 & -2)
		__asm(push(i2), push((i0+4)), op(0x3b))
		__asm(push(i1), push((i0+68)), op(0x3c))
		i0 =  ((__xasm<int>(push((i0+104)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_268_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_267_F"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_266_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_268_F"))
		i0 =  ((__xasm<int>(push((mstate.ebp+-855)), op(0x37))))
		i0 =  ((__xasm<int>(push(i0), op(0x37))))
		__asm(push(i0==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_271_F"))
	__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_269_F"), lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_269_B"), label, lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_269_F")); 
		i1 =  (0)
		i2 =  ((__xasm<int>(push((i0+4)), op(0x37))))
		i2 =  (i2 & -34)
		__asm(push(i2), push((i0+4)), op(0x3c))
		__asm(push(i1), push((i0+136)), op(0x3c))
		i1 =  (1065353216)
		__asm(push(i1), push((i0+140)), op(0x3c))
		i0 =  ((__xasm<int>(push((i0+12)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_271_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_270_F"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_269_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_271_F"))
		i0 =  ((mstate.ebp+-736))
		__asm(push(i0), push((mstate.ebp+-2106)), op(0x3c))
		i0 =  ((mstate.ebp+-384))
		__asm(push(i0), push((mstate.ebp+-1494)), op(0x3c))
		i0 =  ((mstate.ebp+-528))
		__asm(push(i0), push((mstate.ebp+-2601)), op(0x3c))
		i0 =  ((mstate.ebp+-592))
		__asm(push(i0), push((mstate.ebp+-1233)), op(0x3c))
		i0 =  ((mstate.ebp+-272))
		__asm(push(i0), push((mstate.ebp+-1512)), op(0x3c))
		i0 =  ((mstate.ebp+-192))
		__asm(push(i0), push((mstate.ebp+-2664)), op(0x3c))
		i0 =  ((mstate.ebp+-224))
		__asm(push(i0), push((mstate.ebp+-1224)), op(0x3c))
		i0 =  ((mstate.ebp+-240))
		__asm(push(i0), push((mstate.ebp+-1215)), op(0x3c))
		i0 =  ((mstate.ebp+-416))
		__asm(push(i0), push((mstate.ebp+-1242)), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+-2106)), op(0x37))))
		i0 =  (i0 + 44)
		__asm(push(i0), push((mstate.ebp+-2142)), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+-2106)), op(0x37))))
		i0 =  (i0 + 48)
		__asm(push(i0), push((mstate.ebp+-2151)), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+-2106)), op(0x37))))
		i0 =  (i0 + 52)
		__asm(push(i0), push((mstate.ebp+-1503)), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+-2664)), op(0x37))))
		i0 =  (i0 + 12)
		i1 =  ((__xasm<int>(push((mstate.ebp+-2106)), op(0x37))))
		i1 =  (i1 + 60)
		__asm(push(i1), push((mstate.ebp+-1251)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2106)), op(0x37))))
		i1 =  (i1 + 64)
		__asm(push(i1), push((mstate.ebp+-1260)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2106)), op(0x37))))
		i1 =  (i1 + 68)
		__asm(push(i1), push((mstate.ebp+-1269)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2106)), op(0x37))))
		i1 =  (i1 + 72)
		__asm(push(i1), push((mstate.ebp+-1278)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2106)), op(0x37))))
		i1 =  (i1 + 76)
		__asm(push(i1), push((mstate.ebp+-1287)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2106)), op(0x37))))
		i1 =  (i1 + 80)
		__asm(push(i1), push((mstate.ebp+-1296)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2106)), op(0x37))))
		i1 =  (i1 + 84)
		__asm(push(i1), push((mstate.ebp+-1305)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2106)), op(0x37))))
		i1 =  (i1 + 88)
		__asm(push(i1), push((mstate.ebp+-1314)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2106)), op(0x37))))
		i1 =  (i1 + 96)
		__asm(push(i1), push((mstate.ebp+-1323)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2106)), op(0x37))))
		i1 =  (i1 + 100)
		__asm(push(i1), push((mstate.ebp+-1332)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2106)), op(0x37))))
		i1 =  (i1 + 104)
		__asm(push(i1), push((mstate.ebp+-1341)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2106)), op(0x37))))
		i1 =  (i1 + 108)
		__asm(push(i1), push((mstate.ebp+-1350)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2106)), op(0x37))))
		i1 =  (i1 + 112)
		__asm(push(i1), push((mstate.ebp+-1359)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2106)), op(0x37))))
		i1 =  (i1 + 116)
		__asm(push(i1), push((mstate.ebp+-1368)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2106)), op(0x37))))
		i1 =  (i1 + 120)
		__asm(push(i1), push((mstate.ebp+-1377)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2106)), op(0x37))))
		i1 =  (i1 + 124)
		__asm(push(i1), push((mstate.ebp+-1386)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-1494)), op(0x37))))
		i1 =  (i1 + 44)
		__asm(push(i1), push((mstate.ebp+-1395)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-1494)), op(0x37))))
		i1 =  (i1 + 48)
		__asm(push(i1), push((mstate.ebp+-1404)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-1494)), op(0x37))))
		i1 =  (i1 + 52)
		__asm(push(i1), push((mstate.ebp+-1413)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-1494)), op(0x37))))
		i1 =  (i1 + 12)
		__asm(push(i1), push((mstate.ebp+-1422)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2106)), op(0x37))))
		i1 =  (i1 + 12)
		__asm(push(i1), push((mstate.ebp+-1431)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-1494)), op(0x37))))
		i1 =  (i1 + 32)
		__asm(push(i1), push((mstate.ebp+-1440)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2106)), op(0x37))))
		i1 =  (i1 + 32)
		__asm(push(i1), push((mstate.ebp+-1449)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-1494)), op(0x37))))
		i1 =  (i1 + 36)
		__asm(push(i1), push((mstate.ebp+-1458)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2106)), op(0x37))))
		i1 =  (i1 + 36)
		__asm(push(i1), push((mstate.ebp+-1467)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-1494)), op(0x37))))
		i1 =  (i1 + 40)
		__asm(push(i1), push((mstate.ebp+-1476)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2106)), op(0x37))))
		i1 =  (i1 + 40)
		__asm(push(i1), push((mstate.ebp+-1485)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-1494)), op(0x37))))
		i1 =  (i1 + 60)
		__asm(push(i1), push((mstate.ebp+-1530)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-1494)), op(0x37))))
		i1 =  (i1 + 64)
		__asm(push(i1), push((mstate.ebp+-1539)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-1494)), op(0x37))))
		i1 =  (i1 + 68)
		__asm(push(i1), push((mstate.ebp+-1548)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-1494)), op(0x37))))
		i1 =  (i1 + 72)
		__asm(push(i1), push((mstate.ebp+-1557)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-1494)), op(0x37))))
		i1 =  (i1 + 76)
		__asm(push(i1), push((mstate.ebp+-1566)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-1494)), op(0x37))))
		i1 =  (i1 + 84)
		__asm(push(i1), push((mstate.ebp+-1575)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-1494)), op(0x37))))
		i1 =  (i1 + 88)
		__asm(push(i1), push((mstate.ebp+-1584)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-1494)), op(0x37))))
		i1 =  (i1 + 92)
		__asm(push(i1), push((mstate.ebp+-1593)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-1494)), op(0x37))))
		i1 =  (i1 + 96)
		__asm(push(i1), push((mstate.ebp+-1602)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-1494)), op(0x37))))
		i1 =  (i1 + 100)
		__asm(push(i1), push((mstate.ebp+-1611)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2601)), op(0x37))))
		i1 =  (i1 + 12)
		__asm(push(i1), push((mstate.ebp+-1620)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2601)), op(0x37))))
		i1 =  (i1 + 16)
		__asm(push(i1), push((mstate.ebp+-1629)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2601)), op(0x37))))
		i1 =  (i1 + 20)
		__asm(push(i1), push((mstate.ebp+-1638)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2601)), op(0x37))))
		i1 =  (i1 + 24)
		__asm(push(i1), push((mstate.ebp+-1647)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2601)), op(0x37))))
		i1 =  (i1 + 28)
		__asm(push(i1), push((mstate.ebp+-1656)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2601)), op(0x37))))
		i1 =  (i1 + 32)
		__asm(push(i1), push((mstate.ebp+-1665)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2601)), op(0x37))))
		i1 =  (i1 + 36)
		__asm(push(i1), push((mstate.ebp+-1755)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2601)), op(0x37))))
		i1 =  (i1 + 40)
		__asm(push(i1), push((mstate.ebp+-1764)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2601)), op(0x37))))
		i1 =  (i1 + 48)
		__asm(push(i1), push((mstate.ebp+-1773)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2601)), op(0x37))))
		i1 =  (i1 + 52)
		__asm(push(i1), push((mstate.ebp+-1782)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2601)), op(0x37))))
		i1 =  (i1 + 56)
		__asm(push(i1), push((mstate.ebp+-1791)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2601)), op(0x37))))
		i1 =  (i1 + 60)
		__asm(push(i1), push((mstate.ebp+-1809)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2601)), op(0x37))))
		i1 =  (i1 + 64)
		__asm(push(i1), push((mstate.ebp+-1899)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2601)), op(0x37))))
		i1 =  (i1 + 68)
		__asm(push(i1), push((mstate.ebp+-1908)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2601)), op(0x37))))
		i1 =  (i1 + 72)
		__asm(push(i1), push((mstate.ebp+-1935)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2601)), op(0x37))))
		i1 =  (i1 + 76)
		__asm(push(i1), push((mstate.ebp+-1944)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2601)), op(0x37))))
		i1 =  (i1 + 96)
		__asm(push(i1), push((mstate.ebp+-2646)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-1512)), op(0x37))))
		i1 =  (i1 + 7)
		__asm(push(i1), push((mstate.ebp+-1953)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-1512)), op(0x37))))
		i1 =  (i1 + 10)
		__asm(push(i1), push((mstate.ebp+-1962)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2601)), op(0x37))))
		i1 =  (i1 + 88)
		__asm(push(i1), push((mstate.ebp+-2538)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2601)), op(0x37))))
		i1 =  (i1 + 84)
		__asm(push(i1), push((mstate.ebp+-2547)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2601)), op(0x37))))
		i1 =  (i1 + 92)
		__asm(push(i1), push((mstate.ebp+-2655)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-1512)), op(0x37))))
		i1 =  (i1 + 9)
		__asm(push(i1), push((mstate.ebp+-2610)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-1512)), op(0x37))))
		i1 =  (i1 + 6)
		__asm(push(i1), push((mstate.ebp+-2556)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2601)), op(0x37))))
		i1 =  (i1 + 80)
		__asm(push(i1), push((mstate.ebp+-2619)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2601)), op(0x37))))
		i1 =  (i1 + 44)
		__asm(push(i1), push((mstate.ebp+-1980)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2601)), op(0x37))))
		i1 =  (i1 + 8)
		__asm(push(i1), push((mstate.ebp+-1998)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2601)), op(0x37))))
		i1 =  (i1 + 4)
		__asm(push(i1), push((mstate.ebp+-2628)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-1242)), op(0x37))))
		i1 =  (i1 + 16)
		__asm(push(i1), push((mstate.ebp+-2025)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-1494)), op(0x37))))
		i1 =  (i1 + 80)
		__asm(push(i1), push((mstate.ebp+-2034)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-1494)), op(0x37))))
		i1 =  (i1 + 56)
		__asm(push(i1), push((mstate.ebp+-2061)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-1494)), op(0x37))))
		i1 =  (i1 + 104)
		__asm(push(i1), push((mstate.ebp+-1674)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2106)), op(0x37))))
		i1 =  (i1 + 8)
		__asm(push(i1), push((mstate.ebp+-1683)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-1494)), op(0x37))))
		i1 =  (i1 + 8)
		__asm(push(i1), push((mstate.ebp+-1692)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2106)), op(0x37))))
		i1 =  (i1 + 4)
		__asm(push(i1), push((mstate.ebp+-1701)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-1494)), op(0x37))))
		i1 =  (i1 + 4)
		__asm(push(i1), push((mstate.ebp+-1710)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-1494)), op(0x37))))
		i1 =  (i1 + 28)
		__asm(push(i1), push((mstate.ebp+-1719)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-1494)), op(0x37))))
		i1 =  (i1 + 24)
		__asm(push(i1), push((mstate.ebp+-1728)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-1494)), op(0x37))))
		i1 =  (i1 + 20)
		__asm(push(i1), push((mstate.ebp+-1737)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-1494)), op(0x37))))
		i1 =  (i1 + 16)
		__asm(push(i1), push((mstate.ebp+-1746)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-1512)), op(0x37))))
		i1 =  (i1 + 4)
		__asm(push(i1), push((mstate.ebp+-2097)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-2664)), op(0x37))))
		i1 =  (i1 + 16)
		i2 =  ((__xasm<int>(push((mstate.ebp+-2664)), op(0x37))))
		i2 =  (i2 + 8)
		i3 =  ((__xasm<int>(push((mstate.ebp+-2664)), op(0x37))))
		i3 =  (i3 + 4)
		i4 =  ((__xasm<int>(push((mstate.ebp+-1215)), op(0x37))))
		i4 =  (i4 + 8)
		__asm(push(i4), push((mstate.ebp+-2115)), op(0x3c))
		i4 =  ((__xasm<int>(push((mstate.ebp+-1233)), op(0x37))))
		i4 =  (i4 + 4)
		__asm(push(i4), push((mstate.ebp+-1800)), op(0x3c))
		i4 =  ((__xasm<int>(push((mstate.ebp+-1215)), op(0x37))))
		i4 =  (i4 + 4)
		__asm(push(i4), push((mstate.ebp+-2079)), op(0x3c))
		i4 =  ((__xasm<int>(push((mstate.ebp+-1224)), op(0x37))))
		i4 =  (i4 + 16)
		__asm(push(i4), push((mstate.ebp+-1818)), op(0x3c))
		i4 =  ((__xasm<int>(push((mstate.ebp+-1224)), op(0x37))))
		i4 =  (i4 + 12)
		__asm(push(i4), push((mstate.ebp+-1827)), op(0x3c))
		i4 =  ((__xasm<int>(push((mstate.ebp+-1224)), op(0x37))))
		i4 =  (i4 + 8)
		__asm(push(i4), push((mstate.ebp+-1836)), op(0x3c))
		i4 =  ((__xasm<int>(push((mstate.ebp+-1224)), op(0x37))))
		i4 =  (i4 + 4)
		__asm(push(i4), push((mstate.ebp+-1845)), op(0x3c))
		i4 =  ((__xasm<int>(push((mstate.ebp+-2106)), op(0x37))))
		i4 =  (i4 + 128)
		__asm(push(i4), push((mstate.ebp+-1863)), op(0x3c))
		i4 =  ((__xasm<int>(push((mstate.ebp+-2106)), op(0x37))))
		i4 =  (i4 + 92)
		__asm(push(i4), push((mstate.ebp+-1854)), op(0x3c))
		i4 =  ((__xasm<int>(push((mstate.ebp+-2106)), op(0x37))))
		i4 =  (i4 + 56)
		__asm(push(i4), push((mstate.ebp+-1872)), op(0x3c))
		i4 =  ((__xasm<int>(push((mstate.ebp+-2106)), op(0x37))))
		i4 =  (i4 + 28)
		__asm(push(i4), push((mstate.ebp+-1881)), op(0x3c))
		i4 =  ((__xasm<int>(push((mstate.ebp+-2106)), op(0x37))))
		i4 =  (i4 + 24)
		__asm(push(i4), push((mstate.ebp+-1890)), op(0x3c))
		i4 =  ((__xasm<int>(push((mstate.ebp+-2106)), op(0x37))))
		i4 =  (i4 + 20)
		__asm(push(i4), push((mstate.ebp+-2511)), op(0x3c))
		i4 =  ((__xasm<int>(push((mstate.ebp+-2106)), op(0x37))))
		i4 =  (i4 + 16)
		__asm(push(i4), push((mstate.ebp+-2520)), op(0x3c))
		i4 =  ((__xasm<int>(push((mstate.ebp+-963)), op(0x37))))
		i4 =  (i4 + 102994)
		__asm(push(i4), push((mstate.ebp+-1917)), op(0x3c))
		i4 =  ((__xasm<int>(push((mstate.ebp+-963)), op(0x37))))
		i4 =  (i4 + 102872)
		__asm(push(i4), push((mstate.ebp+-1926)), op(0x3c))
		i4 =  ((__xasm<int>(push((mstate.ebp+-1233)), op(0x37))))
		i4 =  (i4 + 12)
		__asm(push(i4), push((mstate.ebp+-2133)), op(0x3c))
		i4 =  ((__xasm<int>(push((mstate.ebp+-1233)), op(0x37))))
		i4 =  (i4 + 44)
		__asm(push(i4), push((mstate.ebp+-2070)), op(0x3c))
		i4 =  ((__xasm<int>(push((mstate.ebp+-1233)), op(0x37))))
		i4 =  (i4 + 8)
		__asm(push(i4), push((mstate.ebp+-2529)), op(0x3c))
		i4 =  ((__xasm<int>(push((mstate.ebp+-1233)), op(0x37))))
		i4 =  (i4 + 40)
		__asm(push(i4), push((mstate.ebp+-2088)), op(0x3c))
		i4 =  ((__xasm<int>(push((mstate.ebp+-1233)), op(0x37))))
		i4 =  (i4 + 32)
		__asm(push(i4), push((mstate.ebp+-1971)), op(0x3c))
		i4 =  ((__xasm<int>(push((mstate.ebp+-1233)), op(0x37))))
		i4 =  (i4 + 36)
		__asm(push(i4), push((mstate.ebp+-2574)), op(0x3c))
		i4 =  ((__xasm<int>(push((mstate.ebp+-1233)), op(0x37))))
		i4 =  (i4 + 28)
		__asm(push(i4), push((mstate.ebp+-2637)), op(0x3c))
		i4 =  ((__xasm<int>(push((mstate.ebp+-2106)), op(0x37))))
		__asm(push(i4), push((mstate.ebp+-1989)), op(0x3c))
		i4 =  ((__xasm<int>(push((mstate.ebp+-1854)), op(0x37))))
		__asm(push(i4), push((mstate.ebp+-2007)), op(0x3c))
		i4 =  ((__xasm<int>(push((mstate.ebp+-1872)), op(0x37))))
		__asm(push(i4), push((mstate.ebp+-2016)), op(0x3c))
		i4 =  ((__xasm<int>(push((mstate.ebp+-1881)), op(0x37))))
		__asm(push(i4), push((mstate.ebp+-2124)), op(0x3c))
	__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_272_F"), lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_272_B"), label, lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_272_F")); 
		i4 =  ((__xasm<int>(push((mstate.ebp+-855)), op(0x37))))
		i4 =  ((__xasm<int>(push(i4), op(0x37))))
		__asm(push(i4==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_405_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_273_F"))
		f0 =  (1)
		f0 =  f0/*fround*/
		i5 =  (0)
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_404_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_274_B"), label)
		i6 =  ((__xasm<int>(push((i4+136)), op(0x37))))
		i7 =  ((__xasm<int>(push(_b2_maxSubSteps), op(0x37))))
		__asm(push(i6<=i7), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_276_F"))
	__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_275_F"), lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_275_B"), label, lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_275_F")); 
		f0 =  ((__xasm<Number>(push((mstate.ebp+-2168)), op(0x38))))
		i5 =  ((__xasm<int>(push((mstate.ebp+-2052)), op(0x37))))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_402_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_276_F"))
		i5 =  (i5 & 32)
		__asm(push(i5==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_279_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_277_F"))
		f0 =  ((__xasm<Number>(push((i4+140)), op(0x38))))
		f1 =  ((__xasm<Number>(push((mstate.ebp+-2168)), op(0x38))))
		f1 =  f1/*fextend*/
		f2 =  f0/*fextend*/
		__asm(push(f2>=f1), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_275_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_278_F"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_401_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_279_F"))
		i5 =  ((__xasm<int>(push((i4+48)), op(0x37))))
		i6 =  ((__xasm<int>(push((i4+52)), op(0x37))))
		i7 =  ((__xasm<int>(push((i5+42)), op(0x35))))
		__asm(push(i7!=0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_275_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_280_F"))
		i7 =  ((__xasm<int>(push((i6+42)), op(0x35))))
		__asm(push(i7!=0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_275_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_281_F"))
		i7 =  ((__xasm<int>(push((i5+12)), op(0x37))))
		i8 =  ((__xasm<int>(push((i6+12)), op(0x37))))
		i9 =  ((__xasm<int>(push(i7), op(0x37))))
		i10 =  ((__xasm<int>(push(i8), op(0x37))))
		__asm(push(i10==2), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_285_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_282_F"))
		__asm(push(i9==2), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_285_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_283_F"))
		i5 =  (___sF)
		mstate.esp -= 24
		i4 =  (__2E_str1670)
		i0 =  (__2E_str176)
		i1 =  (__ZZN7b2World8SolveTOIERK10b2TimeStepE8__func__)
		i2 =  (__2E_str69276)
		i3 =  (607)
		i5 =  (i5 + 176)
		__asm(push(i5), push(mstate.esp), op(0x3c))
		__asm(push(i4), push((mstate.esp+4)), op(0x3c))
		__asm(push(i0), push((mstate.esp+8)), op(0x3c))
		__asm(push(i1), push((mstate.esp+12)), op(0x3c))
		__asm(push(i2), push((mstate.esp+16)), op(0x3c))
		__asm(push(i3), push((mstate.esp+20)), op(0x3c))
		state = 48
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state48"))
		mstate.esp += 24
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_284_F"))
		state = 49
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state49"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_285_F"))
		i11 =  ((__xasm<int>(push((i7+4)), op(0x36))))
		i12 =  ((__xasm<int>(push((i8+4)), op(0x36))))
		i13 =  (i12 & 2)
		i14 =  (i11 & 2)
		i14 =  ((i14==0) ? 1 : 0)
		i15 =  ((i9==0) ? 1 : 0)
		i13 =  ((i13!=0) ? 1 : 0)
		i16 =  ((i10!=0) ? 1 : 0)
		i13 =  (i13 & i16)
		i14 =  (i14 | i15)
		i13 =  (i13 & 1)
		__asm(push(i13!=0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_287_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_286_F"))
		i13 =  (i14 & 1)
		__asm(push(i13!=0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_275_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_287_F"))
		i11 =  (i11 & 8)
		i12 =  (i12 & 8)
		__asm(push(i10!=2), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_291_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_288_F"))
		__asm(push(i9!=2), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_291_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_289_F"))
		__asm(push(i11!=0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_291_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_290_F"))
		__asm(push(i12==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_275_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_291_F"))
		f0 =  ((__xasm<Number>(push((i7+68)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i8+68)), op(0x38))))
		i9 =  (i7 + 68)
		i10 =  (i8 + 68)
		f2 =  f1/*fextend*/
		f3 =  f0/*fextend*/
		__asm(push(f3>=f2), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_297_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_292_F"))
		f2 =  (1)
		f2 =  f2/*fround*/
		f2 =  f2/*fextend*/
		f3 =  f0/*fextend*/
		__asm(push(f3<f2), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_295_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_293_F"))
		i5 =  (___sF)
		mstate.esp -= 24
		i4 =  (__2E_str1670)
		i0 =  (__2E_str48255)
		i1 =  (__ZZN7b2Sweep7AdvanceEfE8__func__)
		i2 =  (__2E_str47254)
		i3 =  (624)
		i5 =  (i5 + 176)
		__asm(push(i5), push(mstate.esp), op(0x3c))
		__asm(push(i4), push((mstate.esp+4)), op(0x3c))
		__asm(push(i0), push((mstate.esp+8)), op(0x3c))
		__asm(push(i1), push((mstate.esp+12)), op(0x3c))
		__asm(push(i2), push((mstate.esp+16)), op(0x3c))
		__asm(push(i3), push((mstate.esp+20)), op(0x3c))
		state = 50
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state50"))
		mstate.esp += 24
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_294_F"))
		state = 51
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state51"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_295_F"))
		f2 =  (1)
		f2 =  f2/*fround*/
		f3 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		f2 =  f2/*fextend*/
		f4 =  (f3 - f0)
		f0 =  (f2 - f0)
		f4 =  f4/*fround*/
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f4 =  f4/*fextend*/
		f0 =  (f4 / f0)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f4 =  (f2 - f0)
		f4 =  f4/*fround*/
		f5 =  ((__xasm<Number>(push((i7+52)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i7+44)), op(0x38))))
		f4 =  f4/*fextend*/
		f7 =  ((__xasm<Number>(push((i7+56)), op(0x38))))
		f8 =  ((__xasm<Number>(push((i7+48)), op(0x38))))
		f5 =  (f5 * f0)
		f6 =  (f6 * f4)
		f7 =  (f7 * f0)
		f5 =  f5/*fround*/
		f8 =  (f8 * f4)
		f6 =  f6/*fround*/
		f7 =  f7/*fround*/
		f8 =  f8/*fround*/
		f5 =  f5/*fextend*/
		f6 =  f6/*fextend*/
		f5 =  (f6 + f5)
		f6 =  f7/*fextend*/
		f7 =  f8/*fextend*/
		f6 =  (f7 + f6)
		f5 =  f5/*fround*/
		__asm(push(f5), push((i7+44)), op(0x3d))
		f5 =  f6/*fround*/
		__asm(push(f5), push((i7+48)), op(0x3d))
		f5 =  ((__xasm<Number>(push((i7+60)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i7+64)), op(0x38))))
		f4 =  (f4 * f5)
		f0 =  (f6 * f0)
		f4 =  f4/*fround*/
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f4 =  f4/*fextend*/
		f0 =  (f4 + f0)
		f0 =  f0/*fround*/
		__asm(push(f0), push((i7+60)), op(0x3d))
		__asm(push(f1), push(i9), op(0x3d))
		__asm(push(f3>=f2), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_304_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_296_F"))
		f0 = f1
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_306_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_297_F"))
		f2 =  f0/*fextend*/
		f3 =  f1/*fextend*/
		__asm(push(f3>=f2), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_302_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_298_F"))
		f2 =  (1)
		f2 =  f2/*fround*/
		f2 =  f2/*fextend*/
		f3 =  f1/*fextend*/
		__asm(push(f3<f2), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_301_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_299_F"))
		i5 =  (___sF)
		mstate.esp -= 24
		i4 =  (__2E_str1670)
		i0 =  (__2E_str48255)
		i1 =  (__ZZN7b2Sweep7AdvanceEfE8__func__)
		i2 =  (__2E_str47254)
		i3 =  (624)
		i5 =  (i5 + 176)
		__asm(push(i5), push(mstate.esp), op(0x3c))
		__asm(push(i4), push((mstate.esp+4)), op(0x3c))
		__asm(push(i0), push((mstate.esp+8)), op(0x3c))
		__asm(push(i1), push((mstate.esp+12)), op(0x3c))
		__asm(push(i2), push((mstate.esp+16)), op(0x3c))
		__asm(push(i3), push((mstate.esp+20)), op(0x3c))
		state = 52
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state52"))
		mstate.esp += 24
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_300_F"))
		state = 53
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state53"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_301_F"))
		f2 =  (1)
		f2 =  f2/*fround*/
		f3 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		f2 =  f2/*fextend*/
		f3 =  (f3 - f1)
		f1 =  (f2 - f1)
		f3 =  f3/*fround*/
		f1 =  f1/*fround*/
		f1 =  f1/*fextend*/
		f3 =  f3/*fextend*/
		f1 =  (f3 / f1)
		f1 =  f1/*fround*/
		f1 =  f1/*fextend*/
		f2 =  (f2 - f1)
		f2 =  f2/*fround*/
		f3 =  ((__xasm<Number>(push((i8+52)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i8+44)), op(0x38))))
		f2 =  f2/*fextend*/
		f5 =  ((__xasm<Number>(push((i8+56)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i8+48)), op(0x38))))
		f3 =  (f3 * f1)
		f4 =  (f4 * f2)
		f5 =  (f5 * f1)
		f3 =  f3/*fround*/
		f6 =  (f6 * f2)
		f4 =  f4/*fround*/
		f5 =  f5/*fround*/
		f6 =  f6/*fround*/
		f3 =  f3/*fextend*/
		f4 =  f4/*fextend*/
		f3 =  (f4 + f3)
		f4 =  f5/*fextend*/
		f5 =  f6/*fextend*/
		f4 =  (f5 + f4)
		f3 =  f3/*fround*/
		__asm(push(f3), push((i8+44)), op(0x3d))
		f3 =  f4/*fround*/
		__asm(push(f3), push((i8+48)), op(0x3d))
		f3 =  ((__xasm<Number>(push((i8+60)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i8+64)), op(0x38))))
		f2 =  (f2 * f3)
		f1 =  (f4 * f1)
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		f1 =  f1/*fextend*/
		f2 =  f2/*fextend*/
		f1 =  (f2 + f1)
		f1 =  f1/*fround*/
		__asm(push(f1), push((i8+60)), op(0x3d))
		__asm(push(f0), push(i10), op(0x3d))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_302_F"))
		f1 =  (1)
		f1 =  f1/*fround*/
		f1 =  f1/*fextend*/
		f2 =  f0/*fextend*/
		__asm(push(f2>=f1), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_304_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_303_F"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_306_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_304_F"))
		i5 =  (___sF)
		mstate.esp -= 24
		i4 =  (__2E_str1670)
		i0 =  (__2E_str48255)
		i1 =  (__ZZN7b2World8SolveTOIERK10b2TimeStepE8__func__)
		i2 =  (__2E_str69276)
		i3 =  (642)
		i5 =  (i5 + 176)
		__asm(push(i5), push(mstate.esp), op(0x3c))
		__asm(push(i4), push((mstate.esp+4)), op(0x3c))
		__asm(push(i0), push((mstate.esp+8)), op(0x3c))
		__asm(push(i1), push((mstate.esp+12)), op(0x3c))
		__asm(push(i2), push((mstate.esp+16)), op(0x3c))
		__asm(push(i3), push((mstate.esp+20)), op(0x3c))
		state = 54
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state54"))
		mstate.esp += 24
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_305_F"))
		state = 55
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state55"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_306_F"))
		__asm(push(f0), push((mstate.ebp+-2160)), op(0x3d))
		i9 =  (0)
		i10 =  ((__xasm<int>(push((i4+56)), op(0x37))))
		i11 =  ((__xasm<int>(push((i4+60)), op(0x37))))
		i12 =  ((__xasm<int>(push((mstate.ebp+-2520)), op(0x37))))
		__asm(push(i9), push(i12), op(0x3c))
		i12 =  ((__xasm<int>(push((mstate.ebp+-2511)), op(0x37))))
		__asm(push(i9), push(i12), op(0x3c))
		i12 =  ((__xasm<int>(push((mstate.ebp+-1890)), op(0x37))))
		__asm(push(i9), push(i12), op(0x3c))
		i12 =  ((__xasm<int>(push((mstate.ebp+-2142)), op(0x37))))
		__asm(push(i9), push(i12), op(0x3c))
		i12 =  ((__xasm<int>(push((mstate.ebp+-2151)), op(0x37))))
		__asm(push(i9), push(i12), op(0x3c))
		i12 =  ((__xasm<int>(push((mstate.ebp+-1503)), op(0x37))))
		__asm(push(i9), push(i12), op(0x3c))
		i5 =  ((__xasm<int>(push((i5+16)), op(0x37))))
		mstate.esp -= 12
		i9 =  ((__xasm<int>(push((mstate.ebp+-2106)), op(0x37))))
		__asm(push(i9), push(mstate.esp), op(0x3c))
		__asm(push(i5), push((mstate.esp+4)), op(0x3c))
		__asm(push(i10), push((mstate.esp+8)), op(0x3c))
		state = 56
		mstate.esp -= 4;FSM__ZN15b2DistanceProxy3SetEPK7b2Shapei.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state56"))
		mstate.esp += 12
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_307_F"))
		i5 =  ((__xasm<int>(push((i6+16)), op(0x37))))
		mstate.esp -= 12
		i6 =  ((__xasm<int>(push((mstate.ebp+-2124)), op(0x37))))
		__asm(push(i6), push(mstate.esp), op(0x3c))
		__asm(push(i5), push((mstate.esp+4)), op(0x3c))
		__asm(push(i11), push((mstate.esp+8)), op(0x3c))
		state = 57
		mstate.esp -= 4;FSM__ZN15b2DistanceProxy3SetEPK7b2Shapei.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state57"))
		mstate.esp += 12
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_308_F"))
		i5 =  (36)
		i6 =  ((__xasm<int>(push((mstate.ebp+-1872)), op(0x37))))
		i7 =  (i7 + 36)
		i9 = i5
		memcpy(i6, i7, i9)
		i6 =  ((__xasm<int>(push((mstate.ebp+-1854)), op(0x37))))
		i7 =  (i8 + 36)
		memcpy(i6, i7, i5)
		i5 =  (1065353216)
		i6 =  ((__xasm<int>(push((mstate.ebp+-1863)), op(0x37))))
		__asm(push(i5), push(i6), op(0x3c))
		i5 =  ((__xasm<int>(push(_b2_toiCalls), op(0x37))))
		f0 =  (6.28319)
		i5 =  (i5 + 1)
		f0 =  f0/*fround*/
		__asm(push(i5), push(_b2_toiCalls), op(0x3c))
		i5 =  ((__xasm<int>(push((mstate.ebp+-1296)), op(0x37))))
		f1 =  ((__xasm<Number>(push(i5), op(0x38))))
		f2 =  f0/*fextend*/
		i5 =  ((__xasm<int>(push((mstate.ebp+-1368)), op(0x37))))
		f3 =  ((__xasm<Number>(push(i5), op(0x38))))
		f0 =  (f1 / f2)
		i5 =  ((__xasm<int>(push((mstate.ebp+-2016)), op(0x37))))
		f4 =  ((__xasm<Number>(push(i5), op(0x38))))
		__asm(push(f4), push((mstate.ebp+-2296)), op(0x3d))
		i5 =  ((__xasm<int>(push((mstate.ebp+-1251)), op(0x37))))
		f4 =  ((__xasm<Number>(push(i5), op(0x38))))
		i5 =  ((__xasm<int>(push((mstate.ebp+-1260)), op(0x37))))
		f5 =  ((__xasm<Number>(push(i5), op(0x38))))
		__asm(push(f5), push((mstate.ebp+-2192)), op(0x3d))
		i5 =  ((__xasm<int>(push((mstate.ebp+-1269)), op(0x37))))
		f5 =  ((__xasm<Number>(push(i5), op(0x38))))
		__asm(push(f5), push((mstate.ebp+-2200)), op(0x3d))
		i5 =  ((__xasm<int>(push((mstate.ebp+-1278)), op(0x37))))
		f5 =  ((__xasm<Number>(push(i5), op(0x38))))
		__asm(push(f5), push((mstate.ebp+-2208)), op(0x3d))
		i5 =  ((__xasm<int>(push((mstate.ebp+-1287)), op(0x37))))
		f5 =  ((__xasm<Number>(push(i5), op(0x38))))
		__asm(push(f5), push((mstate.ebp+-2216)), op(0x3d))
		i5 =  ((__xasm<int>(push((mstate.ebp+-1305)), op(0x37))))
		f5 =  ((__xasm<Number>(push(i5), op(0x38))))
		i5 =  ((__xasm<int>(push((mstate.ebp+-1314)), op(0x37))))
		f6 =  ((__xasm<Number>(push(i5), op(0x38))))
		__asm(push(f6), push((mstate.ebp+-2176)), op(0x3d))
		i5 =  ((__xasm<int>(push((mstate.ebp+-2007)), op(0x37))))
		f6 =  ((__xasm<Number>(push(i5), op(0x38))))
		i5 =  ((__xasm<int>(push((mstate.ebp+-1323)), op(0x37))))
		f7 =  ((__xasm<Number>(push(i5), op(0x38))))
		i5 =  ((__xasm<int>(push((mstate.ebp+-1332)), op(0x37))))
		f8 =  ((__xasm<Number>(push(i5), op(0x38))))
		__asm(push(f8), push((mstate.ebp+-2224)), op(0x3d))
		i5 =  ((__xasm<int>(push((mstate.ebp+-1341)), op(0x37))))
		f8 =  ((__xasm<Number>(push(i5), op(0x38))))
		__asm(push(f8), push((mstate.ebp+-2232)), op(0x3d))
		i5 =  ((__xasm<int>(push((mstate.ebp+-1350)), op(0x37))))
		f8 =  ((__xasm<Number>(push(i5), op(0x38))))
		__asm(push(f8), push((mstate.ebp+-2240)), op(0x3d))
		i5 =  ((__xasm<int>(push((mstate.ebp+-1359)), op(0x37))))
		f8 =  ((__xasm<Number>(push(i5), op(0x38))))
		__asm(push(f8), push((mstate.ebp+-2248)), op(0x3d))
		i5 =  ((__xasm<int>(push((mstate.ebp+-1377)), op(0x37))))
		f8 =  ((__xasm<Number>(push(i5), op(0x38))))
		i5 =  ((__xasm<int>(push((mstate.ebp+-1386)), op(0x37))))
		f9 =  ((__xasm<Number>(push(i5), op(0x38))))
		__asm(push(f9), push((mstate.ebp+-2184)), op(0x3d))
		f9 =  (f3 / f2)
		f0 =  f0/*fround*/
		//InlineAsmStart
	f0 =  Math.floor(f0);

	//InlineAsmEnd
		f10 = f0
		f0 =  f9/*fround*/
		//InlineAsmStart
	f0 =  Math.floor(f0);

	//InlineAsmEnd
		f9 =  (-3)
		i5 =  ((__xasm<int>(push((mstate.ebp+-1890)), op(0x37))))
		f11 =  ((__xasm<Number>(push(i5), op(0x38))))
		i5 =  ((__xasm<int>(push((mstate.ebp+-1503)), op(0x37))))
		f12 =  ((__xasm<Number>(push(i5), op(0x38))))
		f9 =  f9/*fround*/
		f13 =  ((__xasm<Number>(push(_b2_linearSlop), op(0x38))))
		f9 =  f9/*fextend*/
		f14 =  f12/*fextend*/
		f15 =  f11/*fextend*/
		f14 =  (f15 + f14)
		f9 =  (f13 * f9)
		f14 =  f14/*fround*/
		f9 =  f9/*fround*/
		f10 =  f10/*fextend*/
		f0 =  f0/*fextend*/
		f14 =  f14/*fextend*/
		f9 =  f9/*fextend*/
		f10 =  (f10 * f2)
		f0 =  (f0 * f2)
		f2 =  (f9 + f14)
		f9 =  (0.25)
		f10 =  f10/*fround*/
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f9 =  f9/*fround*/
		f10 =  f10/*fextend*/
		f0 =  f0/*fextend*/
		f2 =  f2/*fextend*/
		f9 =  f9/*fextend*/
		f14 =  ((__xasm<Number>(push(i6), op(0x38))))
		f1 =  (f1 - f10)
		f5 =  (f5 - f10)
		f3 =  (f3 - f0)
		f0 =  (f8 - f0)
		f2 =  ((f13>f2) ? f13 : f2)
		f8 =  (f13 * f9)
		f2 =  f2/*fround*/
		f8 =  f8/*fround*/
		f1 =  f1/*fround*/
		__asm(push(f1), push((mstate.ebp+-2256)), op(0x3d))
		f1 =  f5/*fround*/
		__asm(push(f1), push((mstate.ebp+-2264)), op(0x3d))
		f1 =  f3/*fround*/
		__asm(push(f1), push((mstate.ebp+-2272)), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push((mstate.ebp+-2280)), op(0x3d))
		f0 =  f8/*fextend*/
		f1 =  f2/*fextend*/
		__asm(push(f1>f0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_311_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_309_F"))
		i4 =  (___sF)
		mstate.esp -= 24
		i5 =  (__2E_str1670)
		i0 =  (__2E_str145329)
		i1 =  (__ZZ14b2TimeOfImpactP11b2TOIOutputPK10b2TOIInputE8__func__)
		i2 =  (__2E_str129321)
		i3 =  (280)
		i4 =  (i4 + 176)
		__asm(push(i4), push(mstate.esp), op(0x3c))
		__asm(push(i5), push((mstate.esp+4)), op(0x3c))
		__asm(push(i0), push((mstate.esp+8)), op(0x3c))
		__asm(push(i1), push((mstate.esp+12)), op(0x3c))
		__asm(push(i2), push((mstate.esp+16)), op(0x3c))
		__asm(push(i3), push((mstate.esp+20)), op(0x3c))
		state = 58
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state58"))
		mstate.esp += 24
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_310_F"))
		state = 59
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state59"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_311_F"))
		i5 =  (0)
		i6 =  ((__xasm<int>(push((mstate.ebp+-2097)), op(0x37))))
		__asm(push(i5), push(i6), op(0x3b))
		i6 =  ((__xasm<int>(push((mstate.ebp+-1989)), op(0x37))))
		f0 =  ((__xasm<Number>(push(i6), op(0x38))))
		i6 =  ((__xasm<int>(push((mstate.ebp+-1494)), op(0x37))))
		__asm(push(f0), push(i6), op(0x3d))
		i6 =  ((__xasm<int>(push((mstate.ebp+-1701)), op(0x37))))
		f0 =  ((__xasm<Number>(push(i6), op(0x38))))
		i6 =  ((__xasm<int>(push((mstate.ebp+-1710)), op(0x37))))
		__asm(push(f0), push(i6), op(0x3d))
		i6 =  ((__xasm<int>(push((mstate.ebp+-1683)), op(0x37))))
		f0 =  ((__xasm<Number>(push(i6), op(0x38))))
		i6 =  ((__xasm<int>(push((mstate.ebp+-1692)), op(0x37))))
		__asm(push(f0), push(i6), op(0x3d))
		i6 =  ((__xasm<int>(push((mstate.ebp+-1431)), op(0x37))))
		f0 =  ((__xasm<Number>(push(i6), op(0x38))))
		i6 =  ((__xasm<int>(push((mstate.ebp+-1422)), op(0x37))))
		__asm(push(f0), push(i6), op(0x3d))
		i6 =  ((__xasm<int>(push((mstate.ebp+-2520)), op(0x37))))
		i6 =  ((__xasm<int>(push(i6), op(0x37))))
		i7 =  ((__xasm<int>(push((mstate.ebp+-1746)), op(0x37))))
		__asm(push(i6), push(i7), op(0x3c))
		i6 =  ((__xasm<int>(push((mstate.ebp+-2511)), op(0x37))))
		i6 =  ((__xasm<int>(push(i6), op(0x37))))
		i7 =  ((__xasm<int>(push((mstate.ebp+-1737)), op(0x37))))
		__asm(push(i6), push(i7), op(0x3c))
		i6 =  ((__xasm<int>(push((mstate.ebp+-1728)), op(0x37))))
		__asm(push(f11), push(i6), op(0x3d))
		i6 =  ((__xasm<int>(push((mstate.ebp+-1881)), op(0x37))))
		f0 =  ((__xasm<Number>(push(i6), op(0x38))))
		i6 =  ((__xasm<int>(push((mstate.ebp+-1719)), op(0x37))))
		__asm(push(f0), push(i6), op(0x3d))
		i6 =  ((__xasm<int>(push((mstate.ebp+-1449)), op(0x37))))
		f0 =  ((__xasm<Number>(push(i6), op(0x38))))
		i6 =  ((__xasm<int>(push((mstate.ebp+-1440)), op(0x37))))
		__asm(push(f0), push(i6), op(0x3d))
		i6 =  ((__xasm<int>(push((mstate.ebp+-1467)), op(0x37))))
		f0 =  ((__xasm<Number>(push(i6), op(0x38))))
		i6 =  ((__xasm<int>(push((mstate.ebp+-1458)), op(0x37))))
		__asm(push(f0), push(i6), op(0x3d))
		i6 =  ((__xasm<int>(push((mstate.ebp+-1485)), op(0x37))))
		f0 =  ((__xasm<Number>(push(i6), op(0x38))))
		i6 =  ((__xasm<int>(push((mstate.ebp+-1476)), op(0x37))))
		__asm(push(f0), push(i6), op(0x3d))
		i6 =  ((__xasm<int>(push((mstate.ebp+-2142)), op(0x37))))
		i6 =  ((__xasm<int>(push(i6), op(0x37))))
		i7 =  ((__xasm<int>(push((mstate.ebp+-1395)), op(0x37))))
		__asm(push(i6), push(i7), op(0x3c))
		i6 =  ((__xasm<int>(push((mstate.ebp+-2151)), op(0x37))))
		i6 =  ((__xasm<int>(push(i6), op(0x37))))
		i7 =  ((__xasm<int>(push((mstate.ebp+-1404)), op(0x37))))
		__asm(push(i6), push(i7), op(0x3c))
		f0 =  f8/*fextend*/
		f1 =  f2/*fextend*/
		f3 =  (f1 + f0)
		f0 =  (f1 - f0)
		f1 =  (0)
		i6 =  ((__xasm<int>(push((mstate.ebp+-1413)), op(0x37))))
		__asm(push(f12), push(i6), op(0x3d))
		i6 =  ((__xasm<int>(push((mstate.ebp+-1674)), op(0x37))))
		__asm(push(i5), push(i6), op(0x3a))
		f3 =  f3/*fround*/
		f0 =  f0/*fround*/
		__asm(push(f0), push((mstate.ebp+-2288)), op(0x3d))
		f0 =  f1/*fround*/
	__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_312_F"), lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_312_B"), label, lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_312_F")); 
		f1 = f0
		f0 =  (1)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f5 =  f1/*fextend*/
		f0 =  (f0 - f5)
		f0 =  f0/*fround*/
		f9 =  ((__xasm<Number>(push((mstate.ebp+-2264)), op(0x38))))
		f9 =  f9/*fextend*/
		f10 =  ((__xasm<Number>(push((mstate.ebp+-2256)), op(0x38))))
		f10 =  f10/*fextend*/
		f11 =  f0/*fextend*/
		f0 =  (f11 * f10)
		f9 =  (f9 * f5)
		f0 =  f0/*fround*/
		f9 =  f9/*fround*/
		f9 =  f9/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 + f9)
		f9 =  f0/*fround*/
		f0 = f9
		//InlineAsmStart
	f0 =  Math.cos(f0);

	//InlineAsmEnd
		f10 = f0
		f0 =  ((__xasm<Number>(push((mstate.ebp+-2272)), op(0x38))))
		f0 =  f0/*fextend*/
		f12 =  ((__xasm<Number>(push((mstate.ebp+-2280)), op(0x38))))
		f12 =  f12/*fextend*/
		f13 =  (f11 * f0)
		f12 =  (f12 * f5)
		f0 = f9
		//InlineAsmStart
	f0 =  Math.sin(f0);

	//InlineAsmEnd
		f15 = f0
		f0 =  ((__xasm<Number>(push((mstate.ebp+-2208)), op(0x38))))
		f0 =  f0/*fextend*/
		f16 =  ((__xasm<Number>(push((mstate.ebp+-2192)), op(0x38))))
		f16 =  f16/*fextend*/
		f17 =  f15/*fextend*/
		f18 =  f4/*fextend*/
		f19 =  ((__xasm<Number>(push((mstate.ebp+-2296)), op(0x38))))
		f19 =  f19/*fextend*/
		f20 =  f10/*fextend*/
		f13 =  f13/*fround*/
		f12 =  f12/*fround*/
		f21 =  ((__xasm<Number>(push((mstate.ebp+-2216)), op(0x38))))
		f21 =  f21/*fextend*/
		f0 =  (f0 * f5)
		f22 =  ((__xasm<Number>(push((mstate.ebp+-2200)), op(0x38))))
		f22 =  f22/*fextend*/
		f16 =  (f16 * f11)
		f23 =  (f18 * f17)
		f24 =  (f20 * f19)
		f12 =  f12/*fextend*/
		f13 =  f13/*fextend*/
		f21 =  (f21 * f5)
		f0 =  f0/*fround*/
		f22 =  (f22 * f11)
		f16 =  f16/*fround*/
		f19 =  (f17 * f19)
		f23 =  f23/*fround*/
		f18 =  (f20 * f18)
		f20 =  f24/*fround*/
		f12 =  (f13 + f12)
		f13 =  f21/*fround*/
		f21 =  f22/*fround*/
		f19 =  f19/*fround*/
		f18 =  f18/*fround*/
		f12 =  f12/*fround*/
		f22 =  f0/*fextend*/
		f16 =  f16/*fextend*/
		f23 =  f23/*fextend*/
		f20 =  f20/*fextend*/
		f0 = f12
		//InlineAsmStart
	f0 =  Math.cos(f0);

	//InlineAsmEnd
		f24 = f0
		f0 =  (f16 + f22)
		f16 =  (f20 - f23)
		f13 =  f13/*fextend*/
		f20 =  f21/*fextend*/
		f18 =  f18/*fextend*/
		f19 =  f19/*fextend*/
		f13 =  (f20 + f13)
		f20 =  f0/*fround*/
		f18 =  (f19 + f18)
		f16 =  f16/*fround*/
		f0 = f12
		//InlineAsmStart
	f0 =  Math.sin(f0);

	//InlineAsmEnd
		f13 =  f13/*fround*/
		f18 =  f18/*fround*/
		f19 =  f0/*fextend*/
		f21 =  f7/*fextend*/
		f22 =  f6/*fextend*/
		f23 =  f24/*fextend*/
		f25 =  ((__xasm<Number>(push((mstate.ebp+-2224)), op(0x38))))
		f25 =  f25/*fextend*/
		f26 =  ((__xasm<Number>(push((mstate.ebp+-2240)), op(0x38))))
		f26 =  f26/*fextend*/
		f16 =  f16/*fextend*/
		f27 =  f20/*fextend*/
		f16 =  (f27 - f16)
		f27 =  (f21 * f19)
		f28 =  (f23 * f22)
		f29 =  ((__xasm<Number>(push((mstate.ebp+-2232)), op(0x38))))
		f29 =  f29/*fextend*/
		f25 =  (f25 * f11)
		f30 =  ((__xasm<Number>(push((mstate.ebp+-2248)), op(0x38))))
		f30 =  f30/*fextend*/
		f26 =  (f26 * f5)
		f18 =  f18/*fextend*/
		f31 =  f13/*fextend*/
		f18 =  (f31 - f18)
		f22 =  (f19 * f22)
		f27 =  f27/*fround*/
		f21 =  (f23 * f21)
		f23 =  f28/*fround*/
		f11 =  (f29 * f11)
		f25 =  f25/*fround*/
		f5 =  (f30 * f5)
		f26 =  f26/*fround*/
		f16 =  f16/*fround*/
		f22 =  f22/*fround*/
		f21 =  f21/*fround*/
		f11 =  f11/*fround*/
		f5 =  f5/*fround*/
		i6 =  ((__xasm<int>(push((mstate.ebp+-2061)), op(0x37))))
		__asm(push(f16), push(i6), op(0x3d))
		f16 =  f18/*fround*/
		f18 =  f27/*fextend*/
		f23 =  f23/*fextend*/
		f26 =  f26/*fextend*/
		f25 =  f25/*fextend*/
		f18 =  (f23 - f18)
		f23 =  (f25 + f26)
		i6 =  ((__xasm<int>(push((mstate.ebp+-1530)), op(0x37))))
		__asm(push(f16), push(i6), op(0x3d))
		f16 =  f21/*fextend*/
		f21 =  f22/*fextend*/
		f5 =  f5/*fextend*/
		f11 =  f11/*fextend*/
		f17 =  -f17
		f16 =  (f21 + f16)
		f18 =  f18/*fround*/
		f5 =  (f11 + f5)
		f11 =  f23/*fround*/
		i6 =  ((__xasm<int>(push((mstate.ebp+-1539)), op(0x37))))
		__asm(push(f10), push(i6), op(0x3d))
		f16 =  f16/*fround*/
		f5 =  f5/*fround*/
		i6 =  ((__xasm<int>(push((mstate.ebp+-1548)), op(0x37))))
		__asm(push(f15), push(i6), op(0x3d))
		f15 =  f17/*fround*/
		f17 =  f18/*fextend*/
		f18 =  f11/*fextend*/
		f17 =  (f18 - f17)
		i6 =  ((__xasm<int>(push((mstate.ebp+-1557)), op(0x37))))
		__asm(push(f15), push(i6), op(0x3d))
		f15 =  f16/*fextend*/
		f16 =  f5/*fextend*/
		f15 =  (f16 - f15)
		i6 =  ((__xasm<int>(push((mstate.ebp+-1566)), op(0x37))))
		__asm(push(f10), push(i6), op(0x3d))
		f10 =  f17/*fround*/
		i6 =  ((__xasm<int>(push((mstate.ebp+-2034)), op(0x37))))
		__asm(push(f10), push(i6), op(0x3d))
		f10 =  f15/*fround*/
		i6 =  ((__xasm<int>(push((mstate.ebp+-1575)), op(0x37))))
		__asm(push(f10), push(i6), op(0x3d))
		f10 =  -f19
		i6 =  ((__xasm<int>(push((mstate.ebp+-1584)), op(0x37))))
		__asm(push(f24), push(i6), op(0x3d))
		i6 =  ((__xasm<int>(push((mstate.ebp+-1593)), op(0x37))))
		__asm(push(f0), push(i6), op(0x3d))
		f0 =  f10/*fround*/
		i6 =  ((__xasm<int>(push((mstate.ebp+-1602)), op(0x37))))
		__asm(push(f0), push(i6), op(0x3d))
		i6 =  ((__xasm<int>(push((mstate.ebp+-1611)), op(0x37))))
		__asm(push(f24), push(i6), op(0x3d))
		mstate.esp -= 12
		i6 =  ((mstate.ebp+-384))
		i7 =  ((mstate.ebp+-272))
		i8 =  ((mstate.ebp+-416))
		__asm(push(i8), push(mstate.esp), op(0x3c))
		__asm(push(i7), push((mstate.esp+4)), op(0x3c))
		__asm(push(i6), push((mstate.esp+8)), op(0x3c))
		state = 60
		mstate.esp -= 4;FSM__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state60"))
		mstate.esp += 12
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_313_F"))
		f0 =  (0)
		i6 =  ((__xasm<int>(push((mstate.ebp+-2025)), op(0x37))))
		f10 =  ((__xasm<Number>(push(i6), op(0x38))))
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f15 =  f10/*fextend*/
		__asm(push(f15>f0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_315_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_314_F"))
		f0 =  (0)
		i6 =  ((__xasm<int>(push(_b2_toiMaxIters), op(0x37))))
		i5 =  ((i6>i5) ? i6 : i5)
		__asm(push(i5), push(_b2_toiMaxIters), op(0x3c))
		f0 =  f0/*fround*/
		i5 =  (2)
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_396_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_315_F"))
		f0 =  f3/*fextend*/
		f10 =  f10/*fextend*/
		__asm(push(f10>=f0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_317_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_316_F"))
		i6 =  (3)
		i7 =  ((__xasm<int>(push(_b2_toiMaxIters), op(0x37))))
		i5 =  ((i7>i5) ? i7 : i5)
		__asm(push(i5), push(_b2_toiMaxIters), op(0x3c))
		i5 = i6
		f0 = f1
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_396_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_317_F"))
		i7 =  ((__xasm<int>(push((mstate.ebp+-2601)), op(0x37))))
		i6 =  ((__xasm<int>(push((mstate.ebp+-2106)), op(0x37))))
		__asm(push(i6), push(i7), op(0x3c))
		i6 =  ((__xasm<int>(push((mstate.ebp+-2628)), op(0x37))))
		i7 =  ((__xasm<int>(push((mstate.ebp+-2124)), op(0x37))))
		__asm(push(i7), push(i6), op(0x3c))
		i6 =  ((__xasm<int>(push((mstate.ebp+-2097)), op(0x37))))
		i6 =  ((__xasm<int>(push(i6), op(0x36))))
		i7 =  (i6 + -1)
		__asm(push(uint(i7)<uint(2)), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_320_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_318_F"))
		i5 =  (___sF)
		mstate.esp -= 24
		i4 =  (__2E_str1670)
		i0 =  (__2E_str144)
		i1 =  (__ZZN16b2PulleyJointDef10InitializeEP6b2BodyS1_RK6b2Vec2S4_S4_S4_fE8__func__)
		i2 =  (__2E_str129321)
		i3 =  (50)
		i5 =  (i5 + 176)
		__asm(push(i5), push(mstate.esp), op(0x3c))
		__asm(push(i4), push((mstate.esp+4)), op(0x3c))
		__asm(push(i0), push((mstate.esp+8)), op(0x3c))
		__asm(push(i1), push((mstate.esp+12)), op(0x3c))
		__asm(push(i2), push((mstate.esp+16)), op(0x3c))
		__asm(push(i3), push((mstate.esp+20)), op(0x3c))
		state = 61
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state61"))
		mstate.esp += 24
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_319_F"))
		state = 62
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state62"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_320_F"))
		i7 =  ((__xasm<int>(push((mstate.ebp+-1998)), op(0x37))))
		f0 =  ((__xasm<Number>(push((mstate.ebp+-2296)), op(0x38))))
		__asm(push(f0), push(i7), op(0x3d))
		i7 =  ((__xasm<int>(push((mstate.ebp+-1620)), op(0x37))))
		__asm(push(f4), push(i7), op(0x3d))
		i7 =  ((__xasm<int>(push((mstate.ebp+-1629)), op(0x37))))
		f0 =  ((__xasm<Number>(push((mstate.ebp+-2192)), op(0x38))))
		__asm(push(f0), push(i7), op(0x3d))
		i7 =  ((__xasm<int>(push((mstate.ebp+-1638)), op(0x37))))
		f0 =  ((__xasm<Number>(push((mstate.ebp+-2200)), op(0x38))))
		__asm(push(f0), push(i7), op(0x3d))
		i7 =  ((__xasm<int>(push((mstate.ebp+-1647)), op(0x37))))
		f0 =  ((__xasm<Number>(push((mstate.ebp+-2208)), op(0x38))))
		__asm(push(f0), push(i7), op(0x3d))
		i7 =  ((__xasm<int>(push((mstate.ebp+-1656)), op(0x37))))
		f0 =  ((__xasm<Number>(push((mstate.ebp+-2216)), op(0x38))))
		__asm(push(f0), push(i7), op(0x3d))
		i7 =  ((__xasm<int>(push((mstate.ebp+-1665)), op(0x37))))
		f0 =  ((__xasm<Number>(push((mstate.ebp+-2256)), op(0x38))))
		__asm(push(f0), push(i7), op(0x3d))
		i7 =  ((__xasm<int>(push((mstate.ebp+-1755)), op(0x37))))
		f0 =  ((__xasm<Number>(push((mstate.ebp+-2264)), op(0x38))))
		__asm(push(f0), push(i7), op(0x3d))
		i7 =  ((__xasm<int>(push((mstate.ebp+-1764)), op(0x37))))
		f0 =  ((__xasm<Number>(push((mstate.ebp+-2176)), op(0x38))))
		__asm(push(f0), push(i7), op(0x3d))
		i7 =  ((__xasm<int>(push((mstate.ebp+-1980)), op(0x37))))
		__asm(push(f6), push(i7), op(0x3d))
		i7 =  ((__xasm<int>(push((mstate.ebp+-1773)), op(0x37))))
		__asm(push(f7), push(i7), op(0x3d))
		i7 =  ((__xasm<int>(push((mstate.ebp+-1782)), op(0x37))))
		f0 =  ((__xasm<Number>(push((mstate.ebp+-2224)), op(0x38))))
		__asm(push(f0), push(i7), op(0x3d))
		i7 =  ((__xasm<int>(push((mstate.ebp+-1791)), op(0x37))))
		f0 =  ((__xasm<Number>(push((mstate.ebp+-2232)), op(0x38))))
		__asm(push(f0), push(i7), op(0x3d))
		i7 =  ((__xasm<int>(push((mstate.ebp+-1809)), op(0x37))))
		f0 =  ((__xasm<Number>(push((mstate.ebp+-2240)), op(0x38))))
		__asm(push(f0), push(i7), op(0x3d))
		i7 =  ((__xasm<int>(push((mstate.ebp+-1899)), op(0x37))))
		f0 =  ((__xasm<Number>(push((mstate.ebp+-2248)), op(0x38))))
		__asm(push(f0), push(i7), op(0x3d))
		i7 =  ((__xasm<int>(push((mstate.ebp+-1908)), op(0x37))))
		f0 =  ((__xasm<Number>(push((mstate.ebp+-2272)), op(0x38))))
		__asm(push(f0), push(i7), op(0x3d))
		i7 =  ((__xasm<int>(push((mstate.ebp+-1935)), op(0x37))))
		f0 =  ((__xasm<Number>(push((mstate.ebp+-2280)), op(0x38))))
		__asm(push(f0), push(i7), op(0x3d))
		i7 =  ((__xasm<int>(push((mstate.ebp+-1944)), op(0x37))))
		f0 =  ((__xasm<Number>(push((mstate.ebp+-2184)), op(0x38))))
		__asm(push(f0), push(i7), op(0x3d))
		f0 = f9
		//InlineAsmStart
	f0 =  Math.cos(f0);

	//InlineAsmEnd
		f10 = f0
		f0 = f9
		//InlineAsmStart
	f0 =  Math.sin(f0);

	//InlineAsmEnd
		f9 = f0
		f0 = f12
		//InlineAsmStart
	f0 =  Math.cos(f0);

	//InlineAsmEnd
		f15 = f0
		f0 = f12
		//InlineAsmStart
	f0 =  Math.sin(f0);

	//InlineAsmEnd
		f12 =  f0/*fextend*/
		f16 =  f7/*fextend*/
		f17 =  f6/*fextend*/
		f18 =  f15/*fextend*/
		f19 =  f9/*fextend*/
		f21 =  f4/*fextend*/
		f22 =  ((__xasm<Number>(push((mstate.ebp+-2296)), op(0x38))))
		f22 =  f22/*fextend*/
		f23 =  f10/*fextend*/
		f24 =  (f19 * f22)
		f25 =  (f12 * f17)
		f26 =  (f16 * f12)
		f16 =  (f18 * f16)
		f17 =  (f18 * f17)
		f18 =  (f21 * f19)
		f21 =  (f23 * f21)
		f22 =  (f23 * f22)
		f23 =  f24/*fround*/
		f24 =  f25/*fround*/
		f25 =  f26/*fround*/
		f16 =  f16/*fround*/
		f17 =  f17/*fround*/
		f18 =  f18/*fround*/
		f21 =  f21/*fround*/
		f22 =  f22/*fround*/
		f21 =  f21/*fextend*/
		f23 =  f23/*fextend*/
		f16 =  f16/*fextend*/
		f24 =  f24/*fextend*/
		f25 =  f25/*fextend*/
		f17 =  f17/*fextend*/
		f18 =  f18/*fextend*/
		f22 =  f22/*fextend*/
		f21 =  (f23 + f21)
		f16 =  (f24 + f16)
		f17 =  (f17 - f25)
		f18 =  (f22 - f18)
		f21 =  f21/*fround*/
		f16 =  f16/*fround*/
		f17 =  f17/*fround*/
		f18 =  f18/*fround*/
		f21 =  f21/*fextend*/
		f13 =  f13/*fextend*/
		f16 =  f16/*fextend*/
		f5 =  f5/*fextend*/
		f17 =  f17/*fextend*/
		f11 =  f11/*fextend*/
		f18 =  f18/*fextend*/
		f20 =  f20/*fextend*/
		f19 =  -f19
		f13 =  (f13 - f21)
		f12 =  -f12
		f5 =  (f5 - f16)
		f11 =  (f11 - f17)
		f16 =  (f20 - f18)
		f17 =  f19/*fround*/
		f13 =  f13/*fround*/
		f12 =  f12/*fround*/
		f5 =  f5/*fround*/
		f11 =  f11/*fround*/
		f16 =  f16/*fround*/
		i6 =  (i6 & 65535)
		__asm(push(i6!=1), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_334_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_321_F"))
		i6 =  (0)
		i7 =  ((__xasm<int>(push((mstate.ebp+-2619)), op(0x37))))
		__asm(push(i6), push(i7), op(0x3c))
		i6 =  ((__xasm<int>(push((mstate.ebp+-2556)), op(0x37))))
		i6 =  ((__xasm<int>(push(i6), op(0x35))))
		i7 =  ((__xasm<int>(push((mstate.ebp+-2601)), op(0x37))))
		i7 =  ((__xasm<int>(push(i7), op(0x37))))
		__asm(push(i6<0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_323_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_322_F"))
		i8 =  ((__xasm<int>(push((i7+20)), op(0x37))))
		__asm(push(i8>i6), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_325_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_323_F"))
		i5 =  (___sF)
		mstate.esp -= 24
		i4 =  (__2E_str1670)
		i0 =  (__2E_str1208)
		i1 =  (__ZZNK11b2LoopShape9GetVertexEiE8__func__)
		i2 =  (__2E_str4211)
		i3 =  (103)
		i5 =  (i5 + 176)
		__asm(push(i5), push(mstate.esp), op(0x3c))
		__asm(push(i4), push((mstate.esp+4)), op(0x3c))
		__asm(push(i0), push((mstate.esp+8)), op(0x3c))
		__asm(push(i1), push((mstate.esp+12)), op(0x3c))
		__asm(push(i2), push((mstate.esp+16)), op(0x3c))
		__asm(push(i3), push((mstate.esp+20)), op(0x3c))
		state = 63
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state63"))
		mstate.esp += 24
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_324_F"))
		state = 64
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state64"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_325_F"))
		i7 =  ((__xasm<int>(push((i7+16)), op(0x37))))
		i6 =  (i6 << 3)
		i6 =  (i7 + i6)
		f18 =  ((__xasm<Number>(push(i6), op(0x38))))
		f19 =  ((__xasm<Number>(push((i6+4)), op(0x38))))
		i6 =  ((__xasm<int>(push((mstate.ebp+-2610)), op(0x37))))
		i6 =  ((__xasm<int>(push(i6), op(0x35))))
		i7 =  ((__xasm<int>(push((mstate.ebp+-2628)), op(0x37))))
		i7 =  ((__xasm<int>(push(i7), op(0x37))))
		__asm(push(i6<0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_327_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_326_F"))
		i8 =  ((__xasm<int>(push((i7+20)), op(0x37))))
		__asm(push(i8>i6), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_329_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_327_F"))
		i5 =  (___sF)
		mstate.esp -= 24
		i4 =  (__2E_str1670)
		i0 =  (__2E_str1208)
		i1 =  (__ZZNK11b2LoopShape9GetVertexEiE8__func__)
		i2 =  (__2E_str4211)
		i3 =  (103)
		i5 =  (i5 + 176)
		__asm(push(i5), push(mstate.esp), op(0x3c))
		__asm(push(i4), push((mstate.esp+4)), op(0x3c))
		__asm(push(i0), push((mstate.esp+8)), op(0x3c))
		__asm(push(i1), push((mstate.esp+12)), op(0x3c))
		__asm(push(i2), push((mstate.esp+16)), op(0x3c))
		__asm(push(i3), push((mstate.esp+20)), op(0x3c))
		state = 65
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state65"))
		mstate.esp += 24
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_328_F"))
		state = 66
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state66"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_329_F"))
		f20 =  (1.19209e-07)
		i7 =  ((__xasm<int>(push((i7+16)), op(0x37))))
		i6 =  (i6 << 3)
		i6 =  (i7 + i6)
		f21 =  ((__xasm<Number>(push(i6), op(0x38))))
		f0 =  f0/*fextend*/
		f15 =  f15/*fextend*/
		f10 =  f10/*fextend*/
		f18 =  f18/*fextend*/
		f9 =  f9/*fextend*/
		f22 =  (f15 * f21)
		f0 =  (f0 * f21)
		f21 =  (f10 * f18)
		f9 =  (f9 * f18)
		f18 =  f22/*fround*/
		f0 =  f0/*fround*/
		f21 =  f21/*fround*/
		f9 =  f9/*fround*/
		f22 =  ((__xasm<Number>(push((i6+4)), op(0x38))))
		f12 =  f12/*fextend*/
		f19 =  f19/*fextend*/
		f17 =  f17/*fextend*/
		f18 =  f18/*fextend*/
		f11 =  f11/*fextend*/
		f0 =  f0/*fextend*/
		f5 =  f5/*fextend*/
		f21 =  f21/*fextend*/
		f16 =  f16/*fextend*/
		f9 =  f9/*fextend*/
		f13 =  f13/*fextend*/
		f11 =  (f11 + f18)
		f0 =  (f5 + f0)
		f5 =  (f22 * f12)
		f12 =  (f15 * f22)
		f15 =  (f16 + f21)
		f10 =  (f10 * f19)
		f9 =  (f13 + f9)
		f13 =  (f19 * f17)
		f11 =  f11/*fround*/
		f0 =  f0/*fround*/
		f5 =  f5/*fround*/
		f12 =  f12/*fround*/
		f15 =  f15/*fround*/
		f10 =  f10/*fround*/
		f9 =  f9/*fround*/
		f13 =  f13/*fround*/
		f5 =  f5/*fextend*/
		f11 =  f11/*fextend*/
		f12 =  f12/*fextend*/
		f0 =  f0/*fextend*/
		f13 =  f13/*fextend*/
		f15 =  f15/*fextend*/
		f10 =  f10/*fextend*/
		f9 =  f9/*fextend*/
		f5 =  (f11 + f5)
		f0 =  (f0 + f12)
		f11 =  (f15 + f13)
		f9 =  (f9 + f10)
		f5 =  f5/*fround*/
		f0 =  f0/*fround*/
		f10 =  f11/*fround*/
		f9 =  f9/*fround*/
		f10 =  f10/*fextend*/
		f5 =  f5/*fextend*/
		f9 =  f9/*fextend*/
		f0 =  f0/*fextend*/
		f5 =  (f5 - f10)
		f0 =  (f0 - f9)
		f5 =  f5/*fround*/
		f0 =  f0/*fround*/
		f9 =  f5/*fextend*/
		f10 =  f0/*fextend*/
		f9 =  (f9 * f9)
		f10 =  (f10 * f10)
		f9 =  f9/*fround*/
		f10 =  f10/*fround*/
		f10 =  f10/*fextend*/
		f9 =  f9/*fextend*/
		f9 =  (f9 + f10)
		f9 =  f9/*fround*/
		f9 =  f9/*fextend*/
		f9 =  Math.sqrt(f9)
		i6 =  ((__xasm<int>(push((mstate.ebp+-2655)), op(0x37))))
		__asm(push(f5), push(i6), op(0x3d))
		i6 =  ((__xasm<int>(push((mstate.ebp+-2646)), op(0x37))))
		__asm(push(f0), push(i6), op(0x3d))
		f9 =  f9/*fround*/
		f10 =  f20/*fround*/
		f10 =  f10/*fextend*/
		f11 =  f9/*fextend*/
		__asm(push(f11>=f10), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_331_F"))
	__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_330_F"), lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_330_B"), label, lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_330_F")); 
		i6 =  (0)
		f0 = f14
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_367_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_331_F"))
		f10 =  (1)
		f10 =  f10/*fround*/
		f9 =  f9/*fextend*/
		f10 =  f10/*fextend*/
		f9 =  (f10 / f9)
		f9 =  f9/*fround*/
		f5 =  f5/*fextend*/
		f9 =  f9/*fextend*/
		f5 =  (f5 * f9)
		f0 =  f0/*fextend*/
		f0 =  (f0 * f9)
		f5 =  f5/*fround*/
		i6 =  ((__xasm<int>(push((mstate.ebp+-2655)), op(0x37))))
		__asm(push(f5), push(i6), op(0x3d))
		f0 =  f0/*fround*/
		i6 =  ((__xasm<int>(push((mstate.ebp+-2646)), op(0x37))))
		__asm(push(f0), push(i6), op(0x3d))
		mstate.esp -= 16
		i6 =  ((mstate.ebp+-536))
		i7 =  ((mstate.ebp+-532))
		i8 =  ((mstate.ebp+-528))
		__asm(push(i8), push(mstate.esp), op(0x3c))
		__asm(push(i7), push((mstate.esp+4)), op(0x3c))
		__asm(push(i6), push((mstate.esp+8)), op(0x3c))
		__asm(push(f14), push((mstate.esp+12)), op(0x3d))
		state = 67
		mstate.esp -= 4;FSM__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state67"))
		f0 = mstate.st0
		mstate.esp += 16
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_332_F"))
		f5 =  f0/*fextend*/
		f9 =  f3/*fextend*/
		__asm(push(f9<f5), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_549_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_333_F"))
		i6 =  (0)
		f5 = f14
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_370_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_334_F"))
		i6 =  ((__xasm<int>(push((mstate.ebp+-2556)), op(0x37))))
		i6 =  ((__xasm<int>(push(i6), op(0x35))))
		i7 =  ((__xasm<int>(push((mstate.ebp+-1953)), op(0x37))))
		i7 =  ((__xasm<int>(push(i7), op(0x35))))
		__asm(push(i6!=i7), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_351_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_335_F"))
		i7 =  (2)
		i8 =  ((__xasm<int>(push((mstate.ebp+-2619)), op(0x37))))
		__asm(push(i7), push(i8), op(0x3c))
		i7 =  ((__xasm<int>(push((mstate.ebp+-2610)), op(0x37))))
		i7 =  ((__xasm<int>(push(i7), op(0x35))))
		__asm(push(i7<0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_337_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_336_F"))
		i8 =  ((__xasm<int>(push((mstate.ebp+-2151)), op(0x37))))
		i8 =  ((__xasm<int>(push(i8), op(0x37))))
		__asm(push(i8>i7), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_339_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_337_F"))
		i5 =  (___sF)
		mstate.esp -= 24
		i4 =  (__2E_str1670)
		i6 =  (__2E_str1208)
		i7 =  (__ZZNK11b2LoopShape9GetVertexEiE8__func__)
		i0 =  (__2E_str4211)
		i1 =  (103)
		i5 =  (i5 + 176)
		__asm(push(i5), push(mstate.esp), op(0x3c))
		__asm(push(i4), push((mstate.esp+4)), op(0x3c))
		__asm(push(i6), push((mstate.esp+8)), op(0x3c))
		__asm(push(i7), push((mstate.esp+12)), op(0x3c))
		__asm(push(i0), push((mstate.esp+16)), op(0x3c))
		__asm(push(i1), push((mstate.esp+20)), op(0x3c))
		state = 68
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state68"))
		mstate.esp += 24
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_338_F"))
		state = 69
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state69"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_339_F"))
		i9 =  ((__xasm<int>(push((mstate.ebp+-2142)), op(0x37))))
		i9 =  ((__xasm<int>(push(i9), op(0x37))))
		i7 =  (i7 << 3)
		i7 =  (i9 + i7)
		f18 =  ((__xasm<Number>(push(i7), op(0x38))))
		f19 =  ((__xasm<Number>(push((i7+4)), op(0x38))))
		i7 =  ((__xasm<int>(push((mstate.ebp+-1962)), op(0x37))))
		i7 =  ((__xasm<int>(push(i7), op(0x35))))
		__asm(push(i8>i7), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_342_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_340_F"))
		i5 =  (___sF)
		mstate.esp -= 24
		i4 =  (__2E_str1670)
		i6 =  (__2E_str1208)
		i7 =  (__ZZNK11b2LoopShape9GetVertexEiE8__func__)
		i0 =  (__2E_str4211)
		i1 =  (103)
		i5 =  (i5 + 176)
		__asm(push(i5), push(mstate.esp), op(0x3c))
		__asm(push(i4), push((mstate.esp+4)), op(0x3c))
		__asm(push(i6), push((mstate.esp+8)), op(0x3c))
		__asm(push(i7), push((mstate.esp+12)), op(0x3c))
		__asm(push(i0), push((mstate.esp+16)), op(0x3c))
		__asm(push(i1), push((mstate.esp+20)), op(0x3c))
		state = 70
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state70"))
		mstate.esp += 24
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_341_F"))
		state = 71
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state71"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_342_F"))
		f20 =  (1.19209e-07)
		i7 =  (i7 << 3)
		i7 =  (i9 + i7)
		f21 =  ((__xasm<Number>(push(i7), op(0x38))))
		f22 =  ((__xasm<Number>(push((i7+4)), op(0x38))))
		f23 =  f21/*fextend*/
		f24 =  f18/*fextend*/
		f25 =  f19/*fextend*/
		f26 =  f22/*fextend*/
		f23 =  (f24 - f23)
		f24 =  (f26 - f25)
		f23 =  f23/*fround*/
		f24 =  f24/*fround*/
		f25 =  f23/*fextend*/
		f26 =  f24/*fextend*/
		f25 =  (f25 * f25)
		f26 =  (f26 * f26)
		f25 =  f25/*fround*/
		f26 =  f26/*fround*/
		f25 =  f25/*fextend*/
		f26 =  f26/*fextend*/
		f25 =  (f26 + f25)
		f25 =  f25/*fround*/
		f25 =  f25/*fextend*/
		f25 =  Math.sqrt(f25)
		i7 =  ((__xasm<int>(push((mstate.ebp+-2655)), op(0x37))))
		__asm(push(f24), push(i7), op(0x3d))
		i7 =  ((__xasm<int>(push((mstate.ebp+-2646)), op(0x37))))
		__asm(push(f23), push(i7), op(0x3d))
		f25 =  f25/*fround*/
		f20 =  f20/*fround*/
		f20 =  f20/*fextend*/
		f26 =  f25/*fextend*/
		__asm(push(f26>=f20), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_344_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_343_F"))
		f25 = f24
		f20 = f23
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_345_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_344_F"))
		f20 =  (1)
		f20 =  f20/*fround*/
		f25 =  f25/*fextend*/
		f20 =  f20/*fextend*/
		f20 =  (f20 / f25)
		f20 =  f20/*fround*/
		f24 =  f24/*fextend*/
		f20 =  f20/*fextend*/
		f24 =  (f24 * f20)
		f23 =  f23/*fextend*/
		f20 =  (f23 * f20)
		f24 =  f24/*fround*/
		i7 =  ((__xasm<int>(push((mstate.ebp+-2655)), op(0x37))))
		__asm(push(f24), push(i7), op(0x3d))
		f23 =  f20/*fround*/
		i7 =  ((__xasm<int>(push((mstate.ebp+-2646)), op(0x37))))
		__asm(push(f23), push(i7), op(0x3d))
		f25 = f24
		f20 = f23
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_345_F"))
		f26 =  (0.5)
		f21 =  f21/*fextend*/
		f18 =  f18/*fextend*/
		f18 =  (f18 + f21)
		f18 =  f18/*fround*/
		f21 =  f26/*fround*/
		f22 =  f22/*fextend*/
		f19 =  f19/*fextend*/
		f21 =  f21/*fextend*/
		f18 =  f18/*fextend*/
		f19 =  (f19 + f22)
		f18 =  (f18 * f21)
		f19 =  f19/*fround*/
		f18 =  f18/*fround*/
		f19 =  f19/*fextend*/
		f0 =  f0/*fextend*/
		f22 =  f18/*fextend*/
		f15 =  f15/*fextend*/
		f26 =  (f0 * f22)
		f22 =  (f15 * f22)
		f19 =  (f19 * f21)
		f21 =  f26/*fround*/
		f22 =  f22/*fround*/
		f19 =  f19/*fround*/
		f24 =  f24/*fextend*/
		f23 =  f23/*fextend*/
		f12 =  f12/*fextend*/
		f26 =  f19/*fextend*/
		f21 =  f21/*fextend*/
		f5 =  f5/*fextend*/
		f22 =  f22/*fextend*/
		f11 =  f11/*fextend*/
		f0 =  (f0 * f24)
		f5 =  (f5 + f21)
		f21 =  (f15 * f24)
		f24 =  (f15 * f23)
		f11 =  (f11 + f22)
		f15 =  (f15 * f26)
		f22 =  (f23 * f12)
		f12 =  (f26 * f12)
		f0 =  f0/*fround*/
		f5 =  f5/*fround*/
		f21 =  f21/*fround*/
		f23 =  f24/*fround*/
		f11 =  f11/*fround*/
		f15 =  f15/*fround*/
		f22 =  f22/*fround*/
		f12 =  f12/*fround*/
		f23 =  f23/*fextend*/
		f0 =  f0/*fextend*/
		f15 =  f15/*fextend*/
		f5 =  f5/*fextend*/
		f22 =  f22/*fextend*/
		f21 =  f21/*fextend*/
		f12 =  f12/*fextend*/
		f11 =  f11/*fextend*/
		f0 =  (f0 + f23)
		f5 =  (f5 + f15)
		f15 =  (f21 + f22)
		f11 =  (f11 + f12)
		i7 =  ((__xasm<int>(push((mstate.ebp+-2547)), op(0x37))))
		__asm(push(f18), push(i7), op(0x3d))
		i7 =  ((__xasm<int>(push((mstate.ebp+-2538)), op(0x37))))
		__asm(push(f19), push(i7), op(0x3d))
		f0 =  f0/*fround*/
		f5 =  f5/*fround*/
		f12 =  f15/*fround*/
		f11 =  f11/*fround*/
		i6 =  (i6 & 255)
		__asm(push(i6<0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_347_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_346_F"))
		i7 =  ((__xasm<int>(push((mstate.ebp+-2511)), op(0x37))))
		i7 =  ((__xasm<int>(push(i7), op(0x37))))
		__asm(push(i7>i6), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_349_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_347_F"))
		i5 =  (___sF)
		mstate.esp -= 24
		i6 =  (__2E_str1670)
		i4 =  (__2E_str1208)
		i0 =  (__ZZNK11b2LoopShape9GetVertexEiE8__func__)
		i1 =  (__2E_str4211)
		i2 =  (103)
		i5 =  (i5 + 176)
		__asm(push(i5), push(mstate.esp), op(0x3c))
		__asm(push(i6), push((mstate.esp+4)), op(0x3c))
		__asm(push(i4), push((mstate.esp+8)), op(0x3c))
		__asm(push(i0), push((mstate.esp+12)), op(0x3c))
		__asm(push(i1), push((mstate.esp+16)), op(0x3c))
		__asm(push(i2), push((mstate.esp+20)), op(0x3c))
		state = 72
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state72"))
		mstate.esp += 24
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_348_F"))
		state = 73
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state73"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_349_F"))
		f15 =  (0)
		i7 =  ((__xasm<int>(push((mstate.ebp+-2520)), op(0x37))))
		i7 =  ((__xasm<int>(push(i7), op(0x37))))
		i6 =  (i6 << 3)
		i6 =  (i7 + i6)
		f18 =  ((__xasm<Number>(push(i6), op(0x38))))
		f9 =  f9/*fextend*/
		f10 =  f10/*fextend*/
		f19 =  (f10 * f18)
		f9 =  (f9 * f18)
		f18 =  f19/*fround*/
		f9 =  f9/*fround*/
		f19 =  ((__xasm<Number>(push((i6+4)), op(0x38))))
		f17 =  f17/*fextend*/
		f18 =  f18/*fextend*/
		f16 =  f16/*fextend*/
		f9 =  f9/*fextend*/
		f13 =  f13/*fextend*/
		f16 =  (f16 + f18)
		f9 =  (f13 + f9)
		f13 =  (f19 * f17)
		f10 =  (f10 * f19)
		f16 =  f16/*fround*/
		f9 =  f9/*fround*/
		f13 =  f13/*fround*/
		f10 =  f10/*fround*/
		f13 =  f13/*fextend*/
		f16 =  f16/*fextend*/
		f10 =  f10/*fextend*/
		f9 =  f9/*fextend*/
		f13 =  (f16 + f13)
		f9 =  (f9 + f10)
		f10 =  f13/*fround*/
		f9 =  f9/*fround*/
		f11 =  f11/*fextend*/
		f10 =  f10/*fextend*/
		f5 =  f5/*fextend*/
		f9 =  f9/*fextend*/
		f10 =  (f10 - f11)
		f5 =  (f9 - f5)
		f9 =  f10/*fround*/
		f5 =  f5/*fround*/
		f10 =  f12/*fextend*/
		f9 =  f9/*fextend*/
		f0 =  f0/*fextend*/
		f5 =  f5/*fextend*/
		f9 =  (f9 * f10)
		f0 =  (f5 * f0)
		f5 =  f9/*fround*/
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f5 =  f5/*fextend*/
		f0 =  (f5 + f0)
		f0 =  f0/*fround*/
		f5 =  f15/*fround*/
		f5 =  f5/*fextend*/
		f0 =  f0/*fextend*/
		__asm(push(f0>=f5), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_330_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_350_F"))
		i6 =  (0)
		f0 =  f25/*fextend*/
		f5 =  f20/*fextend*/
		f0 =  -f0
		f5 =  -f5
		f0 =  f0/*fround*/
		i7 =  ((__xasm<int>(push((mstate.ebp+-2655)), op(0x37))))
		__asm(push(f0), push(i7), op(0x3d))
		f0 =  f5/*fround*/
		i7 =  ((__xasm<int>(push((mstate.ebp+-2646)), op(0x37))))
		__asm(push(f0), push(i7), op(0x3d))
		f0 = f14
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_367_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_351_F"))
		i8 =  (1)
		i9 =  ((__xasm<int>(push((mstate.ebp+-2619)), op(0x37))))
		__asm(push(i8), push(i9), op(0x3c))
		i8 =  ((__xasm<int>(push((mstate.ebp+-2601)), op(0x37))))
		i8 =  ((__xasm<int>(push(i8), op(0x37))))
		i6 =  (i6 & 255)
		__asm(push(i6<0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_353_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_352_F"))
		i9 =  ((__xasm<int>(push((i8+20)), op(0x37))))
		__asm(push(i9>i6), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_355_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_353_F"))
		i5 =  (___sF)
		mstate.esp -= 24
		i4 =  (__2E_str1670)
		i6 =  (__2E_str1208)
		i0 =  (__ZZNK11b2LoopShape9GetVertexEiE8__func__)
		i1 =  (__2E_str4211)
		i2 =  (103)
		i5 =  (i5 + 176)
		__asm(push(i5), push(mstate.esp), op(0x3c))
		__asm(push(i4), push((mstate.esp+4)), op(0x3c))
		__asm(push(i6), push((mstate.esp+8)), op(0x3c))
		__asm(push(i0), push((mstate.esp+12)), op(0x3c))
		__asm(push(i1), push((mstate.esp+16)), op(0x3c))
		__asm(push(i2), push((mstate.esp+20)), op(0x3c))
		state = 74
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state74"))
		mstate.esp += 24
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_354_F"))
		state = 75
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state75"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_355_F"))
		i8 =  ((__xasm<int>(push((i8+16)), op(0x37))))
		i6 =  (i6 << 3)
		i6 =  (i8 + i6)
		f18 =  ((__xasm<Number>(push(i6), op(0x38))))
		f19 =  ((__xasm<Number>(push((i6+4)), op(0x38))))
		i6 =  (i7 & 255)
		__asm(push(i9>i6), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_358_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_356_F"))
		i5 =  (___sF)
		mstate.esp -= 24
		i4 =  (__2E_str1670)
		i6 =  (__2E_str1208)
		i0 =  (__ZZNK11b2LoopShape9GetVertexEiE8__func__)
		i1 =  (__2E_str4211)
		i2 =  (103)
		i5 =  (i5 + 176)
		__asm(push(i5), push(mstate.esp), op(0x3c))
		__asm(push(i4), push((mstate.esp+4)), op(0x3c))
		__asm(push(i6), push((mstate.esp+8)), op(0x3c))
		__asm(push(i0), push((mstate.esp+12)), op(0x3c))
		__asm(push(i1), push((mstate.esp+16)), op(0x3c))
		__asm(push(i2), push((mstate.esp+20)), op(0x3c))
		state = 76
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state76"))
		mstate.esp += 24
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_357_F"))
		state = 77
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state77"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_358_F"))
		f20 =  (1.19209e-07)
		i6 =  (i6 << 3)
		i6 =  (i8 + i6)
		f21 =  ((__xasm<Number>(push(i6), op(0x38))))
		f22 =  ((__xasm<Number>(push((i6+4)), op(0x38))))
		f23 =  f21/*fextend*/
		f24 =  f18/*fextend*/
		f25 =  f19/*fextend*/
		f26 =  f22/*fextend*/
		f23 =  (f24 - f23)
		f24 =  (f26 - f25)
		f23 =  f23/*fround*/
		f24 =  f24/*fround*/
		f25 =  f23/*fextend*/
		f26 =  f24/*fextend*/
		f25 =  (f25 * f25)
		f26 =  (f26 * f26)
		f25 =  f25/*fround*/
		f26 =  f26/*fround*/
		f25 =  f25/*fextend*/
		f26 =  f26/*fextend*/
		f25 =  (f26 + f25)
		f25 =  f25/*fround*/
		f25 =  f25/*fextend*/
		f25 =  Math.sqrt(f25)
		i6 =  ((__xasm<int>(push((mstate.ebp+-2655)), op(0x37))))
		__asm(push(f24), push(i6), op(0x3d))
		i6 =  ((__xasm<int>(push((mstate.ebp+-2646)), op(0x37))))
		__asm(push(f23), push(i6), op(0x3d))
		f25 =  f25/*fround*/
		f20 =  f20/*fround*/
		f20 =  f20/*fextend*/
		f26 =  f25/*fextend*/
		__asm(push(f26>=f20), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_360_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_359_F"))
		f25 = f24
		f20 = f23
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_361_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_360_F"))
		f20 =  (1)
		f20 =  f20/*fround*/
		f25 =  f25/*fextend*/
		f20 =  f20/*fextend*/
		f20 =  (f20 / f25)
		f20 =  f20/*fround*/
		f24 =  f24/*fextend*/
		f20 =  f20/*fextend*/
		f24 =  (f24 * f20)
		f23 =  f23/*fextend*/
		f20 =  (f23 * f20)
		f24 =  f24/*fround*/
		i6 =  ((__xasm<int>(push((mstate.ebp+-2655)), op(0x37))))
		__asm(push(f24), push(i6), op(0x3d))
		f23 =  f20/*fround*/
		i6 =  ((__xasm<int>(push((mstate.ebp+-2646)), op(0x37))))
		__asm(push(f23), push(i6), op(0x3d))
		f25 = f24
		f20 = f23
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_361_F"))
		f26 =  (0.5)
		f21 =  f21/*fextend*/
		f18 =  f18/*fextend*/
		f18 =  (f18 + f21)
		f18 =  f18/*fround*/
		f21 =  f26/*fround*/
		f22 =  f22/*fextend*/
		f19 =  f19/*fextend*/
		f21 =  f21/*fextend*/
		f18 =  f18/*fextend*/
		f19 =  (f19 + f22)
		f18 =  (f18 * f21)
		f19 =  f19/*fround*/
		f18 =  f18/*fround*/
		f19 =  f19/*fextend*/
		f9 =  f9/*fextend*/
		f22 =  f18/*fextend*/
		f10 =  f10/*fextend*/
		f26 =  (f9 * f22)
		f22 =  (f10 * f22)
		f19 =  (f19 * f21)
		f21 =  f26/*fround*/
		f22 =  f22/*fround*/
		f19 =  f19/*fround*/
		f24 =  f24/*fextend*/
		f23 =  f23/*fextend*/
		f17 =  f17/*fextend*/
		f26 =  f19/*fextend*/
		f21 =  f21/*fextend*/
		f13 =  f13/*fextend*/
		f22 =  f22/*fextend*/
		f16 =  f16/*fextend*/
		f9 =  (f9 * f24)
		f13 =  (f13 + f21)
		f21 =  (f10 * f24)
		f24 =  (f10 * f23)
		f16 =  (f16 + f22)
		f10 =  (f10 * f26)
		f22 =  (f23 * f17)
		f17 =  (f26 * f17)
		f9 =  f9/*fround*/
		f13 =  f13/*fround*/
		f21 =  f21/*fround*/
		f23 =  f24/*fround*/
		f16 =  f16/*fround*/
		f10 =  f10/*fround*/
		f22 =  f22/*fround*/
		f17 =  f17/*fround*/
		i6 =  ((__xasm<int>(push((mstate.ebp+-2547)), op(0x37))))
		__asm(push(f18), push(i6), op(0x3d))
		i6 =  ((__xasm<int>(push((mstate.ebp+-2538)), op(0x37))))
		__asm(push(f19), push(i6), op(0x3d))
		f18 =  f23/*fextend*/
		f9 =  f9/*fextend*/
		f10 =  f10/*fextend*/
		f13 =  f13/*fextend*/
		f19 =  f22/*fextend*/
		f21 =  f21/*fextend*/
		f17 =  f17/*fextend*/
		f16 =  f16/*fextend*/
		f9 =  (f9 + f18)
		f10 =  (f13 + f10)
		f13 =  (f21 + f19)
		f16 =  (f16 + f17)
		i6 =  ((__xasm<int>(push((mstate.ebp+-2610)), op(0x37))))
		i6 =  ((__xasm<int>(push(i6), op(0x35))))
		i7 =  ((__xasm<int>(push((mstate.ebp+-2628)), op(0x37))))
		i7 =  ((__xasm<int>(push(i7), op(0x37))))
		f9 =  f9/*fround*/
		f10 =  f10/*fround*/
		f13 =  f13/*fround*/
		f16 =  f16/*fround*/
		__asm(push(i6<0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_363_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_362_F"))
		i8 =  ((__xasm<int>(push((i7+20)), op(0x37))))
		__asm(push(i8>i6), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_365_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_363_F"))
		i5 =  (___sF)
		mstate.esp -= 24
		i4 =  (__2E_str1670)
		i6 =  (__2E_str1208)
		i0 =  (__ZZNK11b2LoopShape9GetVertexEiE8__func__)
		i1 =  (__2E_str4211)
		i2 =  (103)
		i5 =  (i5 + 176)
		__asm(push(i5), push(mstate.esp), op(0x3c))
		__asm(push(i4), push((mstate.esp+4)), op(0x3c))
		__asm(push(i6), push((mstate.esp+8)), op(0x3c))
		__asm(push(i0), push((mstate.esp+12)), op(0x3c))
		__asm(push(i1), push((mstate.esp+16)), op(0x3c))
		__asm(push(i2), push((mstate.esp+20)), op(0x3c))
		state = 78
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state78"))
		mstate.esp += 24
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_364_F"))
		state = 79
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state79"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_365_F"))
		f17 =  (0)
		i7 =  ((__xasm<int>(push((i7+16)), op(0x37))))
		i6 =  (i6 << 3)
		i6 =  (i7 + i6)
		f18 =  ((__xasm<Number>(push(i6), op(0x38))))
		f0 =  f0/*fextend*/
		f15 =  f15/*fextend*/
		f19 =  (f15 * f18)
		f0 =  (f0 * f18)
		f18 =  f19/*fround*/
		f0 =  f0/*fround*/
		f19 =  ((__xasm<Number>(push((i6+4)), op(0x38))))
		f12 =  f12/*fextend*/
		f18 =  f18/*fextend*/
		f11 =  f11/*fextend*/
		f0 =  f0/*fextend*/
		f5 =  f5/*fextend*/
		f11 =  (f11 + f18)
		f0 =  (f5 + f0)
		f5 =  (f19 * f12)
		f12 =  (f15 * f19)
		f11 =  f11/*fround*/
		f0 =  f0/*fround*/
		f5 =  f5/*fround*/
		f12 =  f12/*fround*/
		f5 =  f5/*fextend*/
		f11 =  f11/*fextend*/
		f12 =  f12/*fextend*/
		f0 =  f0/*fextend*/
		f5 =  (f11 + f5)
		f0 =  (f0 + f12)
		f5 =  f5/*fround*/
		f0 =  f0/*fround*/
		f11 =  f16/*fextend*/
		f5 =  f5/*fextend*/
		f10 =  f10/*fextend*/
		f0 =  f0/*fextend*/
		f5 =  (f5 - f11)
		f0 =  (f0 - f10)
		f5 =  f5/*fround*/
		f0 =  f0/*fround*/
		f10 =  f13/*fextend*/
		f5 =  f5/*fextend*/
		f9 =  f9/*fextend*/
		f0 =  f0/*fextend*/
		f5 =  (f5 * f10)
		f0 =  (f0 * f9)
		f5 =  f5/*fround*/
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f5 =  f5/*fextend*/
		f0 =  (f5 + f0)
		f0 =  f0/*fround*/
		f5 =  f17/*fround*/
		f5 =  f5/*fextend*/
		f0 =  f0/*fextend*/
		__asm(push(f0>=f5), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_330_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_366_F"))
		i6 =  (0)
		f0 =  f25/*fextend*/
		f5 =  f20/*fextend*/
		f0 =  -f0
		f5 =  -f5
		f0 =  f0/*fround*/
		i7 =  ((__xasm<int>(push((mstate.ebp+-2655)), op(0x37))))
		__asm(push(f0), push(i7), op(0x3d))
		f0 =  f5/*fround*/
		i7 =  ((__xasm<int>(push((mstate.ebp+-2646)), op(0x37))))
		__asm(push(f0), push(i7), op(0x3d))
		f0 = f14
	__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_367_F"), lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_367_B"), label, lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_367_F")); 
		i7 =  ((mstate.ebp+-536))
		mstate.esp -= 16
		i8 =  ((mstate.ebp+-532))
		i9 =  ((mstate.ebp+-528))
		__asm(push(i9), push(mstate.esp), op(0x3c))
		__asm(push(i8), push((mstate.esp+4)), op(0x3c))
		__asm(push(i7), push((mstate.esp+8)), op(0x3c))
		__asm(push(f0), push((mstate.esp+12)), op(0x3d))
		state = 80
		mstate.esp -= 4;FSM__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state80"))
		f9 = mstate.st0
		mstate.esp += 16
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_368_F"))
		f5 =  f9/*fextend*/
		f10 =  f3/*fextend*/
		__asm(push(f10<f5), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_549_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_369_F"))
		f5 = f0
		f0 = f9
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_370_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_370_F"))
		f9 =  f0/*fextend*/
		f10 =  ((__xasm<Number>(push((mstate.ebp+-2288)), op(0x38))))
		f10 =  f10/*fextend*/
		__asm(push(f10>=f9), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_372_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_371_F"))
		f0 = f5
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_392_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_372_F"))
		i7 =  ((mstate.ebp+-528))
		i8 =  ((__xasm<int>(push((mstate.ebp+-536)), op(0x37))))
		i9 =  ((__xasm<int>(push((mstate.ebp+-532)), op(0x37))))
		mstate.esp -= 16
		__asm(push(i7), push(mstate.esp), op(0x3c))
		__asm(push(i9), push((mstate.esp+4)), op(0x3c))
		__asm(push(i8), push((mstate.esp+8)), op(0x3c))
		__asm(push(f1), push((mstate.esp+12)), op(0x3d))
		state = 81
		mstate.esp -= 4;FSM__ZNK20b2SeparationFunction8EvaluateEiif.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state81"))
		f9 = mstate.st0
		mstate.esp += 16
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_373_F"))
		f10 =  f9/*fextend*/
		f11 =  ((__xasm<Number>(push((mstate.ebp+-2288)), op(0x38))))
		f11 =  f11/*fextend*/
		__asm(push(f11<=f10), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_375_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_374_F"))
		i6 =  (1)
		i7 =  ((__xasm<int>(push(_b2_toiIters), op(0x37))))
		i7 =  (i7 + 1)
		__asm(push(i7), push(_b2_toiIters), op(0x3c))
		i5 =  (i5 + 1)
		f0 = f1
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_395_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_375_F"))
		f10 =  f9/*fextend*/
		f11 =  f3/*fextend*/
		__asm(push(f11>=f10), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_550_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_376_F"))
		i7 =  (0)
		f10 = f1
		f11 = f5
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_377_F"))
	__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_377_F"), lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_377_B"), label, lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_377_F")); 
		i8 =  (i7 & 1)
		__asm(push(i8==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_379_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_378_F"))
		f12 =  f2/*fextend*/
		f13 =  f9/*fextend*/
		f15 =  f10/*fextend*/
		f16 =  f11/*fextend*/
		f12 =  (f12 - f13)
		f16 =  (f16 - f15)
		f12 =  f12/*fround*/
		f16 =  f16/*fround*/
		f17 =  f0/*fextend*/
		f16 =  f16/*fextend*/
		f12 =  f12/*fextend*/
		f12 =  (f12 * f16)
		f13 =  (f17 - f13)
		f12 =  f12/*fround*/
		f13 =  f13/*fround*/
		f13 =  f13/*fextend*/
		f12 =  f12/*fextend*/
		f12 =  (f12 / f13)
		f12 =  f12/*fround*/
		f12 =  f12/*fextend*/
		f12 =  (f12 + f15)
		f12 =  f12/*fround*/
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_380_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_379_F"))
		f12 =  (0.5)
		f13 =  f11/*fextend*/
		f15 =  f10/*fextend*/
		f13 =  (f15 + f13)
		f13 =  f13/*fround*/
		f12 =  f12/*fround*/
		f12 =  f12/*fextend*/
		f13 =  f13/*fextend*/
		f12 =  (f13 * f12)
		f12 =  f12/*fround*/
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_380_F"))
		i8 =  ((mstate.ebp+-528))
		i9 =  ((__xasm<int>(push((mstate.ebp+-536)), op(0x37))))
		i10 =  ((__xasm<int>(push((mstate.ebp+-532)), op(0x37))))
		mstate.esp -= 16
		__asm(push(i8), push(mstate.esp), op(0x3c))
		__asm(push(i10), push((mstate.esp+4)), op(0x3c))
		__asm(push(i9), push((mstate.esp+8)), op(0x3c))
		__asm(push(f12), push((mstate.esp+12)), op(0x3d))
		state = 82
		mstate.esp -= 4;FSM__ZNK20b2SeparationFunction8EvaluateEiif.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state82"))
		f13 = mstate.st0
		mstate.esp += 16
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_381_F"))
		f15 =  (0)
		f16 =  f13/*fextend*/
		f17 =  f2/*fextend*/
		f18 =  (f16 - f17)
		f16 =  (f17 - f16)
		f17 =  f18/*fround*/
		f16 =  f16/*fround*/
		f15 =  f15/*fround*/
		f16 =  f16/*fextend*/
		f15 =  f15/*fextend*/
		f17 =  f17/*fextend*/
		f15 =  ((f17<=f15) ? f16 : f17)
		f15 =  f15/*fround*/
		f16 =  f8/*fextend*/
		f15 =  f15/*fextend*/
		__asm(push(f15>=f16), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_383_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_382_F"))
		f0 = f12
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_389_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_383_F"))
		f15 =  f2/*fextend*/
		f16 =  f13/*fextend*/
		__asm(push(f16<=f15), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_385_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_384_F"))
		f9 = f13
		f10 = f12
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_386_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_385_F"))
		f0 = f13
		f11 = f12
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_386_F"))
		i8 =  ((__xasm<int>(push(_b2_toiRootIters), op(0x37))))
		i8 =  (i8 + 1)
		__asm(push(i8), push(_b2_toiRootIters), op(0x3c))
		i7 =  (i7 + 1)
		__asm(push(i7==50), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_388_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_387_F"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_377_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_388_F"))
		f0 = f5
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_389_F"))
		i8 =  ((__xasm<int>(push(_b2_toiMaxRootIters), op(0x37))))
		i7 =  ((i8>i7) ? i8 : i7)
		__asm(push(i7), push(_b2_toiMaxRootIters), op(0x3c))
		i6 =  (i6 + 1)
		__asm(push(i6==8), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_391_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_390_F"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_367_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_391_F"))
		f0 = f1
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_392_F"))
		i6 =  ((__xasm<int>(push(_b2_toiIters), op(0x37))))
		i6 =  (i6 + 1)
		__asm(push(i6), push(_b2_toiIters), op(0x3c))
		i5 =  (i5 + 1)
		__asm(push(i5==20), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_394_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_393_F"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_312_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_394_F"))
		i6 =  (1)
	__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_395_F"), lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_395_B"), label, lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_395_F")); 
		i7 =  ((__xasm<int>(push(_b2_toiMaxIters), op(0x37))))
		i5 =  ((i7>i5) ? i7 : i5)
		__asm(push(i5), push(_b2_toiMaxIters), op(0x3c))
		i5 = i6
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_396_F"))
		__asm(push(i5!=3), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_399_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_397_F"))
		f1 =  (1)
		f1 =  f1/*fround*/
		f2 =  ((__xasm<Number>(push((mstate.ebp+-2160)), op(0x38))))
		f2 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		f3 =  (f1 - f2)
		f3 =  f3/*fround*/
		f0 =  f0/*fextend*/
		f3 =  f3/*fextend*/
		f0 =  (f3 * f0)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f0 =  (f0 + f2)
		f0 =  f0/*fround*/
		f2 =  f0/*fextend*/
		__asm(push(f2>=f1), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_399_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_398_F"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_400_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_399_F"))
		f0 =  (1)
		f0 =  f0/*fround*/
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_400_F"))
		__asm(push(f0), push((i4+140)), op(0x3d))
		i5 =  ((__xasm<int>(push((mstate.ebp+-2043)), op(0x37))))
		i5 =  ((__xasm<int>(push(i5), op(0x37))))
		i5 =  (i5 | 32)
		i6 =  ((__xasm<int>(push((mstate.ebp+-2043)), op(0x37))))
		__asm(push(i5), push(i6), op(0x3c))
		f1 =  ((__xasm<Number>(push((mstate.ebp+-2168)), op(0x38))))
		f1 =  f1/*fextend*/
		f2 =  f0/*fextend*/
		__asm(push(f2>=f1), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_275_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_401_F"))
		i5 = i4
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_402_F"))
		i4 =  ((__xasm<int>(push((i4+12)), op(0x37))))
		__asm(push(i4==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_551_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_403_F"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_404_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_404_F"))
		__asm(push(i5), push((mstate.ebp+-2052)), op(0x3c))
		__asm(push(f0), push((mstate.ebp+-2168)), op(0x3d))
		i5 =  ((__xasm<int>(push((i4+4)), op(0x37))))
		i6 =  (i4 + 4)
		__asm(push(i6), push((mstate.ebp+-2043)), op(0x3c))
		i6 =  (i5 & 4)
		__asm(push(i6==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_275_B"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_274_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_405_F"))
		f0 =  (1)
		f0 =  f0/*fround*/
		i4 =  (0)
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_406_F"))
	__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_406_F"), lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_406_B"), label, lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_406_F")); 
		f1 = f0
		__asm(push(i4==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_408_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_407_F"))
		f0 =  (0.999999)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f2 =  f1/*fextend*/
		__asm(push(f2<=f0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_409_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_408_F"))
		i0 =  (1)
		i1 =  ((__xasm<int>(push((mstate.ebp+-810)), op(0x37))))
		__asm(push(i0), push(i1), op(0x3a))
		mstate.esp -= 4
		i0 =  ((mstate.ebp+-592))
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 83
		mstate.esp -= 4;FSM__ZN8b2IslandD1Ev.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state83"))
		mstate.esp += 4
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_537_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_409_F"))
		f0 =  (1)
		i5 =  ((__xasm<int>(push((i4+48)), op(0x37))))
		i6 =  ((__xasm<int>(push((i4+52)), op(0x37))))
		i5 =  ((__xasm<int>(push((i5+12)), op(0x37))))
		__asm(push(i5), push((mstate.ebp+-2565)), op(0x3c))
		i5 =  ((__xasm<int>(push((i6+12)), op(0x37))))
		i6 =  ((__xasm<int>(push((mstate.ebp+-2565)), op(0x37))))
		f2 =  ((__xasm<Number>(push((i6+68)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i6+36)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i6+40)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i6+44)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i6+48)), op(0x38))))
		f7 =  ((__xasm<Number>(push((i6+52)), op(0x38))))
		f8 =  ((__xasm<Number>(push((i6+56)), op(0x38))))
		f9 =  ((__xasm<Number>(push((i6+60)), op(0x38))))
		f10 =  ((__xasm<Number>(push((i6+64)), op(0x38))))
		f11 =  ((__xasm<Number>(push((i5+36)), op(0x38))))
		f12 =  ((__xasm<Number>(push((i5+40)), op(0x38))))
		f13 =  ((__xasm<Number>(push((i5+44)), op(0x38))))
		f14 =  ((__xasm<Number>(push((i5+48)), op(0x38))))
		f15 =  ((__xasm<Number>(push((i5+52)), op(0x38))))
		f16 =  ((__xasm<Number>(push((i5+56)), op(0x38))))
		f17 =  ((__xasm<Number>(push((i5+60)), op(0x38))))
		f18 =  ((__xasm<Number>(push((i5+64)), op(0x38))))
		f19 =  ((__xasm<Number>(push((i5+68)), op(0x38))))
		i6 =  (i6 + 40)
		__asm(push(i6), push((mstate.ebp+-2376)), op(0x3c))
		i6 =  ((__xasm<int>(push((mstate.ebp+-2565)), op(0x37))))
		i6 =  (i6 + 44)
		__asm(push(i6), push((mstate.ebp+-2304)), op(0x3c))
		i6 =  ((__xasm<int>(push((mstate.ebp+-2565)), op(0x37))))
		i6 =  (i6 + 48)
		__asm(push(i6), push((mstate.ebp+-2313)), op(0x3c))
		i6 =  ((__xasm<int>(push((mstate.ebp+-2565)), op(0x37))))
		i6 =  (i6 + 52)
		__asm(push(i6), push((mstate.ebp+-2367)), op(0x3c))
		i6 =  ((__xasm<int>(push((mstate.ebp+-2565)), op(0x37))))
		i6 =  (i6 + 56)
		__asm(push(i6), push((mstate.ebp+-2349)), op(0x3c))
		i6 =  ((__xasm<int>(push((mstate.ebp+-2565)), op(0x37))))
		i6 =  (i6 + 60)
		__asm(push(i6), push((mstate.ebp+-2322)), op(0x3c))
		i6 =  ((__xasm<int>(push((mstate.ebp+-2565)), op(0x37))))
		i6 =  (i6 + 64)
		__asm(push(i6), push((mstate.ebp+-2466)), op(0x3c))
		i6 =  ((__xasm<int>(push((mstate.ebp+-2565)), op(0x37))))
		i6 =  (i6 + 68)
		__asm(push(i6), push((mstate.ebp+-2331)), op(0x3c))
		i6 =  (i5 + 40)
		__asm(push(i6), push((mstate.ebp+-2340)), op(0x3c))
		i6 =  (i5 + 44)
		__asm(push(i6), push((mstate.ebp+-2475)), op(0x3c))
		i6 =  (i5 + 48)
		__asm(push(i6), push((mstate.ebp+-2484)), op(0x3c))
		i6 =  (i5 + 52)
		__asm(push(i6), push((mstate.ebp+-2448)), op(0x3c))
		i6 =  (i5 + 56)
		__asm(push(i6), push((mstate.ebp+-2439)), op(0x3c))
		i6 =  (i5 + 60)
		__asm(push(i6), push((mstate.ebp+-2493)), op(0x3c))
		i6 =  (i5 + 64)
		i7 =  (i5 + 68)
		__asm(push(i7), push((mstate.ebp+-2502)), op(0x3c))
		i7 =  (i5 + 36)
		__asm(push(i7), push((mstate.ebp+-2358)), op(0x3c))
		i7 =  ((__xasm<int>(push((mstate.ebp+-2565)), op(0x37))))
		i7 =  (i7 + 36)
		__asm(push(i7), push((mstate.ebp+-2457)), op(0x3c))
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f20 =  f2/*fextend*/
		__asm(push(f20<f0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_412_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_410_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str48255)
		i3 =  (__ZZN7b2Sweep7AdvanceEfE8__func__)
		i4 =  (__2E_str47254)
		i5 =  (624)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 84
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state84"))
		mstate.esp += 24
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_411_F"))
		state = 85
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state85"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_412_F"))
		f0 =  (1)
		f0 =  f0/*fround*/
		f20 =  f1/*fextend*/
		f21 =  f2/*fextend*/
		f22 =  f0/*fextend*/
		f0 =  (f20 - f21)
		f20 =  (f22 - f21)
		f0 =  f0/*fround*/
		f20 =  f20/*fround*/
		f20 =  f20/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 / f20)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f20 =  (f22 - f0)
		f20 =  f20/*fround*/
		f21 =  f7/*fextend*/
		f23 =  f5/*fextend*/
		f20 =  f20/*fextend*/
		f24 =  f8/*fextend*/
		f21 =  (f21 * f0)
		f25 =  f6/*fextend*/
		f23 =  (f23 * f20)
		f24 =  (f24 * f0)
		f21 =  f21/*fround*/
		f25 =  (f25 * f20)
		f23 =  f23/*fround*/
		f26 =  f9/*fextend*/
		f27 =  f10/*fextend*/
		f24 =  f24/*fround*/
		f25 =  f25/*fround*/
		f20 =  (f20 * f26)
		f0 =  (f27 * f0)
		f21 =  f21/*fextend*/
		f23 =  f23/*fextend*/
		f21 =  (f23 + f21)
		f20 =  f20/*fround*/
		f0 =  f0/*fround*/
		f23 =  f24/*fextend*/
		f24 =  f25/*fextend*/
		f23 =  (f24 + f23)
		f21 =  f21/*fround*/
		f0 =  f0/*fextend*/
		f20 =  f20/*fextend*/
		f23 =  f23/*fround*/
		f0 =  (f20 + f0)
		i7 =  ((__xasm<int>(push((mstate.ebp+-2304)), op(0x37))))
		__asm(push(f21), push(i7), op(0x3d))
		i7 =  ((__xasm<int>(push((mstate.ebp+-2313)), op(0x37))))
		__asm(push(f23), push(i7), op(0x3d))
		f20 =  f0/*fround*/
		i7 =  ((__xasm<int>(push((mstate.ebp+-2322)), op(0x37))))
		__asm(push(f20), push(i7), op(0x3d))
		i7 =  ((__xasm<int>(push((mstate.ebp+-2331)), op(0x37))))
		__asm(push(f1), push(i7), op(0x3d))
		i7 =  ((__xasm<int>(push((mstate.ebp+-2367)), op(0x37))))
		__asm(push(f21), push(i7), op(0x3d))
		i7 =  ((__xasm<int>(push((mstate.ebp+-2349)), op(0x37))))
		__asm(push(f23), push(i7), op(0x3d))
		i7 =  ((__xasm<int>(push((mstate.ebp+-2466)), op(0x37))))
		__asm(push(f20), push(i7), op(0x3d))
		f0 = f20
		//InlineAsmStart
	f0 =  Math.cos(f0);

	//InlineAsmEnd
		f24 = f0
		f0 = f20
		//InlineAsmStart
	f0 =  Math.sin(f0);

	//InlineAsmEnd
		f20 =  f0/*fextend*/
		f25 =  -f20
		i7 =  ((__xasm<int>(push((mstate.ebp+-2565)), op(0x37))))
		__asm(push(f24), push((i7+20)), op(0x3d))
		f25 =  f25/*fround*/
		__asm(push(f25), push((i7+28)), op(0x3d))
		__asm(push(f0), push((i7+24)), op(0x3d))
		__asm(push(f24), push((i7+32)), op(0x3d))
		i7 =  ((__xasm<int>(push((mstate.ebp+-2457)), op(0x37))))
		f0 =  ((__xasm<Number>(push(i7), op(0x38))))
		i7 =  ((__xasm<int>(push((mstate.ebp+-2376)), op(0x37))))
		f25 =  ((__xasm<Number>(push(i7), op(0x38))))
		f24 =  f24/*fextend*/
		f26 =  (f24 * f0)
		f27 =  (f25 * f20)
		f0 =  (f20 * f0)
		f20 =  f26/*fround*/
		f24 =  (f24 * f25)
		f25 =  f27/*fround*/
		f0 =  f0/*fround*/
		f24 =  f24/*fround*/
		f25 =  f25/*fextend*/
		f20 =  f20/*fextend*/
		f20 =  (f20 - f25)
		f24 =  f24/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 + f24)
		f20 =  f20/*fround*/
		f0 =  f0/*fround*/
		f20 =  f20/*fextend*/
		f21 =  f21/*fextend*/
		f20 =  (f21 - f20)
		f0 =  f0/*fextend*/
		f21 =  f23/*fextend*/
		f0 =  (f21 - f0)
		f20 =  f20/*fround*/
		i7 =  ((__xasm<int>(push((mstate.ebp+-2565)), op(0x37))))
		__asm(push(f20), push((i7+12)), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push((i7+16)), op(0x3d))
		i7 =  ((__xasm<int>(push((mstate.ebp+-2502)), op(0x37))))
		f0 =  ((__xasm<Number>(push(i7), op(0x38))))
		i7 =  ((__xasm<int>(push((mstate.ebp+-2565)), op(0x37))))
		i7 =  (i7 + 20)
		__asm(push(i7), push((mstate.ebp+-2394)), op(0x3c))
		i7 =  ((__xasm<int>(push((mstate.ebp+-2565)), op(0x37))))
		i7 =  (i7 + 28)
		__asm(push(i7), push((mstate.ebp+-2385)), op(0x3c))
		i7 =  ((__xasm<int>(push((mstate.ebp+-2565)), op(0x37))))
		i7 =  (i7 + 24)
		__asm(push(i7), push((mstate.ebp+-2412)), op(0x3c))
		i7 =  ((__xasm<int>(push((mstate.ebp+-2565)), op(0x37))))
		i7 =  (i7 + 32)
		__asm(push(i7), push((mstate.ebp+-2403)), op(0x3c))
		i7 =  ((__xasm<int>(push((mstate.ebp+-2565)), op(0x37))))
		i7 =  (i7 + 16)
		__asm(push(i7), push((mstate.ebp+-2421)), op(0x3c))
		i7 =  ((__xasm<int>(push((mstate.ebp+-2565)), op(0x37))))
		i7 =  (i7 + 12)
		__asm(push(i7), push((mstate.ebp+-2430)), op(0x3c))
		f20 =  f0/*fextend*/
		__asm(push(f20<f22), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_415_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_413_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str48255)
		i3 =  (__ZZN7b2Sweep7AdvanceEfE8__func__)
		i4 =  (__2E_str47254)
		i5 =  (624)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 86
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state86"))
		mstate.esp += 24
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_414_F"))
		state = 87
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state87"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_415_F"))
		f20 =  (1)
		f20 =  f20/*fround*/
		f21 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		f20 =  f20/*fextend*/
		f21 =  (f21 - f0)
		f0 =  (f20 - f0)
		f21 =  f21/*fround*/
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f21 =  f21/*fextend*/
		f0 =  (f21 / f0)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f20 =  (f20 - f0)
		f20 =  f20/*fround*/
		i7 =  ((__xasm<int>(push((mstate.ebp+-2448)), op(0x37))))
		f21 =  ((__xasm<Number>(push(i7), op(0x38))))
		i7 =  ((__xasm<int>(push((mstate.ebp+-2475)), op(0x37))))
		f22 =  ((__xasm<Number>(push(i7), op(0x38))))
		f20 =  f20/*fextend*/
		i7 =  ((__xasm<int>(push((mstate.ebp+-2439)), op(0x37))))
		f23 =  ((__xasm<Number>(push(i7), op(0x38))))
		i7 =  ((__xasm<int>(push((mstate.ebp+-2484)), op(0x37))))
		f24 =  ((__xasm<Number>(push(i7), op(0x38))))
		f21 =  (f21 * f0)
		f22 =  (f22 * f20)
		f23 =  (f23 * f0)
		f21 =  f21/*fround*/
		f24 =  (f24 * f20)
		f22 =  f22/*fround*/
		f23 =  f23/*fround*/
		f24 =  f24/*fround*/
		f21 =  f21/*fextend*/
		f22 =  f22/*fextend*/
		f21 =  (f22 + f21)
		f22 =  f23/*fextend*/
		f23 =  f24/*fextend*/
		f22 =  (f23 + f22)
		f21 =  f21/*fround*/
		f22 =  f22/*fround*/
		i7 =  ((__xasm<int>(push((mstate.ebp+-2475)), op(0x37))))
		__asm(push(f21), push(i7), op(0x3d))
		i7 =  ((__xasm<int>(push((mstate.ebp+-2484)), op(0x37))))
		__asm(push(f22), push(i7), op(0x3d))
		i7 =  ((__xasm<int>(push((mstate.ebp+-2493)), op(0x37))))
		f23 =  ((__xasm<Number>(push(i7), op(0x38))))
		f24 =  ((__xasm<Number>(push(i6), op(0x38))))
		f20 =  (f20 * f23)
		f0 =  (f24 * f0)
		f20 =  f20/*fround*/
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f20 =  f20/*fextend*/
		f0 =  (f20 + f0)
		f20 =  f0/*fround*/
		__asm(push(f20), push(i7), op(0x3d))
		i7 =  ((__xasm<int>(push((mstate.ebp+-2502)), op(0x37))))
		__asm(push(f1), push(i7), op(0x3d))
		i7 =  ((__xasm<int>(push((mstate.ebp+-2448)), op(0x37))))
		__asm(push(f21), push(i7), op(0x3d))
		i7 =  ((__xasm<int>(push((mstate.ebp+-2439)), op(0x37))))
		__asm(push(f22), push(i7), op(0x3d))
		__asm(push(f20), push(i6), op(0x3d))
		f0 = f20
		//InlineAsmStart
	f0 =  Math.cos(f0);

	//InlineAsmEnd
		f23 = f0
		f0 = f20
		//InlineAsmStart
	f0 =  Math.sin(f0);

	//InlineAsmEnd
		f20 =  f0/*fextend*/
		f24 =  -f20
		__asm(push(f23), push((i5+20)), op(0x3d))
		f24 =  f24/*fround*/
		__asm(push(f24), push((i5+28)), op(0x3d))
		__asm(push(f0), push((i5+24)), op(0x3d))
		__asm(push(f23), push((i5+32)), op(0x3d))
		i7 =  ((__xasm<int>(push((mstate.ebp+-2358)), op(0x37))))
		f0 =  ((__xasm<Number>(push(i7), op(0x38))))
		i7 =  ((__xasm<int>(push((mstate.ebp+-2340)), op(0x37))))
		f24 =  ((__xasm<Number>(push(i7), op(0x38))))
		f23 =  f23/*fextend*/
		f25 =  (f23 * f0)
		f26 =  (f24 * f20)
		f0 =  (f20 * f0)
		f20 =  f25/*fround*/
		f23 =  (f23 * f24)
		f24 =  f26/*fround*/
		f0 =  f0/*fround*/
		f23 =  f23/*fround*/
		f24 =  f24/*fextend*/
		f20 =  f20/*fextend*/
		f20 =  (f20 - f24)
		f23 =  f23/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 + f23)
		f20 =  f20/*fround*/
		f0 =  f0/*fround*/
		f20 =  f20/*fextend*/
		f21 =  f21/*fextend*/
		f20 =  (f21 - f20)
		f0 =  f0/*fextend*/
		f21 =  f22/*fextend*/
		f0 =  (f21 - f0)
		f20 =  f20/*fround*/
		__asm(push(f20), push((i5+12)), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push((i5+16)), op(0x3d))
		i7 =  ((__xasm<int>(push((mstate.ebp+-1521)), op(0x37))))
		i7 =  ((__xasm<int>(push(i7), op(0x37))))
		mstate.esp -= 8
		__asm(push(i4), push(mstate.esp), op(0x3c))
		__asm(push(i7), push((mstate.esp+4)), op(0x3c))
		state = 88
		mstate.esp -= 4;FSM__ZN9b2Contact6UpdateEP17b2ContactListener.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state88"))
		mstate.esp += 8
		i7 =  (i5 + 20)
		i8 =  (i5 + 28)
		i9 =  (i5 + 24)
		i10 =  (i5 + 32)
		i11 =  (i5 + 16)
		i12 =  (i5 + 12)
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_416_F"))
		i13 =  ((__xasm<int>(push((i4+4)), op(0x37))))
		i14 =  (i13 & -33)
		__asm(push(i14), push((i4+4)), op(0x3c))
		i14 =  ((__xasm<int>(push((i4+136)), op(0x37))))
		i14 =  (i14 + 1)
		__asm(push(i14), push((i4+136)), op(0x3c))
		i14 =  (i4 + 4)
		i15 =  (i13 & 4)
		__asm(push(i15==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_552_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_417_F"))
		i15 =  (i13 & 2)
		__asm(push(i15==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_552_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_418_F"))
		i6 =  ((__xasm<int>(push((mstate.ebp+-2565)), op(0x37))))
		i6 =  ((__xasm<int>(push((i6+4)), op(0x36))))
		i7 =  ((__xasm<int>(push((mstate.ebp+-2565)), op(0x37))))
		i7 =  (i7 + 4)
		i8 =  (i6 & 2)
		__asm(push(i8==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_419_F"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_420_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_419_F"))
		i8 =  (0)
		i6 =  (i6 | 2)
		__asm(push(i6), push(i7), op(0x3b))
		i6 =  ((__xasm<int>(push((mstate.ebp+-2565)), op(0x37))))
		__asm(push(i8), push((i6+148)), op(0x3c))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_420_F"))
		i6 =  ((__xasm<int>(push((i5+4)), op(0x36))))
		i8 =  (i5 + 4)
		i9 =  (i6 & 2)
		__asm(push(i9!=0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_422_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_421_F"))
		i9 =  (0)
		i6 =  (i6 | 2)
		__asm(push(i6), push(i8), op(0x3b))
		__asm(push(i9), push((i5+148)), op(0x3c))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_422_F"))
		i6 =  (0)
		i9 =  ((__xasm<int>(push((mstate.ebp+-2637)), op(0x37))))
		__asm(push(i6), push(i9), op(0x3c))
		i9 =  ((__xasm<int>(push((mstate.ebp+-2574)), op(0x37))))
		__asm(push(i6), push(i9), op(0x3c))
		i9 =  ((__xasm<int>(push((mstate.ebp+-1971)), op(0x37))))
		__asm(push(i6), push(i9), op(0x3c))
		i6 =  ((__xasm<int>(push((mstate.ebp+-2088)), op(0x37))))
		i6 =  ((__xasm<int>(push(i6), op(0x37))))
		__asm(push(i6>0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_425_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_423_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str14221)
		i3 =  (__ZZN8b2Island3AddEP6b2BodyE8__func__)
		i4 =  (__2E_str13220)
		i5 =  (67)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 89
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state89"))
		mstate.esp += 24
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_424_F"))
		state = 90
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state90"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_425_F"))
		i6 =  (0)
		i9 =  ((__xasm<int>(push((mstate.ebp+-2565)), op(0x37))))
		__asm(push(i6), push((i9+8)), op(0x3c))
		i6 =  ((__xasm<int>(push((mstate.ebp+-2637)), op(0x37))))
		i6 =  ((__xasm<int>(push(i6), op(0x37))))
		i9 =  ((__xasm<int>(push((mstate.ebp+-2529)), op(0x37))))
		i9 =  ((__xasm<int>(push(i9), op(0x37))))
		i10 =  (i6 << 2)
		i9 =  (i9 + i10)
		i10 =  ((__xasm<int>(push((mstate.ebp+-2565)), op(0x37))))
		__asm(push(i10), push(i9), op(0x3c))
		i6 =  (i6 + 1)
		i9 =  ((__xasm<int>(push((mstate.ebp+-2637)), op(0x37))))
		__asm(push(i6), push(i9), op(0x3c))
		i9 =  ((__xasm<int>(push((mstate.ebp+-2088)), op(0x37))))
		i9 =  ((__xasm<int>(push(i9), op(0x37))))
		__asm(push(i6<i9), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_428_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_426_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str14221)
		i3 =  (__ZZN8b2Island3AddEP6b2BodyE8__func__)
		i4 =  (__2E_str13220)
		i5 =  (67)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 91
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state91"))
		mstate.esp += 24
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_427_F"))
		state = 92
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state92"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_428_F"))
		__asm(push(i6), push((i5+8)), op(0x3c))
		i6 =  ((__xasm<int>(push((mstate.ebp+-2637)), op(0x37))))
		i6 =  ((__xasm<int>(push(i6), op(0x37))))
		i9 =  ((__xasm<int>(push((mstate.ebp+-2529)), op(0x37))))
		i9 =  ((__xasm<int>(push(i9), op(0x37))))
		i10 =  (i6 << 2)
		i9 =  (i9 + i10)
		__asm(push(i5), push(i9), op(0x3c))
		i6 =  (i6 + 1)
		i9 =  ((__xasm<int>(push((mstate.ebp+-2637)), op(0x37))))
		__asm(push(i6), push(i9), op(0x3c))
		i6 =  ((__xasm<int>(push((mstate.ebp+-2574)), op(0x37))))
		i6 =  ((__xasm<int>(push(i6), op(0x37))))
		i9 =  ((__xasm<int>(push((mstate.ebp+-2070)), op(0x37))))
		i9 =  ((__xasm<int>(push(i9), op(0x37))))
		__asm(push(i6<i9), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_431_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_429_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str15222)
		i3 =  (__ZZN8b2Island3AddEP6b2BodyE8__func__)
		i4 =  (__2E_str13220)
		i5 =  (74)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 93
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state93"))
		mstate.esp += 24
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_430_F"))
		state = 94
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state94"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_431_F"))
		i9 =  (0)
		i10 =  ((__xasm<int>(push((mstate.ebp+-2133)), op(0x37))))
		i10 =  ((__xasm<int>(push(i10), op(0x37))))
		i11 =  (i6 << 2)
		i10 =  (i10 + i11)
		__asm(push(i4), push(i10), op(0x3c))
		i4 =  (i6 + 1)
		i6 =  ((__xasm<int>(push((mstate.ebp+-2574)), op(0x37))))
		__asm(push(i4), push(i6), op(0x3c))
		i4 =  ((__xasm<int>(push(i7), op(0x36))))
		i4 =  (i4 | 1)
		__asm(push(i4), push(i7), op(0x3b))
		i4 =  ((__xasm<int>(push(i8), op(0x36))))
		i4 =  (i4 | 1)
		__asm(push(i4), push(i8), op(0x3b))
		i4 =  ((__xasm<int>(push(i14), op(0x37))))
		i4 =  (i4 | 1)
		__asm(push(i4), push(i14), op(0x3c))
		i4 = i9
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_466_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_432_B"), label)
		i7 =  ((__xasm<int>(push((i6+120)), op(0x37))))
		__asm(push(i7==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_465_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_433_F"))
		i6 =  (i6 + 4)
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_463_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_434_B"), label)
		i10 =  ((__xasm<int>(push(i9), op(0x37))))
		i11 =  ((__xasm<int>(push(i10), op(0x37))))
		i12 = i10
		__asm(push(i11!=2), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_437_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_435_F"))
		i11 =  ((__xasm<int>(push(i6), op(0x36))))
		i11 =  (i11 & 8)
		__asm(push(i11!=0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_437_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_436_F"))
		i11 =  ((__xasm<int>(push((i12+4)), op(0x36))))
		i11 =  (i11 & 8)
		__asm(push(i11==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_462_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_437_F"))
		i11 =  ((__xasm<int>(push((i8+48)), op(0x37))))
		i11 =  ((__xasm<int>(push((i11+42)), op(0x35))))
		__asm(push(i11!=0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_462_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_438_F"))
		i11 =  ((__xasm<int>(push((i8+52)), op(0x37))))
		i11 =  ((__xasm<int>(push((i11+42)), op(0x35))))
		__asm(push(i11!=0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_462_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_439_F"))
		i11 =  ((__xasm<int>(push((i12+4)), op(0x36))))
		f2 =  ((__xasm<Number>(push((i12+36)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i12+40)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i12+44)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i12+48)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i12+52)), op(0x38))))
		f7 =  ((__xasm<Number>(push((i12+56)), op(0x38))))
		f8 =  ((__xasm<Number>(push((i12+60)), op(0x38))))
		f9 =  ((__xasm<Number>(push((i12+64)), op(0x38))))
		f10 =  ((__xasm<Number>(push((i12+68)), op(0x38))))
		i13 =  (i12 + 40)
		i14 =  (i12 + 44)
		i15 =  (i12 + 48)
		i16 =  (i12 + 52)
		i17 =  (i12 + 56)
		i18 =  (i12 + 60)
		i19 =  (i12 + 64)
		i20 =  (i12 + 68)
		i21 =  (i12 + 4)
		i22 =  (i12 + 36)
		i11 =  (i11 & 1)
		__asm(push(i11!=0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_444_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_440_F"))
		f0 =  (1)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f11 =  f10/*fextend*/
		__asm(push(f11<f0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_443_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_441_F"))
		i4 =  (___sF)
		mstate.esp -= 24
		i6 =  (__2E_str1670)
		i7 =  (__2E_str48255)
		i0 =  (__ZZN7b2Sweep7AdvanceEfE8__func__)
		i1 =  (__2E_str47254)
		i2 =  (624)
		i4 =  (i4 + 176)
		__asm(push(i4), push(mstate.esp), op(0x3c))
		__asm(push(i6), push((mstate.esp+4)), op(0x3c))
		__asm(push(i7), push((mstate.esp+8)), op(0x3c))
		__asm(push(i0), push((mstate.esp+12)), op(0x3c))
		__asm(push(i1), push((mstate.esp+16)), op(0x3c))
		__asm(push(i2), push((mstate.esp+20)), op(0x3c))
		state = 95
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state95"))
		mstate.esp += 24
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_442_F"))
		state = 96
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state96"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_443_F"))
		f0 =  (1)
		f0 =  f0/*fround*/
		f11 =  f1/*fextend*/
		f12 =  f10/*fextend*/
		f0 =  f0/*fextend*/
		f11 =  (f11 - f12)
		f12 =  (f0 - f12)
		f11 =  f11/*fround*/
		f12 =  f12/*fround*/
		f12 =  f12/*fextend*/
		f11 =  f11/*fextend*/
		f11 =  (f11 / f12)
		f11 =  f11/*fround*/
		f11 =  f11/*fextend*/
		f0 =  (f0 - f11)
		f0 =  f0/*fround*/
		f12 =  f6/*fextend*/
		f13 =  f4/*fextend*/
		f0 =  f0/*fextend*/
		f14 =  f7/*fextend*/
		f12 =  (f12 * f11)
		f15 =  f5/*fextend*/
		f13 =  (f13 * f0)
		f14 =  (f14 * f11)
		f12 =  f12/*fround*/
		f15 =  (f15 * f0)
		f13 =  f13/*fround*/
		f16 =  f8/*fextend*/
		f17 =  f9/*fextend*/
		f14 =  f14/*fround*/
		f15 =  f15/*fround*/
		f0 =  (f0 * f16)
		f11 =  (f17 * f11)
		f12 =  f12/*fextend*/
		f13 =  f13/*fextend*/
		f12 =  (f13 + f12)
		f0 =  f0/*fround*/
		f11 =  f11/*fround*/
		f13 =  f14/*fextend*/
		f14 =  f15/*fextend*/
		f13 =  (f14 + f13)
		f12 =  f12/*fround*/
		f11 =  f11/*fextend*/
		f0 =  f0/*fextend*/
		f13 =  f13/*fround*/
		f0 =  (f0 + f11)
		__asm(push(f12), push(i14), op(0x3d))
		__asm(push(f13), push(i15), op(0x3d))
		f11 =  f0/*fround*/
		__asm(push(f11), push(i18), op(0x3d))
		__asm(push(f1), push(i20), op(0x3d))
		__asm(push(f12), push(i16), op(0x3d))
		__asm(push(f13), push(i17), op(0x3d))
		__asm(push(f11), push(i19), op(0x3d))
		f0 = f11
		//InlineAsmStart
	f0 =  Math.cos(f0);

	//InlineAsmEnd
		f14 = f0
		f0 = f11
		//InlineAsmStart
	f0 =  Math.sin(f0);

	//InlineAsmEnd
		f11 =  f0/*fextend*/
		f15 =  -f11
		__asm(push(f14), push((i12+20)), op(0x3d))
		f15 =  f15/*fround*/
		__asm(push(f15), push((i12+28)), op(0x3d))
		__asm(push(f0), push((i12+24)), op(0x3d))
		__asm(push(f14), push((i12+32)), op(0x3d))
		f0 =  ((__xasm<Number>(push(i22), op(0x38))))
		f15 =  ((__xasm<Number>(push(i13), op(0x38))))
		f14 =  f14/*fextend*/
		f16 =  (f14 * f0)
		f17 =  (f15 * f11)
		f0 =  (f11 * f0)
		f11 =  f16/*fround*/
		f14 =  (f14 * f15)
		f15 =  f17/*fround*/
		f0 =  f0/*fround*/
		f14 =  f14/*fround*/
		f15 =  f15/*fextend*/
		f11 =  f11/*fextend*/
		f11 =  (f11 - f15)
		f14 =  f14/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 + f14)
		f11 =  f11/*fround*/
		f0 =  f0/*fround*/
		f11 =  f11/*fextend*/
		f12 =  f12/*fextend*/
		f11 =  (f12 - f11)
		f0 =  f0/*fextend*/
		f12 =  f13/*fextend*/
		f0 =  (f12 - f0)
		f11 =  f11/*fround*/
		__asm(push(f11), push((i12+12)), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push((i12+16)), op(0x3d))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_444_F"))
		i11 =  ((__xasm<int>(push((mstate.ebp+-1521)), op(0x37))))
		i11 =  ((__xasm<int>(push(i11), op(0x37))))
		mstate.esp -= 8
		__asm(push(i8), push(mstate.esp), op(0x3c))
		__asm(push(i11), push((mstate.esp+4)), op(0x3c))
		state = 97
		mstate.esp -= 4;FSM__ZN9b2Contact6UpdateEP17b2ContactListener.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state97"))
		mstate.esp += 8
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_445_F"))
		i11 =  ((__xasm<int>(push(i7), op(0x37))))
		i23 =  (i11 & 4)
		__asm(push(i23!=0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_448_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_446_F"))
		__asm(push(f2), push(i22), op(0x3d))
		__asm(push(f3), push(i13), op(0x3d))
		__asm(push(f4), push(i14), op(0x3d))
		__asm(push(f5), push(i15), op(0x3d))
		__asm(push(f6), push(i16), op(0x3d))
		__asm(push(f7), push(i17), op(0x3d))
		__asm(push(f8), push(i18), op(0x3d))
		__asm(push(f9), push(i19), op(0x3d))
		__asm(push(f10), push(i20), op(0x3d))
		f0 = f9
		//InlineAsmStart
	f0 =  Math.cos(f0);

	//InlineAsmEnd
		f4 = f0
		f0 = f9
		//InlineAsmStart
	f0 =  Math.sin(f0);

	//InlineAsmEnd
		f5 = f0
		f0 =  f5/*fextend*/
		f3 =  f3/*fextend*/
		f2 =  f2/*fextend*/
		f8 =  f4/*fextend*/
		f9 =  (f3 * f0)
		f10 =  (f8 * f2)
		f2 =  (f0 * f2)
		f9 =  f9/*fround*/
		f3 =  (f8 * f3)
		f8 =  f10/*fround*/
		f2 =  f2/*fround*/
		f3 =  f3/*fround*/
		f9 =  f9/*fextend*/
		f8 =  f8/*fextend*/
		f0 =  -f0
		f8 =  (f8 - f9)
		f3 =  f3/*fextend*/
		f2 =  f2/*fextend*/
		f2 =  (f2 + f3)
		f3 =  f8/*fround*/
		__asm(push(f4), push((i12+20)), op(0x3d))
		f8 =  f0/*fround*/
		__asm(push(f8), push((i12+28)), op(0x3d))
		f2 =  f2/*fround*/
		f0 =  f3/*fextend*/
		f3 =  f6/*fextend*/
		__asm(push(f5), push((i12+24)), op(0x3d))
		f0 =  (f3 - f0)
		f2 =  f2/*fextend*/
		f3 =  f7/*fextend*/
		f2 =  (f3 - f2)
		__asm(push(f4), push((i12+32)), op(0x3d))
		f3 =  f0/*fround*/
		__asm(push(f3), push((i12+12)), op(0x3d))
		f2 =  f2/*fround*/
		__asm(push(f2), push((i12+16)), op(0x3d))
		i7 =  ((__xasm<int>(push((i9+12)), op(0x37))))
		__asm(push(i7==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_465_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_447_F"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_463_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_448_F"))
		i23 =  (i11 & 2)
		__asm(push(i23!=0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_451_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_449_F"))
		__asm(push(f2), push(i22), op(0x3d))
		__asm(push(f3), push(i13), op(0x3d))
		__asm(push(f4), push(i14), op(0x3d))
		__asm(push(f5), push(i15), op(0x3d))
		__asm(push(f6), push(i16), op(0x3d))
		__asm(push(f7), push(i17), op(0x3d))
		__asm(push(f8), push(i18), op(0x3d))
		__asm(push(f9), push(i19), op(0x3d))
		__asm(push(f10), push(i20), op(0x3d))
		f0 = f9
		//InlineAsmStart
	f0 =  Math.cos(f0);

	//InlineAsmEnd
		f4 = f0
		f0 = f9
		//InlineAsmStart
	f0 =  Math.sin(f0);

	//InlineAsmEnd
		f5 =  f0/*fextend*/
		f3 =  f3/*fextend*/
		f2 =  f2/*fextend*/
		f8 =  f4/*fextend*/
		f9 =  (f3 * f5)
		f10 =  (f8 * f2)
		f2 =  (f5 * f2)
		f9 =  f9/*fround*/
		f3 =  (f8 * f3)
		f8 =  f10/*fround*/
		f2 =  f2/*fround*/
		f3 =  f3/*fround*/
		f9 =  f9/*fextend*/
		f8 =  f8/*fextend*/
		f5 =  -f5
		f8 =  (f8 - f9)
		f3 =  f3/*fextend*/
		f2 =  f2/*fextend*/
		f2 =  (f2 + f3)
		f3 =  f8/*fround*/
		__asm(push(f4), push((i12+20)), op(0x3d))
		f5 =  f5/*fround*/
		__asm(push(f5), push((i12+28)), op(0x3d))
		f2 =  f2/*fround*/
		f3 =  f3/*fextend*/
		f5 =  f6/*fextend*/
		__asm(push(f0), push((i12+24)), op(0x3d))
		f0 =  (f5 - f3)
		f2 =  f2/*fextend*/
		f3 =  f7/*fextend*/
		f2 =  (f3 - f2)
		__asm(push(f4), push((i12+32)), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push((i12+12)), op(0x3d))
		f0 =  f2/*fround*/
		__asm(push(f0), push((i12+16)), op(0x3d))
		i7 =  ((__xasm<int>(push((i9+12)), op(0x37))))
		__asm(push(i7==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_465_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_450_F"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_463_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_451_F"))
		i11 =  (i11 | 1)
		__asm(push(i11), push(i7), op(0x3c))
		i7 =  ((__xasm<int>(push((mstate.ebp+-2574)), op(0x37))))
		i7 =  ((__xasm<int>(push(i7), op(0x37))))
		i11 =  ((__xasm<int>(push((mstate.ebp+-2070)), op(0x37))))
		i11 =  ((__xasm<int>(push(i11), op(0x37))))
		__asm(push(i7<i11), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_454_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_452_F"))
		i7 =  (___sF)
		mstate.esp -= 24
		i4 =  (__2E_str1670)
		i6 =  (__2E_str15222)
		i0 =  (__ZZN8b2Island3AddEP6b2BodyE8__func__)
		i1 =  (__2E_str13220)
		i2 =  (74)
		i7 =  (i7 + 176)
		__asm(push(i7), push(mstate.esp), op(0x3c))
		__asm(push(i4), push((mstate.esp+4)), op(0x3c))
		__asm(push(i6), push((mstate.esp+8)), op(0x3c))
		__asm(push(i0), push((mstate.esp+12)), op(0x3c))
		__asm(push(i1), push((mstate.esp+16)), op(0x3c))
		__asm(push(i2), push((mstate.esp+20)), op(0x3c))
		state = 98
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state98"))
		mstate.esp += 24
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_453_F"))
		state = 99
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state99"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_454_F"))
		i11 =  ((__xasm<int>(push((mstate.ebp+-2133)), op(0x37))))
		i11 =  ((__xasm<int>(push(i11), op(0x37))))
		i13 =  (i7 << 2)
		i11 =  (i11 + i13)
		__asm(push(i8), push(i11), op(0x3c))
		i7 =  (i7 + 1)
		i8 =  ((__xasm<int>(push((mstate.ebp+-2574)), op(0x37))))
		__asm(push(i7), push(i8), op(0x3c))
		i7 =  ((__xasm<int>(push(i21), op(0x36))))
		i8 =  (i7 & 1)
		__asm(push(i8!=0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_462_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_455_F"))
		i8 =  (i7 | 1)
		__asm(push(i8), push(i21), op(0x3b))
		i10 =  ((__xasm<int>(push(i10), op(0x37))))
		__asm(push(i10==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_458_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_456_F"))
		i8 =  (i8 & 2)
		__asm(push(i8!=0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_458_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_457_F"))
		i8 =  (0)
		i7 =  (i7 | 3)
		__asm(push(i7), push(i21), op(0x3b))
		__asm(push(i8), push((i12+148)), op(0x3c))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_458_F"))
		i7 =  ((__xasm<int>(push((mstate.ebp+-2637)), op(0x37))))
		i7 =  ((__xasm<int>(push(i7), op(0x37))))
		i8 =  ((__xasm<int>(push((mstate.ebp+-2088)), op(0x37))))
		i8 =  ((__xasm<int>(push(i8), op(0x37))))
		__asm(push(i7<i8), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_461_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_459_F"))
		i7 =  (___sF)
		mstate.esp -= 24
		i4 =  (__2E_str1670)
		i6 =  (__2E_str14221)
		i0 =  (__ZZN8b2Island3AddEP6b2BodyE8__func__)
		i1 =  (__2E_str13220)
		i2 =  (67)
		i7 =  (i7 + 176)
		__asm(push(i7), push(mstate.esp), op(0x3c))
		__asm(push(i4), push((mstate.esp+4)), op(0x3c))
		__asm(push(i6), push((mstate.esp+8)), op(0x3c))
		__asm(push(i0), push((mstate.esp+12)), op(0x3c))
		__asm(push(i1), push((mstate.esp+16)), op(0x3c))
		__asm(push(i2), push((mstate.esp+20)), op(0x3c))
		state = 100
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state100"))
		mstate.esp += 24
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_460_F"))
		state = 101
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state101"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_461_F"))
		__asm(push(i7), push((i12+8)), op(0x3c))
		i7 =  ((__xasm<int>(push((mstate.ebp+-2637)), op(0x37))))
		i7 =  ((__xasm<int>(push(i7), op(0x37))))
		i8 =  ((__xasm<int>(push((mstate.ebp+-2529)), op(0x37))))
		i8 =  ((__xasm<int>(push(i8), op(0x37))))
		i10 =  (i7 << 2)
		i8 =  (i8 + i10)
		__asm(push(i12), push(i8), op(0x3c))
		i7 =  (i7 + 1)
		i8 =  ((__xasm<int>(push((mstate.ebp+-2637)), op(0x37))))
		__asm(push(i7), push(i8), op(0x3c))
	__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_462_F"), lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_462_B"), label, lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_462_F")); 
		i7 =  ((__xasm<int>(push((i9+12)), op(0x37))))
		__asm(push(i7==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_465_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_463_F"))
		i9 = i7
		i7 =  ((__xasm<int>(push((mstate.ebp+-2637)), op(0x37))))
		i7 =  ((__xasm<int>(push(i7), op(0x37))))
		i8 =  ((__xasm<int>(push(_b2_maxTOIContacts), op(0x37))))
		__asm(push(i7>=i8), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_465_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_464_F"))
		i8 =  ((__xasm<int>(push((i9+4)), op(0x37))))
		i10 =  ((__xasm<int>(push((i8+4)), op(0x37))))
		i7 =  (i8 + 4)
		i10 =  (i10 & 1)
		__asm(push(i10==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_434_B"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_462_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_465_B"), label, lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_465_F")); 
		i4 =  (i4 + 1)
		__asm(push(i4>1), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_467_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_466_F"))
		i6 =  ((__xasm<int>(push((mstate.ebp+-2565)), op(0x37))))
		i6 =  ((i4!=0) ? i5 : i6)
		i7 =  ((__xasm<int>(push(i6), op(0x37))))
		__asm(push(i7==2), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_432_B"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_465_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_467_F"))
		f0 =  (1)
		i4 =  ((__xasm<int>(push((mstate.ebp+-1080)), op(0x37))))
		f2 =  ((__xasm<Number>(push(i4), op(0x38))))
		i4 =  ((__xasm<int>(push((mstate.ebp+-999)), op(0x37))))
		i4 =  ((__xasm<int>(push(i4), op(0x37))))
		__asm(push(i4), push((mstate.ebp+-2583)), op(0x3c))
		i4 =  ((__xasm<int>(push((mstate.ebp+-2133)), op(0x37))))
		i4 =  ((__xasm<int>(push(i4), op(0x37))))
		i5 =  ((__xasm<int>(push((mstate.ebp+-1224)), op(0x37))))
		__asm(push(i4), push(i5), op(0x3c))
		i4 =  ((__xasm<int>(push((mstate.ebp+-2574)), op(0x37))))
		i4 =  ((__xasm<int>(push(i4), op(0x37))))
		f0 =  f0/*fround*/
		i5 =  ((__xasm<int>(push((mstate.ebp+-1845)), op(0x37))))
		__asm(push(i4), push(i5), op(0x3c))
		i4 =  ((__xasm<int>(push((mstate.ebp+-1233)), op(0x37))))
		i4 =  ((__xasm<int>(push(i4), op(0x37))))
		f1 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		f1 =  (f0 - f1)
		i5 =  ((__xasm<int>(push((mstate.ebp+-1836)), op(0x37))))
		__asm(push(i4), push(i5), op(0x3c))
		i4 =  (1065353216)
		f1 =  f1/*fround*/
		i5 =  ((__xasm<int>(push((mstate.ebp+-1827)), op(0x37))))
		__asm(push(i4), push(i5), op(0x3c))
		i4 =  (0)
		i5 =  ((__xasm<int>(push((mstate.ebp+-1818)), op(0x37))))
		__asm(push(i4), push(i5), op(0x3a))
		f1 =  f1/*fextend*/
		f1 =  (f1 * f2)
		mstate.esp -= 8
		i5 =  ((mstate.ebp+-224))
		i6 =  ((mstate.ebp+-240))
		f1 =  f1/*fround*/
		__asm(push(i6), push(mstate.esp), op(0x3c))
		__asm(push(i5), push((mstate.esp+4)), op(0x3c))
		f2 =  f1/*fextend*/
		state = 102
		mstate.esp -= 4;FSM__ZN15b2ContactSolverC1EP18b2ContactSolverDef.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state102"))
		f0 =  (f0 / f2)
		mstate.esp += 8
		f2 =  f0/*fround*/
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_469_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_468_B"), label)
		i4 =  ((__xasm<int>(push((mstate.ebp+-2592)), op(0x37))))
		i4 =  (i4 + 1)
		__asm(push(i4>19), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_484_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_469_F"))
		__asm(push(i4), push((mstate.ebp+-2592)), op(0x3c))
		i4 =  ((__xasm<int>(push((mstate.ebp+-2115)), op(0x37))))
		i4 =  ((__xasm<int>(push(i4), op(0x37))))
		__asm(push(i4>0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_471_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_470_F"))
		f0 =  (0)
		f0 =  f0/*fround*/
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_483_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_471_F"))
		f0 =  (0)
		f0 =  f0/*fround*/
		i4 =  (0)
		i5 = i4
	__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_472_F"), lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_472_B"), label, lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_472_F")); 
		i6 =  ((__xasm<int>(push((mstate.ebp+-2079)), op(0x37))))
		i6 =  ((__xasm<int>(push(i6), op(0x37))))
		i6 =  (i6 + i5)
		i7 =  ((__xasm<int>(push((i6+144)), op(0x37))))
		i8 =  ((__xasm<int>(push((i6+148)), op(0x37))))
		f3 =  ((__xasm<Number>(push((i7+124)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i7+128)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i7+136)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i8+124)), op(0x38))))
		f7 =  ((__xasm<Number>(push((i8+128)), op(0x38))))
		f8 =  ((__xasm<Number>(push((i8+136)), op(0x38))))
		i9 =  ((__xasm<int>(push((i6+172)), op(0x37))))
		f4 =  (f3 * f4)
		f3 =  (f3 * f5)
		f5 =  (f6 * f7)
		f6 =  (f6 * f8)
		f4 =  f4/*fround*/
		f3 =  f3/*fround*/
		f5 =  f5/*fround*/
		f6 =  f6/*fround*/
		i10 =  (i6 + 172)
		__asm(push(i9>0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_474_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_473_F"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_481_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_474_F"))
		i9 =  (0)
		f7 =  f5/*fextend*/
		f8 =  f4/*fextend*/
		f7 =  (f8 + f7)
		f7 =  f7/*fround*/
		i11 =  (i7 + 52)
		i12 =  (i7 + 56)
		i13 =  (i8 + 52)
		i14 =  (i8 + 56)
		i15 =  (i7 + 64)
		i16 =  (i7 + 20)
		i17 =  (i7 + 28)
		i18 =  (i7 + 24)
		i19 =  (i7 + 32)
		i20 =  (i7 + 40)
		i21 =  (i7 + 16)
		i22 =  (i8 + 64)
		i23 =  (i8 + 20)
		i24 =  (i8 + 28)
		i25 =  (i8 + 24)
		i26 =  (i8 + 32)
		i27 =  (i8 + 40)
		i28 =  (i8 + 16)
		i29 =  (i8 + 12)
		i30 =  (i7 + 12)
		i8 =  (i8 + 36)
		i7 =  (i7 + 36)
	__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_475_F"), lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_475_B"), label, lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_475_F")); 
		i31 =  ((mstate.ebp+-192))
		mstate.esp -= 12
		__asm(push(i31), push(mstate.esp), op(0x3c))
		__asm(push(i6), push((mstate.esp+4)), op(0x3c))
		__asm(push(i9), push((mstate.esp+8)), op(0x3c))
		state = 103
		mstate.esp -= 4;FSM__ZN24b2PositionSolverManifold10InitializeEP19b2ContactConstrainti.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state103"))
		mstate.esp += 12
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_476_F"))
		f8 =  (0.75)
		f9 =  ((__xasm<Number>(push(i12), op(0x38))))
		f10 =  ((__xasm<Number>(push(i11), op(0x38))))
		f11 =  ((__xasm<Number>(push(i2), op(0x38))))
		f12 =  f10/*fextend*/
		f13 =  ((__xasm<Number>(push(i0), op(0x38))))
		f14 =  f9/*fextend*/
		f12 =  (f11 - f12)
		f14 =  (f13 - f14)
		i31 =  ((__xasm<int>(push((mstate.ebp+-2664)), op(0x37))))
		f15 =  ((__xasm<Number>(push(i31), op(0x38))))
		f16 =  ((__xasm<Number>(push(i3), op(0x38))))
		f12 =  f12/*fround*/
		f14 =  f14/*fround*/
		f17 =  ((__xasm<Number>(push(i14), op(0x38))))
		f18 =  ((__xasm<Number>(push(i13), op(0x38))))
		f19 =  f14/*fextend*/
		f20 =  f15/*fextend*/
		f21 =  f12/*fextend*/
		f22 =  f16/*fextend*/
		f19 =  (f19 * f20)
		f21 =  (f21 * f22)
		f11 =  (f11 - f18)
		f13 =  (f13 - f17)
		f17 =  f19/*fround*/
		f18 =  f21/*fround*/
		f11 =  f11/*fround*/
		f13 =  f13/*fround*/
		f19 =  f13/*fextend*/
		f21 =  f11/*fextend*/
		f17 =  f17/*fextend*/
		f18 =  f18/*fextend*/
		f17 =  (f18 - f17)
		f18 =  (f19 * f20)
		f19 =  (f21 * f22)
		f17 =  f17/*fround*/
		f18 =  f18/*fround*/
		f19 =  f19/*fround*/
		f17 =  f17/*fextend*/
		f20 =  f3/*fextend*/
		f18 =  f18/*fextend*/
		f19 =  f19/*fextend*/
		f20 =  (f20 * f17)
		f18 =  (f19 - f18)
		f19 =  f20/*fround*/
		f18 =  f18/*fround*/
		f19 =  f19/*fextend*/
		f20 =  ((__xasm<Number>(push(i1), op(0x38))))
		f21 =  ((__xasm<Number>(push(_b2_linearSlop), op(0x38))))
		f18 =  f18/*fextend*/
		f22 =  f6/*fextend*/
		f17 =  (f19 * f17)
		f19 =  (f22 * f18)
		f21 =  (f20 + f21)
		f17 =  f17/*fround*/
		f19 =  f19/*fround*/
		f21 =  f21/*fround*/
		f8 =  f8/*fround*/
		f19 =  f19/*fextend*/
		f17 =  f17/*fextend*/
		f22 =  f7/*fextend*/
		f8 =  f8/*fextend*/
		f21 =  f21/*fextend*/
		f17 =  (f22 + f17)
		f18 =  (f19 * f18)
		f8 =  (f21 * f8)
		f19 =  (0)
		f17 =  f17/*fround*/
		f18 =  f18/*fround*/
		f8 =  f8/*fround*/
		f19 =  f19/*fround*/
		f21 =  ((__xasm<Number>(push(_b2_maxLinearCorrection), op(0x38))))
		f0 =  f0/*fextend*/
		f18 =  f18/*fextend*/
		f17 =  f17/*fextend*/
		f19 =  f19/*fextend*/
		f8 =  f8/*fextend*/
		f17 =  (f17 + f18)
		f0 =  ((f0<f20) ? f0 : f20)
		f8 =  ((f8<f19) ? f8 : f19)
		f18 =  -f21
		f17 =  f17/*fround*/
		f20 =  f0/*fround*/
		f0 =  f8/*fround*/
		f8 =  f18/*fround*/
		f18 =  f17/*fextend*/
		__asm(push(f18>f19), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_478_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_477_F"))
		f0 =  (0)
		f0 =  f0/*fround*/
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_479_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_478_F"))
		f8 =  f8/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  ((f0<f8) ? f8 : f0)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f0 =  -f0
		f0 =  f0/*fround*/
		f8 =  f17/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 / f8)
		f0 =  f0/*fround*/
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_479_F"))
		f8 =  f16/*fextend*/
		f0 =  f0/*fextend*/
		f15 =  f15/*fextend*/
		f8 =  (f8 * f0)
		f0 =  (f15 * f0)
		f8 =  f8/*fround*/
		f0 =  f0/*fround*/
		f12 =  f12/*fextend*/
		f8 =  f8/*fextend*/
		f14 =  f14/*fextend*/
		f15 =  f0/*fextend*/
		f0 =  f4/*fextend*/
		f12 =  (f12 * f8)
		f14 =  (f14 * f15)
		f12 =  f12/*fround*/
		f16 =  (f15 * f0)
		f14 =  f14/*fround*/
		f0 =  (f8 * f0)
		f16 =  f16/*fround*/
		f14 =  f14/*fextend*/
		f12 =  f12/*fextend*/
		f0 =  f0/*fround*/
		f12 =  (f12 - f14)
		f14 =  f16/*fextend*/
		f10 =  f10/*fextend*/
		f12 =  f12/*fround*/
		f10 =  (f10 - f14)
		f0 =  f0/*fextend*/
		f9 =  f9/*fextend*/
		f0 =  (f9 - f0)
		f9 =  f10/*fround*/
		f10 =  f3/*fextend*/
		f12 =  f12/*fextend*/
		f14 =  f0/*fround*/
		f0 =  (f12 * f10)
		__asm(push(f9), push(i11), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f14), push(i12), op(0x3d))
		f10 =  ((__xasm<Number>(push(i15), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f10 - f0)
		f10 =  f0/*fround*/
		__asm(push(f10), push(i15), op(0x3d))
		f0 = f10
		//InlineAsmStart
	f0 =  Math.cos(f0);

	//InlineAsmEnd
		f12 = f0
		f0 = f10
		//InlineAsmStart
	f0 =  Math.sin(f0);

	//InlineAsmEnd
		f10 =  f0/*fextend*/
		f16 =  -f10
		__asm(push(f12), push(i16), op(0x3d))
		f16 =  f16/*fround*/
		__asm(push(f16), push(i17), op(0x3d))
		__asm(push(f0), push(i18), op(0x3d))
		__asm(push(f12), push(i19), op(0x3d))
		f0 =  ((__xasm<Number>(push(i7), op(0x38))))
		f16 =  ((__xasm<Number>(push(i20), op(0x38))))
		f12 =  f12/*fextend*/
		f17 =  (f12 * f0)
		f18 =  (f16 * f10)
		f0 =  (f10 * f0)
		f10 =  f17/*fround*/
		f12 =  (f12 * f16)
		f16 =  f18/*fround*/
		f0 =  f0/*fround*/
		f12 =  f12/*fround*/
		f16 =  f16/*fextend*/
		f10 =  f10/*fextend*/
		f10 =  (f10 - f16)
		f12 =  f12/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 + f12)
		f10 =  f10/*fround*/
		f0 =  f0/*fround*/
		f10 =  f10/*fextend*/
		f9 =  f9/*fextend*/
		f9 =  (f9 - f10)
		f0 =  f0/*fextend*/
		f10 =  f14/*fextend*/
		f12 =  f5/*fextend*/
		f0 =  (f10 - f0)
		f9 =  f9/*fround*/
		f10 =  (f15 * f12)
		__asm(push(f9), push(i30), op(0x3d))
		f0 =  f0/*fround*/
		f9 =  f11/*fextend*/
		f10 =  f10/*fround*/
		f11 =  f13/*fextend*/
		__asm(push(f0), push(i21), op(0x3d))
		f0 =  (f9 * f8)
		f9 =  (f11 * f15)
		f11 =  ((__xasm<Number>(push(i13), op(0x38))))
		f10 =  f10/*fextend*/
		f10 =  (f11 + f10)
		f0 =  f0/*fround*/
		f9 =  f9/*fround*/
		f10 =  f10/*fround*/
		f8 =  (f8 * f12)
		f9 =  f9/*fextend*/
		f0 =  f0/*fextend*/
		f8 =  f8/*fround*/
		f0 =  (f0 - f9)
		__asm(push(f10), push(i13), op(0x3d))
		f0 =  f0/*fround*/
		f9 =  ((__xasm<Number>(push(i14), op(0x38))))
		f8 =  f8/*fextend*/
		f8 =  (f9 + f8)
		f9 =  f6/*fextend*/
		f0 =  f0/*fextend*/
		f8 =  f8/*fround*/
		f0 =  (f0 * f9)
		f0 =  f0/*fround*/
		__asm(push(f8), push(i14), op(0x3d))
		f9 =  ((__xasm<Number>(push(i22), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f9 + f0)
		f9 =  f0/*fround*/
		__asm(push(f9), push(i22), op(0x3d))
		f0 = f9
		//InlineAsmStart
	f0 =  Math.cos(f0);

	//InlineAsmEnd
		f11 = f0
		f0 = f9
		//InlineAsmStart
	f0 =  Math.sin(f0);

	//InlineAsmEnd
		f9 =  f0/*fextend*/
		f12 =  -f9
		__asm(push(f11), push(i23), op(0x3d))
		f12 =  f12/*fround*/
		__asm(push(f12), push(i24), op(0x3d))
		__asm(push(f0), push(i25), op(0x3d))
		__asm(push(f11), push(i26), op(0x3d))
		f0 =  ((__xasm<Number>(push(i8), op(0x38))))
		f12 =  ((__xasm<Number>(push(i27), op(0x38))))
		f11 =  f11/*fextend*/
		f13 =  (f11 * f0)
		f14 =  (f12 * f9)
		f0 =  (f9 * f0)
		f9 =  f13/*fround*/
		f11 =  (f11 * f12)
		f12 =  f14/*fround*/
		f0 =  f0/*fround*/
		f11 =  f11/*fround*/
		f12 =  f12/*fextend*/
		f9 =  f9/*fextend*/
		f9 =  (f9 - f12)
		f11 =  f11/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 + f11)
		f9 =  f9/*fround*/
		f0 =  f0/*fround*/
		f9 =  f9/*fextend*/
		f10 =  f10/*fextend*/
		f9 =  (f10 - f9)
		f0 =  f0/*fextend*/
		f8 =  f8/*fextend*/
		f0 =  (f8 - f0)
		f8 =  f9/*fround*/
		__asm(push(f8), push(i29), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push(i28), op(0x3d))
		i31 =  ((__xasm<int>(push(i10), op(0x37))))
		i9 =  (i9 + 1)
		__asm(push(i31>i9), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_553_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_480_F"))
		f0 = f20
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_481_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_481_F"))
		i6 =  ((__xasm<int>(push((mstate.ebp+-2115)), op(0x37))))
		i6 =  ((__xasm<int>(push(i6), op(0x37))))
		i5 =  (i5 + 188)
		i4 =  (i4 + 1)
		__asm(push(i6>i4), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_554_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_482_F"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_483_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_483_F"))
		f3 =  (-1.5)
		f3 =  f3/*fround*/
		f4 =  ((__xasm<Number>(push(_b2_linearSlop), op(0x38))))
		f3 =  f3/*fextend*/
		f3 =  (f4 * f3)
		f3 =  f3/*fround*/
		f0 =  f0/*fextend*/
		f3 =  f3/*fextend*/
		__asm(push(f3>f0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_468_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_484_F"))
		i4 =  ((__xasm<int>(push((mstate.ebp+-2637)), op(0x37))))
		i4 =  ((__xasm<int>(push(i4), op(0x37))))
		__asm(push(i4<1), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_488_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_485_F"))
		i4 =  (0)
		i5 = i4
	__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_486_F"), lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_486_B"), label, lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_486_F")); 
		i6 =  ((__xasm<int>(push((mstate.ebp+-2529)), op(0x37))))
		i6 =  ((__xasm<int>(push(i6), op(0x37))))
		i6 =  (i6 + i5)
		i6 =  ((__xasm<int>(push(i6), op(0x37))))
		f0 =  ((__xasm<Number>(push((i6+64)), op(0x38))))
		__asm(push(f0), push((i6+60)), op(0x3d))
		i6 =  ((__xasm<int>(push((mstate.ebp+-2529)), op(0x37))))
		i6 =  ((__xasm<int>(push(i6), op(0x37))))
		i6 =  (i6 + i5)
		i6 =  ((__xasm<int>(push(i6), op(0x37))))
		f0 =  ((__xasm<Number>(push((i6+52)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i6+56)), op(0x38))))
		__asm(push(f0), push((i6+44)), op(0x3d))
		__asm(push(f3), push((i6+48)), op(0x3d))
		i6 =  ((__xasm<int>(push((mstate.ebp+-2637)), op(0x37))))
		i6 =  ((__xasm<int>(push(i6), op(0x37))))
		i5 =  (i5 + 4)
		i4 =  (i4 + 1)
		__asm(push(i6<=i4), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_488_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_487_F"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_486_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_488_F"))
		i4 =  ((mstate.ebp+-240))
		mstate.esp -= 4
		__asm(push(i4), push(mstate.esp), op(0x3c))
		state = 104
		mstate.esp -= 4;FSM__ZN15b2ContactSolver29InitializeVelocityConstraintsEv.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state104"))
		mstate.esp += 4
		i4 =  (0)
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_490_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_489_B"), label)
		i4 =  (i4 + 1)
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_490_F"))
		i5 =  ((__xasm<int>(push((mstate.ebp+-2583)), op(0x37))))
		__asm(push(i5<=i4), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_505_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_491_F"))
		i5 =  ((mstate.ebp+-240))
		mstate.esp -= 4
		__asm(push(i5), push(mstate.esp), op(0x3c))
		state = 105
		mstate.esp -= 4;FSM__ZN15b2ContactSolver24SolveVelocityConstraintsEv.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state105"))
		mstate.esp += 4
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_489_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_492_B"), label)
		f0 =  ((__xasm<Number>(push((i5+76)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i5+72)), op(0x38))))
		f5 =  f4/*fextend*/
		f6 =  f1/*fextend*/
		f7 =  f0/*fextend*/
		f5 =  (f5 * f6)
		f6 =  (f7 * f6)
		f5 =  f5/*fround*/
		f6 =  f6/*fround*/
		f7 =  f5/*fextend*/
		f8 =  f6/*fextend*/
		f7 =  (f7 * f7)
		f8 =  (f8 * f8)
		f7 =  f7/*fround*/
		f8 =  f8/*fround*/
		f8 =  f8/*fextend*/
		f7 =  f7/*fextend*/
		f9 =  ((__xasm<Number>(push(_b2_maxTranslationSquared), op(0x38))))
		f7 =  (f7 + f8)
		f7 =  f7/*fround*/
		i7 =  (i5 + 76)
		i8 =  (i5 + 72)
		f8 =  f7/*fextend*/
		__asm(push(f8>f9), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_494_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_493_F"))
		f5 = f4
		f6 = f0
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_498_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_494_F"))
		f0 =  (1.19209e-07)
		f4 =  f7/*fextend*/
		f4 =  Math.sqrt(f4)
		f4 =  f4/*fround*/
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f7 =  f4/*fextend*/
		__asm(push(f7>=f0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_496_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_495_F"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_497_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_496_F"))
		f0 =  (1)
		f0 =  f0/*fround*/
		f4 =  f4/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 / f4)
		f0 =  f0/*fround*/
		f4 =  f5/*fextend*/
		f0 =  f0/*fextend*/
		f5 =  f6/*fextend*/
		f4 =  (f4 * f0)
		f0 =  (f5 * f0)
		f5 =  f4/*fround*/
		f6 =  f0/*fround*/
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_497_F"))
		f0 =  ((__xasm<Number>(push(_b2_maxTranslation), op(0x38))))
		f4 =  f2/*fextend*/
		f0 =  (f4 * f0)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f4 =  f5/*fextend*/
		f5 =  f6/*fextend*/
		f4 =  (f4 * f0)
		f0 =  (f5 * f0)
		f5 =  f4/*fround*/
		__asm(push(f5), push(i8), op(0x3d))
		f6 =  f0/*fround*/
		__asm(push(f6), push(i7), op(0x3d))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_498_F"))
		f0 = f5
		f4 = f6
		f5 =  ((__xasm<Number>(push((i5+80)), op(0x38))))
		f6 =  f5/*fextend*/
		f7 =  f1/*fextend*/
		f6 =  (f7 * f6)
		f6 =  f6/*fround*/
		f7 =  ((__xasm<Number>(push(_b2_maxRotationSquared), op(0x38))))
		f8 =  f6/*fextend*/
		f8 =  (f8 * f8)
		i7 =  (i5 + 80)
		f8 =  f8/*fround*/
		f8 =  f8/*fextend*/
		__asm(push(f8>f7), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_500_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_499_F"))
		f6 = f5
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_503_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_500_F"))
		f5 =  (0)
		f7 =  ((__xasm<Number>(push(_b2_maxRotation), op(0x38))))
		f5 =  f5/*fround*/
		f5 =  f5/*fextend*/
		f6 =  f6/*fextend*/
		__asm(push(f6>=f5), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_502_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_501_F"))
		f5 =  f3/*fextend*/
		f6 =  f7/*fextend*/
		f5 =  (f6 * f5)
		f6 =  f5/*fround*/
		__asm(push(f6), push(i7), op(0x3d))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_503_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_502_F"))
		f5 =  f7/*fextend*/
		f6 =  f2/*fextend*/
		f5 =  (f6 * f5)
		f6 =  f5/*fround*/
		__asm(push(f6), push(i7), op(0x3d))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_503_F"))
		f5 = f6
		f0 =  f0/*fextend*/
		f6 =  f1/*fextend*/
		f0 =  (f0 * f6)
		f0 =  f0/*fround*/
		f7 =  ((__xasm<Number>(push((i5+52)), op(0x38))))
		f0 =  f0/*fextend*/
		f4 =  f4/*fextend*/
		f0 =  (f7 + f0)
		f7 =  f0/*fround*/
		f0 =  (f4 * f6)
		__asm(push(f7), push((i5+52)), op(0x3d))
		f0 =  f0/*fround*/
		f4 =  ((__xasm<Number>(push((i5+56)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f4 + f0)
		f4 =  f5/*fextend*/
		f5 =  f0/*fround*/
		f0 =  (f6 * f4)
		__asm(push(f5), push((i5+56)), op(0x3d))
		f0 =  f0/*fround*/
		f4 =  ((__xasm<Number>(push((i5+64)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f4 + f0)
		f4 =  f0/*fround*/
		__asm(push(f4), push((i5+64)), op(0x3d))
		f0 = f4
		//InlineAsmStart
	f0 =  Math.cos(f0);

	//InlineAsmEnd
		f6 = f0
		f0 = f4
		//InlineAsmStart
	f0 =  Math.sin(f0);

	//InlineAsmEnd
		f4 =  f0/*fextend*/
		f8 =  -f4
		__asm(push(f6), push((i5+20)), op(0x3d))
		f8 =  f8/*fround*/
		__asm(push(f8), push((i5+28)), op(0x3d))
		__asm(push(f0), push((i5+24)), op(0x3d))
		__asm(push(f6), push((i5+32)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i5+36)), op(0x38))))
		f8 =  ((__xasm<Number>(push((i5+40)), op(0x38))))
		f6 =  f6/*fextend*/
		f9 =  (f6 * f0)
		f10 =  (f8 * f4)
		f0 =  (f4 * f0)
		f4 =  f9/*fround*/
		f6 =  (f6 * f8)
		f8 =  f10/*fround*/
		f0 =  f0/*fround*/
		f6 =  f6/*fround*/
		f8 =  f8/*fextend*/
		f4 =  f4/*fextend*/
		f4 =  (f4 - f8)
		f6 =  f6/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 + f6)
		f4 =  f4/*fround*/
		f0 =  f0/*fround*/
		f4 =  f4/*fextend*/
		f6 =  f7/*fextend*/
		f4 =  (f6 - f4)
		f0 =  f0/*fextend*/
		f5 =  f5/*fextend*/
		f0 =  (f5 - f0)
		f4 =  f4/*fround*/
		__asm(push(f4), push((i5+12)), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push((i5+16)), op(0x3d))
	__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_504_F"), lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_504_B"), label, lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_504_F")); 
		i4 =  (i4 + 4)
		i5 =  (i6 + 1)
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_506_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_505_F"))
		i5 =  (0)
		f0 =  f2/*fextend*/
		f0 =  -f0
		f3 =  f0/*fround*/
		i4 = i5
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_506_F"))
		i6 = i5
		i5 =  ((__xasm<int>(push((mstate.ebp+-2637)), op(0x37))))
		i5 =  ((__xasm<int>(push(i5), op(0x37))))
		__asm(push(i5<=i6), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_508_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_507_F"))
		i5 =  ((__xasm<int>(push((mstate.ebp+-2529)), op(0x37))))
		i5 =  ((__xasm<int>(push(i5), op(0x37))))
		i5 =  (i5 + i4)
		i5 =  ((__xasm<int>(push(i5), op(0x37))))
		i7 =  ((__xasm<int>(push(i5), op(0x37))))
		__asm(push(i7==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_504_B"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_492_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_508_F"))
		i4 =  ((__xasm<int>(push((mstate.ebp+-2079)), op(0x37))))
		i4 =  ((__xasm<int>(push(i4), op(0x37))))
		i5 =  ((__xasm<int>(push((mstate.ebp+-1800)), op(0x37))))
		i5 =  ((__xasm<int>(push(i5), op(0x37))))
		__asm(push(i5==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_517_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_509_F"))
		i5 =  (0)
		i6 = i5
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_514_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_510_B"), label)
		f0 =  ((__xasm<Number>(push((i7+24)), op(0x38))))
		__asm(push(f0), push(i9), op(0x3d))
		f0 =  ((__xasm<Number>(push((i7+28)), op(0x38))))
		__asm(push(f0), push((i9+8)), op(0x3d))
		i12 =  ((__xasm<int>(push(i11), op(0x37))))
		i7 =  (i7 + 44)
		i9 =  (i9 + 4)
		i4 =  (i4 + 1)
		__asm(push(i12<=i4), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_512_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_511_F"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_510_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_512_B"), label, lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_512_F")); 
		i4 =  ((mstate.ebp+-256))
		i7 =  ((__xasm<int>(push((mstate.ebp+-1800)), op(0x37))))
		i7 =  ((__xasm<int>(push(i7), op(0x37))))
		i9 =  ((__xasm<int>(push(i7), op(0x37))))
		i9 =  ((__xasm<int>(push((i9+20)), op(0x37))))
		mstate.esp -= 12
		__asm(push(i7), push(mstate.esp), op(0x3c))
		__asm(push(i5), push((mstate.esp+4)), op(0x3c))
		__asm(push(i4), push((mstate.esp+8)), op(0x3c))
		state = 106
		mstate.esp -= 4;(mstate.funcs[i9])()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state106"))
		mstate.esp += 12
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_513_F"))
		i4 =  (i10 + 188)
		i5 =  (i6 + 4)
		i7 =  (i8 + 1)
		i6 = i5
		i5 = i7
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_514_F"))
		i10 = i4
		i8 = i5
		i4 =  ((__xasm<int>(push((mstate.ebp+-2574)), op(0x37))))
		i4 =  ((__xasm<int>(push(i4), op(0x37))))
		__asm(push(i4<=i8), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_517_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_515_F"))
		i4 =  ((__xasm<int>(push((mstate.ebp+-2133)), op(0x37))))
		i4 =  ((__xasm<int>(push(i4), op(0x37))))
		i4 =  (i4 + i6)
		i5 =  ((__xasm<int>(push(i4), op(0x37))))
		i4 =  ((__xasm<int>(push((i10+172)), op(0x37))))
		i11 =  (i10 + 172)
		__asm(push(i4<1), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_512_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_516_F"))
		i4 =  (0)
		i7 = i10
		i9 =  ((__xasm<int>(push((mstate.ebp+-990)), op(0x37))))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_510_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_517_F"))
		i4 =  ((__xasm<int>(push((mstate.ebp+-1215)), op(0x37))))
		i4 =  ((__xasm<int>(push(i4), op(0x37))))
		i5 =  ((__xasm<int>(push((i4+102796)), op(0x37))))
		i6 =  (i4 + 102796)
		__asm(push(i5>0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_520_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_518_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str85292)
		i3 =  (__ZZN16b2BlockAllocator4FreeEPviE8__func__)
		i4 =  (__2E_str10217)
		i5 =  (63)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 107
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state107"))
		mstate.esp += 24
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_519_F"))
		state = 108
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state108"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_520_F"))
		i5 =  (i5 + -1)
		i7 =  (i5 * 12)
		i7 =  (i4 + i7)
		i8 =  ((__xasm<int>(push((mstate.ebp+-2079)), op(0x37))))
		i8 =  ((__xasm<int>(push(i8), op(0x37))))
		i7 =  ((__xasm<int>(push((i7+102412)), op(0x37))))
		__asm(push(i7==i8), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_523_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_521_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str86293)
		i3 =  (__ZZN16b2BlockAllocator4FreeEPviE8__func__)
		i4 =  (__2E_str10217)
		i5 =  (65)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 109
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state109"))
		mstate.esp += 24
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_522_F"))
		state = 110
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state110"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_523_F"))
		i7 =  (i5 * 12)
		i7 =  (i4 + i7)
		i7 =  ((__xasm<int>(push((i7+102420)), op(0x35))))
		__asm(push(i7==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_525_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_524_F"))
		i7 =  (0)
		mstate.esp -= 8
		__asm(push(i8), push(mstate.esp), op(0x3c))
		__asm(push(i7), push((mstate.esp+4)), op(0x3c))
		state = 111
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state111"))
		i7 = mstate.eax
		mstate.esp += 8
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_526_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_525_F"))
		i7 =  (i5 * 12)
		i7 =  (i4 + i7)
		i8 =  ((__xasm<int>(push((i4+102400)), op(0x37))))
		i7 =  ((__xasm<int>(push((i7+102416)), op(0x37))))
		i7 =  (i8 - i7)
		__asm(push(i7), push((i4+102400)), op(0x3c))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_526_F"))
		i7 =  (0)
		i5 =  (i5 * 12)
		i5 =  (i4 + i5)
		i8 =  ((__xasm<int>(push((i4+102404)), op(0x37))))
		i5 =  ((__xasm<int>(push((i5+102416)), op(0x37))))
		i5 =  (i8 - i5)
		__asm(push(i5), push((i4+102404)), op(0x3c))
		i4 =  ((__xasm<int>(push(i6), op(0x37))))
		i4 =  (i4 + -1)
		__asm(push(i4), push(i6), op(0x3c))
		i4 = i7
		i5 = i7
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_532_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_527_B"), label)
		mstate.esp -= 4
		__asm(push(i6), push(mstate.esp), op(0x3c))
		state = 112
		mstate.esp -= 4;FSM__ZN6b2Body19SynchronizeFixturesEv.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state112"))
		mstate.esp += 4
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_528_F"))
		i6 =  ((__xasm<int>(push((i6+120)), op(0x37))))
		__asm(push(i6==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_531_F"))
	__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_529_F"), lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_529_B"), label, lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_529_F")); 
		i7 =  ((__xasm<int>(push((i6+4)), op(0x37))))
		i8 =  ((__xasm<int>(push((i7+4)), op(0x37))))
		i8 =  (i8 & -34)
		__asm(push(i8), push((i7+4)), op(0x3c))
		i6 =  ((__xasm<int>(push((i6+12)), op(0x37))))
		__asm(push(i6==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_531_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_530_F"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_529_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_531_B"), label, lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_531_F")); 
		i4 =  (i4 + 4)
		i5 =  (i5 + 1)
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_532_F"))
		i6 =  ((__xasm<int>(push((mstate.ebp+-2637)), op(0x37))))
		i6 =  ((__xasm<int>(push(i6), op(0x37))))
		__asm(push(i6<=i5), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_534_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_533_F"))
		i6 =  ((__xasm<int>(push((mstate.ebp+-2529)), op(0x37))))
		i6 =  ((__xasm<int>(push(i6), op(0x37))))
		i6 =  (i6 + i4)
		i6 =  ((__xasm<int>(push(i6), op(0x37))))
		i7 =  ((__xasm<int>(push((i6+4)), op(0x36))))
		i7 =  (i7 & -2)
		__asm(push(i7), push((i6+4)), op(0x3b))
		i7 =  ((__xasm<int>(push(i6), op(0x37))))
		__asm(push(i7==2), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_527_B"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_531_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_534_F"))
		mstate.esp -= 8
		i4 =  ((__xasm<int>(push((mstate.ebp+-1926)), op(0x37))))
		__asm(push(i4), push(mstate.esp), op(0x3c))
		i4 =  ((__xasm<int>(push((mstate.ebp+-936)), op(0x37))))
		__asm(push(i4), push((mstate.esp+4)), op(0x3c))
		state = 113
		mstate.esp -= 4;FSM__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT_.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state113"))
		mstate.esp += 8
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_535_F"))
		i4 =  ((__xasm<int>(push((mstate.ebp+-1917)), op(0x37))))
		i4 =  ((__xasm<int>(push(i4), op(0x35))))
		__asm(push(i4==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_272_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_536_F"))
		i0 =  (0)
		i1 =  ((__xasm<int>(push((mstate.ebp+-810)), op(0x37))))
		__asm(push(i0), push(i1), op(0x3a))
		mstate.esp -= 4
		i0 =  ((mstate.ebp+-592))
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 114
		mstate.esp -= 4;FSM__ZN8b2IslandD1Ev.start()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state114"))
		mstate.esp += 4
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_537_F"))
		f0 =  (0)
		f0 =  f0/*fround*/
		i0 =  ((__xasm<int>(push((mstate.ebp+-1080)), op(0x37))))
		f1 =  ((__xasm<Number>(push(i0), op(0x38))))
		f0 =  f0/*fextend*/
		__asm(push(f1<=f0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_539_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_538_F"))
		f0 =  ((__xasm<Number>(push((mstate.ebp+-764)), op(0x38))))
		i0 =  ((__xasm<int>(push((mstate.ebp+-801)), op(0x37))))
		__asm(push(f0), push(i0), op(0x3d))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_539_F"))
		i0 =  ((__xasm<int>(push((mstate.ebp+-819)), op(0x37))))
		i0 =  ((__xasm<int>(push(i0), op(0x37))))
		i0 =  (i0 & 4)
		__asm(push(i0==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_543_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_540_F"))
		i0 =  ((__xasm<int>(push((mstate.ebp+-963)), op(0x37))))
		i0 =  ((__xasm<int>(push((i0+102952)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_543_F"))
	__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_541_F"), lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_541_B"), label, lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_541_F")); 
		i1 =  (0)
		__asm(push(i1), push((i0+84)), op(0x3c))
		__asm(push(i1), push((i0+88)), op(0x3c))
		__asm(push(i1), push((i0+92)), op(0x3c))
		i0 =  ((__xasm<int>(push((i0+104)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_543_F"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_542_F"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_541_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_543_F"))
		i0 =  ((__xasm<int>(push((mstate.ebp+-819)), op(0x37))))
		i0 =  ((__xasm<int>(push(i0), op(0x37))))
		i0 =  (i0 & -3)
		i1 =  ((__xasm<int>(push((mstate.ebp+-819)), op(0x37))))
		__asm(push(i0), push(i1), op(0x3c))
		state = 115
		mstate.esp -= 4;(mstate.funcs[_AS3_Null])()
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_state115"))
		i0 = mstate.eax
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_544_F"))
		i0 = i6
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_92_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_545_F"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_108_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_546_F"))
		i0 =  (-1)
		i7 =  (0)
		i8 = i7
		i9 = i6
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_117_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_547_F"))
		f0 = f19
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_183_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_548_F"))
		i0 = i8
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_180_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_549_F"))
		i6 =  (4)
		i7 =  ((__xasm<int>(push(_b2_toiIters), op(0x37))))
		i7 =  (i7 + 1)
		__asm(push(i7), push(_b2_toiIters), op(0x3c))
		i5 =  (i5 + 1)
		f0 = f14
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_395_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_550_F"))
		i6 =  (3)
		i7 =  ((__xasm<int>(push(_b2_toiIters), op(0x37))))
		i7 =  (i7 + 1)
		__asm(push(i7), push(_b2_toiIters), op(0x3c))
		i5 =  (i5 + 1)
		f0 = f1
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_395_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_551_F"))
		i4 = i5
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_406_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_552_F"))
		i4 =  (i13 & -37)
		__asm(push(i4), push(i14), op(0x3c))
		i4 =  ((__xasm<int>(push((mstate.ebp+-2457)), op(0x37))))
		__asm(push(f3), push(i4), op(0x3d))
		i4 =  ((__xasm<int>(push((mstate.ebp+-2376)), op(0x37))))
		__asm(push(f4), push(i4), op(0x3d))
		i4 =  ((__xasm<int>(push((mstate.ebp+-2304)), op(0x37))))
		__asm(push(f5), push(i4), op(0x3d))
		i4 =  ((__xasm<int>(push((mstate.ebp+-2313)), op(0x37))))
		__asm(push(f6), push(i4), op(0x3d))
		i4 =  ((__xasm<int>(push((mstate.ebp+-2367)), op(0x37))))
		__asm(push(f7), push(i4), op(0x3d))
		i4 =  ((__xasm<int>(push((mstate.ebp+-2349)), op(0x37))))
		__asm(push(f8), push(i4), op(0x3d))
		i4 =  ((__xasm<int>(push((mstate.ebp+-2322)), op(0x37))))
		__asm(push(f9), push(i4), op(0x3d))
		i4 =  ((__xasm<int>(push((mstate.ebp+-2466)), op(0x37))))
		__asm(push(f10), push(i4), op(0x3d))
		i4 =  ((__xasm<int>(push((mstate.ebp+-2331)), op(0x37))))
		__asm(push(f2), push(i4), op(0x3d))
		i4 =  ((__xasm<int>(push((mstate.ebp+-2358)), op(0x37))))
		__asm(push(f11), push(i4), op(0x3d))
		i4 =  ((__xasm<int>(push((mstate.ebp+-2340)), op(0x37))))
		__asm(push(f12), push(i4), op(0x3d))
		i4 =  ((__xasm<int>(push((mstate.ebp+-2475)), op(0x37))))
		__asm(push(f13), push(i4), op(0x3d))
		i4 =  ((__xasm<int>(push((mstate.ebp+-2484)), op(0x37))))
		__asm(push(f14), push(i4), op(0x3d))
		i4 =  ((__xasm<int>(push((mstate.ebp+-2448)), op(0x37))))
		__asm(push(f15), push(i4), op(0x3d))
		i4 =  ((__xasm<int>(push((mstate.ebp+-2439)), op(0x37))))
		__asm(push(f16), push(i4), op(0x3d))
		i4 =  ((__xasm<int>(push((mstate.ebp+-2493)), op(0x37))))
		__asm(push(f17), push(i4), op(0x3d))
		__asm(push(f18), push(i6), op(0x3d))
		i4 =  ((__xasm<int>(push((mstate.ebp+-2502)), op(0x37))))
		__asm(push(f19), push(i4), op(0x3d))
		i4 =  ((__xasm<int>(push((mstate.ebp+-2466)), op(0x37))))
		f1 =  ((__xasm<Number>(push(i4), op(0x38))))
		f0 = f1
		//InlineAsmStart
	f0 =  Math.cos(f0);

	//InlineAsmEnd
		f2 = f0
		f0 = f1
		//InlineAsmStart
	f0 =  Math.sin(f0);

	//InlineAsmEnd
		f1 = f0
		f0 =  f1/*fextend*/
		f3 =  -f0
		i4 =  ((__xasm<int>(push((mstate.ebp+-2394)), op(0x37))))
		__asm(push(f2), push(i4), op(0x3d))
		f3 =  f3/*fround*/
		i4 =  ((__xasm<int>(push((mstate.ebp+-2385)), op(0x37))))
		__asm(push(f3), push(i4), op(0x3d))
		i4 =  ((__xasm<int>(push((mstate.ebp+-2412)), op(0x37))))
		__asm(push(f1), push(i4), op(0x3d))
		i4 =  ((__xasm<int>(push((mstate.ebp+-2403)), op(0x37))))
		__asm(push(f2), push(i4), op(0x3d))
		i4 =  ((__xasm<int>(push((mstate.ebp+-2457)), op(0x37))))
		f1 =  ((__xasm<Number>(push(i4), op(0x38))))
		i4 =  ((__xasm<int>(push((mstate.ebp+-2376)), op(0x37))))
		f3 =  ((__xasm<Number>(push(i4), op(0x38))))
		f2 =  f2/*fextend*/
		f4 =  (f2 * f1)
		f5 =  (f3 * f0)
		f0 =  (f0 * f1)
		f1 =  f4/*fround*/
		f2 =  (f2 * f3)
		f3 =  f5/*fround*/
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f1 =  (f1 - f3)
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 + f2)
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		i4 =  ((__xasm<int>(push((mstate.ebp+-2367)), op(0x37))))
		f2 =  ((__xasm<Number>(push(i4), op(0x38))))
		f1 =  f1/*fextend*/
		i4 =  ((__xasm<int>(push((mstate.ebp+-2349)), op(0x37))))
		f3 =  ((__xasm<Number>(push(i4), op(0x38))))
		f0 =  f0/*fextend*/
		f1 =  (f2 - f1)
		f0 =  (f3 - f0)
		f1 =  f1/*fround*/
		i4 =  ((__xasm<int>(push((mstate.ebp+-2430)), op(0x37))))
		__asm(push(f1), push(i4), op(0x3d))
		f1 =  f0/*fround*/
		i4 =  ((__xasm<int>(push((mstate.ebp+-2421)), op(0x37))))
		__asm(push(f1), push(i4), op(0x3d))
		f1 =  ((__xasm<Number>(push(i6), op(0x38))))
		f0 = f1
		//InlineAsmStart
	f0 =  Math.cos(f0);

	//InlineAsmEnd
		f2 = f0
		f0 = f1
		//InlineAsmStart
	f0 =  Math.sin(f0);

	//InlineAsmEnd
		f1 = f0
		f0 =  f1/*fextend*/
		f3 =  -f0
		__asm(push(f2), push(i7), op(0x3d))
		f3 =  f3/*fround*/
		__asm(push(f3), push(i8), op(0x3d))
		__asm(push(f1), push(i9), op(0x3d))
		__asm(push(f2), push(i10), op(0x3d))
		i4 =  ((__xasm<int>(push((mstate.ebp+-2358)), op(0x37))))
		f1 =  ((__xasm<Number>(push(i4), op(0x38))))
		i4 =  ((__xasm<int>(push((mstate.ebp+-2340)), op(0x37))))
		f3 =  ((__xasm<Number>(push(i4), op(0x38))))
		f2 =  f2/*fextend*/
		f4 =  (f2 * f1)
		f5 =  (f3 * f0)
		f0 =  (f0 * f1)
		f1 =  f4/*fround*/
		f2 =  (f2 * f3)
		f3 =  f5/*fround*/
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f1 =  (f1 - f3)
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 + f2)
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		i4 =  ((__xasm<int>(push((mstate.ebp+-2448)), op(0x37))))
		f2 =  ((__xasm<Number>(push(i4), op(0x38))))
		f1 =  f1/*fextend*/
		i4 =  ((__xasm<int>(push((mstate.ebp+-2439)), op(0x37))))
		f3 =  ((__xasm<Number>(push(i4), op(0x38))))
		f0 =  f0/*fextend*/
		f1 =  (f2 - f1)
		f0 =  (f3 - f0)
		f1 =  f1/*fround*/
		__asm(push(f1), push(i12), op(0x3d))
		f1 =  f0/*fround*/
		__asm(push(f1), push(i11), op(0x3d))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_272_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_553_F"))
		f0 = f20
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_475_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_554_F"))
		__asm(jump, target("__Z12b2World_StepPvP8_AS3_Val__XprivateX__BB389_472_B"))
	__asm(lbl("__Z12b2World_StepPvP8_AS3_Val_errState"))
		throw("Invalid state in __Z12b2World_StepPvP8_AS3_Val")
	}
}



// Async
public const __Z11b2World_newPvP8_AS3_Val:int = regFunc(FSM__Z11b2World_newPvP8_AS3_Val.start)

public final class FSM__Z11b2World_newPvP8_AS3_Val extends Machine {

	public static function start():void {
			var result:FSM__Z11b2World_newPvP8_AS3_Val = new FSM__Z11b2World_newPvP8_AS3_Val
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
	public var i8:int, i9:int, i10:int

	public static const intRegCount:int = 11
	public var f0:Number, f1:Number

	public static const NumberRegCount:int = 2
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z11b2World_newPvP8_AS3_Val_entry"))
		__asm(push(state), switchjump(
			"__Z11b2World_newPvP8_AS3_Val_errState",
			"__Z11b2World_newPvP8_AS3_Val_state0",
			"__Z11b2World_newPvP8_AS3_Val_state1",
			"__Z11b2World_newPvP8_AS3_Val_state2",
			"__Z11b2World_newPvP8_AS3_Val_state3",
			"__Z11b2World_newPvP8_AS3_Val_state4",
			"__Z11b2World_newPvP8_AS3_Val_state5",
			"__Z11b2World_newPvP8_AS3_Val_state6",
			"__Z11b2World_newPvP8_AS3_Val_state7",
			"__Z11b2World_newPvP8_AS3_Val_state8",
			"__Z11b2World_newPvP8_AS3_Val_state9",
			"__Z11b2World_newPvP8_AS3_Val_state10",
			"__Z11b2World_newPvP8_AS3_Val_state11"))
	__asm(lbl("__Z11b2World_newPvP8_AS3_Val_state0"))
	__asm(lbl("__Z11b2World_newPvP8_AS3_Val__XprivateX__BB390_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 28
		i0 =  (__2E_str113308)
		mstate.esp -= 24
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((mstate.ebp+-4))
		i3 =  ((mstate.ebp+-24))
		i4 =  ((mstate.ebp+-16))
		i5 =  ((mstate.ebp+-28))
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i5), push((mstate.esp+8)), op(0x3c))
		__asm(push(i4), push((mstate.esp+12)), op(0x3c))
		__asm(push(i3), push((mstate.esp+16)), op(0x3c))
		__asm(push(i2), push((mstate.esp+20)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_ArrayValue])()
		return
	__asm(lbl("__Z11b2World_newPvP8_AS3_Val_state1"))
		mstate.esp += 24
		f0 =  ((__xasm<Number>(push((mstate.ebp+-24)), op(0x39))))
		f1 =  ((__xasm<Number>(push((mstate.ebp+-16)), op(0x39))))
		mstate.esp -= 4
		i0 =  (102996)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z11b2World_newPvP8_AS3_Val_state2"))
		i0 = mstate.eax
		mstate.esp += 4
		i1 =  ((__xasm<int>(push((mstate.ebp+-4)), op(0x37))))
		i2 =  (128)
		__asm(push(i2), push((i0+8)), op(0x3c))
		i2 =  (0)
		__asm(push(i2), push((i0+4)), op(0x3c))
		mstate.esp -= 8
		i3 =  (1024)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i3), push((mstate.esp+4)), op(0x3c))
		i1 =  ((i1==1) ? 1 : 0)
		state = 3
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z11b2World_newPvP8_AS3_Val_state3"))
		i2 = mstate.eax
		mstate.esp += 8
		i1 =  (i1 & 1)
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		i3 = i0
		i4 = i0
	__asm(lbl("__Z11b2World_newPvP8_AS3_Val__XprivateX__BB390_1_F"))
		i5 =  (0)
		__asm(push(i2), push(i0), op(0x3c))
		i6 =  (1024)
		memset(i2, i5, i6)
		i2 =  (i0 + 12)
		i6 =  (56)
		memset(i2, i5, i6)
		i2 =  ((__xasm<int>(push(__ZN16b2BlockAllocator28s_blockSizeLookupInitializedE_2E_b), op(0x35))))
		__asm(push(i2!=0), iftrue, target("__Z11b2World_newPvP8_AS3_Val__XprivateX__BB390_13_F"))
	__asm(lbl("__Z11b2World_newPvP8_AS3_Val__XprivateX__BB390_2_F"))
		i2 =  (__ZN16b2BlockAllocator12s_blockSizesE)
		i5 =  (1)
		i6 =  (0)
		i7 = i6
		__asm(jump, target("__Z11b2World_newPvP8_AS3_Val__XprivateX__BB390_7_F"))
	__asm(lbl("__Z11b2World_newPvP8_AS3_Val__XprivateX__BB390_3_B"), label)
		__asm(push(i7<i5), iftrue, target("__Z11b2World_newPvP8_AS3_Val__XprivateX__BB390_6_F"))
	__asm(lbl("__Z11b2World_newPvP8_AS3_Val__XprivateX__BB390_4_F"))
		i10 =  (i6 + i5)
		__asm(push(i9), push(i10), op(0x3a))
		i5 =  (i5 + 1)
		__asm(push(i5>640), iftrue, target("__Z11b2World_newPvP8_AS3_Val__XprivateX__BB390_12_F"))
	__asm(lbl("__Z11b2World_newPvP8_AS3_Val__XprivateX__BB390_5_F"))
		__asm(jump, target("__Z11b2World_newPvP8_AS3_Val__XprivateX__BB390_3_B"))
	__asm(lbl("__Z11b2World_newPvP8_AS3_Val__XprivateX__BB390_6_F"))
		i6 =  (__ZN16b2BlockAllocator17s_blockSizeLookupE)
		i7 =  (i9 + 1)
		i6 =  (i6 + i5)
		__asm(push(i7), push(i6), op(0x3a))
		i6 =  (i8 + 4)
		i8 =  (i2 + 1)
		i5 =  (i5 + 1)
		i2 = i6
		i6 = i8
	__asm(lbl("__Z11b2World_newPvP8_AS3_Val__XprivateX__BB390_7_F"))
		i8 = i2
		i2 = i6
		i9 = i7
		i7 = i8
		__asm(push(i5>640), iftrue, target("__Z11b2World_newPvP8_AS3_Val__XprivateX__BB390_12_F"))
	__asm(lbl("__Z11b2World_newPvP8_AS3_Val__XprivateX__BB390_8_F"))
		__asm(push(i2>13), iftrue, target("__Z11b2World_newPvP8_AS3_Val__XprivateX__BB390_10_F"))
	__asm(lbl("__Z11b2World_newPvP8_AS3_Val__XprivateX__BB390_9_F"))
		i6 =  (__ZN16b2BlockAllocator17s_blockSizeLookupE)
		i7 =  ((__xasm<int>(push(i7), op(0x37))))
		__asm(jump, target("__Z11b2World_newPvP8_AS3_Val__XprivateX__BB390_3_B"))
	__asm(lbl("__Z11b2World_newPvP8_AS3_Val__XprivateX__BB390_10_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i3 =  (__2E_str79286)
		i4 =  (__ZZN16b2BlockAllocatorC4EvE8__func__)
		i2 =  (__2E_str78285)
		i5 =  (73)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i3), push((mstate.esp+8)), op(0x3c))
		__asm(push(i4), push((mstate.esp+12)), op(0x3c))
		__asm(push(i2), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 4
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z11b2World_newPvP8_AS3_Val_state4"))
		mstate.esp += 24
	__asm(lbl("__Z11b2World_newPvP8_AS3_Val__XprivateX__BB390_11_F"))
		state = 5
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z11b2World_newPvP8_AS3_Val_state5"))
	__asm(lbl("__Z11b2World_newPvP8_AS3_Val__XprivateX__BB390_12_F"))
		i2 =  (1)
		__asm(push(i2), push(__ZN16b2BlockAllocator28s_blockSizeLookupInitializedE_2E_b), op(0x3a))
	__asm(lbl("__Z11b2World_newPvP8_AS3_Val__XprivateX__BB390_13_F"))
		i2 =  (0)
		__asm(push(i2), push((i4+102468)), op(0x3c))
		__asm(push(i2), push((i4+102472)), op(0x3c))
		__asm(push(i2), push((i4+102476)), op(0x3c))
		__asm(push(i2), push((i4+102864)), op(0x3c))
		i5 =  (-1)
		__asm(push(i5), push((i4+102872)), op(0x3c))
		i5 =  (16)
		__asm(push(i5), push((i4+102884)), op(0x3c))
		__asm(push(i2), push((i4+102880)), op(0x3c))
		mstate.esp -= 8
		i5 =  (576)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i5), push((mstate.esp+4)), op(0x3c))
		state = 6
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z11b2World_newPvP8_AS3_Val_state6"))
		i2 = mstate.eax
		mstate.esp += 8
		i5 =  (i4 + 102884)
	__asm(lbl("__Z11b2World_newPvP8_AS3_Val__XprivateX__BB390_14_F"))
		i6 =  (0)
		__asm(push(i2), push((i4+102876)), op(0x3c))
		i7 =  (576)
		memset(i2, i6, i7)
		i2 =  ((__xasm<int>(push(i5), op(0x37))))
		i6 =  ((__xasm<int>(push((i4+102876)), op(0x37))))
		i7 =  (i4 + 102876)
		i8 =  (i2 + -1)
		__asm(push(i8>0), iftrue, target("__Z11b2World_newPvP8_AS3_Val__XprivateX__BB390_16_F"))
	__asm(lbl("__Z11b2World_newPvP8_AS3_Val__XprivateX__BB390_15_F"))
		i5 = i2
		__asm(jump, target("__Z11b2World_newPvP8_AS3_Val__XprivateX__BB390_19_F"))
	__asm(lbl("__Z11b2World_newPvP8_AS3_Val__XprivateX__BB390_16_F"))
		i2 =  (0)
		i8 =  (20)
	__asm(jump, target("__Z11b2World_newPvP8_AS3_Val__XprivateX__BB390_17_F"), lbl("__Z11b2World_newPvP8_AS3_Val__XprivateX__BB390_17_B"), label, lbl("__Z11b2World_newPvP8_AS3_Val__XprivateX__BB390_17_F")); 
		i6 =  (i6 + i8)
		i2 =  (i2 + 1)
		__asm(push(i2), push(i6), op(0x3c))
		i6 =  ((__xasm<int>(push(i5), op(0x37))))
		i9 =  ((__xasm<int>(push(i7), op(0x37))))
		i8 =  (i8 + 36)
		i10 =  (i6 + -1)
		__asm(push(i10>i2), iftrue, target("__Z11b2World_newPvP8_AS3_Val__XprivateX__BB390_25_F"))
	__asm(lbl("__Z11b2World_newPvP8_AS3_Val__XprivateX__BB390_18_F"))
		i5 = i6
		i6 = i9
		__asm(jump, target("__Z11b2World_newPvP8_AS3_Val__XprivateX__BB390_19_F"))
	__asm(lbl("__Z11b2World_newPvP8_AS3_Val__XprivateX__BB390_19_F"))
		i2 = i5
		i5 = i6
		i6 =  (-1)
		i2 =  (i2 * 36)
		i2 =  (i2 + i5)
		__asm(push(i6), push((i2+-16)), op(0x3c))
		i2 =  (0)
		__asm(push(i2), push((i4+102888)), op(0x3c))
		__asm(push(i2), push((i4+102892)), op(0x3c))
		__asm(push(i2), push((i4+102896)), op(0x3c))
		__asm(push(i2), push((i4+102900)), op(0x3c))
		i5 =  (16)
		__asm(push(i5), push((i4+102920)), op(0x3c))
		__asm(push(i2), push((i4+102924)), op(0x3c))
		mstate.esp -= 8
		i5 =  (192)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i5), push((mstate.esp+4)), op(0x3c))
		state = 7
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z11b2World_newPvP8_AS3_Val_state7"))
		i2 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z11b2World_newPvP8_AS3_Val__XprivateX__BB390_20_F"))
		i5 =  (16)
		__asm(push(i2), push((i4+102916)), op(0x3c))
		__asm(push(i5), push((i4+102908)), op(0x3c))
		i2 =  (0)
		__asm(push(i2), push((i4+102912)), op(0x3c))
		mstate.esp -= 8
		i5 =  (64)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i5), push((mstate.esp+4)), op(0x3c))
		state = 8
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z11b2World_newPvP8_AS3_Val_state8"))
		i2 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z11b2World_newPvP8_AS3_Val__XprivateX__BB390_21_F"))
		i5 =  (0)
		__asm(push(i2), push((i4+102904)), op(0x3c))
		__asm(push(i5), push((i4+102932)), op(0x3c))
		__asm(push(i5), push((i4+102936)), op(0x3c))
		i2 =  (_b2_defaultFilter)
		__asm(push(i2), push((i4+102940)), op(0x3c))
		i2 =  (_b2_defaultListener)
		__asm(push(i2), push((i4+102944)), op(0x3c))
		__asm(push(i5), push((i4+102980)), op(0x3c))
		__asm(push(i5), push((i4+102984)), op(0x3c))
		__asm(push(i5), push((i4+102952)), op(0x3c))
		__asm(push(i5), push((i4+102956)), op(0x3c))
		__asm(push(i5), push((i4+102960)), op(0x3c))
		__asm(push(i5), push((i4+102964)), op(0x3c))
		i2 =  (1)
		__asm(push(i2), push((i4+102992)), op(0x3a))
		__asm(push(i2), push((i4+102993)), op(0x3a))
		__asm(push(i5), push((i4+102994)), op(0x3a))
		__asm(push(i2), push((i4+102995)), op(0x3a))
		__asm(push(i1), push((i4+102976)), op(0x3a))
		__asm(push(f1), push((i4+102968)), op(0x3d))
		__asm(push(f0), push((i4+102972)), op(0x3d))
		i1 =  (4)
		__asm(push(i1), push((i4+102868)), op(0x3c))
		__asm(push(i5), push((i4+102988)), op(0x3c))
		__asm(push(i3), push((i4+102948)), op(0x3c))
		mstate.esp -= 4
		i1 =  (12)
		__asm(push(i1), push(mstate.esp), op(0x3c))
		i1 =  (__ZTV13WorldListener)
		state = 9
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z11b2World_newPvP8_AS3_Val_state9"))
		i2 = mstate.eax
		mstate.esp += 4
		i3 =  (i1 + 8)
		__asm(push(i3), push(i2), op(0x3c))
		i1 =  (i1 + 48)
		__asm(push(i1), push((i2+4)), op(0x3c))
		__asm(push(i2), push((i4+102944)), op(0x3c))
		i1 =  (i4 + 102980)
		__asm(push(i2!=0), iftrue, target("__Z11b2World_newPvP8_AS3_Val__XprivateX__BB390_23_F"))
	__asm(lbl("__Z11b2World_newPvP8_AS3_Val__XprivateX__BB390_22_F"))
		i3 =  (0)
		__asm(jump, target("__Z11b2World_newPvP8_AS3_Val__XprivateX__BB390_24_F"))
	__asm(lbl("__Z11b2World_newPvP8_AS3_Val__XprivateX__BB390_23_F"))
		i3 =  (i2 + 4)
	__asm(lbl("__Z11b2World_newPvP8_AS3_Val__XprivateX__BB390_24_F"))
		__asm(push(i3), push(i1), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-28)), op(0x37))))
		__asm(push(i1), push((i2+8)), op(0x3c))
		i1 =  ((__xasm<int>(push(_as3_ptr), op(0x37))))
		mstate.esp -= 4
		__asm(push(i1), push(mstate.esp), op(0x3c))
		state = 10
		mstate.esp -= 4;(mstate.funcs[_AS3_Release])()
		return
	__asm(lbl("__Z11b2World_newPvP8_AS3_Val_state10"))
		mstate.esp += 4
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 11
		mstate.esp -= 4;(mstate.funcs[_AS3_Ptr])()
		return
	__asm(lbl("__Z11b2World_newPvP8_AS3_Val_state11"))
		i0 = mstate.eax
		mstate.esp += 4
		__asm(push(i0), push(_as3_ptr), op(0x3c))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z11b2World_newPvP8_AS3_Val__XprivateX__BB390_25_F"))
		i6 = i9
		__asm(jump, target("__Z11b2World_newPvP8_AS3_Val__XprivateX__BB390_17_B"))
	__asm(lbl("__Z11b2World_newPvP8_AS3_Val_errState"))
		throw("Invalid state in __Z11b2World_newPvP8_AS3_Val")
	}
}



// Async
public const _main:int = regFunc(FSM_main.start)

public final class FSM_main extends Machine {

	public static function start():void {
			var result:FSM_main = new FSM_main
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
	public var i8:int, i9:int, i10:int, i11:int, i12:int, i13:int, i14:int, i15:int
	public var i16:int, i17:int, i18:int, i19:int, i20:int, i21:int, i22:int, i23:int
	public var i24:int, i25:int, i26:int, i27:int, i28:int, i29:int, i30:int, i31:int
	public static const intRegCount:int = 32

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("_main_entry"))
		__asm(push(state), switchjump(
			"_main_errState",
			"_main_state0",
			"_main_state1",
			"_main_state2",
			"_main_state3",
			"_main_state4",
			"_main_state5",
			"_main_state6",
			"_main_state7",
			"_main_state8",
			"_main_state9",
			"_main_state10",
			"_main_state11",
			"_main_state12",
			"_main_state13",
			"_main_state14",
			"_main_state15",
			"_main_state16",
			"_main_state17",
			"_main_state18",
			"_main_state19",
			"_main_state20",
			"_main_state21",
			"_main_state22",
			"_main_state23",
			"_main_state24",
			"_main_state25",
			"_main_state26",
			"_main_state27",
			"_main_state28",
			"_main_state29",
			"_main_state30",
			"_main_state31",
			"_main_state32",
			"_main_state33",
			"_main_state34",
			"_main_state35",
			"_main_state36",
			"_main_state37",
			"_main_state38",
			"_main_state39",
			"_main_state40",
			"_main_state41",
			"_main_state42",
			"_main_state43",
			"_main_state44",
			"_main_state45",
			"_main_state46",
			"_main_state47",
			"_main_state48",
			"_main_state49",
			"_main_state50",
			"_main_state51",
			"_main_state52",
			"_main_state53",
			"_main_state54",
			"_main_state55",
			"_main_state56",
			"_main_state57",
			"_main_state58",
			"_main_state59",
			"_main_state60",
			"_main_state61",
			"_main_state62",
			"_main_state63",
			"_main_state64",
			"_main_state65",
			"_main_state66",
			"_main_state67"))
	__asm(lbl("_main_state0"))
	__asm(lbl("_main__XprivateX__BB391_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 316
		i0 =  (__2E_str35242)
		mstate.esp -= 84
		i1 =  (_b2_maxManifoldPoints)
		i2 =  (_b2_maxPolygonVertices)
		i3 =  (_b2_aabbExtension)
		i4 =  (_b2_aabbMultiplier)
		i5 =  (_b2_linearSlop)
		i6 =  (_b2_angularSlop)
		i7 =  (_b2_polygonRadius)
		i8 =  (_b2_maxSubSteps)
		i9 =  (_b2_maxTOIContacts)
		i10 =  (_b2_velocityThreshold)
		i11 =  (_b2_maxLinearCorrection)
		i12 =  (_b2_maxAngularCorrection)
		i13 =  (_b2_maxTranslation)
		i14 =  (_b2_maxTranslationSquared)
		i15 =  (_b2_maxRotation)
		i16 =  (_b2_maxRotationSquared)
		i17 =  (_b2_contactBaumgarte)
		i18 =  (_b2_timeToSleep)
		i19 =  (_b2_linearSleepTolerance)
		i20 =  (_b2_angularSleepTolerance)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		__asm(push(i6), push((mstate.esp+24)), op(0x3c))
		__asm(push(i7), push((mstate.esp+28)), op(0x3c))
		__asm(push(i8), push((mstate.esp+32)), op(0x3c))
		__asm(push(i9), push((mstate.esp+36)), op(0x3c))
		__asm(push(i10), push((mstate.esp+40)), op(0x3c))
		__asm(push(i11), push((mstate.esp+44)), op(0x3c))
		__asm(push(i12), push((mstate.esp+48)), op(0x3c))
		__asm(push(i13), push((mstate.esp+52)), op(0x3c))
		__asm(push(i14), push((mstate.esp+56)), op(0x3c))
		__asm(push(i15), push((mstate.esp+60)), op(0x3c))
		__asm(push(i16), push((mstate.esp+64)), op(0x3c))
		__asm(push(i17), push((mstate.esp+68)), op(0x3c))
		__asm(push(i18), push((mstate.esp+72)), op(0x3c))
		__asm(push(i19), push((mstate.esp+76)), op(0x3c))
		__asm(push(i20), push((mstate.esp+80)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[_AS3_Object])()
		return
	__asm(lbl("_main_state1"))
		i0 = mstate.eax
		__asm(push(i0), push((mstate.ebp+-9)), op(0x3c))
		mstate.esp += 84
		mstate.esp -= 8
		i0 =  (__Z18b2Vec2Array_deletePvP8_AS3_Val)
		i2 =  (0)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 2
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state2"))
		i0 = mstate.eax
		__asm(push(i0), push((mstate.ebp+-18)), op(0x3c))
		mstate.esp += 8
		mstate.esp -= 8
		i0 =  (__Z15b2Vec2Array_newPvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 3
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state3"))
		i0 = mstate.eax
		__asm(push(i0), push((mstate.ebp+-27)), op(0x3c))
		mstate.esp += 8
		mstate.esp -= 8
		i0 =  (__Z18b2LoopShape_deletePvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 4
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state4"))
		i0 = mstate.eax
		__asm(push(i0), push((mstate.ebp+-36)), op(0x3c))
		mstate.esp += 8
		mstate.esp -= 8
		i0 =  (__Z15b2LoopShape_newPvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 5
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state5"))
		i0 = mstate.eax
		__asm(push(i0), push((mstate.ebp+-45)), op(0x3c))
		mstate.esp += 8
		mstate.esp -= 8
		i0 =  (__Z18b2EdgeShape_deletePvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 6
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state6"))
		i0 = mstate.eax
		__asm(push(i0), push((mstate.ebp+-54)), op(0x3c))
		mstate.esp += 8
		mstate.esp -= 8
		i0 =  (__Z15b2EdgeShape_newPvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 7
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state7"))
		i0 = mstate.eax
		__asm(push(i0), push((mstate.ebp+-63)), op(0x3c))
		mstate.esp += 8
		mstate.esp -= 8
		i0 =  (__Z10b2DistancePvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 8
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state8"))
		i0 = mstate.eax
		__asm(push(i0), push((mstate.ebp+-72)), op(0x3c))
		mstate.esp += 8
		mstate.esp -= 8
		i0 =  (__Z21b2SimplexCache_deletePvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 9
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state9"))
		i0 = mstate.eax
		__asm(push(i0), push((mstate.ebp+-81)), op(0x3c))
		mstate.esp += 8
		mstate.esp -= 8
		i0 =  (__Z18b2SimplexCache_newPvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 10
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state10"))
		i0 = mstate.eax
		__asm(push(i0), push((mstate.ebp+-90)), op(0x3c))
		mstate.esp += 8
		mstate.esp -= 8
		i0 =  (__Z23b2DistanceOutput_deletePvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 11
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state11"))
		i0 = mstate.eax
		__asm(push(i0), push((mstate.ebp+-99)), op(0x3c))
		mstate.esp += 8
		mstate.esp -= 8
		i0 =  (__Z20b2DistanceOutput_newPvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 12
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state12"))
		i0 = mstate.eax
		__asm(push(i0), push((mstate.ebp+-108)), op(0x3c))
		mstate.esp += 8
		mstate.esp -= 8
		i0 =  (__Z22b2DistanceInput_deletePvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 13
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state13"))
		i0 = mstate.eax
		__asm(push(i0), push((mstate.ebp+-117)), op(0x3c))
		mstate.esp += 8
		mstate.esp -= 8
		i0 =  (__Z19b2DistanceInput_newPvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 14
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state14"))
		i0 = mstate.eax
		__asm(push(i0), push((mstate.ebp+-126)), op(0x3c))
		mstate.esp += 8
		mstate.esp -= 8
		i0 =  (__Z24b2PolygonShape_DecomposePvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 15
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state15"))
		i0 = mstate.eax
		__asm(push(i0), push((mstate.ebp+-135)), op(0x3c))
		mstate.esp += 8
		mstate.esp -= 8
		i0 =  (__Z18b2Contact_EvaluatePvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 16
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state16"))
		i0 = mstate.eax
		__asm(push(i0), push((mstate.ebp+-144)), op(0x3c))
		mstate.esp += 8
		mstate.esp -= 8
		i0 =  (__Z16b2Contact_UpdatePvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 17
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state17"))
		i0 = mstate.eax
		__asm(push(i0), push((mstate.ebp+-153)), op(0x3c))
		mstate.esp += 8
		mstate.esp -= 8
		i0 =  (__Z17b2MassData_deletePvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 18
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state18"))
		i0 = mstate.eax
		__asm(push(i0), push((mstate.ebp+-162)), op(0x3c))
		mstate.esp += 8
		mstate.esp -= 8
		i0 =  (__Z14b2MassData_newPvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 19
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state19"))
		i0 = mstate.eax
		__asm(push(i0), push((mstate.ebp+-171)), op(0x3c))
		mstate.esp += 8
		mstate.esp -= 8
		i0 =  (__Z21b2RopeJointDef_deletePvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 20
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state20"))
		i0 = mstate.eax
		__asm(push(i0), push((mstate.ebp+-180)), op(0x3c))
		mstate.esp += 8
		mstate.esp -= 8
		i0 =  (__Z18b2RopeJointDef_newPvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 21
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state21"))
		i0 = mstate.eax
		__asm(push(i0), push((mstate.ebp+-189)), op(0x3c))
		mstate.esp += 8
		mstate.esp -= 8
		i0 =  (__Z25b2FrictionJointDef_deletePvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 22
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state22"))
		i0 = mstate.eax
		__asm(push(i0), push((mstate.ebp+-198)), op(0x3c))
		mstate.esp += 8
		mstate.esp -= 8
		i0 =  (__Z22b2FrictionJointDef_newPvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 23
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state23"))
		i0 = mstate.eax
		__asm(push(i0), push((mstate.ebp+-207)), op(0x3c))
		mstate.esp += 8
		mstate.esp -= 8
		i0 =  (__Z21b2WeldJointDef_deletePvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 24
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state24"))
		i0 = mstate.eax
		__asm(push(i0), push((mstate.ebp+-216)), op(0x3c))
		mstate.esp += 8
		mstate.esp -= 8
		i0 =  (__Z18b2WeldJointDef_newPvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 25
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state25"))
		i0 = mstate.eax
		__asm(push(i0), push((mstate.ebp+-225)), op(0x3c))
		mstate.esp += 8
		mstate.esp -= 8
		i0 =  (__Z25b2RevoluteJointDef_deletePvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 26
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state26"))
		i0 = mstate.eax
		__asm(push(i0), push((mstate.ebp+-234)), op(0x3c))
		mstate.esp += 8
		mstate.esp -= 8
		i0 =  (__Z22b2RevoluteJointDef_newPvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 27
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state27"))
		i0 = mstate.eax
		__asm(push(i0), push((mstate.ebp+-243)), op(0x3c))
		mstate.esp += 8
		mstate.esp -= 8
		i0 =  (__Z23b2PulleyJointDef_deletePvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 28
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state28"))
		i0 = mstate.eax
		__asm(push(i0), push((mstate.ebp+-252)), op(0x3c))
		mstate.esp += 8
		mstate.esp -= 8
		i0 =  (__Z20b2PulleyJointDef_newPvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 29
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state29"))
		i0 = mstate.eax
		__asm(push(i0), push((mstate.ebp+-261)), op(0x3c))
		mstate.esp += 8
		mstate.esp -= 8
		i0 =  (__Z26b2PrismaticJointDef_deletePvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 30
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state30"))
		i0 = mstate.eax
		__asm(push(i0), push((mstate.ebp+-270)), op(0x3c))
		mstate.esp += 8
		mstate.esp -= 8
		i0 =  (__Z23b2PrismaticJointDef_newPvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 31
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state31"))
		i0 = mstate.eax
		__asm(push(i0), push((mstate.ebp+-279)), op(0x3c))
		mstate.esp += 8
		mstate.esp -= 8
		i0 =  (__Z22b2MouseJointDef_deletePvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 32
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state32"))
		i0 = mstate.eax
		__asm(push(i0), push((mstate.ebp+-288)), op(0x3c))
		mstate.esp += 8
		mstate.esp -= 8
		i0 =  (__Z19b2MouseJointDef_newPvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 33
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state33"))
		i0 = mstate.eax
		__asm(push(i0), push((mstate.ebp+-297)), op(0x3c))
		mstate.esp += 8
		mstate.esp -= 8
		i0 =  (__Z21b2LineJointDef_deletePvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 34
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state34"))
		i0 = mstate.eax
		__asm(push(i0), push((mstate.ebp+-306)), op(0x3c))
		mstate.esp += 8
		mstate.esp -= 8
		i0 =  (__Z18b2LineJointDef_newPvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 35
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state35"))
		i0 = mstate.eax
		__asm(push(i0), push((mstate.ebp+-315)), op(0x3c))
		mstate.esp += 8
		mstate.esp -= 8
		i0 =  (__Z21b2GearJointDef_deletePvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 36
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state36"))
		i0 = mstate.eax
		mstate.esp += 8
		mstate.esp -= 8
		i1 =  (__Z18b2GearJointDef_newPvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 37
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state37"))
		i1 = mstate.eax
		mstate.esp += 8
		mstate.esp -= 8
		i3 =  (__Z25b2DistanceJointDef_deletePvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i3), push((mstate.esp+4)), op(0x3c))
		state = 38
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state38"))
		i3 = mstate.eax
		mstate.esp += 8
		mstate.esp -= 8
		i4 =  (__Z22b2DistanceJointDef_newPvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i4), push((mstate.esp+4)), op(0x3c))
		state = 39
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state39"))
		i4 = mstate.eax
		mstate.esp += 8
		mstate.esp -= 8
		i5 =  (__Z19b2FixtureDef_deletePvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i5), push((mstate.esp+4)), op(0x3c))
		state = 40
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state40"))
		i5 = mstate.eax
		mstate.esp += 8
		mstate.esp -= 8
		i6 =  (__Z16b2FixtureDef_newPvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i6), push((mstate.esp+4)), op(0x3c))
		state = 41
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state41"))
		i6 = mstate.eax
		mstate.esp += 8
		mstate.esp -= 8
		i7 =  (__Z21b2PolygonShape_deletePvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i7), push((mstate.esp+4)), op(0x3c))
		state = 42
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state42"))
		i7 = mstate.eax
		mstate.esp += 8
		mstate.esp -= 8
		i8 =  (__Z18b2PolygonShape_newPvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i8), push((mstate.esp+4)), op(0x3c))
		state = 43
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state43"))
		i8 = mstate.eax
		mstate.esp += 8
		mstate.esp -= 8
		i9 =  (__Z20b2CircleShape_deletePvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i9), push((mstate.esp+4)), op(0x3c))
		state = 44
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state44"))
		i9 = mstate.eax
		mstate.esp += 8
		mstate.esp -= 8
		i10 =  (__Z17b2CircleShape_newPvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i10), push((mstate.esp+4)), op(0x3c))
		state = 45
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state45"))
		i10 = mstate.eax
		mstate.esp += 8
		mstate.esp -= 8
		i11 =  (__Z16b2BodyDef_deletePvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i11), push((mstate.esp+4)), op(0x3c))
		state = 46
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state46"))
		i11 = mstate.eax
		mstate.esp += 8
		mstate.esp -= 8
		i12 =  (__Z13b2BodyDef_newPvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i12), push((mstate.esp+4)), op(0x3c))
		state = 47
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state47"))
		i12 = mstate.eax
		mstate.esp += 8
		mstate.esp -= 8
		i13 =  (__Z17b2Body_ApplyForcePvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i13), push((mstate.esp+4)), op(0x3c))
		state = 48
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state48"))
		i13 = mstate.eax
		mstate.esp += 8
		mstate.esp -= 8
		i14 =  (__Z14b2Body_SetTypePvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i14), push((mstate.esp+4)), op(0x3c))
		state = 49
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state49"))
		i14 = mstate.eax
		mstate.esp += 8
		mstate.esp -= 8
		i15 =  (__Z16b2Body_SetActivePvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i15), push((mstate.esp+4)), op(0x3c))
		state = 50
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state50"))
		i15 = mstate.eax
		mstate.esp += 8
		mstate.esp -= 8
		i16 =  (__Z18b2Body_SetMassDataPvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i16), push((mstate.esp+4)), op(0x3c))
		state = 51
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state51"))
		i16 = mstate.eax
		mstate.esp += 8
		mstate.esp -= 8
		i17 =  (__Z18b2Body_GetMassDataPvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i17), push((mstate.esp+4)), op(0x3c))
		state = 52
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state52"))
		i17 = mstate.eax
		mstate.esp += 8
		mstate.esp -= 8
		i18 =  (__Z20b2Body_ResetMassDataPvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i18), push((mstate.esp+4)), op(0x3c))
		state = 53
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state53"))
		i18 = mstate.eax
		mstate.esp += 8
		mstate.esp -= 8
		i19 =  (__Z19b2Body_SetTransformPvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i19), push((mstate.esp+4)), op(0x3c))
		state = 54
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state54"))
		i19 = mstate.eax
		mstate.esp += 8
		mstate.esp -= 8
		i20 =  (__Z21b2Body_DestroyFixturePvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i20), push((mstate.esp+4)), op(0x3c))
		state = 55
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state55"))
		i20 = mstate.eax
		mstate.esp += 8
		mstate.esp -= 8
		i21 =  (__Z20b2Body_CreateFixturePvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i21), push((mstate.esp+4)), op(0x3c))
		state = 56
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state56"))
		i21 = mstate.eax
		mstate.esp += 8
		mstate.esp -= 8
		i22 =  (__Z15b2World_RayCastPvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i22), push((mstate.esp+4)), op(0x3c))
		state = 57
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state57"))
		i22 = mstate.eax
		mstate.esp += 8
		mstate.esp -= 8
		i23 =  (__Z17b2World_QueryAABBPvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i23), push((mstate.esp+4)), op(0x3c))
		state = 58
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state58"))
		i23 = mstate.eax
		mstate.esp += 8
		mstate.esp -= 8
		i24 =  (__Z14b2World_deletePvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i24), push((mstate.esp+4)), op(0x3c))
		state = 59
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state59"))
		i24 = mstate.eax
		mstate.esp += 8
		mstate.esp -= 8
		i25 =  (__Z20b2World_DestroyJointPvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i25), push((mstate.esp+4)), op(0x3c))
		state = 60
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state60"))
		i25 = mstate.eax
		mstate.esp += 8
		mstate.esp -= 8
		i26 =  (__Z19b2World_CreateJointPvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i26), push((mstate.esp+4)), op(0x3c))
		state = 61
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state61"))
		i26 = mstate.eax
		mstate.esp += 8
		mstate.esp -= 8
		i27 =  (__Z19b2World_DestroyBodyPvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i27), push((mstate.esp+4)), op(0x3c))
		state = 62
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state62"))
		i27 = mstate.eax
		mstate.esp += 8
		mstate.esp -= 8
		i28 =  (__Z18b2World_CreateBodyPvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i28), push((mstate.esp+4)), op(0x3c))
		state = 63
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state63"))
		i28 = mstate.eax
		mstate.esp += 8
		mstate.esp -= 8
		i29 =  (__Z12b2World_StepPvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i29), push((mstate.esp+4)), op(0x3c))
		state = 64
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state64"))
		i29 = mstate.eax
		mstate.esp += 8
		mstate.esp -= 8
		i30 =  (__Z11b2World_newPvP8_AS3_Val)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i30), push((mstate.esp+4)), op(0x3c))
		state = 65
		mstate.esp -= 4;(mstate.funcs[_AS3_Function])()
		return
	__asm(lbl("_main_state65"))
		i30 = mstate.eax
		mstate.esp += 8
		mstate.esp -= 264
		i31 =  (__2E_str36243)
		__asm(push(i31), push(mstate.esp), op(0x3c))
		__asm(push(i30), push((mstate.esp+4)), op(0x3c))
		__asm(push(i29), push((mstate.esp+8)), op(0x3c))
		__asm(push(i28), push((mstate.esp+12)), op(0x3c))
		__asm(push(i27), push((mstate.esp+16)), op(0x3c))
		__asm(push(i26), push((mstate.esp+20)), op(0x3c))
		__asm(push(i25), push((mstate.esp+24)), op(0x3c))
		__asm(push(i24), push((mstate.esp+28)), op(0x3c))
		__asm(push(i23), push((mstate.esp+32)), op(0x3c))
		__asm(push(i22), push((mstate.esp+36)), op(0x3c))
		__asm(push(i21), push((mstate.esp+40)), op(0x3c))
		__asm(push(i20), push((mstate.esp+44)), op(0x3c))
		__asm(push(i19), push((mstate.esp+48)), op(0x3c))
		__asm(push(i18), push((mstate.esp+52)), op(0x3c))
		__asm(push(i17), push((mstate.esp+56)), op(0x3c))
		__asm(push(i16), push((mstate.esp+60)), op(0x3c))
		__asm(push(i15), push((mstate.esp+64)), op(0x3c))
		__asm(push(i14), push((mstate.esp+68)), op(0x3c))
		__asm(push(i13), push((mstate.esp+72)), op(0x3c))
		__asm(push(i12), push((mstate.esp+76)), op(0x3c))
		__asm(push(i11), push((mstate.esp+80)), op(0x3c))
		__asm(push(i10), push((mstate.esp+84)), op(0x3c))
		__asm(push(i9), push((mstate.esp+88)), op(0x3c))
		__asm(push(i8), push((mstate.esp+92)), op(0x3c))
		__asm(push(i7), push((mstate.esp+96)), op(0x3c))
		__asm(push(i6), push((mstate.esp+100)), op(0x3c))
		__asm(push(i5), push((mstate.esp+104)), op(0x3c))
		__asm(push(i4), push((mstate.esp+108)), op(0x3c))
		__asm(push(i3), push((mstate.esp+112)), op(0x3c))
		__asm(push(i1), push((mstate.esp+116)), op(0x3c))
		__asm(push(i0), push((mstate.esp+120)), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+-315)), op(0x37))))
		__asm(push(i0), push((mstate.esp+124)), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+-306)), op(0x37))))
		__asm(push(i0), push((mstate.esp+128)), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+-297)), op(0x37))))
		__asm(push(i0), push((mstate.esp+132)), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+-288)), op(0x37))))
		__asm(push(i0), push((mstate.esp+136)), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+-279)), op(0x37))))
		__asm(push(i0), push((mstate.esp+140)), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+-270)), op(0x37))))
		__asm(push(i0), push((mstate.esp+144)), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+-261)), op(0x37))))
		__asm(push(i0), push((mstate.esp+148)), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+-252)), op(0x37))))
		__asm(push(i0), push((mstate.esp+152)), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+-243)), op(0x37))))
		__asm(push(i0), push((mstate.esp+156)), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+-234)), op(0x37))))
		__asm(push(i0), push((mstate.esp+160)), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+-225)), op(0x37))))
		__asm(push(i0), push((mstate.esp+164)), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+-216)), op(0x37))))
		__asm(push(i0), push((mstate.esp+168)), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+-207)), op(0x37))))
		__asm(push(i0), push((mstate.esp+172)), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+-198)), op(0x37))))
		__asm(push(i0), push((mstate.esp+176)), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+-189)), op(0x37))))
		__asm(push(i0), push((mstate.esp+180)), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+-180)), op(0x37))))
		__asm(push(i0), push((mstate.esp+184)), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+-171)), op(0x37))))
		__asm(push(i0), push((mstate.esp+188)), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+-162)), op(0x37))))
		__asm(push(i0), push((mstate.esp+192)), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+-153)), op(0x37))))
		__asm(push(i0), push((mstate.esp+196)), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+-144)), op(0x37))))
		__asm(push(i0), push((mstate.esp+200)), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+-135)), op(0x37))))
		__asm(push(i0), push((mstate.esp+204)), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+-126)), op(0x37))))
		__asm(push(i0), push((mstate.esp+208)), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+-117)), op(0x37))))
		__asm(push(i0), push((mstate.esp+212)), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+-108)), op(0x37))))
		__asm(push(i0), push((mstate.esp+216)), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+-99)), op(0x37))))
		__asm(push(i0), push((mstate.esp+220)), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+-90)), op(0x37))))
		__asm(push(i0), push((mstate.esp+224)), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+-81)), op(0x37))))
		__asm(push(i0), push((mstate.esp+228)), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+-72)), op(0x37))))
		__asm(push(i0), push((mstate.esp+232)), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+-63)), op(0x37))))
		__asm(push(i0), push((mstate.esp+236)), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+-54)), op(0x37))))
		__asm(push(i0), push((mstate.esp+240)), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+-45)), op(0x37))))
		__asm(push(i0), push((mstate.esp+244)), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+-36)), op(0x37))))
		__asm(push(i0), push((mstate.esp+248)), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+-27)), op(0x37))))
		__asm(push(i0), push((mstate.esp+252)), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+-18)), op(0x37))))
		__asm(push(i0), push((mstate.esp+256)), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+-9)), op(0x37))))
		__asm(push(i0), push((mstate.esp+260)), op(0x3c))
		state = 66
		mstate.esp -= 4;(mstate.funcs[_AS3_Object])()
		return
	__asm(lbl("_main_state66"))
		i1 = mstate.eax
		mstate.esp += 264
		i0 =  (1)
				state = 67
	__asm(lbl("_main_state67"))
//InlineAsmStart
	if(i0) throw (i0 = 0, new AlchemyLibInit(i1));//!!ASYNC
	//InlineAsmEnd
		mstate.eax = i2
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("_main_errState"))
		throw("Invalid state in _main")
	}
}



// Sync
public const __ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2_:int = regFunc(FSM__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2_.start)

public final class FSM__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2_ extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
		var i8:int, i9:int


		__asm(label, lbl("__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2__entry"))
	__asm(lbl("__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2___XprivateX__BB392_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 16
		i0 =  ((__xasm<int>(push((mstate.ebp+20)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+24)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		__asm(push(i0), push((mstate.ebp+-16)), op(0x3c))
		__asm(push(i1), push((mstate.ebp+-12)), op(0x3c))
		i0 =  (i2 << 1)
		i1 =  ((__xasm<int>(push((mstate.ebp+28)), op(0x37))))
		__asm(push(i1), push((mstate.ebp+-8)), op(0x3c))
		i1 =  (i0 + 2)
		i3 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i4 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		__asm(push(i1<i4), iftrue, target("__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2___XprivateX__BB392_2_F"))
	__asm(lbl("__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2___XprivateX__BB392_1_F"))
		i5 = i2
		__asm(jump, target("__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2___XprivateX__BB392_10_F"))
	__asm(lbl("__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2___XprivateX__BB392_2_F"))
		i5 = i2
	__asm(jump, target("__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2___XprivateX__BB392_3_F"), lbl("__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2___XprivateX__BB392_3_B"), label, lbl("__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2___XprivateX__BB392_3_F")); 
		i0 =  (i0 | 1)
		i6 =  (i0 * 12)
		i7 =  (i1 * 12)
		i6 =  (i3 + i6)
		i7 =  (i3 + i7)
		i7 =  ((__xasm<int>(push(i7), op(0x37))))
		i6 =  ((__xasm<int>(push(i6), op(0x37))))
		__asm(push(i7>=i6), iftrue, target("__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2___XprivateX__BB392_5_F"))
	__asm(lbl("__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2___XprivateX__BB392_4_F"))
		i6 =  (0)
		__asm(jump, target("__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2___XprivateX__BB392_8_F"))
	__asm(lbl("__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2___XprivateX__BB392_5_F"))
		__asm(push(i7==i6), iftrue, target("__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2___XprivateX__BB392_7_F"))
	__asm(lbl("__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2___XprivateX__BB392_6_F"))
		i6 =  (1)
		__asm(jump, target("__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2___XprivateX__BB392_8_F"))
	__asm(lbl("__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2___XprivateX__BB392_7_F"))
		i6 =  (i0 * 12)
		i7 =  (i1 * 12)
		i6 =  (i3 + i6)
		i7 =  (i3 + i7)
		i7 =  ((__xasm<int>(push((i7+4)), op(0x37))))
		i6 =  ((__xasm<int>(push((i6+4)), op(0x37))))
		i6 =  ((i7>=i6) ? 1 : 0)
	__asm(lbl("__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2___XprivateX__BB392_8_F"))
		i6 =  (i6 & 1)
		i0 =  ((i6!=0) ? i1 : i0)
		i1 =  (i0 * 12)
		i5 =  (i5 * 12)
		i1 =  (i3 + i1)
		i6 =  ((__xasm<int>(push(i1), op(0x37))))
		i5 =  (i3 + i5)
		__asm(push(i6), push(i5), op(0x3c))
		i6 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		__asm(push(i6), push((i5+4)), op(0x3c))
		i1 =  ((__xasm<int>(push((i1+8)), op(0x37))))
		i6 =  (i0 << 1)
		__asm(push(i1), push((i5+8)), op(0x3c))
		i1 =  (i6 + 2)
		__asm(push(i1<i4), iftrue, target("__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2___XprivateX__BB392_26_F"))
	__asm(lbl("__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2___XprivateX__BB392_9_F"))
		i5 = i0
		i0 = i6
		__asm(jump, target("__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2___XprivateX__BB392_10_F"))
	__asm(lbl("__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2___XprivateX__BB392_10_F"))
		__asm(push(i1==i4), iftrue, target("__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2___XprivateX__BB392_12_F"))
	__asm(lbl("__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2___XprivateX__BB392_11_F"))
		i0 = i5
		__asm(jump, target("__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2___XprivateX__BB392_13_F"))
	__asm(lbl("__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2___XprivateX__BB392_12_F"))
		i0 =  (i0 | 1)
		i1 =  (i0 * 12)
		i4 =  (i5 * 12)
		i1 =  (i3 + i1)
		i5 =  ((__xasm<int>(push(i1), op(0x37))))
		i4 =  (i3 + i4)
		__asm(push(i5), push(i4), op(0x3c))
		i5 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		__asm(push(i5), push((i4+4)), op(0x3c))
		i1 =  ((__xasm<int>(push((i1+8)), op(0x37))))
		__asm(push(i1), push((i4+8)), op(0x3c))
	__asm(lbl("__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2___XprivateX__BB392_13_F"))
		i1 =  (i0 + -1)
		i4 =  (i1 >>> 31)
		i1 =  (i1 + i4)
		i4 =  ((__xasm<int>(push((mstate.ebp+-16)), op(0x37))))
		i5 =  ((__xasm<int>(push((mstate.ebp+-12)), op(0x37))))
		i6 =  ((__xasm<int>(push((mstate.ebp+-8)), op(0x37))))
		i1 =  (i1 >> 1)
		__asm(push(i0>i2), iftrue, target("__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2___XprivateX__BB392_15_F"))
	__asm(lbl("__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2___XprivateX__BB392_14_F"))
		__asm(jump, target("__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2___XprivateX__BB392_23_F"))
	__asm(lbl("__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2___XprivateX__BB392_15_F"))
		__asm(jump, target("__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2___XprivateX__BB392_19_F"))
	__asm(lbl("__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2___XprivateX__BB392_16_B"), label)
		i8 =  (i1 * 12)
		i8 =  (i3 + i8)
		i9 =  ((__xasm<int>(push(i8), op(0x37))))
		__asm(push(i9), push(i7), op(0x3c))
		i0 =  (i0 * 12)
		i7 =  (i1 + -1)
		i9 =  ((__xasm<int>(push((i8+4)), op(0x37))))
		i0 =  (i3 + i0)
		__asm(push(i9), push((i0+4)), op(0x3c))
		i9 =  (i7 >>> 31)
		i8 =  ((__xasm<int>(push((i8+8)), op(0x37))))
		i7 =  (i7 + i9)
		__asm(push(i8), push((i0+8)), op(0x3c))
		i7 =  (i7 >> 1)
		__asm(push(i1>i2), iftrue, target("__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2___XprivateX__BB392_18_F"))
	__asm(lbl("__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2___XprivateX__BB392_17_F"))
		i0 = i1
		i1 = i7
		__asm(jump, target("__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2___XprivateX__BB392_23_F"))
	__asm(lbl("__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2___XprivateX__BB392_18_F"))
		i0 = i1
		i1 = i7
	__asm(lbl("__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2___XprivateX__BB392_19_F"))
		i7 =  (i1 * 12)
		i7 =  (i3 + i7)
		i7 =  ((__xasm<int>(push(i7), op(0x37))))
		__asm(push(i7>=i4), iftrue, target("__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2___XprivateX__BB392_21_F"))
	__asm(jump, target("__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2___XprivateX__BB392_20_F"), lbl("__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2___XprivateX__BB392_20_B"), label, lbl("__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2___XprivateX__BB392_20_F")); 
		i7 =  (0)
		__asm(jump, target("__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2___XprivateX__BB392_24_F"))
	__asm(lbl("__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2___XprivateX__BB392_21_F"))
		__asm(push(i7==i4), iftrue, target("__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2___XprivateX__BB392_27_F"))
	__asm(jump, target("__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2___XprivateX__BB392_22_F"), lbl("__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2___XprivateX__BB392_22_B"), label, lbl("__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2___XprivateX__BB392_22_F")); 
		__asm(jump, target("__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2___XprivateX__BB392_23_F"))
	__asm(lbl("__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2___XprivateX__BB392_23_F"))
		i7 =  (1)
	__asm(lbl("__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2___XprivateX__BB392_24_F"))
		i8 =  (i0 * 12)
		i9 =  (i7 ^ 1)
		i7 =  (i3 + i8)
		i8 =  (i9 & 1)
		__asm(push(i8!=0), iftrue, target("__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2___XprivateX__BB392_16_B"))
	__asm(lbl("__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2___XprivateX__BB392_25_F"))
		i0 =  (i0 * 12)
		__asm(push(i4), push(i7), op(0x3c))
		i0 =  (i3 + i0)
		__asm(push(i5), push((i0+4)), op(0x3c))
		__asm(push(i6), push((i0+8)), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	__asm(lbl("__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2___XprivateX__BB392_26_F"))
		i5 = i0
		i0 = i6
		__asm(jump, target("__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2___XprivateX__BB392_3_B"))
	__asm(lbl("__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2___XprivateX__BB392_27_F"))
		i7 =  (i1 * 12)
		i7 =  (i3 + i7)
		i7 =  ((__xasm<int>(push((i7+4)), op(0x37))))
		__asm(push(i7>=i5), iftrue, target("__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2___XprivateX__BB392_22_B"))
		__asm(jump, target("__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2___XprivateX__BB392_20_B"))
	}
}



// Async
public const ___tcf_0:int = regFunc(FSM___tcf_0.start)

public final class FSM___tcf_0 extends Machine {

	public static function start():void {
			var result:FSM___tcf_0 = new FSM___tcf_0
		gstate.gworker = result
	}

	public var i0:int

	public static const intRegCount:int = 1

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("___tcf_0_entry"))
		__asm(push(state), switchjump(
			"___tcf_0_errState",
			"___tcf_0_state0"))
	__asm(lbl("___tcf_0_state0"))
	__asm(lbl("___tcf_0__XprivateX__BB393_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV15b2ContactFilter)
		i0 =  (i0 + 8)
		__asm(push(i0), push(_b2_defaultFilter), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("___tcf_0_errState"))
		throw("Invalid state in ___tcf_0")
	}
}



// Async
public const ___tcf_1:int = regFunc(FSM___tcf_1.start)

public final class FSM___tcf_1 extends Machine {

	public static function start():void {
			var result:FSM___tcf_1 = new FSM___tcf_1
		gstate.gworker = result
	}

	public var i0:int

	public static const intRegCount:int = 1

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("___tcf_1_entry"))
		__asm(push(state), switchjump(
			"___tcf_1_errState",
			"___tcf_1_state0"))
	__asm(lbl("___tcf_1_state0"))
	__asm(lbl("___tcf_1__XprivateX__BB394_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (__ZTV17b2ContactListener)
		i0 =  (i0 + 8)
		__asm(push(i0), push(_b2_defaultListener), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("___tcf_1_errState"))
		throw("Invalid state in ___tcf_1")
	}
}



// Sync
public const __Z19b2ClipSegmentToLineP12b2ClipVertexPKS_RK6b2Vec2fi342:int = regFunc(FSM__Z19b2ClipSegmentToLineP12b2ClipVertexPKS_RK6b2Vec2fi342.start)

public final class FSM__Z19b2ClipSegmentToLineP12b2ClipVertexPKS_RK6b2Vec2fi342 extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
		var i8:int, i9:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number

		__asm(label, lbl("__Z19b2ClipSegmentToLineP12b2ClipVertexPKS_RK6b2Vec2fi342_entry"))
	__asm(lbl("__Z19b2ClipSegmentToLineP12b2ClipVertexPKS_RK6b2Vec2fi342__XprivateX__BB395_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		f0 =  (0)
		i0 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		f1 =  ((__xasm<Number>(push(i0), op(0x38))))
		f2 =  ((__xasm<Number>(push((i0+4)), op(0x38))))
		f3 =  ((__xasm<Number>(push((mstate.ebp+20)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i0+16)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i0+12)), op(0x38))))
		f6 =  ((__xasm<Number>(push((mstate.ebp+16)), op(0x38))))
		f7 =  f1/*fextend*/
		f7 =  (f7 * f6)
		f2 =  (f2 * f3)
		f5 =  (f5 * f6)
		f3 =  (f4 * f3)
		f4 =  f7/*fround*/
		f2 =  f2/*fround*/
		f5 =  f5/*fround*/
		f3 =  f3/*fround*/
		f2 =  f2/*fextend*/
		f4 =  f4/*fextend*/
		f3 =  f3/*fextend*/
		f5 =  f5/*fextend*/
		f2 =  (f4 + f2)
		f3 =  (f5 + f3)
		f2 =  f2/*fround*/
		f3 =  f3/*fround*/
		f4 =  ((__xasm<Number>(push((mstate.ebp+24)), op(0x38))))
		f2 =  f2/*fextend*/
		f3 =  f3/*fextend*/
		f2 =  (f2 - f4)
		f3 =  (f3 - f4)
		f2 =  f2/*fround*/
		f3 =  f3/*fround*/
		i1 =  (i0 + 16)
		i2 =  (i0 + 12)
		i3 =  (i0 + 4)
		i4 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i5 =  ((__xasm<int>(push((mstate.ebp+28)), op(0x37))))
		f0 =  f0/*fround*/
		i6 = i0
		f0 =  f0/*fextend*/
		f4 =  f2/*fextend*/
		__asm(push(f4<=f0), iftrue, target("__Z19b2ClipSegmentToLineP12b2ClipVertexPKS_RK6b2Vec2fi342__XprivateX__BB395_2_F"))
	__asm(lbl("__Z19b2ClipSegmentToLineP12b2ClipVertexPKS_RK6b2Vec2fi342__XprivateX__BB395_1_F"))
		i7 =  (0)
		__asm(jump, target("__Z19b2ClipSegmentToLineP12b2ClipVertexPKS_RK6b2Vec2fi342__XprivateX__BB395_3_F"))
	__asm(lbl("__Z19b2ClipSegmentToLineP12b2ClipVertexPKS_RK6b2Vec2fi342__XprivateX__BB395_2_F"))
		i7 =  (1)
		__asm(push(f1), push(i4), op(0x3d))
		f0 =  ((__xasm<Number>(push(i3), op(0x38))))
		__asm(push(f0), push((i4+4)), op(0x3d))
		i8 =  ((__xasm<int>(push((i0+8)), op(0x37))))
		__asm(push(i8), push((i4+8)), op(0x3c))
	__asm(lbl("__Z19b2ClipSegmentToLineP12b2ClipVertexPKS_RK6b2Vec2fi342__XprivateX__BB395_3_F"))
		f0 =  (0)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f1 =  f3/*fextend*/
		__asm(push(f1<=f0), iftrue, target("__Z19b2ClipSegmentToLineP12b2ClipVertexPKS_RK6b2Vec2fi342__XprivateX__BB395_5_F"))
	__asm(lbl("__Z19b2ClipSegmentToLineP12b2ClipVertexPKS_RK6b2Vec2fi342__XprivateX__BB395_4_F"))
		__asm(jump, target("__Z19b2ClipSegmentToLineP12b2ClipVertexPKS_RK6b2Vec2fi342__XprivateX__BB395_6_F"))
	__asm(lbl("__Z19b2ClipSegmentToLineP12b2ClipVertexPKS_RK6b2Vec2fi342__XprivateX__BB395_5_F"))
		i8 =  (i7 * 12)
		f0 =  ((__xasm<Number>(push(i2), op(0x38))))
		i8 =  (i4 + i8)
		__asm(push(f0), push(i8), op(0x3d))
		f0 =  ((__xasm<Number>(push(i1), op(0x38))))
		__asm(push(f0), push((i8+4)), op(0x3d))
		i9 =  ((__xasm<int>(push((i0+20)), op(0x37))))
		__asm(push(i9), push((i8+8)), op(0x3c))
		i7 =  (i7 + 1)
	__asm(lbl("__Z19b2ClipSegmentToLineP12b2ClipVertexPKS_RK6b2Vec2fi342__XprivateX__BB395_6_F"))
		f0 =  (0)
		f1 =  f3/*fextend*/
		f4 =  f2/*fextend*/
		f1 =  (f4 * f1)
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		__asm(push(f1>=f0), iftrue, target("__Z19b2ClipSegmentToLineP12b2ClipVertexPKS_RK6b2Vec2fi342__XprivateX__BB395_8_F"))
	__asm(lbl("__Z19b2ClipSegmentToLineP12b2ClipVertexPKS_RK6b2Vec2fi342__XprivateX__BB395_7_F"))
		i8 =  (0)
		f0 =  f3/*fextend*/
		f1 =  f2/*fextend*/
		f0 =  (f1 - f0)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f2 =  ((__xasm<Number>(push(i2), op(0x38))))
		f3 =  ((__xasm<Number>(push(i6), op(0x38))))
		f0 =  (f1 / f0)
		f1 =  (f2 - f3)
		f2 =  ((__xasm<Number>(push(i1), op(0x38))))
		f4 =  ((__xasm<Number>(push(i3), op(0x38))))
		f0 =  f0/*fround*/
		f2 =  (f2 - f4)
		f1 =  f1/*fround*/
		f2 =  f2/*fround*/
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		f2 =  f2/*fextend*/
		f1 =  (f1 * f0)
		f0 =  (f2 * f0)
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		f1 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		f1 =  (f3 + f1)
		i1 =  (i7 * 12)
		f0 =  (f4 + f0)
		f1 =  f1/*fround*/
		i1 =  (i4 + i1)
		__asm(push(f1), push(i1), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push((i1+4)), op(0x3d))
		__asm(push(i5), push((i1+8)), op(0x3a))
		i0 =  ((__xasm<int>(push((i0+9)), op(0x35))))
		__asm(push(i0), push((i1+9)), op(0x3a))
		__asm(push(i8), push((i1+10)), op(0x3a))
		i0 =  (1)
		__asm(push(i0), push((i1+11)), op(0x3a))
		i7 =  (i7 + 1)
	__asm(lbl("__Z19b2ClipSegmentToLineP12b2ClipVertexPKS_RK6b2Vec2fi342__XprivateX__BB395_8_F"))
		mstate.eax = i7
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Async
public const __Z16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4_:int = regFunc(FSM__Z16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4_.start)

public final class FSM__Z16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4_ extends Machine {

	public static function start():void {
			var result:FSM__Z16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4_ = new FSM__Z16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4_
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
	public var i8:int

	public static const intRegCount:int = 9
	public var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number
	public var f8:Number, f9:Number, f10:Number, f11:Number, f12:Number, f13:Number, f14:Number, f15:Number
	public var f16:Number

	public static const NumberRegCount:int = 17
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4__entry"))
		__asm(push(state), switchjump(
			"__Z16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4__errState",
			"__Z16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4__state0",
			"__Z16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4__state1",
			"__Z16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4__state2"))
	__asm(lbl("__Z16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4__state0"))
	__asm(lbl("__Z16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4___XprivateX__BB396_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+20)), op(0x37))))
		i2 =  ((__xasm<int>(push((i0+152)), op(0x37))))
		i3 =  ((__xasm<int>(push((i1+152)), op(0x37))))
		i4 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i5 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i6 =  ((__xasm<int>(push((mstate.ebp+24)), op(0x37))))
		i7 = i1
		__asm(push(i2<=i5), iftrue, target("__Z16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4___XprivateX__BB396_2_F"))
	__asm(lbl("__Z16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4___XprivateX__BB396_1_F"))
		__asm(push(i5>-1), iftrue, target("__Z16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4___XprivateX__BB396_3_F"))
	__asm(lbl("__Z16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4___XprivateX__BB396_2_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i3 =  (__2E_str43250)
		i4 =  (__ZZ16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4_E8__func__)
		i5 =  (__2E_str58265)
		i6 =  (33)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i3), push((mstate.esp+8)), op(0x3c))
		__asm(push(i4), push((mstate.esp+12)), op(0x3c))
		__asm(push(i5), push((mstate.esp+16)), op(0x3c))
		__asm(push(i6), push((mstate.esp+20)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4__state1"))
		mstate.esp += 24
		state = 2
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4__state2"))
	__asm(lbl("__Z16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4___XprivateX__BB396_3_F"))
		i2 =  (i5 << 3)
		f0 =  ((__xasm<Number>(push((i4+12)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i4+20)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i4+8)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i4+16)), op(0x38))))
		i2 =  (i0 + i2)
		f4 =  ((__xasm<Number>(push((i2+88)), op(0x38))))
		f5 =  f2/*fextend*/
		f6 =  f0/*fextend*/
		f7 =  ((__xasm<Number>(push((i2+92)), op(0x38))))
		f8 =  f1/*fextend*/
		f9 =  f3/*fextend*/
		f5 =  (f5 * f4)
		f8 =  (f8 * f7)
		f7 =  (f9 * f7)
		f4 =  (f6 * f4)
		f5 =  f5/*fround*/
		f6 =  f8/*fround*/
		f7 =  f7/*fround*/
		f4 =  f4/*fround*/
		f7 =  f7/*fextend*/
		f5 =  f5/*fextend*/
		f6 =  f6/*fextend*/
		f4 =  f4/*fextend*/
		f5 =  (f5 + f7)
		f4 =  (f4 + f6)
		f6 =  ((__xasm<Number>(push((i6+16)), op(0x38))))
		f7 =  ((__xasm<Number>(push((i6+20)), op(0x38))))
		f8 =  ((__xasm<Number>(push((i6+8)), op(0x38))))
		f9 =  ((__xasm<Number>(push((i6+12)), op(0x38))))
		f5 =  f5/*fround*/
		f4 =  f4/*fround*/
		f10 =  f6/*fextend*/
		f11 =  f5/*fextend*/
		f12 =  f8/*fextend*/
		f13 =  f7/*fextend*/
		f14 =  f4/*fextend*/
		f15 =  f9/*fextend*/
		f10 =  (f11 * f10)
		f11 =  (f11 * f12)
		f12 =  (f14 * f13)
		f13 =  (f14 * f15)
		f10 =  f10/*fround*/
		f11 =  f11/*fround*/
		f12 =  f12/*fround*/
		f13 =  f13/*fround*/
		f12 =  f12/*fextend*/
		f10 =  f10/*fextend*/
		f13 =  f13/*fextend*/
		f11 =  f11/*fextend*/
		f10 =  (f10 + f12)
		f11 =  (f11 + f13)
		f10 =  f10/*fround*/
		f11 =  f11/*fround*/
		__asm(push(i3>0), iftrue, target("__Z16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4___XprivateX__BB396_5_F"))
	__asm(lbl("__Z16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4___XprivateX__BB396_4_F"))
		i3 =  (0)
		__asm(jump, target("__Z16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4___XprivateX__BB396_9_F"))
	__asm(lbl("__Z16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4___XprivateX__BB396_5_F"))
		f12 =  (3.40282e+38)
		f12 =  f12/*fround*/
		i2 =  (0)
		i8 = i2
	__asm(jump, target("__Z16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4___XprivateX__BB396_6_F"), lbl("__Z16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4___XprivateX__BB396_6_B"), label, lbl("__Z16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4___XprivateX__BB396_6_F")); 
		f13 =  ((__xasm<Number>(push((i7+24)), op(0x38))))
		f14 =  ((__xasm<Number>(push((i7+28)), op(0x38))))
		f15 =  f11/*fextend*/
		f16 =  f10/*fextend*/
		f13 =  (f13 * f15)
		f14 =  (f14 * f16)
		f13 =  f13/*fround*/
		f14 =  f14/*fround*/
		f14 =  f14/*fextend*/
		f13 =  f13/*fextend*/
		f13 =  (f13 + f14)
		f13 =  f13/*fround*/
		f12 =  f12/*fextend*/
		f13 =  f13/*fextend*/
		f14 =  ((f13<f12) ? f13 : f12)
		i2 =  ((f13<f12) ? i8 : i2)
		f12 =  f14/*fround*/
		i7 =  (i7 + 8)
		i8 =  (i8 + 1)
		__asm(push(i8==i3), iftrue, target("__Z16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4___XprivateX__BB396_8_F"))
	__asm(lbl("__Z16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4___XprivateX__BB396_7_F"))
		__asm(jump, target("__Z16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4___XprivateX__BB396_6_B"))
	__asm(lbl("__Z16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4___XprivateX__BB396_8_F"))
		i3 = i2
	__asm(lbl("__Z16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4___XprivateX__BB396_9_F"))
		i2 = i3
		i2 =  (i2 << 3)
		i3 =  (i5 << 3)
		i0 =  (i0 + i3)
		i1 =  (i1 + i2)
		f10 =  ((__xasm<Number>(push((i0+24)), op(0x38))))
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f11 =  ((__xasm<Number>(push((i1+24)), op(0x38))))
		f8 =  f8/*fextend*/
		f9 =  f9/*fextend*/
		f2 =  (f2 * f10)
		f0 =  (f0 * f10)
		f8 =  (f8 * f11)
		f9 =  (f9 * f11)
		f2 =  f2/*fround*/
		f0 =  f0/*fround*/
		f8 =  f8/*fround*/
		f9 =  f9/*fround*/
		f10 =  ((__xasm<Number>(push(i4), op(0x38))))
		f2 =  f2/*fextend*/
		f11 =  ((__xasm<Number>(push((i0+28)), op(0x38))))
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f12 =  ((__xasm<Number>(push((i4+4)), op(0x38))))
		f0 =  f0/*fextend*/
		f13 =  ((__xasm<Number>(push(i6), op(0x38))))
		f8 =  f8/*fextend*/
		f14 =  ((__xasm<Number>(push((i1+28)), op(0x38))))
		f15 =  ((__xasm<Number>(push((i6+4)), op(0x38))))
		f9 =  f9/*fextend*/
		f6 =  f6/*fextend*/
		f7 =  f7/*fextend*/
		f2 =  (f10 + f2)
		f0 =  (f12 + f0)
		f3 =  (f3 * f11)
		f1 =  (f1 * f11)
		f8 =  (f13 + f8)
		f9 =  (f15 + f9)
		f6 =  (f6 * f14)
		f7 =  (f7 * f14)
		f2 =  f2/*fround*/
		f0 =  f0/*fround*/
		f3 =  f3/*fround*/
		f1 =  f1/*fround*/
		f8 =  f8/*fround*/
		f9 =  f9/*fround*/
		f6 =  f6/*fround*/
		f7 =  f7/*fround*/
		f3 =  f3/*fextend*/
		f2 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		f6 =  f6/*fextend*/
		f8 =  f8/*fextend*/
		f7 =  f7/*fextend*/
		f9 =  f9/*fextend*/
		f2 =  (f2 + f3)
		f0 =  (f0 + f1)
		f1 =  (f8 + f6)
		f3 =  (f9 + f7)
		f2 =  f2/*fround*/
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		f2 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		f3 =  f3/*fextend*/
		f1 =  (f1 - f2)
		f0 =  (f3 - f0)
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		f2 =  f5/*fextend*/
		f1 =  f1/*fextend*/
		f3 =  f4/*fextend*/
		f0 =  f0/*fextend*/
		f1 =  (f1 * f2)
		f0 =  (f0 * f3)
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  (f1 + f0)
		f0 =  f0/*fround*/
		mstate.st0 = f0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4__errState"))
		throw("Invalid state in __Z16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4_")
	}
}



// Async
public const __Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5_:int = regFunc(FSM__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5_.start)

public final class FSM__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5_ extends Machine {

	public static function start():void {
			var result:FSM__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5_ = new FSM__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5_
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
	public var i8:int

	public static const intRegCount:int = 9
	public var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number
	public var f8:Number, f9:Number, f10:Number, f11:Number, f12:Number, f13:Number, f14:Number, f15:Number

	public static const NumberRegCount:int = 16
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5__entry"))
		__asm(push(state), switchjump(
			"__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5__errState",
			"__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5__state0",
			"__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5__state1",
			"__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5__state2",
			"__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5__state3",
			"__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5__state4",
			"__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5__state5"))
	__asm(lbl("__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5__state0"))
	__asm(lbl("__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5___XprivateX__BB397_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+20)), op(0x37))))
		i3 =  ((__xasm<int>(push((mstate.ebp+24)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i1+8)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i0+16)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i1+12)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i3+8)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i2+16)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i3+12)), op(0x38))))
		f6 =  (f0 * f1)
		f1 =  (f2 * f1)
		f3 =  (f3 * f4)
		f4 =  (f5 * f4)
		f5 =  f6/*fround*/
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		f4 =  f4/*fround*/
		f6 =  ((__xasm<Number>(push(i1), op(0x38))))
		f5 =  f5/*fextend*/
		f7 =  ((__xasm<Number>(push((i1+16)), op(0x38))))
		f8 =  ((__xasm<Number>(push((i0+20)), op(0x38))))
		f9 =  ((__xasm<Number>(push((i1+20)), op(0x38))))
		f10 =  ((__xasm<Number>(push((i1+4)), op(0x38))))
		f1 =  f1/*fextend*/
		f11 =  ((__xasm<Number>(push(i3), op(0x38))))
		f3 =  f3/*fextend*/
		f12 =  ((__xasm<Number>(push((i3+16)), op(0x38))))
		f13 =  ((__xasm<Number>(push((i2+20)), op(0x38))))
		f14 =  ((__xasm<Number>(push((i3+20)), op(0x38))))
		f15 =  ((__xasm<Number>(push((i3+4)), op(0x38))))
		f4 =  f4/*fextend*/
		f5 =  (f6 + f5)
		f1 =  (f10 + f1)
		f6 =  (f7 * f8)
		f8 =  (f9 * f8)
		f3 =  (f11 + f3)
		f4 =  (f15 + f4)
		f10 =  (f12 * f13)
		f11 =  (f14 * f13)
		f5 =  f5/*fround*/
		f1 =  f1/*fround*/
		f6 =  f6/*fround*/
		f8 =  f8/*fround*/
		f3 =  f3/*fround*/
		f4 =  f4/*fround*/
		f10 =  f10/*fround*/
		f11 =  f11/*fround*/
		f6 =  f6/*fextend*/
		f5 =  f5/*fextend*/
		f8 =  f8/*fextend*/
		f1 =  f1/*fextend*/
		f10 =  f10/*fextend*/
		f3 =  f3/*fextend*/
		f11 =  f11/*fextend*/
		f4 =  f4/*fextend*/
		f5 =  (f5 + f6)
		f1 =  (f1 + f8)
		f3 =  (f3 + f10)
		f4 =  (f4 + f11)
		f5 =  f5/*fround*/
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		f4 =  f4/*fround*/
		f5 =  f5/*fextend*/
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f4 =  f4/*fextend*/
		f3 =  (f3 - f5)
		f1 =  (f4 - f1)
		f3 =  f3/*fround*/
		f1 =  f1/*fround*/
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f4 =  (f3 * f7)
		f0 =  (f3 * f0)
		f3 =  (f1 * f9)
		f1 =  (f1 * f2)
		f2 =  f4/*fround*/
		f0 =  f0/*fround*/
		f3 =  f3/*fround*/
		f1 =  f1/*fround*/
		f3 =  f3/*fextend*/
		f2 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		i4 =  ((__xasm<int>(push((i0+152)), op(0x37))))
		f2 =  (f2 + f3)
		f0 =  (f0 + f1)
		f1 =  f2/*fround*/
		f0 =  f0/*fround*/
		i5 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i6 = i0
		__asm(push(i4>0), iftrue, target("__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5___XprivateX__BB397_2_F"))
	__asm(lbl("__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5___XprivateX__BB397_1_F"))
		i6 =  (0)
		__asm(jump, target("__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5___XprivateX__BB397_6_F"))
	__asm(lbl("__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5___XprivateX__BB397_2_F"))
		f2 =  (-3.40282e+38)
		f2 =  f2/*fround*/
		i7 =  (0)
		i8 = i7
	__asm(jump, target("__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5___XprivateX__BB397_3_F"), lbl("__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5___XprivateX__BB397_3_B"), label, lbl("__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5___XprivateX__BB397_3_F")); 
		f3 =  ((__xasm<Number>(push((i6+88)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i6+92)), op(0x38))))
		f5 =  f0/*fextend*/
		f6 =  f1/*fextend*/
		f3 =  (f3 * f5)
		f4 =  (f4 * f6)
		f3 =  f3/*fround*/
		f4 =  f4/*fround*/
		f4 =  f4/*fextend*/
		f3 =  f3/*fextend*/
		f3 =  (f3 + f4)
		f3 =  f3/*fround*/
		f2 =  f2/*fextend*/
		f3 =  f3/*fextend*/
		f4 =  ((f3>f2) ? f3 : f2)
		i7 =  ((f3>f2) ? i8 : i7)
		f2 =  f4/*fround*/
		i6 =  (i6 + 8)
		i8 =  (i8 + 1)
		__asm(push(i8==i4), iftrue, target("__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5___XprivateX__BB397_5_F"))
	__asm(lbl("__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5___XprivateX__BB397_4_F"))
		__asm(jump, target("__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5___XprivateX__BB397_3_B"))
	__asm(lbl("__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5___XprivateX__BB397_5_F"))
		i6 = i7
	__asm(lbl("__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5___XprivateX__BB397_6_F"))
		mstate.esp -= 20
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i6), push((mstate.esp+8)), op(0x3c))
		__asm(push(i2), push((mstate.esp+12)), op(0x3c))
		__asm(push(i3), push((mstate.esp+16)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM__Z16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4_.start()
		return
	__asm(lbl("__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5__state1"))
		f0 = mstate.st0
		i7 =  (i6 + -1)
		mstate.esp += 20
		i7 =  ((i7>-1) ? i6 : i4)
		mstate.esp -= 20
		i7 =  (i7 + -1)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i7), push((mstate.esp+8)), op(0x3c))
		__asm(push(i2), push((mstate.esp+12)), op(0x3c))
		__asm(push(i3), push((mstate.esp+16)), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM__Z16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4_.start()
		return
	__asm(lbl("__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5__state2"))
		f1 = mstate.st0
		mstate.esp += 20
		i8 =  (i6 + 1)
		mstate.esp -= 20
		i8 =  ((i8<i4) ? i8 : 0)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i8), push((mstate.esp+8)), op(0x3c))
		__asm(push(i2), push((mstate.esp+12)), op(0x3c))
		__asm(push(i3), push((mstate.esp+16)), op(0x3c))
		state = 3
		mstate.esp -= 4;FSM__Z16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4_.start()
		return
	__asm(lbl("__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5__state3"))
		f2 = mstate.st0
		mstate.esp += 20
		f3 =  f2/*fextend*/
		f4 =  f1/*fextend*/
		__asm(push(f4<=f3), iftrue, target("__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5___XprivateX__BB397_9_F"))
	__asm(lbl("__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5___XprivateX__BB397_7_F"))
		f3 =  f0/*fextend*/
		f4 =  f1/*fextend*/
		__asm(push(f4<=f3), iftrue, target("__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5___XprivateX__BB397_9_F"))
	__asm(lbl("__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5___XprivateX__BB397_8_F"))
		i6 =  (1)
		i8 = i7
		f0 = f1
		__asm(jump, target("__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5___XprivateX__BB397_12_F"))
	__asm(lbl("__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5___XprivateX__BB397_9_F"))
		f1 =  f0/*fextend*/
		f3 =  f2/*fextend*/
		__asm(push(f3>f1), iftrue, target("__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5___XprivateX__BB397_11_F"))
	__asm(lbl("__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5___XprivateX__BB397_10_F"))
		i8 = i6
		__asm(jump, target("__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5___XprivateX__BB397_19_F"))
	__asm(lbl("__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5___XprivateX__BB397_11_F"))
		i6 =  (0)
		f0 = f2
	__asm(lbl("__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5___XprivateX__BB397_12_F"))
		i6 =  (i6 & 1)
		__asm(push(i6!=0), iftrue, target("__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5___XprivateX__BB397_17_F"))
	__asm(lbl("__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5___XprivateX__BB397_13_F"))
		__asm(jump, target("__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5___XprivateX__BB397_14_F"))
	__asm(jump, target("__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5___XprivateX__BB397_14_F"), lbl("__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5___XprivateX__BB397_14_B"), label, lbl("__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5___XprivateX__BB397_14_F")); 
		i6 =  (i8 + 1)
		mstate.esp -= 20
		i6 =  ((i6<i4) ? i6 : 0)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i6), push((mstate.esp+8)), op(0x3c))
		__asm(push(i2), push((mstate.esp+12)), op(0x3c))
		__asm(push(i3), push((mstate.esp+16)), op(0x3c))
		state = 4
		mstate.esp -= 4;FSM__Z16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4_.start()
		return
	__asm(lbl("__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5__state4"))
		f1 = mstate.st0
		mstate.esp += 20
		f2 =  f0/*fextend*/
		f3 =  f1/*fextend*/
		__asm(push(f3>f2), iftrue, target("__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5___XprivateX__BB397_20_F"))
		__asm(jump, target("__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5___XprivateX__BB397_15_F"))
	__asm(lbl("__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5___XprivateX__BB397_15_F"))
		__asm(jump, target("__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5___XprivateX__BB397_19_F"))
	__asm(lbl("__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5___XprivateX__BB397_16_B"), label)
		i8 = i6
		f0 = f1
		__asm(jump, target("__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5___XprivateX__BB397_17_F"))
	__asm(lbl("__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5___XprivateX__BB397_17_F"))
		i6 =  (i8 + -1)
		i6 =  ((i6>-1) ? i8 : i4)
		mstate.esp -= 20
		i6 =  (i6 + -1)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i6), push((mstate.esp+8)), op(0x3c))
		__asm(push(i2), push((mstate.esp+12)), op(0x3c))
		__asm(push(i3), push((mstate.esp+16)), op(0x3c))
		state = 5
		mstate.esp -= 4;FSM__Z16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4_.start()
		return
	__asm(lbl("__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5__state5"))
		f1 = mstate.st0
		mstate.esp += 20
		f2 =  f0/*fextend*/
		f3 =  f1/*fextend*/
		__asm(push(f3>f2), iftrue, target("__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5___XprivateX__BB397_16_B"))
	__asm(lbl("__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5___XprivateX__BB397_18_F"))
		__asm(jump, target("__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5___XprivateX__BB397_19_F"))
	__asm(lbl("__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5___XprivateX__BB397_19_F"))
		i0 = i8
		__asm(push(i0), push(i5), op(0x3c))
		mstate.st0 = f0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5___XprivateX__BB397_20_F"))
		i8 = i6
		f0 = f1
		__asm(jump, target("__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5___XprivateX__BB397_14_B"))
	__asm(lbl("__Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5__errState"))
		throw("Invalid state in __Z19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5_")
	}
}



// Async
public const __ZN15b2ContactSolver24SolveVelocityConstraintsEv:int = regFunc(FSM__ZN15b2ContactSolver24SolveVelocityConstraintsEv.start)

public final class FSM__ZN15b2ContactSolver24SolveVelocityConstraintsEv extends Machine {

	public static function start():void {
			var result:FSM__ZN15b2ContactSolver24SolveVelocityConstraintsEv = new FSM__ZN15b2ContactSolver24SolveVelocityConstraintsEv
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
	public var i8:int, i9:int, i10:int, i11:int, i12:int, i13:int, i14:int, i15:int
	public var i16:int, i17:int

	public static const intRegCount:int = 18
	public var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number
	public var f8:Number, f9:Number, f10:Number, f11:Number, f12:Number, f13:Number, f14:Number, f15:Number
	public var f16:Number, f17:Number, f18:Number, f19:Number, f20:Number, f21:Number, f22:Number, f23:Number
	public var f24:Number, f25:Number, f26:Number, f27:Number, f28:Number, f29:Number, f30:Number, f31:Number
	public static const NumberRegCount:int = 32
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN15b2ContactSolver24SolveVelocityConstraintsEv_entry"))
		__asm(push(state), switchjump(
			"__ZN15b2ContactSolver24SolveVelocityConstraintsEv_errState",
			"__ZN15b2ContactSolver24SolveVelocityConstraintsEv_state0",
			"__ZN15b2ContactSolver24SolveVelocityConstraintsEv_state1",
			"__ZN15b2ContactSolver24SolveVelocityConstraintsEv_state2"))
	__asm(lbl("__ZN15b2ContactSolver24SolveVelocityConstraintsEv_state0"))
	__asm(lbl("__ZN15b2ContactSolver24SolveVelocityConstraintsEv__XprivateX__BB398_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 16
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+8)), op(0x37))))
		i2 =  (i0 + 8)
		__asm(push(i1<1), iftrue, target("__ZN15b2ContactSolver24SolveVelocityConstraintsEv__XprivateX__BB398_28_F"))
	__asm(lbl("__ZN15b2ContactSolver24SolveVelocityConstraintsEv__XprivateX__BB398_1_F"))
		i1 =  (0)
		i0 =  (i0 + 4)
		i3 = i1
	__asm(jump, target("__ZN15b2ContactSolver24SolveVelocityConstraintsEv__XprivateX__BB398_2_F"), lbl("__ZN15b2ContactSolver24SolveVelocityConstraintsEv__XprivateX__BB398_2_B"), label, lbl("__ZN15b2ContactSolver24SolveVelocityConstraintsEv__XprivateX__BB398_2_F")); 
		i4 =  ((__xasm<int>(push(i0), op(0x37))))
		i5 =  (i4 + i3)
		f0 =  ((__xasm<Number>(push((i5+104)), op(0x38))))
		__asm(push(f0), push((mstate.ebp+-8)), op(0x3d))
		i6 =  ((__xasm<int>(push((i5+144)), op(0x37))))
		i7 =  ((__xasm<int>(push((i5+148)), op(0x37))))
		f0 =  f0/*fextend*/
		i8 =  ((__xasm<int>(push((i5+172)), op(0x37))))
		f0 =  -f0
		f1 =  ((__xasm<Number>(push((i6+80)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i7+80)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i6+72)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i6+76)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i7+72)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i7+76)), op(0x38))))
		f7 =  ((__xasm<Number>(push((i6+128)), op(0x38))))
		f8 =  ((__xasm<Number>(push((i6+136)), op(0x38))))
		f9 =  ((__xasm<Number>(push((i7+128)), op(0x38))))
		f10 =  ((__xasm<Number>(push((i7+136)), op(0x38))))
		f11 =  ((__xasm<Number>(push((i5+108)), op(0x38))))
		f12 =  ((__xasm<Number>(push((i5+164)), op(0x38))))
		f0 =  f0/*fround*/
		i5 =  (i6 + 76)
		i9 =  (i7 + 76)
		i10 =  (i7 + 72)
		i11 =  (i6 + 72)
		i7 =  (i7 + 80)
		i6 =  (i6 + 80)
		i12 =  (i8 + -1)
		__asm(push(uint(i12)>uint(1)), iftrue, target("__ZN15b2ContactSolver24SolveVelocityConstraintsEv__XprivateX__BB398_4_F"))
	__asm(lbl("__ZN15b2ContactSolver24SolveVelocityConstraintsEv__XprivateX__BB398_3_F"))
		i12 =  (0)
		i13 =  (i4 + i3)
		i14 =  (i13 + 184)
		i15 =  (i13 + 180)
		i16 =  (i13 + 176)
		__asm(jump, target("__ZN15b2ContactSolver24SolveVelocityConstraintsEv__XprivateX__BB398_7_F"))
	__asm(lbl("__ZN15b2ContactSolver24SolveVelocityConstraintsEv__XprivateX__BB398_4_F"))
		i1 =  (___sF)
		mstate.esp -= 24
		i3 =  (__2E_str1670)
		i0 =  (__2E_str61268)
		i2 =  (__ZZN15b2ContactSolver24SolveVelocityConstraintsEvE8__func__)
		i4 =  (__2E_str60267)
		i5 =  (269)
	__asm(jump, target("__ZN15b2ContactSolver24SolveVelocityConstraintsEv__XprivateX__BB398_5_F"), lbl("__ZN15b2ContactSolver24SolveVelocityConstraintsEv__XprivateX__BB398_5_B"), label, lbl("__ZN15b2ContactSolver24SolveVelocityConstraintsEv__XprivateX__BB398_5_F")); 
		i1 =  (i1 + 176)
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i3), push((mstate.esp+4)), op(0x3c))
		__asm(push(i0), push((mstate.esp+8)), op(0x3c))
		__asm(push(i2), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__ZN15b2ContactSolver24SolveVelocityConstraintsEv_state1"))
		mstate.esp += 24
		state = 2
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZN15b2ContactSolver24SolveVelocityConstraintsEv_state2"))
	__asm(lbl("__ZN15b2ContactSolver24SolveVelocityConstraintsEv__XprivateX__BB398_6_B"), label)
		f13 =  (-1)
		f14 =  ((__xasm<Number>(push((i13+16)), op(0x38))))
		f2 =  f2/*fextend*/
		f15 =  ((__xasm<Number>(push((i13+20)), op(0x38))))
		f16 =  (f14 * f2)
		f17 =  (f15 * f2)
		f16 =  f16/*fround*/
		f17 =  f17/*fround*/
		f16 =  f16/*fextend*/
		f6 =  f6/*fextend*/
		f17 =  f17/*fextend*/
		f5 =  f5/*fextend*/
		f16 =  (f6 + f16)
		f17 =  (f5 - f17)
		f16 =  f16/*fround*/
		f17 =  f17/*fround*/
		f18 =  ((__xasm<Number>(push((i13+8)), op(0x38))))
		f1 =  f1/*fextend*/
		f19 =  ((__xasm<Number>(push((i13+12)), op(0x38))))
		f4 =  f4/*fextend*/
		f16 =  f16/*fextend*/
		f3 =  f3/*fextend*/
		f17 =  f17/*fextend*/
		f20 =  (f18 * f1)
		f21 =  (f19 * f1)
		f16 =  (f16 - f4)
		f17 =  (f17 - f3)
		f20 =  f20/*fround*/
		f21 =  f21/*fround*/
		f16 =  f16/*fround*/
		f17 =  f17/*fround*/
		f20 =  f20/*fextend*/
		f16 =  f16/*fextend*/
		f21 =  f21/*fextend*/
		f17 =  f17/*fextend*/
		f16 =  (f16 - f20)
		f17 =  (f17 + f21)
		f20 =  (1)
		f16 =  f16/*fround*/
		f17 =  f17/*fround*/
		f13 =  f13/*fround*/
		f20 =  f20/*fround*/
		i17 =  ((__xasm<int>(push(i16), op(0x37))))
		i17 =  ((__xasm<int>(push((i17+64)), op(0x37))))
		f21 =  f0/*fextend*/
		f16 =  f16/*fextend*/
		f22 =  f11/*fextend*/
		f17 =  f17/*fextend*/
		f20 =  f20/*fextend*/
		f13 =  f13/*fextend*/
		f16 =  (f16 * f21)
		f17 =  (f17 * f22)
		f13 =  ((i17==2) ? f13 : f20)
		f16 =  f16/*fround*/
		f17 =  f17/*fround*/
		f13 =  f13/*fround*/
		i17 =  ((__xasm<int>(push(i15), op(0x37))))
		f20 =  ((__xasm<Number>(push((i17+48)), op(0x38))))
		f13 =  f13/*fextend*/
		f16 =  f16/*fextend*/
		f17 =  f17/*fextend*/
		f16 =  (f17 + f16)
		f17 =  (f20 * f13)
		f16 =  f16/*fround*/
		f17 =  f17/*fround*/
		i17 =  ((__xasm<int>(push(i14), op(0x37))))
		f20 =  ((__xasm<Number>(push((i17+48)), op(0x38))))
		f16 =  f16/*fextend*/
		f17 =  f17/*fextend*/
		f16 =  (f17 + f16)
		f13 =  (f20 * f13)
		f16 =  f16/*fround*/
		f13 =  f13/*fround*/
		f16 =  f16/*fextend*/
		f13 =  f13/*fextend*/
		f13 =  (f13 - f16)
		f13 =  f13/*fround*/
		f16 =  ((__xasm<Number>(push((i13+36)), op(0x38))))
		f13 =  f13/*fextend*/
		f13 =  (f16 * f13)
		f13 =  f13/*fround*/
		f16 =  ((__xasm<Number>(push((i13+24)), op(0x38))))
		f17 =  ((__xasm<Number>(push((i13+28)), op(0x38))))
		f13 =  f13/*fextend*/
		f20 =  f12/*fextend*/
		f13 =  (f17 + f13)
		f16 =  (f16 * f20)
		f13 =  f13/*fround*/
		f16 =  f16/*fround*/
		f16 =  f16/*fextend*/
		f13 =  f13/*fextend*/
		f13 =  ((f13<f16) ? f13 : f16)
		f16 =  -f16
		f13 =  f13/*fround*/
		f16 =  f16/*fround*/
		f16 =  f16/*fextend*/
		f13 =  f13/*fextend*/
		f13 =  ((f13<f16) ? f16 : f13)
		f13 =  f13/*fround*/
		f16 =  f13/*fextend*/
		f16 =  (f16 - f17)
		f16 =  f16/*fround*/
		f16 =  f16/*fextend*/
		f17 =  (f21 * f16)
		f16 =  (f22 * f16)
		f17 =  f17/*fround*/
		f16 =  f16/*fround*/
		f17 =  f17/*fextend*/
		f16 =  f16/*fextend*/
		f18 =  (f18 * f17)
		f14 =  (f14 * f17)
		f19 =  (f19 * f16)
		f15 =  (f15 * f16)
		f18 =  f18/*fround*/
		f14 =  f14/*fround*/
		f19 =  f19/*fround*/
		f15 =  f15/*fround*/
		f19 =  f19/*fextend*/
		f18 =  f18/*fextend*/
		f15 =  f15/*fextend*/
		f14 =  f14/*fextend*/
		f18 =  (f18 - f19)
		f14 =  (f14 - f15)
		f15 =  f18/*fround*/
		f14 =  f14/*fround*/
		f18 =  f7/*fextend*/
		f19 =  f9/*fextend*/
		f20 =  f8/*fextend*/
		f15 =  f15/*fextend*/
		f21 =  f10/*fextend*/
		f14 =  f14/*fextend*/
		f22 =  (f17 * f18)
		f15 =  (f15 * f20)
		f17 =  (f17 * f19)
		f14 =  (f14 * f21)
		f18 =  (f16 * f18)
		f16 =  (f16 * f19)
		f19 =  f22/*fround*/
		f15 =  f15/*fround*/
		f17 =  f17/*fround*/
		f14 =  f14/*fround*/
		f18 =  f18/*fround*/
		f16 =  f16/*fround*/
		f19 =  f19/*fextend*/
		f15 =  f15/*fextend*/
		f17 =  f17/*fextend*/
		f14 =  f14/*fextend*/
		f18 =  f18/*fextend*/
		f16 =  f16/*fextend*/
		f4 =  (f4 - f19)
		f1 =  (f1 - f15)
		f6 =  (f6 + f17)
		f2 =  (f14 + f2)
		f3 =  (f3 - f18)
		f5 =  (f5 + f16)
		__asm(push(f13), push((i13+28)), op(0x3d))
		f4 =  f4/*fround*/
		f1 =  f1/*fround*/
		f6 =  f6/*fround*/
		f2 =  f2/*fround*/
		f3 =  f3/*fround*/
		f5 =  f5/*fround*/
		i13 =  (i13 + 44)
		i12 =  (i12 + 1)
	__asm(lbl("__ZN15b2ContactSolver24SolveVelocityConstraintsEv__XprivateX__BB398_7_F"))
		__asm(push(i8>i12), iftrue, target("__ZN15b2ContactSolver24SolveVelocityConstraintsEv__XprivateX__BB398_6_B"))
	__asm(lbl("__ZN15b2ContactSolver24SolveVelocityConstraintsEv__XprivateX__BB398_8_F"))
		__asm(push(i8!=1), iftrue, target("__ZN15b2ContactSolver24SolveVelocityConstraintsEv__XprivateX__BB398_10_F"))
	__asm(lbl("__ZN15b2ContactSolver24SolveVelocityConstraintsEv__XprivateX__BB398_9_F"))
		f0 =  (0)
		i4 =  (i4 + i3)
		f12 =  ((__xasm<Number>(push((i4+16)), op(0x38))))
		f2 =  f2/*fextend*/
		f13 =  ((__xasm<Number>(push((i4+20)), op(0x38))))
		f14 =  (f12 * f2)
		f15 =  (f13 * f2)
		f14 =  f14/*fround*/
		f15 =  f15/*fround*/
		f14 =  f14/*fextend*/
		f6 =  f6/*fextend*/
		f15 =  f15/*fextend*/
		f5 =  f5/*fextend*/
		f14 =  (f6 + f14)
		f15 =  (f5 - f15)
		f14 =  f14/*fround*/
		f15 =  f15/*fround*/
		f16 =  ((__xasm<Number>(push((i4+8)), op(0x38))))
		f1 =  f1/*fextend*/
		f17 =  ((__xasm<Number>(push((i4+12)), op(0x38))))
		f4 =  f4/*fextend*/
		f14 =  f14/*fextend*/
		f3 =  f3/*fextend*/
		f15 =  f15/*fextend*/
		f18 =  (f16 * f1)
		f19 =  (f17 * f1)
		f14 =  (f14 - f4)
		f15 =  (f15 - f3)
		f18 =  f18/*fround*/
		f19 =  f19/*fround*/
		f14 =  f14/*fround*/
		f15 =  f15/*fround*/
		f18 =  f18/*fextend*/
		f14 =  f14/*fextend*/
		f19 =  f19/*fextend*/
		f15 =  f15/*fextend*/
		f14 =  (f14 - f18)
		f15 =  (f15 + f19)
		f14 =  f14/*fround*/
		f15 =  f15/*fround*/
		f11 =  f11/*fextend*/
		f14 =  f14/*fextend*/
		f18 =  ((__xasm<Number>(push((mstate.ebp+-8)), op(0x38))))
		f18 =  f18/*fextend*/
		f15 =  f15/*fextend*/
		f14 =  (f14 * f11)
		f15 =  (f15 * f18)
		f14 =  f14/*fround*/
		f15 =  f15/*fround*/
		f14 =  f14/*fextend*/
		f15 =  f15/*fextend*/
		f14 =  (f15 + f14)
		f14 =  f14/*fround*/
		f15 =  ((__xasm<Number>(push((i4+40)), op(0x38))))
		f14 =  f14/*fextend*/
		f14 =  (f14 - f15)
		f14 =  f14/*fround*/
		f15 =  ((__xasm<Number>(push((i4+32)), op(0x38))))
		f14 =  f14/*fextend*/
		f14 =  (f14 * f15)
		f14 =  f14/*fround*/
		f15 =  ((__xasm<Number>(push((i4+24)), op(0x38))))
		f14 =  f14/*fextend*/
		f14 =  (f15 - f14)
		f14 =  f14/*fround*/
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f14 =  f14/*fextend*/
		f0 =  ((f14>f0) ? f14 : f0)
		f0 =  f0/*fround*/
		f14 =  f0/*fextend*/
		f14 =  (f14 - f15)
		f14 =  f14/*fround*/
		f14 =  f14/*fextend*/
		f11 =  (f11 * f14)
		f14 =  (f18 * f14)
		f11 =  f11/*fround*/
		f14 =  f14/*fround*/
		f11 =  f11/*fextend*/
		f14 =  f14/*fextend*/
		f15 =  (f16 * f11)
		f12 =  (f12 * f11)
		f16 =  (f17 * f14)
		f13 =  (f13 * f14)
		f15 =  f15/*fround*/
		f12 =  f12/*fround*/
		f16 =  f16/*fround*/
		f13 =  f13/*fround*/
		f16 =  f16/*fextend*/
		f15 =  f15/*fextend*/
		f13 =  f13/*fextend*/
		f12 =  f12/*fextend*/
		f15 =  (f15 - f16)
		f12 =  (f12 - f13)
		f13 =  f15/*fround*/
		f12 =  f12/*fround*/
		f7 =  f7/*fextend*/
		f9 =  f9/*fextend*/
		f8 =  f8/*fextend*/
		f13 =  f13/*fextend*/
		f10 =  f10/*fextend*/
		f12 =  f12/*fextend*/
		f15 =  (f11 * f7)
		f8 =  (f13 * f8)
		f11 =  (f11 * f9)
		f10 =  (f12 * f10)
		f7 =  (f14 * f7)
		f9 =  (f14 * f9)
		f12 =  f15/*fround*/
		f8 =  f8/*fround*/
		f11 =  f11/*fround*/
		f10 =  f10/*fround*/
		f7 =  f7/*fround*/
		f9 =  f9/*fround*/
		f12 =  f12/*fextend*/
		f8 =  f8/*fextend*/
		f11 =  f11/*fextend*/
		f10 =  f10/*fextend*/
		f7 =  f7/*fextend*/
		f9 =  f9/*fextend*/
		f4 =  (f4 - f12)
		f1 =  (f1 - f8)
		f6 =  (f6 + f11)
		f2 =  (f10 + f2)
		f3 =  (f3 - f7)
		f5 =  (f5 + f9)
		__asm(push(f0), push((i4+24)), op(0x3d))
		f4 =  f4/*fround*/
		f1 =  f1/*fround*/
		f6 =  f6/*fround*/
		f2 =  f2/*fround*/
		f3 =  f3/*fround*/
		f5 =  f5/*fround*/
		__asm(jump, target("__ZN15b2ContactSolver24SolveVelocityConstraintsEv__XprivateX__BB398_26_F"))
	__asm(lbl("__ZN15b2ContactSolver24SolveVelocityConstraintsEv__XprivateX__BB398_10_F"))
		f0 =  (0)
		i8 =  (i4 + i3)
		f12 =  ((__xasm<Number>(push((i8+24)), op(0x38))))
		f13 =  ((__xasm<Number>(push((i8+68)), op(0x38))))
		i12 =  (i8 + 24)
		i8 =  (i8 + 68)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f14 =  f12/*fextend*/
		__asm(push(f14<f0), iftrue, target("__ZN15b2ContactSolver24SolveVelocityConstraintsEv__XprivateX__BB398_12_F"))
	__asm(lbl("__ZN15b2ContactSolver24SolveVelocityConstraintsEv__XprivateX__BB398_11_F"))
		f0 =  (0)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f14 =  f13/*fextend*/
		__asm(push(f14>=f0), iftrue, target("__ZN15b2ContactSolver24SolveVelocityConstraintsEv__XprivateX__BB398_13_F"))
	__asm(lbl("__ZN15b2ContactSolver24SolveVelocityConstraintsEv__XprivateX__BB398_12_F"))
		i1 =  (___sF)
		mstate.esp -= 24
		i3 =  (__2E_str1670)
		i0 =  (__2E_str62269)
		i2 =  (__ZZN15b2ContactSolver24SolveVelocityConstraintsEvE8__func__)
		i4 =  (__2E_str60267)
		i5 =  (374)
		__asm(jump, target("__ZN15b2ContactSolver24SolveVelocityConstraintsEv__XprivateX__BB398_5_B"))
	__asm(lbl("__ZN15b2ContactSolver24SolveVelocityConstraintsEv__XprivateX__BB398_13_F"))
		i13 =  (i4 + i3)
		f0 =  ((__xasm<Number>(push((i13+16)), op(0x38))))
		f14 =  ((__xasm<Number>(push((i13+20)), op(0x38))))
		__asm(push(f14), push((mstate.ebp+-16)), op(0x3d))
		f14 =  ((__xasm<Number>(push((i13+60)), op(0x38))))
		f15 =  ((__xasm<Number>(push((i13+64)), op(0x38))))
		f16 =  f0/*fextend*/
		f17 =  f2/*fextend*/
		f18 =  ((__xasm<Number>(push((mstate.ebp+-16)), op(0x38))))
		f18 =  f18/*fextend*/
		f19 =  f14/*fextend*/
		f20 =  f15/*fextend*/
		f16 =  (f16 * f17)
		f18 =  (f18 * f17)
		f19 =  (f19 * f17)
		f17 =  (f20 * f17)
		f16 =  f16/*fround*/
		f18 =  f18/*fround*/
		f19 =  f19/*fround*/
		f17 =  f17/*fround*/
		f16 =  f16/*fextend*/
		f20 =  f6/*fextend*/
		f19 =  f19/*fextend*/
		f18 =  f18/*fextend*/
		f21 =  f5/*fextend*/
		f17 =  f17/*fextend*/
		f16 =  (f20 + f16)
		f18 =  (f21 - f18)
		f19 =  (f20 + f19)
		f17 =  (f21 - f17)
		f20 =  ((__xasm<Number>(push((i13+8)), op(0x38))))
		f21 =  ((__xasm<Number>(push((i13+12)), op(0x38))))
		f22 =  ((__xasm<Number>(push((i13+52)), op(0x38))))
		f23 =  ((__xasm<Number>(push((i13+56)), op(0x38))))
		f16 =  f16/*fround*/
		f18 =  f18/*fround*/
		f19 =  f19/*fround*/
		f17 =  f17/*fround*/
		f24 =  f20/*fextend*/
		f25 =  f1/*fextend*/
		f26 =  f21/*fextend*/
		f27 =  f22/*fextend*/
		f28 =  f23/*fextend*/
		f16 =  f16/*fextend*/
		f29 =  f4/*fextend*/
		f19 =  f19/*fextend*/
		f18 =  f18/*fextend*/
		f30 =  f3/*fextend*/
		f17 =  f17/*fextend*/
		f24 =  (f24 * f25)
		f26 =  (f26 * f25)
		f16 =  (f16 - f29)
		f18 =  (f18 - f30)
		f27 =  (f27 * f25)
		f25 =  (f28 * f25)
		f19 =  (f19 - f29)
		f17 =  (f17 - f30)
		f24 =  f24/*fround*/
		f26 =  f26/*fround*/
		f16 =  f16/*fround*/
		f18 =  f18/*fround*/
		f27 =  f27/*fround*/
		f25 =  f25/*fround*/
		f19 =  f19/*fround*/
		f17 =  f17/*fround*/
		f24 =  f24/*fextend*/
		f16 =  f16/*fextend*/
		f26 =  f26/*fextend*/
		f18 =  f18/*fextend*/
		f27 =  f27/*fextend*/
		f19 =  f19/*fextend*/
		f25 =  f25/*fextend*/
		f17 =  f17/*fextend*/
		f16 =  (f16 - f24)
		f18 =  (f18 + f26)
		f19 =  (f19 - f27)
		f17 =  (f17 + f25)
		f16 =  f16/*fround*/
		f18 =  f18/*fround*/
		f19 =  f19/*fround*/
		f17 =  f17/*fround*/
		f16 =  f16/*fextend*/
		f24 =  f11/*fextend*/
		f19 =  f19/*fextend*/
		f18 =  f18/*fextend*/
		f25 =  ((__xasm<Number>(push((mstate.ebp+-8)), op(0x38))))
		f25 =  f25/*fextend*/
		f17 =  f17/*fextend*/
		f16 =  (f16 * f24)
		f18 =  (f18 * f25)
		f19 =  (f19 * f24)
		f17 =  (f17 * f25)
		f24 =  ((__xasm<Number>(push((i13+132)), op(0x38))))
		f25 =  ((__xasm<Number>(push((i13+136)), op(0x38))))
		f16 =  f16/*fround*/
		f18 =  f18/*fround*/
		f19 =  f19/*fround*/
		f17 =  f17/*fround*/
		f26 =  ((__xasm<Number>(push((i13+140)), op(0x38))))
		f27 =  f13/*fextend*/
		f28 =  f25/*fextend*/
		f29 =  ((__xasm<Number>(push((i13+128)), op(0x38))))
		f30 =  f12/*fextend*/
		f31 =  f24/*fextend*/
		f16 =  f16/*fextend*/
		f18 =  f18/*fextend*/
		f19 =  f19/*fextend*/
		f17 =  f17/*fextend*/
		f16 =  (f18 + f16)
		f17 =  (f17 + f19)
		f18 =  (f31 * f30)
		f19 =  (f26 * f27)
		f26 =  (f29 * f30)
		f27 =  (f28 * f27)
		f16 =  f16/*fround*/
		f17 =  f17/*fround*/
		f18 =  f18/*fround*/
		f19 =  f19/*fround*/
		f26 =  f26/*fround*/
		f27 =  f27/*fround*/
		f28 =  ((__xasm<Number>(push((i13+40)), op(0x38))))
		f16 =  f16/*fextend*/
		f29 =  ((__xasm<Number>(push((i13+84)), op(0x38))))
		f17 =  f17/*fextend*/
		f19 =  f19/*fextend*/
		f18 =  f18/*fextend*/
		f27 =  f27/*fextend*/
		f26 =  f26/*fextend*/
		f16 =  (f16 - f28)
		f17 =  (f17 - f29)
		f18 =  (f18 + f19)
		f19 =  (f26 + f27)
		f16 =  f16/*fround*/
		f17 =  f17/*fround*/
		f18 =  f18/*fround*/
		f19 =  f19/*fround*/
		f19 =  f19/*fextend*/
		f16 =  f16/*fextend*/
		f18 =  f18/*fextend*/
		f17 =  f17/*fextend*/
		f16 =  (f16 - f19)
		f17 =  (f17 - f18)
		f16 =  f16/*fround*/
		f17 =  f17/*fround*/
		f18 =  ((__xasm<Number>(push((i13+116)), op(0x38))))
		f19 =  f16/*fextend*/
		f26 =  ((__xasm<Number>(push((i13+112)), op(0x38))))
		f27 =  ((__xasm<Number>(push((i13+124)), op(0x38))))
		f28 =  ((__xasm<Number>(push((i13+120)), op(0x38))))
		f29 =  f17/*fextend*/
		f18 =  (f18 * f19)
		f19 =  (f26 * f19)
		f26 =  (f27 * f29)
		f27 =  (f28 * f29)
		f18 =  f18/*fround*/
		f19 =  f19/*fround*/
		f26 =  f26/*fround*/
		f27 =  f27/*fround*/
		f26 =  f26/*fextend*/
		f18 =  f18/*fextend*/
		f27 =  f27/*fextend*/
		f19 =  f19/*fextend*/
		f18 =  (f18 + f26)
		f19 =  (f19 + f27)
		f18 =  f18/*fround*/
		f19 =  f19/*fround*/
		f18 =  f18/*fextend*/
		f19 =  f19/*fextend*/
		f18 =  -f18
		f19 =  -f19
		f19 =  f19/*fround*/
		f18 =  f18/*fround*/
		f26 =  (0)
		f26 =  f26/*fround*/
		f26 =  f26/*fextend*/
		f27 =  f19/*fextend*/
		__asm(push(f27<f26), iftrue, target("__ZN15b2ContactSolver24SolveVelocityConstraintsEv__XprivateX__BB398_16_F"))
	__asm(lbl("__ZN15b2ContactSolver24SolveVelocityConstraintsEv__XprivateX__BB398_14_F"))
		f26 =  (0)
		f26 =  f26/*fround*/
		f26 =  f26/*fextend*/
		f27 =  f18/*fextend*/
		__asm(push(f27<f26), iftrue, target("__ZN15b2ContactSolver24SolveVelocityConstraintsEv__XprivateX__BB398_16_F"))
	__asm(lbl("__ZN15b2ContactSolver24SolveVelocityConstraintsEv__XprivateX__BB398_15_F"))
		f13 =  f13/*fextend*/
		f16 =  f18/*fextend*/
		f12 =  f12/*fextend*/
		f17 =  f19/*fextend*/
		f13 =  (f16 - f13)
		f12 =  (f17 - f12)
		f13 =  f13/*fround*/
		f12 =  f12/*fround*/
		f13 =  f13/*fextend*/
		f11 =  f11/*fextend*/
		f12 =  f12/*fextend*/
		f16 =  ((__xasm<Number>(push((mstate.ebp+-8)), op(0x38))))
		f16 =  f16/*fextend*/
		f17 =  (f11 * f13)
		f13 =  (f16 * f13)
		f11 =  (f11 * f12)
		f12 =  (f16 * f12)
		f16 =  f17/*fround*/
		f13 =  f13/*fround*/
		f11 =  f11/*fround*/
		f12 =  f12/*fround*/
		f17 =  f22/*fextend*/
		f16 =  f16/*fextend*/
		f14 =  f14/*fextend*/
		f11 =  f11/*fextend*/
		f20 =  f20/*fextend*/
		f0 =  f0/*fextend*/
		f22 =  f23/*fextend*/
		f13 =  f13/*fextend*/
		f15 =  f15/*fextend*/
		f12 =  f12/*fextend*/
		f21 =  f21/*fextend*/
		f23 =  ((__xasm<Number>(push((mstate.ebp+-16)), op(0x38))))
		f23 =  f23/*fextend*/
		f17 =  (f17 * f16)
		f14 =  (f14 * f16)
		f22 =  (f22 * f13)
		f15 =  (f15 * f13)
		f20 =  (f20 * f11)
		f0 =  (f0 * f11)
		f21 =  (f21 * f12)
		f23 =  (f23 * f12)
		f17 =  f17/*fround*/
		f14 =  f14/*fround*/
		f22 =  f22/*fround*/
		f15 =  f15/*fround*/
		f20 =  f20/*fround*/
		f0 =  f0/*fround*/
		f21 =  f21/*fround*/
		f23 =  f23/*fround*/
		f22 =  f22/*fextend*/
		f17 =  f17/*fextend*/
		f15 =  f15/*fextend*/
		f14 =  f14/*fextend*/
		f21 =  f21/*fextend*/
		f20 =  f20/*fextend*/
		f23 =  f23/*fextend*/
		f0 =  f0/*fextend*/
		f17 =  (f17 - f22)
		f14 =  (f14 - f15)
		f15 =  (f20 - f21)
		f0 =  (f0 - f23)
		f17 =  f17/*fround*/
		f14 =  f14/*fround*/
		f15 =  f15/*fround*/
		f0 =  f0/*fround*/
		f17 =  f17/*fextend*/
		f15 =  f15/*fextend*/
		f14 =  f14/*fextend*/
		f0 =  f0/*fextend*/
		f11 =  (f11 + f16)
		f15 =  (f15 + f17)
		f0 =  (f0 + f14)
		f12 =  (f12 + f13)
		f11 =  f11/*fround*/
		f13 =  f15/*fround*/
		f0 =  f0/*fround*/
		f12 =  f12/*fround*/
		f11 =  f11/*fextend*/
		f7 =  f7/*fextend*/
		f9 =  f9/*fextend*/
		f12 =  f12/*fextend*/
		f8 =  f8/*fextend*/
		f13 =  f13/*fextend*/
		f10 =  f10/*fextend*/
		f0 =  f0/*fextend*/
		f14 =  (f11 * f7)
		f11 =  (f11 * f9)
		f8 =  (f13 * f8)
		f0 =  (f0 * f10)
		f7 =  (f12 * f7)
		f9 =  (f12 * f9)
		f10 =  f14/*fround*/
		f11 =  f11/*fround*/
		f8 =  f8/*fround*/
		f0 =  f0/*fround*/
		f7 =  f7/*fround*/
		f9 =  f9/*fround*/
		f10 =  f10/*fextend*/
		f4 =  f4/*fextend*/
		f11 =  f11/*fextend*/
		f6 =  f6/*fextend*/
		f8 =  f8/*fextend*/
		f1 =  f1/*fextend*/
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f7 =  f7/*fextend*/
		f3 =  f3/*fextend*/
		f9 =  f9/*fextend*/
		f5 =  f5/*fextend*/
		f4 =  (f4 - f10)
		f6 =  (f6 + f11)
		f1 =  (f1 - f8)
		f0 =  (f0 + f2)
		f2 =  (f3 - f7)
		f3 =  (f5 + f9)
		__asm(push(f19), push(i12), op(0x3d))
		__asm(push(f18), push(i8), op(0x3d))
		f4 =  f4/*fround*/
		f6 =  f6/*fround*/
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f5 =  f3/*fround*/
		f3 = f2
		f2 = f0
		__asm(jump, target("__ZN15b2ContactSolver24SolveVelocityConstraintsEv__XprivateX__BB398_26_F"))
	__asm(lbl("__ZN15b2ContactSolver24SolveVelocityConstraintsEv__XprivateX__BB398_16_F"))
		f18 =  (0)
		i13 =  (i4 + i3)
		f19 =  ((__xasm<Number>(push((i13+32)), op(0x38))))
		f19 =  -f19
		f19 =  f19/*fround*/
		f19 =  f19/*fextend*/
		f26 =  f16/*fextend*/
		f19 =  (f26 * f19)
		f19 =  f19/*fround*/
		f18 =  f18/*fround*/
		f18 =  f18/*fextend*/
		f26 =  f19/*fextend*/
		__asm(push(f26<f18), iftrue, target("__ZN15b2ContactSolver24SolveVelocityConstraintsEv__XprivateX__BB398_19_F"))
	__asm(lbl("__ZN15b2ContactSolver24SolveVelocityConstraintsEv__XprivateX__BB398_17_F"))
		f18 =  (0)
		f26 =  f19/*fextend*/
		f24 =  f24/*fextend*/
		f24 =  (f24 * f26)
		f24 =  f24/*fround*/
		f26 =  f17/*fextend*/
		f24 =  f24/*fextend*/
		f24 =  (f24 + f26)
		f24 =  f24/*fround*/
		f18 =  f18/*fround*/
		f18 =  f18/*fextend*/
		f24 =  f24/*fextend*/
		__asm(push(f24<f18), iftrue, target("__ZN15b2ContactSolver24SolveVelocityConstraintsEv__XprivateX__BB398_19_F"))
	__asm(lbl("__ZN15b2ContactSolver24SolveVelocityConstraintsEv__XprivateX__BB398_18_F"))
		f16 =  (0)
		f16 =  f16/*fround*/
		f13 =  f13/*fextend*/
		f16 =  f16/*fextend*/
		f12 =  f12/*fextend*/
		f17 =  f19/*fextend*/
		f13 =  (f16 - f13)
		f12 =  (f17 - f12)
		f13 =  f13/*fround*/
		f12 =  f12/*fround*/
		f13 =  f13/*fextend*/
		f11 =  f11/*fextend*/
		f12 =  f12/*fextend*/
		f16 =  ((__xasm<Number>(push((mstate.ebp+-8)), op(0x38))))
		f16 =  f16/*fextend*/
		f17 =  (f11 * f13)
		f13 =  (f16 * f13)
		f11 =  (f11 * f12)
		f12 =  (f16 * f12)
		f16 =  f17/*fround*/
		f13 =  f13/*fround*/
		f11 =  f11/*fround*/
		f12 =  f12/*fround*/
		f17 =  f22/*fextend*/
		f16 =  f16/*fextend*/
		f14 =  f14/*fextend*/
		f11 =  f11/*fextend*/
		f18 =  f20/*fextend*/
		f0 =  f0/*fextend*/
		f20 =  f23/*fextend*/
		f13 =  f13/*fextend*/
		f15 =  f15/*fextend*/
		f12 =  f12/*fextend*/
		f21 =  f21/*fextend*/
		f22 =  ((__xasm<Number>(push((mstate.ebp+-16)), op(0x38))))
		f22 =  f22/*fextend*/
		f17 =  (f17 * f16)
		f14 =  (f14 * f16)
		f20 =  (f20 * f13)
		f15 =  (f15 * f13)
		f18 =  (f18 * f11)
		f0 =  (f0 * f11)
		f21 =  (f21 * f12)
		f22 =  (f22 * f12)
		f17 =  f17/*fround*/
		f14 =  f14/*fround*/
		f20 =  f20/*fround*/
		f15 =  f15/*fround*/
		f23 =  f18/*fround*/
		f0 =  f0/*fround*/
		f21 =  f21/*fround*/
		f22 =  f22/*fround*/
		f18 =  f20/*fextend*/
		f17 =  f17/*fextend*/
		f15 =  f15/*fextend*/
		f14 =  f14/*fextend*/
		f20 =  f21/*fextend*/
		f21 =  f23/*fextend*/
		f22 =  f22/*fextend*/
		f0 =  f0/*fextend*/
		f17 =  (f17 - f18)
		f14 =  (f14 - f15)
		f15 =  (f21 - f20)
		f0 =  (f0 - f22)
		f17 =  f17/*fround*/
		f14 =  f14/*fround*/
		f15 =  f15/*fround*/
		f0 =  f0/*fround*/
		f17 =  f17/*fextend*/
		f15 =  f15/*fextend*/
		f14 =  f14/*fextend*/
		f0 =  f0/*fextend*/
		f11 =  (f11 + f16)
		f15 =  (f15 + f17)
		f0 =  (f0 + f14)
		f12 =  (f12 + f13)
		f11 =  f11/*fround*/
		f13 =  f15/*fround*/
		f0 =  f0/*fround*/
		f12 =  f12/*fround*/
		f11 =  f11/*fextend*/
		f7 =  f7/*fextend*/
		f9 =  f9/*fextend*/
		f12 =  f12/*fextend*/
		f8 =  f8/*fextend*/
		f13 =  f13/*fextend*/
		f10 =  f10/*fextend*/
		f0 =  f0/*fextend*/
		f14 =  (f11 * f7)
		f11 =  (f11 * f9)
		f8 =  (f13 * f8)
		f0 =  (f0 * f10)
		f7 =  (f12 * f7)
		f9 =  (f12 * f9)
		f10 =  f14/*fround*/
		f11 =  f11/*fround*/
		f8 =  f8/*fround*/
		f0 =  f0/*fround*/
		f7 =  f7/*fround*/
		f9 =  f9/*fround*/
		f10 =  f10/*fextend*/
		f4 =  f4/*fextend*/
		f11 =  f11/*fextend*/
		f6 =  f6/*fextend*/
		f8 =  f8/*fextend*/
		f1 =  f1/*fextend*/
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f7 =  f7/*fextend*/
		f3 =  f3/*fextend*/
		f9 =  f9/*fextend*/
		f5 =  f5/*fextend*/
		f4 =  (f4 - f10)
		f6 =  (f6 + f11)
		f1 =  (f1 - f8)
		f0 =  (f0 + f2)
		f2 =  (f3 - f7)
		f3 =  (f5 + f9)
		__asm(push(f19), push(i12), op(0x3d))
		i4 =  (0)
		__asm(push(i4), push(i8), op(0x3c))
		f4 =  f4/*fround*/
		f6 =  f6/*fround*/
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f5 =  f3/*fround*/
		f3 = f2
		f2 = f0
		__asm(jump, target("__ZN15b2ContactSolver24SolveVelocityConstraintsEv__XprivateX__BB398_26_F"))
	__asm(lbl("__ZN15b2ContactSolver24SolveVelocityConstraintsEv__XprivateX__BB398_19_F"))
		f18 =  (0)
		i4 =  (i4 + i3)
		f19 =  ((__xasm<Number>(push((i4+76)), op(0x38))))
		f19 =  -f19
		f19 =  f19/*fround*/
		f19 =  f19/*fextend*/
		f24 =  f17/*fextend*/
		f19 =  (f24 * f19)
		f19 =  f19/*fround*/
		f18 =  f18/*fround*/
		f18 =  f18/*fextend*/
		f24 =  f19/*fextend*/
		__asm(push(f24<f18), iftrue, target("__ZN15b2ContactSolver24SolveVelocityConstraintsEv__XprivateX__BB398_22_F"))
	__asm(lbl("__ZN15b2ContactSolver24SolveVelocityConstraintsEv__XprivateX__BB398_20_F"))
		f18 =  (0)
		f24 =  f19/*fextend*/
		f25 =  f25/*fextend*/
		f24 =  (f25 * f24)
		f24 =  f24/*fround*/
		f25 =  f16/*fextend*/
		f24 =  f24/*fextend*/
		f24 =  (f24 + f25)
		f24 =  f24/*fround*/
		f18 =  f18/*fround*/
		f18 =  f18/*fextend*/
		f24 =  f24/*fextend*/
		__asm(push(f24<f18), iftrue, target("__ZN15b2ContactSolver24SolveVelocityConstraintsEv__XprivateX__BB398_22_F"))
	__asm(lbl("__ZN15b2ContactSolver24SolveVelocityConstraintsEv__XprivateX__BB398_21_F"))
		f16 =  (0)
		f16 =  f16/*fround*/
		f13 =  f13/*fextend*/
		f17 =  f19/*fextend*/
		f12 =  f12/*fextend*/
		f16 =  f16/*fextend*/
		f13 =  (f17 - f13)
		f12 =  (f16 - f12)
		f13 =  f13/*fround*/
		f12 =  f12/*fround*/
		f13 =  f13/*fextend*/
		f11 =  f11/*fextend*/
		f12 =  f12/*fextend*/
		f16 =  ((__xasm<Number>(push((mstate.ebp+-8)), op(0x38))))
		f16 =  f16/*fextend*/
		f17 =  (f11 * f13)
		f13 =  (f16 * f13)
		f11 =  (f11 * f12)
		f12 =  (f16 * f12)
		f16 =  f17/*fround*/
		f13 =  f13/*fround*/
		f11 =  f11/*fround*/
		f12 =  f12/*fround*/
		f17 =  f22/*fextend*/
		f16 =  f16/*fextend*/
		f14 =  f14/*fextend*/
		f11 =  f11/*fextend*/
		f18 =  f20/*fextend*/
		f0 =  f0/*fextend*/
		f20 =  f23/*fextend*/
		f13 =  f13/*fextend*/
		f15 =  f15/*fextend*/
		f12 =  f12/*fextend*/
		f21 =  f21/*fextend*/
		f22 =  ((__xasm<Number>(push((mstate.ebp+-16)), op(0x38))))
		f22 =  f22/*fextend*/
		f17 =  (f17 * f16)
		f14 =  (f14 * f16)
		f20 =  (f20 * f13)
		f15 =  (f15 * f13)
		f18 =  (f18 * f11)
		f0 =  (f0 * f11)
		f21 =  (f21 * f12)
		f22 =  (f22 * f12)
		f17 =  f17/*fround*/
		f14 =  f14/*fround*/
		f20 =  f20/*fround*/
		f15 =  f15/*fround*/
		f23 =  f18/*fround*/
		f0 =  f0/*fround*/
		f21 =  f21/*fround*/
		f22 =  f22/*fround*/
		f18 =  f20/*fextend*/
		f17 =  f17/*fextend*/
		f15 =  f15/*fextend*/
		f14 =  f14/*fextend*/
		f20 =  f21/*fextend*/
		f21 =  f23/*fextend*/
		f22 =  f22/*fextend*/
		f0 =  f0/*fextend*/
		f17 =  (f17 - f18)
		f14 =  (f14 - f15)
		f15 =  (f21 - f20)
		f0 =  (f0 - f22)
		f17 =  f17/*fround*/
		f14 =  f14/*fround*/
		f15 =  f15/*fround*/
		f0 =  f0/*fround*/
		f17 =  f17/*fextend*/
		f15 =  f15/*fextend*/
		f14 =  f14/*fextend*/
		f0 =  f0/*fextend*/
		f11 =  (f11 + f16)
		f15 =  (f15 + f17)
		f0 =  (f0 + f14)
		f12 =  (f12 + f13)
		f11 =  f11/*fround*/
		f13 =  f15/*fround*/
		f0 =  f0/*fround*/
		f12 =  f12/*fround*/
		f11 =  f11/*fextend*/
		f7 =  f7/*fextend*/
		f9 =  f9/*fextend*/
		f12 =  f12/*fextend*/
		f8 =  f8/*fextend*/
		f13 =  f13/*fextend*/
		f10 =  f10/*fextend*/
		f0 =  f0/*fextend*/
		f14 =  (f11 * f7)
		f11 =  (f11 * f9)
		f8 =  (f13 * f8)
		f0 =  (f0 * f10)
		f7 =  (f12 * f7)
		f9 =  (f12 * f9)
		f10 =  f14/*fround*/
		f11 =  f11/*fround*/
		f8 =  f8/*fround*/
		f0 =  f0/*fround*/
		f7 =  f7/*fround*/
		f9 =  f9/*fround*/
		f10 =  f10/*fextend*/
		f4 =  f4/*fextend*/
		f11 =  f11/*fextend*/
		f6 =  f6/*fextend*/
		f8 =  f8/*fextend*/
		f1 =  f1/*fextend*/
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f7 =  f7/*fextend*/
		f3 =  f3/*fextend*/
		f9 =  f9/*fextend*/
		f5 =  f5/*fextend*/
		i4 =  (0)
		f4 =  (f4 - f10)
		f6 =  (f6 + f11)
		f1 =  (f1 - f8)
		f0 =  (f0 + f2)
		f2 =  (f3 - f7)
		f3 =  (f5 + f9)
		__asm(push(i4), push(i12), op(0x3c))
		__asm(push(f19), push(i8), op(0x3d))
		f4 =  f4/*fround*/
		f6 =  f6/*fround*/
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f5 =  f3/*fround*/
		f3 = f2
		f2 = f0
		__asm(jump, target("__ZN15b2ContactSolver24SolveVelocityConstraintsEv__XprivateX__BB398_26_F"))
	__asm(lbl("__ZN15b2ContactSolver24SolveVelocityConstraintsEv__XprivateX__BB398_22_F"))
		f18 =  (0)
		f18 =  f18/*fround*/
		f18 =  f18/*fextend*/
		f16 =  f16/*fextend*/
		__asm(push(f16<f18), iftrue, target("__ZN15b2ContactSolver24SolveVelocityConstraintsEv__XprivateX__BB398_24_F"))
	__asm(lbl("__ZN15b2ContactSolver24SolveVelocityConstraintsEv__XprivateX__BB398_23_F"))
		f16 =  (0)
		f16 =  f16/*fround*/
		f16 =  f16/*fextend*/
		f17 =  f17/*fextend*/
		__asm(push(f17>=f16), iftrue, target("__ZN15b2ContactSolver24SolveVelocityConstraintsEv__XprivateX__BB398_25_F"))
	__asm(lbl("__ZN15b2ContactSolver24SolveVelocityConstraintsEv__XprivateX__BB398_24_F"))
		__asm(jump, target("__ZN15b2ContactSolver24SolveVelocityConstraintsEv__XprivateX__BB398_26_F"))
	__asm(lbl("__ZN15b2ContactSolver24SolveVelocityConstraintsEv__XprivateX__BB398_25_F"))
		f16 =  (0)
		f16 =  f16/*fround*/
		f13 =  f13/*fextend*/
		f16 =  f16/*fextend*/
		f12 =  f12/*fextend*/
		f13 =  (f16 - f13)
		f12 =  (f16 - f12)
		f13 =  f13/*fround*/
		f12 =  f12/*fround*/
		f13 =  f13/*fextend*/
		f11 =  f11/*fextend*/
		f12 =  f12/*fextend*/
		f16 =  ((__xasm<Number>(push((mstate.ebp+-8)), op(0x38))))
		f16 =  f16/*fextend*/
		f17 =  (f11 * f13)
		f13 =  (f16 * f13)
		f11 =  (f11 * f12)
		f12 =  (f16 * f12)
		f16 =  f17/*fround*/
		f13 =  f13/*fround*/
		f11 =  f11/*fround*/
		f12 =  f12/*fround*/
		f17 =  f22/*fextend*/
		f16 =  f16/*fextend*/
		f14 =  f14/*fextend*/
		f11 =  f11/*fextend*/
		f18 =  f20/*fextend*/
		f0 =  f0/*fextend*/
		f19 =  f23/*fextend*/
		f13 =  f13/*fextend*/
		f15 =  f15/*fextend*/
		f12 =  f12/*fextend*/
		f20 =  f21/*fextend*/
		f21 =  ((__xasm<Number>(push((mstate.ebp+-16)), op(0x38))))
		f21 =  f21/*fextend*/
		f17 =  (f17 * f16)
		f14 =  (f14 * f16)
		f19 =  (f19 * f13)
		f15 =  (f15 * f13)
		f18 =  (f18 * f11)
		f0 =  (f0 * f11)
		f20 =  (f20 * f12)
		f21 =  (f21 * f12)
		f17 =  f17/*fround*/
		f14 =  f14/*fround*/
		f19 =  f19/*fround*/
		f15 =  f15/*fround*/
		f18 =  f18/*fround*/
		f0 =  f0/*fround*/
		f20 =  f20/*fround*/
		f21 =  f21/*fround*/
		f19 =  f19/*fextend*/
		f17 =  f17/*fextend*/
		f15 =  f15/*fextend*/
		f14 =  f14/*fextend*/
		f20 =  f20/*fextend*/
		f18 =  f18/*fextend*/
		f21 =  f21/*fextend*/
		f0 =  f0/*fextend*/
		f17 =  (f17 - f19)
		f14 =  (f14 - f15)
		f15 =  (f18 - f20)
		f0 =  (f0 - f21)
		f17 =  f17/*fround*/
		f14 =  f14/*fround*/
		f15 =  f15/*fround*/
		f0 =  f0/*fround*/
		f17 =  f17/*fextend*/
		f15 =  f15/*fextend*/
		f14 =  f14/*fextend*/
		f0 =  f0/*fextend*/
		f11 =  (f11 + f16)
		f15 =  (f15 + f17)
		f0 =  (f0 + f14)
		f12 =  (f12 + f13)
		f11 =  f11/*fround*/
		f13 =  f15/*fround*/
		f0 =  f0/*fround*/
		f12 =  f12/*fround*/
		f11 =  f11/*fextend*/
		f7 =  f7/*fextend*/
		f9 =  f9/*fextend*/
		f12 =  f12/*fextend*/
		f8 =  f8/*fextend*/
		f13 =  f13/*fextend*/
		f10 =  f10/*fextend*/
		f0 =  f0/*fextend*/
		f14 =  (f11 * f7)
		f11 =  (f11 * f9)
		f8 =  (f13 * f8)
		f0 =  (f0 * f10)
		f7 =  (f12 * f7)
		f9 =  (f12 * f9)
		f10 =  f14/*fround*/
		f11 =  f11/*fround*/
		f8 =  f8/*fround*/
		f0 =  f0/*fround*/
		f7 =  f7/*fround*/
		f9 =  f9/*fround*/
		f10 =  f10/*fextend*/
		f4 =  f4/*fextend*/
		f11 =  f11/*fextend*/
		f6 =  f6/*fextend*/
		f8 =  f8/*fextend*/
		f1 =  f1/*fextend*/
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f7 =  f7/*fextend*/
		f3 =  f3/*fextend*/
		f9 =  f9/*fextend*/
		f5 =  f5/*fextend*/
		i4 =  (0)
		f4 =  (f4 - f10)
		f6 =  (f6 + f11)
		f1 =  (f1 - f8)
		f0 =  (f0 + f2)
		f2 =  (f3 - f7)
		f3 =  (f5 + f9)
		__asm(push(i4), push(i12), op(0x3c))
		__asm(push(i4), push(i8), op(0x3c))
		f4 =  f4/*fround*/
		f6 =  f6/*fround*/
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f5 =  f3/*fround*/
		f3 = f2
		f2 = f0
	__asm(lbl("__ZN15b2ContactSolver24SolveVelocityConstraintsEv__XprivateX__BB398_26_F"))
		f0 = f3
		f3 = f4
		f4 = f5
		f5 = f6
		__asm(push(f0), push(i11), op(0x3d))
		__asm(push(f3), push(i5), op(0x3d))
		__asm(push(f1), push(i6), op(0x3d))
		__asm(push(f4), push(i10), op(0x3d))
		__asm(push(f5), push(i9), op(0x3d))
		__asm(push(f2), push(i7), op(0x3d))
		i4 =  ((__xasm<int>(push(i2), op(0x37))))
		i3 =  (i3 + 188)
		i1 =  (i1 + 1)
		__asm(push(i4<=i1), iftrue, target("__ZN15b2ContactSolver24SolveVelocityConstraintsEv__XprivateX__BB398_28_F"))
	__asm(lbl("__ZN15b2ContactSolver24SolveVelocityConstraintsEv__XprivateX__BB398_27_F"))
		__asm(jump, target("__ZN15b2ContactSolver24SolveVelocityConstraintsEv__XprivateX__BB398_2_B"))
	__asm(lbl("__ZN15b2ContactSolver24SolveVelocityConstraintsEv__XprivateX__BB398_28_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN15b2ContactSolver24SolveVelocityConstraintsEv_errState"))
		throw("Invalid state in __ZN15b2ContactSolver24SolveVelocityConstraintsEv")
	}
}



// Async
public const __ZN16b2ContactManager7DestroyEP9b2Contact:int = regFunc(FSM__ZN16b2ContactManager7DestroyEP9b2Contact.start)

public final class FSM__ZN16b2ContactManager7DestroyEP9b2Contact extends Machine {

	public static function start():void {
			var result:FSM__ZN16b2ContactManager7DestroyEP9b2Contact = new FSM__ZN16b2ContactManager7DestroyEP9b2Contact
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
	public var i8:int

	public static const intRegCount:int = 9

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN16b2ContactManager7DestroyEP9b2Contact_entry"))
		__asm(push(state), switchjump(
			"__ZN16b2ContactManager7DestroyEP9b2Contact_errState",
			"__ZN16b2ContactManager7DestroyEP9b2Contact_state0",
			"__ZN16b2ContactManager7DestroyEP9b2Contact_state1",
			"__ZN16b2ContactManager7DestroyEP9b2Contact_state2",
			"__ZN16b2ContactManager7DestroyEP9b2Contact_state3",
			"__ZN16b2ContactManager7DestroyEP9b2Contact_state4"))
	__asm(lbl("__ZN16b2ContactManager7DestroyEP9b2Contact_state0"))
	__asm(lbl("__ZN16b2ContactManager7DestroyEP9b2Contact__XprivateX__BB399_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i2 =  ((__xasm<int>(push((i0+48)), op(0x37))))
		i3 =  ((__xasm<int>(push((i0+52)), op(0x37))))
		i2 =  ((__xasm<int>(push((i2+12)), op(0x37))))
		i3 =  ((__xasm<int>(push((i3+12)), op(0x37))))
		i4 =  ((__xasm<int>(push((i1+72)), op(0x37))))
		i5 =  (i0 + 52)
		i6 =  (i0 + 48)
		__asm(push(i4==0), iftrue, target("__ZN16b2ContactManager7DestroyEP9b2Contact__XprivateX__BB399_3_F"))
	__asm(lbl("__ZN16b2ContactManager7DestroyEP9b2Contact__XprivateX__BB399_1_F"))
		i7 =  ((__xasm<int>(push((i0+4)), op(0x37))))
		i7 =  (i7 & 2)
		__asm(push(i7==0), iftrue, target("__ZN16b2ContactManager7DestroyEP9b2Contact__XprivateX__BB399_3_F"))
	__asm(lbl("__ZN16b2ContactManager7DestroyEP9b2Contact__XprivateX__BB399_2_F"))
		i7 =  ((__xasm<int>(push(i4), op(0x37))))
		i7 =  ((__xasm<int>(push((i7+12)), op(0x37))))
		mstate.esp -= 8
		__asm(push(i4), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[i7])()
		return
	__asm(lbl("__ZN16b2ContactManager7DestroyEP9b2Contact_state1"))
		mstate.esp += 8
	__asm(lbl("__ZN16b2ContactManager7DestroyEP9b2Contact__XprivateX__BB399_3_F"))
		i4 =  ((__xasm<int>(push((i0+8)), op(0x37))))
		i7 =  (i0 + 8)
		__asm(push(i4==0), iftrue, target("__ZN16b2ContactManager7DestroyEP9b2Contact__XprivateX__BB399_5_F"))
	__asm(lbl("__ZN16b2ContactManager7DestroyEP9b2Contact__XprivateX__BB399_4_F"))
		i8 =  ((__xasm<int>(push((i0+12)), op(0x37))))
		__asm(push(i8), push((i4+12)), op(0x3c))
	__asm(lbl("__ZN16b2ContactManager7DestroyEP9b2Contact__XprivateX__BB399_5_F"))
		i4 =  ((__xasm<int>(push((i0+12)), op(0x37))))
		i8 =  (i0 + 12)
		__asm(push(i4==0), iftrue, target("__ZN16b2ContactManager7DestroyEP9b2Contact__XprivateX__BB399_7_F"))
	__asm(lbl("__ZN16b2ContactManager7DestroyEP9b2Contact__XprivateX__BB399_6_F"))
		i7 =  ((__xasm<int>(push(i7), op(0x37))))
		__asm(push(i7), push((i4+8)), op(0x3c))
	__asm(lbl("__ZN16b2ContactManager7DestroyEP9b2Contact__XprivateX__BB399_7_F"))
		i4 =  ((__xasm<int>(push((i1+60)), op(0x37))))
		i7 =  (i1 + 60)
		__asm(push(i4!=i0), iftrue, target("__ZN16b2ContactManager7DestroyEP9b2Contact__XprivateX__BB399_9_F"))
	__asm(lbl("__ZN16b2ContactManager7DestroyEP9b2Contact__XprivateX__BB399_8_F"))
		i4 =  ((__xasm<int>(push(i8), op(0x37))))
		__asm(push(i4), push(i7), op(0x3c))
	__asm(lbl("__ZN16b2ContactManager7DestroyEP9b2Contact__XprivateX__BB399_9_F"))
		i4 =  ((__xasm<int>(push((i0+24)), op(0x37))))
		i7 =  (i0 + 24)
		__asm(push(i4==0), iftrue, target("__ZN16b2ContactManager7DestroyEP9b2Contact__XprivateX__BB399_11_F"))
	__asm(lbl("__ZN16b2ContactManager7DestroyEP9b2Contact__XprivateX__BB399_10_F"))
		i8 =  ((__xasm<int>(push((i0+28)), op(0x37))))
		__asm(push(i8), push((i4+12)), op(0x3c))
	__asm(lbl("__ZN16b2ContactManager7DestroyEP9b2Contact__XprivateX__BB399_11_F"))
		i4 =  ((__xasm<int>(push((i0+28)), op(0x37))))
		i8 =  (i0 + 28)
		__asm(push(i4==0), iftrue, target("__ZN16b2ContactManager7DestroyEP9b2Contact__XprivateX__BB399_13_F"))
	__asm(lbl("__ZN16b2ContactManager7DestroyEP9b2Contact__XprivateX__BB399_12_F"))
		i7 =  ((__xasm<int>(push(i7), op(0x37))))
		__asm(push(i7), push((i4+8)), op(0x3c))
	__asm(lbl("__ZN16b2ContactManager7DestroyEP9b2Contact__XprivateX__BB399_13_F"))
		i4 =  ((__xasm<int>(push((i2+120)), op(0x37))))
		i2 =  (i2 + 120)
		i7 =  (i0 + 16)
		__asm(push(i7!=i4), iftrue, target("__ZN16b2ContactManager7DestroyEP9b2Contact__XprivateX__BB399_15_F"))
	__asm(lbl("__ZN16b2ContactManager7DestroyEP9b2Contact__XprivateX__BB399_14_F"))
		i4 =  ((__xasm<int>(push(i8), op(0x37))))
		__asm(push(i4), push(i2), op(0x3c))
	__asm(lbl("__ZN16b2ContactManager7DestroyEP9b2Contact__XprivateX__BB399_15_F"))
		i2 =  ((__xasm<int>(push((i0+40)), op(0x37))))
		i4 =  (i0 + 40)
		__asm(push(i2==0), iftrue, target("__ZN16b2ContactManager7DestroyEP9b2Contact__XprivateX__BB399_17_F"))
	__asm(lbl("__ZN16b2ContactManager7DestroyEP9b2Contact__XprivateX__BB399_16_F"))
		i7 =  ((__xasm<int>(push((i0+44)), op(0x37))))
		__asm(push(i7), push((i2+12)), op(0x3c))
	__asm(lbl("__ZN16b2ContactManager7DestroyEP9b2Contact__XprivateX__BB399_17_F"))
		i2 =  ((__xasm<int>(push((i0+44)), op(0x37))))
		i7 =  (i0 + 44)
		__asm(push(i2==0), iftrue, target("__ZN16b2ContactManager7DestroyEP9b2Contact__XprivateX__BB399_19_F"))
	__asm(lbl("__ZN16b2ContactManager7DestroyEP9b2Contact__XprivateX__BB399_18_F"))
		i4 =  ((__xasm<int>(push(i4), op(0x37))))
		__asm(push(i4), push((i2+8)), op(0x3c))
	__asm(lbl("__ZN16b2ContactManager7DestroyEP9b2Contact__XprivateX__BB399_19_F"))
		i2 =  ((__xasm<int>(push((i3+120)), op(0x37))))
		i3 =  (i3 + 120)
		i4 =  (i0 + 32)
		__asm(push(i4!=i2), iftrue, target("__ZN16b2ContactManager7DestroyEP9b2Contact__XprivateX__BB399_21_F"))
	__asm(lbl("__ZN16b2ContactManager7DestroyEP9b2Contact__XprivateX__BB399_20_F"))
		i2 =  ((__xasm<int>(push(i7), op(0x37))))
		__asm(push(i2), push(i3), op(0x3c))
	__asm(lbl("__ZN16b2ContactManager7DestroyEP9b2Contact__XprivateX__BB399_21_F"))
		i2 =  ((__xasm<int>(push((i1+76)), op(0x37))))
		i3 =  ((__xasm<int>(push(__ZN9b2Contact13s_initializedE_2E_b), op(0x35))))
		__asm(push(i3!=0), iftrue, target("__ZN16b2ContactManager7DestroyEP9b2Contact__XprivateX__BB399_24_F"))
	__asm(lbl("__ZN16b2ContactManager7DestroyEP9b2Contact__XprivateX__BB399_22_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str71278)
		i5 =  (__ZZN9b2Contact7DestroyEPS_P16b2BlockAllocatorE8__func__)
		i6 =  (__2E_str17224)
		i3 =  (103)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i5), push((mstate.esp+12)), op(0x3c))
		__asm(push(i6), push((mstate.esp+16)), op(0x3c))
		__asm(push(i3), push((mstate.esp+20)), op(0x3c))
	__asm(jump, target("__ZN16b2ContactManager7DestroyEP9b2Contact__XprivateX__BB399_23_F"), lbl("__ZN16b2ContactManager7DestroyEP9b2Contact__XprivateX__BB399_23_B"), label, lbl("__ZN16b2ContactManager7DestroyEP9b2Contact__XprivateX__BB399_23_F")); 
		state = 2
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__ZN16b2ContactManager7DestroyEP9b2Contact_state2"))
		mstate.esp += 24
		state = 3
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZN16b2ContactManager7DestroyEP9b2Contact_state3"))
	__asm(lbl("__ZN16b2ContactManager7DestroyEP9b2Contact__XprivateX__BB399_24_F"))
		i3 =  ((__xasm<int>(push((i0+132)), op(0x37))))
		__asm(push(i3<1), iftrue, target("__ZN16b2ContactManager7DestroyEP9b2Contact__XprivateX__BB399_29_F"))
	__asm(lbl("__ZN16b2ContactManager7DestroyEP9b2Contact__XprivateX__BB399_25_F"))
		i3 =  ((__xasm<int>(push(i6), op(0x37))))
		i3 =  ((__xasm<int>(push((i3+12)), op(0x37))))
		i4 =  ((__xasm<int>(push((i3+4)), op(0x36))))
		i7 =  (i3 + 4)
		i8 =  (i4 & 2)
		__asm(push(i8!=0), iftrue, target("__ZN16b2ContactManager7DestroyEP9b2Contact__XprivateX__BB399_27_F"))
	__asm(lbl("__ZN16b2ContactManager7DestroyEP9b2Contact__XprivateX__BB399_26_F"))
		i8 =  (0)
		i4 =  (i4 | 2)
		__asm(push(i4), push(i7), op(0x3b))
		__asm(push(i8), push((i3+148)), op(0x3c))
	__asm(lbl("__ZN16b2ContactManager7DestroyEP9b2Contact__XprivateX__BB399_27_F"))
		i3 =  ((__xasm<int>(push(i5), op(0x37))))
		i3 =  ((__xasm<int>(push((i3+12)), op(0x37))))
		i4 =  ((__xasm<int>(push((i3+4)), op(0x36))))
		i7 =  (i3 + 4)
		i8 =  (i4 & 2)
		__asm(push(i8!=0), iftrue, target("__ZN16b2ContactManager7DestroyEP9b2Contact__XprivateX__BB399_29_F"))
	__asm(lbl("__ZN16b2ContactManager7DestroyEP9b2Contact__XprivateX__BB399_28_F"))
		i8 =  (0)
		i4 =  (i4 | 2)
		__asm(push(i4), push(i7), op(0x3b))
		__asm(push(i8), push((i3+148)), op(0x3c))
	__asm(lbl("__ZN16b2ContactManager7DestroyEP9b2Contact__XprivateX__BB399_29_F"))
		i3 =  ((__xasm<int>(push(i6), op(0x37))))
		i4 =  ((__xasm<int>(push(i5), op(0x37))))
		i3 =  ((__xasm<int>(push((i3+16)), op(0x37))))
		i4 =  ((__xasm<int>(push((i4+16)), op(0x37))))
		i3 =  ((__xasm<int>(push((i3+4)), op(0x37))))
		i4 =  ((__xasm<int>(push((i4+4)), op(0x37))))
		__asm(push(i4>3), iftrue, target("__ZN16b2ContactManager7DestroyEP9b2Contact__XprivateX__BB399_31_F"))
	__asm(lbl("__ZN16b2ContactManager7DestroyEP9b2Contact__XprivateX__BB399_30_F"))
		__asm(push(i3>-1), iftrue, target("__ZN16b2ContactManager7DestroyEP9b2Contact__XprivateX__BB399_32_F"))
	__asm(lbl("__ZN16b2ContactManager7DestroyEP9b2Contact__XprivateX__BB399_31_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str72279)
		i3 =  (__ZZN9b2Contact7DestroyEPS_P16b2BlockAllocatorE8__func__)
		i4 =  (__2E_str17224)
		i5 =  (114)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		__asm(jump, target("__ZN16b2ContactManager7DestroyEP9b2Contact__XprivateX__BB399_23_B"))
	__asm(lbl("__ZN16b2ContactManager7DestroyEP9b2Contact__XprivateX__BB399_32_F"))
		i5 =  (__ZN9b2Contact11s_registersE)
		i3 =  (i3 * 48)
		i4 =  (i4 * 12)
		i3 =  (i5 + i3)
		i3 =  (i3 + i4)
		i3 =  ((__xasm<int>(push((i3+4)), op(0x37))))
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i2), push((mstate.esp+4)), op(0x3c))
		state = 4
		mstate.esp -= 4;(mstate.funcs[i3])()
		return
	__asm(lbl("__ZN16b2ContactManager7DestroyEP9b2Contact_state4"))
		mstate.esp += 8
		i0 =  ((__xasm<int>(push((i1+64)), op(0x37))))
		i0 =  (i0 + -1)
		__asm(push(i0), push((i1+64)), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN16b2ContactManager7DestroyEP9b2Contact_errState"))
		throw("Invalid state in __ZN16b2ContactManager7DestroyEP9b2Contact")
	}
}



// Async
public const __ZN6b2Body13ResetMassDataEv:int = regFunc(FSM__ZN6b2Body13ResetMassDataEv.start)

public final class FSM__ZN6b2Body13ResetMassDataEv extends Machine {

	public static function start():void {
			var result:FSM__ZN6b2Body13ResetMassDataEv = new FSM__ZN6b2Body13ResetMassDataEv
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
	public var i8:int, i9:int, i10:int, i11:int, i12:int, i13:int, i14:int

	public static const intRegCount:int = 15
	public var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number
	public var f8:Number

	public static const NumberRegCount:int = 9
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN6b2Body13ResetMassDataEv_entry"))
		__asm(push(state), switchjump(
			"__ZN6b2Body13ResetMassDataEv_errState",
			"__ZN6b2Body13ResetMassDataEv_state0",
			"__ZN6b2Body13ResetMassDataEv_state1",
			"__ZN6b2Body13ResetMassDataEv_state2",
			"__ZN6b2Body13ResetMassDataEv_state3"))
	__asm(lbl("__ZN6b2Body13ResetMassDataEv_state0"))
	__asm(lbl("__ZN6b2Body13ResetMassDataEv__XprivateX__BB400_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 16
		i0 =  (0)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		__asm(push(i0), push((i1+124)), op(0x3c))
		__asm(push(i0), push((i1+128)), op(0x3c))
		__asm(push(i0), push((i1+132)), op(0x3c))
		__asm(push(i0), push((i1+136)), op(0x3c))
		__asm(push(i0), push((i1+36)), op(0x3c))
		__asm(push(i0), push((i1+40)), op(0x3c))
		i0 =  ((__xasm<int>(push(i1), op(0x37))))
		i2 =  (i1 + 40)
		i3 =  (i1 + 36)
		i4 =  (i1 + 136)
		i5 =  (i1 + 132)
		i6 =  (i1 + 128)
		i7 =  (i1 + 124)
		__asm(push(uint(i0)>uint(1)), iftrue, target("__ZN6b2Body13ResetMassDataEv__XprivateX__BB400_3_F"))
	__asm(lbl("__ZN6b2Body13ResetMassDataEv__XprivateX__BB400_1_F"))
		f0 =  ((__xasm<Number>(push((i1+12)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i1+16)), op(0x38))))
		__asm(push(f0), push((i1+52)), op(0x3d))
		__asm(push(f1), push((i1+56)), op(0x3d))
		__asm(push(f0), push((i1+44)), op(0x3d))
		__asm(push(f1), push((i1+48)), op(0x3d))
	__asm(jump, target("__ZN6b2Body13ResetMassDataEv__XprivateX__BB400_2_F"), lbl("__ZN6b2Body13ResetMassDataEv__XprivateX__BB400_2_B"), label, lbl("__ZN6b2Body13ResetMassDataEv__XprivateX__BB400_2_F")); 
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN6b2Body13ResetMassDataEv__XprivateX__BB400_3_F"))
		i8 =  (i1 + 108)
		__asm(push(i0==2), iftrue, target("__ZN6b2Body13ResetMassDataEv__XprivateX__BB400_6_F"))
	__asm(lbl("__ZN6b2Body13ResetMassDataEv__XprivateX__BB400_4_F"))
		i1 =  (___sF)
		mstate.esp -= 24
		i2 =  (__2E_str1670)
		i3 =  (__2E_str73280)
		i4 =  (__ZZN6b2Body13ResetMassDataEvE8__func__)
		i5 =  (__2E_str53260)
		i6 =  (270)
		i1 =  (i1 + 176)
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i2), push((mstate.esp+4)), op(0x3c))
		__asm(push(i3), push((mstate.esp+8)), op(0x3c))
		__asm(push(i4), push((mstate.esp+12)), op(0x3c))
		__asm(push(i5), push((mstate.esp+16)), op(0x3c))
		__asm(push(i6), push((mstate.esp+20)), op(0x3c))
	__asm(jump, target("__ZN6b2Body13ResetMassDataEv__XprivateX__BB400_5_F"), lbl("__ZN6b2Body13ResetMassDataEv__XprivateX__BB400_5_B"), label, lbl("__ZN6b2Body13ResetMassDataEv__XprivateX__BB400_5_F")); 
		state = 1
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__ZN6b2Body13ResetMassDataEv_state1"))
		mstate.esp += 24
		state = 2
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZN6b2Body13ResetMassDataEv_state2"))
	__asm(lbl("__ZN6b2Body13ResetMassDataEv__XprivateX__BB400_6_F"))
		i0 =  ((mstate.ebp+-16))
		f0 =  (0)
		f0 =  f0/*fround*/
		i9 =  (i0 + 8)
		i10 =  (i0 + 12)
		i11 =  (i0 + 4)
		f1 = f0
		f2 = f0
		f3 = f0
		__asm(jump, target("__ZN6b2Body13ResetMassDataEv__XprivateX__BB400_11_F"))
	__asm(lbl("__ZN6b2Body13ResetMassDataEv__XprivateX__BB400_7_B"), label)
		f3 =  (0)
		f5 =  ((__xasm<Number>(push((i8+4)), op(0x38))))
		f3 =  f3/*fround*/
		f3 =  f3/*fextend*/
		f6 =  f5/*fextend*/
		__asm(push(f6!=f3), iftrue, target("__ZN6b2Body13ResetMassDataEv__XprivateX__BB400_9_F"))
	__asm(lbl("__ZN6b2Body13ResetMassDataEv__XprivateX__BB400_8_F"))
		f3 = f4
		__asm(jump, target("__ZN6b2Body13ResetMassDataEv__XprivateX__BB400_10_F"))
	__asm(lbl("__ZN6b2Body13ResetMassDataEv__XprivateX__BB400_9_F"))
		i12 =  ((mstate.ebp+-16))
		i13 =  ((__xasm<int>(push((i8+16)), op(0x37))))
		i14 =  ((__xasm<int>(push(i13), op(0x37))))
		i14 =  ((__xasm<int>(push((i14+28)), op(0x37))))
		mstate.esp -= 12
		__asm(push(i13), push(mstate.esp), op(0x3c))
		__asm(push(i12), push((mstate.esp+4)), op(0x3c))
		__asm(push(f5), push((mstate.esp+8)), op(0x3d))
		state = 3
		mstate.esp -= 4;(mstate.funcs[i14])()
		return
	__asm(lbl("__ZN6b2Body13ResetMassDataEv_state3"))
		mstate.esp += 12
		f2 =  ((__xasm<Number>(push(i7), op(0x38))))
		f3 =  ((__xasm<Number>(push(i0), op(0x38))))
		f2 =  (f2 + f3)
		f2 =  f2/*fround*/
		__asm(push(f2), push(i7), op(0x3d))
		f4 =  ((__xasm<Number>(push(i9), op(0x38))))
		f5 =  ((__xasm<Number>(push(i11), op(0x38))))
		f4 =  (f4 * f3)
		f3 =  (f5 * f3)
		f4 =  f4/*fround*/
		f3 =  f3/*fround*/
		f5 =  ((__xasm<Number>(push(i5), op(0x38))))
		f6 =  ((__xasm<Number>(push(i10), op(0x38))))
		f5 =  (f5 + f6)
		f4 =  f4/*fextend*/
		f0 =  f0/*fextend*/
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  (f0 + f4)
		f1 =  (f1 + f3)
		f3 =  f5/*fround*/
		__asm(push(f3), push(i5), op(0x3d))
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
	__asm(lbl("__ZN6b2Body13ResetMassDataEv__XprivateX__BB400_10_F"))
		f4 = f1
		i8 =  (i8 + 8)
		f1 = f3
		f3 = f4
	__asm(lbl("__ZN6b2Body13ResetMassDataEv__XprivateX__BB400_11_F"))
		f4 = f1
		f1 = f3
		i8 =  ((__xasm<int>(push(i8), op(0x37))))
		__asm(push(i8!=0), iftrue, target("__ZN6b2Body13ResetMassDataEv__XprivateX__BB400_7_B"))
	__asm(lbl("__ZN6b2Body13ResetMassDataEv__XprivateX__BB400_12_F"))
		f3 =  (0)
		f3 =  f3/*fround*/
		f3 =  f3/*fextend*/
		f5 =  f2/*fextend*/
		__asm(push(f5<=f3), iftrue, target("__ZN6b2Body13ResetMassDataEv__XprivateX__BB400_15_F"))
	__asm(lbl("__ZN6b2Body13ResetMassDataEv__XprivateX__BB400_13_F"))
		f3 =  (1)
		f3 =  f3/*fround*/
		f5 =  f2/*fextend*/
		f3 =  f3/*fextend*/
		f3 =  (f3 / f5)
		f3 =  f3/*fround*/
		f1 =  f1/*fextend*/
		f5 =  f3/*fextend*/
		f0 =  f0/*fextend*/
		f1 =  (f1 * f5)
		f0 =  (f0 * f5)
		f5 =  (0)
		__asm(push(f3), push(i6), op(0x3d))
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		f3 =  f5/*fround*/
		f3 =  f3/*fextend*/
		f5 =  f4/*fextend*/
		__asm(push(f5<=f3), iftrue, target("__ZN6b2Body13ResetMassDataEv__XprivateX__BB400_22_F"))
	__asm(lbl("__ZN6b2Body13ResetMassDataEv__XprivateX__BB400_14_F"))
		__asm(jump, target("__ZN6b2Body13ResetMassDataEv__XprivateX__BB400_17_F"))
	__asm(lbl("__ZN6b2Body13ResetMassDataEv__XprivateX__BB400_15_F"))
		f2 =  (0)
		i0 =  (1065353216)
		f2 =  f2/*fround*/
		__asm(push(i0), push(i7), op(0x3c))
		__asm(push(i0), push(i6), op(0x3c))
		f2 =  f2/*fextend*/
		f3 =  f4/*fextend*/
		__asm(push(f3<=f2), iftrue, target("__ZN6b2Body13ResetMassDataEv__XprivateX__BB400_25_F"))
	__asm(lbl("__ZN6b2Body13ResetMassDataEv__XprivateX__BB400_16_F"))
		f2 =  (1)
		f2 =  f2/*fround*/
		__asm(jump, target("__ZN6b2Body13ResetMassDataEv__XprivateX__BB400_17_F"))
	__asm(lbl("__ZN6b2Body13ResetMassDataEv__XprivateX__BB400_17_F"))
		i0 =  ((__xasm<int>(push((i1+4)), op(0x36))))
		i0 =  (i0 & 16)
		__asm(push(i0==0), iftrue, target("__ZN6b2Body13ResetMassDataEv__XprivateX__BB400_19_F"))
	__asm(lbl("__ZN6b2Body13ResetMassDataEv__XprivateX__BB400_18_F"))
		__asm(jump, target("__ZN6b2Body13ResetMassDataEv__XprivateX__BB400_23_F"))
	__asm(lbl("__ZN6b2Body13ResetMassDataEv__XprivateX__BB400_19_F"))
		f3 =  (0)
		f5 =  f1/*fextend*/
		f6 =  f0/*fextend*/
		f5 =  (f5 * f5)
		f6 =  (f6 * f6)
		f5 =  f5/*fround*/
		f6 =  f6/*fround*/
		f6 =  f6/*fextend*/
		f5 =  f5/*fextend*/
		f5 =  (f5 + f6)
		f5 =  f5/*fround*/
		f5 =  f5/*fextend*/
		f2 =  f2/*fextend*/
		f2 =  (f2 * f5)
		f2 =  f2/*fround*/
		f2 =  f2/*fextend*/
		f4 =  f4/*fextend*/
		f2 =  (f4 - f2)
		f2 =  f2/*fround*/
		__asm(push(f2), push(i5), op(0x3d))
		f3 =  f3/*fround*/
		f3 =  f3/*fextend*/
		f4 =  f2/*fextend*/
		__asm(push(f4>f3), iftrue, target("__ZN6b2Body13ResetMassDataEv__XprivateX__BB400_21_F"))
	__asm(lbl("__ZN6b2Body13ResetMassDataEv__XprivateX__BB400_20_F"))
		i1 =  (___sF)
		mstate.esp -= 24
		i2 =  (__2E_str1670)
		i3 =  (__2E_str55262)
		i4 =  (__ZZN6b2Body13ResetMassDataEvE8__func__)
		i5 =  (__2E_str53260)
		i0 =  (305)
		i1 =  (i1 + 176)
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i2), push((mstate.esp+4)), op(0x3c))
		__asm(push(i3), push((mstate.esp+8)), op(0x3c))
		__asm(push(i4), push((mstate.esp+12)), op(0x3c))
		__asm(push(i5), push((mstate.esp+16)), op(0x3c))
		__asm(push(i0), push((mstate.esp+20)), op(0x3c))
		__asm(jump, target("__ZN6b2Body13ResetMassDataEv__XprivateX__BB400_5_B"))
	__asm(lbl("__ZN6b2Body13ResetMassDataEv__XprivateX__BB400_21_F"))
		f3 =  (1)
		f3 =  f3/*fround*/
		f2 =  f2/*fextend*/
		f3 =  f3/*fextend*/
		f2 =  (f3 / f2)
		f2 =  f2/*fround*/
		__asm(jump, target("__ZN6b2Body13ResetMassDataEv__XprivateX__BB400_24_F"))
	__asm(lbl("__ZN6b2Body13ResetMassDataEv__XprivateX__BB400_22_F"))
		__asm(jump, target("__ZN6b2Body13ResetMassDataEv__XprivateX__BB400_23_F"))
	__asm(jump, target("__ZN6b2Body13ResetMassDataEv__XprivateX__BB400_23_F"), lbl("__ZN6b2Body13ResetMassDataEv__XprivateX__BB400_23_B"), label, lbl("__ZN6b2Body13ResetMassDataEv__XprivateX__BB400_23_F")); 
		f2 =  (0)
		i0 =  (0)
		__asm(push(i0), push(i5), op(0x3c))
		f2 =  f2/*fround*/
	__asm(lbl("__ZN6b2Body13ResetMassDataEv__XprivateX__BB400_24_F"))
		__asm(push(f2), push(i4), op(0x3d))
		f2 =  ((__xasm<Number>(push((i1+52)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i1+56)), op(0x38))))
		__asm(push(f1), push(i3), op(0x3d))
		__asm(push(f0), push(i2), op(0x3d))
		f4 =  ((__xasm<Number>(push((i1+20)), op(0x38))))
		f1 =  f1/*fextend*/
		f5 =  ((__xasm<Number>(push((i1+24)), op(0x38))))
		f4 =  (f4 * f1)
		f4 =  f4/*fround*/
		f1 =  (f5 * f1)
		f1 =  f1/*fround*/
		f5 =  ((__xasm<Number>(push((i1+12)), op(0x38))))
		f4 =  f4/*fextend*/
		f6 =  ((__xasm<Number>(push((i1+28)), op(0x38))))
		f0 =  f0/*fextend*/
		f7 =  ((__xasm<Number>(push((i1+32)), op(0x38))))
		f8 =  ((__xasm<Number>(push((i1+16)), op(0x38))))
		f4 =  (f5 + f4)
		f5 =  (f6 * f0)
		f1 =  f1/*fextend*/
		f4 =  f4/*fround*/
		f5 =  f5/*fround*/
		f1 =  (f8 + f1)
		f0 =  (f7 * f0)
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		f5 =  f5/*fextend*/
		f4 =  f4/*fextend*/
		f4 =  (f4 + f5)
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		f4 =  f4/*fround*/
		f0 =  (f1 + f0)
		f0 =  f0/*fround*/
		__asm(push(f4), push((i1+52)), op(0x3d))
		__asm(push(f0), push((i1+56)), op(0x3d))
		f1 =  f0/*fextend*/
		__asm(push(f4), push((i1+44)), op(0x3d))
		f1 =  (f1 - f3)
		__asm(push(f0), push((i1+48)), op(0x3d))
		f0 =  f1/*fround*/
		f1 =  ((__xasm<Number>(push((i1+80)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f0 * f1)
		f3 =  f4/*fextend*/
		f0 =  f0/*fround*/
		f2 =  (f3 - f2)
		f3 =  ((__xasm<Number>(push((i1+72)), op(0x38))))
		f0 =  f0/*fextend*/
		f2 =  f2/*fround*/
		f2 =  f2/*fextend*/
		f0 =  (f3 - f0)
		f1 =  (f2 * f1)
		f0 =  f0/*fround*/
		__asm(push(f0), push((i1+72)), op(0x3d))
		f0 =  f1/*fround*/
		f1 =  ((__xasm<Number>(push((i1+76)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f1 + f0)
		f0 =  f0/*fround*/
		__asm(push(f0), push((i1+76)), op(0x3d))
		__asm(jump, target("__ZN6b2Body13ResetMassDataEv__XprivateX__BB400_2_B"))
	__asm(lbl("__ZN6b2Body13ResetMassDataEv__XprivateX__BB400_25_F"))
		__asm(jump, target("__ZN6b2Body13ResetMassDataEv__XprivateX__BB400_23_B"))
	__asm(lbl("__ZN6b2Body13ResetMassDataEv_errState"))
		throw("Invalid state in __ZN6b2Body13ResetMassDataEv")
	}
}



// Sync
public const __ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0_:int = regFunc(FSM__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0_.start)

public final class FSM__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0_ extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
		var i8:int, i9:int, i10:int, i11:int, i12:int, i13:int, i14:int, i15:int
		var i16:int, i17:int, i18:int


		__asm(label, lbl("__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0__entry"))
	__asm(lbl("__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0___XprivateX__BB401_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		__asm(push(i0==i1), iftrue, target("__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0___XprivateX__BB401_30_F"))
	__asm(lbl("__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0___XprivateX__BB401_1_F"))
		i2 =  (i0 + 8)
		i3 =  (i0 + 4)
		i4 = i0
		i5 = i0
		__asm(jump, target("__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0___XprivateX__BB401_28_F"))
	__asm(lbl("__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0___XprivateX__BB401_2_B"), label)
		i9 =  ((__xasm<int>(push((i8+12)), op(0x37))))
		i10 =  ((__xasm<int>(push((i8+16)), op(0x37))))
		i11 =  ((__xasm<int>(push((i8+20)), op(0x37))))
		i12 =  ((__xasm<int>(push(i4), op(0x37))))
		i13 =  (i6 + 12)
		i14 =  (i7 + 1)
		__asm(push(i9<i12), iftrue, target("__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0___XprivateX__BB401_5_F"))
	__asm(lbl("__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0___XprivateX__BB401_3_F"))
		__asm(push(i9!=i12), iftrue, target("__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0___XprivateX__BB401_11_F"))
	__asm(lbl("__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0___XprivateX__BB401_4_F"))
		i12 =  ((__xasm<int>(push(i3), op(0x37))))
		__asm(push(i10>=i12), iftrue, target("__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0___XprivateX__BB401_11_F"))
	__asm(lbl("__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0___XprivateX__BB401_5_F"))
		i14 = i13
		i12 =  (i13 - i5)
		__asm(push(i12<12), iftrue, target("__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0___XprivateX__BB401_9_F"))
	__asm(lbl("__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0___XprivateX__BB401_6_F"))
		i12 =  (0)
		i14 =  (i14 - i5)
		i14 =  (i14 / 12)
	__asm(jump, target("__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0___XprivateX__BB401_7_F"), lbl("__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0___XprivateX__BB401_7_B"), label, lbl("__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0___XprivateX__BB401_7_F")); 
		i13 =  (i6 + i12)
		i15 =  ((__xasm<int>(push(i13), op(0x37))))
		i16 =  (i8 + i12)
		__asm(push(i15), push((i16+12)), op(0x3c))
		i15 =  ((__xasm<int>(push((i13+4)), op(0x37))))
		__asm(push(i15), push((i16+16)), op(0x3c))
		i13 =  ((__xasm<int>(push((i13+8)), op(0x37))))
		__asm(push(i13), push((i16+20)), op(0x3c))
		i12 =  (i12 + -12)
		i14 =  (i14 + -1)
		__asm(push(i14<1), iftrue, target("__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0___XprivateX__BB401_9_F"))
	__asm(lbl("__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0___XprivateX__BB401_8_F"))
		__asm(jump, target("__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0___XprivateX__BB401_7_B"))
	__asm(lbl("__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0___XprivateX__BB401_9_F"))
		__asm(push(i9), push(i4), op(0x3c))
		__asm(push(i10), push(i3), op(0x3c))
		__asm(push(i11), push(i2), op(0x3c))
		i8 =  (i6 + 12)
		i7 =  (i7 + 1)
		i9 = i8
		i6 =  (i6 + 24)
		__asm(push(i6==i1), iftrue, target("__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0___XprivateX__BB401_30_F"))
	__asm(lbl("__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0___XprivateX__BB401_10_F"))
		i6 = i9
		__asm(jump, target("__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0___XprivateX__BB401_2_B"))
	__asm(lbl("__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0___XprivateX__BB401_11_F"))
		i8 =  (i7 * 12)
		i8 =  (i0 + i8)
		i8 =  ((__xasm<int>(push(i8), op(0x37))))
		__asm(push(i9>=i8), iftrue, target("__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0___XprivateX__BB401_13_F"))
	__asm(lbl("__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0___XprivateX__BB401_12_F"))
		i7 =  (0)
		__asm(jump, target("__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0___XprivateX__BB401_16_F"))
	__asm(lbl("__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0___XprivateX__BB401_13_F"))
		__asm(push(i9==i8), iftrue, target("__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0___XprivateX__BB401_15_F"))
	__asm(lbl("__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0___XprivateX__BB401_14_F"))
		i7 =  (1)
		__asm(jump, target("__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0___XprivateX__BB401_16_F"))
	__asm(lbl("__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0___XprivateX__BB401_15_F"))
		i7 =  (i7 * 12)
		i7 =  (i0 + i7)
		i7 =  ((__xasm<int>(push((i7+4)), op(0x37))))
		i7 =  ((i10>=i7) ? 1 : 0)
	__asm(lbl("__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0___XprivateX__BB401_16_F"))
		i8 =  (i14 * 12)
		i7 =  (i7 ^ 1)
		i8 =  (i0 + i8)
		i7 =  (i7 & 1)
		__asm(push(i7!=0), iftrue, target("__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0___XprivateX__BB401_18_F"))
	__asm(lbl("__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0___XprivateX__BB401_17_F"))
		i0 =  (i6 + 12)
		__asm(jump, target("__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0___XprivateX__BB401_27_F"))
	__asm(lbl("__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0___XprivateX__BB401_18_F"))
		i7 =  (0)
		i12 =  (-2)
		i13 =  (i6 + 12)
		i15 = i13
	__asm(jump, target("__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0___XprivateX__BB401_19_F"), lbl("__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0___XprivateX__BB401_19_B"), label, lbl("__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0___XprivateX__BB401_19_F")); 
		i16 =  ((__xasm<int>(push((i13+-12)), op(0x37))))
		__asm(push(i16), push(i8), op(0x3c))
		i8 =  ((__xasm<int>(push((i13+-8)), op(0x37))))
		__asm(push(i8), push((i15+4)), op(0x3c))
		i8 =  (i14 + i12)
		i16 =  (i7 ^ -1)
		i13 =  ((__xasm<int>(push((i13+-4)), op(0x37))))
		i16 =  (i14 + i16)
		i17 =  (i8 * 12)
		i18 =  (i16 * 12)
		__asm(push(i13), push((i15+8)), op(0x3c))
		i13 =  (i0 + i17)
		i13 =  ((__xasm<int>(push(i13), op(0x37))))
		i17 =  (i0 + i18)
		__asm(push(i9>=i13), iftrue, target("__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0___XprivateX__BB401_21_F"))
	__asm(lbl("__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0___XprivateX__BB401_20_F"))
		i8 =  (0)
		__asm(jump, target("__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0___XprivateX__BB401_24_F"))
	__asm(lbl("__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0___XprivateX__BB401_21_F"))
		__asm(push(i9==i13), iftrue, target("__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0___XprivateX__BB401_23_F"))
	__asm(lbl("__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0___XprivateX__BB401_22_F"))
		i8 =  (1)
		__asm(jump, target("__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0___XprivateX__BB401_24_F"))
	__asm(lbl("__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0___XprivateX__BB401_23_F"))
		i8 =  (i8 * 12)
		i8 =  (i0 + i8)
		i8 =  ((__xasm<int>(push((i8+4)), op(0x37))))
		i8 =  ((i10>=i8) ? 1 : 0)
	__asm(lbl("__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0___XprivateX__BB401_24_F"))
		i13 =  (i16 * 12)
		i12 =  (i12 + -1)
		i7 =  (i7 + 1)
		i16 =  (i0 + i13)
		i8 =  (i8 & 1)
		__asm(push(i8!=0), iftrue, target("__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0___XprivateX__BB401_26_F"))
	__asm(lbl("__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0___XprivateX__BB401_25_F"))
		i15 = i17
		i13 = i17
		i8 = i16
		__asm(jump, target("__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0___XprivateX__BB401_19_B"))
	__asm(lbl("__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0___XprivateX__BB401_26_F"))
		i0 = i17
		i8 = i16
	__asm(lbl("__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0___XprivateX__BB401_27_F"))
		i7 = i8
		__asm(push(i9), push(i7), op(0x3c))
		__asm(push(i10), push((i0+4)), op(0x3c))
		__asm(push(i11), push((i0+8)), op(0x3c))
		i0 =  (i6 + 12)
	__asm(lbl("__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0___XprivateX__BB401_28_F"))
		i6 = i0
		i7 =  (i0 + 12)
		__asm(push(i7==i1), iftrue, target("__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0___XprivateX__BB401_30_F"))
	__asm(lbl("__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0___XprivateX__BB401_29_F"))
		i7 =  (0)
		i8 = i0
		__asm(jump, target("__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0___XprivateX__BB401_2_B"))
	__asm(lbl("__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0___XprivateX__BB401_30_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Sync
public const __ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1_:int = regFunc(FSM__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1_.start)

public final class FSM__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1_ extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
		var i8:int, i9:int, i10:int, i11:int, i12:int, i13:int, i14:int, i15:int
		var i16:int, i17:int, i18:int


		__asm(label, lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1__entry"))
	__asm(lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 32
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i3 = i0
		i4 =  (i1 - i0)
		__asm(push(i4<204), iftrue, target("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_55_F"))
	__asm(lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_1_F"))
		i4 =  (0)
		i5 =  (i2 + -1)
		i6 =  (i0 + 4)
		i7 = i0
	__asm(jump, target("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_2_F"), lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_2_B"), label, lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_2_F")); 
		__asm(push(i4!=i2), iftrue, target("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_11_F"))
	__asm(lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_3_F"))
		i4 =  (i1 - i3)
		i5 = i1
		__asm(push(i4<24), iftrue, target("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_9_F"))
	__asm(lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_4_F"))
		i2 =  ((mstate.ebp+-16))
		i5 =  (i5 - i3)
		i5 =  (i5 / 12)
		i5 =  (i5 + -2)
		i8 =  (i5 >>> 31)
		i9 =  (i4 / 12)
		i5 =  (i5 + i8)
		i8 =  (i9 + -2)
		i10 =  (i8 >>> 31)
		i5 =  (i5 >> 1)
		i8 =  (i8 + i10)
		i10 =  (i5 * 12)
		i8 =  (i8 >> 1)
		i10 =  (i3 + i10)
		i11 =  (0)
		i12 =  (i2 + 8)
		i13 =  (i2 + 4)
		i14 = i12
		i15 = i2
	__asm(jump, target("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_5_F"), lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_5_B"), label, lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_5_F")); 
		i16 =  ((__xasm<int>(push(i10), op(0x37))))
		__asm(push(i16), push(i15), op(0x3c))
		i16 =  ((__xasm<int>(push((i10+4)), op(0x37))))
		__asm(push(i16), push(i13), op(0x3c))
		i16 =  ((__xasm<int>(push((i10+8)), op(0x37))))
		__asm(push(i16), push(i12), op(0x3c))
		i16 =  ((__xasm<int>(push(i14), op(0x37))))
		i17 =  ((__xasm<int>(push(i2), op(0x37))))
		i18 =  ((__xasm<int>(push((i2+4)), op(0x37))))
		mstate.esp -= 24
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i5), push((mstate.esp+4)), op(0x3c))
		__asm(push(i9), push((mstate.esp+8)), op(0x3c))
		__asm(push(i17), push((mstate.esp+12)), op(0x3c))
		__asm(push(i18), push((mstate.esp+16)), op(0x3c))
		__asm(push(i16), push((mstate.esp+20)), op(0x3c))
		mstate.esp -= 4;FSM__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2_.start()
	__asm(lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1__state1"))
		mstate.esp += 24
		__asm(push(i11==i8), iftrue, target("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_9_F"))
	__asm(lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_6_F"))
		i10 =  (i10 + -12)
		i5 =  (i5 + -1)
		i11 =  (i11 + 1)
		__asm(jump, target("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_5_B"))
	__asm(lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_7_B"), label)
		i12 =  (0)
		i13 =  (i2 ^ -1)
		i13 =  (i13 * 12)
		i13 =  (i1 + i13)
		i14 =  ((__xasm<int>(push(i13), op(0x37))))
		i15 =  ((__xasm<int>(push((i13+4)), op(0x37))))
		i16 =  ((__xasm<int>(push((i13+8)), op(0x37))))
		__asm(push(i14), push(i5), op(0x3c))
		__asm(push(i15), push(i4), op(0x3c))
		__asm(push(i16), push(i11), op(0x3c))
		i14 =  ((__xasm<int>(push(i7), op(0x37))))
		__asm(push(i14), push(i13), op(0x3c))
		i14 =  ((__xasm<int>(push(i6), op(0x37))))
		__asm(push(i14), push((i13+4)), op(0x3c))
		i14 =  ((__xasm<int>(push(i10), op(0x37))))
		__asm(push(i14), push((i13+8)), op(0x3c))
		i14 =  ((__xasm<int>(push(i8), op(0x37))))
		i15 =  ((__xasm<int>(push(i9), op(0x37))))
		i16 =  ((__xasm<int>(push((i9+4)), op(0x37))))
		i13 =  (i13 - i3)
		mstate.esp -= 24
		i17 =  (i13 / 12)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i12), push((mstate.esp+4)), op(0x3c))
		__asm(push(i17), push((mstate.esp+8)), op(0x3c))
		__asm(push(i15), push((mstate.esp+12)), op(0x3c))
		__asm(push(i16), push((mstate.esp+16)), op(0x3c))
		__asm(push(i14), push((mstate.esp+20)), op(0x3c))
		mstate.esp -= 4;FSM__ZSt13__adjust_heapIP6b2PairiS0_PFbRKS0_S3_EEvT_T0_S7_T1_T2_.start()
	__asm(lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1__state2"))
		mstate.esp += 24
		i2 =  (i2 + 1)
		__asm(push(i13<24), iftrue, target("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_55_F"))
	__asm(lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_8_F"))
		__asm(jump, target("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_7_B"))
	__asm(lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_9_F"))
		__asm(push(i4<24), iftrue, target("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_55_F"))
	__asm(lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_10_F"))
		i9 =  ((mstate.ebp+-32))
		i2 =  (0)
		i10 =  (i0 + 8)
		i11 =  (i9 + 8)
		i4 =  (i9 + 4)
		i8 = i11
		i5 = i9
		__asm(jump, target("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_7_B"))
	__asm(lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_11_F"))
		i8 =  (i1 - i3)
		i8 =  (i8 / 24)
		i9 =  (i8 * 12)
		i9 =  (i0 + i9)
		i10 =  ((__xasm<int>(push(i7), op(0x37))))
		i11 =  ((__xasm<int>(push(i9), op(0x37))))
		i12 =  (i1 + -12)
		__asm(push(i10>=i11), iftrue, target("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_13_F"))
	__asm(lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_12_F"))
		i13 =  (0)
		__asm(jump, target("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_16_F"))
	__asm(lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_13_F"))
		__asm(push(i10==i11), iftrue, target("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_15_F"))
	__asm(lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_14_F"))
		i13 =  (1)
		__asm(jump, target("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_16_F"))
	__asm(lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_15_F"))
		i13 =  (i8 * 12)
		i13 =  (i0 + i13)
		i14 =  ((__xasm<int>(push(i6), op(0x37))))
		i13 =  ((__xasm<int>(push((i13+4)), op(0x37))))
		i13 =  ((i14>=i13) ? 1 : 0)
	__asm(lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_16_F"))
		i14 =  ((__xasm<int>(push((i1+-12)), op(0x37))))
		i13 =  (i13 & 1)
		__asm(push(i13!=0), iftrue, target("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_25_F"))
	__asm(lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_17_F"))
		__asm(push(i11<i14), iftrue, target("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_31_F"))
	__asm(lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_18_F"))
		__asm(push(i11!=i14), iftrue, target("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_20_F"))
	__asm(lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_19_F"))
		i8 =  (i8 * 12)
		i8 =  (i0 + i8)
		i8 =  ((__xasm<int>(push((i8+4)), op(0x37))))
		i11 =  ((__xasm<int>(push((i1+-8)), op(0x37))))
		__asm(push(i8<i11), iftrue, target("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_31_F"))
	__asm(lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_20_F"))
		__asm(push(i10>=i14), iftrue, target("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_22_F"))
	__asm(jump, target("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_21_F"), lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_21_B"), label, lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_21_F")); 
		i8 = i12
		__asm(jump, target("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_32_F"))
	__asm(lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_22_F"))
		__asm(push(i10!=i14), iftrue, target("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_24_F"))
	__asm(lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_23_F"))
		i8 =  ((__xasm<int>(push(i6), op(0x37))))
		i9 =  ((__xasm<int>(push((i1+-8)), op(0x37))))
		__asm(push(i8<i9), iftrue, target("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_21_B"))
	__asm(jump, target("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_24_F"), lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_24_B"), label, lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_24_F")); 
		i8 = i0
		__asm(jump, target("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_32_F"))
	__asm(lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_25_F"))
		__asm(push(i10<i14), iftrue, target("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_24_B"))
	__asm(lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_26_F"))
		__asm(push(i10!=i14), iftrue, target("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_28_F"))
	__asm(lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_27_F"))
		i13 =  ((__xasm<int>(push(i6), op(0x37))))
		i15 =  ((__xasm<int>(push((i1+-8)), op(0x37))))
		__asm(push(i13<i15), iftrue, target("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_24_B"))
	__asm(lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_28_F"))
		__asm(push(i11<i14), iftrue, target("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_21_B"))
	__asm(lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_29_F"))
		__asm(push(i11!=i14), iftrue, target("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_31_F"))
	__asm(lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_30_F"))
		i8 =  (i8 * 12)
		i8 =  (i0 + i8)
		i8 =  ((__xasm<int>(push((i8+4)), op(0x37))))
		i11 =  ((__xasm<int>(push((i1+-8)), op(0x37))))
		__asm(push(i8<i11), iftrue, target("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_21_B"))
	__asm(lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_31_F"))
		i8 = i9
	__asm(lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_32_F"))
		i9 =  ((__xasm<int>(push(i8), op(0x37))))
		i8 =  ((__xasm<int>(push((i8+4)), op(0x37))))
		__asm(push(i10>=i9), iftrue, target("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_37_F"))
	__asm(jump, target("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_33_F"), lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_33_B"), label, lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_33_F")); 
		i10 = i0
		i11 = i1
		__asm(jump, target("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_34_F"))
	__asm(jump, target("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_34_F"), lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_34_B"), label, lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_34_F")); 
		i12 =  (1)
		i13 = i10
		__asm(jump, target("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_35_F"))
	__asm(jump, target("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_35_F"), lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_35_B"), label, lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_35_F")); 
		i14 =  ((__xasm<int>(push((i13+12)), op(0x37))))
		__asm(push(i14>=i9), iftrue, target("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_40_F"))
		__asm(jump, target("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_36_F"))
	__asm(jump, target("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_36_F"), lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_36_B"), label, lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_36_F")); 
		i13 =  (i13 + 12)
		i12 =  (i12 + 1)
		__asm(jump, target("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_35_B"))
	__asm(lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_37_F"))
		__asm(push(i10==i9), iftrue, target("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_39_F"))
	__asm(jump, target("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_38_F"), lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_38_B"), label, lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_38_F")); 
		i10 = i1
		i11 = i0
		__asm(jump, target("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_43_F"))
	__asm(lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_39_F"))
		i10 =  ((__xasm<int>(push(i6), op(0x37))))
		__asm(push(i10>=i8), iftrue, target("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_38_B"))
		__asm(jump, target("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_33_B"))
	__asm(lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_40_F"))
		__asm(push(i14!=i9), iftrue, target("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_42_F"))
	__asm(lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_41_F"))
		i14 =  ((__xasm<int>(push((i13+16)), op(0x37))))
		__asm(push(i14<i8), iftrue, target("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_36_B"))
	__asm(lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_42_F"))
		i12 =  (i12 * 12)
		i12 =  (i10 + i12)
		i10 = i11
		i11 = i12
	__asm(lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_43_F"))
		i12 =  (0)
	__asm(jump, target("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_44_F"), lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_44_B"), label, lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_44_F")); 
		i13 =  (i12 ^ -1)
		i14 =  (i13 * 12)
		i14 =  (i10 + i14)
		i15 =  ((__xasm<int>(push(i14), op(0x37))))
		__asm(push(i9>=i15), iftrue, target("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_46_F"))
	__asm(lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_45_F"))
		i16 =  (0)
		__asm(jump, target("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_49_F"))
	__asm(lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_46_F"))
		__asm(push(i9==i15), iftrue, target("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_48_F"))
	__asm(lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_47_F"))
		i16 =  (1)
		__asm(jump, target("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_49_F"))
	__asm(lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_48_F"))
		i16 =  (i13 * 12)
		i16 =  (i10 + i16)
		i16 =  ((__xasm<int>(push((i16+4)), op(0x37))))
		i16 =  ((i8>=i16) ? 1 : 0)
	__asm(lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_49_F"))
		i12 =  (i12 + 1)
		i16 =  (i16 & 1)
		__asm(push(i16!=0), iftrue, target("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_51_F"))
	__asm(lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_50_F"))
		__asm(jump, target("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_44_B"))
	__asm(lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_51_F"))
		i12 =  (i13 * 12)
		i12 =  (i10 + i12)
		__asm(push(uint(i11)<uint(i12)), iftrue, target("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_54_F"))
	__asm(lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_52_F"))
		mstate.esp -= 12
		__asm(push(i11), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i5), push((mstate.esp+8)), op(0x3c))
		mstate.esp -= 4;FSM__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1_.start()
	__asm(lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1__state3"))
		mstate.esp += 12
		i1 =  (i5 + -1)
		i4 =  (i4 + 1)
		i5 =  (i11 - i3)
		__asm(push(i5<204), iftrue, target("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_55_F"))
	__asm(lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_53_F"))
		i5 = i1
		i1 = i11
		__asm(jump, target("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_2_B"))
	__asm(lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_54_F"))
		i16 =  ((__xasm<int>(push(i11), op(0x37))))
		i17 =  ((__xasm<int>(push((i11+4)), op(0x37))))
		i18 =  ((__xasm<int>(push((i11+8)), op(0x37))))
		i13 =  (i13 * 12)
		__asm(push(i15), push(i11), op(0x3c))
		i10 =  (i10 + i13)
		i13 =  ((__xasm<int>(push((i10+4)), op(0x37))))
		__asm(push(i13), push((i11+4)), op(0x3c))
		i13 =  ((__xasm<int>(push((i10+8)), op(0x37))))
		__asm(push(i13), push((i11+8)), op(0x3c))
		__asm(push(i16), push(i14), op(0x3c))
		__asm(push(i17), push((i10+4)), op(0x3c))
		__asm(push(i18), push((i10+8)), op(0x3c))
		i10 = i11
		i11 = i12
		__asm(jump, target("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_34_B"))
	__asm(lbl("__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1___XprivateX__BB402_55_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Async
public const __ZN13b2DynamicTree12AllocateNodeEv:int = regFunc(FSM__ZN13b2DynamicTree12AllocateNodeEv.start)

public final class FSM__ZN13b2DynamicTree12AllocateNodeEv extends Machine {

	public static function start():void {
			var result:FSM__ZN13b2DynamicTree12AllocateNodeEv = new FSM__ZN13b2DynamicTree12AllocateNodeEv
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
	public var i8:int, i9:int

	public static const intRegCount:int = 10

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN13b2DynamicTree12AllocateNodeEv_entry"))
		__asm(push(state), switchjump(
			"__ZN13b2DynamicTree12AllocateNodeEv_errState",
			"__ZN13b2DynamicTree12AllocateNodeEv_state0",
			"__ZN13b2DynamicTree12AllocateNodeEv_state1",
			"__ZN13b2DynamicTree12AllocateNodeEv_state2",
			"__ZN13b2DynamicTree12AllocateNodeEv_state3",
			"__ZN13b2DynamicTree12AllocateNodeEv_state4"))
	__asm(lbl("__ZN13b2DynamicTree12AllocateNodeEv_state0"))
	__asm(lbl("__ZN13b2DynamicTree12AllocateNodeEv__XprivateX__BB403_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+16)), op(0x37))))
		i2 =  (i0 + 16)
		__asm(push(i1==-1), iftrue, target("__ZN13b2DynamicTree12AllocateNodeEv__XprivateX__BB403_2_F"))
	__asm(lbl("__ZN13b2DynamicTree12AllocateNodeEv__XprivateX__BB403_1_F"))
		__asm(jump, target("__ZN13b2DynamicTree12AllocateNodeEv__XprivateX__BB403_10_F"))
	__asm(lbl("__ZN13b2DynamicTree12AllocateNodeEv__XprivateX__BB403_2_F"))
		i1 =  ((__xasm<int>(push((i0+8)), op(0x37))))
		i3 =  ((__xasm<int>(push((i0+12)), op(0x37))))
		i4 =  (i0 + 12)
		i5 =  (i0 + 8)
		__asm(push(i1==i3), iftrue, target("__ZN13b2DynamicTree12AllocateNodeEv__XprivateX__BB403_4_F"))
	__asm(lbl("__ZN13b2DynamicTree12AllocateNodeEv__XprivateX__BB403_3_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str81288)
		i4 =  (__ZZN13b2DynamicTree12AllocateNodeEvE8__func__)
		i5 =  (__2E_str5212)
		i3 =  (58)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i4), push((mstate.esp+12)), op(0x3c))
		__asm(push(i5), push((mstate.esp+16)), op(0x3c))
		__asm(push(i3), push((mstate.esp+20)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__ZN13b2DynamicTree12AllocateNodeEv_state1"))
		mstate.esp += 24
		state = 2
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZN13b2DynamicTree12AllocateNodeEv_state2"))
	__asm(lbl("__ZN13b2DynamicTree12AllocateNodeEv__XprivateX__BB403_4_F"))
		i1 =  (0)
		i3 =  ((__xasm<int>(push(i4), op(0x37))))
		i6 =  ((__xasm<int>(push((i0+4)), op(0x37))))
		i7 =  (i3 << 1)
		__asm(push(i7), push(i4), op(0x3c))
		mstate.esp -= 8
		i3 =  (i3 * 72)
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i3), push((mstate.esp+4)), op(0x3c))
		state = 3
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN13b2DynamicTree12AllocateNodeEv_state3"))
		i3 = mstate.eax
		mstate.esp += 8
		__asm(push(i3), push((i0+4)), op(0x3c))
		i7 =  ((__xasm<int>(push(i5), op(0x37))))
		i7 =  (i7 * 36)
		memcpy(i3, i6, i7)
		mstate.esp -= 8
		__asm(push(i6), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 4
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN13b2DynamicTree12AllocateNodeEv_state4"))
		i1 = mstate.eax
		mstate.esp += 8
		i1 =  ((__xasm<int>(push(i4), op(0x37))))
		i3 =  ((__xasm<int>(push(i5), op(0x37))))
		i6 =  ((__xasm<int>(push((i0+4)), op(0x37))))
		i7 =  (i0 + 4)
		i8 =  (i1 + -1)
		__asm(push(i8>i3), iftrue, target("__ZN13b2DynamicTree12AllocateNodeEv__XprivateX__BB403_6_F"))
	__asm(lbl("__ZN13b2DynamicTree12AllocateNodeEv__XprivateX__BB403_5_F"))
		i3 = i6
		__asm(jump, target("__ZN13b2DynamicTree12AllocateNodeEv__XprivateX__BB403_9_F"))
	__asm(lbl("__ZN13b2DynamicTree12AllocateNodeEv__XprivateX__BB403_6_F"))
		i1 =  (i3 * 36)
		i1 =  (i1 + 20)
	__asm(jump, target("__ZN13b2DynamicTree12AllocateNodeEv__XprivateX__BB403_7_F"), lbl("__ZN13b2DynamicTree12AllocateNodeEv__XprivateX__BB403_7_B"), label, lbl("__ZN13b2DynamicTree12AllocateNodeEv__XprivateX__BB403_7_F")); 
		i6 =  (i6 + i1)
		i3 =  (i3 + 1)
		__asm(push(i3), push(i6), op(0x3c))
		i6 =  ((__xasm<int>(push(i4), op(0x37))))
		i8 =  ((__xasm<int>(push(i7), op(0x37))))
		i1 =  (i1 + 36)
		i9 =  (i6 + -1)
		__asm(push(i9>i3), iftrue, target("__ZN13b2DynamicTree12AllocateNodeEv__XprivateX__BB403_11_F"))
	__asm(lbl("__ZN13b2DynamicTree12AllocateNodeEv__XprivateX__BB403_8_F"))
		i1 = i6
		i3 = i8
		__asm(jump, target("__ZN13b2DynamicTree12AllocateNodeEv__XprivateX__BB403_9_F"))
	__asm(lbl("__ZN13b2DynamicTree12AllocateNodeEv__XprivateX__BB403_9_F"))
		i4 =  (-1)
		i1 =  (i1 * 36)
		i1 =  (i1 + i3)
		__asm(push(i4), push((i1+-16)), op(0x3c))
		i1 =  ((__xasm<int>(push(i5), op(0x37))))
		__asm(push(i1), push(i2), op(0x3c))
	__asm(lbl("__ZN13b2DynamicTree12AllocateNodeEv__XprivateX__BB403_10_F"))
		i3 =  (-1)
		i4 =  ((__xasm<int>(push((i0+4)), op(0x37))))
		i5 =  (i1 * 36)
		i4 =  (i4 + i5)
		i6 =  ((__xasm<int>(push((i4+20)), op(0x37))))
		__asm(push(i6), push(i2), op(0x3c))
		__asm(push(i3), push((i4+20)), op(0x3c))
		i2 =  ((__xasm<int>(push((i0+4)), op(0x37))))
		i2 =  (i2 + i5)
		__asm(push(i3), push((i2+24)), op(0x3c))
		i2 =  ((__xasm<int>(push((i0+4)), op(0x37))))
		i2 =  (i2 + i5)
		__asm(push(i3), push((i2+28)), op(0x3c))
		i2 =  ((__xasm<int>(push((i0+4)), op(0x37))))
		i3 =  (0)
		i2 =  (i2 + i5)
		__asm(push(i3), push((i2+32)), op(0x3c))
		i2 =  ((__xasm<int>(push((i0+8)), op(0x37))))
		i2 =  (i2 + 1)
		__asm(push(i2), push((i0+8)), op(0x3c))
		mstate.eax = i1
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN13b2DynamicTree12AllocateNodeEv__XprivateX__BB403_11_F"))
		i6 = i8
		__asm(jump, target("__ZN13b2DynamicTree12AllocateNodeEv__XprivateX__BB403_7_B"))
	__asm(lbl("__ZN13b2DynamicTree12AllocateNodeEv_errState"))
		throw("Invalid state in __ZN13b2DynamicTree12AllocateNodeEv")
	}
}



// Async
public const __ZN16b2BlockAllocator8AllocateEi:int = regFunc(FSM__ZN16b2BlockAllocator8AllocateEi.start)

public final class FSM__ZN16b2BlockAllocator8AllocateEi extends Machine {

	public static function start():void {
			var result:FSM__ZN16b2BlockAllocator8AllocateEi = new FSM__ZN16b2BlockAllocator8AllocateEi
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
	public var i8:int

	public static const intRegCount:int = 9

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN16b2BlockAllocator8AllocateEi_entry"))
		__asm(push(state), switchjump(
			"__ZN16b2BlockAllocator8AllocateEi_errState",
			"__ZN16b2BlockAllocator8AllocateEi_state0",
			"__ZN16b2BlockAllocator8AllocateEi_state1",
			"__ZN16b2BlockAllocator8AllocateEi_state2",
			"__ZN16b2BlockAllocator8AllocateEi_state3",
			"__ZN16b2BlockAllocator8AllocateEi_state4",
			"__ZN16b2BlockAllocator8AllocateEi_state5",
			"__ZN16b2BlockAllocator8AllocateEi_state6"))
	__asm(lbl("__ZN16b2BlockAllocator8AllocateEi_state0"))
	__asm(lbl("__ZN16b2BlockAllocator8AllocateEi__XprivateX__BB404_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		__asm(push(i1==0), iftrue, target("__ZN16b2BlockAllocator8AllocateEi__XprivateX__BB404_18_F"))
	__asm(lbl("__ZN16b2BlockAllocator8AllocateEi__XprivateX__BB404_1_F"))
		__asm(push(i1>0), iftrue, target("__ZN16b2BlockAllocator8AllocateEi__XprivateX__BB404_3_F"))
	__asm(lbl("__ZN16b2BlockAllocator8AllocateEi__XprivateX__BB404_2_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str82289)
		i3 =  (__ZZN16b2StackAllocator8AllocateEiE8__func__)
		i4 =  (__2E_str78285)
		i5 =  (104)
		__asm(jump, target("__ZN16b2BlockAllocator8AllocateEi__XprivateX__BB404_7_F"))
	__asm(lbl("__ZN16b2BlockAllocator8AllocateEi__XprivateX__BB404_3_F"))
		__asm(push(i1<641), iftrue, target("__ZN16b2BlockAllocator8AllocateEi__XprivateX__BB404_5_F"))
	__asm(lbl("__ZN16b2BlockAllocator8AllocateEi__XprivateX__BB404_4_F"))
		i0 =  (0)
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN16b2BlockAllocator8AllocateEi_state1"))
		i0 = mstate.eax
		mstate.esp += 8
		__asm(jump, target("__ZN16b2BlockAllocator8AllocateEi__XprivateX__BB404_19_F"))
	__asm(lbl("__ZN16b2BlockAllocator8AllocateEi__XprivateX__BB404_5_F"))
		i2 =  (__ZN16b2BlockAllocator17s_blockSizeLookupE)
		i1 =  (i2 + i1)
		i1 =  ((__xasm<int>(push(i1), op(0x35))))
		__asm(push(uint(i1)<uint(14)), iftrue, target("__ZN16b2BlockAllocator8AllocateEi__XprivateX__BB404_8_F"))
	__asm(lbl("__ZN16b2BlockAllocator8AllocateEi__XprivateX__BB404_6_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str83290)
		i3 =  (__ZZN16b2StackAllocator8AllocateEiE8__func__)
		i4 =  (__2E_str78285)
		i5 =  (112)
	__asm(jump, target("__ZN16b2BlockAllocator8AllocateEi__XprivateX__BB404_7_F"), lbl("__ZN16b2BlockAllocator8AllocateEi__XprivateX__BB404_7_B"), label, lbl("__ZN16b2BlockAllocator8AllocateEi__XprivateX__BB404_7_F")); 
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__ZN16b2BlockAllocator8AllocateEi_state2"))
		mstate.esp += 24
		state = 3
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZN16b2BlockAllocator8AllocateEi_state3"))
	__asm(lbl("__ZN16b2BlockAllocator8AllocateEi__XprivateX__BB404_8_F"))
		i2 =  (i1 << 2)
		i2 =  (i0 + i2)
		i3 =  ((__xasm<int>(push((i2+12)), op(0x37))))
		i2 =  (i2 + 12)
		__asm(push(i3==0), iftrue, target("__ZN16b2BlockAllocator8AllocateEi__XprivateX__BB404_10_F"))
	__asm(lbl("__ZN16b2BlockAllocator8AllocateEi__XprivateX__BB404_9_F"))
		i0 =  ((__xasm<int>(push(i3), op(0x37))))
		__asm(push(i0), push(i2), op(0x3c))
		mstate.eax = i3
		__asm(jump, target("__ZN16b2BlockAllocator8AllocateEi__XprivateX__BB404_20_F"))
	__asm(lbl("__ZN16b2BlockAllocator8AllocateEi__XprivateX__BB404_10_F"))
		i3 =  ((__xasm<int>(push((i0+4)), op(0x37))))
		i4 =  ((__xasm<int>(push((i0+8)), op(0x37))))
		i5 =  (i0 + 8)
		i6 =  (i0 + 4)
		__asm(push(i3!=i4), iftrue, target("__ZN16b2BlockAllocator8AllocateEi__XprivateX__BB404_12_F"))
	__asm(lbl("__ZN16b2BlockAllocator8AllocateEi__XprivateX__BB404_11_F"))
		i7 =  (0)
		i4 =  (i4 + 128)
		i8 =  ((__xasm<int>(push(i0), op(0x37))))
		__asm(push(i4), push(i5), op(0x3c))
		mstate.esp -= 8
		i4 =  (i4 << 3)
		__asm(push(i7), push(mstate.esp), op(0x3c))
		__asm(push(i4), push((mstate.esp+4)), op(0x3c))
		state = 4
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN16b2BlockAllocator8AllocateEi_state4"))
		i4 = mstate.eax
		mstate.esp += 8
		__asm(push(i4), push(i0), op(0x3c))
		i3 =  (i3 << 3)
		memcpy(i4, i8, i3)
		i3 =  ((__xasm<int>(push(i6), op(0x37))))
		i4 =  ((__xasm<int>(push(i0), op(0x37))))
		i3 =  (i3 << 3)
		i3 =  (i4 + i3)
		i4 =  (1024)
		memset(i3, i7, i4)
		mstate.esp -= 8
		__asm(push(i8), push(mstate.esp), op(0x3c))
		__asm(push(i7), push((mstate.esp+4)), op(0x3c))
		state = 5
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN16b2BlockAllocator8AllocateEi_state5"))
		i3 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__ZN16b2BlockAllocator8AllocateEi__XprivateX__BB404_12_F"))
		i3 =  (4096)
		i4 =  ((__xasm<int>(push(i6), op(0x37))))
		i0 =  ((__xasm<int>(push(i0), op(0x37))))
		mstate.esp -= 8
		i5 =  (0)
		__asm(push(i5), push(mstate.esp), op(0x3c))
		__asm(push(i3), push((mstate.esp+4)), op(0x3c))
		i3 =  (i4 << 3)
		state = 6
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN16b2BlockAllocator8AllocateEi_state6"))
		i4 = mstate.eax
		i0 =  (i0 + i3)
		mstate.esp += 8
		i3 =  (__ZN16b2BlockAllocator12s_blockSizesE)
		i1 =  (i1 << 2)
		__asm(push(i4), push((i0+4)), op(0x3c))
		i1 =  (i3 + i1)
		i1 =  ((__xasm<int>(push(i1), op(0x37))))
		__asm(push(i1), push(i0), op(0x3c))
		i3 =  (4096 / i1)
		i0 =  (i0 + 4)
		i4 =  (i3 * i1)
		__asm(push(i4>4096), iftrue, target("__ZN16b2BlockAllocator8AllocateEi__XprivateX__BB404_14_F"))
	__asm(lbl("__ZN16b2BlockAllocator8AllocateEi__XprivateX__BB404_13_F"))
		i4 =  (0)
		i3 =  (i3 + -1)
		i5 = i4
		__asm(jump, target("__ZN16b2BlockAllocator8AllocateEi__XprivateX__BB404_16_F"))
	__asm(lbl("__ZN16b2BlockAllocator8AllocateEi__XprivateX__BB404_14_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str84291)
		i3 =  (__ZZN16b2StackAllocator8AllocateEiE8__func__)
		i4 =  (__2E_str78285)
		i5 =  (140)
		__asm(jump, target("__ZN16b2BlockAllocator8AllocateEi__XprivateX__BB404_7_B"))
	__asm(lbl("__ZN16b2BlockAllocator8AllocateEi__XprivateX__BB404_15_B"), label)
		i8 =  (i1 + i7)
		i7 =  (i4 + i7)
		i4 =  (i4 + i8)
		__asm(push(i4), push(i7), op(0x3c))
		i4 =  (i5 + 1)
		i5 = i8
	__asm(lbl("__ZN16b2BlockAllocator8AllocateEi__XprivateX__BB404_16_F"))
		i7 = i5
		i5 = i4
		i8 =  ((__xasm<int>(push(i0), op(0x37))))
		i4 = i8
		__asm(push(i3>i5), iftrue, target("__ZN16b2BlockAllocator8AllocateEi__XprivateX__BB404_15_B"))
	__asm(lbl("__ZN16b2BlockAllocator8AllocateEi__XprivateX__BB404_17_F"))
		i4 =  (0)
		i1 =  (i3 * i1)
		i1 =  (i8 + i1)
		__asm(push(i4), push(i1), op(0x3c))
		i1 =  ((__xasm<int>(push(i0), op(0x37))))
		i1 =  ((__xasm<int>(push(i1), op(0x37))))
		__asm(push(i1), push(i2), op(0x3c))
		i1 =  ((__xasm<int>(push(i6), op(0x37))))
		i1 =  (i1 + 1)
		__asm(push(i1), push(i6), op(0x3c))
		i0 =  ((__xasm<int>(push(i0), op(0x37))))
		__asm(jump, target("__ZN16b2BlockAllocator8AllocateEi__XprivateX__BB404_19_F"))
	__asm(lbl("__ZN16b2BlockAllocator8AllocateEi__XprivateX__BB404_18_F"))
		i0 =  (0)
	__asm(lbl("__ZN16b2BlockAllocator8AllocateEi__XprivateX__BB404_19_F"))
		mstate.eax = i0
	__asm(lbl("__ZN16b2BlockAllocator8AllocateEi__XprivateX__BB404_20_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN16b2BlockAllocator8AllocateEi_errState"))
		throw("Invalid state in __ZN16b2BlockAllocator8AllocateEi")
	}
}



// Async
public const __ZN15b2DistanceProxy3SetEPK7b2Shapei:int = regFunc(FSM__ZN15b2DistanceProxy3SetEPK7b2Shapei.start)

public final class FSM__ZN15b2DistanceProxy3SetEPK7b2Shapei extends Machine {

	public static function start():void {
			var result:FSM__ZN15b2DistanceProxy3SetEPK7b2Shapei = new FSM__ZN15b2DistanceProxy3SetEPK7b2Shapei
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int

	public static const intRegCount:int = 6
	public var f0:Number, f1:Number

	public static const NumberRegCount:int = 2
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN15b2DistanceProxy3SetEPK7b2Shapei_entry"))
		__asm(push(state), switchjump(
			"__ZN15b2DistanceProxy3SetEPK7b2Shapei_errState",
			"__ZN15b2DistanceProxy3SetEPK7b2Shapei_state0",
			"__ZN15b2DistanceProxy3SetEPK7b2Shapei_state1",
			"__ZN15b2DistanceProxy3SetEPK7b2Shapei_state2"))
	__asm(lbl("__ZN15b2DistanceProxy3SetEPK7b2Shapei_state0"))
	__asm(lbl("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+4)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i3 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		__asm(push(i1>1), iftrue, target("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_4_F"))
	__asm(lbl("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_1_F"))
		__asm(push(i1==0), iftrue, target("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_10_F"))
	__asm(lbl("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_2_F"))
		__asm(push(i1==1), iftrue, target("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_3_F"))
		__asm(jump, target("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_29_F"))
	__asm(lbl("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_3_F"))
		i1 =  (2)
		i3 =  (i0 + 16)
		__asm(push(i3), push((i2+16)), op(0x3c))
		__asm(jump, target("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_27_F"))
	__asm(lbl("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_4_F"))
		__asm(push(i1==2), iftrue, target("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_12_F"))
	__asm(lbl("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_5_F"))
		__asm(push(i1==3), iftrue, target("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_6_F"))
		__asm(jump, target("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_29_F"))
	__asm(lbl("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_6_F"))
		__asm(push(i3<0), iftrue, target("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_8_F"))
		__asm(jump, target("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_7_F"))
	__asm(lbl("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_7_F"))
		i1 =  ((__xasm<int>(push((i0+20)), op(0x37))))
		i4 =  (i0 + 20)
		__asm(push(i1>i3), iftrue, target("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_13_F"))
		__asm(jump, target("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_8_F"))
	__asm(lbl("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_8_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i2 =  (__2E_str1670)
		i3 =  (__2E_str87294)
		i4 =  (__ZZN15b2DistanceProxy3SetEPK7b2ShapeiE8__func__)
		i1 =  (__2E_str45252)
		i5 =  (53)
		__asm(jump, target("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_9_F"))
	__asm(jump, target("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_9_F"), lbl("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_9_B"), label, lbl("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_9_F")); 
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i2), push((mstate.esp+4)), op(0x3c))
		__asm(push(i3), push((mstate.esp+8)), op(0x3c))
		__asm(push(i4), push((mstate.esp+12)), op(0x3c))
		__asm(push(i1), push((mstate.esp+16)), op(0x3c))
		__asm(jump, target("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_21_F"))
	__asm(lbl("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_10_F"))
		i3 =  (1)
		i1 =  (i0 + 16)
		__asm(push(i1), push((i2+16)), op(0x3c))
	__asm(jump, target("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_11_F"), lbl("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_11_B"), label, lbl("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_11_F")); 
		__asm(push(i3), push((i2+20)), op(0x3c))
		__asm(jump, target("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_28_F"))
	__asm(lbl("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_12_F"))
		i3 =  (i0 + 24)
		__asm(push(i3), push((i2+16)), op(0x3c))
		i3 =  ((__xasm<int>(push((i0+152)), op(0x37))))
		__asm(jump, target("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_11_B"))
	__asm(lbl("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_13_F"))
		__asm(push(i3<0), iftrue, target("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_15_F"))
	__asm(lbl("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_14_F"))
		i1 =  ((__xasm<int>(push(i4), op(0x37))))
		__asm(push(i1>i3), iftrue, target("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_16_F"))
	__asm(lbl("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_15_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i2 =  (__2E_str1670)
		i3 =  (__2E_str1208)
		i4 =  (__ZZNK11b2LoopShape9GetVertexEiE8__func__)
		i1 =  (__2E_str207)
		i5 =  (72)
		__asm(jump, target("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_9_B"))
	__asm(lbl("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_16_F"))
		i1 =  ((__xasm<int>(push((i0+16)), op(0x37))))
		i5 =  (i3 << 3)
		i1 =  (i1 + i5)
		f0 =  ((__xasm<Number>(push(i1), op(0x38))))
		f1 =  ((__xasm<Number>(push((i1+4)), op(0x38))))
		__asm(push(f0), push(i2), op(0x3d))
		__asm(push(f1), push((i2+4)), op(0x3d))
		i1 =  ((__xasm<int>(push(i4), op(0x37))))
		i3 =  (i3 + 1)
		i4 =  (i0 + 16)
		__asm(push(i3>=i1), iftrue, target("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_23_F"))
	__asm(lbl("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_17_F"))
		__asm(push(i1<=i3), iftrue, target("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_19_F"))
	__asm(lbl("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_18_F"))
		__asm(push(i3>-1), iftrue, target("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_22_F"))
	__asm(lbl("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_19_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str1208)
		i3 =  (__ZZNK11b2LoopShape9GetVertexEiE8__func__)
		i4 =  (__2E_str207)
		i5 =  (72)
	__asm(jump, target("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_20_F"), lbl("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_20_B"), label, lbl("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_20_F")); 
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
	__asm(jump, target("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_21_F"), lbl("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_21_B"), label, lbl("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_21_F")); 
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__ZN15b2DistanceProxy3SetEPK7b2Shapei_state1"))
		mstate.esp += 24
		state = 2
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZN15b2DistanceProxy3SetEPK7b2Shapei_state2"))
	__asm(lbl("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_22_F"))
		i1 =  ((__xasm<int>(push(i4), op(0x37))))
		i4 =  (i3 << 3)
		i1 =  (i1 + i4)
		f0 =  ((__xasm<Number>(push(i1), op(0x38))))
		f1 =  ((__xasm<Number>(push((i1+4)), op(0x38))))
		__asm(push(f0), push((i2+8)), op(0x3d))
		__asm(push(f1), push((i2+12)), op(0x3d))
		__asm(jump, target("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_26_F"))
	__asm(lbl("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_23_F"))
		__asm(push(i1>0), iftrue, target("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_25_F"))
	__asm(lbl("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_24_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i2 =  (__2E_str1670)
		i4 =  (__2E_str1208)
		i1 =  (__ZZNK11b2LoopShape9GetVertexEiE8__func__)
		i3 =  (__2E_str207)
		i5 =  (72)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i2), push((mstate.esp+4)), op(0x3c))
		__asm(push(i4), push((mstate.esp+8)), op(0x3c))
		__asm(push(i1), push((mstate.esp+12)), op(0x3c))
		__asm(push(i3), push((mstate.esp+16)), op(0x3c))
		__asm(jump, target("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_21_B"))
	__asm(lbl("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_25_F"))
		i1 =  ((__xasm<int>(push(i4), op(0x37))))
		f0 =  ((__xasm<Number>(push(i1), op(0x38))))
		f1 =  ((__xasm<Number>(push((i1+4)), op(0x38))))
		__asm(push(f0), push((i2+8)), op(0x3d))
		__asm(push(f1), push((i2+12)), op(0x3d))
	__asm(lbl("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_26_F"))
		i1 =  (2)
		__asm(push(i2), push((i2+16)), op(0x3c))
	__asm(lbl("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_27_F"))
		__asm(push(i1), push((i2+20)), op(0x3c))
	__asm(lbl("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_28_F"))
		f0 =  ((__xasm<Number>(push((i0+8)), op(0x38))))
		__asm(push(f0), push((i2+24)), op(0x3d))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_29_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str46253)
		i3 =  (__ZZN15b2DistanceProxy3SetEPK7b2ShapeiE8__func__)
		i4 =  (__2E_str45252)
		i5 =  (81)
		__asm(jump, target("__ZN15b2DistanceProxy3SetEPK7b2Shapei__XprivateX__BB405_20_B"))
	__asm(lbl("__ZN15b2DistanceProxy3SetEPK7b2Shapei_errState"))
		throw("Invalid state in __ZN15b2DistanceProxy3SetEPK7b2Shapei")
	}
}



// Sync
public const __ZNK16b2PrismaticJoint19GetJointTranslationEv:int = regFunc(FSM__ZNK16b2PrismaticJoint19GetJointTranslationEv.start)

public final class FSM__ZNK16b2PrismaticJoint19GetJointTranslationEv extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number
		var f8:Number, f9:Number, f10:Number, f11:Number, f12:Number, f13:Number, f14:Number, f15:Number

		__asm(label, lbl("__ZNK16b2PrismaticJoint19GetJointTranslationEv_entry"))
	__asm(lbl("__ZNK16b2PrismaticJoint19GetJointTranslationEv__XprivateX__BB406_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+48)), op(0x37))))
		i2 =  ((__xasm<int>(push((i0+52)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i1+20)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i0+96)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i1+24)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i2+20)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i0+104)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i2+24)), op(0x38))))
		f6 =  (f2 * f1)
		f1 =  (f0 * f1)
		f5 =  (f5 * f4)
		f3 =  (f3 * f4)
		f4 =  f6/*fround*/
		f1 =  f1/*fround*/
		f5 =  f5/*fround*/
		f3 =  f3/*fround*/
		f6 =  ((__xasm<Number>(push((i1+12)), op(0x38))))
		f1 =  f1/*fextend*/
		f7 =  ((__xasm<Number>(push((i1+28)), op(0x38))))
		f8 =  ((__xasm<Number>(push((i0+100)), op(0x38))))
		f9 =  ((__xasm<Number>(push((i1+32)), op(0x38))))
		f10 =  ((__xasm<Number>(push((i1+16)), op(0x38))))
		f4 =  f4/*fextend*/
		f11 =  ((__xasm<Number>(push((i2+12)), op(0x38))))
		f3 =  f3/*fextend*/
		f12 =  ((__xasm<Number>(push((i2+28)), op(0x38))))
		f13 =  ((__xasm<Number>(push((i0+108)), op(0x38))))
		f14 =  ((__xasm<Number>(push((i2+32)), op(0x38))))
		f15 =  ((__xasm<Number>(push((i2+16)), op(0x38))))
		f5 =  f5/*fextend*/
		f1 =  (f6 + f1)
		f6 =  (f9 * f8)
		f4 =  (f10 + f4)
		f8 =  (f7 * f8)
		f3 =  (f11 + f3)
		f10 =  (f14 * f13)
		f5 =  (f15 + f5)
		f11 =  (f12 * f13)
		f1 =  f1/*fround*/
		f6 =  f6/*fround*/
		f4 =  f4/*fround*/
		f8 =  f8/*fround*/
		f3 =  f3/*fround*/
		f10 =  f10/*fround*/
		f5 =  f5/*fround*/
		f11 =  f11/*fround*/
		f12 =  ((__xasm<Number>(push((i0+112)), op(0x38))))
		f13 =  ((__xasm<Number>(push((i0+116)), op(0x38))))
		f8 =  f8/*fextend*/
		f1 =  f1/*fextend*/
		f6 =  f6/*fextend*/
		f4 =  f4/*fextend*/
		f11 =  f11/*fextend*/
		f3 =  f3/*fextend*/
		f10 =  f10/*fextend*/
		f5 =  f5/*fextend*/
		f1 =  (f1 + f8)
		f4 =  (f4 + f6)
		f6 =  (f9 * f13)
		f2 =  (f2 * f12)
		f7 =  (f7 * f13)
		f0 =  (f0 * f12)
		f3 =  (f3 + f11)
		f5 =  (f5 + f10)
		f1 =  f1/*fround*/
		f4 =  f4/*fround*/
		f6 =  f6/*fround*/
		f2 =  f2/*fround*/
		f7 =  f7/*fround*/
		f0 =  f0/*fround*/
		f3 =  f3/*fround*/
		f5 =  f5/*fround*/
		f1 =  f1/*fextend*/
		f3 =  f3/*fextend*/
		f4 =  f4/*fextend*/
		f5 =  f5/*fextend*/
		f6 =  f6/*fextend*/
		f2 =  f2/*fextend*/
		f7 =  f7/*fextend*/
		f0 =  f0/*fextend*/
		f1 =  (f3 - f1)
		f3 =  (f5 - f4)
		f2 =  (f2 + f6)
		f0 =  (f0 + f7)
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		f2 =  f2/*fround*/
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		f2 =  f2/*fextend*/
		f3 =  f3/*fextend*/
		f0 =  (f1 * f0)
		f1 =  (f3 * f2)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f1 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 + f1)
		f0 =  f0/*fround*/
		mstate.st0 = f0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Async
public const __ZN13b2DynamicTree10InsertLeafEi:int = regFunc(FSM__ZN13b2DynamicTree10InsertLeafEi.start)

public final class FSM__ZN13b2DynamicTree10InsertLeafEi extends Machine {

	public static function start():void {
			var result:FSM__ZN13b2DynamicTree10InsertLeafEi = new FSM__ZN13b2DynamicTree10InsertLeafEi
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
	public var i8:int, i9:int, i10:int, i11:int, i12:int

	public static const intRegCount:int = 13
	public var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number
	public var f8:Number, f9:Number, f10:Number, f11:Number, f12:Number, f13:Number, f14:Number, f15:Number
	public var f16:Number, f17:Number, f18:Number, f19:Number, f20:Number, f21:Number, f22:Number, f23:Number

	public static const NumberRegCount:int = 24
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN13b2DynamicTree10InsertLeafEi_entry"))
		__asm(push(state), switchjump(
			"__ZN13b2DynamicTree10InsertLeafEi_errState",
			"__ZN13b2DynamicTree10InsertLeafEi_state0",
			"__ZN13b2DynamicTree10InsertLeafEi_state1"))
	__asm(lbl("__ZN13b2DynamicTree10InsertLeafEi_state0"))
	__asm(lbl("__ZN13b2DynamicTree10InsertLeafEi__XprivateX__BB407_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+24)), op(0x37))))
		i1 =  (i1 + 1)
		__asm(push(i1), push((i0+24)), op(0x3c))
		i1 =  ((__xasm<int>(push(i0), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i3 = i0
		__asm(push(i1!=-1), iftrue, target("__ZN13b2DynamicTree10InsertLeafEi__XprivateX__BB407_2_F"))
	__asm(lbl("__ZN13b2DynamicTree10InsertLeafEi__XprivateX__BB407_1_F"))
		i1 =  (-1)
		__asm(push(i2), push(i3), op(0x3c))
		i0 =  ((__xasm<int>(push((i0+4)), op(0x37))))
		i2 =  (i2 * 36)
		i0 =  (i0 + i2)
		__asm(push(i1), push((i0+20)), op(0x3c))
		__asm(jump, target("__ZN13b2DynamicTree10InsertLeafEi__XprivateX__BB407_18_F"))
	__asm(lbl("__ZN13b2DynamicTree10InsertLeafEi__XprivateX__BB407_2_F"))
		i4 =  ((__xasm<int>(push((i0+4)), op(0x37))))
		i5 =  (i1 * 36)
		i6 =  (i2 * 36)
		i5 =  (i4 + i5)
		i6 =  (i4 + i6)
		f0 =  ((__xasm<Number>(push(i6), op(0x38))))
		f1 =  ((__xasm<Number>(push((i6+4)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i6+8)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i6+12)), op(0x38))))
		i5 =  ((__xasm<int>(push((i5+24)), op(0x37))))
		i6 =  (i0 + 4)
		__asm(push(i5==-1), iftrue, target("__ZN13b2DynamicTree10InsertLeafEi__XprivateX__BB407_20_F"))
	__asm(lbl("__ZN13b2DynamicTree10InsertLeafEi__XprivateX__BB407_3_F"))
		__asm(jump, target("__ZN13b2DynamicTree10InsertLeafEi__XprivateX__BB407_4_F"))
	__asm(jump, target("__ZN13b2DynamicTree10InsertLeafEi__XprivateX__BB407_4_F"), lbl("__ZN13b2DynamicTree10InsertLeafEi__XprivateX__BB407_4_B"), label, lbl("__ZN13b2DynamicTree10InsertLeafEi__XprivateX__BB407_4_F")); 
		f4 =  (-2)
		i5 =  (i1 * 36)
		i4 =  (i4 + i5)
		f5 =  ((__xasm<Number>(push(i4), op(0x38))))
		f6 =  f0/*fextend*/
		i7 =  ((__xasm<int>(push((i4+24)), op(0x37))))
		f5 =  ((f5<f6) ? f5 : f6)
		i8 =  ((__xasm<int>(push((i4+28)), op(0x37))))
		f7 =  ((__xasm<Number>(push((i4+4)), op(0x38))))
		f8 =  f1/*fextend*/
		f7 =  ((f7<f8) ? f7 : f8)
		f5 =  f5/*fround*/
		__asm(push(f5), push(i4), op(0x3d))
		f5 =  f7/*fround*/
		__asm(push(f5), push((i4+4)), op(0x3d))
		f5 =  ((__xasm<Number>(push((i4+8)), op(0x38))))
		f7 =  f2/*fextend*/
		f9 =  ((__xasm<Number>(push((i4+12)), op(0x38))))
		f10 =  f3/*fextend*/
		f5 =  ((f5>f7) ? f5 : f7)
		f9 =  ((f9>f10) ? f9 : f10)
		f5 =  f5/*fround*/
		__asm(push(f5), push((i4+8)), op(0x3d))
		f5 =  f9/*fround*/
		__asm(push(f5), push((i4+12)), op(0x3d))
		i4 =  ((__xasm<int>(push(i6), op(0x37))))
		i4 =  (i4 + i5)
		i9 =  ((__xasm<int>(push((i4+32)), op(0x37))))
		i9 =  (i9 + 1)
		__asm(push(i9), push((i4+32)), op(0x3c))
		i4 =  ((__xasm<int>(push(i6), op(0x37))))
		i5 =  (i4 + i5)
		f5 =  ((__xasm<Number>(push((i5+8)), op(0x38))))
		f9 =  ((__xasm<Number>(push(i5), op(0x38))))
		f11 =  ((__xasm<Number>(push((i5+12)), op(0x38))))
		f12 =  ((__xasm<Number>(push((i5+4)), op(0x38))))
		f13 =  ((f5>f7) ? f5 : f7)
		f14 =  ((f9<f6) ? f9 : f6)
		f15 =  ((f12<f8) ? f12 : f8)
		f16 =  ((f11>f10) ? f11 : f10)
		f13 =  f13/*fround*/
		f14 =  f14/*fround*/
		f15 =  f15/*fround*/
		f16 =  f16/*fround*/
		f17 =  f14/*fextend*/
		f18 =  f13/*fextend*/
		f19 =  f15/*fextend*/
		f20 =  f16/*fextend*/
		f5 =  (f5 - f9)
		f9 =  (f18 - f17)
		f11 =  (f11 - f12)
		f12 =  (f20 - f19)
		f5 =  f5/*fround*/
		f9 =  f9/*fround*/
		f11 =  f11/*fround*/
		f12 =  f12/*fround*/
		f11 =  f11/*fextend*/
		f5 =  f5/*fextend*/
		f12 =  f12/*fextend*/
		f9 =  f9/*fextend*/
		f5 =  (f5 + f11)
		f9 =  (f9 + f12)
		f5 =  f5/*fround*/
		f9 =  f9/*fround*/
		f4 =  f4/*fround*/
		f9 =  f9/*fextend*/
		f4 =  f4/*fextend*/
		f5 =  f5/*fextend*/
		f4 =  (f5 * f4)
		f5 =  (f9 + f9)
		f4 =  f4/*fround*/
		f5 =  f5/*fround*/
		f5 =  f5/*fextend*/
		f4 =  f4/*fextend*/
		i9 =  (i7 * 36)
		i9 =  (i4 + i9)
		f4 =  (f5 + f4)
		f9 =  ((__xasm<Number>(push((i9+4)), op(0x38))))
		f11 =  ((__xasm<Number>(push(i9), op(0x38))))
		f12 =  ((__xasm<Number>(push((i9+12)), op(0x38))))
		f17 =  ((__xasm<Number>(push((i9+8)), op(0x38))))
		f4 =  f4/*fround*/
		f4 =  f4/*fextend*/
		f18 =  f9/*fextend*/
		f19 =  f11/*fextend*/
		f20 =  f17/*fextend*/
		f21 =  f12/*fextend*/
		i9 =  ((__xasm<int>(push((i9+24)), op(0x37))))
		f4 =  (f4 + f4)
		f5 =  (f5 + f5)
		f8 =  ((f8<f18) ? f8 : f18)
		f6 =  ((f6<f19) ? f6 : f19)
		f7 =  ((f7>f20) ? f7 : f20)
		f10 =  ((f10>f21) ? f10 : f21)
		f4 =  f4/*fround*/
		f5 =  f5/*fround*/
		f8 =  f8/*fround*/
		f6 =  f6/*fround*/
		f7 =  f7/*fround*/
		f10 =  f10/*fround*/
		i10 =  (i5 + 12)
		i11 =  (i5 + 4)
		i12 =  (i5 + 8)
		__asm(push(i9!=-1), iftrue, target("__ZN13b2DynamicTree10InsertLeafEi__XprivateX__BB407_6_F"))
	__asm(lbl("__ZN13b2DynamicTree10InsertLeafEi__XprivateX__BB407_5_F"))
		f6 =  f6/*fextend*/
		f7 =  f7/*fextend*/
		f8 =  f8/*fextend*/
		f9 =  f10/*fextend*/
		f6 =  (f7 - f6)
		f7 =  (f9 - f8)
		f6 =  f6/*fround*/
		f7 =  f7/*fround*/
		f7 =  f7/*fextend*/
		f6 =  f6/*fextend*/
		f6 =  (f6 + f7)
		f6 =  f6/*fround*/
		f6 =  f6/*fextend*/
		f6 =  (f6 + f6)
		f6 =  f6/*fround*/
		__asm(jump, target("__ZN13b2DynamicTree10InsertLeafEi__XprivateX__BB407_7_F"))
	__asm(lbl("__ZN13b2DynamicTree10InsertLeafEi__XprivateX__BB407_6_F"))
		f18 =  (-2)
		f11 =  f11/*fextend*/
		f17 =  f17/*fextend*/
		f9 =  f9/*fextend*/
		f12 =  f12/*fextend*/
		f6 =  f6/*fextend*/
		f7 =  f7/*fextend*/
		f8 =  f8/*fextend*/
		f10 =  f10/*fextend*/
		f11 =  (f17 - f11)
		f9 =  (f12 - f9)
		f6 =  (f7 - f6)
		f7 =  (f10 - f8)
		f8 =  f11/*fround*/
		f9 =  f9/*fround*/
		f6 =  f6/*fround*/
		f7 =  f7/*fround*/
		f9 =  f9/*fextend*/
		f8 =  f8/*fextend*/
		f7 =  f7/*fextend*/
		f6 =  f6/*fextend*/
		f8 =  (f8 + f9)
		f6 =  (f6 + f7)
		f7 =  f8/*fround*/
		f6 =  f6/*fround*/
		f8 =  f18/*fround*/
		f6 =  f6/*fextend*/
		f8 =  f8/*fextend*/
		f7 =  f7/*fextend*/
		f7 =  (f7 * f8)
		f6 =  (f6 + f6)
		f7 =  f7/*fround*/
		f6 =  f6/*fround*/
		f7 =  f7/*fextend*/
		f6 =  f6/*fextend*/
		f6 =  (f6 + f7)
		f6 =  f6/*fround*/
	__asm(lbl("__ZN13b2DynamicTree10InsertLeafEi__XprivateX__BB407_7_F"))
		i9 =  (i8 * 36)
		i9 =  (i4 + i9)
		f7 =  ((__xasm<Number>(push((i9+4)), op(0x38))))
		f8 =  ((__xasm<Number>(push(i9), op(0x38))))
		f9 =  ((__xasm<Number>(push((i9+12)), op(0x38))))
		f10 =  ((__xasm<Number>(push((i9+8)), op(0x38))))
		f11 =  f4/*fextend*/
		f6 =  f6/*fextend*/
		f12 =  f7/*fextend*/
		f17 =  f1/*fextend*/
		f18 =  f8/*fextend*/
		f19 =  f0/*fextend*/
		f20 =  f10/*fextend*/
		f21 =  f2/*fextend*/
		f22 =  f9/*fextend*/
		f23 =  f3/*fextend*/
		i9 =  ((__xasm<int>(push((i9+24)), op(0x37))))
		f6 =  (f6 + f11)
		f11 =  ((f17<f12) ? f17 : f12)
		f12 =  ((f19<f18) ? f19 : f18)
		f17 =  ((f21>f20) ? f21 : f20)
		f18 =  ((f23>f22) ? f23 : f22)
		f6 =  f6/*fround*/
		f11 =  f11/*fround*/
		f12 =  f12/*fround*/
		f17 =  f17/*fround*/
		f18 =  f18/*fround*/
		__asm(push(i9!=-1), iftrue, target("__ZN13b2DynamicTree10InsertLeafEi__XprivateX__BB407_12_F"))
	__asm(lbl("__ZN13b2DynamicTree10InsertLeafEi__XprivateX__BB407_8_F"))
		f7 =  f12/*fextend*/
		f8 =  f17/*fextend*/
		f9 =  f11/*fextend*/
		f10 =  f18/*fextend*/
		f7 =  (f8 - f7)
		f8 =  (f10 - f9)
		f7 =  f7/*fround*/
		f8 =  f8/*fround*/
		f8 =  f8/*fextend*/
		f7 =  f7/*fextend*/
		f7 =  (f7 + f8)
		f7 =  f7/*fround*/
		f7 =  f7/*fextend*/
		f7 =  (f7 + f7)
		f7 =  f7/*fround*/
		f4 =  f4/*fextend*/
		f7 =  f7/*fextend*/
		f4 =  (f7 + f4)
		f4 =  f4/*fround*/
		f7 =  f4/*fextend*/
		f8 =  f5/*fextend*/
		__asm(push(f8>=f7), iftrue, target("__ZN13b2DynamicTree10InsertLeafEi__XprivateX__BB407_10_F"))
	__asm(lbl("__ZN13b2DynamicTree10InsertLeafEi__XprivateX__BB407_9_F"))
		f7 =  f6/*fextend*/
		f5 =  f5/*fextend*/
		__asm(push(f5<f7), iftrue, target("__ZN13b2DynamicTree10InsertLeafEi__XprivateX__BB407_11_F"))
	__asm(lbl("__ZN13b2DynamicTree10InsertLeafEi__XprivateX__BB407_10_F"))
		__asm(jump, target("__ZN13b2DynamicTree10InsertLeafEi__XprivateX__BB407_14_F"))
	__asm(lbl("__ZN13b2DynamicTree10InsertLeafEi__XprivateX__BB407_11_B"), label, lbl("__ZN13b2DynamicTree10InsertLeafEi__XprivateX__BB407_11_F")); 
		__asm(jump, target("__ZN13b2DynamicTree10InsertLeafEi__XprivateX__BB407_21_F"))
	__asm(lbl("__ZN13b2DynamicTree10InsertLeafEi__XprivateX__BB407_12_F"))
		f19 =  (-2)
		f8 =  f8/*fextend*/
		f10 =  f10/*fextend*/
		f7 =  f7/*fextend*/
		f9 =  f9/*fextend*/
		f12 =  f12/*fextend*/
		f17 =  f17/*fextend*/
		f11 =  f11/*fextend*/
		f18 =  f18/*fextend*/
		f8 =  (f10 - f8)
		f7 =  (f9 - f7)
		f9 =  (f17 - f12)
		f10 =  (f18 - f11)
		f8 =  f8/*fround*/
		f7 =  f7/*fround*/
		f9 =  f9/*fround*/
		f10 =  f10/*fround*/
		f7 =  f7/*fextend*/
		f8 =  f8/*fextend*/
		f10 =  f10/*fextend*/
		f9 =  f9/*fextend*/
		f7 =  (f8 + f7)
		f8 =  (f9 + f10)
		f7 =  f7/*fround*/
		f8 =  f8/*fround*/
		f9 =  f19/*fround*/
		f8 =  f8/*fextend*/
		f9 =  f9/*fextend*/
		f7 =  f7/*fextend*/
		f7 =  (f7 * f9)
		f8 =  (f8 + f8)
		f7 =  f7/*fround*/
		f8 =  f8/*fround*/
		f7 =  f7/*fextend*/
		f8 =  f8/*fextend*/
		f7 =  (f8 + f7)
		f7 =  f7/*fround*/
		f4 =  f4/*fextend*/
		f7 =  f7/*fextend*/
		f4 =  (f7 + f4)
		f4 =  f4/*fround*/
		f7 =  f4/*fextend*/
		f8 =  f5/*fextend*/
		__asm(push(f8>=f7), iftrue, target("__ZN13b2DynamicTree10InsertLeafEi__XprivateX__BB407_14_F"))
	__asm(lbl("__ZN13b2DynamicTree10InsertLeafEi__XprivateX__BB407_13_F"))
		f7 =  f6/*fextend*/
		f5 =  f5/*fextend*/
		__asm(push(f5<f7), iftrue, target("__ZN13b2DynamicTree10InsertLeafEi__XprivateX__BB407_11_B"))
	__asm(lbl("__ZN13b2DynamicTree10InsertLeafEi__XprivateX__BB407_14_F"))
		__asm(push(f14), push(i5), op(0x3d))
		__asm(push(f15), push(i11), op(0x3d))
		__asm(push(f13), push(i12), op(0x3d))
		f4 =  f4/*fextend*/
		f5 =  f6/*fextend*/
		i1 =  ((f5<f4) ? i7 : i8)
		__asm(push(f16), push(i10), op(0x3d))
		i4 =  ((__xasm<int>(push(i6), op(0x37))))
		i5 =  (i1 * 36)
		i5 =  (i4 + i5)
		i5 =  ((__xasm<int>(push((i5+24)), op(0x37))))
		__asm(push(i5==-1), iftrue, target("__ZN13b2DynamicTree10InsertLeafEi__XprivateX__BB407_21_F"))
	__asm(lbl("__ZN13b2DynamicTree10InsertLeafEi__XprivateX__BB407_15_F"))
		__asm(jump, target("__ZN13b2DynamicTree10InsertLeafEi__XprivateX__BB407_4_B"))
	__asm(lbl("__ZN13b2DynamicTree10InsertLeafEi__XprivateX__BB407_16_B"), label)
		i3 =  (i4 * 36)
		i3 =  (i5 + i3)
		__asm(push(i0), push((i3+28)), op(0x3c))
	__asm(jump, target("__ZN13b2DynamicTree10InsertLeafEi__XprivateX__BB407_17_F"), lbl("__ZN13b2DynamicTree10InsertLeafEi__XprivateX__BB407_17_B"), label, lbl("__ZN13b2DynamicTree10InsertLeafEi__XprivateX__BB407_17_F")); 
		i3 =  ((__xasm<int>(push(i6), op(0x37))))
		i5 =  (i0 * 36)
		i3 =  (i3 + i5)
		__asm(push(i1), push((i3+24)), op(0x3c))
		i3 =  ((__xasm<int>(push(i6), op(0x37))))
		i3 =  (i3 + i5)
		__asm(push(i2), push((i3+28)), op(0x3c))
		i3 =  ((__xasm<int>(push(i6), op(0x37))))
		i1 =  (i1 * 36)
		i1 =  (i3 + i1)
		__asm(push(i0), push((i1+20)), op(0x3c))
		i1 =  ((__xasm<int>(push(i6), op(0x37))))
		i2 =  (i2 * 36)
		i1 =  (i1 + i2)
		__asm(push(i0), push((i1+20)), op(0x3c))
	__asm(jump, target("__ZN13b2DynamicTree10InsertLeafEi__XprivateX__BB407_18_F"), lbl("__ZN13b2DynamicTree10InsertLeafEi__XprivateX__BB407_18_B"), label, lbl("__ZN13b2DynamicTree10InsertLeafEi__XprivateX__BB407_18_F")); 
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN13b2DynamicTree10InsertLeafEi__XprivateX__BB407_19_B"), label)
		i4 =  (i0 * 36)
		i5 =  (i5 + i4)
		__asm(push(i1), push((i5+24)), op(0x3c))
		i5 =  ((__xasm<int>(push(i6), op(0x37))))
		i4 =  (i5 + i4)
		__asm(push(i2), push((i4+28)), op(0x3c))
		i4 =  ((__xasm<int>(push(i6), op(0x37))))
		i1 =  (i1 * 36)
		i1 =  (i4 + i1)
		__asm(push(i0), push((i1+20)), op(0x3c))
		i1 =  ((__xasm<int>(push(i6), op(0x37))))
		i2 =  (i2 * 36)
		i1 =  (i1 + i2)
		__asm(push(i0), push((i1+20)), op(0x3c))
		__asm(push(i0), push(i3), op(0x3c))
		__asm(jump, target("__ZN13b2DynamicTree10InsertLeafEi__XprivateX__BB407_18_B"))
	__asm(lbl("__ZN13b2DynamicTree10InsertLeafEi__XprivateX__BB407_20_F"))
		__asm(jump, target("__ZN13b2DynamicTree10InsertLeafEi__XprivateX__BB407_21_F"))
	__asm(lbl("__ZN13b2DynamicTree10InsertLeafEi__XprivateX__BB407_21_F"))
		i5 =  (0)
		i7 =  (i1 * 36)
		i4 =  (i4 + i7)
		i4 =  ((__xasm<int>(push((i4+20)), op(0x37))))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM__ZN13b2DynamicTree12AllocateNodeEv.start()
		return
	__asm(lbl("__ZN13b2DynamicTree10InsertLeafEi_state1"))
		i0 = mstate.eax
		mstate.esp += 4
		i8 =  ((__xasm<int>(push(i6), op(0x37))))
		i9 =  (i0 * 36)
		i8 =  (i8 + i9)
		__asm(push(i4), push((i8+20)), op(0x3c))
		i8 =  ((__xasm<int>(push(i6), op(0x37))))
		i8 =  (i8 + i9)
		__asm(push(i5), push((i8+16)), op(0x3c))
		i5 =  ((__xasm<int>(push(i6), op(0x37))))
		i8 =  (i5 + i7)
		f4 =  ((__xasm<Number>(push(i8), op(0x38))))
		f0 =  f0/*fextend*/
		f5 =  ((__xasm<Number>(push((i8+4)), op(0x38))))
		f1 =  f1/*fextend*/
		f0 =  ((f0<f4) ? f0 : f4)
		f1 =  ((f1<f5) ? f1 : f5)
		f0 =  f0/*fround*/
		i5 =  (i5 + i9)
		__asm(push(f0), push(i5), op(0x3d))
		f0 =  f1/*fround*/
		__asm(push(f0), push((i5+4)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i8+8)), op(0x38))))
		f1 =  f2/*fextend*/
		f2 =  ((__xasm<Number>(push((i8+12)), op(0x38))))
		f3 =  f3/*fextend*/
		f0 =  ((f1>f0) ? f1 : f0)
		f1 =  ((f3>f2) ? f3 : f2)
		f0 =  f0/*fround*/
		__asm(push(f0), push((i5+8)), op(0x3d))
		f0 =  f1/*fround*/
		__asm(push(f0), push((i5+12)), op(0x3d))
		i5 =  ((__xasm<int>(push(i6), op(0x37))))
		i7 =  (i5 + i7)
		i7 =  ((__xasm<int>(push((i7+32)), op(0x37))))
		i5 =  (i5 + i9)
		i7 =  (i7 + 1)
		__asm(push(i7), push((i5+32)), op(0x3c))
		i5 =  ((__xasm<int>(push(i6), op(0x37))))
		__asm(push(i4==-1), iftrue, target("__ZN13b2DynamicTree10InsertLeafEi__XprivateX__BB407_19_B"))
		__asm(jump, target("__ZN13b2DynamicTree10InsertLeafEi__XprivateX__BB407_22_F"))
	__asm(lbl("__ZN13b2DynamicTree10InsertLeafEi__XprivateX__BB407_22_F"))
		i3 =  (i4 * 36)
		i3 =  (i5 + i3)
		i7 =  ((__xasm<int>(push((i3+24)), op(0x37))))
		i3 =  (i3 + 24)
		__asm(push(i7!=i1), iftrue, target("__ZN13b2DynamicTree10InsertLeafEi__XprivateX__BB407_16_B"))
		__asm(jump, target("__ZN13b2DynamicTree10InsertLeafEi__XprivateX__BB407_23_F"))
	__asm(lbl("__ZN13b2DynamicTree10InsertLeafEi__XprivateX__BB407_23_F"))
		__asm(push(i0), push(i3), op(0x3c))
		__asm(jump, target("__ZN13b2DynamicTree10InsertLeafEi__XprivateX__BB407_17_B"))
	__asm(lbl("__ZN13b2DynamicTree10InsertLeafEi_errState"))
		throw("Invalid state in __ZN13b2DynamicTree10InsertLeafEi")
	}
}



// Async
public const __ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform:int = regFunc(FSM__ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform.start)

public final class FSM__ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform extends Machine {

	public static function start():void {
			var result:FSM__ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform = new FSM__ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
	public var i8:int, i9:int, i10:int, i11:int, i12:int, i13:int, i14:int, i15:int
	public var i16:int, i17:int, i18:int, i19:int

	public static const intRegCount:int = 20
	public var f0:Number, f1:Number, f2:Number

	public static const NumberRegCount:int = 3
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform_entry"))
		__asm(push(state), switchjump(
			"__ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform_errState",
			"__ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform_state0",
			"__ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform_state1",
			"__ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform_state2",
			"__ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform_state3",
			"__ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform_state4",
			"__ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform_state5",
			"__ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform_state6",
			"__ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform_state7",
			"__ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform_state8"))
	__asm(lbl("__ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform_state0"))
	__asm(lbl("__ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform__XprivateX__BB408_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i3 =  ((__xasm<int>(push((i0+32)), op(0x37))))
		i4 =  (i0 + 32)
		__asm(push(i3==0), iftrue, target("__ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform__XprivateX__BB408_2_F"))
	__asm(lbl("__ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform__XprivateX__BB408_1_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str96303)
		i4 =  (__ZZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2TransformE8__func__)
		i3 =  (__2E_str95302)
		i5 =  (131)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i4), push((mstate.esp+12)), op(0x3c))
		__asm(push(i3), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform_state1"))
		mstate.esp += 24
		state = 2
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform_state2"))
	__asm(lbl("__ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform__XprivateX__BB408_2_F"))
		i3 =  ((__xasm<int>(push((i0+16)), op(0x37))))
		i5 =  ((__xasm<int>(push(i3), op(0x37))))
		i5 =  ((__xasm<int>(push((i5+12)), op(0x37))))
		mstate.esp -= 4
		__asm(push(i3), push(mstate.esp), op(0x3c))
		state = 3
		mstate.esp -= 4;(mstate.funcs[i5])()
		return
	__asm(lbl("__ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform_state3"))
		i3 = mstate.eax
		mstate.esp += 4
		__asm(push(i3), push(i4), op(0x3c))
		i5 =  (i0 + 16)
		__asm(push(i3<1), iftrue, target("__ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform__XprivateX__BB408_8_F"))
	__asm(lbl("__ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform__XprivateX__BB408_3_F"))
		i3 =  (0)
		i6 =  (i1 + 32)
		i7 =  (i1 + 36)
		i8 =  (i1 + 40)
		i9 =  (i1 + 28)
		i10 =  (i1 + 4)
		i11 =  (i0 + 28)
		i12 = i3
	__asm(jump, target("__ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform__XprivateX__BB408_4_F"), lbl("__ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform__XprivateX__BB408_4_B"), label, lbl("__ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform__XprivateX__BB408_4_F")); 
		i13 =  (1)
		i14 =  ((__xasm<int>(push(i5), op(0x37))))
		i15 =  ((__xasm<int>(push(i14), op(0x37))))
		i16 =  ((__xasm<int>(push(i11), op(0x37))))
		i15 =  ((__xasm<int>(push((i15+24)), op(0x37))))
		mstate.esp -= 16
		i17 =  (i16 + i12)
		__asm(push(i14), push(mstate.esp), op(0x3c))
		__asm(push(i17), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		state = 4
		mstate.esp -= 4;(mstate.funcs[i15])()
		return
	__asm(lbl("__ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform_state4"))
		mstate.esp += 16
		mstate.esp -= 4
		__asm(push(i1), push(mstate.esp), op(0x3c))
		state = 5
		mstate.esp -= 4;FSM__ZN13b2DynamicTree12AllocateNodeEv.start()
		return
	__asm(lbl("__ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform_state5"))
		i14 = mstate.eax
		mstate.esp += 4
		f0 =  ((__xasm<Number>(push(_b2_aabbExtension), op(0x38))))
		f1 =  ((__xasm<Number>(push(i17), op(0x38))))
		f2 =  ((__xasm<Number>(push((i17+4)), op(0x38))))
		i15 =  ((__xasm<int>(push(i10), op(0x37))))
		f1 =  (f1 - f0)
		i18 =  (i14 * 36)
		f2 =  (f2 - f0)
		f1 =  f1/*fround*/
		i15 =  (i15 + i18)
		__asm(push(f1), push(i15), op(0x3d))
		f1 =  f2/*fround*/
		__asm(push(f1), push((i15+4)), op(0x3d))
		f1 =  ((__xasm<Number>(push((i17+8)), op(0x38))))
		i15 =  ((__xasm<int>(push(i10), op(0x37))))
		f2 =  ((__xasm<Number>(push((i17+12)), op(0x38))))
		f1 =  (f1 + f0)
		f0 =  (f2 + f0)
		f1 =  f1/*fround*/
		i15 =  (i15 + i18)
		__asm(push(f1), push((i15+8)), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push((i15+12)), op(0x3d))
		i15 =  ((__xasm<int>(push(i10), op(0x37))))
		i15 =  (i15 + i18)
		__asm(push(i17), push((i15+16)), op(0x3c))
		i15 =  ((__xasm<int>(push(i10), op(0x37))))
		i15 =  (i15 + i18)
		__asm(push(i13), push((i15+32)), op(0x3c))
		mstate.esp -= 8
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i14), push((mstate.esp+4)), op(0x3c))
		state = 6
		mstate.esp -= 4;FSM__ZN13b2DynamicTree10InsertLeafEi.start()
		return
	__asm(lbl("__ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform_state6"))
		mstate.esp += 8
		i13 =  ((__xasm<int>(push(i9), op(0x37))))
		i13 =  (i13 + 1)
		__asm(push(i13), push(i9), op(0x3c))
		i13 =  ((__xasm<int>(push(i8), op(0x37))))
		i15 =  ((__xasm<int>(push(i7), op(0x37))))
		__asm(push(i13!=i15), iftrue, target("__ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform__XprivateX__BB408_6_F"))
	__asm(lbl("__ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform__XprivateX__BB408_5_F"))
		i17 =  (0)
		i18 =  ((__xasm<int>(push(i6), op(0x37))))
		i19 =  (i15 << 1)
		__asm(push(i19), push(i7), op(0x3c))
		mstate.esp -= 8
		i15 =  (i15 << 3)
		__asm(push(i17), push(mstate.esp), op(0x3c))
		__asm(push(i15), push((mstate.esp+4)), op(0x3c))
		state = 7
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform_state7"))
		i15 = mstate.eax
		mstate.esp += 8
		__asm(push(i15), push(i6), op(0x3c))
		i13 =  (i13 << 2)
		memcpy(i15, i18, i13)
		mstate.esp -= 8
		__asm(push(i18), push(mstate.esp), op(0x3c))
		__asm(push(i17), push((mstate.esp+4)), op(0x3c))
		state = 8
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform_state8"))
		i13 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform__XprivateX__BB408_6_F"))
		i13 =  ((__xasm<int>(push(i8), op(0x37))))
		i15 =  ((__xasm<int>(push(i6), op(0x37))))
		i13 =  (i13 << 2)
		i13 =  (i15 + i13)
		__asm(push(i14), push(i13), op(0x3c))
		i13 =  ((__xasm<int>(push(i8), op(0x37))))
		i13 =  (i13 + 1)
		__asm(push(i13), push(i8), op(0x3c))
		i13 =  (i16 + i12)
		__asm(push(i14), push((i13+24)), op(0x3c))
		__asm(push(i0), push((i13+16)), op(0x3c))
		__asm(push(i3), push((i13+20)), op(0x3c))
		i13 =  ((__xasm<int>(push(i4), op(0x37))))
		i12 =  (i12 + 28)
		i3 =  (i3 + 1)
		__asm(push(i13<=i3), iftrue, target("__ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform__XprivateX__BB408_8_F"))
	__asm(lbl("__ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform__XprivateX__BB408_7_F"))
		__asm(jump, target("__ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform__XprivateX__BB408_4_B"))
	__asm(lbl("__ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform__XprivateX__BB408_8_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform_errState"))
		throw("Invalid state in __ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform")
	}
}



// Async
public const __ZN15b2CircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator:int = regFunc(FSM__ZN15b2CircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator.start)

public final class FSM__ZN15b2CircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator extends Machine {

	public static function start():void {
			var result:FSM__ZN15b2CircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator = new FSM__ZN15b2CircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int

	public static const intRegCount:int = 6

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN15b2CircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_entry"))
		__asm(push(state), switchjump(
			"__ZN15b2CircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_errState",
			"__ZN15b2CircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state0",
			"__ZN15b2CircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state1",
			"__ZN15b2CircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state2",
			"__ZN15b2CircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state3",
			"__ZN15b2CircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state4",
			"__ZN15b2CircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state5"))
	__asm(lbl("__ZN15b2CircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state0"))
	__asm(lbl("__ZN15b2CircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB409_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (148)
		mstate.esp -= 8
		i1 =  ((__xasm<int>(push((mstate.ebp+24)), op(0x37))))
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM__ZN16b2BlockAllocator8AllocateEi.start()
		return
	__asm(lbl("__ZN15b2CircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state1"))
		i0 = mstate.eax
		mstate.esp += 8
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__ZN15b2CircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB409_7_F"))
	__asm(lbl("__ZN15b2CircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB409_1_F"))
		i3 =  (4)
		__asm(push(i3), push((i0+4)), op(0x3c))
		__asm(push(i1), push((i0+48)), op(0x3c))
		__asm(push(i2), push((i0+52)), op(0x3c))
		i3 =  (0)
		__asm(push(i3), push((i0+56)), op(0x3c))
		__asm(push(i3), push((i0+60)), op(0x3c))
		__asm(push(i3), push((i0+132)), op(0x3c))
		__asm(push(i3), push((i0+8)), op(0x3c))
		__asm(push(i3), push((i0+12)), op(0x3c))
		__asm(push(i3), push((i0+20)), op(0x3c))
		__asm(push(i3), push((i0+24)), op(0x3c))
		__asm(push(i3), push((i0+28)), op(0x3c))
		__asm(push(i3), push((i0+16)), op(0x3c))
		__asm(push(i3), push((i0+36)), op(0x3c))
		__asm(push(i3), push((i0+40)), op(0x3c))
		__asm(push(i3), push((i0+44)), op(0x3c))
		__asm(push(i3), push((i0+32)), op(0x3c))
		i4 =  (__ZTV15b2CircleContact)
		__asm(push(i3), push((i0+136)), op(0x3c))
		i3 =  (i4 + 8)
		__asm(push(i3), push(i0), op(0x3c))
		i1 =  ((__xasm<int>(push((i1+16)), op(0x37))))
		i1 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		__asm(push(i1==0), iftrue, target("__ZN15b2CircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB409_4_F"))
	__asm(lbl("__ZN15b2CircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB409_2_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i2 =  (__2E_str1670)
		i1 =  (__2E_str99306)
		i3 =  (__ZZN15b2CircleContactC4EP9b2FixtureS1_E8__func__)
		i4 =  (__2E_str98305)
		i5 =  (44)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i2), push((mstate.esp+4)), op(0x3c))
		__asm(push(i1), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__ZN15b2CircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state2"))
		mstate.esp += 24
	__asm(lbl("__ZN15b2CircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB409_3_F"))
		state = 3
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZN15b2CircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state3"))
	__asm(lbl("__ZN15b2CircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB409_4_F"))
		i1 =  ((__xasm<int>(push((i2+16)), op(0x37))))
		i1 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		__asm(push(i1==0), iftrue, target("__ZN15b2CircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB409_7_F"))
	__asm(lbl("__ZN15b2CircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB409_5_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str100)
		i3 =  (__ZZN15b2CircleContactC4EP9b2FixtureS1_E8__func__)
		i4 =  (__2E_str98305)
		i5 =  (45)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 4
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__ZN15b2CircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state4"))
		mstate.esp += 24
	__asm(lbl("__ZN15b2CircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB409_6_F"))
		state = 5
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZN15b2CircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state5"))
	__asm(lbl("__ZN15b2CircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB409_7_F"))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN15b2CircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_errState"))
		throw("Invalid state in __ZN15b2CircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator")
	}
}



// Async
public const __ZN22b2EdgeAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator:int = regFunc(FSM__ZN22b2EdgeAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator.start)

public final class FSM__ZN22b2EdgeAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator extends Machine {

	public static function start():void {
			var result:FSM__ZN22b2EdgeAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator = new FSM__ZN22b2EdgeAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int

	public static const intRegCount:int = 6

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN22b2EdgeAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_entry"))
		__asm(push(state), switchjump(
			"__ZN22b2EdgeAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_errState",
			"__ZN22b2EdgeAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state0",
			"__ZN22b2EdgeAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state1",
			"__ZN22b2EdgeAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state2",
			"__ZN22b2EdgeAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state3",
			"__ZN22b2EdgeAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state4",
			"__ZN22b2EdgeAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state5"))
	__asm(lbl("__ZN22b2EdgeAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state0"))
	__asm(lbl("__ZN22b2EdgeAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB410_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (148)
		mstate.esp -= 8
		i1 =  ((__xasm<int>(push((mstate.ebp+24)), op(0x37))))
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM__ZN16b2BlockAllocator8AllocateEi.start()
		return
	__asm(lbl("__ZN22b2EdgeAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state1"))
		i0 = mstate.eax
		mstate.esp += 8
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__ZN22b2EdgeAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB410_7_F"))
	__asm(lbl("__ZN22b2EdgeAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB410_1_F"))
		i3 =  (4)
		__asm(push(i3), push((i0+4)), op(0x3c))
		__asm(push(i1), push((i0+48)), op(0x3c))
		__asm(push(i2), push((i0+52)), op(0x3c))
		i3 =  (0)
		__asm(push(i3), push((i0+56)), op(0x3c))
		__asm(push(i3), push((i0+60)), op(0x3c))
		__asm(push(i3), push((i0+132)), op(0x3c))
		__asm(push(i3), push((i0+8)), op(0x3c))
		__asm(push(i3), push((i0+12)), op(0x3c))
		__asm(push(i3), push((i0+20)), op(0x3c))
		__asm(push(i3), push((i0+24)), op(0x3c))
		__asm(push(i3), push((i0+28)), op(0x3c))
		__asm(push(i3), push((i0+16)), op(0x3c))
		__asm(push(i3), push((i0+36)), op(0x3c))
		__asm(push(i3), push((i0+40)), op(0x3c))
		__asm(push(i3), push((i0+44)), op(0x3c))
		__asm(push(i3), push((i0+32)), op(0x3c))
		i4 =  (__ZTV22b2EdgeAndCircleContact)
		__asm(push(i3), push((i0+136)), op(0x3c))
		i3 =  (i4 + 8)
		__asm(push(i3), push(i0), op(0x3c))
		i1 =  ((__xasm<int>(push((i1+16)), op(0x37))))
		i1 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		__asm(push(i1==1), iftrue, target("__ZN22b2EdgeAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB410_4_F"))
	__asm(lbl("__ZN22b2EdgeAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB410_2_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i2 =  (__2E_str1670)
		i1 =  (__2E_str102)
		i3 =  (__ZZN22b2EdgeAndCircleContactC4EP9b2FixtureS1_E8__func__)
		i4 =  (__2E_str101)
		i5 =  (41)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i2), push((mstate.esp+4)), op(0x3c))
		__asm(push(i1), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__ZN22b2EdgeAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state2"))
		mstate.esp += 24
	__asm(lbl("__ZN22b2EdgeAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB410_3_F"))
		state = 3
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZN22b2EdgeAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state3"))
	__asm(lbl("__ZN22b2EdgeAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB410_4_F"))
		i1 =  ((__xasm<int>(push((i2+16)), op(0x37))))
		i1 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		__asm(push(i1==0), iftrue, target("__ZN22b2EdgeAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB410_7_F"))
	__asm(lbl("__ZN22b2EdgeAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB410_5_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str100)
		i3 =  (__ZZN22b2EdgeAndCircleContactC4EP9b2FixtureS1_E8__func__)
		i4 =  (__2E_str101)
		i5 =  (42)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 4
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__ZN22b2EdgeAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state4"))
		mstate.esp += 24
	__asm(lbl("__ZN22b2EdgeAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB410_6_F"))
		state = 5
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZN22b2EdgeAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state5"))
	__asm(lbl("__ZN22b2EdgeAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB410_7_F"))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN22b2EdgeAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_errState"))
		throw("Invalid state in __ZN22b2EdgeAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator")
	}
}



// Async
public const __ZN23b2EdgeAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator:int = regFunc(FSM__ZN23b2EdgeAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator.start)

public final class FSM__ZN23b2EdgeAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator extends Machine {

	public static function start():void {
			var result:FSM__ZN23b2EdgeAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator = new FSM__ZN23b2EdgeAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int

	public static const intRegCount:int = 6

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN23b2EdgeAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_entry"))
		__asm(push(state), switchjump(
			"__ZN23b2EdgeAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_errState",
			"__ZN23b2EdgeAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state0",
			"__ZN23b2EdgeAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state1",
			"__ZN23b2EdgeAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state2",
			"__ZN23b2EdgeAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state3",
			"__ZN23b2EdgeAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state4",
			"__ZN23b2EdgeAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state5"))
	__asm(lbl("__ZN23b2EdgeAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state0"))
	__asm(lbl("__ZN23b2EdgeAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB411_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (148)
		mstate.esp -= 8
		i1 =  ((__xasm<int>(push((mstate.ebp+24)), op(0x37))))
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM__ZN16b2BlockAllocator8AllocateEi.start()
		return
	__asm(lbl("__ZN23b2EdgeAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state1"))
		i0 = mstate.eax
		mstate.esp += 8
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__ZN23b2EdgeAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB411_7_F"))
	__asm(lbl("__ZN23b2EdgeAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB411_1_F"))
		i3 =  (4)
		__asm(push(i3), push((i0+4)), op(0x3c))
		__asm(push(i1), push((i0+48)), op(0x3c))
		__asm(push(i2), push((i0+52)), op(0x3c))
		i3 =  (0)
		__asm(push(i3), push((i0+56)), op(0x3c))
		__asm(push(i3), push((i0+60)), op(0x3c))
		__asm(push(i3), push((i0+132)), op(0x3c))
		__asm(push(i3), push((i0+8)), op(0x3c))
		__asm(push(i3), push((i0+12)), op(0x3c))
		__asm(push(i3), push((i0+20)), op(0x3c))
		__asm(push(i3), push((i0+24)), op(0x3c))
		__asm(push(i3), push((i0+28)), op(0x3c))
		__asm(push(i3), push((i0+16)), op(0x3c))
		__asm(push(i3), push((i0+36)), op(0x3c))
		__asm(push(i3), push((i0+40)), op(0x3c))
		__asm(push(i3), push((i0+44)), op(0x3c))
		__asm(push(i3), push((i0+32)), op(0x3c))
		i4 =  (__ZTV23b2EdgeAndPolygonContact)
		__asm(push(i3), push((i0+136)), op(0x3c))
		i3 =  (i4 + 8)
		__asm(push(i3), push(i0), op(0x3c))
		i1 =  ((__xasm<int>(push((i1+16)), op(0x37))))
		i1 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		__asm(push(i1==1), iftrue, target("__ZN23b2EdgeAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB411_4_F"))
	__asm(lbl("__ZN23b2EdgeAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB411_2_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i2 =  (__2E_str1670)
		i1 =  (__2E_str102)
		i3 =  (__ZZN23b2EdgeAndPolygonContactC4EP9b2FixtureS1_E8__func__)
		i4 =  (__2E_str103)
		i5 =  (41)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i2), push((mstate.esp+4)), op(0x3c))
		__asm(push(i1), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__ZN23b2EdgeAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state2"))
		mstate.esp += 24
	__asm(lbl("__ZN23b2EdgeAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB411_3_F"))
		state = 3
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZN23b2EdgeAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state3"))
	__asm(lbl("__ZN23b2EdgeAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB411_4_F"))
		i1 =  ((__xasm<int>(push((i2+16)), op(0x37))))
		i1 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		__asm(push(i1==2), iftrue, target("__ZN23b2EdgeAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB411_7_F"))
	__asm(lbl("__ZN23b2EdgeAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB411_5_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str104)
		i3 =  (__ZZN23b2EdgeAndPolygonContactC4EP9b2FixtureS1_E8__func__)
		i4 =  (__2E_str103)
		i5 =  (42)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 4
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__ZN23b2EdgeAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state4"))
		mstate.esp += 24
	__asm(lbl("__ZN23b2EdgeAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB411_6_F"))
		state = 5
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZN23b2EdgeAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state5"))
	__asm(lbl("__ZN23b2EdgeAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB411_7_F"))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN23b2EdgeAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_errState"))
		throw("Invalid state in __ZN23b2EdgeAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator")
	}
}



// Async
public const __ZN22b2LoopAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator:int = regFunc(FSM__ZN22b2LoopAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator.start)

public final class FSM__ZN22b2LoopAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator extends Machine {

	public static function start():void {
			var result:FSM__ZN22b2LoopAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator = new FSM__ZN22b2LoopAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int

	public static const intRegCount:int = 6

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN22b2LoopAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_entry"))
		__asm(push(state), switchjump(
			"__ZN22b2LoopAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_errState",
			"__ZN22b2LoopAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state0",
			"__ZN22b2LoopAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state1",
			"__ZN22b2LoopAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state2",
			"__ZN22b2LoopAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state3",
			"__ZN22b2LoopAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state4",
			"__ZN22b2LoopAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state5"))
	__asm(lbl("__ZN22b2LoopAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state0"))
	__asm(lbl("__ZN22b2LoopAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB412_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (148)
		mstate.esp -= 8
		i1 =  ((__xasm<int>(push((mstate.ebp+24)), op(0x37))))
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM__ZN16b2BlockAllocator8AllocateEi.start()
		return
	__asm(lbl("__ZN22b2LoopAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state1"))
		i0 = mstate.eax
		mstate.esp += 8
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i3 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i4 =  ((__xasm<int>(push((mstate.ebp+20)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__ZN22b2LoopAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB412_7_F"))
	__asm(lbl("__ZN22b2LoopAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB412_1_F"))
		i5 =  (4)
		__asm(push(i5), push((i0+4)), op(0x3c))
		__asm(push(i1), push((i0+48)), op(0x3c))
		__asm(push(i3), push((i0+52)), op(0x3c))
		__asm(push(i2), push((i0+56)), op(0x3c))
		__asm(push(i4), push((i0+60)), op(0x3c))
		i2 =  (0)
		__asm(push(i2), push((i0+132)), op(0x3c))
		__asm(push(i2), push((i0+8)), op(0x3c))
		__asm(push(i2), push((i0+12)), op(0x3c))
		__asm(push(i2), push((i0+20)), op(0x3c))
		__asm(push(i2), push((i0+24)), op(0x3c))
		__asm(push(i2), push((i0+28)), op(0x3c))
		__asm(push(i2), push((i0+16)), op(0x3c))
		__asm(push(i2), push((i0+36)), op(0x3c))
		__asm(push(i2), push((i0+40)), op(0x3c))
		__asm(push(i2), push((i0+44)), op(0x3c))
		__asm(push(i2), push((i0+32)), op(0x3c))
		i4 =  (__ZTV22b2LoopAndCircleContact)
		__asm(push(i2), push((i0+136)), op(0x3c))
		i2 =  (i4 + 8)
		__asm(push(i2), push(i0), op(0x3c))
		i1 =  ((__xasm<int>(push((i1+16)), op(0x37))))
		i1 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		__asm(push(i1==3), iftrue, target("__ZN22b2LoopAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB412_4_F"))
	__asm(lbl("__ZN22b2LoopAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB412_2_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i3 =  (__2E_str1670)
		i1 =  (__2E_str106)
		i2 =  (__ZZN22b2LoopAndCircleContactC4EP9b2FixtureiS1_iE8__func__)
		i4 =  (__2E_str105)
		i5 =  (43)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i3), push((mstate.esp+4)), op(0x3c))
		__asm(push(i1), push((mstate.esp+8)), op(0x3c))
		__asm(push(i2), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__ZN22b2LoopAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state2"))
		mstate.esp += 24
	__asm(lbl("__ZN22b2LoopAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB412_3_F"))
		state = 3
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZN22b2LoopAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state3"))
	__asm(lbl("__ZN22b2LoopAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB412_4_F"))
		i1 =  ((__xasm<int>(push((i3+16)), op(0x37))))
		i1 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		__asm(push(i1==0), iftrue, target("__ZN22b2LoopAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB412_7_F"))
	__asm(lbl("__ZN22b2LoopAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB412_5_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str100)
		i3 =  (__ZZN22b2LoopAndCircleContactC4EP9b2FixtureiS1_iE8__func__)
		i4 =  (__2E_str105)
		i5 =  (44)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 4
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__ZN22b2LoopAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state4"))
		mstate.esp += 24
	__asm(lbl("__ZN22b2LoopAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB412_6_F"))
		state = 5
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZN22b2LoopAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state5"))
	__asm(lbl("__ZN22b2LoopAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB412_7_F"))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN22b2LoopAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_errState"))
		throw("Invalid state in __ZN22b2LoopAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator")
	}
}



// Async
public const __ZN23b2LoopAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator:int = regFunc(FSM__ZN23b2LoopAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator.start)

public final class FSM__ZN23b2LoopAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator extends Machine {

	public static function start():void {
			var result:FSM__ZN23b2LoopAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator = new FSM__ZN23b2LoopAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int

	public static const intRegCount:int = 6

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN23b2LoopAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_entry"))
		__asm(push(state), switchjump(
			"__ZN23b2LoopAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_errState",
			"__ZN23b2LoopAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state0",
			"__ZN23b2LoopAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state1",
			"__ZN23b2LoopAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state2",
			"__ZN23b2LoopAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state3",
			"__ZN23b2LoopAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state4",
			"__ZN23b2LoopAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state5"))
	__asm(lbl("__ZN23b2LoopAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state0"))
	__asm(lbl("__ZN23b2LoopAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB413_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (148)
		mstate.esp -= 8
		i1 =  ((__xasm<int>(push((mstate.ebp+24)), op(0x37))))
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM__ZN16b2BlockAllocator8AllocateEi.start()
		return
	__asm(lbl("__ZN23b2LoopAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state1"))
		i0 = mstate.eax
		mstate.esp += 8
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i3 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i4 =  ((__xasm<int>(push((mstate.ebp+20)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__ZN23b2LoopAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB413_7_F"))
	__asm(lbl("__ZN23b2LoopAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB413_1_F"))
		i5 =  (4)
		__asm(push(i5), push((i0+4)), op(0x3c))
		__asm(push(i1), push((i0+48)), op(0x3c))
		__asm(push(i3), push((i0+52)), op(0x3c))
		__asm(push(i2), push((i0+56)), op(0x3c))
		__asm(push(i4), push((i0+60)), op(0x3c))
		i2 =  (0)
		__asm(push(i2), push((i0+132)), op(0x3c))
		__asm(push(i2), push((i0+8)), op(0x3c))
		__asm(push(i2), push((i0+12)), op(0x3c))
		__asm(push(i2), push((i0+20)), op(0x3c))
		__asm(push(i2), push((i0+24)), op(0x3c))
		__asm(push(i2), push((i0+28)), op(0x3c))
		__asm(push(i2), push((i0+16)), op(0x3c))
		__asm(push(i2), push((i0+36)), op(0x3c))
		__asm(push(i2), push((i0+40)), op(0x3c))
		__asm(push(i2), push((i0+44)), op(0x3c))
		__asm(push(i2), push((i0+32)), op(0x3c))
		i4 =  (__ZTV23b2LoopAndPolygonContact)
		__asm(push(i2), push((i0+136)), op(0x3c))
		i2 =  (i4 + 8)
		__asm(push(i2), push(i0), op(0x3c))
		i1 =  ((__xasm<int>(push((i1+16)), op(0x37))))
		i1 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		__asm(push(i1==3), iftrue, target("__ZN23b2LoopAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB413_4_F"))
	__asm(lbl("__ZN23b2LoopAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB413_2_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i3 =  (__2E_str1670)
		i1 =  (__2E_str106)
		i2 =  (__ZZN23b2LoopAndPolygonContactC4EP9b2FixtureiS1_iE8__func__)
		i4 =  (__2E_str107)
		i5 =  (43)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i3), push((mstate.esp+4)), op(0x3c))
		__asm(push(i1), push((mstate.esp+8)), op(0x3c))
		__asm(push(i2), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__ZN23b2LoopAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state2"))
		mstate.esp += 24
	__asm(lbl("__ZN23b2LoopAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB413_3_F"))
		state = 3
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZN23b2LoopAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state3"))
	__asm(lbl("__ZN23b2LoopAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB413_4_F"))
		i1 =  ((__xasm<int>(push((i3+16)), op(0x37))))
		i1 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		__asm(push(i1==2), iftrue, target("__ZN23b2LoopAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB413_7_F"))
	__asm(lbl("__ZN23b2LoopAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB413_5_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str104)
		i3 =  (__ZZN23b2LoopAndPolygonContactC4EP9b2FixtureiS1_iE8__func__)
		i4 =  (__2E_str107)
		i5 =  (44)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 4
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__ZN23b2LoopAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state4"))
		mstate.esp += 24
	__asm(lbl("__ZN23b2LoopAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB413_6_F"))
		state = 5
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZN23b2LoopAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state5"))
	__asm(lbl("__ZN23b2LoopAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB413_7_F"))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN23b2LoopAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_errState"))
		throw("Invalid state in __ZN23b2LoopAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator")
	}
}



// Async
public const __ZN25b2PolygonAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator:int = regFunc(FSM__ZN25b2PolygonAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator.start)

public final class FSM__ZN25b2PolygonAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator extends Machine {

	public static function start():void {
			var result:FSM__ZN25b2PolygonAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator = new FSM__ZN25b2PolygonAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int

	public static const intRegCount:int = 6

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN25b2PolygonAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_entry"))
		__asm(push(state), switchjump(
			"__ZN25b2PolygonAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_errState",
			"__ZN25b2PolygonAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state0",
			"__ZN25b2PolygonAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state1",
			"__ZN25b2PolygonAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state2",
			"__ZN25b2PolygonAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state3",
			"__ZN25b2PolygonAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state4",
			"__ZN25b2PolygonAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state5"))
	__asm(lbl("__ZN25b2PolygonAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state0"))
	__asm(lbl("__ZN25b2PolygonAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB414_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (148)
		mstate.esp -= 8
		i1 =  ((__xasm<int>(push((mstate.ebp+24)), op(0x37))))
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM__ZN16b2BlockAllocator8AllocateEi.start()
		return
	__asm(lbl("__ZN25b2PolygonAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state1"))
		i0 = mstate.eax
		mstate.esp += 8
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__ZN25b2PolygonAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB414_7_F"))
	__asm(lbl("__ZN25b2PolygonAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB414_1_F"))
		i3 =  (4)
		__asm(push(i3), push((i0+4)), op(0x3c))
		__asm(push(i1), push((i0+48)), op(0x3c))
		__asm(push(i2), push((i0+52)), op(0x3c))
		i3 =  (0)
		__asm(push(i3), push((i0+56)), op(0x3c))
		__asm(push(i3), push((i0+60)), op(0x3c))
		__asm(push(i3), push((i0+132)), op(0x3c))
		__asm(push(i3), push((i0+8)), op(0x3c))
		__asm(push(i3), push((i0+12)), op(0x3c))
		__asm(push(i3), push((i0+20)), op(0x3c))
		__asm(push(i3), push((i0+24)), op(0x3c))
		__asm(push(i3), push((i0+28)), op(0x3c))
		__asm(push(i3), push((i0+16)), op(0x3c))
		__asm(push(i3), push((i0+36)), op(0x3c))
		__asm(push(i3), push((i0+40)), op(0x3c))
		__asm(push(i3), push((i0+44)), op(0x3c))
		__asm(push(i3), push((i0+32)), op(0x3c))
		i4 =  (__ZTV25b2PolygonAndCircleContact)
		__asm(push(i3), push((i0+136)), op(0x3c))
		i3 =  (i4 + 8)
		__asm(push(i3), push(i0), op(0x3c))
		i1 =  ((__xasm<int>(push((i1+16)), op(0x37))))
		i1 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		__asm(push(i1==2), iftrue, target("__ZN25b2PolygonAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB414_4_F"))
	__asm(lbl("__ZN25b2PolygonAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB414_2_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i2 =  (__2E_str1670)
		i1 =  (__2E_str109)
		i3 =  (__ZZN25b2PolygonAndCircleContactC4EP9b2FixtureS1_E8__func__)
		i4 =  (__2E_str108)
		i5 =  (41)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i2), push((mstate.esp+4)), op(0x3c))
		__asm(push(i1), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__ZN25b2PolygonAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state2"))
		mstate.esp += 24
	__asm(lbl("__ZN25b2PolygonAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB414_3_F"))
		state = 3
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZN25b2PolygonAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state3"))
	__asm(lbl("__ZN25b2PolygonAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB414_4_F"))
		i1 =  ((__xasm<int>(push((i2+16)), op(0x37))))
		i1 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		__asm(push(i1==0), iftrue, target("__ZN25b2PolygonAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB414_7_F"))
	__asm(lbl("__ZN25b2PolygonAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB414_5_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str100)
		i3 =  (__ZZN25b2PolygonAndCircleContactC4EP9b2FixtureS1_E8__func__)
		i4 =  (__2E_str108)
		i5 =  (42)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 4
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__ZN25b2PolygonAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state4"))
		mstate.esp += 24
	__asm(lbl("__ZN25b2PolygonAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB414_6_F"))
		state = 5
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZN25b2PolygonAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state5"))
	__asm(lbl("__ZN25b2PolygonAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB414_7_F"))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN25b2PolygonAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_errState"))
		throw("Invalid state in __ZN25b2PolygonAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator")
	}
}



// Async
public const __ZN16b2PolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator:int = regFunc(FSM__ZN16b2PolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator.start)

public final class FSM__ZN16b2PolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator extends Machine {

	public static function start():void {
			var result:FSM__ZN16b2PolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator = new FSM__ZN16b2PolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int

	public static const intRegCount:int = 6

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN16b2PolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_entry"))
		__asm(push(state), switchjump(
			"__ZN16b2PolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_errState",
			"__ZN16b2PolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state0",
			"__ZN16b2PolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state1",
			"__ZN16b2PolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state2",
			"__ZN16b2PolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state3",
			"__ZN16b2PolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state4",
			"__ZN16b2PolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state5"))
	__asm(lbl("__ZN16b2PolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state0"))
	__asm(lbl("__ZN16b2PolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB415_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (148)
		mstate.esp -= 8
		i1 =  ((__xasm<int>(push((mstate.ebp+24)), op(0x37))))
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM__ZN16b2BlockAllocator8AllocateEi.start()
		return
	__asm(lbl("__ZN16b2PolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state1"))
		i0 = mstate.eax
		mstate.esp += 8
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__ZN16b2PolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB415_7_F"))
	__asm(lbl("__ZN16b2PolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB415_1_F"))
		i3 =  (4)
		__asm(push(i3), push((i0+4)), op(0x3c))
		__asm(push(i1), push((i0+48)), op(0x3c))
		__asm(push(i2), push((i0+52)), op(0x3c))
		i3 =  (0)
		__asm(push(i3), push((i0+56)), op(0x3c))
		__asm(push(i3), push((i0+60)), op(0x3c))
		__asm(push(i3), push((i0+132)), op(0x3c))
		__asm(push(i3), push((i0+8)), op(0x3c))
		__asm(push(i3), push((i0+12)), op(0x3c))
		__asm(push(i3), push((i0+20)), op(0x3c))
		__asm(push(i3), push((i0+24)), op(0x3c))
		__asm(push(i3), push((i0+28)), op(0x3c))
		__asm(push(i3), push((i0+16)), op(0x3c))
		__asm(push(i3), push((i0+36)), op(0x3c))
		__asm(push(i3), push((i0+40)), op(0x3c))
		__asm(push(i3), push((i0+44)), op(0x3c))
		__asm(push(i3), push((i0+32)), op(0x3c))
		i4 =  (__ZTV16b2PolygonContact)
		__asm(push(i3), push((i0+136)), op(0x3c))
		i3 =  (i4 + 8)
		__asm(push(i3), push(i0), op(0x3c))
		i1 =  ((__xasm<int>(push((i1+16)), op(0x37))))
		i1 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		__asm(push(i1==2), iftrue, target("__ZN16b2PolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB415_4_F"))
	__asm(lbl("__ZN16b2PolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB415_2_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i2 =  (__2E_str1670)
		i1 =  (__2E_str109)
		i3 =  (__ZZN16b2PolygonContactC4EP9b2FixtureS1_E8__func__)
		i4 =  (__2E_str110307)
		i5 =  (44)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i2), push((mstate.esp+4)), op(0x3c))
		__asm(push(i1), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__ZN16b2PolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state2"))
		mstate.esp += 24
	__asm(lbl("__ZN16b2PolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB415_3_F"))
		state = 3
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZN16b2PolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state3"))
	__asm(lbl("__ZN16b2PolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB415_4_F"))
		i1 =  ((__xasm<int>(push((i2+16)), op(0x37))))
		i1 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		__asm(push(i1==2), iftrue, target("__ZN16b2PolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB415_7_F"))
	__asm(lbl("__ZN16b2PolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB415_5_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str104)
		i3 =  (__ZZN16b2PolygonContactC4EP9b2FixtureS1_E8__func__)
		i4 =  (__2E_str110307)
		i5 =  (45)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 4
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__ZN16b2PolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state4"))
		mstate.esp += 24
	__asm(lbl("__ZN16b2PolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB415_6_F"))
		state = 5
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZN16b2PolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_state5"))
	__asm(lbl("__ZN16b2PolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator__XprivateX__BB415_7_F"))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN16b2PolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator_errState"))
		throw("Invalid state in __ZN16b2PolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator")
	}
}



// Async
public const __ZN13b2DynamicTree10RemoveLeafEi:int = regFunc(FSM__ZN13b2DynamicTree10RemoveLeafEi.start)

public final class FSM__ZN13b2DynamicTree10RemoveLeafEi extends Machine {

	public static function start():void {
			var result:FSM__ZN13b2DynamicTree10RemoveLeafEi = new FSM__ZN13b2DynamicTree10RemoveLeafEi
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int

	public static const intRegCount:int = 8
	public var f0:Number, f1:Number, f2:Number

	public static const NumberRegCount:int = 3
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN13b2DynamicTree10RemoveLeafEi_entry"))
		__asm(push(state), switchjump(
			"__ZN13b2DynamicTree10RemoveLeafEi_errState",
			"__ZN13b2DynamicTree10RemoveLeafEi_state0",
			"__ZN13b2DynamicTree10RemoveLeafEi_state1",
			"__ZN13b2DynamicTree10RemoveLeafEi_state2"))
	__asm(lbl("__ZN13b2DynamicTree10RemoveLeafEi_state0"))
	__asm(lbl("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push(i0), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i3 = i0
		__asm(push(i1!=i2), iftrue, target("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_2_F"))
	__asm(lbl("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_1_F"))
		i0 =  (-1)
		__asm(push(i0), push(i3), op(0x3c))
		__asm(jump, target("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_31_F"))
	__asm(lbl("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_2_F"))
		i1 =  ((__xasm<int>(push((i0+4)), op(0x37))))
		i4 =  (i2 * 36)
		i4 =  (i1 + i4)
		i4 =  ((__xasm<int>(push((i4+20)), op(0x37))))
		i5 =  (i4 * 36)
		i5 =  (i1 + i5)
		i6 =  ((__xasm<int>(push((i5+20)), op(0x37))))
		i5 =  ((__xasm<int>(push((i5+24)), op(0x37))))
		i7 =  (i0 + 4)
		__asm(push(i5!=i2), iftrue, target("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_5_F"))
	__asm(lbl("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_3_F"))
		i5 =  (i4 * 36)
		i5 =  (i1 + i5)
		i5 =  ((__xasm<int>(push((i5+28)), op(0x37))))
		__asm(push(i6==-1), iftrue, target("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_22_F"))
	__asm(lbl("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_4_F"))
		__asm(jump, target("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_7_F"))
	__asm(lbl("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_5_F"))
		__asm(push(i6==-1), iftrue, target("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_32_F"))
	__asm(lbl("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_6_F"))
		__asm(jump, target("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_7_F"))
	__asm(lbl("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_7_F"))
		i3 = i5
		i5 =  (i6 * 36)
		i5 =  (i1 + i5)
		i2 =  ((__xasm<int>(push((i5+24)), op(0x37))))
		i5 =  (i5 + 24)
		__asm(push(i2!=i4), iftrue, target("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_9_F"))
	__asm(lbl("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_8_F"))
		__asm(push(i3), push(i5), op(0x3c))
		__asm(jump, target("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_10_F"))
	__asm(lbl("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_9_F"))
		i5 =  (i6 * 36)
		i1 =  (i1 + i5)
		__asm(push(i3), push((i1+28)), op(0x3c))
	__asm(lbl("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_10_F"))
		i1 =  ((__xasm<int>(push(i7), op(0x37))))
		i3 =  (i3 * 36)
		i1 =  (i1 + i3)
		__asm(push(i6), push((i1+20)), op(0x3c))
		__asm(push(i4<0), iftrue, target("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_12_F"))
	__asm(lbl("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_11_F"))
		i1 =  ((__xasm<int>(push((i0+12)), op(0x37))))
		__asm(push(i1>i4), iftrue, target("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_14_F"))
	__asm(lbl("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_12_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i3 =  (__2E_str6213)
		i4 =  (__ZZN13b2DynamicTree8FreeNodeEiE8__func__)
		i5 =  (__2E_str5212)
		i6 =  (91)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i3), push((mstate.esp+8)), op(0x3c))
	__asm(jump, target("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_13_F"), lbl("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_13_B"), label, lbl("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_13_F")); 
		__asm(push(i4), push((mstate.esp+12)), op(0x3c))
		__asm(push(i5), push((mstate.esp+16)), op(0x3c))
		__asm(push(i6), push((mstate.esp+20)), op(0x3c))
		__asm(jump, target("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_27_F"))
	__asm(lbl("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_14_F"))
		i1 =  ((__xasm<int>(push((i0+8)), op(0x37))))
		i3 =  (i0 + 8)
		__asm(push(i1>0), iftrue, target("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_16_F"))
	__asm(lbl("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_15_F"))
		i3 =  (___sF)
		mstate.esp -= 24
		i0 =  (__2E_str1670)
		i1 =  (__2E_str7214)
		i4 =  (__ZZN13b2DynamicTree8FreeNodeEiE8__func__)
		i5 =  (__2E_str5212)
		i6 =  (92)
		i3 =  (i3 + 176)
		__asm(push(i3), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i1), push((mstate.esp+8)), op(0x3c))
		__asm(jump, target("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_13_B"))
	__asm(lbl("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_16_F"))
		i1 =  ((__xasm<int>(push(i7), op(0x37))))
		i5 =  ((__xasm<int>(push((i0+16)), op(0x37))))
		i2 =  (i4 * 36)
		i1 =  (i1 + i2)
		__asm(push(i5), push((i1+20)), op(0x3c))
		__asm(push(i4), push((i0+16)), op(0x3c))
		i0 =  ((__xasm<int>(push(i3), op(0x37))))
		i0 =  (i0 + -1)
		__asm(push(i0), push(i3), op(0x3c))
		__asm(push(i6==-1), iftrue, target("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_31_F"))
	__asm(lbl("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_17_F"))
		i0 = i6
	__asm(jump, target("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_18_F"), lbl("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_18_B"), label, lbl("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_18_F")); 
		i1 =  ((__xasm<int>(push(i7), op(0x37))))
		i3 =  (i0 * 36)
		i4 =  (i1 + i3)
		i5 =  ((__xasm<int>(push((i4+28)), op(0x37))))
		i2 =  ((__xasm<int>(push((i4+24)), op(0x37))))
		i2 =  (i2 * 36)
		i5 =  (i5 * 36)
		i2 =  (i1 + i2)
		i1 =  (i1 + i5)
		f0 =  ((__xasm<Number>(push(i1), op(0x38))))
		f1 =  ((__xasm<Number>(push(i2), op(0x38))))
		f0 =  ((f1<f0) ? f1 : f0)
		f1 =  ((__xasm<Number>(push((i1+4)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i2+4)), op(0x38))))
		f1 =  ((f2<f1) ? f2 : f1)
		f0 =  f0/*fround*/
		__asm(push(f0), push(i4), op(0x3d))
		f0 =  f1/*fround*/
		__asm(push(f0), push((i4+4)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i1+8)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i2+8)), op(0x38))))
		f0 =  ((f1>f0) ? f1 : f0)
		f1 =  ((__xasm<Number>(push((i1+12)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i2+12)), op(0x38))))
		f1 =  ((f2>f1) ? f2 : f1)
		f0 =  f0/*fround*/
		__asm(push(f0), push((i4+8)), op(0x3d))
		f0 =  f1/*fround*/
		__asm(push(f0), push((i4+12)), op(0x3d))
		i1 =  ((__xasm<int>(push(i7), op(0x37))))
		i1 =  (i1 + i3)
		i3 =  ((__xasm<int>(push((i1+32)), op(0x37))))
		i1 =  (i1 + 32)
		__asm(push(i3>0), iftrue, target("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_20_F"))
	__asm(lbl("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_19_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i3 =  (__2E_str111)
		i4 =  (__ZZN13b2DynamicTree10RemoveLeafEiE8__func__)
		i5 =  (__2E_str5212)
		i7 =  (332)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i3), push((mstate.esp+8)), op(0x3c))
		__asm(push(i4), push((mstate.esp+12)), op(0x3c))
		__asm(push(i5), push((mstate.esp+16)), op(0x3c))
		__asm(push(i7), push((mstate.esp+20)), op(0x3c))
		__asm(jump, target("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_27_F"))
	__asm(lbl("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_20_F"))
		i3 =  (i3 + -1)
		__asm(push(i3), push(i1), op(0x3c))
		i1 =  ((__xasm<int>(push(i7), op(0x37))))
		i0 =  (i0 * 36)
		i0 =  (i1 + i0)
		i0 =  ((__xasm<int>(push((i0+20)), op(0x37))))
		__asm(push(i0==-1), iftrue, target("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_31_F"))
	__asm(lbl("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_21_F"))
		__asm(jump, target("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_18_B"))
	__asm(lbl("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_22_F"))
		__asm(jump, target("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_23_F"))
	__asm(jump, target("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_23_F"), lbl("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_23_B"), label, lbl("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_23_F")); 
		i2 = i5
		i5 =  (-1)
		i6 =  (i2 * 36)
		__asm(push(i2), push(i3), op(0x3c))
		i1 =  (i1 + i6)
		__asm(push(i5), push((i1+20)), op(0x3c))
		__asm(push(i4<0), iftrue, target("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_25_F"))
	__asm(lbl("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_24_F"))
		i1 =  ((__xasm<int>(push((i0+12)), op(0x37))))
		__asm(push(i1>i4), iftrue, target("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_28_F"))
	__asm(lbl("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_25_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i4 =  (__2E_str1670)
		i7 =  (__2E_str6213)
		i1 =  (__ZZN13b2DynamicTree8FreeNodeEiE8__func__)
		i2 =  (__2E_str5212)
		i3 =  (91)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i4), push((mstate.esp+4)), op(0x3c))
		__asm(push(i7), push((mstate.esp+8)), op(0x3c))
		__asm(push(i1), push((mstate.esp+12)), op(0x3c))
		__asm(push(i2), push((mstate.esp+16)), op(0x3c))
	__asm(jump, target("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_26_F"), lbl("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_26_B"), label, lbl("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_26_F")); 
		__asm(push(i3), push((mstate.esp+20)), op(0x3c))
	__asm(lbl("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_27_F"))
		state = 1
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__ZN13b2DynamicTree10RemoveLeafEi_state1"))
		mstate.esp += 24
		state = 2
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZN13b2DynamicTree10RemoveLeafEi_state2"))
	__asm(lbl("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_28_F"))
		i1 =  ((__xasm<int>(push((i0+8)), op(0x37))))
		i2 =  (i0 + 8)
		__asm(push(i1>0), iftrue, target("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_30_F"))
	__asm(lbl("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_29_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i2 =  (__2E_str1670)
		i4 =  (__2E_str7214)
		i7 =  (__ZZN13b2DynamicTree8FreeNodeEiE8__func__)
		i1 =  (__2E_str5212)
		i3 =  (92)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i2), push((mstate.esp+4)), op(0x3c))
		__asm(push(i4), push((mstate.esp+8)), op(0x3c))
		__asm(push(i7), push((mstate.esp+12)), op(0x3c))
		__asm(push(i1), push((mstate.esp+16)), op(0x3c))
		__asm(jump, target("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_26_B"))
	__asm(lbl("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_30_F"))
		i1 =  ((__xasm<int>(push(i7), op(0x37))))
		i3 =  ((__xasm<int>(push((i0+16)), op(0x37))))
		i5 =  (i4 * 36)
		i1 =  (i1 + i5)
		__asm(push(i3), push((i1+20)), op(0x3c))
		__asm(push(i4), push((i0+16)), op(0x3c))
		i0 =  ((__xasm<int>(push(i2), op(0x37))))
		i0 =  (i0 + -1)
		__asm(push(i0), push(i2), op(0x3c))
	__asm(lbl("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_31_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_32_F"))
		__asm(jump, target("__ZN13b2DynamicTree10RemoveLeafEi__XprivateX__BB416_23_B"))
	__asm(lbl("__ZN13b2DynamicTree10RemoveLeafEi_errState"))
		throw("Invalid state in __ZN13b2DynamicTree10RemoveLeafEi")
	}
}



// Async
public const __ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4_:int = regFunc(FSM__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4_.start)

public final class FSM__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4_ extends Machine {

	public static function start():void {
			var result:FSM__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4_ = new FSM__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4_
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
	public var i8:int, i9:int, i10:int, i11:int, i12:int, i13:int, i14:int, i15:int
	public var i16:int, i17:int, i18:int, i19:int, i20:int, i21:int, i22:int, i23:int
	public var i24:int, i25:int, i26:int, i27:int, i28:int, i29:int, i30:int, i31:int
	public static const intRegCount:int = 32
	public var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number
	public var f8:Number, f9:Number

	public static const NumberRegCount:int = 10
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4__entry"))
		__asm(push(state), switchjump(
			"__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4__errState",
			"__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4__state0",
			"__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4__state1",
			"__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4__state2",
			"__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4__state3",
			"__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4__state4",
			"__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4__state5",
			"__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4__state6",
			"__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4__state7",
			"__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4__state8"))
	__asm(lbl("__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4__state0"))
	__asm(lbl("__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4___XprivateX__BB417_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 32
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i3 =  ((__xasm<int>(push((mstate.ebp+20)), op(0x37))))
		i4 =  ((__xasm<int>(push((i0+32)), op(0x37))))
		i5 =  (i0 + 32)
		__asm(push(i4<1), iftrue, target("__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4___XprivateX__BB417_17_F"))
	__asm(lbl("__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4___XprivateX__BB417_1_F"))
		i4 =  ((mstate.ebp+-16))
		i6 =  ((mstate.ebp+-32))
		i7 =  (i6 + 12)
		i8 =  (i4 + 12)
		i9 =  (0)
		i10 =  (i1 + 4)
		i11 =  (i1 + 12)
		i12 =  (i1 + 32)
		i13 =  (i1 + 36)
		i14 =  (i1 + 40)
		i15 =  (i2 + 4)
		i16 =  (i3 + 4)
		i17 =  (i4 + 8)
		i18 =  (i6 + 8)
		i19 =  (i4 + 4)
		i20 =  (i6 + 4)
		i21 =  (i0 + 16)
		i0 =  (i0 + 28)
		i22 = i2
		i23 = i3
		i24 = i9
	__asm(jump, target("__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4___XprivateX__BB417_2_F"), lbl("__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4___XprivateX__BB417_2_B"), label, lbl("__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4___XprivateX__BB417_2_F")); 
		i25 =  ((mstate.ebp+-16))
		i26 =  ((__xasm<int>(push(i21), op(0x37))))
		i27 =  ((__xasm<int>(push(i0), op(0x37))))
		i27 =  (i27 + i24)
		i28 =  ((__xasm<int>(push(i26), op(0x37))))
		i28 =  ((__xasm<int>(push((i28+24)), op(0x37))))
		i29 =  ((__xasm<int>(push((i27+20)), op(0x37))))
		mstate.esp -= 16
		__asm(push(i26), push(mstate.esp), op(0x3c))
		__asm(push(i25), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i29), push((mstate.esp+12)), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[i28])()
		return
	__asm(lbl("__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4__state1"))
		mstate.esp += 16
		i25 =  ((__xasm<int>(push(i21), op(0x37))))
		i26 =  ((__xasm<int>(push(i25), op(0x37))))
		i26 =  ((__xasm<int>(push((i26+24)), op(0x37))))
		i28 =  ((__xasm<int>(push((i27+20)), op(0x37))))
		mstate.esp -= 16
		i29 =  ((mstate.ebp+-32))
		__asm(push(i25), push(mstate.esp), op(0x3c))
		__asm(push(i29), push((mstate.esp+4)), op(0x3c))
		__asm(push(i3), push((mstate.esp+8)), op(0x3c))
		__asm(push(i28), push((mstate.esp+12)), op(0x3c))
		state = 2
		mstate.esp -= 4;(mstate.funcs[i26])()
		return
	__asm(lbl("__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4__state2"))
		mstate.esp += 16
		f0 =  ((__xasm<Number>(push(i6), op(0x38))))
		f1 =  ((__xasm<Number>(push(i4), op(0x38))))
		f0 =  ((f1<f0) ? f1 : f0)
		f1 =  ((__xasm<Number>(push(i20), op(0x38))))
		f2 =  ((__xasm<Number>(push(i19), op(0x38))))
		f1 =  ((f2<f1) ? f2 : f1)
		f0 =  f0/*fround*/
		__asm(push(f0), push(i27), op(0x3d))
		f1 =  f1/*fround*/
		__asm(push(f1), push((i27+4)), op(0x3d))
		f2 =  ((__xasm<Number>(push(i18), op(0x38))))
		f3 =  ((__xasm<Number>(push(i17), op(0x38))))
		f2 =  ((f3>f2) ? f3 : f2)
		f3 =  ((__xasm<Number>(push(i7), op(0x38))))
		f4 =  ((__xasm<Number>(push(i8), op(0x38))))
		f3 =  ((f4>f3) ? f4 : f3)
		f2 =  f2/*fround*/
		__asm(push(f2), push((i27+8)), op(0x3d))
		f3 =  f3/*fround*/
		__asm(push(f3), push((i27+12)), op(0x3d))
		f4 =  ((__xasm<Number>(push(i16), op(0x38))))
		f5 =  ((__xasm<Number>(push(i15), op(0x38))))
		f6 =  ((__xasm<Number>(push(i23), op(0x38))))
		f7 =  ((__xasm<Number>(push(i22), op(0x38))))
		i25 =  ((__xasm<int>(push((i27+24)), op(0x37))))
		f4 =  (f4 - f5)
		f5 =  (f6 - f7)
		f4 =  f4/*fround*/
		f5 =  f5/*fround*/
		i26 =  (i27 + 12)
		i28 =  (i27 + 8)
		i29 =  (i27 + 4)
		__asm(push(i25<0), iftrue, target("__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4___XprivateX__BB417_4_F"))
	__asm(lbl("__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4___XprivateX__BB417_3_F"))
		i30 =  ((__xasm<int>(push(i11), op(0x37))))
		__asm(push(i30>i25), iftrue, target("__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4___XprivateX__BB417_6_F"))
	__asm(lbl("__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4___XprivateX__BB417_4_F"))
		i9 =  (___sF)
		mstate.esp -= 24
		i24 =  (__2E_str1670)
		i0 =  (__2E_str3210)
		i1 =  (__ZZN13b2DynamicTree9MoveProxyEiRK6b2AABBRK6b2Vec2E8__func__)
		i2 =  (__2E_str5212)
		i3 =  (128)
	__asm(jump, target("__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4___XprivateX__BB417_5_F"), lbl("__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4___XprivateX__BB417_5_B"), label, lbl("__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4___XprivateX__BB417_5_F")); 
		i9 =  (i9 + 176)
		__asm(push(i9), push(mstate.esp), op(0x3c))
		__asm(push(i24), push((mstate.esp+4)), op(0x3c))
		__asm(push(i0), push((mstate.esp+8)), op(0x3c))
		__asm(push(i1), push((mstate.esp+12)), op(0x3c))
		__asm(push(i2), push((mstate.esp+16)), op(0x3c))
		__asm(push(i3), push((mstate.esp+20)), op(0x3c))
		state = 3
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4__state3"))
		mstate.esp += 24
		state = 4
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4__state4"))
	__asm(lbl("__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4___XprivateX__BB417_6_F"))
		i30 =  ((__xasm<int>(push(i10), op(0x37))))
		i31 =  (i25 * 36)
		i31 =  (i30 + i31)
		i31 =  ((__xasm<int>(push((i31+24)), op(0x37))))
		__asm(push(i31==-1), iftrue, target("__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4___XprivateX__BB417_8_F"))
	__asm(lbl("__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4___XprivateX__BB417_7_F"))
		i9 =  (___sF)
		mstate.esp -= 24
		i24 =  (__2E_str1670)
		i0 =  (__2E_str112)
		i1 =  (__ZZN13b2DynamicTree9MoveProxyEiRK6b2AABBRK6b2Vec2E8__func__)
		i2 =  (__2E_str5212)
		i3 =  (130)
		__asm(jump, target("__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4___XprivateX__BB417_5_B"))
	__asm(lbl("__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4___XprivateX__BB417_8_F"))
		i31 =  (i25 * 36)
		i31 =  (i30 + i31)
		f6 =  ((__xasm<Number>(push(i31), op(0x38))))
		f0 =  f0/*fextend*/
		__asm(push(f6>f0), iftrue, target("__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4___XprivateX__BB417_12_F"))
	__asm(lbl("__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4___XprivateX__BB417_9_F"))
		i31 =  (i25 * 36)
		i31 =  (i30 + i31)
		f0 =  ((__xasm<Number>(push((i31+4)), op(0x38))))
		f1 =  f1/*fextend*/
		__asm(push(f0>f1), iftrue, target("__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4___XprivateX__BB417_12_F"))
	__asm(lbl("__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4___XprivateX__BB417_10_F"))
		i31 =  (i25 * 36)
		i31 =  (i30 + i31)
		f0 =  ((__xasm<Number>(push((i31+8)), op(0x38))))
		f1 =  f2/*fextend*/
		__asm(push(f1>f0), iftrue, target("__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4___XprivateX__BB417_12_F"))
	__asm(lbl("__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4___XprivateX__BB417_11_F"))
		i31 =  (i25 * 36)
		i30 =  (i30 + i31)
		f0 =  ((__xasm<Number>(push((i30+12)), op(0x38))))
		f1 =  f3/*fextend*/
		__asm(push(f1<=f0), iftrue, target("__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4___XprivateX__BB417_15_F"))
	__asm(lbl("__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4___XprivateX__BB417_12_F"))
		f0 =  (0)
		mstate.esp -= 8
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i25), push((mstate.esp+4)), op(0x3c))
		state = 5
		mstate.esp -= 4;FSM__ZN13b2DynamicTree10RemoveLeafEi.start()
		return
	__asm(lbl("__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4__state5"))
		mstate.esp += 8
		f1 =  ((__xasm<Number>(push(i27), op(0x38))))
		f2 =  ((__xasm<Number>(push(_b2_aabbExtension), op(0x38))))
		f3 =  ((__xasm<Number>(push(_b2_aabbMultiplier), op(0x38))))
		f5 =  f5/*fextend*/
		f6 =  ((__xasm<Number>(push(i29), op(0x38))))
		f1 =  (f1 - f2)
		f4 =  f4/*fextend*/
		f5 =  (f5 * f3)
		f7 =  ((__xasm<Number>(push(i28), op(0x38))))
		f1 =  f1/*fround*/
		f6 =  (f6 - f2)
		f3 =  (f4 * f3)
		f4 =  f5/*fround*/
		f5 =  ((__xasm<Number>(push(i26), op(0x38))))
		f6 =  f6/*fround*/
		f7 =  (f7 + f2)
		f3 =  f3/*fround*/
		f1 =  f1/*fextend*/
		f4 =  f4/*fextend*/
		f8 =  (f1 + f4)
		f7 =  f7/*fround*/
		f2 =  (f5 + f2)
		f5 =  f6/*fextend*/
		f3 =  f3/*fextend*/
		f6 =  f8/*fround*/
		f8 =  (f5 + f3)
		f7 =  f7/*fextend*/
		f2 =  f2/*fround*/
		f0 =  f0/*fround*/
		f8 =  f8/*fround*/
		f9 =  (f7 + f4)
		f2 =  f2/*fextend*/
		f6 =  f6/*fextend*/
		f0 =  f0/*fextend*/
		i26 =  ((__xasm<int>(push(i10), op(0x37))))
		f1 =  ((f4<f0) ? f6 : f1)
		f6 =  f8/*fextend*/
		f8 =  f9/*fround*/
		f9 =  (f2 + f3)
		i27 =  (i25 * 36)
		f5 =  ((f3<f0) ? f6 : f5)
		f6 =  f8/*fextend*/
		f8 =  f9/*fround*/
		f1 =  f1/*fround*/
		i26 =  (i26 + i27)
		f4 =  ((f4<f0) ? f7 : f6)
		f6 =  f8/*fextend*/
		__asm(push(f1), push(i26), op(0x3d))
		f1 =  f5/*fround*/
		f0 =  ((f3<f0) ? f2 : f6)
		__asm(push(f1), push((i26+4)), op(0x3d))
		f1 =  f4/*fround*/
		__asm(push(f1), push((i26+8)), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push((i26+12)), op(0x3d))
		mstate.esp -= 8
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i25), push((mstate.esp+4)), op(0x3c))
		state = 6
		mstate.esp -= 4;FSM__ZN13b2DynamicTree10InsertLeafEi.start()
		return
	__asm(lbl("__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4__state6"))
		mstate.esp += 8
		i26 =  ((__xasm<int>(push(i14), op(0x37))))
		i27 =  ((__xasm<int>(push(i13), op(0x37))))
		__asm(push(i26!=i27), iftrue, target("__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4___XprivateX__BB417_14_F"))
	__asm(lbl("__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4___XprivateX__BB417_13_F"))
		i28 =  (0)
		i29 =  ((__xasm<int>(push(i12), op(0x37))))
		i30 =  (i27 << 1)
		__asm(push(i30), push(i13), op(0x3c))
		mstate.esp -= 8
		i27 =  (i27 << 3)
		__asm(push(i28), push(mstate.esp), op(0x3c))
		__asm(push(i27), push((mstate.esp+4)), op(0x3c))
		state = 7
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4__state7"))
		i27 = mstate.eax
		mstate.esp += 8
		__asm(push(i27), push(i12), op(0x3c))
		i26 =  (i26 << 2)
		memcpy(i27, i29, i26)
		mstate.esp -= 8
		__asm(push(i29), push(mstate.esp), op(0x3c))
		__asm(push(i28), push((mstate.esp+4)), op(0x3c))
		state = 8
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4__state8"))
		i26 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4___XprivateX__BB417_14_F"))
		i26 =  ((__xasm<int>(push(i14), op(0x37))))
		i27 =  ((__xasm<int>(push(i12), op(0x37))))
		i26 =  (i26 << 2)
		i26 =  (i27 + i26)
		__asm(push(i25), push(i26), op(0x3c))
		i25 =  ((__xasm<int>(push(i14), op(0x37))))
		i25 =  (i25 + 1)
		__asm(push(i25), push(i14), op(0x3c))
	__asm(lbl("__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4___XprivateX__BB417_15_F"))
		i25 =  ((__xasm<int>(push(i5), op(0x37))))
		i24 =  (i24 + 28)
		i9 =  (i9 + 1)
		__asm(push(i25<=i9), iftrue, target("__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4___XprivateX__BB417_17_F"))
	__asm(lbl("__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4___XprivateX__BB417_16_F"))
		__asm(jump, target("__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4___XprivateX__BB417_2_B"))
	__asm(lbl("__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4___XprivateX__BB417_17_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4__errState"))
		throw("Invalid state in __ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4_")
	}
}



// Async
public const __ZN13b2DynamicTree12DestroyProxyEi:int = regFunc(FSM__ZN13b2DynamicTree12DestroyProxyEi.start)

public final class FSM__ZN13b2DynamicTree12DestroyProxyEi extends Machine {

	public static function start():void {
			var result:FSM__ZN13b2DynamicTree12DestroyProxyEi = new FSM__ZN13b2DynamicTree12DestroyProxyEi
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int

	public static const intRegCount:int = 6

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN13b2DynamicTree12DestroyProxyEi_entry"))
		__asm(push(state), switchjump(
			"__ZN13b2DynamicTree12DestroyProxyEi_errState",
			"__ZN13b2DynamicTree12DestroyProxyEi_state0",
			"__ZN13b2DynamicTree12DestroyProxyEi_state1",
			"__ZN13b2DynamicTree12DestroyProxyEi_state2",
			"__ZN13b2DynamicTree12DestroyProxyEi_state3"))
	__asm(lbl("__ZN13b2DynamicTree12DestroyProxyEi_state0"))
	__asm(lbl("__ZN13b2DynamicTree12DestroyProxyEi__XprivateX__BB418_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		__asm(push(i1<0), iftrue, target("__ZN13b2DynamicTree12DestroyProxyEi__XprivateX__BB418_2_F"))
	__asm(lbl("__ZN13b2DynamicTree12DestroyProxyEi__XprivateX__BB418_1_F"))
		i2 =  ((__xasm<int>(push((i0+12)), op(0x37))))
		i3 =  (i0 + 12)
		__asm(push(i2>i1), iftrue, target("__ZN13b2DynamicTree12DestroyProxyEi__XprivateX__BB418_3_F"))
	__asm(lbl("__ZN13b2DynamicTree12DestroyProxyEi__XprivateX__BB418_2_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i3 =  (__2E_str3210)
		i2 =  (__ZZN13b2DynamicTree12DestroyProxyEiE8__func__)
		i4 =  (__2E_str5212)
		i5 =  (119)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i3), push((mstate.esp+8)), op(0x3c))
		__asm(push(i2), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(jump, target("__ZN13b2DynamicTree12DestroyProxyEi__XprivateX__BB418_6_F"))
	__asm(lbl("__ZN13b2DynamicTree12DestroyProxyEi__XprivateX__BB418_3_F"))
		i2 =  ((__xasm<int>(push((i0+4)), op(0x37))))
		i4 =  (i1 * 36)
		i2 =  (i2 + i4)
		i2 =  ((__xasm<int>(push((i2+24)), op(0x37))))
		i4 =  (i0 + 4)
		__asm(push(i2==-1), iftrue, target("__ZN13b2DynamicTree12DestroyProxyEi__XprivateX__BB418_7_F"))
	__asm(lbl("__ZN13b2DynamicTree12DestroyProxyEi__XprivateX__BB418_4_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i3 =  (__2E_str112)
		i4 =  (__ZZN13b2DynamicTree12DestroyProxyEiE8__func__)
		i2 =  (__2E_str5212)
		i5 =  (120)
	__asm(jump, target("__ZN13b2DynamicTree12DestroyProxyEi__XprivateX__BB418_5_F"), lbl("__ZN13b2DynamicTree12DestroyProxyEi__XprivateX__BB418_5_B"), label, lbl("__ZN13b2DynamicTree12DestroyProxyEi__XprivateX__BB418_5_F")); 
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i3), push((mstate.esp+8)), op(0x3c))
		__asm(push(i4), push((mstate.esp+12)), op(0x3c))
		__asm(push(i2), push((mstate.esp+16)), op(0x3c))
	__asm(jump, target("__ZN13b2DynamicTree12DestroyProxyEi__XprivateX__BB418_6_F"), lbl("__ZN13b2DynamicTree12DestroyProxyEi__XprivateX__BB418_6_B"), label, lbl("__ZN13b2DynamicTree12DestroyProxyEi__XprivateX__BB418_6_F")); 
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__ZN13b2DynamicTree12DestroyProxyEi_state1"))
		mstate.esp += 24
		state = 2
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZN13b2DynamicTree12DestroyProxyEi_state2"))
	__asm(lbl("__ZN13b2DynamicTree12DestroyProxyEi__XprivateX__BB418_7_F"))
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 3
		mstate.esp -= 4;FSM__ZN13b2DynamicTree10RemoveLeafEi.start()
		return
	__asm(lbl("__ZN13b2DynamicTree12DestroyProxyEi_state3"))
		mstate.esp += 8
		__asm(push(i1<0), iftrue, target("__ZN13b2DynamicTree12DestroyProxyEi__XprivateX__BB418_9_F"))
	__asm(lbl("__ZN13b2DynamicTree12DestroyProxyEi__XprivateX__BB418_8_F"))
		i2 =  ((__xasm<int>(push(i3), op(0x37))))
		__asm(push(i2>i1), iftrue, target("__ZN13b2DynamicTree12DestroyProxyEi__XprivateX__BB418_10_F"))
	__asm(lbl("__ZN13b2DynamicTree12DestroyProxyEi__XprivateX__BB418_9_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i4 =  (__2E_str6213)
		i2 =  (__ZZN13b2DynamicTree8FreeNodeEiE8__func__)
		i3 =  (__2E_str5212)
		i5 =  (91)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i4), push((mstate.esp+8)), op(0x3c))
		__asm(push(i2), push((mstate.esp+12)), op(0x3c))
		__asm(push(i3), push((mstate.esp+16)), op(0x3c))
		__asm(jump, target("__ZN13b2DynamicTree12DestroyProxyEi__XprivateX__BB418_6_B"))
	__asm(lbl("__ZN13b2DynamicTree12DestroyProxyEi__XprivateX__BB418_10_F"))
		i2 =  ((__xasm<int>(push((i0+8)), op(0x37))))
		i3 =  (i0 + 8)
		__asm(push(i2>0), iftrue, target("__ZN13b2DynamicTree12DestroyProxyEi__XprivateX__BB418_12_F"))
	__asm(lbl("__ZN13b2DynamicTree12DestroyProxyEi__XprivateX__BB418_11_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i3 =  (__2E_str7214)
		i4 =  (__ZZN13b2DynamicTree8FreeNodeEiE8__func__)
		i2 =  (__2E_str5212)
		i5 =  (92)
		__asm(jump, target("__ZN13b2DynamicTree12DestroyProxyEi__XprivateX__BB418_5_B"))
	__asm(lbl("__ZN13b2DynamicTree12DestroyProxyEi__XprivateX__BB418_12_F"))
		i2 =  ((__xasm<int>(push(i4), op(0x37))))
		i4 =  ((__xasm<int>(push((i0+16)), op(0x37))))
		i5 =  (i1 * 36)
		i2 =  (i2 + i5)
		__asm(push(i4), push((i2+20)), op(0x3c))
		__asm(push(i1), push((i0+16)), op(0x3c))
		i0 =  ((__xasm<int>(push(i3), op(0x37))))
		i0 =  (i0 + -1)
		__asm(push(i0), push(i3), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN13b2DynamicTree12DestroyProxyEi_errState"))
		throw("Invalid state in __ZN13b2DynamicTree12DestroyProxyEi")
	}
}



// Async
public const __ZN6b2Body19SynchronizeFixturesEv:int = regFunc(FSM__ZN6b2Body19SynchronizeFixturesEv.start)

public final class FSM__ZN6b2Body19SynchronizeFixturesEv extends Machine {

	public static function start():void {
			var result:FSM__ZN6b2Body19SynchronizeFixturesEv = new FSM__ZN6b2Body19SynchronizeFixturesEv
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int

	public static const intRegCount:int = 4
	public var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number

	public static const NumberRegCount:int = 6
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN6b2Body19SynchronizeFixturesEv_entry"))
		__asm(push(state), switchjump(
			"__ZN6b2Body19SynchronizeFixturesEv_errState",
			"__ZN6b2Body19SynchronizeFixturesEv_state0",
			"__ZN6b2Body19SynchronizeFixturesEv_state1"))
	__asm(lbl("__ZN6b2Body19SynchronizeFixturesEv_state0"))
	__asm(lbl("__ZN6b2Body19SynchronizeFixturesEv__XprivateX__BB419_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 32
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		f1 =  ((__xasm<Number>(push((i0+60)), op(0x38))))
		f0 = f1
		//InlineAsmStart
	f0 =  Math.cos(f0);

	//InlineAsmEnd
		f2 = f0
		f0 = f1
		//InlineAsmStart
	f0 =  Math.sin(f0);

	//InlineAsmEnd
		f1 =  f0/*fextend*/
		f3 =  -f1
		__asm(push(f2), push((mstate.ebp+-24)), op(0x3d))
		f3 =  f3/*fround*/
		__asm(push(f3), push((mstate.ebp+-16)), op(0x3d))
		__asm(push(f0), push((mstate.ebp+-20)), op(0x3d))
		__asm(push(f2), push((mstate.ebp+-12)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i0+36)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i0+40)), op(0x38))))
		f2 =  f2/*fextend*/
		f4 =  (f2 * f0)
		f5 =  (f3 * f1)
		f0 =  (f1 * f0)
		f1 =  f4/*fround*/
		f2 =  (f2 * f3)
		f3 =  f5/*fround*/
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f1 =  (f1 - f3)
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 + f2)
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		f2 =  ((__xasm<Number>(push((i0+44)), op(0x38))))
		f1 =  f1/*fextend*/
		f3 =  ((__xasm<Number>(push((i0+48)), op(0x38))))
		f0 =  f0/*fextend*/
		f1 =  (f2 - f1)
		f0 =  (f3 - f0)
		f1 =  f1/*fround*/
		__asm(push(f1), push((mstate.ebp+-32)), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push((mstate.ebp+-28)), op(0x3d))
		i1 =  ((__xasm<int>(push((i0+96)), op(0x37))))
		i2 =  ((__xasm<int>(push((i0+108)), op(0x37))))
		i1 =  (i1 + 102872)
		__asm(push(i2==0), iftrue, target("__ZN6b2Body19SynchronizeFixturesEv__XprivateX__BB419_4_F"))
	__asm(lbl("__ZN6b2Body19SynchronizeFixturesEv__XprivateX__BB419_1_F"))
		i0 =  (i0 + 12)
	__asm(jump, target("__ZN6b2Body19SynchronizeFixturesEv__XprivateX__BB419_2_F"), lbl("__ZN6b2Body19SynchronizeFixturesEv__XprivateX__BB419_2_B"), label, lbl("__ZN6b2Body19SynchronizeFixturesEv__XprivateX__BB419_2_F")); 
		i3 =  ((mstate.ebp+-32))
		mstate.esp -= 16
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i3), push((mstate.esp+8)), op(0x3c))
		__asm(push(i0), push((mstate.esp+12)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM__ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4_.start()
		return
	__asm(lbl("__ZN6b2Body19SynchronizeFixturesEv_state1"))
		mstate.esp += 16
		i2 =  ((__xasm<int>(push((i2+8)), op(0x37))))
		__asm(push(i2==0), iftrue, target("__ZN6b2Body19SynchronizeFixturesEv__XprivateX__BB419_4_F"))
	__asm(lbl("__ZN6b2Body19SynchronizeFixturesEv__XprivateX__BB419_3_F"))
		__asm(jump, target("__ZN6b2Body19SynchronizeFixturesEv__XprivateX__BB419_2_B"))
	__asm(lbl("__ZN6b2Body19SynchronizeFixturesEv__XprivateX__BB419_4_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN6b2Body19SynchronizeFixturesEv_errState"))
		throw("Invalid state in __ZN6b2Body19SynchronizeFixturesEv")
	}
}



// Async
public const __ZN15b2CircleContact7DestroyEP9b2ContactP16b2BlockAllocator:int = regFunc(FSM__ZN15b2CircleContact7DestroyEP9b2ContactP16b2BlockAllocator.start)

public final class FSM__ZN15b2CircleContact7DestroyEP9b2ContactP16b2BlockAllocator extends Machine {

	public static function start():void {
			var result:FSM__ZN15b2CircleContact7DestroyEP9b2ContactP16b2BlockAllocator = new FSM__ZN15b2CircleContact7DestroyEP9b2ContactP16b2BlockAllocator
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int

	public static const intRegCount:int = 6

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN15b2CircleContact7DestroyEP9b2ContactP16b2BlockAllocator_entry"))
		__asm(push(state), switchjump(
			"__ZN15b2CircleContact7DestroyEP9b2ContactP16b2BlockAllocator_errState",
			"__ZN15b2CircleContact7DestroyEP9b2ContactP16b2BlockAllocator_state0",
			"__ZN15b2CircleContact7DestroyEP9b2ContactP16b2BlockAllocator_state1",
			"__ZN15b2CircleContact7DestroyEP9b2ContactP16b2BlockAllocator_state2",
			"__ZN15b2CircleContact7DestroyEP9b2ContactP16b2BlockAllocator_state3"))
	__asm(lbl("__ZN15b2CircleContact7DestroyEP9b2ContactP16b2BlockAllocator_state0"))
	__asm(lbl("__ZN15b2CircleContact7DestroyEP9b2ContactP16b2BlockAllocator__XprivateX__BB420_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push(i0), op(0x37))))
		i1 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[i1])()
		return
	__asm(lbl("__ZN15b2CircleContact7DestroyEP9b2ContactP16b2BlockAllocator_state1"))
		mstate.esp += 4
		i1 =  ((__xasm<int>(push((__ZN16b2BlockAllocator17s_blockSizeLookupE+148)), op(0x35))))
		i2 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		__asm(push(uint(i1)<uint(14)), iftrue, target("__ZN15b2CircleContact7DestroyEP9b2ContactP16b2BlockAllocator__XprivateX__BB420_2_F"))
	__asm(lbl("__ZN15b2CircleContact7DestroyEP9b2ContactP16b2BlockAllocator__XprivateX__BB420_1_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str83290)
		i3 =  (__ZZN16b2BlockAllocator4FreeEPviE8__func__)
		i4 =  (__2E_str78285)
		i5 =  (173)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__ZN15b2CircleContact7DestroyEP9b2ContactP16b2BlockAllocator_state2"))
		mstate.esp += 24
		state = 3
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZN15b2CircleContact7DestroyEP9b2ContactP16b2BlockAllocator_state3"))
	__asm(lbl("__ZN15b2CircleContact7DestroyEP9b2ContactP16b2BlockAllocator__XprivateX__BB420_2_F"))
		i1 =  (i1 & 255)
		i1 =  (i1 << 2)
		i1 =  (i2 + i1)
		i2 =  ((__xasm<int>(push((i1+12)), op(0x37))))
		__asm(push(i2), push(i0), op(0x3c))
		__asm(push(i0), push((i1+12)), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN15b2CircleContact7DestroyEP9b2ContactP16b2BlockAllocator_errState"))
		throw("Invalid state in __ZN15b2CircleContact7DestroyEP9b2ContactP16b2BlockAllocator")
	}
}



// Async
public const __ZN25b2PolygonAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator:int = regFunc(FSM__ZN25b2PolygonAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator.start)

public final class FSM__ZN25b2PolygonAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator extends Machine {

	public static function start():void {
			var result:FSM__ZN25b2PolygonAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator = new FSM__ZN25b2PolygonAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int

	public static const intRegCount:int = 6

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN25b2PolygonAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator_entry"))
		__asm(push(state), switchjump(
			"__ZN25b2PolygonAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator_errState",
			"__ZN25b2PolygonAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator_state0",
			"__ZN25b2PolygonAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator_state1",
			"__ZN25b2PolygonAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator_state2",
			"__ZN25b2PolygonAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator_state3"))
	__asm(lbl("__ZN25b2PolygonAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator_state0"))
	__asm(lbl("__ZN25b2PolygonAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator__XprivateX__BB421_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push(i0), op(0x37))))
		i1 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[i1])()
		return
	__asm(lbl("__ZN25b2PolygonAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator_state1"))
		mstate.esp += 4
		i1 =  ((__xasm<int>(push((__ZN16b2BlockAllocator17s_blockSizeLookupE+148)), op(0x35))))
		i2 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		__asm(push(uint(i1)<uint(14)), iftrue, target("__ZN25b2PolygonAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator__XprivateX__BB421_2_F"))
	__asm(lbl("__ZN25b2PolygonAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator__XprivateX__BB421_1_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str83290)
		i3 =  (__ZZN16b2BlockAllocator4FreeEPviE8__func__)
		i4 =  (__2E_str78285)
		i5 =  (173)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__ZN25b2PolygonAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator_state2"))
		mstate.esp += 24
		state = 3
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZN25b2PolygonAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator_state3"))
	__asm(lbl("__ZN25b2PolygonAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator__XprivateX__BB421_2_F"))
		i1 =  (i1 & 255)
		i1 =  (i1 << 2)
		i1 =  (i2 + i1)
		i2 =  ((__xasm<int>(push((i1+12)), op(0x37))))
		__asm(push(i2), push(i0), op(0x3c))
		__asm(push(i0), push((i1+12)), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN25b2PolygonAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator_errState"))
		throw("Invalid state in __ZN25b2PolygonAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator")
	}
}



// Async
public const __ZN16b2PolygonContact7DestroyEP9b2ContactP16b2BlockAllocator:int = regFunc(FSM__ZN16b2PolygonContact7DestroyEP9b2ContactP16b2BlockAllocator.start)

public final class FSM__ZN16b2PolygonContact7DestroyEP9b2ContactP16b2BlockAllocator extends Machine {

	public static function start():void {
			var result:FSM__ZN16b2PolygonContact7DestroyEP9b2ContactP16b2BlockAllocator = new FSM__ZN16b2PolygonContact7DestroyEP9b2ContactP16b2BlockAllocator
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int

	public static const intRegCount:int = 6

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN16b2PolygonContact7DestroyEP9b2ContactP16b2BlockAllocator_entry"))
		__asm(push(state), switchjump(
			"__ZN16b2PolygonContact7DestroyEP9b2ContactP16b2BlockAllocator_errState",
			"__ZN16b2PolygonContact7DestroyEP9b2ContactP16b2BlockAllocator_state0",
			"__ZN16b2PolygonContact7DestroyEP9b2ContactP16b2BlockAllocator_state1",
			"__ZN16b2PolygonContact7DestroyEP9b2ContactP16b2BlockAllocator_state2",
			"__ZN16b2PolygonContact7DestroyEP9b2ContactP16b2BlockAllocator_state3"))
	__asm(lbl("__ZN16b2PolygonContact7DestroyEP9b2ContactP16b2BlockAllocator_state0"))
	__asm(lbl("__ZN16b2PolygonContact7DestroyEP9b2ContactP16b2BlockAllocator__XprivateX__BB422_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push(i0), op(0x37))))
		i1 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[i1])()
		return
	__asm(lbl("__ZN16b2PolygonContact7DestroyEP9b2ContactP16b2BlockAllocator_state1"))
		mstate.esp += 4
		i1 =  ((__xasm<int>(push((__ZN16b2BlockAllocator17s_blockSizeLookupE+148)), op(0x35))))
		i2 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		__asm(push(uint(i1)<uint(14)), iftrue, target("__ZN16b2PolygonContact7DestroyEP9b2ContactP16b2BlockAllocator__XprivateX__BB422_2_F"))
	__asm(lbl("__ZN16b2PolygonContact7DestroyEP9b2ContactP16b2BlockAllocator__XprivateX__BB422_1_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str83290)
		i3 =  (__ZZN16b2BlockAllocator4FreeEPviE8__func__)
		i4 =  (__2E_str78285)
		i5 =  (173)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__ZN16b2PolygonContact7DestroyEP9b2ContactP16b2BlockAllocator_state2"))
		mstate.esp += 24
		state = 3
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZN16b2PolygonContact7DestroyEP9b2ContactP16b2BlockAllocator_state3"))
	__asm(lbl("__ZN16b2PolygonContact7DestroyEP9b2ContactP16b2BlockAllocator__XprivateX__BB422_2_F"))
		i1 =  (i1 & 255)
		i1 =  (i1 << 2)
		i1 =  (i2 + i1)
		i2 =  ((__xasm<int>(push((i1+12)), op(0x37))))
		__asm(push(i2), push(i0), op(0x3c))
		__asm(push(i0), push((i1+12)), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN16b2PolygonContact7DestroyEP9b2ContactP16b2BlockAllocator_errState"))
		throw("Invalid state in __ZN16b2PolygonContact7DestroyEP9b2ContactP16b2BlockAllocator")
	}
}



// Async
public const __ZN22b2EdgeAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator:int = regFunc(FSM__ZN22b2EdgeAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator.start)

public final class FSM__ZN22b2EdgeAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator extends Machine {

	public static function start():void {
			var result:FSM__ZN22b2EdgeAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator = new FSM__ZN22b2EdgeAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int

	public static const intRegCount:int = 6

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN22b2EdgeAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator_entry"))
		__asm(push(state), switchjump(
			"__ZN22b2EdgeAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator_errState",
			"__ZN22b2EdgeAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator_state0",
			"__ZN22b2EdgeAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator_state1",
			"__ZN22b2EdgeAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator_state2",
			"__ZN22b2EdgeAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator_state3"))
	__asm(lbl("__ZN22b2EdgeAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator_state0"))
	__asm(lbl("__ZN22b2EdgeAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator__XprivateX__BB423_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push(i0), op(0x37))))
		i1 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[i1])()
		return
	__asm(lbl("__ZN22b2EdgeAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator_state1"))
		mstate.esp += 4
		i1 =  ((__xasm<int>(push((__ZN16b2BlockAllocator17s_blockSizeLookupE+148)), op(0x35))))
		i2 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		__asm(push(uint(i1)<uint(14)), iftrue, target("__ZN22b2EdgeAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator__XprivateX__BB423_2_F"))
	__asm(lbl("__ZN22b2EdgeAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator__XprivateX__BB423_1_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str83290)
		i3 =  (__ZZN16b2BlockAllocator4FreeEPviE8__func__)
		i4 =  (__2E_str78285)
		i5 =  (173)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__ZN22b2EdgeAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator_state2"))
		mstate.esp += 24
		state = 3
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZN22b2EdgeAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator_state3"))
	__asm(lbl("__ZN22b2EdgeAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator__XprivateX__BB423_2_F"))
		i1 =  (i1 & 255)
		i1 =  (i1 << 2)
		i1 =  (i2 + i1)
		i2 =  ((__xasm<int>(push((i1+12)), op(0x37))))
		__asm(push(i2), push(i0), op(0x3c))
		__asm(push(i0), push((i1+12)), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN22b2EdgeAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator_errState"))
		throw("Invalid state in __ZN22b2EdgeAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator")
	}
}



// Async
public const __ZN23b2EdgeAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator:int = regFunc(FSM__ZN23b2EdgeAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator.start)

public final class FSM__ZN23b2EdgeAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator extends Machine {

	public static function start():void {
			var result:FSM__ZN23b2EdgeAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator = new FSM__ZN23b2EdgeAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int

	public static const intRegCount:int = 6

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN23b2EdgeAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator_entry"))
		__asm(push(state), switchjump(
			"__ZN23b2EdgeAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator_errState",
			"__ZN23b2EdgeAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator_state0",
			"__ZN23b2EdgeAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator_state1",
			"__ZN23b2EdgeAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator_state2",
			"__ZN23b2EdgeAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator_state3"))
	__asm(lbl("__ZN23b2EdgeAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator_state0"))
	__asm(lbl("__ZN23b2EdgeAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator__XprivateX__BB424_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push(i0), op(0x37))))
		i1 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[i1])()
		return
	__asm(lbl("__ZN23b2EdgeAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator_state1"))
		mstate.esp += 4
		i1 =  ((__xasm<int>(push((__ZN16b2BlockAllocator17s_blockSizeLookupE+148)), op(0x35))))
		i2 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		__asm(push(uint(i1)<uint(14)), iftrue, target("__ZN23b2EdgeAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator__XprivateX__BB424_2_F"))
	__asm(lbl("__ZN23b2EdgeAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator__XprivateX__BB424_1_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str83290)
		i3 =  (__ZZN16b2BlockAllocator4FreeEPviE8__func__)
		i4 =  (__2E_str78285)
		i5 =  (173)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__ZN23b2EdgeAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator_state2"))
		mstate.esp += 24
		state = 3
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZN23b2EdgeAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator_state3"))
	__asm(lbl("__ZN23b2EdgeAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator__XprivateX__BB424_2_F"))
		i1 =  (i1 & 255)
		i1 =  (i1 << 2)
		i1 =  (i2 + i1)
		i2 =  ((__xasm<int>(push((i1+12)), op(0x37))))
		__asm(push(i2), push(i0), op(0x3c))
		__asm(push(i0), push((i1+12)), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN23b2EdgeAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator_errState"))
		throw("Invalid state in __ZN23b2EdgeAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator")
	}
}



// Async
public const __ZN22b2LoopAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator:int = regFunc(FSM__ZN22b2LoopAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator.start)

public final class FSM__ZN22b2LoopAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator extends Machine {

	public static function start():void {
			var result:FSM__ZN22b2LoopAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator = new FSM__ZN22b2LoopAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int

	public static const intRegCount:int = 6

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN22b2LoopAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator_entry"))
		__asm(push(state), switchjump(
			"__ZN22b2LoopAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator_errState",
			"__ZN22b2LoopAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator_state0",
			"__ZN22b2LoopAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator_state1",
			"__ZN22b2LoopAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator_state2",
			"__ZN22b2LoopAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator_state3"))
	__asm(lbl("__ZN22b2LoopAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator_state0"))
	__asm(lbl("__ZN22b2LoopAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator__XprivateX__BB425_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push(i0), op(0x37))))
		i1 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[i1])()
		return
	__asm(lbl("__ZN22b2LoopAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator_state1"))
		mstate.esp += 4
		i1 =  ((__xasm<int>(push((__ZN16b2BlockAllocator17s_blockSizeLookupE+148)), op(0x35))))
		i2 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		__asm(push(uint(i1)<uint(14)), iftrue, target("__ZN22b2LoopAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator__XprivateX__BB425_2_F"))
	__asm(lbl("__ZN22b2LoopAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator__XprivateX__BB425_1_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str83290)
		i3 =  (__ZZN16b2BlockAllocator4FreeEPviE8__func__)
		i4 =  (__2E_str78285)
		i5 =  (173)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__ZN22b2LoopAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator_state2"))
		mstate.esp += 24
		state = 3
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZN22b2LoopAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator_state3"))
	__asm(lbl("__ZN22b2LoopAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator__XprivateX__BB425_2_F"))
		i1 =  (i1 & 255)
		i1 =  (i1 << 2)
		i1 =  (i2 + i1)
		i2 =  ((__xasm<int>(push((i1+12)), op(0x37))))
		__asm(push(i2), push(i0), op(0x3c))
		__asm(push(i0), push((i1+12)), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN22b2LoopAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator_errState"))
		throw("Invalid state in __ZN22b2LoopAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator")
	}
}



// Async
public const __ZN23b2LoopAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator:int = regFunc(FSM__ZN23b2LoopAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator.start)

public final class FSM__ZN23b2LoopAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator extends Machine {

	public static function start():void {
			var result:FSM__ZN23b2LoopAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator = new FSM__ZN23b2LoopAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int

	public static const intRegCount:int = 6

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN23b2LoopAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator_entry"))
		__asm(push(state), switchjump(
			"__ZN23b2LoopAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator_errState",
			"__ZN23b2LoopAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator_state0",
			"__ZN23b2LoopAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator_state1",
			"__ZN23b2LoopAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator_state2",
			"__ZN23b2LoopAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator_state3"))
	__asm(lbl("__ZN23b2LoopAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator_state0"))
	__asm(lbl("__ZN23b2LoopAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator__XprivateX__BB426_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push(i0), op(0x37))))
		i1 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[i1])()
		return
	__asm(lbl("__ZN23b2LoopAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator_state1"))
		mstate.esp += 4
		i1 =  ((__xasm<int>(push((__ZN16b2BlockAllocator17s_blockSizeLookupE+148)), op(0x35))))
		i2 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		__asm(push(uint(i1)<uint(14)), iftrue, target("__ZN23b2LoopAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator__XprivateX__BB426_2_F"))
	__asm(lbl("__ZN23b2LoopAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator__XprivateX__BB426_1_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str83290)
		i3 =  (__ZZN16b2BlockAllocator4FreeEPviE8__func__)
		i4 =  (__2E_str78285)
		i5 =  (173)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__ZN23b2LoopAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator_state2"))
		mstate.esp += 24
		state = 3
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZN23b2LoopAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator_state3"))
	__asm(lbl("__ZN23b2LoopAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator__XprivateX__BB426_2_F"))
		i1 =  (i1 & 255)
		i1 =  (i1 << 2)
		i1 =  (i2 + i1)
		i2 =  ((__xasm<int>(push((i1+12)), op(0x37))))
		__asm(push(i2), push(i0), op(0x3c))
		__asm(push(i0), push((i1+12)), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN23b2LoopAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator_errState"))
		throw("Invalid state in __ZN23b2LoopAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator")
	}
}



// Async
public const __ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT_:int = regFunc(FSM__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT_.start)

public final class FSM__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT_ extends Machine {

	public static function start():void {
			var result:FSM__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT_ = new FSM__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT_
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
	public var i8:int, i9:int, i10:int, i11:int, i12:int, i13:int, i14:int, i15:int
	public var i16:int, i17:int, i18:int, i19:int, i20:int, i21:int, i22:int, i23:int
	public var i24:int, i25:int, i26:int, i27:int, i28:int
	public static const intRegCount:int = 29
	public var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number

	public static const NumberRegCount:int = 5
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT__entry"))
		__asm(push(state), switchjump(
			"__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT__errState",
			"__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT__state0",
			"__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT__state1",
			"__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT__state2",
			"__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT__state3",
			"__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT__state4",
			"__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT__state5",
			"__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT__state6",
			"__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT__state7",
			"__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT__state8",
			"__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT__state9",
			"__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT__state10",
			"__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT__state11",
			"__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT__state12",
			"__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT__state13",
			"__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT__state14",
			"__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT__state15",
			"__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT__state16",
			"__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT__state17",
			"__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT__state18",
			"__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT__state19"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT__state0"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 1040
		i0 =  (0)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		__asm(push(i0), push((i1+52)), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((__xasm<int>(push((i1+40)), op(0x37))))
		i3 =  (i1 + 40)
		i4 =  (i1 + 52)
		__asm(push(i2<1), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_36_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_1_F"))
		i2 =  ((mstate.ebp+-1040))
		i5 =  (0)
		i6 =  (i1 + 44)
		i7 =  (i1 + 48)
		i8 =  (i2 + 1032)
		i9 =  (i2 + 1028)
		i10 =  (i2 + 4)
		i11 =  (i1 + 4)
		i12 =  (i1 + 12)
		i13 =  (i1 + 56)
		i14 =  (i1 + 32)
		i15 = i1
		i16 = i5
	__asm(jump, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_2_F"), lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_2_B"), label, lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_2_F")); 
		i17 =  ((__xasm<int>(push(i14), op(0x37))))
		i17 =  (i17 + i16)
		i17 =  ((__xasm<int>(push(i17), op(0x37))))
		__asm(push(i17), push(i13), op(0x3c))
		__asm(push(i17==-1), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_34_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_3_F"))
		__asm(push(i17<0), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_5_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_4_F"))
		i18 =  ((__xasm<int>(push(i12), op(0x37))))
		__asm(push(i18>i17), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_6_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_5_F"))
		i5 =  (___sF)
		mstate.esp -= 24
		i16 =  (__2E_str1670)
		i0 =  (__2E_str3210)
		i1 =  (__ZZNK13b2DynamicTree10GetFatAABBEiE8__func__)
		i2 =  (__2E_str2209)
		i3 =  (147)
		i5 =  (i5 + 176)
		__asm(push(i5), push(mstate.esp), op(0x3c))
		__asm(push(i16), push((mstate.esp+4)), op(0x3c))
		__asm(push(i0), push((mstate.esp+8)), op(0x3c))
		__asm(push(i1), push((mstate.esp+12)), op(0x3c))
		__asm(push(i2), push((mstate.esp+16)), op(0x3c))
		__asm(push(i3), push((mstate.esp+20)), op(0x3c))
		__asm(jump, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_94_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_6_F"))
		i18 =  (256)
		i19 =  ((__xasm<int>(push(i11), op(0x37))))
		__asm(push(i10), push(i2), op(0x3c))
		__asm(push(i18), push(i8), op(0x3c))
		i18 =  ((__xasm<int>(push(i15), op(0x37))))
		i17 =  (i17 * 36)
		i17 =  (i19 + i17)
		__asm(push(i18), push(i10), op(0x3c))
		i18 =  (1)
		__asm(push(i18), push(i9), op(0x3c))
		i19 =  (i17 + 12)
		i20 =  (i17 + 4)
		i21 =  (i17 + 8)
		i22 = i18
		__asm(jump, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_31_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_7_B"), label)
		i5 =  (___sF)
		mstate.esp -= 24
		i16 =  (__2E_str1670)
		i0 =  (__2E_str38245)
		i1 =  (__ZZN15b2GrowableStackIiLi256EE3PopEvE8__func__)
		i2 =  (__2E_str37244)
		i3 =  (67)
		i5 =  (i5 + 176)
		__asm(push(i5), push(mstate.esp), op(0x3c))
		__asm(push(i16), push((mstate.esp+4)), op(0x3c))
		__asm(push(i0), push((mstate.esp+8)), op(0x3c))
		__asm(push(i1), push((mstate.esp+12)), op(0x3c))
		__asm(push(i2), push((mstate.esp+16)), op(0x3c))
		__asm(push(i3), push((mstate.esp+20)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT__state1"))
		mstate.esp += 24
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_8_F"))
		state = 2
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT__state2"))
	__asm(jump, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_9_F"), lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_9_B"), label, lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_9_F")); 
		i22 =  (i22 + -1)
		__asm(push(i22), push(i9), op(0x3c))
		i18 =  ((__xasm<int>(push(i2), op(0x37))))
		i23 =  (i22 << 2)
		i23 =  (i18 + i23)
		i23 =  ((__xasm<int>(push(i23), op(0x37))))
		__asm(push(i23!=-1), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_11_F"))
	__asm(jump, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_10_F"), lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_10_B"), label, lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_10_F")); 
		i18 = i22
		__asm(jump, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_29_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_11_F"))
		f0 =  (0)
		i24 =  ((__xasm<int>(push(i11), op(0x37))))
		i25 =  (i23 * 36)
		i25 =  (i24 + i25)
		f1 =  ((__xasm<Number>(push((i25+4)), op(0x38))))
		f2 =  ((__xasm<Number>(push(i19), op(0x38))))
		f3 =  ((__xasm<Number>(push(i25), op(0x38))))
		f4 =  ((__xasm<Number>(push(i21), op(0x38))))
		f1 =  (f1 - f2)
		f2 =  (f3 - f4)
		f3 =  ((__xasm<Number>(push(i17), op(0x38))))
		f4 =  ((__xasm<Number>(push((i25+8)), op(0x38))))
		f3 =  (f3 - f4)
		f1 =  f1/*fround*/
		f2 =  f2/*fround*/
		f3 =  f3/*fround*/
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f3 =  f3/*fextend*/
		__asm(push(f3>f0), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_10_B"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_12_F"))
		f0 =  (0)
		i25 =  (i23 * 36)
		i25 =  (i24 + i25)
		f3 =  ((__xasm<Number>(push(i20), op(0x38))))
		f4 =  ((__xasm<Number>(push((i25+12)), op(0x38))))
		f3 =  (f3 - f4)
		f3 =  f3/*fround*/
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f3 =  f3/*fextend*/
		__asm(push(f3>f0), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_10_B"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_13_F"))
		f0 =  (0)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f2 =  f2/*fextend*/
		__asm(push(f2>f0), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_10_B"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_14_F"))
		f0 =  (0)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		__asm(push(f1>f0), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_10_B"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_15_F"))
		i25 =  (i23 * 36)
		i25 =  (i24 + i25)
		i26 =  ((__xasm<int>(push((i25+24)), op(0x37))))
		i25 =  (i25 + 24)
		__asm(push(i26!=-1), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_22_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_16_F"))
		i22 =  ((__xasm<int>(push(i13), op(0x37))))
		__asm(push(i22==i23), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_20_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_17_F"))
		i22 =  ((__xasm<int>(push(i4), op(0x37))))
		i18 =  ((__xasm<int>(push(i7), op(0x37))))
		__asm(push(i22!=i18), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_19_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_18_F"))
		i24 =  (0)
		i25 =  ((__xasm<int>(push(i6), op(0x37))))
		i26 =  (i18 << 1)
		__asm(push(i26), push(i7), op(0x3c))
		mstate.esp -= 8
		i18 =  (i18 * 24)
		__asm(push(i24), push(mstate.esp), op(0x3c))
		__asm(push(i18), push((mstate.esp+4)), op(0x3c))
		state = 3
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT__state3"))
		i18 = mstate.eax
		mstate.esp += 8
		__asm(push(i18), push(i6), op(0x3c))
		i22 =  (i22 * 12)
		memcpy(i18, i25, i22)
		mstate.esp -= 8
		__asm(push(i25), push(mstate.esp), op(0x3c))
		__asm(push(i24), push((mstate.esp+4)), op(0x3c))
		state = 4
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT__state4"))
		i22 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_19_F"))
		i22 =  ((__xasm<int>(push(i4), op(0x37))))
		i18 =  ((__xasm<int>(push(i6), op(0x37))))
		i24 =  ((__xasm<int>(push(i13), op(0x37))))
		i22 =  (i22 * 12)
		i24 =  ((i24>i23) ? i23 : i24)
		i22 =  (i18 + i22)
		__asm(push(i24), push(i22), op(0x3c))
		i22 =  ((__xasm<int>(push(i4), op(0x37))))
		i18 =  ((__xasm<int>(push(i13), op(0x37))))
		i24 =  ((__xasm<int>(push(i6), op(0x37))))
		i22 =  (i22 * 12)
		i18 =  ((i18<i23) ? i23 : i18)
		i22 =  (i24 + i22)
		__asm(push(i18), push((i22+4)), op(0x3c))
		i22 =  ((__xasm<int>(push(i4), op(0x37))))
		i22 =  (i22 + 1)
		__asm(push(i22), push(i4), op(0x3c))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_20_F"))
		i18 =  ((__xasm<int>(push(i9), op(0x37))))
		__asm(push(i18<1), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_32_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_21_F"))
		i22 = i18
		__asm(jump, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_31_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_22_F"))
		i26 =  ((__xasm<int>(push(i8), op(0x37))))
		__asm(push(i22!=i26), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_25_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_23_F"))
		i27 =  (0)
		i28 =  (i26 << 1)
		__asm(push(i28), push(i8), op(0x3c))
		mstate.esp -= 8
		i26 =  (i26 << 3)
		__asm(push(i27), push(mstate.esp), op(0x3c))
		__asm(push(i26), push((mstate.esp+4)), op(0x3c))
		state = 5
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT__state5"))
		i26 = mstate.eax
		mstate.esp += 8
		__asm(push(i26), push(i2), op(0x3c))
		i27 = i18
		i22 =  (i22 << 2)
		memcpy(i26, i27, i22)
		i22 = i18
		__asm(push(i10==i18), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_25_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_24_F"))
		i18 =  (0)
		mstate.esp -= 8
		__asm(push(i22), push(mstate.esp), op(0x3c))
		__asm(push(i18), push((mstate.esp+4)), op(0x3c))
		state = 6
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT__state6"))
		i22 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_25_F"))
		i22 =  ((__xasm<int>(push(i9), op(0x37))))
		i18 =  ((__xasm<int>(push(i2), op(0x37))))
		i25 =  ((__xasm<int>(push(i25), op(0x37))))
		i22 =  (i22 << 2)
		i22 =  (i18 + i22)
		__asm(push(i25), push(i22), op(0x3c))
		i22 =  ((__xasm<int>(push(i9), op(0x37))))
		i22 =  (i22 + 1)
		i18 =  (i23 * 36)
		i18 =  (i24 + i18)
		__asm(push(i22), push(i9), op(0x3c))
		i23 =  ((__xasm<int>(push(i8), op(0x37))))
		i18 =  (i18 + 28)
		__asm(push(i22!=i23), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_28_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_26_F"))
		i24 =  (0)
		i25 =  ((__xasm<int>(push(i2), op(0x37))))
		i26 =  (i23 << 1)
		__asm(push(i26), push(i8), op(0x3c))
		mstate.esp -= 8
		i23 =  (i23 << 3)
		__asm(push(i24), push(mstate.esp), op(0x3c))
		__asm(push(i23), push((mstate.esp+4)), op(0x3c))
		state = 7
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT__state7"))
		i23 = mstate.eax
		mstate.esp += 8
		__asm(push(i23), push(i2), op(0x3c))
		i24 = i25
		i22 =  (i22 << 2)
		memcpy(i23, i24, i22)
		__asm(push(i10==i25), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_28_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_27_F"))
		i22 =  (0)
		mstate.esp -= 8
		__asm(push(i25), push(mstate.esp), op(0x3c))
		__asm(push(i22), push((mstate.esp+4)), op(0x3c))
		state = 8
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT__state8"))
		i22 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_28_F"))
		i22 =  ((__xasm<int>(push(i9), op(0x37))))
		i23 =  ((__xasm<int>(push(i2), op(0x37))))
		i18 =  ((__xasm<int>(push(i18), op(0x37))))
		i22 =  (i22 << 2)
		i22 =  (i23 + i22)
		__asm(push(i18), push(i22), op(0x3c))
		i22 =  ((__xasm<int>(push(i9), op(0x37))))
		i22 =  (i22 + 1)
		__asm(push(i22), push(i9), op(0x3c))
		i18 = i22
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_29_F"))
		i23 = i22
		__asm(push(i23<1), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_32_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_30_F"))
		i22 = i18
		i18 = i23
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_31_F"))
		__asm(push(i18<1), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_7_B"))
		__asm(jump, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_9_B"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_32_F"))
		i17 =  ((__xasm<int>(push(i2), op(0x37))))
		__asm(push(i17==i10), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_34_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_33_F"))
		i18 =  (0)
		mstate.esp -= 8
		__asm(push(i17), push(mstate.esp), op(0x3c))
		__asm(push(i18), push((mstate.esp+4)), op(0x3c))
		state = 9
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT__state9"))
		i17 = mstate.eax
		mstate.esp += 8
		__asm(push(i18), push(i2), op(0x3c))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_34_F"))
		i17 =  ((__xasm<int>(push(i3), op(0x37))))
		i16 =  (i16 + 4)
		i5 =  (i5 + 1)
		__asm(push(i17<=i5), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_36_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_35_F"))
		__asm(jump, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_2_B"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_36_F"))
		i2 =  (0)
		__asm(push(i2), push(i3), op(0x3c))
		i2 =  ((__xasm<int>(push(i4), op(0x37))))
		i3 =  ((__xasm<int>(push((i1+44)), op(0x37))))
		i5 =  (i2 * 12)
		i5 =  (i3 + i5)
		i6 =  (i1 + 44)
		i7 = i3
		__asm(push(i2!=0), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_38_F"))
	__asm(jump, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_37_F"), lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_37_B"), label, lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_37_F")); 
		i2 =  (0)
		__asm(jump, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_115_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_38_F"))
		i8 =  (i5 - i3)
		i9 =  (i8 / 12)
		i10 =  (i8 + -12)
		__asm(push(uint(i10)<uint(12)), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_127_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_39_F"))
		i10 =  (-1)
		__asm(jump, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_40_F"))
	__asm(jump, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_40_F"), lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_40_B"), label, lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_40_F")); 
		i10 =  (i10 + 1)
		i9 =  (i9 >> 1)
		__asm(push(i9==1), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_42_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_41_F"))
		__asm(jump, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_40_B"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_42_F"))
		i9 =  (i10 << 1)
		i9 =  (i9 + 2)
	__asm(jump, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_43_F"), lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_43_B"), label, lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_43_F")); 
		mstate.esp -= 12
		__asm(push(i7), push(mstate.esp), op(0x3c))
		__asm(push(i5), push((mstate.esp+4)), op(0x3c))
		__asm(push(i9), push((mstate.esp+8)), op(0x3c))
		mstate.esp -= 4;FSM__ZSt16__introsort_loopIP6b2PairiPFbRKS0_S3_EEvT_S6_T0_T1_.start()
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT__state10"))
		mstate.esp += 12
		__asm(push(i8<204), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_57_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_44_F"))
		mstate.esp -= 8
		i5 =  (i7 + 192)
		__asm(push(i7), push(mstate.esp), op(0x3c))
		__asm(push(i5), push((mstate.esp+4)), op(0x3c))
		mstate.esp -= 4;FSM__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0_.start()
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT__state11"))
		mstate.esp += 8
		__asm(push(i2==16), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_37_B"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_45_F"))
		i5 =  (16)
	__asm(jump, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_46_F"), lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_46_B"), label, lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_46_F")); 
		i8 =  (0)
		i9 =  ((__xasm<int>(push((i3+192)), op(0x37))))
		i10 =  ((__xasm<int>(push((i3+196)), op(0x37))))
		i11 =  ((__xasm<int>(push((i3+200)), op(0x37))))
		i12 =  (i3 + 192)
		i13 = i3
		__asm(jump, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_49_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_47_B"), label)
		i16 = i13
	__asm(jump, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_48_F"), lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_48_B"), label, lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_48_F")); 
		__asm(push(i8), push(i16), op(0x3c))
		i8 =  ((__xasm<int>(push((i15+184)), op(0x37))))
		__asm(push(i8), push((i13+4)), op(0x3c))
		i8 =  ((__xasm<int>(push((i15+188)), op(0x37))))
		__asm(push(i8), push((i13+8)), op(0x3c))
		i8 =  (i15 + -12)
		i14 =  (i14 + 1)
		i13 = i8
		i8 = i14
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_49_F"))
		i15 = i13
		i14 = i8
		i13 = i12
		i8 =  (i14 ^ -1)
		i8 =  (i5 + i8)
		i12 =  (i8 * 12)
		i8 =  ((__xasm<int>(push((i15+180)), op(0x37))))
		i12 =  (i7 + i12)
		__asm(push(i9<i8), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_47_B"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_50_F"))
		__asm(push(i9!=i8), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_54_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_51_F"))
		i16 =  ((__xasm<int>(push((i15+184)), op(0x37))))
		i17 = i13
		__asm(push(i10<i16), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_53_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_52_F"))
		i8 = i17
		__asm(jump, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_55_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_53_F"))
		i16 = i17
		__asm(jump, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_48_B"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_54_F"))
		i8 = i13
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_55_F"))
		__asm(push(i9), push(i8), op(0x3c))
		__asm(push(i10), push((i13+4)), op(0x3c))
		__asm(push(i11), push((i13+8)), op(0x3c))
		i3 =  (i3 + 12)
		i5 =  (i5 + 1)
		__asm(push(i5==i2), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_37_B"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_56_F"))
		__asm(jump, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_46_B"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_57_F"))
		mstate.esp -= 8
		__asm(push(i7), push(mstate.esp), op(0x3c))
		__asm(push(i5), push((mstate.esp+4)), op(0x3c))
		mstate.esp -= 4;FSM__ZSt16__insertion_sortIP6b2PairPFbRKS0_S3_EEvT_S6_T0_.start()
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT__state12"))
		mstate.esp += 8
		i2 =  ((__xasm<int>(push(i4), op(0x37))))
		__asm(push(i2<1), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_117_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_58_F"))
		i2 =  (0)
	__asm(jump, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_59_F"), lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_59_B"), label, lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_59_F")); 
		i3 =  ((__xasm<int>(push(i6), op(0x37))))
		i5 =  (i2 * 12)
		i5 =  (i3 + i5)
		i7 =  ((__xasm<int>(push(i5), op(0x37))))
		__asm(push(i7<0), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_61_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_60_F"))
		i8 =  ((__xasm<int>(push((i1+12)), op(0x37))))
		i9 =  (i1 + 12)
		__asm(push(i8>i7), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_62_F"))
	__asm(jump, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_61_F"), lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_61_B"), label, lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_61_F")); 
		i2 =  (___sF)
		mstate.esp -= 24
		i0 =  (__2E_str1670)
		i1 =  (__2E_str3210)
		i3 =  (__ZZNK13b2DynamicTree11GetUserDataEiE8__func__)
		i4 =  (__2E_str2209)
		i5 =  (141)
		__asm(jump, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_93_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_62_F"))
		i8 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		i7 =  (i7 * 36)
		i10 =  (i2 * 12)
		i3 =  (i3 + i10)
		i7 =  (i8 + i7)
		i7 =  ((__xasm<int>(push((i7+16)), op(0x37))))
		i8 =  ((__xasm<int>(push((i3+4)), op(0x37))))
		i3 =  (i3 + 4)
		i10 =  (i1 + 4)
		__asm(push(i8<0), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_64_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_63_F"))
		i9 =  ((__xasm<int>(push(i9), op(0x37))))
		__asm(push(i9>i8), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_65_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_64_F"))
		__asm(jump, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_61_B"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_65_F"))
		i9 =  ((__xasm<int>(push(i10), op(0x37))))
		i8 =  (i8 * 36)
		i8 =  (i9 + i8)
		i8 =  ((__xasm<int>(push((i8+16)), op(0x37))))
		i9 =  ((__xasm<int>(push((i7+16)), op(0x37))))
		i10 =  ((__xasm<int>(push((i8+16)), op(0x37))))
		i7 =  ((__xasm<int>(push((i7+20)), op(0x37))))
		i8 =  ((__xasm<int>(push((i8+20)), op(0x37))))
		i11 =  ((__xasm<int>(push((i9+12)), op(0x37))))
		i12 =  ((__xasm<int>(push((i10+12)), op(0x37))))
		__asm(push(i11==i12), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_107_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_66_F"))
		i13 =  ((__xasm<int>(push((i12+120)), op(0x37))))
		__asm(push(i13==0), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_78_F"))
	__asm(jump, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_67_F"), lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_67_B"), label, lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_67_F")); 
		i14 =  ((__xasm<int>(push(i13), op(0x37))))
		__asm(push(i14!=i11), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_76_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_68_F"))
		i14 =  ((__xasm<int>(push((i13+4)), op(0x37))))
		i15 =  ((__xasm<int>(push((i14+48)), op(0x37))))
		i16 =  ((__xasm<int>(push((i14+52)), op(0x37))))
		i17 =  ((__xasm<int>(push((i14+56)), op(0x37))))
		i14 =  ((__xasm<int>(push((i14+60)), op(0x37))))
		__asm(push(i16!=i10), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_72_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_69_F"))
		__asm(push(i15!=i9), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_72_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_70_F"))
		__asm(push(i14!=i8), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_72_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_71_F"))
		__asm(push(i17==i7), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_107_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_72_F"))
		__asm(push(i16!=i9), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_76_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_73_F"))
		__asm(push(i15!=i10), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_76_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_74_F"))
		__asm(push(i14!=i7), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_76_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_75_F"))
		__asm(push(i17==i8), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_107_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_76_F"))
		i13 =  ((__xasm<int>(push((i13+12)), op(0x37))))
		__asm(push(i13==0), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_78_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_77_F"))
		__asm(jump, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_67_B"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_78_F"))
		i13 =  ((__xasm<int>(push(i12), op(0x37))))
		__asm(push(i13==2), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_80_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_79_F"))
		i13 =  ((__xasm<int>(push(i11), op(0x37))))
		__asm(push(i13!=2), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_107_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_80_F"))
		i12 =  ((__xasm<int>(push((i12+116)), op(0x37))))
		__asm(push(i12==0), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_85_F"))
	__asm(jump, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_81_F"), lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_81_B"), label, lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_81_F")); 
		i13 =  ((__xasm<int>(push(i12), op(0x37))))
		__asm(push(i13!=i11), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_83_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_82_F"))
		i13 =  ((__xasm<int>(push((i12+4)), op(0x37))))
		i13 =  ((__xasm<int>(push((i13+57)), op(0x35))))
		__asm(push(i13==0), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_107_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_83_F"))
		i12 =  ((__xasm<int>(push((i12+12)), op(0x37))))
		__asm(push(i12==0), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_85_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_84_F"))
		__asm(jump, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_81_B"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_85_F"))
		i11 =  ((__xasm<int>(push((i0+68)), op(0x37))))
		__asm(push(i11==0), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_87_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_86_F"))
		i12 =  ((__xasm<int>(push(i11), op(0x37))))
		i12 =  ((__xasm<int>(push((i12+8)), op(0x37))))
		mstate.esp -= 12
		__asm(push(i11), push(mstate.esp), op(0x3c))
		__asm(push(i9), push((mstate.esp+4)), op(0x3c))
		__asm(push(i10), push((mstate.esp+8)), op(0x3c))
		state = 13
		mstate.esp -= 4;(mstate.funcs[i12])()
		return
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT__state13"))
		i11 = mstate.eax
		mstate.esp += 12
		__asm(push(i11==0), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_107_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_87_F"))
		i11 =  ((__xasm<int>(push((i0+76)), op(0x37))))
		i12 =  ((__xasm<int>(push(__ZN9b2Contact13s_initializedE_2E_b), op(0x35))))
		__asm(push(i12!=0), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_89_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_88_F"))
		i12 =  (__ZN15b2CircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator)
		__asm(push(i12), push(__ZN9b2Contact11s_registersE), op(0x3c))
		i12 =  (__ZN15b2CircleContact7DestroyEP9b2ContactP16b2BlockAllocator)
		__asm(push(i12), push((__ZN9b2Contact11s_registersE+4)), op(0x3c))
		i12 =  (1)
		__asm(push(i12), push((__ZN9b2Contact11s_registersE+8)), op(0x3a))
		i13 =  (__ZN25b2PolygonAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator)
		__asm(push(i13), push((__ZN9b2Contact11s_registersE+96)), op(0x3c))
		i14 =  (__ZN25b2PolygonAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator)
		__asm(push(i14), push((__ZN9b2Contact11s_registersE+100)), op(0x3c))
		__asm(push(i12), push((__ZN9b2Contact11s_registersE+104)), op(0x3a))
		__asm(push(i13), push((__ZN9b2Contact11s_registersE+24)), op(0x3c))
		__asm(push(i14), push((__ZN9b2Contact11s_registersE+28)), op(0x3c))
		i13 =  (0)
		__asm(push(i13), push((__ZN9b2Contact11s_registersE+32)), op(0x3a))
		i14 =  (__ZN16b2PolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator)
		__asm(push(i14), push((__ZN9b2Contact11s_registersE+120)), op(0x3c))
		i14 =  (__ZN16b2PolygonContact7DestroyEP9b2ContactP16b2BlockAllocator)
		__asm(push(i14), push((__ZN9b2Contact11s_registersE+124)), op(0x3c))
		__asm(push(i12), push((__ZN9b2Contact11s_registersE+128)), op(0x3a))
		i14 =  (__ZN22b2EdgeAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator)
		__asm(push(i14), push((__ZN9b2Contact11s_registersE+48)), op(0x3c))
		i15 =  (__ZN22b2EdgeAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator)
		__asm(push(i15), push((__ZN9b2Contact11s_registersE+52)), op(0x3c))
		__asm(push(i12), push((__ZN9b2Contact11s_registersE+56)), op(0x3a))
		__asm(push(i14), push((__ZN9b2Contact11s_registersE+12)), op(0x3c))
		__asm(push(i15), push((__ZN9b2Contact11s_registersE+16)), op(0x3c))
		__asm(push(i13), push((__ZN9b2Contact11s_registersE+20)), op(0x3a))
		i14 =  (__ZN23b2EdgeAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator)
		__asm(push(i14), push((__ZN9b2Contact11s_registersE+72)), op(0x3c))
		i15 =  (__ZN23b2EdgeAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator)
		__asm(push(i15), push((__ZN9b2Contact11s_registersE+76)), op(0x3c))
		__asm(push(i12), push((__ZN9b2Contact11s_registersE+80)), op(0x3a))
		__asm(push(i14), push((__ZN9b2Contact11s_registersE+108)), op(0x3c))
		__asm(push(i15), push((__ZN9b2Contact11s_registersE+112)), op(0x3c))
		__asm(push(i13), push((__ZN9b2Contact11s_registersE+116)), op(0x3a))
		i14 =  (__ZN22b2LoopAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator)
		__asm(push(i14), push((__ZN9b2Contact11s_registersE+144)), op(0x3c))
		i15 =  (__ZN22b2LoopAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator)
		__asm(push(i15), push((__ZN9b2Contact11s_registersE+148)), op(0x3c))
		__asm(push(i12), push((__ZN9b2Contact11s_registersE+152)), op(0x3a))
		__asm(push(i14), push((__ZN9b2Contact11s_registersE+36)), op(0x3c))
		__asm(push(i15), push((__ZN9b2Contact11s_registersE+40)), op(0x3c))
		__asm(push(i13), push((__ZN9b2Contact11s_registersE+44)), op(0x3a))
		i14 =  (__ZN23b2LoopAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator)
		__asm(push(i14), push((__ZN9b2Contact11s_registersE+168)), op(0x3c))
		i15 =  (__ZN23b2LoopAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator)
		__asm(push(i15), push((__ZN9b2Contact11s_registersE+172)), op(0x3c))
		__asm(push(i12), push((__ZN9b2Contact11s_registersE+176)), op(0x3a))
		__asm(push(i14), push((__ZN9b2Contact11s_registersE+132)), op(0x3c))
		__asm(push(i15), push((__ZN9b2Contact11s_registersE+136)), op(0x3c))
		__asm(push(i13), push((__ZN9b2Contact11s_registersE+140)), op(0x3a))
		__asm(push(i12), push(__ZN9b2Contact13s_initializedE_2E_b), op(0x3a))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_89_F"))
		i12 =  ((__xasm<int>(push((i9+16)), op(0x37))))
		i13 =  ((__xasm<int>(push((i10+16)), op(0x37))))
		i12 =  ((__xasm<int>(push((i12+4)), op(0x37))))
		i13 =  ((__xasm<int>(push((i13+4)), op(0x37))))
		__asm(push(uint(i12)<uint(4)), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_91_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_90_F"))
		i2 =  (___sF)
		mstate.esp -= 24
		i0 =  (__2E_str1670)
		i1 =  (__2E_str18225)
		i3 =  (__ZZN11b2LoopShape6CreateEPK6b2Vec2iE8__func__)
		i4 =  (__2E_str17224)
		i5 =  (80)
		__asm(jump, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_93_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_91_F"))
		__asm(push(uint(i13)<uint(4)), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_95_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_92_F"))
		i2 =  (___sF)
		mstate.esp -= 24
		i0 =  (__2E_str1670)
		i1 =  (__2E_str19226)
		i3 =  (__ZZN11b2LoopShape6CreateEPK6b2Vec2iE8__func__)
		i4 =  (__2E_str17224)
		i5 =  (81)
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_93_F"))
		i2 =  (i2 + 176)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		__asm(push(i1), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_94_F"))
		state = 14
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT__state14"))
		mstate.esp += 24
		state = 15
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT__state15"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_95_F"))
		i14 =  (__ZN9b2Contact11s_registersE)
		i15 =  (i12 * 48)
		i16 =  (i13 * 12)
		i14 =  (i14 + i15)
		i14 =  (i14 + i16)
		i14 =  ((__xasm<int>(push(i14), op(0x37))))
		__asm(push(i14!=0), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_97_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_96_F"))
		i7 =  (0)
		__asm(jump, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_100_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_97_F"))
		i15 =  (__ZN9b2Contact11s_registersE)
		i12 =  (i12 * 48)
		i13 =  (i13 * 12)
		i12 =  (i15 + i12)
		i12 =  (i12 + i13)
		i12 =  ((__xasm<int>(push((i12+8)), op(0x35))))
		__asm(push(i12==0), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_99_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_98_F"))
		mstate.esp -= 20
		__asm(push(i9), push(mstate.esp), op(0x3c))
		__asm(push(i7), push((mstate.esp+4)), op(0x3c))
		__asm(push(i10), push((mstate.esp+8)), op(0x3c))
		__asm(push(i8), push((mstate.esp+12)), op(0x3c))
		__asm(push(i11), push((mstate.esp+16)), op(0x3c))
		state = 16
		mstate.esp -= 4;(mstate.funcs[i14])()
		return
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT__state16"))
		i7 = mstate.eax
		mstate.esp += 20
		__asm(jump, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_100_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_99_F"))
		mstate.esp -= 20
		__asm(push(i10), push(mstate.esp), op(0x3c))
		__asm(push(i8), push((mstate.esp+4)), op(0x3c))
		__asm(push(i9), push((mstate.esp+8)), op(0x3c))
		__asm(push(i7), push((mstate.esp+12)), op(0x3c))
		__asm(push(i11), push((mstate.esp+16)), op(0x3c))
		state = 17
		mstate.esp -= 4;(mstate.funcs[i14])()
		return
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT__state17"))
		i7 = mstate.eax
		mstate.esp += 20
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_100_F"))
		i8 =  (0)
		i9 =  ((__xasm<int>(push((i7+48)), op(0x37))))
		i10 =  ((__xasm<int>(push((i7+52)), op(0x37))))
		i9 =  ((__xasm<int>(push((i9+12)), op(0x37))))
		i10 =  ((__xasm<int>(push((i10+12)), op(0x37))))
		__asm(push(i8), push((i7+8)), op(0x3c))
		i8 =  ((__xasm<int>(push((i0+60)), op(0x37))))
		__asm(push(i8), push((i7+12)), op(0x3c))
		i8 =  ((__xasm<int>(push((i0+60)), op(0x37))))
		i11 =  (i0 + 60)
		__asm(push(i8==0), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_102_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_101_F"))
		__asm(push(i7), push((i8+8)), op(0x3c))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_102_F"))
		i8 =  (0)
		__asm(push(i7), push(i11), op(0x3c))
		__asm(push(i7), push((i7+20)), op(0x3c))
		__asm(push(i10), push((i7+16)), op(0x3c))
		__asm(push(i8), push((i7+24)), op(0x3c))
		i8 =  ((__xasm<int>(push((i9+120)), op(0x37))))
		__asm(push(i8), push((i7+28)), op(0x3c))
		i8 =  ((__xasm<int>(push((i9+120)), op(0x37))))
		i11 =  (i9 + 120)
		__asm(push(i8==0), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_104_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_103_F"))
		i12 =  (i7 + 16)
		__asm(push(i12), push((i8+8)), op(0x3c))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_104_F"))
		i8 =  (0)
		i12 =  (i7 + 16)
		__asm(push(i12), push(i11), op(0x3c))
		__asm(push(i7), push((i7+36)), op(0x3c))
		__asm(push(i9), push((i7+32)), op(0x3c))
		__asm(push(i8), push((i7+40)), op(0x3c))
		i8 =  ((__xasm<int>(push((i10+120)), op(0x37))))
		__asm(push(i8), push((i7+44)), op(0x3c))
		i8 =  ((__xasm<int>(push((i10+120)), op(0x37))))
		i9 =  (i10 + 120)
		__asm(push(i8==0), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_106_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_105_F"))
		i10 =  (i7 + 32)
		__asm(push(i10), push((i8+8)), op(0x3c))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_106_F"))
		i7 =  (i7 + 32)
		__asm(push(i7), push(i9), op(0x3c))
		i7 =  ((__xasm<int>(push((i0+64)), op(0x37))))
		i7 =  (i7 + 1)
		__asm(push(i7), push((i0+64)), op(0x3c))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_107_F"))
		i7 =  ((__xasm<int>(push(i4), op(0x37))))
		i8 =  (i2 + 1)
		__asm(push(i7>i8), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_109_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_108_F"))
		i2 = i8
		__asm(jump, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_115_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_109_F"))
		i8 =  ((__xasm<int>(push(i6), op(0x37))))
		i5 =  ((__xasm<int>(push(i5), op(0x37))))
		i9 =  (i2 * 12)
		i8 =  (i8 + i9)
		i2 =  (i2 + 1)
	__asm(jump, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_110_F"), lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_110_B"), label, lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_110_F")); 
		i9 =  ((__xasm<int>(push((i8+12)), op(0x37))))
		__asm(push(i9==i5), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_112_F"))
	__asm(jump, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_111_F"), lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_111_B"), label, lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_111_F")); 
		__asm(jump, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_115_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_112_F"))
		i9 =  ((__xasm<int>(push((i8+16)), op(0x37))))
		i10 =  ((__xasm<int>(push(i3), op(0x37))))
		__asm(push(i9!=i10), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_111_B"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_113_F"))
		i8 =  (i8 + 12)
		i2 =  (i2 + 1)
		__asm(push(i7>i2), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_128_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_114_F"))
		__asm(jump, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_115_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_115_F"))
		i3 =  ((__xasm<int>(push(i4), op(0x37))))
		__asm(push(i3<=i2), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_117_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_116_F"))
		__asm(jump, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_59_B"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_117_F"))
		i0 =  ((__xasm<int>(push(i1), op(0x37))))
		i2 = i1
		i3 = i1
		__asm(push(i0==-1), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_126_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_118_F"))
		i0 =  (0)
		i4 =  (i1 + 20)
		i1 =  (i1 + 4)
	__asm(jump, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_119_F"), lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_119_B"), label, lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_119_F")); 
		i5 =  ((__xasm<int>(push(i2), op(0x37))))
		i6 =  ((__xasm<int>(push(i1), op(0x37))))
		i7 =  (i5 * 36)
		i7 =  (i6 + i7)
		i7 =  ((__xasm<int>(push((i7+24)), op(0x37))))
		__asm(push(i7!=-1), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_123_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_120_F"))
		__asm(jump, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_121_F"))
	__asm(jump, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_121_F"), lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_121_B"), label, lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_121_F")); 
		i6 =  ((__xasm<int>(push(i4), op(0x37))))
		i6 =  (i6 + 1)
		__asm(push(i6), push(i4), op(0x3c))
		mstate.esp -= 8
		__asm(push(i3), push(mstate.esp), op(0x3c))
		__asm(push(i5), push((mstate.esp+4)), op(0x3c))
		state = 18
		mstate.esp -= 4;FSM__ZN13b2DynamicTree10RemoveLeafEi.start()
		return
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT__state18"))
		mstate.esp += 8
		mstate.esp -= 8
		__asm(push(i3), push(mstate.esp), op(0x3c))
		__asm(push(i5), push((mstate.esp+4)), op(0x3c))
		state = 19
		mstate.esp -= 4;FSM__ZN13b2DynamicTree10InsertLeafEi.start()
		return
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT__state19"))
		mstate.esp += 8
		i0 =  (i0 + 1)
		__asm(push(i0==4), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_126_F"))
		__asm(jump, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_122_F"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_122_F"))
		__asm(jump, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_119_B"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_123_F"))
		i7 =  (0)
		i8 =  ((__xasm<int>(push(i4), op(0x37))))
	__asm(jump, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_124_F"), lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_124_B"), label, lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_124_F")); 
		i9 =  (i8 >>> i7)
		i9 =  (i9 & 1)
		i5 =  (i5 * 36)
		i9 =  (i9 << 2)
		i5 =  (i6 + i5)
		i5 =  (i5 + i9)
		i5 =  ((__xasm<int>(push((i5+24)), op(0x37))))
		i9 =  (i5 * 36)
		i9 =  (i6 + i9)
		i9 =  ((__xasm<int>(push((i9+24)), op(0x37))))
		i7 =  (i7 + 1)
		i7 =  (i7 & 31)
		__asm(push(i9==-1), iftrue, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_121_B"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_125_F"))
		__asm(jump, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_124_B"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_126_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_127_F"))
		i9 =  (0)
		__asm(jump, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_43_B"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_128_F"))
		__asm(jump, target("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT___XprivateX__BB427_110_B"))
	__asm(lbl("__ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT__errState"))
		throw("Invalid state in __ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT_")
	}
}



// Async
public const __ZNK20b2SeparationFunction8EvaluateEiif:int = regFunc(FSM__ZNK20b2SeparationFunction8EvaluateEiif.start)

public final class FSM__ZNK20b2SeparationFunction8EvaluateEiif extends Machine {

	public static function start():void {
			var result:FSM__ZNK20b2SeparationFunction8EvaluateEiif = new FSM__ZNK20b2SeparationFunction8EvaluateEiif
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int

	public static const intRegCount:int = 6
	public var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number
	public var f8:Number, f9:Number, f10:Number, f11:Number, f12:Number, f13:Number, f14:Number, f15:Number
	public var f16:Number, f17:Number, f18:Number, f19:Number, f20:Number, f21:Number, f22:Number, f23:Number

	public static const NumberRegCount:int = 24
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZNK20b2SeparationFunction8EvaluateEiif_entry"))
		__asm(push(state), switchjump(
			"__ZNK20b2SeparationFunction8EvaluateEiif_errState",
			"__ZNK20b2SeparationFunction8EvaluateEiif_state0",
			"__ZNK20b2SeparationFunction8EvaluateEiif_state1",
			"__ZNK20b2SeparationFunction8EvaluateEiif_state2"))
	__asm(lbl("__ZNK20b2SeparationFunction8EvaluateEiif_state0"))
	__asm(lbl("__ZNK20b2SeparationFunction8EvaluateEiif__XprivateX__BB428_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		f0 =  (1)
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push((mstate.ebp+20)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f0 - f1)
		f0 =  f0/*fround*/
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		f2 =  ((__xasm<Number>(push((i0+36)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i0+32)), op(0x38))))
		f4 =  f0/*fextend*/
		f0 =  (f2 * f1)
		f2 =  (f4 * f3)
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f0 =  f0/*fextend*/
		f2 =  f2/*fextend*/
		f3 =  ((__xasm<Number>(push((i0+28)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i0+24)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i0+20)), op(0x38))))
		f7 =  ((__xasm<Number>(push((i0+16)), op(0x38))))
		f0 =  (f2 + f0)
		f2 =  f0/*fround*/
		f0 = f2
		//InlineAsmStart
	f0 =  Math.cos(f0);

	//InlineAsmEnd
		f8 = f0
		f0 = f2
		//InlineAsmStart
	f0 =  Math.sin(f0);

	//InlineAsmEnd
		f2 = f0
		f0 =  ((__xasm<Number>(push((i0+68)), op(0x38))))
		f9 =  ((__xasm<Number>(push((i0+72)), op(0x38))))
		f9 =  (f9 * f1)
		f0 =  (f4 * f0)
		f9 =  f9/*fround*/
		f0 =  f0/*fround*/
		f9 =  f9/*fextend*/
		f0 =  f0/*fextend*/
		f10 =  ((__xasm<Number>(push((i0+64)), op(0x38))))
		f11 =  ((__xasm<Number>(push((i0+60)), op(0x38))))
		f12 =  ((__xasm<Number>(push((i0+56)), op(0x38))))
		f13 =  ((__xasm<Number>(push((i0+52)), op(0x38))))
		f0 =  (f0 + f9)
		f9 =  ((__xasm<Number>(push((i0+8)), op(0x38))))
		f14 =  ((__xasm<Number>(push((i0+12)), op(0x38))))
		f15 =  f0/*fround*/
		f0 = f15
		//InlineAsmStart
	f0 =  Math.cos(f0);

	//InlineAsmEnd
		f16 = f0
		f0 = f15
		//InlineAsmStart
	f0 =  Math.sin(f0);

	//InlineAsmEnd
		f15 =  f2/*fextend*/
		f17 =  f8/*fextend*/
		f18 =  f0/*fextend*/
		f19 =  ((__xasm<Number>(push((i0+44)), op(0x38))))
		f20 =  ((__xasm<Number>(push((i0+48)), op(0x38))))
		f21 =  f16/*fextend*/
		f22 =  (f15 * f9)
		f9 =  (f17 * f9)
		f23 =  (f18 * f19)
		f19 =  (f21 * f19)
		f21 =  (f21 * f20)
		f20 =  (f20 * f18)
		f12 =  (f12 * f4)
		f13 =  (f13 * f4)
		f10 =  (f10 * f1)
		f11 =  (f11 * f1)
		f17 =  (f17 * f14)
		f14 =  (f14 * f15)
		f6 =  (f6 * f4)
		f4 =  (f7 * f4)
		f3 =  (f3 * f1)
		f1 =  (f5 * f1)
		f5 =  f22/*fround*/
		f7 =  f9/*fround*/
		f9 =  f23/*fround*/
		f19 =  f19/*fround*/
		f21 =  f21/*fround*/
		f20 =  f20/*fround*/
		f12 =  f12/*fround*/
		f13 =  f13/*fround*/
		f10 =  f10/*fround*/
		f11 =  f11/*fround*/
		f17 =  f17/*fround*/
		f14 =  f14/*fround*/
		f6 =  f6/*fround*/
		f4 =  f4/*fround*/
		f3 =  f3/*fround*/
		f1 =  f1/*fround*/
		f17 =  f17/*fextend*/
		f5 =  f5/*fextend*/
		f14 =  f14/*fextend*/
		f7 =  f7/*fextend*/
		f21 =  f21/*fextend*/
		f9 =  f9/*fextend*/
		f20 =  f20/*fextend*/
		f19 =  f19/*fextend*/
		f10 =  f10/*fextend*/
		f12 =  f12/*fextend*/
		f11 =  f11/*fextend*/
		f13 =  f13/*fextend*/
		f3 =  f3/*fextend*/
		f6 =  f6/*fextend*/
		f1 =  f1/*fextend*/
		f4 =  f4/*fextend*/
		f5 =  (f5 + f17)
		f7 =  (f7 - f14)
		f9 =  (f9 + f21)
		f14 =  (f19 - f20)
		f10 =  (f12 + f10)
		f11 =  (f13 + f11)
		f3 =  (f6 + f3)
		f1 =  (f4 + f1)
		f4 =  f5/*fround*/
		f5 =  f7/*fround*/
		f6 =  f9/*fround*/
		f7 =  f14/*fround*/
		f9 =  f10/*fround*/
		f10 =  f11/*fround*/
		f3 =  f3/*fround*/
		f1 =  f1/*fround*/
		f4 =  f4/*fextend*/
		f3 =  f3/*fextend*/
		f5 =  f5/*fextend*/
		f1 =  f1/*fextend*/
		f6 =  f6/*fextend*/
		f9 =  f9/*fextend*/
		f7 =  f7/*fextend*/
		f10 =  f10/*fextend*/
		i1 =  ((__xasm<int>(push((i0+80)), op(0x37))))
		f3 =  (f3 - f4)
		f1 =  (f1 - f5)
		f4 =  -f18
		f5 =  (f9 - f6)
		f6 =  (f10 - f7)
		f7 =  -f15
		f3 =  f3/*fround*/
		f1 =  f1/*fround*/
		f4 =  f4/*fround*/
		f5 =  f5/*fround*/
		f6 =  f6/*fround*/
		f7 =  f7/*fround*/
		i2 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i3 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		__asm(push(i1==2), iftrue, target("__ZNK20b2SeparationFunction8EvaluateEiif__XprivateX__BB428_19_F"))
	__asm(lbl("__ZNK20b2SeparationFunction8EvaluateEiif__XprivateX__BB428_1_F"))
		__asm(push(i1==1), iftrue, target("__ZNK20b2SeparationFunction8EvaluateEiif__XprivateX__BB428_14_F"))
	__asm(lbl("__ZNK20b2SeparationFunction8EvaluateEiif__XprivateX__BB428_2_F"))
		__asm(push(i1!=0), iftrue, target("__ZNK20b2SeparationFunction8EvaluateEiif__XprivateX__BB428_23_F"))
	__asm(lbl("__ZNK20b2SeparationFunction8EvaluateEiif__XprivateX__BB428_3_F"))
		i1 =  ((__xasm<int>(push(i0), op(0x37))))
		__asm(push(i2<0), iftrue, target("__ZNK20b2SeparationFunction8EvaluateEiif__XprivateX__BB428_5_F"))
	__asm(lbl("__ZNK20b2SeparationFunction8EvaluateEiif__XprivateX__BB428_4_F"))
		i4 =  ((__xasm<int>(push((i1+20)), op(0x37))))
		__asm(push(i4>i2), iftrue, target("__ZNK20b2SeparationFunction8EvaluateEiif__XprivateX__BB428_9_F"))
	__asm(lbl("__ZNK20b2SeparationFunction8EvaluateEiif__XprivateX__BB428_5_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str1208)
		i3 =  (__ZZNK11b2LoopShape9GetVertexEiE8__func__)
		i4 =  (__2E_str4211)
		i5 =  (103)
	__asm(jump, target("__ZNK20b2SeparationFunction8EvaluateEiif__XprivateX__BB428_6_F"), lbl("__ZNK20b2SeparationFunction8EvaluateEiif__XprivateX__BB428_6_B"), label, lbl("__ZNK20b2SeparationFunction8EvaluateEiif__XprivateX__BB428_6_F")); 
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
	__asm(jump, target("__ZNK20b2SeparationFunction8EvaluateEiif__XprivateX__BB428_7_F"), lbl("__ZNK20b2SeparationFunction8EvaluateEiif__XprivateX__BB428_7_B"), label, lbl("__ZNK20b2SeparationFunction8EvaluateEiif__XprivateX__BB428_7_F")); 
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
	__asm(jump, target("__ZNK20b2SeparationFunction8EvaluateEiif__XprivateX__BB428_8_F"), lbl("__ZNK20b2SeparationFunction8EvaluateEiif__XprivateX__BB428_8_B"), label, lbl("__ZNK20b2SeparationFunction8EvaluateEiif__XprivateX__BB428_8_F")); 
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__ZNK20b2SeparationFunction8EvaluateEiif_state1"))
		mstate.esp += 24
		state = 2
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZNK20b2SeparationFunction8EvaluateEiif_state2"))
	__asm(lbl("__ZNK20b2SeparationFunction8EvaluateEiif__XprivateX__BB428_9_F"))
		i1 =  ((__xasm<int>(push((i1+16)), op(0x37))))
		i2 =  (i2 << 3)
		i2 =  (i1 + i2)
		f9 =  ((__xasm<Number>(push(i2), op(0x38))))
		f10 =  ((__xasm<Number>(push((i2+4)), op(0x38))))
		i2 =  ((__xasm<int>(push((i0+4)), op(0x37))))
		__asm(push(i3<0), iftrue, target("__ZNK20b2SeparationFunction8EvaluateEiif__XprivateX__BB428_11_F"))
	__asm(lbl("__ZNK20b2SeparationFunction8EvaluateEiif__XprivateX__BB428_10_F"))
		i1 =  ((__xasm<int>(push((i2+20)), op(0x37))))
		__asm(push(i1>i3), iftrue, target("__ZNK20b2SeparationFunction8EvaluateEiif__XprivateX__BB428_13_F"))
	__asm(lbl("__ZNK20b2SeparationFunction8EvaluateEiif__XprivateX__BB428_11_F"))
		i2 =  (___sF)
		mstate.esp -= 24
		i0 =  (__2E_str1670)
		i3 =  (__2E_str1208)
		i1 =  (__ZZNK11b2LoopShape9GetVertexEiE8__func__)
		i4 =  (__2E_str4211)
		i5 =  (103)
		i2 =  (i2 + 176)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
	__asm(jump, target("__ZNK20b2SeparationFunction8EvaluateEiif__XprivateX__BB428_12_F"), lbl("__ZNK20b2SeparationFunction8EvaluateEiif__XprivateX__BB428_12_B"), label, lbl("__ZNK20b2SeparationFunction8EvaluateEiif__XprivateX__BB428_12_F")); 
		__asm(push(i3), push((mstate.esp+8)), op(0x3c))
		__asm(push(i1), push((mstate.esp+12)), op(0x3c))
		__asm(jump, target("__ZNK20b2SeparationFunction8EvaluateEiif__XprivateX__BB428_8_B"))
	__asm(lbl("__ZNK20b2SeparationFunction8EvaluateEiif__XprivateX__BB428_13_F"))
		i2 =  ((__xasm<int>(push((i2+16)), op(0x37))))
		i3 =  (i3 << 3)
		i2 =  (i2 + i3)
		f11 =  ((__xasm<Number>(push(i2), op(0x38))))
		f0 =  f0/*fextend*/
		f12 =  f16/*fextend*/
		f8 =  f8/*fextend*/
		f9 =  f9/*fextend*/
		f2 =  f2/*fextend*/
		f13 =  (f12 * f11)
		f0 =  (f0 * f11)
		f11 =  (f8 * f9)
		f2 =  (f2 * f9)
		f16 =  f13/*fround*/
		f0 =  f0/*fround*/
		f9 =  f11/*fround*/
		f2 =  f2/*fround*/
		f11 =  ((__xasm<Number>(push((i2+4)), op(0x38))))
		f4 =  f4/*fextend*/
		f10 =  f10/*fextend*/
		f7 =  f7/*fextend*/
		f13 =  f16/*fextend*/
		f6 =  f6/*fextend*/
		f0 =  f0/*fextend*/
		f5 =  f5/*fextend*/
		f9 =  f9/*fextend*/
		f1 =  f1/*fextend*/
		f2 =  f2/*fextend*/
		f3 =  f3/*fextend*/
		f6 =  (f6 + f13)
		f0 =  (f5 + f0)
		f4 =  (f11 * f4)
		f5 =  (f12 * f11)
		f1 =  (f1 + f9)
		f8 =  (f8 * f10)
		f2 =  (f3 + f2)
		f3 =  (f10 * f7)
		f6 =  f6/*fround*/
		f0 =  f0/*fround*/
		f4 =  f4/*fround*/
		f5 =  f5/*fround*/
		f1 =  f1/*fround*/
		f7 =  f8/*fround*/
		f2 =  f2/*fround*/
		f3 =  f3/*fround*/
		f4 =  f4/*fextend*/
		f6 =  f6/*fextend*/
		f5 =  f5/*fextend*/
		f0 =  f0/*fextend*/
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f7 =  f7/*fextend*/
		f2 =  f2/*fextend*/
		f4 =  (f6 + f4)
		f0 =  (f0 + f5)
		f1 =  (f1 + f3)
		f2 =  (f2 + f7)
		f3 =  f4/*fround*/
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f2 =  f2/*fround*/
		f1 =  f1/*fextend*/
		f3 =  f3/*fextend*/
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f1 =  (f3 - f1)
		f0 =  (f0 - f2)
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		f2 =  ((__xasm<Number>(push((i0+92)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i0+96)), op(0x38))))
		f1 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		f1 =  (f1 * f2)
		f0 =  (f0 * f3)
		__asm(jump, target("__ZNK20b2SeparationFunction8EvaluateEiif__XprivateX__BB428_18_F"))
	__asm(lbl("__ZNK20b2SeparationFunction8EvaluateEiif__XprivateX__BB428_14_F"))
		f9 =  ((__xasm<Number>(push((i0+84)), op(0x38))))
		f2 =  f2/*fextend*/
		f8 =  f8/*fextend*/
		f10 =  (f8 * f9)
		f9 =  (f2 * f9)
		f10 =  f10/*fround*/
		f9 =  f9/*fround*/
		f11 =  ((__xasm<Number>(push((i0+92)), op(0x38))))
		f12 =  ((__xasm<Number>(push((i0+96)), op(0x38))))
		f13 =  ((__xasm<Number>(push((i0+88)), op(0x38))))
		f7 =  f7/*fextend*/
		f10 =  f10/*fextend*/
		f1 =  f1/*fextend*/
		f9 =  f9/*fextend*/
		f3 =  f3/*fextend*/
		f2 =  (f2 * f11)
		f11 =  (f8 * f11)
		f1 =  (f1 + f10)
		f3 =  (f3 + f9)
		f9 =  (f13 * f7)
		f10 =  (f8 * f13)
		f8 =  (f8 * f12)
		f7 =  (f12 * f7)
		f2 =  f2/*fround*/
		f11 =  f11/*fround*/
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		f9 =  f9/*fround*/
		f10 =  f10/*fround*/
		f8 =  f8/*fround*/
		f7 =  f7/*fround*/
		f8 =  f8/*fextend*/
		f2 =  f2/*fextend*/
		f7 =  f7/*fextend*/
		f11 =  f11/*fextend*/
		f9 =  f9/*fextend*/
		f1 =  f1/*fextend*/
		f10 =  f10/*fextend*/
		f3 =  f3/*fextend*/
		i0 =  ((__xasm<int>(push((i0+4)), op(0x37))))
		f2 =  (f2 + f8)
		f7 =  (f11 + f7)
		f1 =  (f1 + f9)
		f3 =  (f3 + f10)
		f2 =  f2/*fround*/
		f7 =  f7/*fround*/
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		__asm(push(i3<0), iftrue, target("__ZNK20b2SeparationFunction8EvaluateEiif__XprivateX__BB428_16_F"))
	__asm(lbl("__ZNK20b2SeparationFunction8EvaluateEiif__XprivateX__BB428_15_F"))
		i2 =  ((__xasm<int>(push((i0+20)), op(0x37))))
		__asm(push(i2>i3), iftrue, target("__ZNK20b2SeparationFunction8EvaluateEiif__XprivateX__BB428_17_F"))
	__asm(lbl("__ZNK20b2SeparationFunction8EvaluateEiif__XprivateX__BB428_16_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i2 =  (__2E_str1670)
		i3 =  (__2E_str1208)
		i1 =  (__ZZNK11b2LoopShape9GetVertexEiE8__func__)
		i4 =  (__2E_str4211)
		i5 =  (103)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i2), push((mstate.esp+4)), op(0x3c))
		__asm(jump, target("__ZNK20b2SeparationFunction8EvaluateEiif__XprivateX__BB428_12_B"))
	__asm(lbl("__ZNK20b2SeparationFunction8EvaluateEiif__XprivateX__BB428_17_F"))
		i0 =  ((__xasm<int>(push((i0+16)), op(0x37))))
		i2 =  (i3 << 3)
		i0 =  (i0 + i2)
		f8 =  ((__xasm<Number>(push(i0), op(0x38))))
		f0 =  f0/*fextend*/
		f9 =  f16/*fextend*/
		f10 =  (f9 * f8)
		f0 =  (f0 * f8)
		f8 =  f10/*fround*/
		f0 =  f0/*fround*/
		f10 =  ((__xasm<Number>(push((i0+4)), op(0x38))))
		f4 =  f4/*fextend*/
		f8 =  f8/*fextend*/
		f6 =  f6/*fextend*/
		f0 =  f0/*fextend*/
		f5 =  f5/*fextend*/
		f6 =  (f6 + f8)
		f0 =  (f5 + f0)
		f4 =  (f10 * f4)
		f5 =  (f9 * f10)
		f6 =  f6/*fround*/
		f0 =  f0/*fround*/
		f4 =  f4/*fround*/
		f5 =  f5/*fround*/
		f4 =  f4/*fextend*/
		f6 =  f6/*fextend*/
		f5 =  f5/*fextend*/
		f0 =  f0/*fextend*/
		f4 =  (f6 + f4)
		f0 =  (f0 + f5)
		f4 =  f4/*fround*/
		f0 =  f0/*fround*/
		f1 =  f1/*fextend*/
		f4 =  f4/*fextend*/
		f3 =  f3/*fextend*/
		f0 =  f0/*fextend*/
		f1 =  (f4 - f1)
		f0 =  (f0 - f3)
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		f3 =  f7/*fextend*/
		f1 =  f1/*fextend*/
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f1 =  (f1 * f3)
		f0 =  (f0 * f2)
	__asm(jump, target("__ZNK20b2SeparationFunction8EvaluateEiif__XprivateX__BB428_18_F"), lbl("__ZNK20b2SeparationFunction8EvaluateEiif__XprivateX__BB428_18_B"), label, lbl("__ZNK20b2SeparationFunction8EvaluateEiif__XprivateX__BB428_18_F")); 
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  (f1 + f0)
		f0 =  f0/*fround*/
		mstate.st0 = f0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZNK20b2SeparationFunction8EvaluateEiif__XprivateX__BB428_19_F"))
		f9 =  ((__xasm<Number>(push((i0+84)), op(0x38))))
		f0 =  f0/*fextend*/
		f10 =  f16/*fextend*/
		f11 =  (f10 * f9)
		f9 =  (f0 * f9)
		f11 =  f11/*fround*/
		f9 =  f9/*fround*/
		f12 =  ((__xasm<Number>(push((i0+92)), op(0x38))))
		f13 =  ((__xasm<Number>(push((i0+96)), op(0x38))))
		f14 =  ((__xasm<Number>(push((i0+88)), op(0x38))))
		f4 =  f4/*fextend*/
		f11 =  f11/*fextend*/
		f6 =  f6/*fextend*/
		f9 =  f9/*fextend*/
		f5 =  f5/*fextend*/
		f0 =  (f0 * f12)
		f12 =  (f10 * f12)
		f6 =  (f6 + f11)
		f5 =  (f5 + f9)
		f9 =  (f14 * f4)
		f11 =  (f10 * f14)
		f10 =  (f10 * f13)
		f4 =  (f13 * f4)
		f0 =  f0/*fround*/
		f12 =  f12/*fround*/
		f6 =  f6/*fround*/
		f5 =  f5/*fround*/
		f9 =  f9/*fround*/
		f11 =  f11/*fround*/
		f10 =  f10/*fround*/
		f4 =  f4/*fround*/
		f10 =  f10/*fextend*/
		f0 =  f0/*fextend*/
		f4 =  f4/*fextend*/
		f12 =  f12/*fextend*/
		f9 =  f9/*fextend*/
		f6 =  f6/*fextend*/
		f11 =  f11/*fextend*/
		f5 =  f5/*fextend*/
		i0 =  ((__xasm<int>(push(i0), op(0x37))))
		f0 =  (f0 + f10)
		f4 =  (f12 + f4)
		f6 =  (f6 + f9)
		f5 =  (f5 + f11)
		f0 =  f0/*fround*/
		f4 =  f4/*fround*/
		f6 =  f6/*fround*/
		f5 =  f5/*fround*/
		__asm(push(i2<0), iftrue, target("__ZNK20b2SeparationFunction8EvaluateEiif__XprivateX__BB428_21_F"))
	__asm(lbl("__ZNK20b2SeparationFunction8EvaluateEiif__XprivateX__BB428_20_F"))
		i1 =  ((__xasm<int>(push((i0+20)), op(0x37))))
		__asm(push(i1>i2), iftrue, target("__ZNK20b2SeparationFunction8EvaluateEiif__XprivateX__BB428_22_F"))
	__asm(lbl("__ZNK20b2SeparationFunction8EvaluateEiif__XprivateX__BB428_21_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i2 =  (__2E_str1670)
		i1 =  (__2E_str1208)
		i3 =  (__ZZNK11b2LoopShape9GetVertexEiE8__func__)
		i4 =  (__2E_str4211)
		i5 =  (103)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i2), push((mstate.esp+4)), op(0x3c))
		__asm(push(i1), push((mstate.esp+8)), op(0x3c))
		__asm(jump, target("__ZNK20b2SeparationFunction8EvaluateEiif__XprivateX__BB428_7_B"))
	__asm(lbl("__ZNK20b2SeparationFunction8EvaluateEiif__XprivateX__BB428_22_F"))
		i0 =  ((__xasm<int>(push((i0+16)), op(0x37))))
		i1 =  (i2 << 3)
		i0 =  (i0 + i1)
		f9 =  ((__xasm<Number>(push(i0), op(0x38))))
		f2 =  f2/*fextend*/
		f8 =  f8/*fextend*/
		f10 =  (f8 * f9)
		f2 =  (f2 * f9)
		f9 =  f10/*fround*/
		f2 =  f2/*fround*/
		f10 =  ((__xasm<Number>(push((i0+4)), op(0x38))))
		f7 =  f7/*fextend*/
		f9 =  f9/*fextend*/
		f1 =  f1/*fextend*/
		f2 =  f2/*fextend*/
		f3 =  f3/*fextend*/
		f1 =  (f1 + f9)
		f2 =  (f3 + f2)
		f3 =  (f10 * f7)
		f7 =  (f8 * f10)
		f1 =  f1/*fround*/
		f2 =  f2/*fround*/
		f3 =  f3/*fround*/
		f7 =  f7/*fround*/
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f7 =  f7/*fextend*/
		f2 =  f2/*fextend*/
		f1 =  (f1 + f3)
		f2 =  (f2 + f7)
		f1 =  f1/*fround*/
		f2 =  f2/*fround*/
		f3 =  f6/*fextend*/
		f1 =  f1/*fextend*/
		f5 =  f5/*fextend*/
		f2 =  f2/*fextend*/
		f1 =  (f1 - f3)
		f2 =  (f2 - f5)
		f1 =  f1/*fround*/
		f2 =  f2/*fround*/
		f3 =  f4/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		f2 =  f2/*fextend*/
		f1 =  (f1 * f3)
		f0 =  (f2 * f0)
		__asm(jump, target("__ZNK20b2SeparationFunction8EvaluateEiif__XprivateX__BB428_18_B"))
	__asm(lbl("__ZNK20b2SeparationFunction8EvaluateEiif__XprivateX__BB428_23_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str46253)
		i3 =  (__ZZNK20b2SeparationFunction8EvaluateEiifE8__func__)
		i4 =  (__2E_str129321)
		i5 =  (242)
		__asm(jump, target("__ZNK20b2SeparationFunction8EvaluateEiif__XprivateX__BB428_6_B"))
	__asm(lbl("__ZNK20b2SeparationFunction8EvaluateEiif_errState"))
		throw("Invalid state in __ZNK20b2SeparationFunction8EvaluateEiif")
	}
}



// Async
public const __ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f:int = regFunc(FSM__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f.start)

public final class FSM__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f extends Machine {

	public static function start():void {
			var result:FSM__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f = new FSM__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
	public var i8:int, i9:int

	public static const intRegCount:int = 10
	public var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number
	public var f8:Number, f9:Number, f10:Number, f11:Number, f12:Number, f13:Number, f14:Number, f15:Number
	public var f16:Number, f17:Number, f18:Number, f19:Number, f20:Number, f21:Number, f22:Number, f23:Number

	public static const NumberRegCount:int = 24
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f_entry"))
		__asm(push(state), switchjump(
			"__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f_errState",
			"__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f_state0",
			"__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f_state1",
			"__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f_state2"))
	__asm(lbl("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f_state0"))
	__asm(lbl("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		f0 =  (1)
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push((mstate.ebp+20)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f0 - f1)
		f0 =  f0/*fround*/
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		f2 =  ((__xasm<Number>(push((i0+36)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i0+32)), op(0x38))))
		f4 =  f0/*fextend*/
		f0 =  (f2 * f1)
		f2 =  (f4 * f3)
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f0 =  f0/*fextend*/
		f2 =  f2/*fextend*/
		f3 =  ((__xasm<Number>(push((i0+28)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i0+24)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i0+20)), op(0x38))))
		f7 =  ((__xasm<Number>(push((i0+16)), op(0x38))))
		f0 =  (f2 + f0)
		f2 =  f0/*fround*/
		f0 = f2
		//InlineAsmStart
	f0 =  Math.cos(f0);

	//InlineAsmEnd
		f8 = f0
		f0 = f2
		//InlineAsmStart
	f0 =  Math.sin(f0);

	//InlineAsmEnd
		f2 = f0
		f0 =  ((__xasm<Number>(push((i0+68)), op(0x38))))
		f9 =  ((__xasm<Number>(push((i0+72)), op(0x38))))
		f9 =  (f9 * f1)
		f0 =  (f4 * f0)
		f9 =  f9/*fround*/
		f0 =  f0/*fround*/
		f9 =  f9/*fextend*/
		f0 =  f0/*fextend*/
		f10 =  ((__xasm<Number>(push((i0+64)), op(0x38))))
		f11 =  ((__xasm<Number>(push((i0+60)), op(0x38))))
		f12 =  ((__xasm<Number>(push((i0+56)), op(0x38))))
		f13 =  ((__xasm<Number>(push((i0+52)), op(0x38))))
		f0 =  (f0 + f9)
		f9 =  ((__xasm<Number>(push((i0+8)), op(0x38))))
		f14 =  ((__xasm<Number>(push((i0+12)), op(0x38))))
		f15 =  f0/*fround*/
		f0 = f15
		//InlineAsmStart
	f0 =  Math.cos(f0);

	//InlineAsmEnd
		f16 = f0
		f0 = f15
		//InlineAsmStart
	f0 =  Math.sin(f0);

	//InlineAsmEnd
		f15 =  f2/*fextend*/
		f17 =  f8/*fextend*/
		f18 =  f0/*fextend*/
		f19 =  ((__xasm<Number>(push((i0+44)), op(0x38))))
		f20 =  ((__xasm<Number>(push((i0+48)), op(0x38))))
		f21 =  f16/*fextend*/
		f22 =  (f15 * f9)
		f9 =  (f17 * f9)
		f23 =  (f18 * f19)
		f19 =  (f21 * f19)
		f21 =  (f21 * f20)
		f20 =  (f20 * f18)
		f12 =  (f12 * f4)
		f13 =  (f13 * f4)
		f10 =  (f10 * f1)
		f11 =  (f11 * f1)
		f17 =  (f17 * f14)
		f14 =  (f14 * f15)
		f6 =  (f6 * f4)
		f4 =  (f7 * f4)
		f3 =  (f3 * f1)
		f1 =  (f5 * f1)
		f5 =  f22/*fround*/
		f7 =  f9/*fround*/
		f9 =  f23/*fround*/
		f19 =  f19/*fround*/
		f21 =  f21/*fround*/
		f20 =  f20/*fround*/
		f12 =  f12/*fround*/
		f13 =  f13/*fround*/
		f10 =  f10/*fround*/
		f11 =  f11/*fround*/
		f17 =  f17/*fround*/
		f14 =  f14/*fround*/
		f6 =  f6/*fround*/
		f4 =  f4/*fround*/
		f3 =  f3/*fround*/
		f1 =  f1/*fround*/
		f17 =  f17/*fextend*/
		f5 =  f5/*fextend*/
		f14 =  f14/*fextend*/
		f7 =  f7/*fextend*/
		f21 =  f21/*fextend*/
		f9 =  f9/*fextend*/
		f20 =  f20/*fextend*/
		f19 =  f19/*fextend*/
		f10 =  f10/*fextend*/
		f12 =  f12/*fextend*/
		f11 =  f11/*fextend*/
		f13 =  f13/*fextend*/
		f3 =  f3/*fextend*/
		f6 =  f6/*fextend*/
		f1 =  f1/*fextend*/
		f4 =  f4/*fextend*/
		f5 =  (f5 + f17)
		f7 =  (f7 - f14)
		f9 =  (f9 + f21)
		f14 =  (f19 - f20)
		f10 =  (f12 + f10)
		f11 =  (f13 + f11)
		f3 =  (f6 + f3)
		f1 =  (f4 + f1)
		f4 =  f5/*fround*/
		f5 =  f7/*fround*/
		f6 =  f9/*fround*/
		f7 =  f14/*fround*/
		f9 =  f10/*fround*/
		f10 =  f11/*fround*/
		f3 =  f3/*fround*/
		f1 =  f1/*fround*/
		f4 =  f4/*fextend*/
		f3 =  f3/*fextend*/
		f5 =  f5/*fextend*/
		f1 =  f1/*fextend*/
		f6 =  f6/*fextend*/
		f9 =  f9/*fextend*/
		f7 =  f7/*fextend*/
		f10 =  f10/*fextend*/
		i1 =  ((__xasm<int>(push((i0+80)), op(0x37))))
		f3 =  (f3 - f4)
		f1 =  (f1 - f5)
		f4 =  -f18
		f5 =  (f9 - f6)
		f6 =  (f10 - f7)
		f7 =  -f15
		f3 =  f3/*fround*/
		f1 =  f1/*fround*/
		f4 =  f4/*fround*/
		f5 =  f5/*fround*/
		f6 =  f6/*fround*/
		f7 =  f7/*fround*/
		i2 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i3 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		__asm(push(i1==2), iftrue, target("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_31_F"))
	__asm(lbl("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_1_F"))
		__asm(push(i1==1), iftrue, target("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_20_F"))
	__asm(lbl("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_2_F"))
		__asm(push(i1!=0), iftrue, target("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_43_F"))
	__asm(lbl("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_3_F"))
		f9 =  ((__xasm<Number>(push((i0+92)), op(0x38))))
		f10 =  f7/*fextend*/
		f11 =  f8/*fextend*/
		f12 =  ((__xasm<Number>(push((i0+96)), op(0x38))))
		f13 =  f2/*fextend*/
		f10 =  (f9 * f10)
		f14 =  (f9 * f11)
		f11 =  (f12 * f11)
		f13 =  (f12 * f13)
		f10 =  f10/*fround*/
		f14 =  f14/*fround*/
		f11 =  f11/*fround*/
		f13 =  f13/*fround*/
		f11 =  f11/*fextend*/
		f10 =  f10/*fextend*/
		f13 =  f13/*fextend*/
		f14 =  f14/*fextend*/
		f10 =  (f10 + f11)
		f11 =  (f14 + f13)
		f13 =  -f9
		i1 =  ((__xasm<int>(push(i0), op(0x37))))
		f10 =  f10/*fround*/
		f11 =  f11/*fround*/
		f13 =  f13/*fround*/
		i4 =  ((__xasm<int>(push((i1+16)), op(0x37))))
		f14 =  f0/*fextend*/
		f15 =  f16/*fextend*/
		f13 =  f13/*fextend*/
		f17 =  ((__xasm<Number>(push(i4), op(0x38))))
		f18 =  f11/*fextend*/
		f19 =  ((__xasm<Number>(push((i4+4)), op(0x38))))
		f20 =  f10/*fextend*/
		f19 =  (f19 * f20)
		f17 =  (f17 * f18)
		f13 =  (f15 * f13)
		f9 =  (f9 * f14)
		f15 =  (f15 * f12)
		f12 =  (f14 * f12)
		f14 =  f19/*fround*/
		f17 =  f17/*fround*/
		f13 =  f13/*fround*/
		f9 =  f9/*fround*/
		f15 =  f15/*fround*/
		f12 =  f12/*fround*/
		f14 =  f14/*fextend*/
		f17 =  f17/*fextend*/
		f12 =  f12/*fextend*/
		f13 =  f13/*fextend*/
		f15 =  f15/*fextend*/
		f9 =  f9/*fextend*/
		i1 =  ((__xasm<int>(push((i1+20)), op(0x37))))
		f14 =  (f17 + f14)
		f12 =  (f13 - f12)
		f9 =  (f9 - f15)
		f13 =  f14/*fround*/
		f12 =  f12/*fround*/
		f9 =  f9/*fround*/
		i5 =  (i0 + 96)
		i6 =  (i0 + 92)
		i7 = i0
		__asm(push(i1>1), iftrue, target("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_5_F"))
	__asm(lbl("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_4_F"))
		i1 =  (0)
		__asm(jump, target("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_8_F"))
	__asm(lbl("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_5_F"))
		i8 =  (0)
		i9 =  (1)
	__asm(jump, target("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_6_F"), lbl("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_6_B"), label, lbl("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_6_F")); 
		f14 =  ((__xasm<Number>(push((i4+8)), op(0x38))))
		f15 =  ((__xasm<Number>(push((i4+12)), op(0x38))))
		f17 =  f11/*fextend*/
		f18 =  f10/*fextend*/
		f14 =  (f14 * f17)
		f15 =  (f15 * f18)
		f14 =  f14/*fround*/
		f15 =  f15/*fround*/
		f15 =  f15/*fextend*/
		f14 =  f14/*fextend*/
		f14 =  (f14 + f15)
		f14 =  f14/*fround*/
		f13 =  f13/*fextend*/
		f14 =  f14/*fextend*/
		f15 =  ((f14>f13) ? f14 : f13)
		i8 =  ((f14>f13) ? i9 : i8)
		f13 =  f15/*fround*/
		i9 =  (i9 + 1)
		i4 =  (i4 + 8)
		__asm(push(i1>i9), iftrue, target("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_44_F"))
	__asm(lbl("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_7_F"))
		i1 = i8
		__asm(jump, target("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_8_F"))
	__asm(lbl("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_8_F"))
		__asm(push(i1), push(i2), op(0x3c))
		i1 =  ((__xasm<int>(push((i0+4)), op(0x37))))
		i4 =  ((__xasm<int>(push((i1+16)), op(0x37))))
		f10 =  ((__xasm<Number>(push(i4), op(0x38))))
		f11 =  f12/*fextend*/
		f13 =  ((__xasm<Number>(push((i4+4)), op(0x38))))
		f14 =  f9/*fextend*/
		f10 =  (f10 * f11)
		f11 =  (f13 * f14)
		f10 =  f10/*fround*/
		f11 =  f11/*fround*/
		f11 =  f11/*fextend*/
		f10 =  f10/*fextend*/
		i1 =  ((__xasm<int>(push((i1+20)), op(0x37))))
		f10 =  (f10 + f11)
		f10 =  f10/*fround*/
		i0 =  (i0 + 4)
		__asm(push(i1>1), iftrue, target("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_10_F"))
	__asm(lbl("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_9_F"))
		i1 =  (0)
		__asm(jump, target("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_13_F"))
	__asm(lbl("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_10_F"))
		i8 =  (0)
		i9 =  (1)
	__asm(jump, target("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_11_F"), lbl("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_11_B"), label, lbl("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_11_F")); 
		f11 =  ((__xasm<Number>(push((i4+8)), op(0x38))))
		f13 =  ((__xasm<Number>(push((i4+12)), op(0x38))))
		f14 =  f12/*fextend*/
		f15 =  f9/*fextend*/
		f11 =  (f11 * f14)
		f13 =  (f13 * f15)
		f11 =  f11/*fround*/
		f13 =  f13/*fround*/
		f13 =  f13/*fextend*/
		f11 =  f11/*fextend*/
		f11 =  (f11 + f13)
		f11 =  f11/*fround*/
		f10 =  f10/*fextend*/
		f11 =  f11/*fextend*/
		f13 =  ((f11>f10) ? f11 : f10)
		i8 =  ((f11>f10) ? i9 : i8)
		f10 =  f13/*fround*/
		i9 =  (i9 + 1)
		i4 =  (i4 + 8)
		__asm(push(i1>i9), iftrue, target("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_45_F"))
	__asm(lbl("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_12_F"))
		i1 = i8
		__asm(jump, target("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_13_F"))
	__asm(lbl("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_13_F"))
		__asm(push(i1), push(i3), op(0x3c))
		i2 =  ((__xasm<int>(push(i2), op(0x37))))
		i1 =  ((__xasm<int>(push(i7), op(0x37))))
		__asm(push(i2<0), iftrue, target("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_15_F"))
	__asm(lbl("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_14_F"))
		i4 =  ((__xasm<int>(push((i1+20)), op(0x37))))
		__asm(push(i4>i2), iftrue, target("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_16_F"))
	__asm(lbl("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_15_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i2 =  (__2E_str1670)
		i1 =  (__2E_str1208)
		i3 =  (__ZZNK11b2LoopShape9GetVertexEiE8__func__)
		i5 =  (__2E_str4211)
		i6 =  (103)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i2), push((mstate.esp+4)), op(0x3c))
		__asm(push(i1), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i5), push((mstate.esp+16)), op(0x3c))
		__asm(push(i6), push((mstate.esp+20)), op(0x3c))
		__asm(jump, target("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_41_F"))
	__asm(lbl("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_16_F"))
		i1 =  ((__xasm<int>(push((i1+16)), op(0x37))))
		i2 =  (i2 << 3)
		i2 =  (i1 + i2)
		f9 =  ((__xasm<Number>(push(i2), op(0x38))))
		f10 =  ((__xasm<Number>(push((i2+4)), op(0x38))))
		i2 =  ((__xasm<int>(push(i3), op(0x37))))
		i0 =  ((__xasm<int>(push(i0), op(0x37))))
		__asm(push(i2<0), iftrue, target("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_18_F"))
	__asm(lbl("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_17_F"))
		i3 =  ((__xasm<int>(push((i0+20)), op(0x37))))
		__asm(push(i3>i2), iftrue, target("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_19_F"))
	__asm(lbl("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_18_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i2 =  (__2E_str1670)
		i3 =  (__2E_str1208)
		i5 =  (__ZZNK11b2LoopShape9GetVertexEiE8__func__)
		i6 =  (__2E_str4211)
		i1 =  (103)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i2), push((mstate.esp+4)), op(0x3c))
		__asm(push(i3), push((mstate.esp+8)), op(0x3c))
		__asm(push(i5), push((mstate.esp+12)), op(0x3c))
		__asm(push(i6), push((mstate.esp+16)), op(0x3c))
		__asm(push(i1), push((mstate.esp+20)), op(0x3c))
		__asm(jump, target("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_41_F"))
	__asm(lbl("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_19_F"))
		i0 =  ((__xasm<int>(push((i0+16)), op(0x37))))
		i2 =  (i2 << 3)
		i0 =  (i0 + i2)
		f11 =  ((__xasm<Number>(push(i0), op(0x38))))
		f0 =  f0/*fextend*/
		f12 =  f16/*fextend*/
		f8 =  f8/*fextend*/
		f9 =  f9/*fextend*/
		f2 =  f2/*fextend*/
		f13 =  (f12 * f11)
		f0 =  (f0 * f11)
		f11 =  (f8 * f9)
		f2 =  (f2 * f9)
		f16 =  f13/*fround*/
		f0 =  f0/*fround*/
		f9 =  f11/*fround*/
		f2 =  f2/*fround*/
		f11 =  ((__xasm<Number>(push((i0+4)), op(0x38))))
		f4 =  f4/*fextend*/
		f10 =  f10/*fextend*/
		f7 =  f7/*fextend*/
		f13 =  f16/*fextend*/
		f6 =  f6/*fextend*/
		f0 =  f0/*fextend*/
		f5 =  f5/*fextend*/
		f9 =  f9/*fextend*/
		f1 =  f1/*fextend*/
		f2 =  f2/*fextend*/
		f3 =  f3/*fextend*/
		f6 =  (f6 + f13)
		f0 =  (f5 + f0)
		f4 =  (f11 * f4)
		f5 =  (f12 * f11)
		f1 =  (f1 + f9)
		f8 =  (f8 * f10)
		f2 =  (f3 + f2)
		f3 =  (f10 * f7)
		f6 =  f6/*fround*/
		f0 =  f0/*fround*/
		f4 =  f4/*fround*/
		f5 =  f5/*fround*/
		f1 =  f1/*fround*/
		f7 =  f8/*fround*/
		f2 =  f2/*fround*/
		f3 =  f3/*fround*/
		f4 =  f4/*fextend*/
		f6 =  f6/*fextend*/
		f5 =  f5/*fextend*/
		f0 =  f0/*fextend*/
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f7 =  f7/*fextend*/
		f2 =  f2/*fextend*/
		f4 =  (f6 + f4)
		f0 =  (f0 + f5)
		f1 =  (f1 + f3)
		f2 =  (f2 + f7)
		f3 =  f4/*fround*/
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f2 =  f2/*fround*/
		f1 =  f1/*fextend*/
		f3 =  f3/*fextend*/
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f1 =  (f3 - f1)
		f0 =  (f0 - f2)
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		f2 =  ((__xasm<Number>(push(i6), op(0x38))))
		f3 =  ((__xasm<Number>(push(i5), op(0x38))))
		f1 =  f1/*fextend*/
		__asm(jump, target("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_30_F"))
	__asm(lbl("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_20_F"))
		i1 =  (-1)
		f9 =  ((__xasm<Number>(push((i0+92)), op(0x38))))
		f8 =  f8/*fextend*/
		f10 =  ((__xasm<Number>(push((i0+96)), op(0x38))))
		f7 =  f7/*fextend*/
		f11 =  (f8 * f9)
		f12 =  (f10 * f7)
		f11 =  f11/*fround*/
		f12 =  f12/*fround*/
		f2 =  f2/*fextend*/
		f12 =  f12/*fextend*/
		f11 =  f11/*fextend*/
		f9 =  (f2 * f9)
		f11 =  (f11 + f12)
		f10 =  (f8 * f10)
		f9 =  f9/*fround*/
		f11 =  f11/*fround*/
		f10 =  f10/*fround*/
		f12 =  f11/*fextend*/
		f10 =  f10/*fextend*/
		f9 =  f9/*fextend*/
		f9 =  (f9 + f10)
		f10 =  -f12
		f9 =  f9/*fround*/
		f10 =  f10/*fround*/
		f13 =  f0/*fextend*/
		f14 =  f9/*fextend*/
		f15 =  f16/*fextend*/
		f10 =  f10/*fextend*/
		f17 =  ((__xasm<Number>(push((i0+84)), op(0x38))))
		f18 =  ((__xasm<Number>(push((i0+88)), op(0x38))))
		f19 =  (f15 * f14)
		f14 =  (f13 * f14)
		f10 =  (f15 * f10)
		f12 =  (f12 * f13)
		f13 =  f19/*fround*/
		f14 =  f14/*fround*/
		f10 =  f10/*fround*/
		f12 =  f12/*fround*/
		__asm(push(i1), push(i2), op(0x3c))
		f13 =  f13/*fextend*/
		f12 =  f12/*fextend*/
		f14 =  f14/*fextend*/
		f10 =  f10/*fextend*/
		i2 =  ((__xasm<int>(push((i0+4)), op(0x37))))
		f12 =  (f12 - f13)
		f10 =  (f10 - f14)
		f13 =  (f8 * f17)
		f2 =  (f2 * f17)
		i1 =  ((__xasm<int>(push((i2+16)), op(0x37))))
		f12 =  f12/*fround*/
		f10 =  f10/*fround*/
		f13 =  f13/*fround*/
		f2 =  f2/*fround*/
		f14 =  ((__xasm<Number>(push(i1), op(0x38))))
		f15 =  f10/*fextend*/
		f17 =  ((__xasm<Number>(push((i1+4)), op(0x38))))
		f19 =  f12/*fextend*/
		f13 =  f13/*fextend*/
		f1 =  f1/*fextend*/
		f2 =  f2/*fextend*/
		f3 =  f3/*fextend*/
		f17 =  (f17 * f19)
		f14 =  (f14 * f15)
		f1 =  (f1 + f13)
		f2 =  (f3 + f2)
		f3 =  (f18 * f7)
		f7 =  (f8 * f18)
		f8 =  f17/*fround*/
		f13 =  f14/*fround*/
		f1 =  f1/*fround*/
		f2 =  f2/*fround*/
		f3 =  f3/*fround*/
		f7 =  f7/*fround*/
		f8 =  f8/*fextend*/
		f13 =  f13/*fextend*/
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f7 =  f7/*fextend*/
		f2 =  f2/*fextend*/
		i2 =  ((__xasm<int>(push((i2+20)), op(0x37))))
		f8 =  (f13 + f8)
		f1 =  (f1 + f3)
		f2 =  (f2 + f7)
		f3 =  f8/*fround*/
		f1 =  f1/*fround*/
		f2 =  f2/*fround*/
		i0 =  (i0 + 4)
		__asm(push(i2>1), iftrue, target("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_22_F"))
	__asm(lbl("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_21_F"))
		i2 =  (0)
		__asm(jump, target("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_25_F"))
	__asm(lbl("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_22_F"))
		i4 =  (0)
		i5 =  (1)
	__asm(jump, target("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_23_F"), lbl("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_23_B"), label, lbl("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_23_F")); 
		f7 =  ((__xasm<Number>(push((i1+8)), op(0x38))))
		f8 =  ((__xasm<Number>(push((i1+12)), op(0x38))))
		f13 =  f10/*fextend*/
		f14 =  f12/*fextend*/
		f7 =  (f7 * f13)
		f8 =  (f8 * f14)
		f7 =  f7/*fround*/
		f8 =  f8/*fround*/
		f8 =  f8/*fextend*/
		f7 =  f7/*fextend*/
		f7 =  (f7 + f8)
		f7 =  f7/*fround*/
		f3 =  f3/*fextend*/
		f7 =  f7/*fextend*/
		f8 =  ((f7>f3) ? f7 : f3)
		i4 =  ((f7>f3) ? i5 : i4)
		f3 =  f8/*fround*/
		i5 =  (i5 + 1)
		i1 =  (i1 + 8)
		__asm(push(i2>i5), iftrue, target("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_46_F"))
	__asm(lbl("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_24_F"))
		i2 = i4
		__asm(jump, target("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_25_F"))
	__asm(lbl("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_25_F"))
		__asm(push(i2), push(i3), op(0x3c))
		i0 =  ((__xasm<int>(push(i0), op(0x37))))
		__asm(push(i2<0), iftrue, target("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_27_F"))
	__asm(lbl("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_26_F"))
		i3 =  ((__xasm<int>(push((i0+20)), op(0x37))))
		__asm(push(i3>i2), iftrue, target("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_28_F"))
	__asm(lbl("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_27_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i2 =  (__2E_str1670)
		i3 =  (__2E_str1208)
		i1 =  (__ZZNK11b2LoopShape9GetVertexEiE8__func__)
		i4 =  (__2E_str4211)
		i5 =  (103)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i2), push((mstate.esp+4)), op(0x3c))
		__asm(push(i3), push((mstate.esp+8)), op(0x3c))
		__asm(push(i1), push((mstate.esp+12)), op(0x3c))
		__asm(jump, target("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_40_F"))
	__asm(lbl("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_28_F"))
		i0 =  ((__xasm<int>(push((i0+16)), op(0x37))))
		i2 =  (i2 << 3)
		i0 =  (i0 + i2)
		f3 =  ((__xasm<Number>(push(i0), op(0x38))))
		f0 =  f0/*fextend*/
		f7 =  f16/*fextend*/
		f8 =  (f7 * f3)
		f0 =  (f0 * f3)
		f3 =  f8/*fround*/
		f0 =  f0/*fround*/
		f8 =  ((__xasm<Number>(push((i0+4)), op(0x38))))
		f4 =  f4/*fextend*/
		f3 =  f3/*fextend*/
		f6 =  f6/*fextend*/
		f0 =  f0/*fextend*/
		f5 =  f5/*fextend*/
		f3 =  (f6 + f3)
		f0 =  (f5 + f0)
		f4 =  (f8 * f4)
		f5 =  (f7 * f8)
		f3 =  f3/*fround*/
		f0 =  f0/*fround*/
		f4 =  f4/*fround*/
		f5 =  f5/*fround*/
		f4 =  f4/*fextend*/
		f3 =  f3/*fextend*/
		f5 =  f5/*fextend*/
		f0 =  f0/*fextend*/
		f3 =  (f3 + f4)
		f0 =  (f0 + f5)
		f3 =  f3/*fround*/
		f0 =  f0/*fround*/
		f1 =  f1/*fextend*/
		f3 =  f3/*fextend*/
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f1 =  (f3 - f1)
		f0 =  (f0 - f2)
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		f2 =  f11/*fextend*/
	__asm(jump, target("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_29_F"), lbl("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_29_B"), label, lbl("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_29_F")); 
		f1 =  f1/*fextend*/
		f3 =  f9/*fextend*/
	__asm(lbl("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_30_F"))
		f0 =  f0/*fextend*/
		f1 =  (f1 * f2)
		f0 =  (f0 * f3)
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  (f1 + f0)
		f0 =  f0/*fround*/
		mstate.st0 = f0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_31_F"))
		i1 =  (-1)
		f9 =  ((__xasm<Number>(push((i0+92)), op(0x38))))
		f10 =  f16/*fextend*/
		f11 =  ((__xasm<Number>(push((i0+96)), op(0x38))))
		f4 =  f4/*fextend*/
		f12 =  (f10 * f9)
		f13 =  (f11 * f4)
		f12 =  f12/*fround*/
		f13 =  f13/*fround*/
		f0 =  f0/*fextend*/
		f13 =  f13/*fextend*/
		f12 =  f12/*fextend*/
		f9 =  (f0 * f9)
		f12 =  (f12 + f13)
		f11 =  (f10 * f11)
		f9 =  f9/*fround*/
		f12 =  f12/*fround*/
		f11 =  f11/*fround*/
		f13 =  f12/*fextend*/
		f11 =  f11/*fextend*/
		f9 =  f9/*fextend*/
		f9 =  (f9 + f11)
		f11 =  -f13
		f9 =  f9/*fround*/
		f11 =  f11/*fround*/
		f14 =  f2/*fextend*/
		f15 =  f9/*fextend*/
		f16 =  f8/*fextend*/
		f11 =  f11/*fextend*/
		f17 =  ((__xasm<Number>(push((i0+84)), op(0x38))))
		f18 =  ((__xasm<Number>(push((i0+88)), op(0x38))))
		f19 =  (f16 * f15)
		f15 =  (f14 * f15)
		f11 =  (f16 * f11)
		f13 =  (f13 * f14)
		f14 =  f19/*fround*/
		f15 =  f15/*fround*/
		f11 =  f11/*fround*/
		f13 =  f13/*fround*/
		__asm(push(i1), push(i3), op(0x3c))
		f14 =  f14/*fextend*/
		f13 =  f13/*fextend*/
		f15 =  f15/*fextend*/
		f11 =  f11/*fextend*/
		i1 =  ((__xasm<int>(push(i0), op(0x37))))
		f13 =  (f13 - f14)
		f11 =  (f11 - f15)
		f14 =  (f10 * f17)
		f0 =  (f0 * f17)
		i3 =  ((__xasm<int>(push((i1+16)), op(0x37))))
		f13 =  f13/*fround*/
		f11 =  f11/*fround*/
		f14 =  f14/*fround*/
		f0 =  f0/*fround*/
		f15 =  ((__xasm<Number>(push(i3), op(0x38))))
		f16 =  f11/*fextend*/
		f17 =  ((__xasm<Number>(push((i3+4)), op(0x38))))
		f19 =  f13/*fextend*/
		f14 =  f14/*fextend*/
		f6 =  f6/*fextend*/
		f0 =  f0/*fextend*/
		f5 =  f5/*fextend*/
		f17 =  (f17 * f19)
		f15 =  (f15 * f16)
		f6 =  (f6 + f14)
		f0 =  (f5 + f0)
		f4 =  (f18 * f4)
		f5 =  (f10 * f18)
		f10 =  f17/*fround*/
		f14 =  f15/*fround*/
		f6 =  f6/*fround*/
		f0 =  f0/*fround*/
		f4 =  f4/*fround*/
		f5 =  f5/*fround*/
		f10 =  f10/*fextend*/
		f14 =  f14/*fextend*/
		f4 =  f4/*fextend*/
		f6 =  f6/*fextend*/
		f5 =  f5/*fextend*/
		f0 =  f0/*fextend*/
		i1 =  ((__xasm<int>(push((i1+20)), op(0x37))))
		f10 =  (f14 + f10)
		f4 =  (f6 + f4)
		f0 =  (f0 + f5)
		f5 =  f10/*fround*/
		f4 =  f4/*fround*/
		f0 =  f0/*fround*/
		__asm(push(i1>1), iftrue, target("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_33_F"))
	__asm(lbl("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_32_F"))
		i1 =  (0)
		__asm(jump, target("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_36_F"))
	__asm(lbl("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_33_F"))
		i4 =  (0)
		i5 =  (1)
	__asm(jump, target("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_34_F"), lbl("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_34_B"), label, lbl("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_34_F")); 
		f6 =  ((__xasm<Number>(push((i3+8)), op(0x38))))
		f10 =  ((__xasm<Number>(push((i3+12)), op(0x38))))
		f14 =  f11/*fextend*/
		f15 =  f13/*fextend*/
		f6 =  (f6 * f14)
		f10 =  (f10 * f15)
		f6 =  f6/*fround*/
		f10 =  f10/*fround*/
		f10 =  f10/*fextend*/
		f6 =  f6/*fextend*/
		f6 =  (f6 + f10)
		f6 =  f6/*fround*/
		f5 =  f5/*fextend*/
		f6 =  f6/*fextend*/
		f10 =  ((f6>f5) ? f6 : f5)
		i4 =  ((f6>f5) ? i5 : i4)
		f5 =  f10/*fround*/
		i5 =  (i5 + 1)
		i3 =  (i3 + 8)
		__asm(push(i1>i5), iftrue, target("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_47_F"))
	__asm(lbl("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_35_F"))
		i1 = i4
		__asm(jump, target("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_36_F"))
	__asm(lbl("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_36_F"))
		__asm(push(i1), push(i2), op(0x3c))
		i0 =  ((__xasm<int>(push(i0), op(0x37))))
		__asm(push(i1<0), iftrue, target("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_38_F"))
	__asm(lbl("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_37_F"))
		i2 =  ((__xasm<int>(push((i0+20)), op(0x37))))
		__asm(push(i2>i1), iftrue, target("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_42_F"))
	__asm(lbl("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_38_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str1208)
		i3 =  (__ZZNK11b2LoopShape9GetVertexEiE8__func__)
		i4 =  (__2E_str4211)
		i5 =  (103)
	__asm(jump, target("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_39_F"), lbl("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_39_B"), label, lbl("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_39_F")); 
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
	__asm(lbl("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_40_F"))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
	__asm(lbl("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_41_F"))
		state = 1
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f_state1"))
		mstate.esp += 24
		state = 2
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f_state2"))
	__asm(lbl("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_42_F"))
		i0 =  ((__xasm<int>(push((i0+16)), op(0x37))))
		i1 =  (i1 << 3)
		i0 =  (i0 + i1)
		f5 =  ((__xasm<Number>(push(i0), op(0x38))))
		f2 =  f2/*fextend*/
		f6 =  f8/*fextend*/
		f8 =  (f6 * f5)
		f2 =  (f2 * f5)
		f5 =  f8/*fround*/
		f2 =  f2/*fround*/
		f8 =  ((__xasm<Number>(push((i0+4)), op(0x38))))
		f7 =  f7/*fextend*/
		f5 =  f5/*fextend*/
		f1 =  f1/*fextend*/
		f2 =  f2/*fextend*/
		f3 =  f3/*fextend*/
		f1 =  (f1 + f5)
		f2 =  (f3 + f2)
		f3 =  (f8 * f7)
		f5 =  (f6 * f8)
		f1 =  f1/*fround*/
		f2 =  f2/*fround*/
		f3 =  f3/*fround*/
		f5 =  f5/*fround*/
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f5 =  f5/*fextend*/
		f2 =  f2/*fextend*/
		f1 =  (f1 + f3)
		f2 =  (f2 + f5)
		f1 =  f1/*fround*/
		f2 =  f2/*fround*/
		f3 =  f4/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		f2 =  f2/*fextend*/
		f1 =  (f1 - f3)
		f0 =  (f2 - f0)
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		f2 =  f12/*fextend*/
		__asm(jump, target("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_29_B"))
	__asm(lbl("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_43_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str46253)
		i3 =  (__ZZNK20b2SeparationFunction17FindMinSeparationEPiS0_fE8__func__)
		i4 =  (__2E_str129321)
		i5 =  (183)
		__asm(jump, target("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_39_B"))
	__asm(lbl("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_44_F"))
		__asm(jump, target("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_6_B"))
	__asm(lbl("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_45_F"))
		__asm(jump, target("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_11_B"))
	__asm(lbl("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_46_F"))
		__asm(jump, target("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_23_B"))
	__asm(lbl("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_47_F"))
		__asm(jump, target("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f__XprivateX__BB429_34_B"))
	__asm(lbl("__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f_errState"))
		throw("Invalid state in __ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f")
	}
}



// Async
public const __ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener:int = regFunc(FSM__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener.start)

public final class FSM__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener extends Machine {

	public static function start():void {
			var result:FSM__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener = new FSM__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
	public var i8:int, i9:int, i10:int, i11:int, i12:int, i13:int

	public static const intRegCount:int = 14

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener_entry"))
		__asm(push(state), switchjump(
			"__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener_errState",
			"__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener_state0",
			"__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener_state1",
			"__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener_state2",
			"__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener_state3",
			"__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener_state4",
			"__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener_state5",
			"__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener_state6",
			"__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener_state7"))
	__asm(lbl("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener_state0"))
	__asm(lbl("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener__XprivateX__BB430_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (0)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i3 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		__asm(push(i2), push((i1+40)), op(0x3c))
		i4 =  ((__xasm<int>(push((mstate.ebp+20)), op(0x37))))
		__asm(push(i3), push((i1+44)), op(0x3c))
		__asm(push(i4), push((i1+48)), op(0x3c))
		__asm(push(i0), push((i1+28)), op(0x3c))
		__asm(push(i0), push((i1+36)), op(0x3c))
		i5 =  ((__xasm<int>(push((mstate.ebp+24)), op(0x37))))
		__asm(push(i0), push((i1+32)), op(0x3c))
		__asm(push(i5), push(i1), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+28)), op(0x37))))
		__asm(push(i0), push((i1+4)), op(0x3c))
		i0 =  ((__xasm<int>(push((i5+102796)), op(0x37))))
		i6 =  (i5 + 102796)
		i2 =  (i2 << 2)
		i7 =  (i1 + 40)
		i8 = i1
		__asm(push(i0<32), iftrue, target("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener__XprivateX__BB430_2_F"))
	__asm(lbl("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener__XprivateX__BB430_1_F"))
		i1 =  (___sF)
		mstate.esp -= 24
		i2 =  (__2E_str1670)
		i3 =  (__2E_str80287)
		i4 =  (__ZZN16b2StackAllocator8AllocateEiE8__func__)
		i5 =  (__2E_str10217)
		i6 =  (38)
		i1 =  (i1 + 176)
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i2), push((mstate.esp+4)), op(0x3c))
		__asm(push(i3), push((mstate.esp+8)), op(0x3c))
		__asm(push(i4), push((mstate.esp+12)), op(0x3c))
		__asm(push(i5), push((mstate.esp+16)), op(0x3c))
		__asm(push(i6), push((mstate.esp+20)), op(0x3c))
		__asm(jump, target("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener__XprivateX__BB430_8_F"))
	__asm(lbl("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener__XprivateX__BB430_2_F"))
		i0 =  ((__xasm<int>(push(i6), op(0x37))))
		i9 =  (i0 * 12)
		i9 =  (i5 + i9)
		__asm(push(i2), push((i9+102416)), op(0x3c))
		i9 =  ((__xasm<int>(push((i5+102400)), op(0x37))))
		i10 =  (i9 + i2)
		i11 =  (i5 + 102400)
		__asm(push(i10<102401), iftrue, target("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener__XprivateX__BB430_4_F"))
	__asm(lbl("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener__XprivateX__BB430_3_F"))
		i9 =  (0)
		mstate.esp -= 8
		__asm(push(i9), push(mstate.esp), op(0x3c))
		__asm(push(i2), push((mstate.esp+4)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener_state1"))
		i9 = mstate.eax
		i10 =  (i0 * 12)
		mstate.esp += 8
		i10 =  (i5 + i10)
		__asm(push(i9), push((i10+102412)), op(0x3c))
		i9 =  (1)
		__asm(push(i9), push((i10+102420)), op(0x3a))
		__asm(jump, target("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener__XprivateX__BB430_5_F"))
	__asm(lbl("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener__XprivateX__BB430_4_F"))
		i12 =  (0)
		i13 =  (i0 * 12)
		i13 =  (i5 + i13)
		i9 =  (i5 + i9)
		__asm(push(i9), push((i13+102412)), op(0x3c))
		__asm(push(i12), push((i13+102420)), op(0x3a))
		__asm(push(i10), push(i11), op(0x3c))
	__asm(lbl("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener__XprivateX__BB430_5_F"))
		i9 =  ((__xasm<int>(push((i5+102404)), op(0x37))))
		i2 =  (i9 + i2)
		__asm(push(i2), push((i5+102404)), op(0x3c))
		i9 =  ((__xasm<int>(push((i5+102408)), op(0x37))))
		i2 =  ((i9>i2) ? i9 : i2)
		i9 =  (i0 * 12)
		__asm(push(i2), push((i5+102408)), op(0x3c))
		i0 =  (i0 + 1)
		__asm(push(i0), push(i6), op(0x3c))
		i0 =  (i5 + i9)
		i0 =  ((__xasm<int>(push((i0+102412)), op(0x37))))
		__asm(push(i0), push((i1+8)), op(0x3c))
		i0 =  ((__xasm<int>(push(i8), op(0x37))))
		i2 =  ((__xasm<int>(push((i0+102796)), op(0x37))))
		i5 =  (i0 + 102796)
		i3 =  (i3 << 2)
		__asm(push(i2<32), iftrue, target("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener__XprivateX__BB430_9_F"))
	__asm(lbl("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener__XprivateX__BB430_6_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i3 =  (__2E_str80287)
		i4 =  (__ZZN16b2StackAllocator8AllocateEiE8__func__)
		i5 =  (__2E_str10217)
		i7 =  (38)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i3), push((mstate.esp+8)), op(0x3c))
	__asm(jump, target("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener__XprivateX__BB430_7_F"), lbl("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener__XprivateX__BB430_7_B"), label, lbl("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener__XprivateX__BB430_7_F")); 
		__asm(push(i4), push((mstate.esp+12)), op(0x3c))
		__asm(push(i5), push((mstate.esp+16)), op(0x3c))
		__asm(push(i7), push((mstate.esp+20)), op(0x3c))
	__asm(jump, target("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener__XprivateX__BB430_8_F"), lbl("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener__XprivateX__BB430_8_B"), label, lbl("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener__XprivateX__BB430_8_F")); 
		state = 2
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener_state2"))
		mstate.esp += 24
		state = 3
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener_state3"))
	__asm(lbl("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener__XprivateX__BB430_9_F"))
		i2 =  ((__xasm<int>(push(i5), op(0x37))))
		i6 =  (i2 * 12)
		i6 =  (i0 + i6)
		__asm(push(i3), push((i6+102416)), op(0x3c))
		i6 =  ((__xasm<int>(push((i0+102400)), op(0x37))))
		i9 =  (i6 + i3)
		i10 =  (i0 + 102400)
		__asm(push(i9<102401), iftrue, target("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener__XprivateX__BB430_11_F"))
	__asm(lbl("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener__XprivateX__BB430_10_F"))
		i6 =  (0)
		mstate.esp -= 8
		__asm(push(i6), push(mstate.esp), op(0x3c))
		__asm(push(i3), push((mstate.esp+4)), op(0x3c))
		state = 4
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener_state4"))
		i6 = mstate.eax
		i9 =  (i2 * 12)
		mstate.esp += 8
		i9 =  (i0 + i9)
		__asm(push(i6), push((i9+102412)), op(0x3c))
		i6 =  (1)
		__asm(push(i6), push((i9+102420)), op(0x3a))
		__asm(jump, target("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener__XprivateX__BB430_12_F"))
	__asm(lbl("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener__XprivateX__BB430_11_F"))
		i11 =  (0)
		i12 =  (i2 * 12)
		i12 =  (i0 + i12)
		i6 =  (i0 + i6)
		__asm(push(i6), push((i12+102412)), op(0x3c))
		__asm(push(i11), push((i12+102420)), op(0x3a))
		__asm(push(i9), push(i10), op(0x3c))
	__asm(lbl("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener__XprivateX__BB430_12_F"))
		i6 =  ((__xasm<int>(push((i0+102404)), op(0x37))))
		i3 =  (i6 + i3)
		__asm(push(i3), push((i0+102404)), op(0x3c))
		i6 =  ((__xasm<int>(push((i0+102408)), op(0x37))))
		i3 =  ((i6>i3) ? i6 : i3)
		__asm(push(i3), push((i0+102408)), op(0x3c))
		i3 =  ((__xasm<int>(push(i5), op(0x37))))
		i2 =  (i2 * 12)
		i3 =  (i3 + 1)
		__asm(push(i3), push(i5), op(0x3c))
		i0 =  (i0 + i2)
		i0 =  ((__xasm<int>(push((i0+102412)), op(0x37))))
		__asm(push(i0), push((i1+12)), op(0x3c))
		i0 =  ((__xasm<int>(push(i8), op(0x37))))
		i2 =  ((__xasm<int>(push((i0+102796)), op(0x37))))
		i3 =  (i0 + 102796)
		i4 =  (i4 << 2)
		__asm(push(i2<32), iftrue, target("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener__XprivateX__BB430_14_F"))
	__asm(lbl("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener__XprivateX__BB430_13_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i3 =  (__2E_str80287)
		i4 =  (__ZZN16b2StackAllocator8AllocateEiE8__func__)
		i7 =  (__2E_str10217)
		i8 =  (38)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i3), push((mstate.esp+8)), op(0x3c))
		__asm(push(i4), push((mstate.esp+12)), op(0x3c))
		__asm(push(i7), push((mstate.esp+16)), op(0x3c))
		__asm(push(i8), push((mstate.esp+20)), op(0x3c))
		__asm(jump, target("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener__XprivateX__BB430_8_B"))
	__asm(lbl("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener__XprivateX__BB430_14_F"))
		i2 =  ((__xasm<int>(push(i3), op(0x37))))
		i5 =  (i2 * 12)
		i5 =  (i0 + i5)
		__asm(push(i4), push((i5+102416)), op(0x3c))
		i5 =  ((__xasm<int>(push((i0+102400)), op(0x37))))
		i6 =  (i5 + i4)
		i9 =  (i0 + 102400)
		__asm(push(i6<102401), iftrue, target("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener__XprivateX__BB430_16_F"))
	__asm(lbl("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener__XprivateX__BB430_15_F"))
		i5 =  (0)
		mstate.esp -= 8
		__asm(push(i5), push(mstate.esp), op(0x3c))
		__asm(push(i4), push((mstate.esp+4)), op(0x3c))
		state = 5
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener_state5"))
		i5 = mstate.eax
		i6 =  (i2 * 12)
		mstate.esp += 8
		i6 =  (i0 + i6)
		__asm(push(i5), push((i6+102412)), op(0x3c))
		i5 =  (1)
		__asm(push(i5), push((i6+102420)), op(0x3a))
		__asm(jump, target("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener__XprivateX__BB430_17_F"))
	__asm(lbl("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener__XprivateX__BB430_16_F"))
		i10 =  (0)
		i11 =  (i2 * 12)
		i11 =  (i0 + i11)
		i5 =  (i0 + i5)
		__asm(push(i5), push((i11+102412)), op(0x3c))
		__asm(push(i10), push((i11+102420)), op(0x3a))
		__asm(push(i6), push(i9), op(0x3c))
	__asm(lbl("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener__XprivateX__BB430_17_F"))
		i5 =  ((__xasm<int>(push((i0+102404)), op(0x37))))
		i4 =  (i5 + i4)
		__asm(push(i4), push((i0+102404)), op(0x3c))
		i5 =  ((__xasm<int>(push((i0+102408)), op(0x37))))
		i4 =  ((i5>i4) ? i5 : i4)
		__asm(push(i4), push((i0+102408)), op(0x3c))
		i4 =  ((__xasm<int>(push(i3), op(0x37))))
		i2 =  (i2 * 12)
		i4 =  (i4 + 1)
		__asm(push(i4), push(i3), op(0x3c))
		i0 =  (i0 + i2)
		i0 =  ((__xasm<int>(push((i0+102412)), op(0x37))))
		__asm(push(i0), push((i1+16)), op(0x3c))
		i0 =  ((__xasm<int>(push(i8), op(0x37))))
		i2 =  ((__xasm<int>(push(i7), op(0x37))))
		i3 =  ((__xasm<int>(push((i0+102796)), op(0x37))))
		i4 =  (i0 + 102796)
		i5 =  (i2 * 12)
		__asm(push(i3<32), iftrue, target("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener__XprivateX__BB430_19_F"))
	__asm(lbl("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener__XprivateX__BB430_18_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str80287)
		i4 =  (__ZZN16b2StackAllocator8AllocateEiE8__func__)
		i5 =  (__2E_str10217)
		i7 =  (38)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(jump, target("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener__XprivateX__BB430_7_B"))
	__asm(lbl("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener__XprivateX__BB430_19_F"))
		i3 =  ((__xasm<int>(push(i4), op(0x37))))
		i6 =  (i3 * 12)
		i6 =  (i0 + i6)
		__asm(push(i5), push((i6+102416)), op(0x3c))
		i6 =  ((__xasm<int>(push((i0+102400)), op(0x37))))
		i9 =  (i6 + i5)
		i10 =  (i0 + 102400)
		__asm(push(i9<102401), iftrue, target("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener__XprivateX__BB430_21_F"))
	__asm(lbl("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener__XprivateX__BB430_20_F"))
		i6 =  (0)
		mstate.esp -= 8
		i9 =  (i2 * 12)
		__asm(push(i6), push(mstate.esp), op(0x3c))
		__asm(push(i9), push((mstate.esp+4)), op(0x3c))
		state = 6
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener_state6"))
		i6 = mstate.eax
		i9 =  (i3 * 12)
		mstate.esp += 8
		i9 =  (i0 + i9)
		__asm(push(i6), push((i9+102412)), op(0x3c))
		i6 =  (1)
		__asm(push(i6), push((i9+102420)), op(0x3a))
		__asm(jump, target("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener__XprivateX__BB430_22_F"))
	__asm(lbl("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener__XprivateX__BB430_21_F"))
		i2 =  (0)
		i11 =  (i3 * 12)
		i11 =  (i0 + i11)
		i6 =  (i0 + i6)
		__asm(push(i6), push((i11+102412)), op(0x3c))
		__asm(push(i2), push((i11+102420)), op(0x3a))
		__asm(push(i9), push(i10), op(0x3c))
	__asm(lbl("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener__XprivateX__BB430_22_F"))
		i2 =  ((__xasm<int>(push((i0+102404)), op(0x37))))
		i2 =  (i2 + i5)
		__asm(push(i2), push((i0+102404)), op(0x3c))
		i5 =  ((__xasm<int>(push((i0+102408)), op(0x37))))
		i2 =  ((i5>i2) ? i5 : i2)
		__asm(push(i2), push((i0+102408)), op(0x3c))
		i2 =  ((__xasm<int>(push(i4), op(0x37))))
		i3 =  (i3 * 12)
		i2 =  (i2 + 1)
		__asm(push(i2), push(i4), op(0x3c))
		i0 =  (i0 + i3)
		i0 =  ((__xasm<int>(push((i0+102412)), op(0x37))))
		__asm(push(i0), push((i1+24)), op(0x3c))
		i0 =  ((__xasm<int>(push(i8), op(0x37))))
		i2 =  ((__xasm<int>(push(i7), op(0x37))))
		i3 =  ((__xasm<int>(push((i0+102796)), op(0x37))))
		i4 =  (i0 + 102796)
		i5 =  (i2 * 12)
		__asm(push(i3<32), iftrue, target("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener__XprivateX__BB430_24_F"))
	__asm(lbl("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener__XprivateX__BB430_23_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str80287)
		i4 =  (__ZZN16b2StackAllocator8AllocateEiE8__func__)
		i5 =  (__2E_str10217)
		i3 =  (38)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i4), push((mstate.esp+12)), op(0x3c))
		__asm(push(i5), push((mstate.esp+16)), op(0x3c))
		__asm(push(i3), push((mstate.esp+20)), op(0x3c))
		__asm(jump, target("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener__XprivateX__BB430_8_B"))
	__asm(lbl("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener__XprivateX__BB430_24_F"))
		i3 =  ((__xasm<int>(push(i4), op(0x37))))
		i6 =  (i3 * 12)
		i6 =  (i0 + i6)
		__asm(push(i5), push((i6+102416)), op(0x3c))
		i6 =  ((__xasm<int>(push((i0+102400)), op(0x37))))
		i7 =  (i6 + i5)
		i8 =  (i0 + 102400)
		__asm(push(i7<102401), iftrue, target("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener__XprivateX__BB430_26_F"))
	__asm(lbl("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener__XprivateX__BB430_25_F"))
		i6 =  (0)
		mstate.esp -= 8
		i7 =  (i2 * 12)
		__asm(push(i6), push(mstate.esp), op(0x3c))
		__asm(push(i7), push((mstate.esp+4)), op(0x3c))
		state = 7
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener_state7"))
		i6 = mstate.eax
		i7 =  (i3 * 12)
		mstate.esp += 8
		i7 =  (i0 + i7)
		__asm(push(i6), push((i7+102412)), op(0x3c))
		i6 =  (1)
		__asm(push(i6), push((i7+102420)), op(0x3a))
		__asm(jump, target("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener__XprivateX__BB430_27_F"))
	__asm(lbl("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener__XprivateX__BB430_26_F"))
		i2 =  (0)
		i9 =  (i3 * 12)
		i9 =  (i0 + i9)
		i6 =  (i0 + i6)
		__asm(push(i6), push((i9+102412)), op(0x3c))
		__asm(push(i2), push((i9+102420)), op(0x3a))
		__asm(push(i7), push(i8), op(0x3c))
	__asm(lbl("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener__XprivateX__BB430_27_F"))
		i2 =  ((__xasm<int>(push((i0+102404)), op(0x37))))
		i2 =  (i2 + i5)
		__asm(push(i2), push((i0+102404)), op(0x3c))
		i5 =  ((__xasm<int>(push((i0+102408)), op(0x37))))
		i2 =  ((i5>i2) ? i5 : i2)
		__asm(push(i2), push((i0+102408)), op(0x3c))
		i2 =  ((__xasm<int>(push(i4), op(0x37))))
		i3 =  (i3 * 12)
		i2 =  (i2 + 1)
		__asm(push(i2), push(i4), op(0x3c))
		i0 =  (i0 + i3)
		i0 =  ((__xasm<int>(push((i0+102412)), op(0x37))))
		__asm(push(i0), push((i1+20)), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener_errState"))
		throw("Invalid state in __ZN8b2IslandC1EiiiP16b2StackAllocatorP17b2ContactListener")
	}
}



// Async
public const __ZN15b2ContactSolverC1EP18b2ContactSolverDef:int = regFunc(FSM__ZN15b2ContactSolverC1EP18b2ContactSolverDef.start)

public final class FSM__ZN15b2ContactSolverC1EP18b2ContactSolverDef extends Machine {

	public static function start():void {
			var result:FSM__ZN15b2ContactSolverC1EP18b2ContactSolverDef = new FSM__ZN15b2ContactSolverC1EP18b2ContactSolverDef
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
	public var i8:int, i9:int, i10:int, i11:int, i12:int, i13:int, i14:int, i15:int
	public var i16:int, i17:int, i18:int, i19:int

	public static const intRegCount:int = 20
	public var f0:Number, f1:Number, f2:Number, f3:Number

	public static const NumberRegCount:int = 4
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN15b2ContactSolverC1EP18b2ContactSolverDef_entry"))
		__asm(push(state), switchjump(
			"__ZN15b2ContactSolverC1EP18b2ContactSolverDef_errState",
			"__ZN15b2ContactSolverC1EP18b2ContactSolverDef_state0",
			"__ZN15b2ContactSolverC1EP18b2ContactSolverDef_state1",
			"__ZN15b2ContactSolverC1EP18b2ContactSolverDef_state2",
			"__ZN15b2ContactSolverC1EP18b2ContactSolverDef_state3"))
	__asm(lbl("__ZN15b2ContactSolverC1EP18b2ContactSolverDef_state0"))
	__asm(lbl("__ZN15b2ContactSolverC1EP18b2ContactSolverDef__XprivateX__BB431_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i2 =  ((__xasm<int>(push((i0+8)), op(0x37))))
		__asm(push(i2), push(i1), op(0x3c))
		i3 =  ((__xasm<int>(push((i0+4)), op(0x37))))
		__asm(push(i3), push((i1+8)), op(0x3c))
		i4 =  ((__xasm<int>(push((i2+102796)), op(0x37))))
		i5 =  (i2 + 102796)
		i6 =  (i3 * 188)
		i7 =  (i1 + 8)
		__asm(push(i4<32), iftrue, target("__ZN15b2ContactSolverC1EP18b2ContactSolverDef__XprivateX__BB431_3_F"))
	__asm(lbl("__ZN15b2ContactSolverC1EP18b2ContactSolverDef__XprivateX__BB431_1_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str80287)
		i3 =  (__ZZN16b2StackAllocator8AllocateEiE8__func__)
		i5 =  (__2E_str10217)
		i6 =  (38)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i5), push((mstate.esp+16)), op(0x3c))
		__asm(push(i6), push((mstate.esp+20)), op(0x3c))
	__asm(jump, target("__ZN15b2ContactSolverC1EP18b2ContactSolverDef__XprivateX__BB431_2_F"), lbl("__ZN15b2ContactSolverC1EP18b2ContactSolverDef__XprivateX__BB431_2_B"), label, lbl("__ZN15b2ContactSolverC1EP18b2ContactSolverDef__XprivateX__BB431_2_F")); 
		state = 1
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__ZN15b2ContactSolverC1EP18b2ContactSolverDef_state1"))
		mstate.esp += 24
		state = 2
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZN15b2ContactSolverC1EP18b2ContactSolverDef_state2"))
	__asm(lbl("__ZN15b2ContactSolverC1EP18b2ContactSolverDef__XprivateX__BB431_3_F"))
		i4 =  ((__xasm<int>(push(i5), op(0x37))))
		i8 =  (i4 * 12)
		i8 =  (i2 + i8)
		__asm(push(i6), push((i8+102416)), op(0x3c))
		i8 =  ((__xasm<int>(push((i2+102400)), op(0x37))))
		i9 =  (i8 + i6)
		i10 =  (i2 + 102400)
		__asm(push(i9<102401), iftrue, target("__ZN15b2ContactSolverC1EP18b2ContactSolverDef__XprivateX__BB431_5_F"))
	__asm(lbl("__ZN15b2ContactSolverC1EP18b2ContactSolverDef__XprivateX__BB431_4_F"))
		i8 =  (0)
		mstate.esp -= 8
		i9 =  (i3 * 188)
		__asm(push(i8), push(mstate.esp), op(0x3c))
		__asm(push(i9), push((mstate.esp+4)), op(0x3c))
		state = 3
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN15b2ContactSolverC1EP18b2ContactSolverDef_state3"))
		i8 = mstate.eax
		i9 =  (i4 * 12)
		mstate.esp += 8
		i9 =  (i2 + i9)
		__asm(push(i8), push((i9+102412)), op(0x3c))
		i8 =  (1)
		__asm(push(i8), push((i9+102420)), op(0x3a))
		__asm(jump, target("__ZN15b2ContactSolverC1EP18b2ContactSolverDef__XprivateX__BB431_6_F"))
	__asm(lbl("__ZN15b2ContactSolverC1EP18b2ContactSolverDef__XprivateX__BB431_5_F"))
		i3 =  (0)
		i11 =  (i4 * 12)
		i11 =  (i2 + i11)
		i8 =  (i2 + i8)
		__asm(push(i8), push((i11+102412)), op(0x3c))
		__asm(push(i3), push((i11+102420)), op(0x3a))
		__asm(push(i9), push(i10), op(0x3c))
	__asm(lbl("__ZN15b2ContactSolverC1EP18b2ContactSolverDef__XprivateX__BB431_6_F"))
		i3 =  ((__xasm<int>(push((i2+102404)), op(0x37))))
		i3 =  (i3 + i6)
		__asm(push(i3), push((i2+102404)), op(0x3c))
		i6 =  ((__xasm<int>(push((i2+102408)), op(0x37))))
		i3 =  ((i6>i3) ? i6 : i3)
		__asm(push(i3), push((i2+102408)), op(0x3c))
		i3 =  ((__xasm<int>(push(i5), op(0x37))))
		i4 =  (i4 * 12)
		i3 =  (i3 + 1)
		__asm(push(i3), push(i5), op(0x3c))
		i2 =  (i2 + i4)
		i2 =  ((__xasm<int>(push((i2+102412)), op(0x37))))
		__asm(push(i2), push((i1+4)), op(0x3c))
		i2 =  ((__xasm<int>(push(i7), op(0x37))))
		i1 =  (i1 + 4)
		__asm(push(i2<1), iftrue, target("__ZN15b2ContactSolverC1EP18b2ContactSolverDef__XprivateX__BB431_22_F"))
	__asm(lbl("__ZN15b2ContactSolverC1EP18b2ContactSolverDef__XprivateX__BB431_7_F"))
		i2 =  (0)
		i3 =  (i0 + 12)
		i4 =  (i0 + 16)
		i5 = i2
		i6 = i2
	__asm(jump, target("__ZN15b2ContactSolverC1EP18b2ContactSolverDef__XprivateX__BB431_8_F"), lbl("__ZN15b2ContactSolverC1EP18b2ContactSolverDef__XprivateX__BB431_8_B"), label, lbl("__ZN15b2ContactSolverC1EP18b2ContactSolverDef__XprivateX__BB431_8_F")); 
		i8 =  ((__xasm<int>(push(i0), op(0x37))))
		i8 =  (i8 + i6)
		i8 =  ((__xasm<int>(push(i8), op(0x37))))
		i9 =  ((__xasm<int>(push((i8+48)), op(0x37))))
		i10 =  ((__xasm<int>(push((i8+52)), op(0x37))))
		i11 =  ((__xasm<int>(push((i9+16)), op(0x37))))
		i12 =  ((__xasm<int>(push((i10+16)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i11+8)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i12+8)), op(0x38))))
		i11 =  ((__xasm<int>(push((i9+12)), op(0x37))))
		i12 =  ((__xasm<int>(push((i10+12)), op(0x37))))
		i13 =  ((__xasm<int>(push((i8+132)), op(0x37))))
		i14 =  (i8 + 132)
		i15 =  (i8 + 64)
		i16 = i8
		__asm(push(i13>0), iftrue, target("__ZN15b2ContactSolverC1EP18b2ContactSolverDef__XprivateX__BB431_10_F"))
	__asm(lbl("__ZN15b2ContactSolverC1EP18b2ContactSolverDef__XprivateX__BB431_9_F"))
		i2 =  (___sF)
		mstate.esp -= 24
		i5 =  (__2E_str1670)
		i6 =  (__2E_str139328)
		i0 =  (__ZZN15b2ContactSolverC4EP18b2ContactSolverDefE8__func__)
		i1 =  (__2E_str60267)
		i3 =  (52)
		i2 =  (i2 + 176)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i5), push((mstate.esp+4)), op(0x3c))
		__asm(push(i6), push((mstate.esp+8)), op(0x3c))
		__asm(push(i0), push((mstate.esp+12)), op(0x3c))
		__asm(push(i1), push((mstate.esp+16)), op(0x3c))
		__asm(push(i3), push((mstate.esp+20)), op(0x3c))
		__asm(jump, target("__ZN15b2ContactSolverC1EP18b2ContactSolverDef__XprivateX__BB431_2_B"))
	__asm(lbl("__ZN15b2ContactSolverC1EP18b2ContactSolverDef__XprivateX__BB431_10_F"))
		i13 =  ((__xasm<int>(push(i1), op(0x37))))
		i17 =  ((__xasm<int>(push((i16+144)), op(0x35))))
		i18 =  (i16 + 144)
		__asm(push(i17==0), iftrue, target("__ZN15b2ContactSolverC1EP18b2ContactSolverDef__XprivateX__BB431_12_F"))
	__asm(lbl("__ZN15b2ContactSolverC1EP18b2ContactSolverDef__XprivateX__BB431_11_F"))
		i17 =  (0)
		i19 =  (i13 + i5)
		__asm(push(i17), push((i19+164)), op(0x3c))
		__asm(push(i17), push(i18), op(0x3a))
		__asm(jump, target("__ZN15b2ContactSolverC1EP18b2ContactSolverDef__XprivateX__BB431_13_F"))
	__asm(lbl("__ZN15b2ContactSolverC1EP18b2ContactSolverDef__XprivateX__BB431_12_F"))
		f2 =  ((__xasm<Number>(push((i10+20)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i9+20)), op(0x38))))
		f2 =  (f3 * f2)
		f2 =  f2/*fround*/
		f2 =  f2/*fextend*/
		f2 =  Math.sqrt(f2)
		f2 =  f2/*fround*/
		i17 =  (i13 + i5)
		__asm(push(f2), push((i17+164)), op(0x3d))
	__asm(lbl("__ZN15b2ContactSolverC1EP18b2ContactSolverDef__XprivateX__BB431_13_F"))
		i17 =  (0)
		f2 =  ((__xasm<Number>(push((i10+24)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i9+24)), op(0x38))))
		f2 =  ((f3>f2) ? f3 : f2)
		f2 =  f2/*fround*/
		i18 =  (i13 + i5)
		__asm(push(f2), push((i18+168)), op(0x3d))
		__asm(push(i11), push((i18+144)), op(0x3c))
		__asm(push(i12), push((i18+148)), op(0x3c))
		__asm(push(i15), push((i18+176)), op(0x3c))
		__asm(push(i17), push((i18+104)), op(0x3c))
		__asm(push(i17), push((i18+108)), op(0x3c))
		i11 =  ((__xasm<int>(push(i14), op(0x37))))
		__asm(push(i11), push((i18+172)), op(0x3c))
		f2 =  ((__xasm<Number>(push((i16+112)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i16+116)), op(0x38))))
		__asm(push(f2), push((i18+88)), op(0x3d))
		__asm(push(f3), push((i18+92)), op(0x3d))
		f2 =  ((__xasm<Number>(push((i16+120)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i16+124)), op(0x38))))
		__asm(push(f2), push((i18+96)), op(0x3d))
		__asm(push(f3), push((i18+100)), op(0x3d))
		__asm(push(f0), push((i18+156)), op(0x3d))
		__asm(push(f1), push((i18+160)), op(0x3d))
		i12 =  ((__xasm<int>(push((i16+128)), op(0x37))))
		__asm(push(i12), push((i18+152)), op(0x3c))
		__asm(push(i9), push((i18+180)), op(0x3c))
		__asm(push(i10), push((i18+184)), op(0x3c))
		__asm(push(i11<1), iftrue, target("__ZN15b2ContactSolverC1EP18b2ContactSolverDef__XprivateX__BB431_20_F"))
	__asm(lbl("__ZN15b2ContactSolverC1EP18b2ContactSolverDef__XprivateX__BB431_14_F"))
		i9 =  (0)
		i10 =  (i13 + i5)
	__asm(jump, target("__ZN15b2ContactSolverC1EP18b2ContactSolverDef__XprivateX__BB431_15_F"), lbl("__ZN15b2ContactSolverC1EP18b2ContactSolverDef__XprivateX__BB431_15_B"), label, lbl("__ZN15b2ContactSolverC1EP18b2ContactSolverDef__XprivateX__BB431_15_F")); 
		i12 =  ((__xasm<int>(push(i4), op(0x35))))
		i14 = i10
		__asm(push(i12==0), iftrue, target("__ZN15b2ContactSolverC1EP18b2ContactSolverDef__XprivateX__BB431_17_F"))
	__asm(lbl("__ZN15b2ContactSolverC1EP18b2ContactSolverDef__XprivateX__BB431_16_F"))
		f0 =  ((__xasm<Number>(push(i3), op(0x38))))
		f1 =  ((__xasm<Number>(push((i8+72)), op(0x38))))
		f0 =  (f0 * f1)
		f0 =  f0/*fround*/
		__asm(push(f0), push((i10+24)), op(0x3d))
		f0 =  ((__xasm<Number>(push(i3), op(0x38))))
		f1 =  ((__xasm<Number>(push((i8+76)), op(0x38))))
		f0 =  (f0 * f1)
		f0 =  f0/*fround*/
		__asm(push(f0), push((i10+28)), op(0x3d))
		__asm(jump, target("__ZN15b2ContactSolverC1EP18b2ContactSolverDef__XprivateX__BB431_18_F"))
	__asm(lbl("__ZN15b2ContactSolverC1EP18b2ContactSolverDef__XprivateX__BB431_17_F"))
		i12 =  (0)
		__asm(push(i12), push((i10+24)), op(0x3c))
		__asm(push(i12), push((i10+28)), op(0x3c))
	__asm(lbl("__ZN15b2ContactSolverC1EP18b2ContactSolverDef__XprivateX__BB431_18_F"))
		i12 =  (0)
		f0 =  ((__xasm<Number>(push((i8+64)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i8+68)), op(0x38))))
		__asm(push(f0), push(i14), op(0x3d))
		__asm(push(f1), push((i10+4)), op(0x3d))
		__asm(push(i12), push((i10+8)), op(0x3c))
		__asm(push(i12), push((i10+12)), op(0x3c))
		__asm(push(i12), push((i10+16)), op(0x3c))
		__asm(push(i12), push((i10+20)), op(0x3c))
		__asm(push(i12), push((i10+32)), op(0x3c))
		__asm(push(i12), push((i10+36)), op(0x3c))
		__asm(push(i12), push((i10+40)), op(0x3c))
		i10 =  (i10 + 44)
		i8 =  (i8 + 24)
		i9 =  (i9 + 1)
		__asm(push(i11<=i9), iftrue, target("__ZN15b2ContactSolverC1EP18b2ContactSolverDef__XprivateX__BB431_20_F"))
	__asm(lbl("__ZN15b2ContactSolverC1EP18b2ContactSolverDef__XprivateX__BB431_19_F"))
		__asm(jump, target("__ZN15b2ContactSolverC1EP18b2ContactSolverDef__XprivateX__BB431_15_B"))
	__asm(lbl("__ZN15b2ContactSolverC1EP18b2ContactSolverDef__XprivateX__BB431_20_F"))
		i8 =  (0)
		i9 =  (i13 + i5)
		__asm(push(i8), push((i9+128)), op(0x3c))
		__asm(push(i8), push((i9+136)), op(0x3c))
		__asm(push(i8), push((i9+132)), op(0x3c))
		__asm(push(i8), push((i9+140)), op(0x3c))
		__asm(push(i8), push((i9+112)), op(0x3c))
		__asm(push(i8), push((i9+120)), op(0x3c))
		__asm(push(i8), push((i9+116)), op(0x3c))
		__asm(push(i8), push((i9+124)), op(0x3c))
		i8 =  ((__xasm<int>(push(i7), op(0x37))))
		i5 =  (i5 + 188)
		i6 =  (i6 + 4)
		i2 =  (i2 + 1)
		__asm(push(i8<=i2), iftrue, target("__ZN15b2ContactSolverC1EP18b2ContactSolverDef__XprivateX__BB431_22_F"))
	__asm(lbl("__ZN15b2ContactSolverC1EP18b2ContactSolverDef__XprivateX__BB431_21_F"))
		__asm(jump, target("__ZN15b2ContactSolverC1EP18b2ContactSolverDef__XprivateX__BB431_8_B"))
	__asm(lbl("__ZN15b2ContactSolverC1EP18b2ContactSolverDef__XprivateX__BB431_22_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN15b2ContactSolverC1EP18b2ContactSolverDef_errState"))
		throw("Invalid state in __ZN15b2ContactSolverC1EP18b2ContactSolverDef")
	}
}



// Async
public const __Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6_:int = regFunc(FSM__Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6_.start)

public final class FSM__Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6_ extends Machine {

	public static function start():void {
			var result:FSM__Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6_ = new FSM__Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6_
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int

	public static const intRegCount:int = 6
	public var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number
	public var f8:Number, f9:Number, f10:Number, f11:Number, f12:Number, f13:Number, f14:Number, f15:Number
	public var f16:Number

	public static const NumberRegCount:int = 17
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6__entry"))
		__asm(push(state), switchjump(
			"__Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6__errState",
			"__Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6__state0",
			"__Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6__state1",
			"__Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6__state2"))
	__asm(lbl("__Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6__state0"))
	__asm(lbl("__Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6___XprivateX__BB432_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  (0)
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+20)), op(0x37))))
		__asm(push(i0), push((i1+68)), op(0x3c))
		i0 =  ((__xasm<int>(push((mstate.ebp+24)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i0+8)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i2+16)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i0+12)), op(0x38))))
		f0 =  (f0 * f1)
		f1 =  (f2 * f1)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f2 =  ((__xasm<Number>(push(i0), op(0x38))))
		f0 =  f0/*fextend*/
		f3 =  ((__xasm<Number>(push((i0+16)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i2+20)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i0+20)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i0+4)), op(0x38))))
		f1 =  f1/*fextend*/
		f0 =  (f2 + f0)
		f1 =  (f6 + f1)
		f2 =  (f3 * f4)
		f3 =  (f5 * f4)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f2 =  f2/*fround*/
		f3 =  f3/*fround*/
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  (f0 + f2)
		f1 =  (f1 + f3)
		i0 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f2 =  ((__xasm<Number>(push((i0+4)), op(0x38))))
		f1 =  f1/*fextend*/
		f3 =  ((__xasm<Number>(push(i0), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f0 - f3)
		f1 =  (f1 - f2)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f2 =  ((__xasm<Number>(push((i0+16)), op(0x38))))
		f0 =  f0/*fextend*/
		f3 =  ((__xasm<Number>(push((i0+8)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i0+20)), op(0x38))))
		f1 =  f1/*fextend*/
		f5 =  ((__xasm<Number>(push((i0+12)), op(0x38))))
		f2 =  (f0 * f2)
		f0 =  (f0 * f3)
		f3 =  (f1 * f4)
		f1 =  (f1 * f5)
		f2 =  f2/*fround*/
		f0 =  f0/*fround*/
		f3 =  f3/*fround*/
		f1 =  f1/*fround*/
		f3 =  f3/*fextend*/
		f2 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		i0 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		f2 =  (f2 + f3)
		f0 =  (f0 + f1)
		f1 =  ((__xasm<Number>(push((i0+16)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i0+20)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i0+24)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i0+28)), op(0x38))))
		f2 =  f2/*fround*/
		f0 =  f0/*fround*/
		f6 =  f2/*fextend*/
		f7 =  f3/*fextend*/
		f8 =  f5/*fextend*/
		f9 =  f0/*fextend*/
		f10 =  f1/*fextend*/
		f11 =  f4/*fextend*/
		f12 =  (f8 - f6)
		f6 =  (f6 - f7)
		f13 =  (f11 - f9)
		f9 =  (f9 - f10)
		f10 =  (f11 - f10)
		f7 =  (f8 - f7)
		f8 =  f12/*fround*/
		f6 =  f6/*fround*/
		f11 =  f13/*fround*/
		f9 =  f9/*fround*/
		f10 =  f10/*fround*/
		f7 =  f7/*fround*/
		f8 =  f8/*fextend*/
		f12 =  f7/*fextend*/
		f13 =  f6/*fextend*/
		f11 =  f11/*fextend*/
		f14 =  f10/*fextend*/
		f15 =  f9/*fextend*/
		f8 =  (f12 * f8)
		f12 =  (f12 * f13)
		f11 =  (f14 * f11)
		f13 =  (f14 * f15)
		f8 =  f8/*fround*/
		f12 =  f12/*fround*/
		f11 =  f11/*fround*/
		f13 =  f13/*fround*/
		f14 =  ((__xasm<Number>(push((i0+8)), op(0x38))))
		f15 =  ((__xasm<Number>(push((i2+8)), op(0x38))))
		f8 =  f8/*fextend*/
		f11 =  f11/*fextend*/
		f12 =  f12/*fextend*/
		f13 =  f13/*fextend*/
		f8 =  (f11 + f8)
		f11 =  (f13 + f12)
		f12 =  (f14 + f15)
		f11 =  f11/*fround*/
		f8 =  f8/*fround*/
		f12 =  f12/*fround*/
		f13 =  (0)
		i3 =  (i2 + 20)
		i2 =  (i2 + 16)
		i4 =  (i1 + 68)
		f13 =  f13/*fround*/
		f13 =  f13/*fextend*/
		f14 =  f11/*fextend*/
		__asm(push(f14>f13), iftrue, target("__Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6___XprivateX__BB432_5_F"))
	__asm(lbl("__Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6___XprivateX__BB432_1_F"))
		f4 =  f9/*fextend*/
		f5 =  f6/*fextend*/
		f4 =  (f4 * f4)
		f5 =  (f5 * f5)
		f4 =  f4/*fround*/
		f5 =  f5/*fround*/
		f6 =  f12/*fextend*/
		f5 =  f5/*fextend*/
		f4 =  f4/*fextend*/
		f4 =  (f4 + f5)
		f5 =  (f6 * f6)
		f4 =  f4/*fround*/
		f5 =  f5/*fround*/
		f4 =  f4/*fextend*/
		f5 =  f5/*fextend*/
		__asm(push(f5<f4), iftrue, target("__Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6___XprivateX__BB432_12_F"))
	__asm(lbl("__Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6___XprivateX__BB432_2_F"))
		i5 =  ((__xasm<int>(push((i0+48)), op(0x35))))
		__asm(push(i5==0), iftrue, target("__Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6___XprivateX__BB432_4_F"))
	__asm(lbl("__Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6___XprivateX__BB432_3_F"))
		f4 =  (0)
		f5 =  ((__xasm<Number>(push((i0+32)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i0+36)), op(0x38))))
		f7 =  f3/*fextend*/
		f2 =  f2/*fextend*/
		f8 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		f5 =  (f8 - f5)
		f6 =  (f7 - f6)
		f2 =  (f7 - f2)
		f0 =  (f8 - f0)
		f5 =  f5/*fround*/
		f6 =  f6/*fround*/
		f2 =  f2/*fround*/
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f5 =  f5/*fextend*/
		f2 =  f2/*fextend*/
		f6 =  f6/*fextend*/
		f0 =  (f5 * f0)
		f2 =  (f6 * f2)
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 + f2)
		f0 =  f0/*fround*/
		f2 =  f4/*fround*/
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		__asm(push(f0>f2), iftrue, target("__Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6___XprivateX__BB432_12_F"))
	__asm(lbl("__Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6___XprivateX__BB432_4_F"))
		i0 =  (1)
		__asm(push(i0), push(i4), op(0x3c))
		i0 =  (0)
		__asm(push(i0), push((i1+64)), op(0x3c))
		__asm(push(i0), push((i1+48)), op(0x3c))
		__asm(push(i0), push((i1+52)), op(0x3c))
		__asm(push(f1), push((i1+56)), op(0x3d))
		__asm(push(f3), push((i1+60)), op(0x3d))
		__asm(push(i0), push((i1+16)), op(0x3c))
		__asm(push(i0), push((i1+16)), op(0x3a))
		__asm(push(i0), push((i1+17)), op(0x3a))
		__asm(push(i0), push((i1+18)), op(0x3a))
		__asm(push(i0), push((i1+19)), op(0x3a))
		__asm(jump, target("__Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6___XprivateX__BB432_11_F"))
	__asm(lbl("__Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6___XprivateX__BB432_5_F"))
		f13 =  (0)
		f13 =  f13/*fround*/
		f13 =  f13/*fextend*/
		f14 =  f8/*fextend*/
		__asm(push(f14>f13), iftrue, target("__Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6___XprivateX__BB432_13_F"))
	__asm(lbl("__Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6___XprivateX__BB432_6_F"))
		f1 =  f5/*fextend*/
		f2 =  f2/*fextend*/
		f3 =  f4/*fextend*/
		f0 =  f0/*fextend*/
		f1 =  (f2 - f1)
		f0 =  (f0 - f3)
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		f2 =  f1/*fextend*/
		f3 =  f0/*fextend*/
		f2 =  (f2 * f2)
		f3 =  (f3 * f3)
		f2 =  f2/*fround*/
		f3 =  f3/*fround*/
		f6 =  f12/*fextend*/
		f2 =  f2/*fextend*/
		f3 =  f3/*fextend*/
		f2 =  (f3 + f2)
		f3 =  (f6 * f6)
		f2 =  f2/*fround*/
		f3 =  f3/*fround*/
		f2 =  f2/*fextend*/
		f3 =  f3/*fextend*/
		__asm(push(f3<f2), iftrue, target("__Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6___XprivateX__BB432_12_F"))
	__asm(lbl("__Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6___XprivateX__BB432_7_F"))
		i5 =  ((__xasm<int>(push((i0+49)), op(0x35))))
		__asm(push(i5==0), iftrue, target("__Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6___XprivateX__BB432_9_F"))
	__asm(lbl("__Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6___XprivateX__BB432_8_F"))
		f2 =  (0)
		f3 =  ((__xasm<Number>(push((i0+40)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i0+44)), op(0x38))))
		f7 =  f4/*fextend*/
		f8 =  f5/*fextend*/
		f3 =  (f3 - f7)
		f6 =  (f6 - f8)
		f3 =  f3/*fround*/
		f6 =  f6/*fround*/
		f0 =  f0/*fextend*/
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f6 =  f6/*fextend*/
		f0 =  (f3 * f0)
		f1 =  (f6 * f1)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f1 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 + f1)
		f0 =  f0/*fround*/
		f1 =  f2/*fround*/
		f1 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		__asm(push(f0>f1), iftrue, target("__Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6___XprivateX__BB432_12_F"))
	__asm(lbl("__Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6___XprivateX__BB432_9_F"))
		i0 =  (1)
		__asm(push(i0), push(i4), op(0x3c))
		i4 =  (0)
		__asm(push(i4), push((i1+64)), op(0x3c))
		__asm(push(i4), push((i1+48)), op(0x3c))
		__asm(push(i4), push((i1+52)), op(0x3c))
		__asm(push(f4), push((i1+56)), op(0x3d))
		__asm(push(f5), push((i1+60)), op(0x3d))
		__asm(push(i4), push((i1+16)), op(0x3c))
		__asm(push(i0), push((i1+16)), op(0x3a))
		__asm(push(i4), push((i1+17)), op(0x3a))
		__asm(push(i4), push((i1+18)), op(0x3a))
	__asm(jump, target("__Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6___XprivateX__BB432_10_F"), lbl("__Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6___XprivateX__BB432_10_B"), label, lbl("__Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6___XprivateX__BB432_10_F")); 
		__asm(push(i4), push((i1+19)), op(0x3a))
	__asm(lbl("__Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6___XprivateX__BB432_11_F"))
		f0 =  ((__xasm<Number>(push(i2), op(0x38))))
		f1 =  ((__xasm<Number>(push(i3), op(0x38))))
		__asm(push(f0), push(i1), op(0x3d))
		__asm(push(f1), push((i1+4)), op(0x3d))
		__asm(jump, target("__Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6___XprivateX__BB432_12_F"))
	__asm(jump, target("__Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6___XprivateX__BB432_12_F"), lbl("__Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6___XprivateX__BB432_12_B"), label, lbl("__Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6___XprivateX__BB432_12_F")); 
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6___XprivateX__BB432_13_F"))
		f13 =  (0)
		f14 =  f10/*fextend*/
		f15 =  f7/*fextend*/
		f14 =  (f14 * f14)
		f15 =  (f15 * f15)
		f14 =  f14/*fround*/
		f15 =  f15/*fround*/
		f15 =  f15/*fextend*/
		f14 =  f14/*fextend*/
		f14 =  (f14 + f15)
		f14 =  f14/*fround*/
		f13 =  f13/*fround*/
		f13 =  f13/*fextend*/
		f15 =  f14/*fextend*/
		__asm(push(f15>f13), iftrue, target("__Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6___XprivateX__BB432_15_F"))
	__asm(lbl("__Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6___XprivateX__BB432_14_F"))
		i1 =  (___sF)
		mstate.esp -= 24
		i2 =  (__2E_str1670)
		i3 =  (__2E_str140)
		i4 =  (__ZZ22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6_E8__func__)
		i0 =  (__2E_str42249)
		i5 =  (134)
		i1 =  (i1 + 176)
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i2), push((mstate.esp+4)), op(0x3c))
		__asm(push(i3), push((mstate.esp+8)), op(0x3c))
		__asm(push(i4), push((mstate.esp+12)), op(0x3c))
		__asm(push(i0), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6__state1"))
		mstate.esp += 24
		state = 2
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6__state2"))
	__asm(lbl("__Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6___XprivateX__BB432_15_F"))
		f13 =  (1)
		f5 =  f5/*fextend*/
		f11 =  f11/*fextend*/
		f4 =  f4/*fextend*/
		f15 =  f3/*fextend*/
		f8 =  f8/*fextend*/
		f16 =  f1/*fextend*/
		f5 =  (f5 * f11)
		f4 =  (f4 * f11)
		f11 =  (f15 * f8)
		f8 =  (f16 * f8)
		f5 =  f5/*fround*/
		f4 =  f4/*fround*/
		f11 =  f11/*fround*/
		f8 =  f8/*fround*/
		f13 =  f13/*fround*/
		f5 =  f5/*fextend*/
		f11 =  f11/*fextend*/
		f4 =  f4/*fextend*/
		f8 =  f8/*fextend*/
		f14 =  f14/*fextend*/
		f13 =  f13/*fextend*/
		f5 =  (f11 + f5)
		f4 =  (f8 + f4)
		f8 =  (f13 / f14)
		f5 =  f5/*fround*/
		f4 =  f4/*fround*/
		f8 =  f8/*fround*/
		f5 =  f5/*fextend*/
		f8 =  f8/*fextend*/
		f4 =  f4/*fextend*/
		f5 =  (f5 * f8)
		f4 =  (f4 * f8)
		f5 =  f5/*fround*/
		f4 =  f4/*fround*/
		f5 =  f5/*fextend*/
		f2 =  f2/*fextend*/
		f4 =  f4/*fextend*/
		f0 =  f0/*fextend*/
		f2 =  (f2 - f5)
		f0 =  (f0 - f4)
		f2 =  f2/*fround*/
		f0 =  f0/*fround*/
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f2 =  (f2 * f2)
		f0 =  (f0 * f0)
		f2 =  f2/*fround*/
		f0 =  f0/*fround*/
		f4 =  f12/*fextend*/
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 + f2)
		f2 =  (f4 * f4)
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f0 =  f0/*fextend*/
		f2 =  f2/*fextend*/
		__asm(push(f2<f0), iftrue, target("__Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6___XprivateX__BB432_12_B"))
	__asm(lbl("__Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6___XprivateX__BB432_16_F"))
		f0 =  (0)
		f2 =  f7/*fextend*/
		f4 =  f9/*fextend*/
		f5 =  f10/*fextend*/
		f6 =  f6/*fextend*/
		f4 =  (f4 * f2)
		f6 =  (f5 * f6)
		f4 =  f4/*fround*/
		f6 =  f6/*fround*/
		f4 =  f4/*fextend*/
		f6 =  f6/*fextend*/
		f7 =  -f2
		f4 =  (f6 - f4)
		f6 =  -f5
		f7 =  f7/*fround*/
		f4 =  f4/*fround*/
		f6 =  f6/*fround*/
		f0 =  f0/*fround*/
		f7 =  f7/*fextend*/
		f6 =  f6/*fextend*/
		f0 =  f0/*fextend*/
		f4 =  f4/*fextend*/
		f2 =  ((f4<f0) ? f2 : f7)
		f0 =  ((f4<f0) ? f6 : f5)
		f2 =  f2/*fround*/
		f0 =  f0/*fround*/
		f4 =  f2/*fextend*/
		f5 =  f0/*fextend*/
		f4 =  (f4 * f4)
		f5 =  (f5 * f5)
		f4 =  f4/*fround*/
		f5 =  f5/*fround*/
		f5 =  f5/*fextend*/
		f4 =  f4/*fextend*/
		f4 =  (f4 + f5)
		f4 =  f4/*fround*/
		f4 =  f4/*fextend*/
		f4 =  Math.sqrt(f4)
		f4 =  f4/*fround*/
		f5 =  (1.19209e-07)
		f5 =  f5/*fround*/
		f5 =  f5/*fextend*/
		f6 =  f4/*fextend*/
		__asm(push(f6>=f5), iftrue, target("__Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6___XprivateX__BB432_18_F"))
	__asm(lbl("__Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6___XprivateX__BB432_17_F"))
		__asm(jump, target("__Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6___XprivateX__BB432_19_F"))
	__asm(lbl("__Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6___XprivateX__BB432_18_F"))
		f5 =  (1)
		f5 =  f5/*fround*/
		f4 =  f4/*fextend*/
		f5 =  f5/*fextend*/
		f4 =  (f5 / f4)
		f4 =  f4/*fround*/
		f2 =  f2/*fextend*/
		f4 =  f4/*fextend*/
		f0 =  f0/*fextend*/
		f2 =  (f2 * f4)
		f0 =  (f0 * f4)
		f2 =  f2/*fround*/
		f0 =  f0/*fround*/
	__asm(lbl("__Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6___XprivateX__BB432_19_F"))
		i0 =  (1)
		__asm(push(i0), push(i4), op(0x3c))
		__asm(push(i0), push((i1+64)), op(0x3c))
		__asm(push(f2), push((i1+48)), op(0x3d))
		__asm(push(f0), push((i1+52)), op(0x3d))
		__asm(push(f1), push((i1+56)), op(0x3d))
		__asm(push(f3), push((i1+60)), op(0x3d))
		i4 =  (0)
		__asm(push(i4), push((i1+16)), op(0x3c))
		__asm(push(i4), push((i1+16)), op(0x3a))
		__asm(push(i4), push((i1+17)), op(0x3a))
		__asm(push(i0), push((i1+18)), op(0x3a))
		__asm(jump, target("__Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6___XprivateX__BB432_10_B"))
	__asm(lbl("__Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6__errState"))
		throw("Invalid state in __Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6_")
	}
}



// Sync
public const __ZN12b2EPColliderC1EPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS5_:int = regFunc(FSM__ZN12b2EPColliderC1EPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS5_.start)

public final class FSM__ZN12b2EPColliderC1EPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS5_ extends Machine {

	public static function start():void {
		var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int

		var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number
		var f8:Number, f9:Number, f10:Number, f11:Number, f12:Number, f13:Number, f14:Number, f15:Number
		var f16:Number, f17:Number

		__asm(label, lbl("__ZN12b2EPColliderC1EPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS5__entry"))
	__asm(lbl("__ZN12b2EPColliderC1EPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS5___XprivateX__BB433_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		f0 =  (1.19209e-07)
		i0 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+24)), op(0x37))))
		f1 =  ((__xasm<Number>(push((i1+8)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i0+8)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i1+12)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i0+12)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i0+16)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i0+20)), op(0x38))))
		f7 =  (f2 * f1)
		f8 =  (f4 * f3)
		f9 =  ((__xasm<Number>(push(i1), op(0x38))))
		f10 =  ((__xasm<Number>(push(i0), op(0x38))))
		f11 =  ((__xasm<Number>(push((i1+16)), op(0x38))))
		f12 =  ((__xasm<Number>(push((i1+20)), op(0x38))))
		f7 =  f7/*fround*/
		f9 =  (f9 - f10)
		f8 =  f8/*fround*/
		f3 =  (f6 * f3)
		f1 =  (f5 * f1)
		f10 =  ((__xasm<Number>(push((i1+4)), op(0x38))))
		f13 =  ((__xasm<Number>(push((i0+4)), op(0x38))))
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		f2 =  (f2 * f11)
		f10 =  (f10 - f13)
		f4 =  (f4 * f12)
		f3 =  f3/*fround*/
		f1 =  f1/*fround*/
		f8 =  f8/*fextend*/
		f7 =  f7/*fextend*/
		f9 =  f9/*fround*/
		f7 =  (f7 + f8)
		f2 =  f2/*fround*/
		f4 =  f4/*fround*/
		f6 =  (f6 * f12)
		f5 =  (f5 * f11)
		__asm(push(f9), push((i0+324)), op(0x3d))
		f8 =  f10/*fround*/
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f1 =  (f1 + f3)
		f3 =  f6/*fround*/
		f5 =  f5/*fround*/
		__asm(push(f8), push((i0+328)), op(0x3d))
		f6 =  f7/*fround*/
		f4 =  f4/*fextend*/
		f2 =  f2/*fextend*/
		f2 =  (f2 + f4)
		__asm(push(f6), push((i0+332)), op(0x3d))
		f1 =  f1/*fround*/
		f3 =  f3/*fextend*/
		f4 =  f5/*fextend*/
		f3 =  (f4 + f3)
		__asm(push(f1), push((i0+336)), op(0x3d))
		f2 =  f2/*fround*/
		__asm(push(f2), push((i0+340)), op(0x3d))
		f3 =  f3/*fround*/
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		__asm(push(f3), push((i0+344)), op(0x3d))
		f4 =  ((__xasm<Number>(push((i1+32)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i1+36)), op(0x38))))
		__asm(push(f4), push(i0), op(0x3d))
		__asm(push(f5), push((i0+4)), op(0x3d))
		f4 =  ((__xasm<Number>(push((i1+16)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i1+20)), op(0x38))))
		__asm(push(f4), push((i0+8)), op(0x3d))
		__asm(push(f5), push((i0+12)), op(0x3d))
		f7 =  ((__xasm<Number>(push((i1+24)), op(0x38))))
		f10 =  ((__xasm<Number>(push((i1+28)), op(0x38))))
		f11 =  f7/*fextend*/
		f12 =  f4/*fextend*/
		f13 =  f5/*fextend*/
		f14 =  f10/*fextend*/
		f15 =  (f11 - f12)
		f13 =  (f14 - f13)
		f14 =  f15/*fround*/
		f13 =  f13/*fround*/
		f14 =  f14/*fextend*/
		f15 =  f13/*fextend*/
		__asm(push(f7), push((i0+16)), op(0x3d))
		f14 =  (f14 * f14)
		f15 =  (f15 * f15)
		__asm(push(f10), push((i0+20)), op(0x3d))
		f14 =  f14/*fround*/
		f15 =  f15/*fround*/
		f16 =  ((__xasm<Number>(push((i1+40)), op(0x38))))
		f17 =  ((__xasm<Number>(push((i1+44)), op(0x38))))
		f14 =  f14/*fextend*/
		f15 =  f15/*fextend*/
		f14 =  (f15 + f14)
		__asm(push(f16), push((i0+24)), op(0x3d))
		f14 =  f14/*fround*/
		__asm(push(f17), push((i0+28)), op(0x3d))
		f14 =  f14/*fextend*/
		f11 =  (f12 - f11)
		f12 =  Math.sqrt(f14)
		__asm(push(f13), push((i0+32)), op(0x3d))
		f11 =  f11/*fround*/
		__asm(push(f11), push((i0+36)), op(0x3d))
		f12 =  f12/*fround*/
		i2 =  ((__xasm<int>(push((mstate.ebp+20)), op(0x37))))
		i3 =  (i0 + 36)
		i4 =  (i0 + 32)
		f0 =  f0/*fround*/
		i5 = i0
		i6 = i2
		f0 =  f0/*fextend*/
		f14 =  f12/*fextend*/
		__asm(push(f14>=f0), iftrue, target("__ZN12b2EPColliderC1EPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS5___XprivateX__BB433_2_F"))
	__asm(lbl("__ZN12b2EPColliderC1EPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS5___XprivateX__BB433_1_F"))
		f12 = f13
		__asm(jump, target("__ZN12b2EPColliderC1EPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS5___XprivateX__BB433_3_F"))
	__asm(lbl("__ZN12b2EPColliderC1EPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS5___XprivateX__BB433_2_F"))
		f0 =  (1)
		f0 =  f0/*fround*/
		f12 =  f12/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 / f12)
		f12 =  f0/*fround*/
		f0 =  f13/*fextend*/
		f12 =  f12/*fextend*/
		f0 =  (f0 * f12)
		f11 =  f11/*fextend*/
		f11 =  (f12 * f11)
		f12 =  f0/*fround*/
		__asm(push(f12), push(i4), op(0x3d))
		f11 =  f11/*fround*/
		__asm(push(f11), push(i3), op(0x3d))
	__asm(lbl("__ZN12b2EPColliderC1EPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS5___XprivateX__BB433_3_F"))
		f0 = f11
		f11 = f12
		f12 =  (0.5)
		i3 =  ((__xasm<int>(push((i1+48)), op(0x35))))
		__asm(push(i3), push((i0+40)), op(0x3a))
		i1 =  ((__xasm<int>(push((i1+49)), op(0x35))))
		__asm(push(i1), push((i0+41)), op(0x3a))
		__asm(push(f4), push((i0+44)), op(0x3d))
		__asm(push(f5), push((i0+48)), op(0x3d))
		__asm(push(f7), push((i0+52)), op(0x3d))
		f7 =  f7/*fextend*/
		f4 =  f4/*fextend*/
		__asm(push(f10), push((i0+56)), op(0x3d))
		f4 =  (f4 + f7)
		f7 =  f11/*fextend*/
		f10 =  f10/*fextend*/
		f5 =  f5/*fextend*/
		__asm(push(f11), push((i0+108)), op(0x3d))
		f4 =  f4/*fround*/
		f5 =  (f5 + f10)
		f7 =  -f7
		f10 =  f0/*fextend*/
		f11 =  f12/*fround*/
		f5 =  f5/*fround*/
		f10 =  -f10
		__asm(push(f0), push((i0+112)), op(0x3d))
		f0 =  f7/*fround*/
		f4 =  f4/*fextend*/
		f7 =  f11/*fextend*/
		f4 =  (f4 * f7)
		f5 =  f5/*fextend*/
		__asm(push(f0), push((i0+116)), op(0x3d))
		f0 =  f10/*fround*/
		f5 =  (f5 * f7)
		__asm(push(f0), push((i0+120)), op(0x3d))
		f0 =  f4/*fround*/
		__asm(push(f0), push((i0+172)), op(0x3d))
		f0 =  f5/*fround*/
		__asm(push(f0), push((i0+176)), op(0x3d))
		i1 =  (2)
		__asm(push(i1), push((i0+180)), op(0x3c))
		i1 =  ((__xasm<int>(push((i2+152)), op(0x37))))
		__asm(push(i1), push((i0+320)), op(0x3c))
		f0 =  ((__xasm<Number>(push((i2+16)), op(0x38))))
		f4 =  f6/*fextend*/
		f4 =  (f4 * f0)
		f5 =  f1/*fextend*/
		f4 =  f4/*fround*/
		f0 =  (f5 * f0)
		f5 =  ((__xasm<Number>(push((i2+20)), op(0x38))))
		f0 =  f0/*fround*/
		f7 =  f2/*fextend*/
		f4 =  f4/*fextend*/
		f10 =  f9/*fextend*/
		f4 =  (f10 + f4)
		f7 =  (f7 * f5)
		f10 =  f3/*fextend*/
		f0 =  f0/*fextend*/
		f11 =  f8/*fextend*/
		f4 =  f4/*fround*/
		f0 =  (f11 + f0)
		f7 =  f7/*fround*/
		f5 =  (f10 * f5)
		f0 =  f0/*fround*/
		f5 =  f5/*fround*/
		f7 =  f7/*fextend*/
		f4 =  f4/*fextend*/
		f4 =  (f4 + f7)
		f5 =  f5/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 + f5)
		f4 =  f4/*fround*/
		__asm(push(f4), push((i0+312)), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push((i0+316)), op(0x3d))
		i1 =  ((__xasm<int>(push((i2+152)), op(0x37))))
		i2 =  (i2 + 152)
		__asm(push(i1<1), iftrue, target("__ZN12b2EPColliderC1EPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS5___XprivateX__BB433_7_F"))
	__asm(lbl("__ZN12b2EPColliderC1EPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS5___XprivateX__BB433_4_F"))
		i1 =  (0)
		i3 = i1
	__asm(jump, target("__ZN12b2EPColliderC1EPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS5___XprivateX__BB433_5_F"), lbl("__ZN12b2EPColliderC1EPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS5___XprivateX__BB433_5_B"), label, lbl("__ZN12b2EPColliderC1EPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS5___XprivateX__BB433_5_F")); 
		i4 =  (i6 + i3)
		f0 =  ((__xasm<Number>(push((i4+24)), op(0x38))))
		f4 =  f6/*fextend*/
		f5 =  (f4 * f0)
		f7 =  f1/*fextend*/
		f5 =  f5/*fround*/
		f0 =  (f7 * f0)
		f10 =  ((__xasm<Number>(push((i4+28)), op(0x38))))
		f0 =  f0/*fround*/
		f11 =  f2/*fextend*/
		f5 =  f5/*fextend*/
		f12 =  f9/*fextend*/
		f5 =  (f12 + f5)
		f12 =  (f11 * f10)
		f13 =  f3/*fextend*/
		f0 =  f0/*fextend*/
		f14 =  f8/*fextend*/
		f5 =  f5/*fround*/
		f0 =  (f14 + f0)
		f12 =  f12/*fround*/
		f10 =  (f13 * f10)
		f0 =  f0/*fround*/
		f10 =  f10/*fround*/
		f12 =  f12/*fextend*/
		f5 =  f5/*fextend*/
		f5 =  (f5 + f12)
		f10 =  f10/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 + f10)
		f5 =  f5/*fround*/
		i7 =  (i5 + i3)
		__asm(push(f5), push((i7+184)), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push((i7+188)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i4+88)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i4+92)), op(0x38))))
		f4 =  (f4 * f0)
		f10 =  (f11 * f5)
		f0 =  (f7 * f0)
		f4 =  f4/*fround*/
		f5 =  (f13 * f5)
		f7 =  f10/*fround*/
		f0 =  f0/*fround*/
		f5 =  f5/*fround*/
		f7 =  f7/*fextend*/
		f4 =  f4/*fextend*/
		f4 =  (f4 + f7)
		f5 =  f5/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 + f5)
		f4 =  f4/*fround*/
		__asm(push(f4), push((i7+248)), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push((i7+252)), op(0x3d))
		i4 =  ((__xasm<int>(push(i2), op(0x37))))
		i3 =  (i3 + 8)
		i1 =  (i1 + 1)
		__asm(push(i4<=i1), iftrue, target("__ZN12b2EPColliderC1EPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS5___XprivateX__BB433_7_F"))
	__asm(lbl("__ZN12b2EPColliderC1EPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS5___XprivateX__BB433_6_F"))
		__asm(jump, target("__ZN12b2EPColliderC1EPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS5___XprivateX__BB433_5_B"))
	__asm(lbl("__ZN12b2EPColliderC1EPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS5___XprivateX__BB433_7_F"))
		i1 =  (0)
		f0 =  ((__xasm<Number>(push(_b2_polygonRadius), op(0x38))))
		f0 =  (f0 + f0)
		f0 =  f0/*fround*/
		__asm(push(f0), push((i0+396)), op(0x3d))
		__asm(push(i1), push((i0+364)), op(0x3c))
		__asm(push(i1), push((i0+368)), op(0x3c))
		__asm(push(i1), push((i0+372)), op(0x3c))
		__asm(push(i1), push((i0+376)), op(0x3c))
		__asm(push(i1), push((i0+380)), op(0x3c))
		__asm(push(i1), push((i0+384)), op(0x3c))
		__asm(push(i1), push((i0+388)), op(0x3c))
		__asm(push(i1), push((i0+392)), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		return
	}
}



// Async
public const __ZN12b2EPCollider7CollideEP10b2Manifold:int = regFunc(FSM__ZN12b2EPCollider7CollideEP10b2Manifold.start)

public final class FSM__ZN12b2EPCollider7CollideEP10b2Manifold extends Machine {

	public static function start():void {
			var result:FSM__ZN12b2EPCollider7CollideEP10b2Manifold = new FSM__ZN12b2EPCollider7CollideEP10b2Manifold
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
	public var i8:int, i9:int, i10:int, i11:int, i12:int, i13:int, i14:int, i15:int
	public var i16:int, i17:int, i18:int, i19:int

	public static const intRegCount:int = 20
	public var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number
	public var f8:Number, f9:Number, f10:Number, f11:Number, f12:Number, f13:Number, f14:Number, f15:Number
	public var f16:Number, f17:Number, f18:Number, f19:Number, f20:Number, f21:Number

	public static const NumberRegCount:int = 22
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN12b2EPCollider7CollideEP10b2Manifold_entry"))
		__asm(push(state), switchjump(
			"__ZN12b2EPCollider7CollideEP10b2Manifold_errState",
			"__ZN12b2EPCollider7CollideEP10b2Manifold_state0",
			"__ZN12b2EPCollider7CollideEP10b2Manifold_state1",
			"__ZN12b2EPCollider7CollideEP10b2Manifold_state2",
			"__ZN12b2EPCollider7CollideEP10b2Manifold_state3",
			"__ZN12b2EPCollider7CollideEP10b2Manifold_state4"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold_state0"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 128
		i0 =  (0)
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		__asm(push(i0), push((i1+68)), op(0x3c))
		f0 =  ((__xasm<Number>(push(i2), op(0x38))))
		f1 =  ((__xasm<Number>(push((i2+4)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i2+8)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i2+12)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i2+16)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i2+20)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i2+24)), op(0x38))))
		f7 =  ((__xasm<Number>(push((i2+28)), op(0x38))))
		f8 =  ((__xasm<Number>(push((i2+312)), op(0x38))))
		f9 =  ((__xasm<Number>(push((i2+316)), op(0x38))))
		i0 =  ((__xasm<int>(push((i2+40)), op(0x35))))
		i3 =  (i1 + 68)
		i4 =  ((mstate.ebp+-128))
		i5 = i2
		__asm(push(i0==0), iftrue, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_15_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_1_F"))
		f10 =  (1.19209e-07)
		f11 =  f1/*fextend*/
		f12 =  f3/*fextend*/
		f13 =  f0/*fextend*/
		f14 =  f2/*fextend*/
		f11 =  (f12 - f11)
		f15 =  (f14 - f13)
		f11 =  f11/*fround*/
		f15 =  f15/*fround*/
		f16 =  f11/*fextend*/
		f15 =  f15/*fextend*/
		f16 =  (f16 * f16)
		f15 =  (f15 * f15)
		f16 =  f16/*fround*/
		f15 =  f15/*fround*/
		f15 =  f15/*fextend*/
		f16 =  f16/*fextend*/
		f15 =  (f16 + f15)
		f15 =  f15/*fround*/
		f16 =  f4/*fextend*/
		f15 =  f15/*fextend*/
		f17 =  f5/*fextend*/
		f15 =  Math.sqrt(f15)
		f12 =  (f17 - f12)
		f17 =  (f16 - f14)
		f13 =  (f13 - f14)
		f14 =  (f14 - f16)
		f15 =  f15/*fround*/
		f12 =  f12/*fround*/
		f16 =  f17/*fround*/
		f13 =  f13/*fround*/
		f14 =  f14/*fround*/
		f10 =  f10/*fround*/
		f10 =  f10/*fextend*/
		f17 =  f15/*fextend*/
		__asm(push(f17>=f10), iftrue, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_3_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_2_F"))
		__asm(jump, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_4_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_3_F"))
		f10 =  (1)
		f10 =  f10/*fround*/
		f15 =  f15/*fextend*/
		f10 =  f10/*fextend*/
		f10 =  (f10 / f15)
		f10 =  f10/*fround*/
		f11 =  f11/*fextend*/
		f10 =  f10/*fextend*/
		f13 =  f13/*fextend*/
		f11 =  (f11 * f10)
		f10 =  (f10 * f13)
		f11 =  f11/*fround*/
		f13 =  f10/*fround*/
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_4_F"))
		f10 = f11
		f11 = f13
		f13 =  (1.19209e-07)
		f15 =  f12/*fextend*/
		f16 =  f16/*fextend*/
		f15 =  (f15 * f15)
		f16 =  (f16 * f16)
		f15 =  f15/*fround*/
		f16 =  f16/*fround*/
		f16 =  f16/*fextend*/
		f15 =  f15/*fextend*/
		f15 =  (f15 + f16)
		f15 =  f15/*fround*/
		f15 =  f15/*fextend*/
		f15 =  Math.sqrt(f15)
		f15 =  f15/*fround*/
		f13 =  f13/*fround*/
		f13 =  f13/*fextend*/
		f16 =  f15/*fextend*/
		__asm(push(f16>=f13), iftrue, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_6_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_5_F"))
		__asm(jump, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_7_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_6_F"))
		f13 =  (1)
		f13 =  f13/*fround*/
		f15 =  f15/*fextend*/
		f13 =  f13/*fextend*/
		f13 =  (f13 / f15)
		f13 =  f13/*fround*/
		f12 =  f12/*fextend*/
		f13 =  f13/*fextend*/
		f14 =  f14/*fextend*/
		f12 =  (f12 * f13)
		f13 =  (f13 * f14)
		f12 =  f12/*fround*/
		f14 =  f13/*fround*/
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_7_F"))
		f13 = f14
		f14 =  (0)
		f1 =  f1/*fextend*/
		f15 =  f9/*fextend*/
		f16 =  f3/*fextend*/
		f0 =  f0/*fextend*/
		f17 =  f8/*fextend*/
		f18 =  f2/*fextend*/
		f1 =  (f15 - f1)
		f15 =  (f15 - f16)
		f0 =  (f17 - f0)
		f16 =  (f17 - f18)
		f1 =  f1/*fround*/
		f15 =  f15/*fround*/
		f0 =  f0/*fround*/
		f16 =  f16/*fround*/
		f0 =  f0/*fextend*/
		f17 =  f10/*fextend*/
		f18 =  f13/*fextend*/
		f15 =  f15/*fextend*/
		f1 =  f1/*fextend*/
		f19 =  f11/*fextend*/
		f20 =  f12/*fextend*/
		f16 =  f16/*fextend*/
		f0 =  (f17 * f0)
		f15 =  (f18 * f15)
		f1 =  (f19 * f1)
		f16 =  (f20 * f16)
		f17 =  (f17 * f18)
		f0 =  f0/*fround*/
		f15 =  f15/*fround*/
		f18 =  (f19 * f20)
		f1 =  f1/*fround*/
		f16 =  f16/*fround*/
		f17 =  f17/*fround*/
		f18 =  f18/*fround*/
		f1 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		f15 =  f15/*fextend*/
		f16 =  f16/*fextend*/
		f0 =  (f0 + f1)
		f1 =  (f16 + f15)
		f15 =  f18/*fextend*/
		f16 =  f17/*fextend*/
		f15 =  (f16 - f15)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f15 =  f15/*fround*/
		f14 =  f14/*fround*/
		f14 =  f14/*fextend*/
		f15 =  f15/*fextend*/
		__asm(push(f15<f14), iftrue, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_11_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_8_F"))
		f14 =  (0)
		f14 =  f14/*fround*/
		f14 =  f14/*fextend*/
		f1 =  f1/*fextend*/
		__asm(push(f1>=f14), iftrue, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_10_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_9_F"))
		f1 =  (0)
		f1 =  f1/*fround*/
		f1 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		__asm(push(f0<f1), iftrue, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_31_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_10_F"))
		__asm(push(f12), push((i2+364)), op(0x3d))
		__asm(push(f13), push((i2+368)), op(0x3d))
		__asm(push(f10), push((i2+372)), op(0x3d))
		__asm(push(f11), push((i2+376)), op(0x3d))
		i0 =  ((__xasm<int>(push((i2+41)), op(0x35))))
		__asm(push(i0==0), iftrue, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_32_F"))
		__asm(jump, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_16_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_11_F"))
		f14 =  (0)
		f14 =  f14/*fround*/
		f14 =  f14/*fextend*/
		f1 =  f1/*fextend*/
		__asm(push(f1<f14), iftrue, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_14_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_12_F"))
		f1 =  (0)
		f1 =  f1/*fround*/
		f1 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		__asm(push(f0<f1), iftrue, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_14_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_13_F"))
		__asm(push(f10), push((i2+364)), op(0x3d))
		__asm(push(f11), push((i2+368)), op(0x3d))
		__asm(push(f12), push((i2+372)), op(0x3d))
		__asm(push(f13), push((i2+376)), op(0x3d))
		i0 =  ((__xasm<int>(push((i2+41)), op(0x35))))
		__asm(push(i0==0), iftrue, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_32_F"))
		__asm(jump, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_16_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_14_F"))
		f0 =  f10/*fextend*/
		f1 =  f11/*fextend*/
		f0 =  -f0
		f1 =  -f1
		f10 =  f12/*fextend*/
		f0 =  f0/*fround*/
		f11 =  f13/*fextend*/
		f10 =  -f10
		__asm(push(f0), push((i2+364)), op(0x3d))
		f0 =  f1/*fround*/
		f1 =  -f11
		__asm(push(f0), push((i2+368)), op(0x3d))
		f0 =  f10/*fround*/
		__asm(push(f0), push((i2+372)), op(0x3d))
		f0 =  f1/*fround*/
		__asm(push(f0), push((i2+376)), op(0x3d))
		i0 =  ((__xasm<int>(push((i2+41)), op(0x35))))
		__asm(push(i0==0), iftrue, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_32_F"))
		__asm(jump, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_16_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_15_F"))
		i0 =  (0)
		__asm(push(i0), push((i2+364)), op(0x3c))
		__asm(push(i0), push((i2+368)), op(0x3c))
		__asm(push(i0), push((i2+372)), op(0x3c))
		__asm(push(i0), push((i2+376)), op(0x3c))
		i0 =  ((__xasm<int>(push((i2+41)), op(0x35))))
		__asm(push(i0==0), iftrue, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_32_F"))
	__asm(jump, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_16_F"), lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_16_B"), label, lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_16_F")); 
		f0 =  (1.19209e-07)
		f1 =  f3/*fextend*/
		f10 =  f5/*fextend*/
		f11 =  f2/*fextend*/
		f12 =  f4/*fextend*/
		f1 =  (f10 - f1)
		f13 =  (f12 - f11)
		f1 =  f1/*fround*/
		f13 =  f13/*fround*/
		f14 =  f1/*fextend*/
		f13 =  f13/*fextend*/
		f14 =  (f14 * f14)
		f13 =  (f13 * f13)
		f14 =  f14/*fround*/
		f13 =  f13/*fround*/
		f13 =  f13/*fextend*/
		f14 =  f14/*fextend*/
		f13 =  (f14 + f13)
		f13 =  f13/*fround*/
		f6 =  f6/*fextend*/
		f13 =  f13/*fextend*/
		f7 =  f7/*fextend*/
		f13 =  Math.sqrt(f13)
		f7 =  (f7 - f10)
		f10 =  (f6 - f12)
		f11 =  (f11 - f12)
		f6 =  (f12 - f6)
		f12 =  f13/*fround*/
		f7 =  f7/*fround*/
		f10 =  f10/*fround*/
		f11 =  f11/*fround*/
		f6 =  f6/*fround*/
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f13 =  f12/*fextend*/
		__asm(push(f13>=f0), iftrue, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_18_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_17_F"))
		__asm(jump, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_19_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_18_F"))
		f0 =  (1)
		f0 =  f0/*fround*/
		f12 =  f12/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 / f12)
		f0 =  f0/*fround*/
		f1 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		f11 =  f11/*fextend*/
		f1 =  (f1 * f0)
		f0 =  (f0 * f11)
		f1 =  f1/*fround*/
		f11 =  f0/*fround*/
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_19_F"))
		f0 = f1
		f1 = f11
		f11 =  (1.19209e-07)
		f12 =  f7/*fextend*/
		f10 =  f10/*fextend*/
		f12 =  (f12 * f12)
		f10 =  (f10 * f10)
		f12 =  f12/*fround*/
		f10 =  f10/*fround*/
		f10 =  f10/*fextend*/
		f12 =  f12/*fextend*/
		f10 =  (f12 + f10)
		f10 =  f10/*fround*/
		f10 =  f10/*fextend*/
		f10 =  Math.sqrt(f10)
		f10 =  f10/*fround*/
		f11 =  f11/*fround*/
		f11 =  f11/*fextend*/
		f12 =  f10/*fextend*/
		__asm(push(f12>=f11), iftrue, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_21_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_20_F"))
		__asm(jump, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_22_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_21_F"))
		f11 =  (1)
		f11 =  f11/*fround*/
		f10 =  f10/*fextend*/
		f11 =  f11/*fextend*/
		f10 =  (f11 / f10)
		f10 =  f10/*fround*/
		f7 =  f7/*fextend*/
		f10 =  f10/*fextend*/
		f6 =  f6/*fextend*/
		f7 =  (f7 * f10)
		f6 =  (f10 * f6)
		f7 =  f7/*fround*/
		f6 =  f6/*fround*/
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_22_F"))
		f10 =  (0)
		f11 =  f3/*fextend*/
		f9 =  f9/*fextend*/
		f12 =  f5/*fextend*/
		f13 =  f2/*fextend*/
		f8 =  f8/*fextend*/
		f14 =  f4/*fextend*/
		f11 =  (f9 - f11)
		f9 =  (f9 - f12)
		f12 =  (f8 - f13)
		f8 =  (f8 - f14)
		f11 =  f11/*fround*/
		f9 =  f9/*fround*/
		f12 =  f12/*fround*/
		f8 =  f8/*fround*/
		f12 =  f12/*fextend*/
		f13 =  f0/*fextend*/
		f14 =  f6/*fextend*/
		f9 =  f9/*fextend*/
		f11 =  f11/*fextend*/
		f15 =  f1/*fextend*/
		f16 =  f7/*fextend*/
		f8 =  f8/*fextend*/
		f12 =  (f13 * f12)
		f9 =  (f14 * f9)
		f11 =  (f15 * f11)
		f8 =  (f16 * f8)
		f13 =  (f13 * f14)
		f12 =  f12/*fround*/
		f9 =  f9/*fround*/
		f14 =  (f15 * f16)
		f11 =  f11/*fround*/
		f8 =  f8/*fround*/
		f13 =  f13/*fround*/
		f14 =  f14/*fround*/
		f11 =  f11/*fextend*/
		f12 =  f12/*fextend*/
		f9 =  f9/*fextend*/
		f8 =  f8/*fextend*/
		f11 =  (f12 + f11)
		f8 =  (f8 + f9)
		f9 =  f14/*fextend*/
		f12 =  f13/*fextend*/
		f9 =  (f12 - f9)
		f11 =  f11/*fround*/
		f8 =  f8/*fround*/
		f9 =  f9/*fround*/
		f10 =  f10/*fround*/
		f10 =  f10/*fextend*/
		f9 =  f9/*fextend*/
		__asm(push(f9<f10), iftrue, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_27_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_23_F"))
		f9 =  (0)
		f9 =  f9/*fround*/
		f9 =  f9/*fextend*/
		f8 =  f8/*fextend*/
		__asm(push(f8>=f9), iftrue, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_25_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_24_F"))
		f8 =  (0)
		f8 =  f8/*fround*/
		f8 =  f8/*fextend*/
		f9 =  f11/*fextend*/
		__asm(push(f9<f8), iftrue, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_26_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_25_F"))
		__asm(push(f7), push((i2+380)), op(0x3d))
		__asm(push(f6), push((i2+384)), op(0x3d))
		__asm(push(f0), push((i2+388)), op(0x3d))
		__asm(push(f1), push((i2+392)), op(0x3d))
		__asm(jump, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_33_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_26_F"))
		f7 =  f7/*fextend*/
		f6 =  f6/*fextend*/
		f7 =  -f7
		f6 =  -f6
		f0 =  f0/*fextend*/
		f7 =  f7/*fround*/
		f1 =  f1/*fextend*/
		f0 =  -f0
		__asm(push(f7), push((i2+380)), op(0x3d))
		f6 =  f6/*fround*/
		f1 =  -f1
		__asm(push(f6), push((i2+384)), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push((i2+388)), op(0x3d))
		f0 =  f1/*fround*/
		__asm(push(f0), push((i2+392)), op(0x3d))
		__asm(jump, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_33_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_27_F"))
		f9 =  (0)
		f9 =  f9/*fround*/
		f9 =  f9/*fextend*/
		f8 =  f8/*fextend*/
		__asm(push(f8<f9), iftrue, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_30_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_28_F"))
		f8 =  (0)
		f8 =  f8/*fround*/
		f8 =  f8/*fextend*/
		f9 =  f11/*fextend*/
		__asm(push(f9<f8), iftrue, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_30_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_29_F"))
		__asm(push(f0), push((i2+380)), op(0x3d))
		__asm(push(f1), push((i2+384)), op(0x3d))
		__asm(push(f7), push((i2+388)), op(0x3d))
		__asm(push(f6), push((i2+392)), op(0x3d))
		__asm(jump, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_33_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_30_F"))
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  -f0
		f1 =  -f1
		f7 =  f7/*fextend*/
		f0 =  f0/*fround*/
		f6 =  f6/*fextend*/
		f7 =  -f7
		__asm(push(f0), push((i2+380)), op(0x3d))
		f0 =  f1/*fround*/
		f1 =  -f6
		__asm(push(f0), push((i2+384)), op(0x3d))
		f0 =  f7/*fround*/
		__asm(push(f0), push((i2+388)), op(0x3d))
		f0 =  f1/*fround*/
		__asm(push(f0), push((i2+392)), op(0x3d))
		__asm(jump, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_33_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_31_F"))
		f0 =  f12/*fextend*/
		f1 =  f13/*fextend*/
		f0 =  -f0
		f1 =  -f1
		f10 =  f10/*fextend*/
		f0 =  f0/*fround*/
		f11 =  f11/*fextend*/
		f10 =  -f10
		__asm(push(f0), push((i2+364)), op(0x3d))
		f0 =  f1/*fround*/
		f1 =  -f11
		__asm(push(f0), push((i2+368)), op(0x3d))
		f0 =  f10/*fround*/
		__asm(push(f0), push((i2+372)), op(0x3d))
		f0 =  f1/*fround*/
		__asm(push(f0), push((i2+376)), op(0x3d))
		i0 =  ((__xasm<int>(push((i2+41)), op(0x35))))
		__asm(push(i0==0), iftrue, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_32_F"))
		__asm(jump, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_16_B"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_32_F"))
		i0 =  (0)
		__asm(push(i0), push((i2+380)), op(0x3c))
		__asm(push(i0), push((i2+384)), op(0x3c))
		__asm(push(i0), push((i2+388)), op(0x3c))
		__asm(push(i0), push((i2+392)), op(0x3c))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_33_F"))
		f0 =  (-3.40282e+38)
		f1 =  ((__xasm<Number>(push((i2+32)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i2+36)), op(0x38))))
		f7 =  ((__xasm<Number>(push(_b2_angularSlop), op(0x38))))
		f8 =  f1/*fextend*/
		f9 =  f6/*fextend*/
		f10 =  f7/*fextend*/
		f8 =  -f8
		f9 =  -f9
		f10 =  -f10
		f11 =  ((__xasm<Number>(push((i2+368)), op(0x38))))
		f12 =  ((__xasm<Number>(push((i2+364)), op(0x38))))
		f13 =  ((__xasm<Number>(push((i2+384)), op(0x38))))
		f14 =  ((__xasm<Number>(push((i2+380)), op(0x38))))
		f8 =  f8/*fround*/
		f9 =  f9/*fround*/
		f10 =  f10/*fround*/
		f0 =  f0/*fround*/
		i0 =  (i2 + 376)
		i6 =  (i2 + 392)
		i7 =  (i2 + 320)
		i8 =  (-1)
		i9 =  (0)
		i10 =  (i2 + 396)
		i11 =  (i2 + 388)
		i12 =  (i2 + 372)
		i13 = i9
	__asm(jump, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_34_F"), lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_34_B"), label, lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_34_F")); 
		f15 =  f1/*fextend*/
		f16 =  f8/*fextend*/
		f17 =  f6/*fextend*/
		f18 =  f9/*fextend*/
		f15 =  ((i13!=0) ? f16 : f15)
		f16 =  ((i13!=0) ? f18 : f17)
		f15 =  f15/*fround*/
		f16 =  f16/*fround*/
		f17 =  f11/*fextend*/
		f18 =  f15/*fextend*/
		f19 =  f12/*fextend*/
		f20 =  f16/*fextend*/
		f17 =  (f18 * f17)
		f18 =  (f20 * f19)
		f17 =  f17/*fround*/
		f18 =  f18/*fround*/
		f18 =  f18/*fextend*/
		f17 =  f17/*fextend*/
		f17 =  (f17 - f18)
		f17 =  f17/*fround*/
		f18 =  f10/*fextend*/
		f17 =  f17/*fextend*/
		__asm(push(f17<f18), iftrue, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_37_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_35_F"))
		f17 =  ((__xasm<Number>(push(i12), op(0x38))))
		f18 =  ((__xasm<Number>(push(i0), op(0x38))))
		f19 =  f16/*fextend*/
		f20 =  f15/*fextend*/
		f17 =  (f17 * f19)
		f18 =  (f18 * f20)
		f17 =  f17/*fround*/
		f18 =  f18/*fround*/
		f18 =  f18/*fextend*/
		f17 =  f17/*fextend*/
		f17 =  (f17 - f18)
		f17 =  f17/*fround*/
		f18 =  f10/*fextend*/
		f17 =  f17/*fextend*/
		__asm(push(f17<f18), iftrue, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_37_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_36_F"))
		i14 =  (0)
		__asm(jump, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_38_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_37_F"))
		i14 =  (1)
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_38_F"))
		f17 =  f13/*fextend*/
		f18 =  f15/*fextend*/
		f19 =  f14/*fextend*/
		f20 =  f16/*fextend*/
		f17 =  (f18 * f17)
		f18 =  (f20 * f19)
		f17 =  f17/*fround*/
		f18 =  f18/*fround*/
		f18 =  f18/*fextend*/
		f17 =  f17/*fextend*/
		f17 =  (f17 - f18)
		f17 =  f17/*fround*/
		f18 =  f10/*fextend*/
		f17 =  f17/*fextend*/
		__asm(push(f17>=f18), iftrue, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_40_F"))
	__asm(jump, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_39_F"), lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_39_B"), label, lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_39_F")); 
		__asm(jump, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_50_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_40_F"))
		f17 =  ((__xasm<Number>(push(i11), op(0x38))))
		f18 =  ((__xasm<Number>(push(i6), op(0x38))))
		f19 =  f16/*fextend*/
		f20 =  f15/*fextend*/
		f17 =  (f17 * f19)
		f18 =  (f18 * f20)
		f17 =  f17/*fround*/
		f18 =  f18/*fround*/
		f18 =  f18/*fextend*/
		f17 =  f17/*fextend*/
		f17 =  (f17 - f18)
		f17 =  f17/*fround*/
		f18 =  f10/*fextend*/
		f17 =  f17/*fextend*/
		i15 =  ((f17<f18) ? 1 : 0)
		i14 =  (i15 | i14)
		i14 =  (i14 & 1)
		__asm(push(i14!=0), iftrue, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_39_B"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_41_F"))
		i14 =  ((__xasm<int>(push(i7), op(0x37))))
		__asm(push(i14>0), iftrue, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_43_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_42_F"))
		f15 =  (3.40282e+38)
		f15 =  f15/*fround*/
		__asm(jump, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_46_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_43_F"))
		f17 =  (3.40282e+38)
		f17 =  f17/*fround*/
		i15 =  (0)
		i16 = i5
	__asm(jump, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_44_F"), lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_44_B"), label, lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_44_F")); 
		f18 =  ((__xasm<Number>(push((i16+188)), op(0x38))))
		f19 =  ((__xasm<Number>(push((i16+184)), op(0x38))))
		f20 =  f3/*fextend*/
		f21 =  f2/*fextend*/
		f18 =  (f18 - f20)
		f19 =  (f19 - f21)
		f18 =  f18/*fround*/
		f19 =  f19/*fround*/
		f18 =  f18/*fextend*/
		f20 =  f16/*fextend*/
		f19 =  f19/*fextend*/
		f21 =  f15/*fextend*/
		f18 =  (f20 * f18)
		f19 =  (f21 * f19)
		f18 =  f18/*fround*/
		f19 =  f19/*fround*/
		f18 =  f18/*fextend*/
		f19 =  f19/*fextend*/
		f18 =  (f19 + f18)
		f18 =  f18/*fround*/
		f18 =  f18/*fextend*/
		f17 =  f17/*fextend*/
		f17 =  ((f17>f18) ? f18 : f17)
		f17 =  f17/*fround*/
		i16 =  (i16 + 8)
		i15 =  (i15 + 1)
		__asm(push(i14>i15), iftrue, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_119_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_45_F"))
		f15 = f17
		__asm(jump, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_46_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_46_F"))
		f16 =  ((__xasm<Number>(push(i10), op(0x38))))
		f17 =  f15/*fextend*/
		__asm(push(f17<=f16), iftrue, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_48_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_47_F"))
		i8 =  (1)
		__asm(push(i8), push((mstate.ebp+-16)), op(0x3c))
		__asm(push(i13), push((mstate.ebp+-12)), op(0x3c))
		__asm(push(f15), push((mstate.ebp+-8)), op(0x3d))
		__asm(jump, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_53_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_48_F"))
		f16 =  f0/*fextend*/
		f17 =  f15/*fextend*/
		__asm(push(f17<=f16), iftrue, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_39_B"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_49_F"))
		i9 =  (1)
		f0 = f15
		i8 = i13
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_50_F"))
		i13 =  (i13 + 1)
		__asm(push(i13>1), iftrue, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_52_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_51_F"))
		__asm(jump, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_34_B"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_52_F"))
		__asm(push(i9), push((mstate.ebp+-16)), op(0x3c))
		__asm(push(i8), push((mstate.ebp+-12)), op(0x3c))
		__asm(push(f0), push((mstate.ebp+-8)), op(0x3d))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_53_F"))
		i8 =  ((mstate.ebp+-16))
		i9 =  ((__xasm<int>(push((mstate.ebp+-16)), op(0x37))))
		__asm(push(i9==0), iftrue, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_118_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_54_F"))
		f0 =  ((__xasm<Number>(push((mstate.ebp+-8)), op(0x38))))
		f1 =  ((__xasm<Number>(push(i10), op(0x38))))
		f6 =  f1/*fextend*/
		f8 =  f0/*fextend*/
		__asm(push(f8>f6), iftrue, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_118_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_55_F"))
		i9 =  (0)
		__asm(push(i9), push((mstate.ebp+-32)), op(0x3c))
		i9 =  (-1)
		__asm(push(i9), push((mstate.ebp+-28)), op(0x3c))
		i9 =  (-8388609)
		i13 =  ((mstate.ebp+-32))
		__asm(push(i9), push((mstate.ebp+-24)), op(0x3c))
		i7 =  ((__xasm<int>(push(i7), op(0x37))))
		i9 =  (i13 + 8)
		i14 =  (i13 + 4)
		__asm(push(i7>0), iftrue, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_57_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_56_F"))
		f2 =  (-3.40282e+38)
		f2 =  f2/*fround*/
		i0 =  (0)
		__asm(jump, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_77_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_57_F"))
		f6 =  (-3.40282e+38)
		f7 =  f7/*fextend*/
		f7 =  -f7
		f7 =  f7/*fround*/
		f6 =  f6/*fround*/
		i15 =  (-1)
		i16 =  (0)
		i17 = i16
		f8 = f6
	__asm(jump, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_58_F"), lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_58_B"), label, lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_58_F")); 
		f9 =  ((__xasm<Number>(push((i5+252)), op(0x38))))
		f10 =  ((__xasm<Number>(push((i5+248)), op(0x38))))
		f15 =  f12/*fextend*/
		f16 =  f11/*fextend*/
		f15 =  (f15 * f9)
		f16 =  (f16 * f10)
		f15 =  f15/*fround*/
		f16 =  f16/*fround*/
		f9 =  -f9
		f10 =  -f10
		f16 =  f16/*fextend*/
		f15 =  f15/*fextend*/
		f15 =  (f15 - f16)
		f9 =  f9/*fround*/
		f10 =  f10/*fround*/
		f15 =  f15/*fround*/
		f16 =  f7/*fextend*/
		f15 =  f15/*fextend*/
		__asm(push(f15<f16), iftrue, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_61_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_59_F"))
		f15 =  ((__xasm<Number>(push(i12), op(0x38))))
		f16 =  ((__xasm<Number>(push(i0), op(0x38))))
		f17 =  f9/*fextend*/
		f18 =  f10/*fextend*/
		f15 =  (f15 * f17)
		f16 =  (f16 * f18)
		f15 =  f15/*fround*/
		f16 =  f16/*fround*/
		f16 =  f16/*fextend*/
		f15 =  f15/*fextend*/
		f15 =  (f15 - f16)
		f15 =  f15/*fround*/
		f16 =  f7/*fextend*/
		f15 =  f15/*fextend*/
		__asm(push(f15<f16), iftrue, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_61_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_60_F"))
		i18 =  (0)
		__asm(jump, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_62_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_61_F"))
		i18 =  (1)
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_62_F"))
		f15 =  f10/*fextend*/
		f16 =  f13/*fextend*/
		f17 =  f9/*fextend*/
		f18 =  f14/*fextend*/
		f15 =  (f16 * f15)
		f16 =  (f18 * f17)
		f15 =  f15/*fround*/
		f16 =  f16/*fround*/
		f16 =  f16/*fextend*/
		f15 =  f15/*fextend*/
		f15 =  (f15 - f16)
		f15 =  f15/*fround*/
		f16 =  f7/*fextend*/
		f15 =  f15/*fextend*/
		__asm(push(f15<f16), iftrue, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_65_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_63_F"))
		f15 =  ((__xasm<Number>(push(i11), op(0x38))))
		f16 =  ((__xasm<Number>(push(i6), op(0x38))))
		f17 =  f9/*fextend*/
		f18 =  f10/*fextend*/
		f15 =  (f15 * f17)
		f16 =  (f16 * f18)
		f15 =  f15/*fround*/
		f16 =  f16/*fround*/
		f16 =  f16/*fextend*/
		f15 =  f15/*fextend*/
		f15 =  (f15 - f16)
		f15 =  f15/*fround*/
		f16 =  f7/*fextend*/
		f15 =  f15/*fextend*/
		__asm(push(f15<f16), iftrue, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_65_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_64_F"))
		i19 =  (0)
		__asm(jump, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_66_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_65_F"))
		i19 =  (1)
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_66_F"))
		i18 =  (i19 & i18)
		i18 =  (i18 ^ 1)
		i18 =  (i18 & 1)
		__asm(push(i18!=0), iftrue, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_68_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_67_F"))
		__asm(jump, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_74_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_68_F"))
		f15 =  ((__xasm<Number>(push((i5+188)), op(0x38))))
		f16 =  ((__xasm<Number>(push((i5+184)), op(0x38))))
		f17 =  f3/*fextend*/
		f18 =  f5/*fextend*/
		f19 =  f2/*fextend*/
		f20 =  f4/*fextend*/
		f17 =  (f15 - f17)
		f15 =  (f15 - f18)
		f18 =  (f16 - f19)
		f16 =  (f16 - f20)
		f17 =  f17/*fround*/
		f15 =  f15/*fround*/
		f18 =  f18/*fround*/
		f16 =  f16/*fround*/
		f17 =  f17/*fextend*/
		f9 =  f9/*fextend*/
		f15 =  f15/*fextend*/
		f18 =  f18/*fextend*/
		f10 =  f10/*fextend*/
		f16 =  f16/*fextend*/
		f17 =  (f17 * f9)
		f9 =  (f15 * f9)
		f15 =  (f18 * f10)
		f10 =  (f16 * f10)
		f16 =  f17/*fround*/
		f9 =  f9/*fround*/
		f15 =  f15/*fround*/
		f10 =  f10/*fround*/
		f16 =  f16/*fextend*/
		f15 =  f15/*fextend*/
		f9 =  f9/*fextend*/
		f10 =  f10/*fextend*/
		f15 =  (f15 + f16)
		f9 =  (f10 + f9)
		f10 =  f15/*fround*/
		f9 =  f9/*fround*/
		f9 =  f9/*fextend*/
		f10 =  f10/*fextend*/
		f9 =  ((f10<f9) ? f10 : f9)
		f9 =  f9/*fround*/
		f10 =  f9/*fextend*/
		f15 =  f1/*fextend*/
		__asm(push(f15<f10), iftrue, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_70_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_69_F"))
		__asm(jump, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_71_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_70_F"))
		i16 =  (2)
		f8 = f9
		i15 = i17
		f6 = f9
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_71_F"))
		f10 =  f9/*fextend*/
		f15 =  f6/*fextend*/
		__asm(push(f15<f10), iftrue, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_73_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_72_F"))
		__asm(jump, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_74_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_73_F"))
		i16 =  (2)
		f8 = f9
		i15 = i17
		f6 = f9
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_74_F"))
		i5 =  (i5 + 8)
		i17 =  (i17 + 1)
		__asm(push(i7<=i17), iftrue, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_76_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_75_F"))
		__asm(jump, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_58_B"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_76_F"))
		__asm(push(i16), push(i13), op(0x3c))
		__asm(push(i15), push(i14), op(0x3c))
		__asm(push(f8), push(i9), op(0x3d))
		f2 = f8
		i0 = i16
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_77_F"))
		__asm(push(i0==0), iftrue, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_80_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_78_F"))
		f1 =  f1/*fextend*/
		f3 =  f2/*fextend*/
		__asm(push(f3>f1), iftrue, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_118_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_79_F"))
		__asm(push(i0!=0), iftrue, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_81_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_80_F"))
		i13 =  ((mstate.ebp+-16))
		i13 =  (i13 + 4)
		__asm(jump, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_84_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_81_F"))
		f1 =  (0.98)
		f1 =  f1/*fround*/
		f1 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 * f1)
		f1 =  (0.001)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f1 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 + f1)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f1 =  f2/*fextend*/
		__asm(push(f1<=f0), iftrue, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_83_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_82_F"))
		i8 = i13
		i13 = i14
		__asm(jump, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_84_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_83_F"))
		i13 =  ((mstate.ebp+-16))
		i13 =  (i13 + 4)
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_84_F"))
		i0 = i8
		i5 = i13
		i5 =  ((__xasm<int>(push(i5), op(0x37))))
		i0 =  ((__xasm<int>(push(i0), op(0x37))))
		__asm(push(i0!=1), iftrue, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_86_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_85_F"))
		i6 =  (1)
		__asm(push(i6), push((i1+64)), op(0x3c))
		i6 =  (i2 + 184)
		i7 =  (i2 + 44)
		__asm(jump, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_87_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_86_F"))
		i6 =  (2)
		__asm(push(i6), push((i1+64)), op(0x3c))
		i6 =  (i2 + 44)
		i7 =  (i2 + 184)
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_87_F"))
		i8 =  ((__xasm<int>(push((i7+136)), op(0x37))))
		i9 =  ((__xasm<int>(push((i6+136)), op(0x37))))
		i11 =  (i7 + 136)
		i12 = i6
		__asm(push(i5>=i8), iftrue, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_89_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_88_F"))
		__asm(push(i5>-1), iftrue, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_90_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_89_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str43250)
		i3 =  (__ZZN12b2EPCollider16FindIncidentEdgeEP12b2ClipVertexPK9b2EPProxyiS4_E8__func__)
		i4 =  (__2E_str42249)
		i5 =  (632)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold_state1"))
		mstate.esp += 24
		state = 2
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold_state2"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_90_F"))
		i8 =  (i5 << 3)
		i8 =  (i7 + i8)
		f0 =  ((__xasm<Number>(push((i8+64)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i8+68)), op(0x38))))
		__asm(push(i9>0), iftrue, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_92_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_91_F"))
		i12 =  (0)
		__asm(jump, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_96_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_92_F"))
		f2 =  (3.40282e+38)
		f2 =  f2/*fround*/
		i8 =  (0)
		i13 = i8
	__asm(jump, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_93_F"), lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_93_B"), label, lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_93_F")); 
		f3 =  ((__xasm<Number>(push((i12+64)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i12+68)), op(0x38))))
		f5 =  f0/*fextend*/
		f6 =  f1/*fextend*/
		f3 =  (f5 * f3)
		f4 =  (f6 * f4)
		f3 =  f3/*fround*/
		f4 =  f4/*fround*/
		f4 =  f4/*fextend*/
		f3 =  f3/*fextend*/
		f3 =  (f3 + f4)
		f3 =  f3/*fround*/
		f2 =  f2/*fextend*/
		f3 =  f3/*fextend*/
		f4 =  ((f3<f2) ? f3 : f2)
		i8 =  ((f3<f2) ? i13 : i8)
		f2 =  f4/*fround*/
		i12 =  (i12 + 8)
		i13 =  (i13 + 1)
		__asm(push(i13==i9), iftrue, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_95_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_94_F"))
		__asm(jump, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_93_B"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_95_F"))
		i12 = i8
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_96_F"))
		i8 = i12
		i12 =  (1)
		i13 =  (i8 << 3)
		i13 =  (i6 + i13)
		f0 =  ((__xasm<Number>(push(i13), op(0x38))))
		f1 =  ((__xasm<Number>(push((i13+4)), op(0x38))))
		__asm(push(f0), push((mstate.ebp+-64)), op(0x3d))
		__asm(push(f1), push((mstate.ebp+-60)), op(0x3d))
		__asm(push(i5), push((mstate.ebp+-56)), op(0x3a))
		i13 =  (i8 + 1)
		__asm(push(i8), push((mstate.ebp+-55)), op(0x3a))
		i8 =  ((i13<i9) ? i13 : 0)
		i9 =  (i8 << 3)
		__asm(push(i12), push((mstate.ebp+-54)), op(0x3a))
		i13 =  (0)
		__asm(push(i13), push((mstate.ebp+-53)), op(0x3a))
		i6 =  (i6 + i9)
		f0 =  ((__xasm<Number>(push(i6), op(0x38))))
		f1 =  ((__xasm<Number>(push((i6+4)), op(0x38))))
		__asm(push(f0), push((mstate.ebp+-52)), op(0x3d))
		__asm(push(f1), push((mstate.ebp+-48)), op(0x3d))
		__asm(push(i5), push((mstate.ebp+-44)), op(0x3a))
		__asm(push(i8), push((mstate.ebp+-43)), op(0x3a))
		__asm(push(i12), push((mstate.ebp+-42)), op(0x3a))
		__asm(push(i13), push((mstate.ebp+-41)), op(0x3a))
		i6 =  ((__xasm<int>(push(i11), op(0x37))))
		i8 =  (i5 + 1)
		i6 =  ((i8<i6) ? i8 : 0)
		i8 =  (i6 << 3)
		i9 =  (i5 << 3)
		i8 =  (i7 + i8)
		i7 =  (i7 + i9)
		f0 =  ((__xasm<Number>(push(i7), op(0x38))))
		f1 =  ((__xasm<Number>(push((i7+4)), op(0x38))))
		f2 =  ((__xasm<Number>(push(i8), op(0x38))))
		f3 =  ((__xasm<Number>(push((i8+4)), op(0x38))))
		f4 =  f0/*fextend*/
		f5 =  f2/*fextend*/
		f6 =  f1/*fextend*/
		f7 =  f3/*fextend*/
		f4 =  (f5 - f4)
		f5 =  (f7 - f6)
		f4 =  f4/*fround*/
		f5 =  f5/*fround*/
		f6 =  f4/*fextend*/
		f7 =  f5/*fextend*/
		f6 =  (f6 * f6)
		f7 =  (f7 * f7)
		f6 =  f6/*fround*/
		f7 =  f7/*fround*/
		f7 =  f7/*fextend*/
		f6 =  f6/*fextend*/
		f6 =  (f6 + f7)
		f6 =  f6/*fround*/
		f6 =  f6/*fextend*/
		f6 =  Math.sqrt(f6)
		f6 =  f6/*fround*/
		f7 =  (1.19209e-07)
		f7 =  f7/*fround*/
		f7 =  f7/*fextend*/
		f8 =  f6/*fextend*/
		__asm(push(f8>=f7), iftrue, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_98_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_97_F"))
		f6 = f4
		f7 = f5
		__asm(jump, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_99_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_98_F"))
		f7 =  (1)
		f7 =  f7/*fround*/
		f6 =  f6/*fextend*/
		f7 =  f7/*fextend*/
		f6 =  (f7 / f6)
		f6 =  f6/*fround*/
		f4 =  f4/*fextend*/
		f6 =  f6/*fextend*/
		f5 =  f5/*fextend*/
		f4 =  (f4 * f6)
		f5 =  (f5 * f6)
		f4 =  f4/*fround*/
		f5 =  f5/*fround*/
		f6 = f4
		f7 = f5
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_99_F"))
		f8 =  (0.5)
		f9 =  f5/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		f10 =  f4/*fextend*/
		f11 =  (f9 * f1)
		f12 =  (f10 * f0)
		f11 =  f11/*fround*/
		f12 =  f12/*fround*/
		f11 =  f11/*fextend*/
		f12 =  f12/*fextend*/
		f11 =  (f12 + f11)
		f12 =  ((__xasm<Number>(push(i10), op(0x38))))
		f11 =  f11/*fround*/
		f10 =  -f10
		f10 =  f10/*fround*/
		f11 =  f11/*fextend*/
		f13 =  f12/*fextend*/
		f14 =  f10/*fextend*/
		f15 =  f3/*fextend*/
		f16 =  f2/*fextend*/
		f11 =  (f13 - f11)
		f13 =  -f9
		mstate.esp -= 24
		f14 =  (f14 * f1)
		f1 =  (f1 + f15)
		f15 =  (f0 + f16)
		f0 =  (f9 * f0)
		f9 =  f11/*fround*/
		f11 =  f13/*fround*/
		i7 =  ((mstate.ebp+-64))
		i8 =  ((mstate.ebp+-96))
		f13 =  f14/*fround*/
		f1 =  f1/*fround*/
		f14 =  f15/*fround*/
		f0 =  f0/*fround*/
		f8 =  f8/*fround*/
		__asm(push(i8), push(mstate.esp), op(0x3c))
		__asm(push(i7), push((mstate.esp+4)), op(0x3c))
		__asm(push(f10), push((mstate.esp+8)), op(0x3d))
		__asm(push(f11), push((mstate.esp+12)), op(0x3d))
		__asm(push(f9), push((mstate.esp+16)), op(0x3d))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		f9 =  f13/*fextend*/
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		f8 =  f8/*fextend*/
		f11 =  f14/*fextend*/
		f0 =  (f0 + f9)
		f1 =  (f1 * f8)
		f8 =  (f11 * f8)
		mstate.esp -= 4;FSM__Z19b2ClipSegmentToLineP12b2ClipVertexPKS_RK6b2Vec2fi342.start()
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold_state3"))
		i5 = mstate.eax
		mstate.esp += 24
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f8 =  f8/*fround*/
		__asm(push(i5<2), iftrue, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_118_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_100_F"))
		i5 =  ((mstate.ebp+-128))
		f3 =  f3/*fextend*/
		f9 =  f5/*fextend*/
		f2 =  f2/*fextend*/
		f4 =  f4/*fextend*/
		f3 =  (f9 * f3)
		f2 =  (f4 * f2)
		f3 =  f3/*fround*/
		f2 =  f2/*fround*/
		f3 =  f3/*fextend*/
		f2 =  f2/*fextend*/
		f2 =  (f2 + f3)
		f2 =  f2/*fround*/
		f3 =  f12/*fextend*/
		f2 =  f2/*fextend*/
		f2 =  (f2 + f3)
		mstate.esp -= 24
		f2 =  f2/*fround*/
		__asm(push(i5), push(mstate.esp), op(0x3c))
		__asm(push(i8), push((mstate.esp+4)), op(0x3c))
		__asm(push(f6), push((mstate.esp+8)), op(0x3d))
		__asm(push(f7), push((mstate.esp+12)), op(0x3d))
		__asm(push(f2), push((mstate.esp+16)), op(0x3d))
		__asm(push(i6), push((mstate.esp+20)), op(0x3c))
		mstate.esp -= 4;FSM__Z19b2ClipSegmentToLineP12b2ClipVertexPKS_RK6b2Vec2fi342.start()
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold_state4"))
		i5 = mstate.eax
		mstate.esp += 24
		__asm(push(i5<2), iftrue, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_118_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_101_F"))
		__asm(push(i0!=1), iftrue, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_103_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_102_F"))
		__asm(push(f5), push((i1+48)), op(0x3d))
		__asm(push(f10), push((i1+52)), op(0x3d))
		__asm(push(f8), push((i1+56)), op(0x3d))
		__asm(push(f1), push((i1+60)), op(0x3d))
		__asm(jump, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_104_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_103_F"))
		f2 =  ((__xasm<Number>(push((i2+332)), op(0x38))))
		f3 =  f5/*fextend*/
		f4 =  ((__xasm<Number>(push((i2+336)), op(0x38))))
		f6 =  f10/*fextend*/
		f7 =  ((__xasm<Number>(push((i2+340)), op(0x38))))
		f9 =  ((__xasm<Number>(push((i2+344)), op(0x38))))
		f4 =  (f6 * f4)
		f2 =  (f3 * f2)
		f4 =  f4/*fround*/
		f6 =  (f6 * f9)
		f3 =  (f3 * f7)
		f2 =  f2/*fround*/
		f6 =  f6/*fround*/
		f3 =  f3/*fround*/
		f4 =  f4/*fextend*/
		f2 =  f2/*fextend*/
		f2 =  (f2 + f4)
		f4 =  f6/*fextend*/
		f3 =  f3/*fextend*/
		f3 =  (f3 + f4)
		f2 =  f2/*fround*/
		__asm(push(f2), push((i1+48)), op(0x3d))
		f2 =  f3/*fround*/
		__asm(push(f2), push((i1+52)), op(0x3d))
		f2 =  ((__xasm<Number>(push((i2+328)), op(0x38))))
		f1 =  f1/*fextend*/
		f3 =  ((__xasm<Number>(push((i2+324)), op(0x38))))
		f4 =  f8/*fextend*/
		f3 =  (f4 - f3)
		f1 =  (f1 - f2)
		f2 =  f3/*fround*/
		f1 =  f1/*fround*/
		f3 =  ((__xasm<Number>(push((i2+332)), op(0x38))))
		f2 =  f2/*fextend*/
		f4 =  ((__xasm<Number>(push((i2+336)), op(0x38))))
		f1 =  f1/*fextend*/
		f6 =  ((__xasm<Number>(push((i2+340)), op(0x38))))
		f7 =  ((__xasm<Number>(push((i2+344)), op(0x38))))
		f3 =  (f2 * f3)
		f4 =  (f1 * f4)
		f2 =  (f2 * f6)
		f3 =  f3/*fround*/
		f1 =  (f1 * f7)
		f4 =  f4/*fround*/
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		f4 =  f4/*fextend*/
		f3 =  f3/*fextend*/
		f3 =  (f3 + f4)
		f1 =  f1/*fextend*/
		f2 =  f2/*fextend*/
		f1 =  (f2 + f1)
		f2 =  f3/*fround*/
		__asm(push(f2), push((i1+56)), op(0x3d))
		f1 =  f1/*fround*/
		__asm(push(f1), push((i1+60)), op(0x3d))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_104_F"))
		i5 =  (i2 + 328)
		i6 =  (i2 + 332)
		i7 =  (i2 + 340)
		i8 =  (i2 + 344)
		i9 =  (i2 + 336)
		i2 =  (i2 + 324)
		__asm(push(i0==1), iftrue, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_108_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_105_F"))
		i2 =  (0)
		i5 = i4
		i6 = i2
		__asm(jump, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_106_F"))
	__asm(jump, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_106_F"), lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_106_B"), label, lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_106_F")); 
		i0 = i5
		i5 = i6
		f1 =  ((__xasm<Number>(push(i0), op(0x38))))
		f2 =  ((__xasm<Number>(push((i0+4)), op(0x38))))
		f3 =  f1/*fextend*/
		f4 =  f5/*fextend*/
		f6 =  f2/*fextend*/
		f7 =  f10/*fextend*/
		f3 =  (f4 * f3)
		f4 =  (f7 * f6)
		f3 =  f3/*fround*/
		f4 =  f4/*fround*/
		f4 =  f4/*fextend*/
		f3 =  f3/*fextend*/
		f3 =  (f3 + f4)
		f3 =  f3/*fround*/
		f4 =  ((__xasm<Number>(push(i10), op(0x38))))
		f6 =  f0/*fextend*/
		f3 =  f3/*fextend*/
		f3 =  (f3 - f6)
		f3 =  f3/*fround*/
		f3 =  f3/*fextend*/
		__asm(push(f4>=f3), iftrue, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_113_F"))
		__asm(jump, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_107_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_107_F"))
		__asm(jump, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_114_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_108_F"))
		f1 =  ((__xasm<Number>(push((mstate.ebp+-128)), op(0x38))))
		f2 =  ((__xasm<Number>(push((mstate.ebp+-124)), op(0x38))))
		f3 =  f1/*fextend*/
		f4 =  f5/*fextend*/
		f6 =  f2/*fextend*/
		f7 =  f10/*fextend*/
		f3 =  (f4 * f3)
		f4 =  (f7 * f6)
		f3 =  f3/*fround*/
		f4 =  f4/*fround*/
		f4 =  f4/*fextend*/
		f3 =  f3/*fextend*/
		f3 =  (f3 + f4)
		f3 =  f3/*fround*/
		f4 =  ((__xasm<Number>(push(i10), op(0x38))))
		f6 =  f0/*fextend*/
		f3 =  f3/*fextend*/
		f3 =  (f3 - f6)
		f3 =  f3/*fround*/
		f3 =  f3/*fextend*/
		__asm(push(f4>=f3), iftrue, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_112_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_109_F"))
		i0 =  (0)
	__asm(jump, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_110_F"), lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_110_B"), label, lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_110_F")); 
		f1 =  ((__xasm<Number>(push((mstate.ebp+-116)), op(0x38))))
		f2 =  ((__xasm<Number>(push((mstate.ebp+-112)), op(0x38))))
		f3 =  f1/*fextend*/
		f4 =  f5/*fextend*/
		f5 =  f2/*fextend*/
		f6 =  f10/*fextend*/
		f3 =  (f4 * f3)
		f4 =  (f6 * f5)
		f5 =  f3/*fround*/
		f10 =  f4/*fround*/
		f3 =  f10/*fextend*/
		f4 =  f5/*fextend*/
		f3 =  (f4 + f3)
		f5 =  f3/*fround*/
		f3 =  ((__xasm<Number>(push(i10), op(0x38))))
		f0 =  f0/*fextend*/
		f4 =  f5/*fextend*/
		f0 =  (f4 - f0)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		__asm(push(f3>=f0), iftrue, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_120_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_111_F"))
		__asm(jump, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_117_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_112_F"))
		i0 =  (1)
		f3 =  ((__xasm<Number>(push(i5), op(0x38))))
		f2 =  f2/*fextend*/
		f4 =  ((__xasm<Number>(push(i2), op(0x38))))
		f1 =  f1/*fextend*/
		f2 =  (f2 - f3)
		f1 =  (f1 - f4)
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		f3 =  ((__xasm<Number>(push(i6), op(0x38))))
		f1 =  f1/*fextend*/
		f4 =  ((__xasm<Number>(push(i9), op(0x38))))
		f2 =  f2/*fextend*/
		f6 =  ((__xasm<Number>(push(i7), op(0x38))))
		f7 =  ((__xasm<Number>(push(i8), op(0x38))))
		f4 =  (f2 * f4)
		f3 =  (f1 * f3)
		f2 =  (f2 * f7)
		f4 =  f4/*fround*/
		f1 =  (f1 * f6)
		f3 =  f3/*fround*/
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		f4 =  f4/*fextend*/
		f3 =  f3/*fextend*/
		f3 =  (f3 + f4)
		f2 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		f1 =  (f1 + f2)
		f2 =  f3/*fround*/
		__asm(push(f2), push(i1), op(0x3d))
		f1 =  f1/*fround*/
		__asm(push(f1), push((i1+4)), op(0x3d))
		i4 =  ((__xasm<int>(push((mstate.ebp+-120)), op(0x37))))
		__asm(push(i4), push((i1+16)), op(0x3c))
		__asm(jump, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_110_B"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_113_F"))
		i6 =  (i2 * 24)
		i6 =  (i1 + i6)
		__asm(push(f1), push(i6), op(0x3d))
		__asm(push(f2), push((i6+4)), op(0x3d))
		i7 =  ((__xasm<int>(push((i0+11)), op(0x35))))
		__asm(push(i7), push((i6+18)), op(0x3a))
		i7 =  ((__xasm<int>(push((i0+10)), op(0x35))))
		__asm(push(i7), push((i6+19)), op(0x3a))
		i7 =  ((__xasm<int>(push((i0+9)), op(0x35))))
		__asm(push(i7), push((i6+16)), op(0x3a))
		i7 =  ((__xasm<int>(push((i0+8)), op(0x35))))
		__asm(push(i7), push((i6+17)), op(0x3a))
		i2 =  (i2 + 1)
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_114_F"))
		i0 =  (i0 + 12)
		i6 =  (i5 + 1)
		__asm(push(i6==2), iftrue, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_116_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_115_F"))
		i5 = i0
		__asm(jump, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_106_B"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_116_F"))
		i0 = i2
	__asm(jump, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_117_F"), lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_117_B"), label, lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_117_F")); 
		__asm(push(i0), push(i3), op(0x3c))
		__asm(jump, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_118_F"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_118_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_119_F"))
		__asm(jump, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_44_B"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_120_F"))
		f0 =  ((__xasm<Number>(push(i5), op(0x38))))
		f2 =  f2/*fextend*/
		f3 =  ((__xasm<Number>(push(i2), op(0x38))))
		f1 =  f1/*fextend*/
		f0 =  (f2 - f0)
		f1 =  (f1 - f3)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f2 =  ((__xasm<Number>(push(i6), op(0x38))))
		f1 =  f1/*fextend*/
		f3 =  ((__xasm<Number>(push(i9), op(0x38))))
		f0 =  f0/*fextend*/
		f4 =  ((__xasm<Number>(push(i7), op(0x38))))
		f5 =  ((__xasm<Number>(push(i8), op(0x38))))
		f3 =  (f0 * f3)
		f2 =  (f1 * f2)
		f0 =  (f0 * f5)
		f3 =  f3/*fround*/
		f1 =  (f1 * f4)
		f2 =  f2/*fround*/
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f3 =  f3/*fextend*/
		f2 =  f2/*fextend*/
		f2 =  (f2 + f3)
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		i2 =  (i0 * 24)
		f0 =  (f1 + f0)
		f1 =  f2/*fround*/
		i1 =  (i1 + i2)
		__asm(push(f1), push(i1), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push((i1+4)), op(0x3d))
		i2 =  ((__xasm<int>(push((mstate.ebp+-108)), op(0x37))))
		__asm(push(i2), push((i1+16)), op(0x3c))
		i0 =  (i0 + 1)
		__asm(jump, target("__ZN12b2EPCollider7CollideEP10b2Manifold__XprivateX__BB434_117_B"))
	__asm(lbl("__ZN12b2EPCollider7CollideEP10b2Manifold_errState"))
		throw("Invalid state in __ZN12b2EPCollider7CollideEP10b2Manifold")
	}
}



// Async
public const __ZN15b2ContactSolver29InitializeVelocityConstraintsEv:int = regFunc(FSM__ZN15b2ContactSolver29InitializeVelocityConstraintsEv.start)

public final class FSM__ZN15b2ContactSolver29InitializeVelocityConstraintsEv extends Machine {

	public static function start():void {
			var result:FSM__ZN15b2ContactSolver29InitializeVelocityConstraintsEv = new FSM__ZN15b2ContactSolver29InitializeVelocityConstraintsEv
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
	public var i8:int, i9:int, i10:int, i11:int, i12:int, i13:int, i14:int, i15:int
	public var i16:int, i17:int, i18:int, i19:int, i20:int, i21:int, i22:int, i23:int
	public var i24:int
	public static const intRegCount:int = 25
	public var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number
	public var f8:Number, f9:Number, f10:Number, f11:Number, f12:Number, f13:Number, f14:Number, f15:Number
	public var f16:Number, f17:Number, f18:Number, f19:Number, f20:Number, f21:Number, f22:Number

	public static const NumberRegCount:int = 23
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv_entry"))
		__asm(push(state), switchjump(
			"__ZN15b2ContactSolver29InitializeVelocityConstraintsEv_errState",
			"__ZN15b2ContactSolver29InitializeVelocityConstraintsEv_state0",
			"__ZN15b2ContactSolver29InitializeVelocityConstraintsEv_state1",
			"__ZN15b2ContactSolver29InitializeVelocityConstraintsEv_state2"))
	__asm(lbl("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv_state0"))
	__asm(lbl("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 16
		i0 =  ((mstate.ebp+-16))
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i2 =  ((__xasm<int>(push((i1+8)), op(0x37))))
		i3 =  (i1 + 8)
		__asm(push(i2<1), iftrue, target("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_46_F"))
	__asm(lbl("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_1_F"))
		i2 =  ((mstate.ebp+-16))
		//IMPLICIT_DEF f0 = 
		i4 =  (0)
		i5 =  (i2 + 4)
		i1 =  (i1 + 4)
		i6 = i4
		f1 = f0
	__asm(jump, target("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_2_F"), lbl("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_2_B"), label, lbl("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_2_F")); 
		i7 =  ((__xasm<int>(push(i1), op(0x37))))
		i8 =  (i7 + i6)
		i9 =  ((__xasm<int>(push((i8+176)), op(0x37))))
		i10 =  ((__xasm<int>(push((i8+144)), op(0x37))))
		i11 =  ((__xasm<int>(push((i8+148)), op(0x37))))
		f2 =  ((__xasm<Number>(push((i8+156)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i8+160)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i10+72)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i10+76)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i11+72)), op(0x38))))
		f7 =  ((__xasm<Number>(push((i11+76)), op(0x38))))
		f8 =  ((__xasm<Number>(push((i10+80)), op(0x38))))
		f9 =  ((__xasm<Number>(push((i11+80)), op(0x38))))
		i8 =  ((__xasm<int>(push((i9+68)), op(0x37))))
		i12 =  (i9 + 68)
		i13 = i9
		__asm(push(i8>0), iftrue, target("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_4_F"))
	__asm(lbl("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_3_F"))
		i4 =  (___sF)
		mstate.esp -= 24
		i6 =  (__2E_str1670)
		i0 =  (__2E_str139328)
		i1 =  (__ZZN15b2ContactSolver29InitializeVelocityConstraintsEvE8__func__)
		i2 =  (__2E_str60267)
		i3 =  (137)
		i4 =  (i4 + 176)
		__asm(push(i4), push(mstate.esp), op(0x3c))
		__asm(push(i6), push((mstate.esp+4)), op(0x3c))
		__asm(push(i0), push((mstate.esp+8)), op(0x3c))
		__asm(push(i1), push((mstate.esp+12)), op(0x3c))
		__asm(push(i2), push((mstate.esp+16)), op(0x3c))
		__asm(push(i3), push((mstate.esp+20)), op(0x3c))
		__asm(jump, target("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_30_F"))
	__asm(lbl("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_4_F"))
		__asm(push(i8!=0), iftrue, target("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_6_F"))
	__asm(jump, target("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_5_F"), lbl("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_5_B"), label, lbl("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_5_F")); 
		__asm(jump, target("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_25_F"))
	__asm(lbl("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_6_F"))
		i14 =  ((__xasm<int>(push((i13+64)), op(0x37))))
		__asm(push(i14==2), iftrue, target("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_20_F"))
	__asm(lbl("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_7_F"))
		__asm(push(i14==1), iftrue, target("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_15_F"))
	__asm(lbl("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_8_F"))
		__asm(push(i14!=0), iftrue, target("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_5_B"))
	__asm(lbl("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_9_F"))
		f0 =  (1.42109e-14)
		f1 =  ((__xasm<Number>(push((i10+20)), op(0x38))))
		f10 =  ((__xasm<Number>(push((i13+56)), op(0x38))))
		f11 =  ((__xasm<Number>(push((i10+24)), op(0x38))))
		f12 =  ((__xasm<Number>(push((i11+20)), op(0x38))))
		f13 =  ((__xasm<Number>(push(i13), op(0x38))))
		f14 =  ((__xasm<Number>(push((i11+24)), op(0x38))))
		f11 =  (f11 * f10)
		f1 =  (f1 * f10)
		f10 =  (f12 * f13)
		f12 =  (f14 * f13)
		f11 =  f11/*fround*/
		f1 =  f1/*fround*/
		f10 =  f10/*fround*/
		f12 =  f12/*fround*/
		f13 =  ((__xasm<Number>(push((i10+12)), op(0x38))))
		f1 =  f1/*fextend*/
		f14 =  ((__xasm<Number>(push((i10+28)), op(0x38))))
		f15 =  ((__xasm<Number>(push((i13+60)), op(0x38))))
		f16 =  ((__xasm<Number>(push((i10+32)), op(0x38))))
		f17 =  ((__xasm<Number>(push((i10+16)), op(0x38))))
		f11 =  f11/*fextend*/
		f18 =  ((__xasm<Number>(push((i11+12)), op(0x38))))
		f10 =  f10/*fextend*/
		f19 =  ((__xasm<Number>(push((i11+28)), op(0x38))))
		f20 =  ((__xasm<Number>(push((i13+4)), op(0x38))))
		f21 =  ((__xasm<Number>(push((i11+32)), op(0x38))))
		f22 =  ((__xasm<Number>(push((i11+16)), op(0x38))))
		f12 =  f12/*fextend*/
		f1 =  (f13 + f1)
		f13 =  (f16 * f15)
		f11 =  (f17 + f11)
		f14 =  (f14 * f15)
		f10 =  (f18 + f10)
		f12 =  (f22 + f12)
		f15 =  (f19 * f20)
		f16 =  (f21 * f20)
		f1 =  f1/*fround*/
		f13 =  f13/*fround*/
		f11 =  f11/*fround*/
		f14 =  f14/*fround*/
		f10 =  f10/*fround*/
		f12 =  f12/*fround*/
		f15 =  f15/*fround*/
		f16 =  f16/*fround*/
		f14 =  f14/*fextend*/
		f1 =  f1/*fextend*/
		f13 =  f13/*fextend*/
		f11 =  f11/*fextend*/
		f15 =  f15/*fextend*/
		f10 =  f10/*fextend*/
		f16 =  f16/*fextend*/
		f12 =  f12/*fextend*/
		f1 =  (f1 + f14)
		f11 =  (f11 + f13)
		f10 =  (f10 + f15)
		f12 =  (f12 + f16)
		f1 =  f1/*fround*/
		f11 =  f11/*fround*/
		f10 =  f10/*fround*/
		f12 =  f12/*fround*/
		f13 =  f10/*fextend*/
		f14 =  f1/*fextend*/
		f15 =  f12/*fextend*/
		f16 =  f11/*fextend*/
		f13 =  (f14 - f13)
		f14 =  (f16 - f15)
		f13 =  f13/*fround*/
		f14 =  f14/*fround*/
		f13 =  f13/*fextend*/
		f14 =  f14/*fextend*/
		f13 =  (f13 * f13)
		f14 =  (f14 * f14)
		f13 =  f13/*fround*/
		f14 =  f14/*fround*/
		f14 =  f14/*fextend*/
		f13 =  f13/*fextend*/
		f13 =  (f13 + f14)
		f13 =  f13/*fround*/
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f13 =  f13/*fextend*/
		__asm(push(f13>f0), iftrue, target("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_11_F"))
	__asm(lbl("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_10_F"))
		f0 =  (0)
		f13 =  (1)
		f0 =  f0/*fround*/
		f13 =  f13/*fround*/
		f14 = f0
		f15 = f13
		__asm(jump, target("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_14_F"))
	__asm(lbl("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_11_F"))
		f0 =  (1.19209e-07)
		f13 =  f11/*fextend*/
		f14 =  f12/*fextend*/
		f15 =  f1/*fextend*/
		f16 =  f10/*fextend*/
		f13 =  (f14 - f13)
		f14 =  (f16 - f15)
		f16 =  f13/*fround*/
		f13 =  f14/*fround*/
		f14 =  f16/*fextend*/
		f15 =  f13/*fextend*/
		f14 =  (f14 * f14)
		f15 =  (f15 * f15)
		f14 =  f14/*fround*/
		f15 =  f15/*fround*/
		f14 =  f14/*fextend*/
		f15 =  f15/*fextend*/
		f14 =  (f15 + f14)
		f14 =  f14/*fround*/
		f14 =  f14/*fextend*/
		f14 =  Math.sqrt(f14)
		f14 =  f14/*fround*/
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f15 =  f14/*fextend*/
		__asm(push(f15>=f0), iftrue, target("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_13_F"))
	__asm(lbl("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_12_F"))
		f14 = f16
		f15 = f13
		f0 = f16
		__asm(jump, target("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_14_F"))
	__asm(lbl("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_13_F"))
		f0 =  (1)
		f0 =  f0/*fround*/
		f14 =  f14/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 / f14)
		f0 =  f0/*fround*/
		f13 =  f13/*fextend*/
		f0 =  f0/*fextend*/
		f14 =  f16/*fextend*/
		f13 =  (f13 * f0)
		f0 =  (f14 * f0)
		f13 =  f13/*fround*/
		f0 =  f0/*fround*/
		f14 = f0
		f15 = f13
	__asm(lbl("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_14_F"))
		f16 =  (0.5)
		f2 =  f2/*fextend*/
		f13 =  f13/*fextend*/
		f3 =  f3/*fextend*/
		f0 =  f0/*fextend*/
		f17 =  (f13 * f2)
		f13 =  (f13 * f3)
		f2 =  (f0 * f2)
		f0 =  (f0 * f3)
		f3 =  f17/*fround*/
		f13 =  f13/*fround*/
		f2 =  f2/*fround*/
		f0 =  f0/*fround*/
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f13 =  f13/*fextend*/
		f10 =  f10/*fextend*/
		f1 =  (f1 + f3)
		f3 =  (f10 - f13)
		f2 =  f2/*fextend*/
		f10 =  f11/*fextend*/
		f0 =  f0/*fextend*/
		f11 =  f12/*fextend*/
		f2 =  (f10 + f2)
		f0 =  (f11 - f0)
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		f2 =  f2/*fround*/
		f0 =  f0/*fround*/
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f1 =  (f1 + f3)
		f0 =  f0/*fextend*/
		f2 =  f2/*fextend*/
		f0 =  (f2 + f0)
		f1 =  f1/*fround*/
		f2 =  f16/*fround*/
		f0 =  f0/*fround*/
		f2 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		f1 =  (f1 * f2)
		f0 =  (f0 * f2)
		f1 =  f1/*fround*/
		__asm(push(f1), push(i2), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push(i5), op(0x3d))
		f1 = f14
		f0 = f15
		__asm(jump, target("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_25_F"))
	__asm(lbl("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_15_F"))
		f0 =  ((__xasm<Number>(push((i10+24)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i13+56)), op(0x38))))
		f10 =  ((__xasm<Number>(push((i10+20)), op(0x38))))
		f11 =  (f0 * f1)
		f1 =  (f10 * f1)
		f11 =  f11/*fround*/
		f1 =  f1/*fround*/
		f12 =  ((__xasm<Number>(push((i13+48)), op(0x38))))
		f13 =  ((__xasm<Number>(push((i10+32)), op(0x38))))
		f14 =  ((__xasm<Number>(push((i13+52)), op(0x38))))
		f15 =  ((__xasm<Number>(push((i10+28)), op(0x38))))
		f16 =  ((__xasm<Number>(push((i13+60)), op(0x38))))
		f17 =  ((__xasm<Number>(push((i10+12)), op(0x38))))
		f18 =  ((__xasm<Number>(push((i10+16)), op(0x38))))
		f1 =  f1/*fextend*/
		f11 =  f11/*fextend*/
		f1 =  (f17 + f1)
		f11 =  (f18 + f11)
		f17 =  (f13 * f14)
		f13 =  (f13 * f16)
		f14 =  (f15 * f14)
		f15 =  (f15 * f16)
		f0 =  (f0 * f12)
		f10 =  (f10 * f12)
		f1 =  f1/*fround*/
		f11 =  f11/*fround*/
		f12 =  f17/*fround*/
		f13 =  f13/*fround*/
		f14 =  f14/*fround*/
		f15 =  f15/*fround*/
		f0 =  f0/*fround*/
		f10 =  f10/*fround*/
		f15 =  f15/*fextend*/
		f1 =  f1/*fextend*/
		f13 =  f13/*fextend*/
		f11 =  f11/*fextend*/
		f12 =  f12/*fextend*/
		f0 =  f0/*fextend*/
		f14 =  f14/*fextend*/
		f10 =  f10/*fextend*/
		f1 =  (f1 + f15)
		f11 =  (f11 + f13)
		f0 =  (f0 + f12)
		f10 =  (f10 + f14)
		f1 =  f1/*fround*/
		f11 =  f11/*fround*/
		f0 =  f0/*fround*/
		f10 =  f10/*fround*/
		__asm(push(i8>0), iftrue, target("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_17_F"))
	__asm(jump, target("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_16_F"), lbl("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_16_B"), label, lbl("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_16_F")); 
		f1 = f0
		f0 = f10
		__asm(jump, target("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_25_F"))
	__asm(lbl("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_17_F"))
		i8 =  (0)
		f12 =  f0/*fextend*/
		f3 =  f3/*fextend*/
		f13 =  f10/*fextend*/
		f12 =  (f12 * f3)
		f3 =  (f13 * f3)
		f12 =  f12/*fround*/
		f3 =  f3/*fround*/
		i13 =  (i11 + 20)
		i14 =  (i11 + 28)
		i15 =  (i11 + 16)
		i16 =  (i11 + 24)
		i17 =  (i11 + 32)
		i18 =  (i11 + 12)
		i19 = i0
	__asm(jump, target("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_18_F"), lbl("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_18_B"), label, lbl("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_18_F")); 
		f13 =  (0.5)
		f14 =  ((__xasm<Number>(push(i13), op(0x38))))
		f15 =  ((__xasm<Number>(push(i9), op(0x38))))
		f16 =  ((__xasm<Number>(push(i16), op(0x38))))
		f14 =  (f14 * f15)
		f15 =  (f16 * f15)
		f14 =  f14/*fround*/
		f15 =  f15/*fround*/
		f16 =  ((__xasm<Number>(push(i18), op(0x38))))
		f14 =  f14/*fextend*/
		f17 =  ((__xasm<Number>(push(i14), op(0x38))))
		f18 =  ((__xasm<Number>(push((i9+4)), op(0x38))))
		f19 =  ((__xasm<Number>(push(i17), op(0x38))))
		f20 =  ((__xasm<Number>(push(i15), op(0x38))))
		f15 =  f15/*fextend*/
		f14 =  (f16 + f14)
		f15 =  (f20 + f15)
		f16 =  (f17 * f18)
		f17 =  (f19 * f18)
		f14 =  f14/*fround*/
		f15 =  f15/*fround*/
		f16 =  f16/*fround*/
		f17 =  f17/*fround*/
		f16 =  f16/*fextend*/
		f14 =  f14/*fextend*/
		f17 =  f17/*fextend*/
		f15 =  f15/*fextend*/
		f14 =  (f14 + f16)
		f15 =  (f15 + f17)
		f14 =  f14/*fround*/
		f15 =  f15/*fround*/
		f16 =  f1/*fextend*/
		f14 =  f14/*fextend*/
		f17 =  f11/*fextend*/
		f15 =  f15/*fextend*/
		f16 =  (f14 - f16)
		f17 =  (f15 - f17)
		f16 =  f16/*fround*/
		f17 =  f17/*fround*/
		f18 =  f10/*fextend*/
		f16 =  f16/*fextend*/
		f19 =  f0/*fextend*/
		f17 =  f17/*fextend*/
		f16 =  (f16 * f18)
		f17 =  (f17 * f19)
		f16 =  f16/*fround*/
		f17 =  f17/*fround*/
		f17 =  f17/*fextend*/
		f16 =  f16/*fextend*/
		f16 =  (f16 + f17)
		f16 =  f16/*fround*/
		f16 =  f16/*fextend*/
		f17 =  f2/*fextend*/
		f16 =  (f17 - f16)
		f16 =  f16/*fround*/
		f16 =  f16/*fextend*/
		f17 =  (f18 * f16)
		f16 =  (f19 * f16)
		f17 =  f17/*fround*/
		f16 =  f16/*fround*/
		f17 =  f17/*fextend*/
		f18 =  f3/*fextend*/
		f16 =  f16/*fextend*/
		f17 =  (f14 + f17)
		f14 =  (f14 - f18)
		f18 =  f12/*fextend*/
		f16 =  (f15 + f16)
		f17 =  f17/*fround*/
		f14 =  f14/*fround*/
		f15 =  (f15 - f18)
		f16 =  f16/*fround*/
		f15 =  f15/*fround*/
		f14 =  f14/*fextend*/
		f17 =  f17/*fextend*/
		f14 =  (f17 + f14)
		f15 =  f15/*fextend*/
		f16 =  f16/*fextend*/
		f15 =  (f16 + f15)
		f14 =  f14/*fround*/
		f13 =  f13/*fround*/
		f15 =  f15/*fround*/
		f13 =  f13/*fextend*/
		f14 =  f14/*fextend*/
		f15 =  f15/*fextend*/
		f14 =  (f14 * f13)
		f13 =  (f15 * f13)
		f14 =  f14/*fround*/
		__asm(push(f14), push(i19), op(0x3d))
		f13 =  f13/*fround*/
		__asm(push(f13), push((i19+4)), op(0x3d))
		i20 =  ((__xasm<int>(push(i12), op(0x37))))
		i9 =  (i9 + 24)
		i19 =  (i19 + 8)
		i8 =  (i8 + 1)
		__asm(push(i20<=i8), iftrue, target("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_16_B"))
	__asm(lbl("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_19_F"))
		__asm(jump, target("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_18_B"))
	__asm(lbl("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_20_F"))
		f0 =  ((__xasm<Number>(push((i11+24)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i13+56)), op(0x38))))
		f10 =  ((__xasm<Number>(push((i11+20)), op(0x38))))
		f11 =  (f0 * f1)
		f1 =  (f10 * f1)
		f11 =  f11/*fround*/
		f1 =  f1/*fround*/
		f12 =  ((__xasm<Number>(push((i13+48)), op(0x38))))
		f13 =  ((__xasm<Number>(push((i11+32)), op(0x38))))
		f14 =  ((__xasm<Number>(push((i13+52)), op(0x38))))
		f15 =  ((__xasm<Number>(push((i11+28)), op(0x38))))
		f16 =  ((__xasm<Number>(push((i13+60)), op(0x38))))
		f17 =  ((__xasm<Number>(push((i11+12)), op(0x38))))
		f18 =  ((__xasm<Number>(push((i11+16)), op(0x38))))
		f1 =  f1/*fextend*/
		f11 =  f11/*fextend*/
		f1 =  (f17 + f1)
		f11 =  (f18 + f11)
		f17 =  (f13 * f14)
		f13 =  (f13 * f16)
		f14 =  (f15 * f14)
		f15 =  (f15 * f16)
		f0 =  (f0 * f12)
		f10 =  (f10 * f12)
		f1 =  f1/*fround*/
		f11 =  f11/*fround*/
		f12 =  f17/*fround*/
		f13 =  f13/*fround*/
		f14 =  f14/*fround*/
		f15 =  f15/*fround*/
		f0 =  f0/*fround*/
		f10 =  f10/*fround*/
		f15 =  f15/*fextend*/
		f1 =  f1/*fextend*/
		f13 =  f13/*fextend*/
		f11 =  f11/*fextend*/
		f12 =  f12/*fextend*/
		f0 =  f0/*fextend*/
		f14 =  f14/*fextend*/
		f10 =  f10/*fextend*/
		f1 =  (f1 + f15)
		f11 =  (f11 + f13)
		f0 =  (f0 + f12)
		f10 =  (f10 + f14)
		f1 =  f1/*fround*/
		f11 =  f11/*fround*/
		f0 =  f0/*fround*/
		f10 =  f10/*fround*/
		__asm(push(i8<1), iftrue, target("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_24_F"))
	__asm(lbl("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_21_F"))
		i8 =  (0)
		f12 =  f0/*fextend*/
		f2 =  f2/*fextend*/
		f13 =  f10/*fextend*/
		f12 =  (f12 * f2)
		f2 =  (f13 * f2)
		f12 =  f12/*fround*/
		f2 =  f2/*fround*/
		i13 =  (i10 + 20)
		i14 =  (i10 + 28)
		i15 =  (i10 + 16)
		i16 =  (i10 + 24)
		i17 =  (i10 + 32)
		i18 =  (i10 + 12)
		i19 = i0
	__asm(jump, target("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_22_F"), lbl("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_22_B"), label, lbl("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_22_F")); 
		f13 =  (0.5)
		f14 =  ((__xasm<Number>(push(i13), op(0x38))))
		f15 =  ((__xasm<Number>(push(i9), op(0x38))))
		f16 =  ((__xasm<Number>(push(i16), op(0x38))))
		f14 =  (f14 * f15)
		f15 =  (f16 * f15)
		f14 =  f14/*fround*/
		f15 =  f15/*fround*/
		f16 =  ((__xasm<Number>(push(i18), op(0x38))))
		f14 =  f14/*fextend*/
		f17 =  ((__xasm<Number>(push(i14), op(0x38))))
		f18 =  ((__xasm<Number>(push((i9+4)), op(0x38))))
		f19 =  ((__xasm<Number>(push(i17), op(0x38))))
		f20 =  ((__xasm<Number>(push(i15), op(0x38))))
		f15 =  f15/*fextend*/
		f14 =  (f16 + f14)
		f15 =  (f20 + f15)
		f16 =  (f17 * f18)
		f17 =  (f19 * f18)
		f14 =  f14/*fround*/
		f15 =  f15/*fround*/
		f16 =  f16/*fround*/
		f17 =  f17/*fround*/
		f16 =  f16/*fextend*/
		f14 =  f14/*fextend*/
		f17 =  f17/*fextend*/
		f15 =  f15/*fextend*/
		f14 =  (f14 + f16)
		f15 =  (f15 + f17)
		f14 =  f14/*fround*/
		f15 =  f15/*fround*/
		f16 =  f1/*fextend*/
		f14 =  f14/*fextend*/
		f17 =  f11/*fextend*/
		f15 =  f15/*fextend*/
		f16 =  (f14 - f16)
		f17 =  (f15 - f17)
		f16 =  f16/*fround*/
		f17 =  f17/*fround*/
		f18 =  f10/*fextend*/
		f16 =  f16/*fextend*/
		f19 =  f0/*fextend*/
		f17 =  f17/*fextend*/
		f16 =  (f16 * f18)
		f17 =  (f17 * f19)
		f16 =  f16/*fround*/
		f17 =  f17/*fround*/
		f17 =  f17/*fextend*/
		f16 =  f16/*fextend*/
		f16 =  (f16 + f17)
		f16 =  f16/*fround*/
		f16 =  f16/*fextend*/
		f17 =  f3/*fextend*/
		f16 =  (f17 - f16)
		f16 =  f16/*fround*/
		f16 =  f16/*fextend*/
		f17 =  (f18 * f16)
		f16 =  (f19 * f16)
		f17 =  f17/*fround*/
		f16 =  f16/*fround*/
		f17 =  f17/*fextend*/
		f18 =  f2/*fextend*/
		f16 =  f16/*fextend*/
		f17 =  (f14 + f17)
		f14 =  (f14 - f18)
		f18 =  f12/*fextend*/
		f16 =  (f15 + f16)
		f17 =  f17/*fround*/
		f14 =  f14/*fround*/
		f15 =  (f15 - f18)
		f16 =  f16/*fround*/
		f15 =  f15/*fround*/
		f17 =  f17/*fextend*/
		f14 =  f14/*fextend*/
		f14 =  (f14 + f17)
		f16 =  f16/*fextend*/
		f15 =  f15/*fextend*/
		f15 =  (f15 + f16)
		f14 =  f14/*fround*/
		f13 =  f13/*fround*/
		f15 =  f15/*fround*/
		f13 =  f13/*fextend*/
		f14 =  f14/*fextend*/
		f15 =  f15/*fextend*/
		f14 =  (f14 * f13)
		f13 =  (f15 * f13)
		f14 =  f14/*fround*/
		__asm(push(f14), push(i19), op(0x3d))
		f13 =  f13/*fround*/
		__asm(push(f13), push((i19+4)), op(0x3d))
		i20 =  ((__xasm<int>(push(i12), op(0x37))))
		i9 =  (i9 + 24)
		i19 =  (i19 + 8)
		i8 =  (i8 + 1)
		__asm(push(i20<=i8), iftrue, target("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_24_F"))
	__asm(lbl("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_23_F"))
		__asm(jump, target("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_22_B"))
	__asm(lbl("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_24_F"))
		f0 =  f0/*fextend*/
		f1 =  f10/*fextend*/
		f0 =  -f0
		f1 =  -f1
		f0 =  f0/*fround*/
		f2 =  f1/*fround*/
		f1 = f0
		f0 = f2
	__asm(lbl("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_25_F"))
		i8 =  (i7 + i6)
		__asm(push(f0), push((i8+104)), op(0x3d))
		__asm(push(f1), push((i8+108)), op(0x3d))
		i9 =  ((__xasm<int>(push((i8+172)), op(0x37))))
		i8 =  (i8 + 172)
		__asm(push(i9<1), iftrue, target("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_37_F"))
	__asm(lbl("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_26_F"))
		i12 =  (0)
		f2 =  f8/*fextend*/
		f3 =  f9/*fextend*/
		f2 =  -f2
		f3 =  -f3
		i13 =  (i7 + i6)
		f2 =  f2/*fround*/
		f3 =  f3/*fround*/
		i14 =  (i10 + 52)
		i15 =  (i10 + 56)
		i16 =  (i11 + 52)
		i17 =  (i11 + 56)
		i18 =  (i13 + 168)
		i19 =  (i11 + 136)
		i20 =  (i10 + 136)
		i21 =  (i11 + 128)
		i22 =  (i10 + 128)
		i23 = i0
	__asm(jump, target("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_27_F"), lbl("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_27_B"), label, lbl("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_27_F")); 
		f10 =  (1.19209e-07)
		f11 =  ((__xasm<Number>(push(i23), op(0x38))))
		f12 =  ((__xasm<Number>(push(i14), op(0x38))))
		f11 =  (f11 - f12)
		f12 =  ((__xasm<Number>(push((i23+4)), op(0x38))))
		f13 =  ((__xasm<Number>(push(i15), op(0x38))))
		f12 =  (f12 - f13)
		f11 =  f11/*fround*/
		f12 =  f12/*fround*/
		__asm(push(f11), push((i13+8)), op(0x3d))
		__asm(push(f12), push((i13+12)), op(0x3d))
		f13 =  ((__xasm<Number>(push((i23+4)), op(0x38))))
		f14 =  ((__xasm<Number>(push(i17), op(0x38))))
		f15 =  ((__xasm<Number>(push(i23), op(0x38))))
		f16 =  ((__xasm<Number>(push(i16), op(0x38))))
		f17 =  f0/*fextend*/
		f18 =  f12/*fextend*/
		f19 =  f1/*fextend*/
		f20 =  f11/*fextend*/
		f13 =  (f13 - f14)
		f14 =  (f15 - f16)
		f15 =  (f18 * f17)
		f16 =  (f20 * f19)
		f13 =  f13/*fround*/
		f14 =  f14/*fround*/
		f15 =  f15/*fround*/
		f16 =  f16/*fround*/
		f18 =  f13/*fextend*/
		f20 =  f14/*fextend*/
		f15 =  f15/*fextend*/
		f16 =  f16/*fextend*/
		f17 =  (f18 * f17)
		f18 =  (f20 * f19)
		f15 =  (f16 - f15)
		f16 =  f17/*fround*/
		f17 =  f18/*fround*/
		f15 =  f15/*fround*/
		f15 =  f15/*fextend*/
		f16 =  f16/*fextend*/
		f17 =  f17/*fextend*/
		__asm(push(f14), push((i13+16)), op(0x3d))
		f16 =  (f17 - f16)
		f15 =  (f15 * f15)
		f16 =  f16/*fround*/
		f15 =  f15/*fround*/
		__asm(push(f13), push((i13+20)), op(0x3d))
		f16 =  f16/*fextend*/
		f17 =  ((__xasm<Number>(push(i22), op(0x38))))
		f18 =  ((__xasm<Number>(push(i21), op(0x38))))
		f19 =  ((__xasm<Number>(push(i20), op(0x38))))
		f15 =  f15/*fextend*/
		f17 =  (f17 + f18)
		f15 =  (f19 * f15)
		f16 =  (f16 * f16)
		f17 =  f17/*fround*/
		f15 =  f15/*fround*/
		f16 =  f16/*fround*/
		f18 =  ((__xasm<Number>(push(i19), op(0x38))))
		f16 =  f16/*fextend*/
		f15 =  f15/*fextend*/
		f17 =  f17/*fextend*/
		f15 =  (f17 + f15)
		f16 =  (f18 * f16)
		f15 =  f15/*fround*/
		f16 =  f16/*fround*/
		f16 =  f16/*fextend*/
		f15 =  f15/*fextend*/
		f15 =  (f15 + f16)
		f15 =  f15/*fround*/
		f10 =  f10/*fround*/
		f10 =  f10/*fextend*/
		f16 =  f15/*fextend*/
		__asm(push(f16>f10), iftrue, target("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_31_F"))
	__asm(lbl("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_28_F"))
		i4 =  (___sF)
		mstate.esp -= 24
		i6 =  (__2E_str1670)
		i12 =  (__2E_str141)
		i13 =  (__ZZN15b2ContactSolver29InitializeVelocityConstraintsEvE8__func__)
		i23 =  (__2E_str60267)
		i0 =  (159)
	__asm(jump, target("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_29_F"), lbl("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_29_B"), label, lbl("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_29_F")); 
		i4 =  (i4 + 176)
		__asm(push(i4), push(mstate.esp), op(0x3c))
		__asm(push(i6), push((mstate.esp+4)), op(0x3c))
		__asm(push(i12), push((mstate.esp+8)), op(0x3c))
		__asm(push(i13), push((mstate.esp+12)), op(0x3c))
		__asm(push(i23), push((mstate.esp+16)), op(0x3c))
		__asm(push(i0), push((mstate.esp+20)), op(0x3c))
	__asm(lbl("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_30_F"))
		state = 1
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv_state1"))
		mstate.esp += 24
		state = 2
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv_state2"))
	__asm(lbl("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_31_F"))
		f10 =  (1)
		f16 =  f0/*fextend*/
		f16 =  -f16
		f16 =  f16/*fround*/
		f17 =  f11/*fextend*/
		f16 =  f16/*fextend*/
		f18 =  f12/*fextend*/
		f19 =  f1/*fextend*/
		f17 =  (f17 * f16)
		f18 =  (f18 * f19)
		f17 =  f17/*fround*/
		f18 =  f18/*fround*/
		f20 =  f14/*fextend*/
		f21 =  f13/*fextend*/
		f18 =  f18/*fextend*/
		f17 =  f17/*fextend*/
		f17 =  (f17 - f18)
		f16 =  (f20 * f16)
		f18 =  (f21 * f19)
		f10 =  f10/*fround*/
		f17 =  f17/*fround*/
		f16 =  f16/*fround*/
		f18 =  f18/*fround*/
		f15 =  f15/*fextend*/
		f10 =  f10/*fextend*/
		f10 =  (f10 / f15)
		f15 =  f17/*fextend*/
		f17 =  f18/*fextend*/
		f16 =  f16/*fextend*/
		f15 =  (f15 * f15)
		f16 =  (f16 - f17)
		f10 =  f10/*fround*/
		f15 =  f15/*fround*/
		f16 =  f16/*fround*/
		__asm(push(f10), push((i13+32)), op(0x3d))
		f10 =  f16/*fextend*/
		f16 =  ((__xasm<Number>(push(i22), op(0x38))))
		f17 =  ((__xasm<Number>(push(i21), op(0x38))))
		f18 =  ((__xasm<Number>(push(i20), op(0x38))))
		f15 =  f15/*fextend*/
		f16 =  (f16 + f17)
		f15 =  (f18 * f15)
		f10 =  (f10 * f10)
		f16 =  f16/*fround*/
		f15 =  f15/*fround*/
		f10 =  f10/*fround*/
		f17 =  ((__xasm<Number>(push(i19), op(0x38))))
		f10 =  f10/*fextend*/
		f15 =  f15/*fextend*/
		f16 =  f16/*fextend*/
		f15 =  (f16 + f15)
		f10 =  (f17 * f10)
		f15 =  f15/*fround*/
		f10 =  f10/*fround*/
		f10 =  f10/*fextend*/
		f15 =  f15/*fextend*/
		f10 =  (f15 + f10)
		f15 =  (1.19209e-07)
		f10 =  f10/*fround*/
		f15 =  f15/*fround*/
		f15 =  f15/*fextend*/
		f16 =  f10/*fextend*/
		__asm(push(f16>f15), iftrue, target("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_33_F"))
	__asm(lbl("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_32_F"))
		i4 =  (___sF)
		mstate.esp -= 24
		i6 =  (__2E_str1670)
		i12 =  (__2E_str142)
		i13 =  (__ZZN15b2ContactSolver29InitializeVelocityConstraintsEvE8__func__)
		i23 =  (__2E_str60267)
		i0 =  (171)
		__asm(jump, target("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_29_B"))
	__asm(lbl("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_33_F"))
		f15 =  (1)
		f16 =  f9/*fextend*/
		f14 =  f14/*fextend*/
		f17 =  f3/*fextend*/
		f13 =  f13/*fextend*/
		f14 =  (f14 * f16)
		f13 =  (f13 * f17)
		f14 =  f14/*fround*/
		f13 =  f13/*fround*/
		f14 =  f14/*fextend*/
		f16 =  f7/*fextend*/
		f13 =  f13/*fextend*/
		f17 =  f6/*fextend*/
		f14 =  (f16 + f14)
		f13 =  (f17 + f13)
		f14 =  f14/*fround*/
		f13 =  f13/*fround*/
		f16 =  f8/*fextend*/
		f11 =  f11/*fextend*/
		f17 =  f2/*fextend*/
		f12 =  f12/*fextend*/
		f18 =  f5/*fextend*/
		f14 =  f14/*fextend*/
		f19 =  f4/*fextend*/
		f13 =  f13/*fextend*/
		f11 =  (f11 * f16)
		f12 =  (f12 * f17)
		f14 =  (f14 - f18)
		f13 =  (f13 - f19)
		f11 =  f11/*fround*/
		f12 =  f12/*fround*/
		f14 =  f14/*fround*/
		f13 =  f13/*fround*/
		f11 =  f11/*fextend*/
		f14 =  f14/*fextend*/
		f12 =  f12/*fextend*/
		f13 =  f13/*fextend*/
		f11 =  (f14 - f11)
		f12 =  (f13 - f12)
		f13 =  f15/*fround*/
		f11 =  f11/*fround*/
		f12 =  f12/*fround*/
		f10 =  f10/*fextend*/
		f13 =  f13/*fextend*/
		f10 =  (f13 / f10)
		f11 =  f11/*fextend*/
		f13 =  f1/*fextend*/
		f12 =  f12/*fextend*/
		f14 =  f0/*fextend*/
		f11 =  (f13 * f11)
		f12 =  (f14 * f12)
		f10 =  f10/*fround*/
		f11 =  f11/*fround*/
		f12 =  f12/*fround*/
		__asm(push(f10), push((i13+36)), op(0x3d))
		i24 =  (0)
		__asm(push(i24), push((i13+40)), op(0x3c))
		f10 =  f11/*fextend*/
		f11 =  f12/*fextend*/
		f12 =  ((__xasm<Number>(push(_b2_velocityThreshold), op(0x38))))
		f10 =  (f11 + f10)
		f10 =  f10/*fround*/
		f11 =  -f12
		i24 =  (i13 + 40)
		f11 =  f11/*fround*/
		f11 =  f11/*fextend*/
		f12 =  f10/*fextend*/
		__asm(push(f12>=f11), iftrue, target("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_35_F"))
	__asm(lbl("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_34_F"))
		f11 =  ((__xasm<Number>(push(i18), op(0x38))))
		f11 =  -f11
		f11 =  f11/*fround*/
		f11 =  f11/*fextend*/
		f10 =  f10/*fextend*/
		f10 =  (f10 * f11)
		f10 =  f10/*fround*/
		__asm(push(f10), push(i24), op(0x3d))
	__asm(lbl("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_35_F"))
		i13 =  (i13 + 44)
		i23 =  (i23 + 8)
		i12 =  (i12 + 1)
		__asm(push(i9<=i12), iftrue, target("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_37_F"))
	__asm(lbl("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_36_F"))
		__asm(jump, target("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_27_B"))
	__asm(lbl("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_37_F"))
		__asm(push(i9!=2), iftrue, target("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_44_F"))
	__asm(lbl("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_38_F"))
		f2 =  (100)
		i9 =  (i7 + i6)
		f3 =  ((__xasm<Number>(push((i9+8)), op(0x38))))
		f4 =  f1/*fextend*/
		f5 =  ((__xasm<Number>(push((i9+52)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i9+12)), op(0x38))))
		f7 =  f0/*fextend*/
		f8 =  ((__xasm<Number>(push((i9+56)), op(0x38))))
		f3 =  (f3 * f4)
		f6 =  (f6 * f7)
		f5 =  (f5 * f4)
		f8 =  (f8 * f7)
		f3 =  f3/*fround*/
		f6 =  f6/*fround*/
		f5 =  f5/*fround*/
		f8 =  f8/*fround*/
		f9 =  ((__xasm<Number>(push((i9+16)), op(0x38))))
		f10 =  ((__xasm<Number>(push((i9+20)), op(0x38))))
		f11 =  ((__xasm<Number>(push((i9+60)), op(0x38))))
		f12 =  ((__xasm<Number>(push((i9+64)), op(0x38))))
		f6 =  f6/*fextend*/
		f3 =  f3/*fextend*/
		f8 =  f8/*fextend*/
		f5 =  f5/*fextend*/
		f3 =  (f3 - f6)
		f6 =  (f9 * f4)
		f9 =  (f10 * f7)
		f5 =  (f5 - f8)
		f4 =  (f11 * f4)
		f7 =  (f12 * f7)
		f3 =  f3/*fround*/
		f6 =  f6/*fround*/
		f8 =  f9/*fround*/
		f5 =  f5/*fround*/
		f4 =  f4/*fround*/
		f7 =  f7/*fround*/
		f9 =  ((__xasm<Number>(push((i10+136)), op(0x38))))
		f3 =  f3/*fextend*/
		f5 =  f5/*fextend*/
		f8 =  f8/*fextend*/
		f6 =  f6/*fextend*/
		f7 =  f7/*fextend*/
		f4 =  f4/*fextend*/
		f10 =  (f9 * f3)
		f9 =  (f9 * f5)
		f6 =  (f6 - f8)
		f4 =  (f4 - f7)
		f7 =  f10/*fround*/
		f8 =  f9/*fround*/
		f6 =  f6/*fround*/
		f4 =  f4/*fround*/
		f7 =  f7/*fextend*/
		f8 =  f8/*fextend*/
		f9 =  ((__xasm<Number>(push((i10+128)), op(0x38))))
		f10 =  ((__xasm<Number>(push((i11+128)), op(0x38))))
		f11 =  ((__xasm<Number>(push((i11+136)), op(0x38))))
		f6 =  f6/*fextend*/
		f4 =  f4/*fextend*/
		f9 =  (f9 + f10)
		f3 =  (f7 * f3)
		f7 =  (f7 * f5)
		f5 =  (f8 * f5)
		f8 =  (f11 * f6)
		f10 =  (f11 * f4)
		f9 =  f9/*fround*/
		f3 =  f3/*fround*/
		f7 =  f7/*fround*/
		f5 =  f5/*fround*/
		f8 =  f8/*fround*/
		f10 =  f10/*fround*/
		f8 =  f8/*fextend*/
		f10 =  f10/*fextend*/
		f3 =  f3/*fextend*/
		f9 =  f9/*fextend*/
		f5 =  f5/*fextend*/
		f7 =  f7/*fextend*/
		f3 =  (f9 + f3)
		f5 =  (f9 + f5)
		f7 =  (f9 + f7)
		f6 =  (f8 * f6)
		f8 =  (f8 * f4)
		f4 =  (f10 * f4)
		f3 =  f3/*fround*/
		f5 =  f5/*fround*/
		f7 =  f7/*fround*/
		f6 =  f6/*fround*/
		f8 =  f8/*fround*/
		f4 =  f4/*fround*/
		f6 =  f6/*fextend*/
		f3 =  f3/*fextend*/
		f4 =  f4/*fextend*/
		f5 =  f5/*fextend*/
		f8 =  f8/*fextend*/
		f7 =  f7/*fextend*/
		f3 =  (f3 + f6)
		f4 =  (f5 + f4)
		f5 =  (f7 + f8)
		f3 =  f3/*fround*/
		f4 =  f4/*fround*/
		f5 =  f5/*fround*/
		f6 =  f3/*fextend*/
		f7 =  f4/*fextend*/
		f8 =  f5/*fextend*/
		f7 =  (f6 * f7)
		f8 =  (f8 * f8)
		f7 =  f7/*fround*/
		f8 =  f8/*fround*/
		f8 =  f8/*fextend*/
		f7 =  f7/*fextend*/
		f7 =  (f7 - f8)
		f7 =  f7/*fround*/
		f2 =  f2/*fround*/
		f2 =  f2/*fextend*/
		f8 =  f7/*fextend*/
		f6 =  (f6 * f6)
		f2 =  (f8 * f2)
		f6 =  f6/*fround*/
		f2 =  f2/*fround*/
		f2 =  f2/*fextend*/
		f6 =  f6/*fextend*/
		__asm(push(f6>=f2), iftrue, target("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_43_F"))
	__asm(lbl("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_39_F"))
		f2 =  (0)
		i8 =  (i7 + i6)
		__asm(push(f3), push((i8+128)), op(0x3d))
		__asm(push(f5), push((i8+132)), op(0x3d))
		f2 =  f2/*fround*/
		__asm(push(f5), push((i8+136)), op(0x3d))
		__asm(push(f4), push((i8+140)), op(0x3d))
		f2 =  f2/*fextend*/
		f6 =  f7/*fextend*/
		__asm(push(f6!=f2), iftrue, target("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_41_F"))
	__asm(lbl("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_40_F"))
		__asm(jump, target("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_42_F"))
	__asm(lbl("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_41_F"))
		f2 =  (1)
		f2 =  f2/*fround*/
		f6 =  f7/*fextend*/
		f2 =  f2/*fextend*/
		f2 =  (f2 / f6)
		f7 =  f2/*fround*/
	__asm(lbl("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_42_F"))
		f2 = f7
		f2 =  f2/*fextend*/
		f6 =  -f2
		f4 =  f4/*fextend*/
		f6 =  f6/*fround*/
		f4 =  (f2 * f4)
		f6 =  f6/*fextend*/
		f5 =  f5/*fextend*/
		f5 =  (f5 * f6)
		f4 =  f4/*fround*/
		i8 =  (i7 + i6)
		f3 =  f3/*fextend*/
		__asm(push(f4), push((i8+112)), op(0x3d))
		f4 =  f5/*fround*/
		__asm(push(f4), push((i8+116)), op(0x3d))
		f2 =  (f2 * f3)
		__asm(push(f4), push((i8+120)), op(0x3d))
		f2 =  f2/*fround*/
		__asm(push(f2), push((i8+124)), op(0x3d))
		__asm(jump, target("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_44_F"))
	__asm(lbl("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_43_F"))
		i7 =  (1)
		__asm(push(i7), push(i8), op(0x3c))
	__asm(lbl("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_44_F"))
		i7 =  ((__xasm<int>(push(i3), op(0x37))))
		i6 =  (i6 + 188)
		i4 =  (i4 + 1)
		__asm(push(i7<=i4), iftrue, target("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_46_F"))
	__asm(lbl("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_45_F"))
		__asm(jump, target("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_2_B"))
	__asm(lbl("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv__XprivateX__BB435_46_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN15b2ContactSolver29InitializeVelocityConstraintsEv_errState"))
		throw("Invalid state in __ZN15b2ContactSolver29InitializeVelocityConstraintsEv")
	}
}



// Async
public const __Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput:int = regFunc(FSM__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput.start)

public final class FSM__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput extends Machine {

	public static function start():void {
			var result:FSM__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput = new FSM__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
	public var i8:int, i9:int, i10:int, i11:int, i12:int, i13:int, i14:int, i15:int
	public var i16:int, i17:int, i18:int, i19:int, i20:int, i21:int, i22:int, i23:int
	public var i24:int, i25:int, i26:int, i27:int, i28:int, i29:int, i30:int, i31:int
	public static const intRegCount:int = 32
	public var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number
	public var f8:Number, f9:Number, f10:Number, f11:Number, f12:Number, f13:Number, f14:Number, f15:Number
	public var f16:Number, f17:Number, f18:Number, f19:Number, f20:Number, f21:Number, f22:Number, f23:Number
	public var f24:Number, f25:Number, f26:Number, f27:Number, f28:Number, f29:Number, f30:Number, f31:Number
	public static const NumberRegCount:int = 32
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput_entry"))
		__asm(push(state), switchjump(
			"__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput_errState",
			"__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput_state0",
			"__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput_state1",
			"__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput_state2"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput_state0"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 208
		i0 =  ((mstate.ebp+-144))
		i1 =  ((__xasm<int>(push(_b2_gjkCalls), op(0x37))))
		i1 =  (i1 + 1)
		i2 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		__asm(push(i2), push((mstate.ebp+-198)), op(0x3c))
		__asm(push(i1), push(_b2_gjkCalls), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i1+56)), op(0x38))))
		__asm(push(f0), push((mstate.ebp+-160)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i1+60)), op(0x38))))
		__asm(push(f0), push((mstate.ebp+-168)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i1+64)), op(0x38))))
		__asm(push(f0), push((mstate.ebp+-192)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i1+68)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i1+72)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i1+76)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i1+80)), op(0x38))))
		__asm(push(f3), push((mstate.ebp+-176)), op(0x3d))
		f3 =  ((__xasm<Number>(push((i1+84)), op(0x38))))
		__asm(push(f3), push((mstate.ebp+-184)), op(0x3d))
		f3 =  ((__xasm<Number>(push((i1+88)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i1+92)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i1+96)), op(0x38))))
		f6 =  ((__xasm<Number>(push((i1+100)), op(0x38))))
		i2 =  ((__xasm<int>(push((i2+4)), op(0x36))))
		i3 =  ((__xasm<int>(push((mstate.ebp+-198)), op(0x37))))
		i3 =  (i3 + 4)
		__asm(push(i3), push((mstate.ebp+-153)), op(0x3c))
		i3 =  ((mstate.ebp+-128))
		i4 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i5 =  ((__xasm<int>(push((mstate.ebp+-198)), op(0x37))))
		__asm(push(uint(i2)<uint(4)), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_2_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_1_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i3 =  (__2E_str125317)
		i4 =  (__ZZN9b2Simplex9ReadCacheEPK14b2SimplexCachePK15b2DistanceProxyRK11b2TransformS5_S8_E8__func__)
		i5 =  (__2E_str45252)
		i2 =  (102)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i3), push((mstate.esp+8)), op(0x3c))
		__asm(push(i4), push((mstate.esp+12)), op(0x3c))
		__asm(push(i5), push((mstate.esp+16)), op(0x3c))
		__asm(push(i2), push((mstate.esp+20)), op(0x3c))
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_84_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_2_F"))
		i2 =  ((mstate.ebp+-112))
		__asm(push(i2), push((mstate.ebp+-207)), op(0x3c))
		i2 =  ((__xasm<int>(push((mstate.ebp+-153)), op(0x37))))
		i2 =  ((__xasm<int>(push(i2), op(0x36))))
		__asm(push(i2), push((mstate.ebp+-4)), op(0x3c))
		i6 =  ((__xasm<int>(push((mstate.ebp+-207)), op(0x37))))
		i6 =  (i6 + 108)
		i7 =  ((__xasm<int>(push((mstate.ebp+-207)), op(0x37))))
		__asm(push(i2>0), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_4_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_3_F"))
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_13_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_4_F"))
		i2 =  (0)
		i8 =  (i1 + 48)
		i9 =  (i1 + 44)
		i10 =  (i1 + 16)
		i11 =  (i1 + 20)
		i12 =  ((__xasm<int>(push((mstate.ebp+-207)), op(0x37))))
	__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_5_F"), lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_5_B"), label, lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_5_F")); 
		i13 =  (i5 + i2)
		i14 =  ((__xasm<int>(push((i13+6)), op(0x35))))
		__asm(push(i14), push((i12+28)), op(0x3c))
		i13 =  ((__xasm<int>(push((i13+9)), op(0x35))))
		__asm(push(i13), push((i12+32)), op(0x3c))
		i15 = i12
		__asm(push(i14<0), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_7_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_6_F"))
		i16 =  ((__xasm<int>(push(i11), op(0x37))))
		__asm(push(i16>i14), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_8_F"))
	__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_7_F"), lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_7_B"), label, lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_7_F")); 
		i2 =  (___sF)
		mstate.esp -= 24
		i12 =  (__2E_str1670)
		i0 =  (__2E_str1208)
		i1 =  (__ZZNK11b2LoopShape9GetVertexEiE8__func__)
		i3 =  (__2E_str4211)
		i4 =  (103)
		i2 =  (i2 + 176)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i12), push((mstate.esp+4)), op(0x3c))
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_83_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_8_F"))
		i16 =  ((__xasm<int>(push(i10), op(0x37))))
		i14 =  (i14 << 3)
		i14 =  (i16 + i14)
		f7 =  ((__xasm<Number>(push(i14), op(0x38))))
		f8 =  ((__xasm<Number>(push((i14+4)), op(0x38))))
		__asm(push(i13<0), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_10_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_9_F"))
		i14 =  ((__xasm<int>(push(i8), op(0x37))))
		__asm(push(i14>i13), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_11_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_10_F"))
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_7_B"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_11_F"))
		i14 =  (0)
		i16 =  ((__xasm<int>(push(i9), op(0x37))))
		i13 =  (i13 << 3)
		f9 =  ((__xasm<Number>(push((mstate.ebp+-192)), op(0x38))))
		f9 =  f9/*fextend*/
		f7 =  f7/*fextend*/
		i13 =  (i16 + i13)
		f9 =  (f9 * f7)
		f10 =  f0/*fextend*/
		f11 =  ((__xasm<Number>(push(i13), op(0x38))))
		f12 =  f3/*fextend*/
		f12 =  (f12 * f11)
		f13 =  f4/*fextend*/
		f9 =  f9/*fround*/
		f7 =  (f10 * f7)
		f10 =  f12/*fround*/
		f11 =  (f13 * f11)
		f7 =  f7/*fround*/
		f9 =  f9/*fextend*/
		f12 =  ((__xasm<Number>(push((mstate.ebp+-160)), op(0x38))))
		f12 =  f12/*fextend*/
		f13 =  f1/*fextend*/
		f8 =  f8/*fextend*/
		f14 =  ((__xasm<Number>(push((i13+4)), op(0x38))))
		f11 =  f11/*fround*/
		f15 =  f5/*fextend*/
		f9 =  (f12 + f9)
		f12 =  (f13 * f8)
		f13 =  f2/*fextend*/
		f10 =  f10/*fextend*/
		f16 =  ((__xasm<Number>(push((mstate.ebp+-176)), op(0x38))))
		f16 =  f16/*fextend*/
		f7 =  f7/*fextend*/
		f17 =  ((__xasm<Number>(push((mstate.ebp+-168)), op(0x38))))
		f17 =  f17/*fextend*/
		f10 =  (f16 + f10)
		f15 =  (f15 * f14)
		f16 =  f6/*fextend*/
		f9 =  f9/*fround*/
		f7 =  (f17 + f7)
		f12 =  f12/*fround*/
		f8 =  (f13 * f8)
		f11 =  f11/*fextend*/
		f13 =  ((__xasm<Number>(push((mstate.ebp+-184)), op(0x38))))
		f13 =  f13/*fextend*/
		f10 =  f10/*fround*/
		f11 =  (f13 + f11)
		f13 =  f15/*fround*/
		f14 =  (f16 * f14)
		f7 =  f7/*fround*/
		f8 =  f8/*fround*/
		f12 =  f12/*fextend*/
		f9 =  f9/*fextend*/
		f11 =  f11/*fround*/
		f14 =  f14/*fround*/
		f9 =  (f9 + f12)
		f12 =  f13/*fextend*/
		f10 =  f10/*fextend*/
		f8 =  f8/*fextend*/
		f7 =  f7/*fextend*/
		f10 =  (f10 + f12)
		f9 =  f9/*fround*/
		f7 =  (f7 + f8)
		f8 =  f14/*fextend*/
		f11 =  f11/*fextend*/
		f10 =  f10/*fround*/
		f8 =  (f11 + f8)
		f7 =  f7/*fround*/
		__asm(push(f9), push(i15), op(0x3d))
		__asm(push(f7), push((i12+4)), op(0x3d))
		f8 =  f8/*fround*/
		f9 =  f9/*fextend*/
		f11 =  f10/*fextend*/
		__asm(push(f10), push((i12+8)), op(0x3d))
		f9 =  (f11 - f9)
		f7 =  f7/*fextend*/
		f10 =  f8/*fextend*/
		f7 =  (f10 - f7)
		__asm(push(f8), push((i12+12)), op(0x3d))
		f8 =  f9/*fround*/
		__asm(push(f8), push((i12+16)), op(0x3d))
		f7 =  f7/*fround*/
		__asm(push(f7), push((i12+20)), op(0x3d))
		__asm(push(i14), push((i12+24)), op(0x3c))
		i13 =  ((__xasm<int>(push(i6), op(0x37))))
		i12 =  (i12 + 36)
		i2 =  (i2 + 1)
		__asm(push(i13>i2), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_155_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_12_F"))
		i2 = i13
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_13_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_13_F"))
		__asm(push(i2<2), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_31_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_14_F"))
		i8 =  ((__xasm<int>(push((mstate.ebp+-198)), op(0x37))))
		f7 =  ((__xasm<Number>(push(i8), op(0x38))))
		__asm(push(i2>1), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_18_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_15_F"))
		__asm(push(i2==0), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_22_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_16_F"))
		__asm(push(i2==1), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_26_F"))
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_17_F"))
	__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_17_F"), lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_17_B"), label, lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_17_F")); 
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i3 =  (__2E_str46253)
		i4 =  (__ZZNK9b2Simplex9GetMetricEvE8__func__)
		i5 =  (__2E_str45252)
		i6 =  (259)
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_23_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_18_F"))
		__asm(push(i2==2), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_24_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_19_F"))
		__asm(push(i2==3), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_20_F"))
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_17_B"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_20_F"))
		f8 =  (0.5)
		f9 =  ((__xasm<Number>(push((mstate.ebp+-20)), op(0x38))))
		f10 =  ((__xasm<Number>(push((mstate.ebp+-92)), op(0x38))))
		f11 =  ((__xasm<Number>(push((mstate.ebp+-56)), op(0x38))))
		f12 =  ((__xasm<Number>(push((mstate.ebp+-24)), op(0x38))))
		f13 =  ((__xasm<Number>(push((mstate.ebp+-96)), op(0x38))))
		f14 =  ((__xasm<Number>(push((mstate.ebp+-60)), op(0x38))))
		f9 =  (f9 - f10)
		f10 =  (f11 - f10)
		f11 =  (f12 - f13)
		f12 =  (f14 - f13)
		f9 =  f9/*fround*/
		f10 =  f10/*fround*/
		f11 =  f11/*fround*/
		f12 =  f12/*fround*/
		f9 =  f9/*fextend*/
		f12 =  f12/*fextend*/
		f11 =  f11/*fextend*/
		f10 =  f10/*fextend*/
		f9 =  (f12 * f9)
		f10 =  (f10 * f11)
		f9 =  f9/*fround*/
		f10 =  f10/*fround*/
		f8 =  f8/*fround*/
		f10 =  f10/*fextend*/
		f9 =  f9/*fextend*/
		f8 =  f8/*fextend*/
		f11 =  f7/*fextend*/
		f9 =  (f9 - f10)
		f8 =  (f11 * f8)
		f9 =  f9/*fround*/
		f8 =  f8/*fround*/
		f10 =  f9/*fextend*/
		f8 =  f8/*fextend*/
		__asm(push(f8>f10), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_30_F"))
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_21_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_21_F"))
		f8 = f9
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_28_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_22_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i3 =  (__2E_str46253)
		i4 =  (__ZZNK9b2Simplex9GetMetricEvE8__func__)
		i5 =  (__2E_str45252)
		i6 =  (246)
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_23_F"))
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_139_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_24_F"))
		f8 =  (0.5)
		f9 =  ((__xasm<Number>(push((mstate.ebp+-92)), op(0x38))))
		f10 =  ((__xasm<Number>(push((mstate.ebp+-56)), op(0x38))))
		f11 =  ((__xasm<Number>(push((mstate.ebp+-96)), op(0x38))))
		f12 =  ((__xasm<Number>(push((mstate.ebp+-60)), op(0x38))))
		f9 =  (f9 - f10)
		f10 =  (f11 - f12)
		f9 =  f9/*fround*/
		f10 =  f10/*fround*/
		f9 =  f9/*fextend*/
		f10 =  f10/*fextend*/
		f9 =  (f9 * f9)
		f10 =  (f10 * f10)
		f9 =  f9/*fround*/
		f10 =  f10/*fround*/
		f9 =  f9/*fextend*/
		f10 =  f10/*fextend*/
		f9 =  (f10 + f9)
		f9 =  f9/*fround*/
		f8 =  f8/*fround*/
		f9 =  f9/*fextend*/
		f8 =  f8/*fextend*/
		f10 =  f7/*fextend*/
		f9 =  Math.sqrt(f9)
		f8 =  (f10 * f8)
		f9 =  f9/*fround*/
		f8 =  f8/*fround*/
		f10 =  f9/*fextend*/
		f8 =  f8/*fextend*/
		__asm(push(f8>f10), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_30_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_25_F"))
		f8 = f9
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_28_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_26_F"))
		f8 =  (0.5)
		f8 =  f8/*fround*/
		f8 =  f8/*fextend*/
		f9 =  f7/*fextend*/
		f8 =  (f9 * f8)
		f9 =  (0)
		f8 =  f8/*fround*/
		f9 =  f9/*fround*/
		f9 =  f9/*fextend*/
		f8 =  f8/*fextend*/
		__asm(push(f8>f9), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_30_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_27_F"))
		f8 =  (0)
		f8 =  f8/*fround*/
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_28_F"))
		f7 =  f7/*fextend*/
		f7 =  (f7 + f7)
		f7 =  f7/*fround*/
		f9 =  f8/*fextend*/
		f7 =  f7/*fextend*/
		__asm(push(f7<f9), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_30_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_29_F"))
		f7 =  (1.19209e-07)
		f7 =  f7/*fround*/
		f7 =  f7/*fextend*/
		f8 =  f8/*fextend*/
		__asm(push(f8>=f7), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_31_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_30_F"))
		i2 =  (0)
		__asm(push(i2), push(i6), op(0x3c))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_31_F"))
		i2 =  ((__xasm<int>(push(i6), op(0x37))))
		__asm(push(i2==0), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_34_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_32_F"))
		i8 =  (i2 + -1)
		__asm(push(uint(i8)>uint(2)), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_41_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_33_F"))
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_40_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_34_F"))
		i2 =  (0)
		__asm(push(i2), push((mstate.ebp+-84)), op(0x3c))
		__asm(push(i2), push((mstate.ebp+-80)), op(0x3c))
		i2 =  ((__xasm<int>(push((i1+20)), op(0x37))))
		__asm(push(i2>0), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_37_F"))
	__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_35_F"), lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_35_B"), label, lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_35_F")); 
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str1208)
		i3 =  (__ZZNK11b2LoopShape9GetVertexEiE8__func__)
		i4 =  (__2E_str4211)
		i5 =  (103)
	__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_36_F"), lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_36_B"), label, lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_36_F")); 
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_84_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_37_F"))
		i2 =  ((__xasm<int>(push((i1+16)), op(0x37))))
		f7 =  ((__xasm<Number>(push(i2), op(0x38))))
		f8 =  ((__xasm<Number>(push((i2+4)), op(0x38))))
		i2 =  ((__xasm<int>(push((i1+48)), op(0x37))))
		__asm(push(i2>0), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_39_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_38_F"))
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_35_B"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_39_F"))
		i2 =  (1)
		i8 =  ((__xasm<int>(push((i1+44)), op(0x37))))
		f9 =  ((__xasm<Number>(push((mstate.ebp+-192)), op(0x38))))
		f9 =  f9/*fextend*/
		f7 =  f7/*fextend*/
		f9 =  (f9 * f7)
		f10 =  f0/*fextend*/
		f11 =  ((__xasm<Number>(push(i8), op(0x38))))
		f12 =  f3/*fextend*/
		f12 =  (f12 * f11)
		f13 =  f4/*fextend*/
		f9 =  f9/*fround*/
		f7 =  (f10 * f7)
		f10 =  f12/*fround*/
		f11 =  (f13 * f11)
		f7 =  f7/*fround*/
		f9 =  f9/*fextend*/
		f12 =  ((__xasm<Number>(push((mstate.ebp+-160)), op(0x38))))
		f12 =  f12/*fextend*/
		f13 =  f1/*fextend*/
		f8 =  f8/*fextend*/
		f14 =  ((__xasm<Number>(push((i8+4)), op(0x38))))
		f11 =  f11/*fround*/
		f15 =  f5/*fextend*/
		f9 =  (f12 + f9)
		f12 =  (f13 * f8)
		f13 =  f2/*fextend*/
		f10 =  f10/*fextend*/
		f16 =  ((__xasm<Number>(push((mstate.ebp+-176)), op(0x38))))
		f16 =  f16/*fextend*/
		f7 =  f7/*fextend*/
		f17 =  ((__xasm<Number>(push((mstate.ebp+-168)), op(0x38))))
		f17 =  f17/*fextend*/
		f10 =  (f16 + f10)
		f15 =  (f15 * f14)
		f16 =  f6/*fextend*/
		f9 =  f9/*fround*/
		f7 =  (f17 + f7)
		f12 =  f12/*fround*/
		f8 =  (f13 * f8)
		f11 =  f11/*fextend*/
		f13 =  ((__xasm<Number>(push((mstate.ebp+-184)), op(0x38))))
		f13 =  f13/*fextend*/
		f10 =  f10/*fround*/
		f11 =  (f13 + f11)
		f13 =  f15/*fround*/
		f14 =  (f16 * f14)
		f7 =  f7/*fround*/
		f8 =  f8/*fround*/
		f12 =  f12/*fextend*/
		f9 =  f9/*fextend*/
		f11 =  f11/*fround*/
		f14 =  f14/*fround*/
		f9 =  (f9 + f12)
		f12 =  f13/*fextend*/
		f10 =  f10/*fextend*/
		f8 =  f8/*fextend*/
		f7 =  f7/*fextend*/
		f10 =  (f10 + f12)
		f9 =  f9/*fround*/
		f7 =  (f7 + f8)
		f8 =  f14/*fextend*/
		f11 =  f11/*fextend*/
		f10 =  f10/*fround*/
		f8 =  (f11 + f8)
		f7 =  f7/*fround*/
		__asm(push(f9), push((mstate.ebp+-112)), op(0x3d))
		__asm(push(f7), push((mstate.ebp+-108)), op(0x3d))
		f8 =  f8/*fround*/
		f9 =  f9/*fextend*/
		f11 =  f10/*fextend*/
		__asm(push(f10), push((mstate.ebp+-104)), op(0x3d))
		f9 =  (f11 - f9)
		f7 =  f7/*fextend*/
		f10 =  f8/*fextend*/
		f7 =  (f10 - f7)
		__asm(push(f8), push((mstate.ebp+-100)), op(0x3d))
		f8 =  f9/*fround*/
		__asm(push(f8), push((mstate.ebp+-96)), op(0x3d))
		f7 =  f7/*fround*/
		__asm(push(f7), push((mstate.ebp+-92)), op(0x3d))
		__asm(push(i2), push(i6), op(0x3c))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_40_F"))
		i8 =  ((mstate.ebp+-112))
		i9 =  (i8 + 20)
		i10 =  (i8 + 52)
		i11 =  (i8 + 56)
		i12 =  (i8 + 60)
		i13 =  (i8 + 88)
		i14 =  (i8 + 92)
		i15 =  (i8 + 96)
		i16 =  (i1 + 44)
		i17 =  (i1 + 48)
		i18 =  (0)
		i19 =  (i1 + 20)
		i20 =  (i1 + 16)
		i21 =  (i8 + 72)
		i22 =  (i8 + 24)
		i23 =  (i8 + 36)
		i24 =  (i8 + 16)
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_116_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_41_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str46253)
		i3 =  (__ZZNK9b2Simplex15GetClosestPointEvE8__func__)
		i4 =  (__2E_str45252)
		i5 =  (207)
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_36_B"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_42_B"), label)
		__asm(push(i2<1), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_46_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_43_F"))
		i25 =  (0)
		i26 =  ((__xasm<int>(push((mstate.ebp+-207)), op(0x37))))
		i27 = i25
	__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_44_F"), lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_44_B"), label, lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_44_F")); 
		i28 =  ((__xasm<int>(push((i26+28)), op(0x37))))
		i29 =  (i3 + i27)
		__asm(push(i28), push(i29), op(0x3c))
		i28 =  ((__xasm<int>(push((i26+32)), op(0x37))))
		i29 =  (i0 + i27)
		__asm(push(i28), push(i29), op(0x3c))
		i26 =  (i26 + 36)
		i27 =  (i27 + 4)
		i25 =  (i25 + 1)
		__asm(push(i25==i2), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_46_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_45_F"))
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_44_B"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_46_F"))
		__asm(push(i2==3), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_57_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_47_F"))
		__asm(push(i2==2), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_50_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_48_F"))
		__asm(push(i2!=1), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_156_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_49_F"))
		i25 = i2
		i26 = i2
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_78_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_50_F"))
		f7 =  (0)
		f8 =  ((__xasm<Number>(push(i10), op(0x38))))
		f9 =  ((__xasm<Number>(push(i11), op(0x38))))
		f10 =  ((__xasm<Number>(push(i24), op(0x38))))
		f11 =  ((__xasm<Number>(push(i9), op(0x38))))
		f12 =  f8/*fextend*/
		f13 =  f9/*fextend*/
		f12 =  (f12 - f10)
		f13 =  (f13 - f11)
		f12 =  f12/*fround*/
		f13 =  f13/*fround*/
		f14 =  f12/*fextend*/
		f15 =  f13/*fextend*/
		f10 =  (f10 * f14)
		f11 =  (f11 * f15)
		f10 =  f10/*fround*/
		f11 =  f11/*fround*/
		f11 =  f11/*fextend*/
		f10 =  f10/*fextend*/
		f10 =  (f10 + f11)
		f10 =  f10/*fround*/
		f11 =  f10/*fextend*/
		f11 =  -f11
		f11 =  f11/*fround*/
		f7 =  f7/*fround*/
		f7 =  f7/*fextend*/
		f14 =  f11/*fextend*/
		__asm(push(f14>f7), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_52_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_51_F"))
		i25 =  (1065353216)
		__asm(push(i25), push(i22), op(0x3c))
		i25 =  (1)
		__asm(push(i25), push(i6), op(0x3c))
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_55_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_52_F"))
		f7 =  (0)
		f12 =  f12/*fextend*/
		f8 =  f8/*fextend*/
		f13 =  f13/*fextend*/
		f9 =  f9/*fextend*/
		f8 =  (f8 * f12)
		f9 =  (f9 * f13)
		f8 =  f8/*fround*/
		f9 =  f9/*fround*/
		f9 =  f9/*fextend*/
		f8 =  f8/*fextend*/
		f8 =  (f8 + f9)
		f8 =  f8/*fround*/
		f7 =  f7/*fround*/
		f7 =  f7/*fextend*/
		f9 =  f8/*fextend*/
		__asm(push(f9>f7), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_54_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_53_F"))
		i25 =  (1065353216)
		__asm(push(i25), push(i12), op(0x3c))
		i25 =  (1)
		__asm(push(i25), push(i6), op(0x3c))
		i25 = i8
		i26 = i23
		i27 =  (36)
		memcpy(i25, i26, i27)
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_55_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_54_F"))
		f7 =  (1)
		f9 =  f10/*fextend*/
		f8 =  f8/*fextend*/
		f9 =  (f8 - f9)
		f9 =  f9/*fround*/
		f7 =  f7/*fround*/
		f9 =  f9/*fextend*/
		f7 =  f7/*fextend*/
		f7 =  (f7 / f9)
		f7 =  f7/*fround*/
		f7 =  f7/*fextend*/
		f8 =  (f8 * f7)
		f9 =  f11/*fextend*/
		f7 =  (f7 * f9)
		f8 =  f8/*fround*/
		__asm(push(f8), push(i22), op(0x3d))
		f7 =  f7/*fround*/
		__asm(push(f7), push(i12), op(0x3d))
		i25 =  (2)
		__asm(push(i25), push(i6), op(0x3c))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_55_F"))
		i26 =  ((__xasm<int>(push(i6), op(0x37))))
		__asm(push(i26==3), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_117_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_56_F"))
		i25 = i26
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_78_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_57_F"))
		f7 =  (0)
		f8 =  ((__xasm<Number>(push(i24), op(0x38))))
		f9 =  ((__xasm<Number>(push(i10), op(0x38))))
		f10 =  ((__xasm<Number>(push(i13), op(0x38))))
		f11 =  ((__xasm<Number>(push(i9), op(0x38))))
		f12 =  ((__xasm<Number>(push(i11), op(0x38))))
		f13 =  ((__xasm<Number>(push(i14), op(0x38))))
		f14 =  (f9 - f8)
		f15 =  (f10 - f8)
		f16 =  (f12 - f11)
		f17 =  (f13 - f11)
		f18 =  (f10 - f9)
		f19 =  (f13 - f12)
		f14 =  f14/*fround*/
		f15 =  f15/*fround*/
		f16 =  f16/*fround*/
		f17 =  f17/*fround*/
		f18 =  f18/*fround*/
		f19 =  f19/*fround*/
		f14 =  f14/*fextend*/
		f17 =  f17/*fextend*/
		f15 =  f15/*fextend*/
		f16 =  f16/*fextend*/
		f18 =  f18/*fextend*/
		f19 =  f19/*fextend*/
		f20 =  (f8 * f14)
		f21 =  (f14 * f17)
		f22 =  (f8 * f15)
		f23 =  (f16 * f15)
		f24 =  (f13 * f8)
		f8 =  (f8 * f12)
		f25 =  (f11 * f16)
		f26 =  (f11 * f17)
		f27 =  (f10 * f11)
		f11 =  (f11 * f9)
		f28 =  (f9 * f18)
		f29 =  (f9 * f13)
		f30 =  (f12 * f19)
		f31 =  (f12 * f10)
		f20 =  f20/*fround*/
		f21 =  f21/*fround*/
		f22 =  f22/*fround*/
		f23 =  f23/*fround*/
		f24 =  f24/*fround*/
		f8 =  f8/*fround*/
		f25 =  f25/*fround*/
		f26 =  f26/*fround*/
		f27 =  f27/*fround*/
		f11 =  f11/*fround*/
		f28 =  f28/*fround*/
		f29 =  f29/*fround*/
		f30 =  f30/*fround*/
		f31 =  f31/*fround*/
		f25 =  f25/*fextend*/
		f20 =  f20/*fextend*/
		f23 =  f23/*fextend*/
		f21 =  f21/*fextend*/
		f26 =  f26/*fextend*/
		f22 =  f22/*fextend*/
		f24 =  f24/*fextend*/
		f27 =  f27/*fextend*/
		f11 =  f11/*fextend*/
		f8 =  f8/*fextend*/
		f30 =  f30/*fextend*/
		f28 =  f28/*fextend*/
		f31 =  f31/*fextend*/
		f29 =  f29/*fextend*/
		f20 =  (f20 + f25)
		f9 =  (f9 * f14)
		f14 =  (f21 - f23)
		f21 =  (f22 + f26)
		f15 =  (f10 * f15)
		f22 =  (f27 - f24)
		f8 =  (f8 - f11)
		f11 =  (f12 * f16)
		f12 =  (f13 * f17)
		f16 =  (f28 + f30)
		f10 =  (f10 * f18)
		f17 =  (f29 - f31)
		f13 =  (f13 * f19)
		f18 =  f20/*fround*/
		f9 =  f9/*fround*/
		f14 =  f14/*fround*/
		f19 =  f21/*fround*/
		f15 =  f15/*fround*/
		f20 =  f22/*fround*/
		f8 =  f8/*fround*/
		f11 =  f11/*fround*/
		f12 =  f12/*fround*/
		f16 =  f16/*fround*/
		f10 =  f10/*fround*/
		f17 =  f17/*fround*/
		f13 =  f13/*fround*/
		f21 =  f18/*fextend*/
		f22 =  f19/*fextend*/
		f23 =  f16/*fextend*/
		f11 =  f11/*fextend*/
		f9 =  f9/*fextend*/
		f17 =  f17/*fextend*/
		f14 =  f14/*fextend*/
		f20 =  f20/*fextend*/
		f8 =  f8/*fextend*/
		f12 =  f12/*fextend*/
		f15 =  f15/*fextend*/
		f13 =  f13/*fextend*/
		f10 =  f10/*fextend*/
		f21 =  -f21
		f9 =  (f9 + f11)
		f11 =  (f17 * f14)
		f17 =  (f20 * f14)
		f8 =  (f8 * f14)
		f14 =  -f22
		f12 =  (f15 + f12)
		f15 =  -f23
		f10 =  (f10 + f13)
		f13 =  f14/*fround*/
		f14 =  f21/*fround*/
		f9 =  f9/*fround*/
		f11 =  f11/*fround*/
		f17 =  f17/*fround*/
		f8 =  f8/*fround*/
		f12 =  f12/*fround*/
		f15 =  f15/*fround*/
		f10 =  f10/*fround*/
		f7 =  f7/*fround*/
		f7 =  f7/*fextend*/
		f20 =  f13/*fextend*/
		__asm(push(f20>f7), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_60_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_58_F"))
		f7 =  (0)
		f7 =  f7/*fround*/
		f7 =  f7/*fextend*/
		f20 =  f14/*fextend*/
		__asm(push(f20>f7), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_60_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_59_F"))
		i25 =  (1065353216)
		__asm(push(i25), push(i22), op(0x3c))
		i25 =  (1)
		__asm(push(i25), push(i6), op(0x3c))
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_76_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_60_F"))
		f7 =  (0)
		f7 =  f7/*fround*/
		f20 =  f9/*fextend*/
		f7 =  f7/*fextend*/
		f21 =  f14/*fextend*/
		i25 =  ((f20<=f7) ? 1 : 0)
		i26 =  ((f21<=f7) ? 1 : 0)
		i25 =  (i26 | i25)
		f20 =  f8/*fextend*/
		__asm(push(f20>f7), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_63_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_61_F"))
		i25 =  (i25 & 1)
		__asm(push(i25!=0), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_63_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_62_F"))
		f7 =  (1)
		f8 =  f18/*fextend*/
		f9 =  f9/*fextend*/
		f8 =  (f9 - f8)
		f8 =  f8/*fround*/
		f10 =  f7/*fround*/
		f7 =  f8/*fextend*/
		f8 =  f10/*fextend*/
		f7 =  (f8 / f7)
		f8 =  f7/*fround*/
		f7 =  f8/*fextend*/
		f8 =  (f9 * f7)
		f9 =  f14/*fextend*/
		f7 =  (f7 * f9)
		f8 =  f8/*fround*/
		__asm(push(f8), push(i22), op(0x3d))
		f8 =  f7/*fround*/
		__asm(push(f8), push(i12), op(0x3d))
		i25 =  (2)
		__asm(push(i25), push(i6), op(0x3c))
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_76_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_63_F"))
		f7 =  (0)
		f7 =  f7/*fround*/
		f14 =  f12/*fextend*/
		f7 =  f7/*fextend*/
		f18 =  f13/*fextend*/
		i25 =  ((f14<=f7) ? 1 : 0)
		i26 =  ((f18<=f7) ? 1 : 0)
		i25 =  (i26 | i25)
		f14 =  f17/*fextend*/
		__asm(push(f14>f7), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_66_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_64_F"))
		i25 =  (i25 & 1)
		__asm(push(i25!=0), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_66_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_65_F"))
		f7 =  (1)
		f8 =  f19/*fextend*/
		f9 =  f12/*fextend*/
		f8 =  (f9 - f8)
		f8 =  f8/*fround*/
		f10 =  f7/*fround*/
		f7 =  f8/*fextend*/
		f8 =  f10/*fextend*/
		f7 =  (f8 / f7)
		f8 =  f7/*fround*/
		f7 =  f8/*fextend*/
		f8 =  (f9 * f7)
		f9 =  f13/*fextend*/
		f7 =  (f7 * f9)
		f8 =  f8/*fround*/
		__asm(push(f8), push(i22), op(0x3d))
		f8 =  f7/*fround*/
		__asm(push(f8), push(i15), op(0x3d))
		i25 =  (2)
		__asm(push(i25), push(i6), op(0x3c))
		i25 = i23
		i26 = i21
		i27 =  (36)
		memcpy(i25, i26, i27)
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_76_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_66_F"))
		f7 =  (0)
		f7 =  f7/*fround*/
		f7 =  f7/*fextend*/
		f13 =  f15/*fextend*/
		__asm(push(f13>f7), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_69_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_67_F"))
		f7 =  (0)
		f7 =  f7/*fround*/
		f7 =  f7/*fextend*/
		f9 =  f9/*fextend*/
		__asm(push(f9>f7), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_69_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_68_F"))
		i25 =  (1065353216)
		__asm(push(i25), push(i12), op(0x3c))
		i25 =  (1)
		__asm(push(i25), push(i6), op(0x3c))
		i25 = i8
		i26 = i23
		i27 =  (36)
		memcpy(i25, i26, i27)
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_76_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_69_F"))
		f7 =  (0)
		f7 =  f7/*fround*/
		f7 =  f7/*fextend*/
		f9 =  f12/*fextend*/
		__asm(push(f9>f7), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_72_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_70_F"))
		f7 =  (0)
		f7 =  f7/*fround*/
		f7 =  f7/*fextend*/
		f9 =  f10/*fextend*/
		__asm(push(f9>f7), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_72_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_71_F"))
		i25 =  (1065353216)
		__asm(push(i25), push(i15), op(0x3c))
		i25 =  (1)
		__asm(push(i25), push(i6), op(0x3c))
		i25 = i8
		i26 = i21
		i27 =  (36)
		memcpy(i25, i26, i27)
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_76_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_72_F"))
		f7 =  (0)
		f7 =  f7/*fround*/
		f9 =  f10/*fextend*/
		f7 =  f7/*fextend*/
		f12 =  f15/*fextend*/
		i25 =  ((f9<=f7) ? 1 : 0)
		i26 =  ((f12<=f7) ? 1 : 0)
		i25 =  (i26 | i25)
		f9 =  f11/*fextend*/
		__asm(push(f9>f7), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_75_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_73_F"))
		i25 =  (i25 & 1)
		__asm(push(i25!=0), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_75_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_74_F"))
		f7 =  (1)
		f8 =  f16/*fextend*/
		f9 =  f10/*fextend*/
		f8 =  (f9 - f8)
		f8 =  f8/*fround*/
		f11 =  f7/*fround*/
		f7 =  f8/*fextend*/
		f8 =  f11/*fextend*/
		f7 =  (f8 / f7)
		f8 =  f7/*fround*/
		f7 =  f8/*fextend*/
		f8 =  (f9 * f7)
		f9 =  f15/*fextend*/
		f7 =  (f7 * f9)
		f8 =  f8/*fround*/
		__asm(push(f8), push(i12), op(0x3d))
		f8 =  f7/*fround*/
		__asm(push(f8), push(i15), op(0x3d))
		i25 =  (2)
		__asm(push(i25), push(i6), op(0x3c))
		i25 = i8
		i26 = i21
		i27 =  (36)
		memcpy(i25, i26, i27)
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_76_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_75_F"))
		f7 =  (1)
		f9 =  f17/*fextend*/
		f10 =  f11/*fextend*/
		f11 =  (f10 + f9)
		f11 =  f11/*fround*/
		f8 =  f8/*fextend*/
		f11 =  f11/*fextend*/
		f11 =  (f11 + f8)
		f11 =  f11/*fround*/
		f7 =  f7/*fround*/
		f11 =  f11/*fextend*/
		f7 =  f7/*fextend*/
		f7 =  (f7 / f11)
		f7 =  f7/*fround*/
		f7 =  f7/*fextend*/
		f10 =  (f10 * f7)
		f9 =  (f9 * f7)
		f10 =  f10/*fround*/
		f7 =  (f8 * f7)
		__asm(push(f10), push(i22), op(0x3d))
		f8 =  f9/*fround*/
		__asm(push(f8), push(i12), op(0x3d))
		f7 =  f7/*fround*/
		__asm(push(f7), push(i15), op(0x3d))
		i25 =  (3)
		__asm(push(i25), push(i6), op(0x3c))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_76_F"))
		i26 =  ((__xasm<int>(push(i6), op(0x37))))
		__asm(push(i26==3), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_117_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_77_F"))
		i25 = i26
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_78_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_78_F"))
		i27 =  (i26 + -1)
		__asm(push(uint(i27)<uint(3)), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_85_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_79_F"))
		__asm(push(i26!=0), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_81_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_80_F"))
		i2 =  (___sF)
		mstate.esp -= 24
		i18 =  (__2E_str1670)
		i0 =  (__2E_str46253)
		i1 =  (__ZZNK9b2Simplex15GetClosestPointEvE8__func__)
		i3 =  (__2E_str45252)
		i4 =  (194)
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_82_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_81_F"))
		i2 =  (___sF)
		mstate.esp -= 24
		i18 =  (__2E_str1670)
		i0 =  (__2E_str46253)
		i1 =  (__ZZNK9b2Simplex15GetClosestPointEvE8__func__)
		i3 =  (__2E_str45252)
		i4 =  (207)
	__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_82_F"), lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_82_B"), label, lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_82_F")); 
		i2 =  (i2 + 176)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i18), push((mstate.esp+4)), op(0x3c))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_83_F"))
		__asm(push(i0), push((mstate.esp+8)), op(0x3c))
		__asm(push(i1), push((mstate.esp+12)), op(0x3c))
		__asm(push(i3), push((mstate.esp+16)), op(0x3c))
		__asm(push(i4), push((mstate.esp+20)), op(0x3c))
	__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_84_F"), lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_84_B"), label, lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_84_F")); 
		state = 1
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput_state1"))
		mstate.esp += 24
		state = 2
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput_state2"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_85_F"))
		__asm(push(i25==2), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_88_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_86_F"))
		__asm(push(i25!=1), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_90_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_87_F"))
		f7 =  ((__xasm<Number>(push(i9), op(0x38))))
		f8 =  ((__xasm<Number>(push(i24), op(0x38))))
		f7 =  -f7
		f8 =  -f8
		f7 =  f7/*fround*/
		f8 =  f8/*fround*/
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_92_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_88_F"))
		f7 =  (0)
		f8 =  ((__xasm<Number>(push(i11), op(0x38))))
		f9 =  ((__xasm<Number>(push(i9), op(0x38))))
		f10 =  ((__xasm<Number>(push(i10), op(0x38))))
		f11 =  ((__xasm<Number>(push(i24), op(0x38))))
		f8 =  (f8 - f9)
		f10 =  (f10 - f11)
		f8 =  f8/*fround*/
		f10 =  f10/*fround*/
		f12 =  f8/*fextend*/
		f13 =  f10/*fextend*/
		f11 =  (f12 * f11)
		f9 =  (f13 * f9)
		f11 =  f11/*fround*/
		f9 =  f9/*fround*/
		f9 =  f9/*fextend*/
		f11 =  f11/*fextend*/
		f9 =  (f11 - f9)
		f9 =  f9/*fround*/
		f7 =  f7/*fround*/
		f7 =  f7/*fextend*/
		f9 =  f9/*fextend*/
		__asm(push(f9<=f7), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_91_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_89_F"))
		f7 =  f8/*fextend*/
		f7 =  -f7
		f8 =  f7/*fround*/
		f7 = f10
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_92_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_90_F"))
		i2 =  (___sF)
		mstate.esp -= 24
		i18 =  (__2E_str1670)
		i0 =  (__2E_str46253)
		i1 =  (__ZZNK9b2Simplex18GetSearchDirectionEvE8__func__)
		i3 =  (__2E_str45252)
		i4 =  (184)
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_82_B"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_91_F"))
		f7 =  f10/*fextend*/
		f7 =  -f7
		f7 =  f7/*fround*/
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_92_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_92_F"))
		f9 =  (1.42109e-14)
		f10 =  f8/*fextend*/
		f11 =  f7/*fextend*/
		f10 =  (f10 * f10)
		f11 =  (f11 * f11)
		f10 =  f10/*fround*/
		f11 =  f11/*fround*/
		f11 =  f11/*fextend*/
		f10 =  f10/*fextend*/
		f10 =  (f10 + f11)
		f10 =  f10/*fround*/
		f9 =  f9/*fround*/
		f9 =  f9/*fextend*/
		f10 =  f10/*fextend*/
		__asm(push(f10<f9), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_117_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_93_F"))
		f9 =  f8/*fextend*/
		f9 =  -f9
		f9 =  f9/*fround*/
		f10 =  f2/*fextend*/
		f11 =  f7/*fextend*/
		f12 =  f0/*fextend*/
		f13 =  f1/*fextend*/
		f9 =  f9/*fextend*/
		f14 =  ((__xasm<Number>(push((mstate.ebp+-192)), op(0x38))))
		f14 =  f14/*fextend*/
		f10 =  (f10 * f11)
		f11 =  (f12 * f11)
		f12 =  (f13 * f9)
		f9 =  (f14 * f9)
		f10 =  f10/*fround*/
		f11 =  f11/*fround*/
		f12 =  f12/*fround*/
		f9 =  f9/*fround*/
		f10 =  f10/*fextend*/
		f12 =  f12/*fextend*/
		f11 =  f11/*fextend*/
		f9 =  f9/*fextend*/
		f10 =  (f12 - f10)
		f9 =  (f9 - f11)
		f10 =  f10/*fround*/
		f9 =  f9/*fround*/
		i26 =  ((__xasm<int>(push(i20), op(0x37))))
		f11 =  ((__xasm<Number>(push(i26), op(0x38))))
		f12 =  f9/*fextend*/
		f13 =  ((__xasm<Number>(push((i26+4)), op(0x38))))
		f14 =  f10/*fextend*/
		f13 =  (f13 * f14)
		f11 =  (f11 * f12)
		f12 =  f13/*fround*/
		f11 =  f11/*fround*/
		f12 =  f12/*fextend*/
		f11 =  f11/*fextend*/
		i27 =  ((__xasm<int>(push(i19), op(0x37))))
		f11 =  (f11 + f12)
		f11 =  f11/*fround*/
		i28 = i26
		__asm(push(i27>1), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_95_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_94_F"))
		i26 =  (0)
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_98_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_95_F"))
		i29 =  (0)
		i30 =  (1)
	__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_96_F"), lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_96_B"), label, lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_96_F")); 
		f12 =  ((__xasm<Number>(push((i26+8)), op(0x38))))
		f13 =  ((__xasm<Number>(push((i26+12)), op(0x38))))
		f14 =  f9/*fextend*/
		f15 =  f10/*fextend*/
		f12 =  (f12 * f14)
		f13 =  (f13 * f15)
		f12 =  f12/*fround*/
		f13 =  f13/*fround*/
		f13 =  f13/*fextend*/
		f12 =  f12/*fextend*/
		f12 =  (f12 + f13)
		f12 =  f12/*fround*/
		f11 =  f11/*fextend*/
		f12 =  f12/*fextend*/
		f13 =  ((f12>f11) ? f12 : f11)
		i29 =  ((f12>f11) ? i30 : i29)
		f11 =  f13/*fround*/
		i30 =  (i30 + 1)
		i26 =  (i26 + 8)
		__asm(push(i27>i30), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_157_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_97_F"))
		i26 = i29
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_98_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_98_F"))
		i29 =  (i25 * 36)
		i29 =  (i7 + i29)
		__asm(push(i26), push((i29+28)), op(0x3c))
		__asm(push(i27<=i26), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_100_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_99_F"))
		__asm(push(i26>-1), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_101_F"))
	__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_100_F"), lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_100_B"), label, lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_100_F")); 
		i2 =  (___sF)
		mstate.esp -= 24
		i18 =  (__2E_str1670)
		i0 =  (__2E_str1208)
		i1 =  (__ZZNK11b2LoopShape9GetVertexEiE8__func__)
		i3 =  (__2E_str4211)
		i4 =  (103)
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_82_B"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_101_F"))
		i27 =  (i26 << 3)
		i27 =  (i28 + i27)
		f9 =  ((__xasm<Number>(push(i27), op(0x38))))
		f10 =  ((__xasm<Number>(push((mstate.ebp+-192)), op(0x38))))
		f10 =  f10/*fextend*/
		f10 =  (f10 * f9)
		f11 =  f0/*fextend*/
		f10 =  f10/*fround*/
		f9 =  (f11 * f9)
		f11 =  ((__xasm<Number>(push((i27+4)), op(0x38))))
		f9 =  f9/*fround*/
		f12 =  f1/*fextend*/
		f10 =  f10/*fextend*/
		f13 =  ((__xasm<Number>(push((mstate.ebp+-160)), op(0x38))))
		f13 =  f13/*fextend*/
		f10 =  (f13 + f10)
		f12 =  (f12 * f11)
		f13 =  f2/*fextend*/
		f9 =  f9/*fextend*/
		f14 =  ((__xasm<Number>(push((mstate.ebp+-168)), op(0x38))))
		f14 =  f14/*fextend*/
		f10 =  f10/*fround*/
		f9 =  (f14 + f9)
		f12 =  f12/*fround*/
		f11 =  (f13 * f11)
		f9 =  f9/*fround*/
		f11 =  f11/*fround*/
		f12 =  f12/*fextend*/
		f10 =  f10/*fextend*/
		f13 =  f5/*fextend*/
		f8 =  f8/*fextend*/
		f14 =  f3/*fextend*/
		f15 =  f6/*fextend*/
		f7 =  f7/*fextend*/
		f16 =  f4/*fextend*/
		f10 =  (f10 + f12)
		f12 =  (f8 * f13)
		f8 =  (f8 * f14)
		f13 =  (f7 * f15)
		f7 =  (f7 * f16)
		f11 =  f11/*fextend*/
		f9 =  f9/*fextend*/
		i27 =  (i25 * 36)
		f9 =  (f9 + f11)
		f11 =  f12/*fround*/
		f8 =  f8/*fround*/
		f12 =  f13/*fround*/
		f7 =  f7/*fround*/
		f10 =  f10/*fround*/
		i27 =  (i7 + i27)
		__asm(push(f10), push(i27), op(0x3d))
		f9 =  f9/*fround*/
		f12 =  f12/*fextend*/
		f11 =  f11/*fextend*/
		f7 =  f7/*fextend*/
		f8 =  f8/*fextend*/
		f11 =  (f11 + f12)
		f7 =  (f8 + f7)
		__asm(push(f9), push((i27+4)), op(0x3d))
		i27 =  ((__xasm<int>(push(i16), op(0x37))))
		f8 =  f11/*fround*/
		f7 =  f7/*fround*/
		f11 =  ((__xasm<Number>(push(i27), op(0x38))))
		f12 =  f7/*fextend*/
		f13 =  ((__xasm<Number>(push((i27+4)), op(0x38))))
		f14 =  f8/*fextend*/
		f11 =  (f11 * f12)
		f12 =  (f13 * f14)
		f11 =  f11/*fround*/
		f12 =  f12/*fround*/
		f12 =  f12/*fextend*/
		f11 =  f11/*fextend*/
		i28 =  ((__xasm<int>(push(i17), op(0x37))))
		f11 =  (f11 + f12)
		f11 =  f11/*fround*/
		i29 = i27
		__asm(push(i28>1), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_103_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_102_F"))
		i27 =  (0)
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_106_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_103_F"))
		i30 =  (0)
		i31 =  (1)
	__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_104_F"), lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_104_B"), label, lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_104_F")); 
		f12 =  ((__xasm<Number>(push((i27+8)), op(0x38))))
		f13 =  ((__xasm<Number>(push((i27+12)), op(0x38))))
		f14 =  f7/*fextend*/
		f15 =  f8/*fextend*/
		f12 =  (f12 * f14)
		f13 =  (f13 * f15)
		f12 =  f12/*fround*/
		f13 =  f13/*fround*/
		f13 =  f13/*fextend*/
		f12 =  f12/*fextend*/
		f12 =  (f12 + f13)
		f12 =  f12/*fround*/
		f11 =  f11/*fextend*/
		f12 =  f12/*fextend*/
		f13 =  ((f12>f11) ? f12 : f11)
		i30 =  ((f12>f11) ? i31 : i30)
		f11 =  f13/*fround*/
		i31 =  (i31 + 1)
		i27 =  (i27 + 8)
		__asm(push(i28>i31), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_158_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_105_F"))
		i27 = i30
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_106_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_106_F"))
		i30 =  (i25 * 36)
		i30 =  (i7 + i30)
		__asm(push(i27), push((i30+32)), op(0x3c))
		__asm(push(i28<=i27), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_108_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_107_F"))
		__asm(push(i27>-1), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_109_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_108_F"))
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_100_B"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_109_F"))
		i28 =  (i27 << 3)
		i28 =  (i29 + i28)
		f7 =  ((__xasm<Number>(push(i28), op(0x38))))
		f8 =  f3/*fextend*/
		f8 =  (f8 * f7)
		f11 =  f4/*fextend*/
		f8 =  f8/*fround*/
		f7 =  (f11 * f7)
		f11 =  ((__xasm<Number>(push((i28+4)), op(0x38))))
		f7 =  f7/*fround*/
		f12 =  f5/*fextend*/
		f8 =  f8/*fextend*/
		f13 =  ((__xasm<Number>(push((mstate.ebp+-176)), op(0x38))))
		f13 =  f13/*fextend*/
		f8 =  (f13 + f8)
		f12 =  (f12 * f11)
		f13 =  f6/*fextend*/
		f7 =  f7/*fextend*/
		f14 =  ((__xasm<Number>(push((mstate.ebp+-184)), op(0x38))))
		f14 =  f14/*fextend*/
		f8 =  f8/*fround*/
		f7 =  (f14 + f7)
		f12 =  f12/*fround*/
		f11 =  (f13 * f11)
		f7 =  f7/*fround*/
		f11 =  f11/*fround*/
		f12 =  f12/*fextend*/
		f8 =  f8/*fextend*/
		f8 =  (f8 + f12)
		f11 =  f11/*fextend*/
		f7 =  f7/*fextend*/
		f8 =  f8/*fround*/
		f7 =  (f7 + f11)
		i25 =  (i25 * 36)
		f7 =  f7/*fround*/
		f10 =  f10/*fextend*/
		f11 =  f8/*fextend*/
		i25 =  (i7 + i25)
		__asm(push(f8), push((i25+8)), op(0x3d))
		f8 =  (f11 - f10)
		f9 =  f9/*fextend*/
		f10 =  f7/*fextend*/
		f9 =  (f10 - f9)
		__asm(push(f7), push((i25+12)), op(0x3d))
		f7 =  f8/*fround*/
		__asm(push(f7), push((i25+16)), op(0x3d))
		f7 =  f9/*fround*/
		__asm(push(f7), push((i25+20)), op(0x3d))
		i25 =  ((__xasm<int>(push(_b2_gjkIters), op(0x37))))
		i25 =  (i25 + 1)
		__asm(push(i25), push(_b2_gjkIters), op(0x3c))
		__asm(push(i2<1), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_115_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_110_F"))
		i25 =  (0)
		i28 = i25
	__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_111_F"), lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_111_B"), label, lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_111_F")); 
		i29 =  (i3 + i28)
		i29 =  ((__xasm<int>(push(i29), op(0x37))))
		__asm(push(i26!=i29), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_113_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_112_F"))
		i29 =  (i0 + i28)
		i29 =  ((__xasm<int>(push(i29), op(0x37))))
		__asm(push(i27==i29), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_118_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_113_F"))
		i28 =  (i28 + 4)
		i25 =  (i25 + 1)
		__asm(push(i25>=i2), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_115_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_114_F"))
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_111_B"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_115_F"))
		i2 =  ((__xasm<int>(push(i6), op(0x37))))
		i2 =  (i2 + 1)
		__asm(push(i2), push(i6), op(0x3c))
		i18 =  (i18 + 1)
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_116_F"))
		__asm(push(i18<20), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_42_B"))
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_117_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_117_F"))
		i2 = i18
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_119_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_118_F"))
		i2 =  (i18 + 1)
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_119_F"))
		i0 = i2
		i2 =  ((__xasm<int>(push(_b2_gjkMaxIters), op(0x37))))
		i2 =  ((i2>i0) ? i2 : i0)
		__asm(push(i2), push(_b2_gjkMaxIters), op(0x3c))
		i2 =  ((__xasm<int>(push(i6), op(0x37))))
		__asm(push(i2>1), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_123_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_120_F"))
		__asm(push(i2==0), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_126_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_121_F"))
		__asm(push(i2==1), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_122_F"))
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_128_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_122_F"))
		f0 =  ((__xasm<Number>(push((mstate.ebp+-112)), op(0x38))))
		f1 =  ((__xasm<Number>(push((mstate.ebp+-108)), op(0x38))))
		__asm(push(f0), push(i4), op(0x3d))
		__asm(push(f1), push((i4+4)), op(0x3d))
		f0 =  ((__xasm<Number>(push((mstate.ebp+-104)), op(0x38))))
		f1 =  ((__xasm<Number>(push((mstate.ebp+-100)), op(0x38))))
		__asm(push(f0), push((i4+8)), op(0x3d))
		__asm(push(f1), push((i4+12)), op(0x3d))
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_130_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_123_F"))
		__asm(push(i2==2), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_129_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_124_F"))
		__asm(push(i2==3), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_125_F"))
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_128_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_125_F"))
		f0 =  ((__xasm<Number>(push(i12), op(0x38))))
		f1 =  ((__xasm<Number>(push((mstate.ebp+-76)), op(0x38))))
		f2 =  ((__xasm<Number>(push(i22), op(0x38))))
		f3 =  ((__xasm<Number>(push((mstate.ebp+-112)), op(0x38))))
		f4 =  ((__xasm<Number>(push((mstate.ebp+-72)), op(0x38))))
		f5 =  ((__xasm<Number>(push((mstate.ebp+-108)), op(0x38))))
		f1 =  (f1 * f0)
		f3 =  (f3 * f2)
		f0 =  (f4 * f0)
		f1 =  f1/*fround*/
		f2 =  (f5 * f2)
		f3 =  f3/*fround*/
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f4 =  ((__xasm<Number>(push(i15), op(0x38))))
		f5 =  ((__xasm<Number>(push((mstate.ebp+-40)), op(0x38))))
		f1 =  f1/*fextend*/
		f3 =  f3/*fextend*/
		f6 =  ((__xasm<Number>(push((mstate.ebp+-36)), op(0x38))))
		f5 =  (f5 * f4)
		f1 =  (f3 + f1)
		f0 =  f0/*fextend*/
		f2 =  f2/*fextend*/
		f3 =  (f6 * f4)
		f4 =  f5/*fround*/
		f0 =  (f2 + f0)
		f1 =  f1/*fround*/
		f2 =  f3/*fround*/
		f0 =  f0/*fround*/
		f3 =  f4/*fextend*/
		f1 =  f1/*fextend*/
		f1 =  (f1 + f3)
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 + f2)
		f1 =  f1/*fround*/
		__asm(push(f1), push(i4), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push((i4+4)), op(0x3d))
		__asm(push(f1), push((i4+8)), op(0x3d))
		__asm(push(f0), push((i4+12)), op(0x3d))
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_130_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_126_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i4 =  (__2E_str46253)
		i5 =  (__ZZNK9b2Simplex16GetWitnessPointsEP6b2Vec2S1_E8__func__)
		i6 =  (__2E_str45252)
		i9 =  (217)
	__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_127_F"), lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_127_B"), label, lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_127_F")); 
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i4), push((mstate.esp+8)), op(0x3c))
		__asm(push(i5), push((mstate.esp+12)), op(0x3c))
		__asm(push(i6), push((mstate.esp+16)), op(0x3c))
		__asm(push(i9), push((mstate.esp+20)), op(0x3c))
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_84_B"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_128_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i4 =  (__2E_str46253)
		i5 =  (__ZZNK9b2Simplex16GetWitnessPointsEP6b2Vec2S1_E8__func__)
		i6 =  (__2E_str45252)
		i9 =  (236)
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_127_B"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_129_F"))
		f0 =  ((__xasm<Number>(push(i12), op(0x38))))
		f1 =  ((__xasm<Number>(push((mstate.ebp+-76)), op(0x38))))
		f2 =  ((__xasm<Number>(push(i22), op(0x38))))
		f3 =  ((__xasm<Number>(push((mstate.ebp+-112)), op(0x38))))
		f4 =  ((__xasm<Number>(push((mstate.ebp+-72)), op(0x38))))
		f5 =  ((__xasm<Number>(push((mstate.ebp+-108)), op(0x38))))
		f1 =  (f1 * f0)
		f3 =  (f3 * f2)
		f4 =  (f4 * f0)
		f1 =  f1/*fround*/
		f5 =  (f5 * f2)
		f3 =  f3/*fround*/
		f4 =  f4/*fround*/
		f5 =  f5/*fround*/
		f1 =  f1/*fextend*/
		f3 =  f3/*fextend*/
		f1 =  (f3 + f1)
		f3 =  f4/*fextend*/
		f4 =  f5/*fextend*/
		f3 =  (f4 + f3)
		f1 =  f1/*fround*/
		__asm(push(f1), push(i4), op(0x3d))
		f1 =  f3/*fround*/
		__asm(push(f1), push((i4+4)), op(0x3d))
		f1 =  ((__xasm<Number>(push((mstate.ebp+-68)), op(0x38))))
		f3 =  ((__xasm<Number>(push((mstate.ebp+-104)), op(0x38))))
		f4 =  ((__xasm<Number>(push((mstate.ebp+-64)), op(0x38))))
		f5 =  ((__xasm<Number>(push((mstate.ebp+-100)), op(0x38))))
		f1 =  (f1 * f0)
		f3 =  (f3 * f2)
		f0 =  (f4 * f0)
		f1 =  f1/*fround*/
		f2 =  (f5 * f2)
		f3 =  f3/*fround*/
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f1 =  f1/*fextend*/
		f3 =  f3/*fextend*/
		f1 =  (f3 + f1)
		f0 =  f0/*fextend*/
		f2 =  f2/*fextend*/
		f0 =  (f2 + f0)
		f1 =  f1/*fround*/
		__asm(push(f1), push((i4+8)), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push((i4+12)), op(0x3d))
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_130_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_130_F"))
		f0 =  ((__xasm<Number>(push((i4+4)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i4+12)), op(0x38))))
		f2 =  ((__xasm<Number>(push(i4), op(0x38))))
		f3 =  ((__xasm<Number>(push((i4+8)), op(0x38))))
		f0 =  (f0 - f1)
		f1 =  (f2 - f3)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  (f0 * f0)
		f1 =  (f1 * f1)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  (f1 + f0)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f0 =  Math.sqrt(f0)
		f0 =  f0/*fround*/
		__asm(push(f0), push((i4+16)), op(0x3d))
		__asm(push(i0), push((i4+20)), op(0x3c))
		i0 =  ((__xasm<int>(push(i6), op(0x37))))
		i2 =  (i4 + 12)
		i3 =  (i4 + 16)
		i7 =  (i4 + 8)
		i8 =  (i4 + 4)
		__asm(push(i0>1), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_134_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_131_F"))
		__asm(push(i0==0), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_137_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_132_F"))
		__asm(push(i0==1), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_133_F"))
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_140_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_133_F"))
		f0 =  (0)
		f0 =  f0/*fround*/
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_142_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_134_F"))
		__asm(push(i0==2), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_141_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_135_F"))
		__asm(push(i0==3), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_136_F"))
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_140_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_136_F"))
		f0 =  ((__xasm<Number>(push(i14), op(0x38))))
		f1 =  ((__xasm<Number>(push(i9), op(0x38))))
		f2 =  ((__xasm<Number>(push(i11), op(0x38))))
		f3 =  ((__xasm<Number>(push(i13), op(0x38))))
		f4 =  ((__xasm<Number>(push(i24), op(0x38))))
		f5 =  ((__xasm<Number>(push(i10), op(0x38))))
		f0 =  (f0 - f1)
		f1 =  (f2 - f1)
		f2 =  (f3 - f4)
		f3 =  (f5 - f4)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f2 =  f2/*fround*/
		f3 =  f3/*fround*/
		f0 =  f0/*fextend*/
		f3 =  f3/*fextend*/
		f2 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  (f3 * f0)
		f1 =  (f1 * f2)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f1 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 - f1)
		f0 =  f0/*fround*/
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_142_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_137_F"))
		i1 =  (___sF)
		mstate.esp -= 24
		i2 =  (__2E_str1670)
		i3 =  (__2E_str46253)
		i4 =  (__ZZNK9b2Simplex9GetMetricEvE8__func__)
		i5 =  (__2E_str45252)
		i6 =  (246)
	__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_138_F"), lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_138_B"), label, lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_138_F")); 
		i1 =  (i1 + 176)
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i2), push((mstate.esp+4)), op(0x3c))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_139_F"))
		__asm(push(i3), push((mstate.esp+8)), op(0x3c))
		__asm(push(i4), push((mstate.esp+12)), op(0x3c))
		__asm(push(i5), push((mstate.esp+16)), op(0x3c))
		__asm(push(i6), push((mstate.esp+20)), op(0x3c))
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_84_B"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_140_F"))
		i1 =  (___sF)
		mstate.esp -= 24
		i2 =  (__2E_str1670)
		i3 =  (__2E_str46253)
		i4 =  (__ZZNK9b2Simplex9GetMetricEvE8__func__)
		i5 =  (__2E_str45252)
		i6 =  (259)
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_138_B"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_141_F"))
		f0 =  ((__xasm<Number>(push(i9), op(0x38))))
		f1 =  ((__xasm<Number>(push(i11), op(0x38))))
		f2 =  ((__xasm<Number>(push(i24), op(0x38))))
		f3 =  ((__xasm<Number>(push(i10), op(0x38))))
		f0 =  (f0 - f1)
		f1 =  (f2 - f3)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  (f0 * f0)
		f1 =  (f1 * f1)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  (f1 + f0)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f0 =  Math.sqrt(f0)
		f0 =  f0/*fround*/
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_142_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_142_F"))
		i0 =  ((__xasm<int>(push((mstate.ebp+-198)), op(0x37))))
		__asm(push(f0), push(i0), op(0x3d))
		i0 =  ((__xasm<int>(push(i6), op(0x37))))
		i6 =  ((__xasm<int>(push((mstate.ebp+-153)), op(0x37))))
		__asm(push(i0), push(i6), op(0x3b))
		__asm(push(i0<1), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_146_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_143_F"))
		i6 =  (0)
		i9 =  ((__xasm<int>(push((mstate.ebp+-207)), op(0x37))))
	__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_144_F"), lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_144_B"), label, lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_144_F")); 
		i10 =  ((__xasm<int>(push((i9+28)), op(0x35))))
		i11 =  (i5 + i6)
		__asm(push(i10), push((i11+6)), op(0x3a))
		i10 =  ((__xasm<int>(push((i9+32)), op(0x35))))
		__asm(push(i10), push((i11+9)), op(0x3a))
		i9 =  (i9 + 36)
		i6 =  (i6 + 1)
		__asm(push(i0<=i6), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_146_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_145_F"))
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_144_B"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_146_F"))
		i0 =  ((__xasm<int>(push((i1+104)), op(0x35))))
		__asm(push(i0==0), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_154_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_147_F"))
		f0 =  ((__xasm<Number>(push((i1+24)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i1+52)), op(0x38))))
		f2 =  f1/*fextend*/
		f3 =  f0/*fextend*/
		f4 =  ((__xasm<Number>(push(i3), op(0x38))))
		f2 =  (f3 + f2)
		f2 =  f2/*fround*/
		f3 =  f2/*fextend*/
		f5 =  f4/*fextend*/
		__asm(push(f5<=f3), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_153_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_148_F"))
		f3 =  (1.19209e-07)
		f3 =  f3/*fround*/
		f3 =  f3/*fextend*/
		f5 =  f4/*fextend*/
		__asm(push(f5<=f3), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_153_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_149_F"))
		f3 =  (1.19209e-07)
		f2 =  f2/*fextend*/
		f4 =  f4/*fextend*/
		f2 =  (f4 - f2)
		f2 =  f2/*fround*/
		__asm(push(f2), push(i3), op(0x3d))
		f2 =  ((__xasm<Number>(push(i2), op(0x38))))
		f4 =  ((__xasm<Number>(push(i8), op(0x38))))
		f5 =  ((__xasm<Number>(push(i7), op(0x38))))
		f6 =  ((__xasm<Number>(push(i4), op(0x38))))
		f7 =  f4/*fextend*/
		f8 =  f2/*fextend*/
		f9 =  f6/*fextend*/
		f10 =  f5/*fextend*/
		f7 =  (f8 - f7)
		f8 =  (f10 - f9)
		f7 =  f7/*fround*/
		f8 =  f8/*fround*/
		f9 =  f7/*fextend*/
		f10 =  f8/*fextend*/
		f9 =  (f9 * f9)
		f10 =  (f10 * f10)
		f9 =  f9/*fround*/
		f10 =  f10/*fround*/
		f9 =  f9/*fextend*/
		f10 =  f10/*fextend*/
		f9 =  (f10 + f9)
		f9 =  f9/*fround*/
		f9 =  f9/*fextend*/
		f9 =  Math.sqrt(f9)
		f9 =  f9/*fround*/
		f3 =  f3/*fround*/
		f3 =  f3/*fextend*/
		f10 =  f9/*fextend*/
		__asm(push(f10>=f3), iftrue, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_151_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_150_F"))
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_152_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_151_F"))
		f3 =  (1)
		f3 =  f3/*fround*/
		f9 =  f9/*fextend*/
		f3 =  f3/*fextend*/
		f3 =  (f3 / f9)
		f3 =  f3/*fround*/
		f8 =  f8/*fextend*/
		f3 =  f3/*fextend*/
		f7 =  f7/*fextend*/
		f8 =  (f8 * f3)
		f3 =  (f7 * f3)
		f7 =  f8/*fround*/
		f3 =  f3/*fround*/
		f8 = f7
		f7 = f3
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_152_F"))
		f3 = f8
		f0 =  f0/*fextend*/
		f3 =  f3/*fextend*/
		f7 =  f7/*fextend*/
		f8 =  (f3 * f0)
		f1 =  f1/*fextend*/
		f0 =  (f7 * f0)
		f8 =  f8/*fround*/
		f0 =  f0/*fround*/
		f3 =  (f3 * f1)
		f8 =  f8/*fextend*/
		f6 =  f6/*fextend*/
		f1 =  (f7 * f1)
		f6 =  (f6 + f8)
		f3 =  f3/*fround*/
		f0 =  f0/*fextend*/
		f4 =  f4/*fextend*/
		f0 =  (f4 + f0)
		f1 =  f1/*fround*/
		f4 =  f6/*fround*/
		f3 =  f3/*fextend*/
		f5 =  f5/*fextend*/
		f3 =  (f5 - f3)
		__asm(push(f4), push(i4), op(0x3d))
		f0 =  f0/*fround*/
		f1 =  f1/*fextend*/
		f2 =  f2/*fextend*/
		f1 =  (f2 - f1)
		__asm(push(f0), push(i8), op(0x3d))
		f0 =  f3/*fround*/
		__asm(push(f0), push(i7), op(0x3d))
		f0 =  f1/*fround*/
		__asm(push(f0), push(i2), op(0x3d))
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_154_F"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_153_F"))
		f0 =  (0.5)
		f1 =  ((__xasm<Number>(push(i4), op(0x38))))
		f2 =  ((__xasm<Number>(push(i7), op(0x38))))
		f1 =  (f1 + f2)
		f2 =  ((__xasm<Number>(push(i8), op(0x38))))
		f3 =  ((__xasm<Number>(push(i2), op(0x38))))
		f2 =  (f2 + f3)
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		f2 =  f2/*fround*/
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		f2 =  f2/*fextend*/
		f1 =  (f1 * f0)
		f0 =  (f2 * f0)
		f1 =  f1/*fround*/
		__asm(push(f1), push(i4), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push(i8), op(0x3d))
		__asm(push(f1), push(i7), op(0x3d))
		__asm(push(f0), push(i2), op(0x3d))
		i0 =  (0)
		__asm(push(i0), push(i3), op(0x3c))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_154_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_155_F"))
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_5_B"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_156_F"))
		i2 =  (___sF)
		mstate.esp -= 24
		i18 =  (__2E_str1670)
		i0 =  (__2E_str46253)
		i1 =  (__ZZ10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInputE8__func__)
		i3 =  (__2E_str45252)
		i4 =  (498)
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_82_B"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_157_F"))
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_96_B"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_158_F"))
		__asm(jump, target("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput__XprivateX__BB436_104_B"))
	__asm(lbl("__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput_errState"))
		throw("Invalid state in __Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput")
	}
}



// Async
public const __ZN9b2Contact6UpdateEP17b2ContactListener:int = regFunc(FSM__ZN9b2Contact6UpdateEP17b2ContactListener.start)

public final class FSM__ZN9b2Contact6UpdateEP17b2ContactListener extends Machine {

	public static function start():void {
			var result:FSM__ZN9b2Contact6UpdateEP17b2ContactListener = new FSM__ZN9b2Contact6UpdateEP17b2ContactListener
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
	public var i8:int, i9:int, i10:int, i11:int, i12:int, i13:int, i14:int, i15:int
	public var i16:int, i17:int, i18:int

	public static const intRegCount:int = 19
	public var f0:Number, f1:Number

	public static const NumberRegCount:int = 2
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN9b2Contact6UpdateEP17b2ContactListener_entry"))
		__asm(push(state), switchjump(
			"__ZN9b2Contact6UpdateEP17b2ContactListener_errState",
			"__ZN9b2Contact6UpdateEP17b2ContactListener_state0",
			"__ZN9b2Contact6UpdateEP17b2ContactListener_state1",
			"__ZN9b2Contact6UpdateEP17b2ContactListener_state2",
			"__ZN9b2Contact6UpdateEP17b2ContactListener_state3",
			"__ZN9b2Contact6UpdateEP17b2ContactListener_state4",
			"__ZN9b2Contact6UpdateEP17b2ContactListener_state5",
			"__ZN9b2Contact6UpdateEP17b2ContactListener_state6",
			"__ZN9b2Contact6UpdateEP17b2ContactListener_state7"))
	__asm(lbl("__ZN9b2Contact6UpdateEP17b2ContactListener_state0"))
	__asm(lbl("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 240
		i0 =  ((mstate.ebp+-240))
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i2 =  (i1 + 64)
		i3 =  (72)
		memcpy(i0, i2, i3)
		i3 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		i4 =  ((__xasm<int>(push((i1+48)), op(0x37))))
		i5 =  ((__xasm<int>(push((i4+42)), op(0x35))))
		i3 =  (i3 >>> 1)
		i3 =  (i3 & 1)
		i6 =  (i1 + 4)
		i7 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i8 = i1
		__asm(push(i5==0), iftrue, target("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_2_F"))
	__asm(jump, target("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_1_F"), lbl("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_1_B"), label, lbl("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_1_F")); 
		i5 =  (1)
		__asm(jump, target("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_4_F"))
	__asm(lbl("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_2_F"))
		i5 =  ((__xasm<int>(push((i1+52)), op(0x37))))
		i5 =  ((__xasm<int>(push((i5+42)), op(0x35))))
		__asm(push(i5!=0), iftrue, target("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_1_B"))
	__asm(lbl("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_3_F"))
		i5 =  (0)
	__asm(lbl("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_4_F"))
		i9 =  ((__xasm<int>(push((i1+52)), op(0x37))))
		i10 =  ((__xasm<int>(push((i4+12)), op(0x37))))
		i11 =  ((__xasm<int>(push((i9+12)), op(0x37))))
		i12 =  (i5 & 255)
		__asm(push(i12==0), iftrue, target("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_10_F"))
	__asm(lbl("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_5_F"))
		i0 =  (0)
		i2 =  ((__xasm<int>(push((i4+16)), op(0x37))))
		i8 =  ((__xasm<int>(push((i9+16)), op(0x37))))
		i4 =  ((__xasm<int>(push((i1+60)), op(0x37))))
		i9 =  ((__xasm<int>(push((i1+56)), op(0x37))))
		__asm(push(i0), push((mstate.ebp+-96)), op(0x3c))
		__asm(push(i0), push((mstate.ebp+-92)), op(0x3c))
		__asm(push(i0), push((mstate.ebp+-88)), op(0x3c))
		__asm(push(i0), push((mstate.ebp+-68)), op(0x3c))
		__asm(push(i0), push((mstate.ebp+-64)), op(0x3c))
		__asm(push(i0), push((mstate.ebp+-60)), op(0x3c))
		mstate.esp -= 12
		i12 =  ((mstate.ebp+-112))
		__asm(push(i12), push(mstate.esp), op(0x3c))
		__asm(push(i2), push((mstate.esp+4)), op(0x3c))
		__asm(push(i9), push((mstate.esp+8)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM__ZN15b2DistanceProxy3SetEPK7b2Shapei.start()
		return
	__asm(lbl("__ZN9b2Contact6UpdateEP17b2ContactListener_state1"))
		mstate.esp += 12
		mstate.esp -= 12
		i2 =  (i12 + 28)
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i8), push((mstate.esp+4)), op(0x3c))
		__asm(push(i4), push((mstate.esp+8)), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM__ZN15b2DistanceProxy3SetEPK7b2Shapei.start()
		return
	__asm(lbl("__ZN9b2Contact6UpdateEP17b2ContactListener_state2"))
		mstate.esp += 12
		f0 =  ((__xasm<Number>(push((i10+12)), op(0x38))))
		__asm(push(f0), push((mstate.ebp+-56)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i10+16)), op(0x38))))
		__asm(push(f0), push((mstate.ebp+-52)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i10+20)), op(0x38))))
		__asm(push(f0), push((mstate.ebp+-48)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i10+24)), op(0x38))))
		__asm(push(f0), push((mstate.ebp+-44)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i10+28)), op(0x38))))
		__asm(push(f0), push((mstate.ebp+-40)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i10+32)), op(0x38))))
		__asm(push(f0), push((mstate.ebp+-36)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i11+12)), op(0x38))))
		__asm(push(f0), push((mstate.ebp+-32)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i11+16)), op(0x38))))
		__asm(push(f0), push((mstate.ebp+-28)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i11+20)), op(0x38))))
		__asm(push(f0), push((mstate.ebp+-24)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i11+24)), op(0x38))))
		__asm(push(f0), push((mstate.ebp+-20)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i11+28)), op(0x38))))
		__asm(push(f0), push((mstate.ebp+-16)), op(0x3d))
		f0 =  ((__xasm<Number>(push((i11+32)), op(0x38))))
		__asm(push(f0), push((mstate.ebp+-12)), op(0x3d))
		i2 =  (1)
		__asm(push(i2), push((mstate.ebp+-8)), op(0x3a))
		__asm(push(i0), push((mstate.ebp+-124)), op(0x3b))
		mstate.esp -= 12
		i2 =  ((mstate.ebp+-160))
		i8 =  ((mstate.ebp+-128))
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i8), push((mstate.esp+4)), op(0x3c))
		__asm(push(i12), push((mstate.esp+8)), op(0x3c))
		state = 3
		mstate.esp -= 4;FSM__Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput.start()
		return
	__asm(lbl("__ZN9b2Contact6UpdateEP17b2ContactListener_state3"))
		f0 =  (1.19209e-06)
		mstate.esp += 12
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push((mstate.ebp+-144)), op(0x38))))
		f0 =  f0/*fextend*/
		i2 =  ((f1<f0) ? 1 : 0)
		__asm(push(i0), push((i1+132)), op(0x3c))
		i0 =  ((__xasm<int>(push(i6), op(0x37))))
		i2 =  (i2 & 1)
		__asm(push(f1<f0), iftrue, target("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_9_F"))
	__asm(lbl("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_6_F"))
		__asm(jump, target("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_7_F"))
	__asm(jump, target("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_7_F"), lbl("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_7_B"), label, lbl("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_7_F")); 
		i0 =  (i0 & -3)
		__asm(push(i0), push(i6), op(0x3c))
		i0 =  (i3 & 255)
		__asm(push(i0==0), iftrue, target("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_34_F"))
		__asm(jump, target("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_8_F"))
	__asm(lbl("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_8_F"))
		__asm(jump, target("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_39_F"))
	__asm(lbl("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_9_F"))
		__asm(jump, target("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_31_F"))
	__asm(lbl("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_10_F"))
		i4 =  ((__xasm<int>(push(i1), op(0x37))))
		i4 =  ((__xasm<int>(push(i4), op(0x37))))
		mstate.esp -= 16
		i9 =  (i11 + 12)
		i12 =  (i10 + 12)
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i2), push((mstate.esp+4)), op(0x3c))
		__asm(push(i12), push((mstate.esp+8)), op(0x3c))
		__asm(push(i9), push((mstate.esp+12)), op(0x3c))
		state = 4
		mstate.esp -= 4;(mstate.funcs[i4])()
		return
	__asm(lbl("__ZN9b2Contact6UpdateEP17b2ContactListener_state4"))
		mstate.esp += 16
		i2 =  ((__xasm<int>(push((i1+132)), op(0x37))))
		i4 =  ((i2>0) ? 1 : 0)
		i4 =  (i4 & 1)
		__asm(push(i2<1), iftrue, target("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_23_F"))
	__asm(lbl("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_11_F"))
		i9 =  ((__xasm<int>(push((mstate.ebp+-172)), op(0x37))))
		__asm(push(i9>0), iftrue, target("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_15_F"))
	__asm(lbl("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_12_F"))
		i0 =  (0)
		__asm(jump, target("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_13_F"))
	__asm(jump, target("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_13_F"), lbl("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_13_B"), label, lbl("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_13_F")); 
		i9 =  (0)
		__asm(push(i9), push((i8+72)), op(0x3c))
		__asm(push(i9), push((i8+76)), op(0x3c))
		i8 =  (i8 + 24)
		i0 =  (i0 + 1)
		__asm(push(i2<=i0), iftrue, target("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_23_F"))
		__asm(jump, target("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_14_F"))
	__asm(lbl("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_14_F"))
		__asm(jump, target("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_13_B"))
	__asm(lbl("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_15_F"))
		i12 =  (0)
	__asm(jump, target("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_16_F"), lbl("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_16_B"), label, lbl("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_16_F")); 
		i13 =  (0)
		__asm(push(i13), push((i8+72)), op(0x3c))
		__asm(push(i13), push((i8+76)), op(0x3c))
		i14 =  ((__xasm<int>(push((i8+80)), op(0x37))))
		i15 =  (i0 + 16)
		i16 =  (i8 + 76)
		i17 =  (i8 + 72)
		__asm(jump, target("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_21_F"))
	__asm(lbl("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_17_B"), label)
		f0 =  (0)
		i13 =  (0)
		__asm(push(i13), push(i17), op(0x3c))
		f0 =  f0/*fround*/
		__asm(jump, target("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_18_F"))
	__asm(jump, target("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_18_F"), lbl("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_18_B"), label, lbl("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_18_F")); 
		__asm(push(f0), push(i16), op(0x3d))
		i8 =  (i8 + 24)
		i12 =  (i12 + 1)
		__asm(push(i2<=i12), iftrue, target("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_23_F"))
	__asm(lbl("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_19_F"))
		__asm(jump, target("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_16_B"))
	__asm(lbl("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_20_B"), label)
		i15 =  (i15 + 24)
		i13 =  (i13 + 1)
		__asm(push(i9<=i13), iftrue, target("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_17_B"))
	__asm(lbl("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_21_F"))
		i18 =  ((__xasm<int>(push(i15), op(0x37))))
		__asm(push(i18!=i14), iftrue, target("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_20_B"))
	__asm(lbl("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_22_F"))
		i14 =  ((mstate.ebp+-240))
		i13 =  (i13 * 24)
		i13 =  (i14 + i13)
		f0 =  ((__xasm<Number>(push((i13+8)), op(0x38))))
		__asm(push(f0), push(i17), op(0x3d))
		f0 =  ((__xasm<Number>(push((i13+12)), op(0x38))))
		__asm(jump, target("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_18_B"))
	__asm(lbl("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_23_F"))
		i0 =  (i3 & 255)
		i8 =  (i4 & 255)
		__asm(push(i8==i0), iftrue, target("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_28_F"))
	__asm(lbl("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_24_F"))
		i0 =  ((__xasm<int>(push((i10+4)), op(0x36))))
		i8 =  (i10 + 4)
		i9 =  (i0 & 2)
		__asm(push(i9!=0), iftrue, target("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_26_F"))
	__asm(lbl("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_25_F"))
		i9 =  (0)
		i0 =  (i0 | 2)
		__asm(push(i0), push(i8), op(0x3b))
		__asm(push(i9), push((i10+148)), op(0x3c))
	__asm(lbl("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_26_F"))
		i0 =  ((__xasm<int>(push((i11+4)), op(0x36))))
		i8 =  (i11 + 4)
		i9 =  (i0 & 2)
		__asm(push(i9!=0), iftrue, target("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_28_F"))
	__asm(lbl("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_27_F"))
		i9 =  (0)
		i0 =  (i0 | 2)
		__asm(push(i0), push(i8), op(0x3b))
		__asm(push(i9), push((i11+148)), op(0x3c))
	__asm(lbl("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_28_F"))
		i0 =  ((__xasm<int>(push(i6), op(0x37))))
		__asm(push(i2>0), iftrue, target("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_30_F"))
	__asm(lbl("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_29_F"))
		i2 = i4
		__asm(jump, target("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_7_B"))
	__asm(lbl("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_30_F"))
		i2 = i4
	__asm(lbl("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_31_F"))
		i0 =  (i0 | 2)
		__asm(push(i0), push(i6), op(0x3c))
		i0 =  (i3 & 255)
		__asm(push(i0==0), iftrue, target("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_33_F"))
	__asm(lbl("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_32_F"))
		__asm(jump, target("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_39_F"))
	__asm(lbl("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_33_F"))
		__asm(jump, target("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_34_F"))
	__asm(lbl("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_34_F"))
		i0 =  (i2 & 255)
		__asm(push(i0!=1), iftrue, target("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_37_F"))
	__asm(lbl("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_35_F"))
		__asm(push(i7==0), iftrue, target("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_37_F"))
	__asm(lbl("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_36_F"))
		i0 =  ((__xasm<int>(push(i7), op(0x37))))
		i0 =  ((__xasm<int>(push((i0+8)), op(0x37))))
		mstate.esp -= 8
		__asm(push(i7), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 5
		mstate.esp -= 4;(mstate.funcs[i0])()
		return
	__asm(lbl("__ZN9b2Contact6UpdateEP17b2ContactListener_state5"))
		mstate.esp += 8
	__asm(lbl("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_37_F"))
		i0 =  (i3 & 255)
		__asm(push(i0==0), iftrue, target("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_48_F"))
	__asm(lbl("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_38_F"))
		__asm(jump, target("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_39_F"))
	__asm(lbl("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_39_F"))
		i0 =  (i2 & 255)
		__asm(push(i0!=0), iftrue, target("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_41_F"))
	__asm(lbl("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_40_F"))
		__asm(push(i7!=0), iftrue, target("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_42_F"))
	__asm(lbl("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_41_F"))
		__asm(jump, target("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_43_F"))
	__asm(lbl("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_42_F"))
		i0 =  ((__xasm<int>(push(i7), op(0x37))))
		i0 =  ((__xasm<int>(push((i0+12)), op(0x37))))
		mstate.esp -= 8
		__asm(push(i7), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 6
		mstate.esp -= 4;(mstate.funcs[i0])()
		return
	__asm(lbl("__ZN9b2Contact6UpdateEP17b2ContactListener_state6"))
		mstate.esp += 8
	__asm(jump, target("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_43_F"), lbl("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_43_B"), label, lbl("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_43_F")); 
		i0 = i2
		i2 =  (i5 & 255)
		__asm(push(i2!=0), iftrue, target("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_47_F"))
	__asm(lbl("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_44_F"))
		__asm(push(i7==0), iftrue, target("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_47_F"))
	__asm(lbl("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_45_F"))
		i0 =  (i0 & 255)
		__asm(push(i0==0), iftrue, target("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_47_F"))
	__asm(lbl("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_46_F"))
		i0 =  ((mstate.ebp+-240))
		i2 =  ((__xasm<int>(push(i7), op(0x37))))
		i2 =  ((__xasm<int>(push((i2+16)), op(0x37))))
		mstate.esp -= 12
		__asm(push(i7), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i0), push((mstate.esp+8)), op(0x3c))
		state = 7
		mstate.esp -= 4;(mstate.funcs[i2])()
		return
	__asm(lbl("__ZN9b2Contact6UpdateEP17b2ContactListener_state7"))
		mstate.esp += 12
	__asm(lbl("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_47_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_48_F"))
		__asm(jump, target("__ZN9b2Contact6UpdateEP17b2ContactListener__XprivateX__BB437_43_B"))
	__asm(lbl("__ZN9b2Contact6UpdateEP17b2ContactListener_errState"))
		throw("Invalid state in __ZN9b2Contact6UpdateEP17b2ContactListener")
	}
}



// Async
public const __ZN24b2PositionSolverManifold10InitializeEP19b2ContactConstrainti:int = regFunc(FSM__ZN24b2PositionSolverManifold10InitializeEP19b2ContactConstrainti.start)

public final class FSM__ZN24b2PositionSolverManifold10InitializeEP19b2ContactConstrainti extends Machine {

	public static function start():void {
			var result:FSM__ZN24b2PositionSolverManifold10InitializeEP19b2ContactConstrainti = new FSM__ZN24b2PositionSolverManifold10InitializeEP19b2ContactConstrainti
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int

	public static const intRegCount:int = 6
	public var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number
	public var f8:Number, f9:Number, f10:Number, f11:Number, f12:Number, f13:Number, f14:Number, f15:Number

	public static const NumberRegCount:int = 16
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN24b2PositionSolverManifold10InitializeEP19b2ContactConstrainti_entry"))
		__asm(push(state), switchjump(
			"__ZN24b2PositionSolverManifold10InitializeEP19b2ContactConstrainti_errState",
			"__ZN24b2PositionSolverManifold10InitializeEP19b2ContactConstrainti_state0",
			"__ZN24b2PositionSolverManifold10InitializeEP19b2ContactConstrainti_state1",
			"__ZN24b2PositionSolverManifold10InitializeEP19b2ContactConstrainti_state2"))
	__asm(lbl("__ZN24b2PositionSolverManifold10InitializeEP19b2ContactConstrainti_state0"))
	__asm(lbl("__ZN24b2PositionSolverManifold10InitializeEP19b2ContactConstrainti__XprivateX__BB438_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i3 =  ((__xasm<int>(push((i1+172)), op(0x37))))
		__asm(push(i3>0), iftrue, target("__ZN24b2PositionSolverManifold10InitializeEP19b2ContactConstrainti__XprivateX__BB438_2_F"))
	__asm(lbl("__ZN24b2PositionSolverManifold10InitializeEP19b2ContactConstrainti__XprivateX__BB438_1_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str149)
		i3 =  (__ZZN16b2PulleyJointDef10InitializeEP6b2BodyS1_RK6b2Vec2S4_S4_S4_fE8__func__)
		i4 =  (__2E_str60267)
		i5 =  (583)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__ZN24b2PositionSolverManifold10InitializeEP19b2ContactConstrainti_state1"))
		mstate.esp += 24
		state = 2
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZN24b2PositionSolverManifold10InitializeEP19b2ContactConstrainti_state2"))
	__asm(lbl("__ZN24b2PositionSolverManifold10InitializeEP19b2ContactConstrainti__XprivateX__BB438_2_F"))
		i3 =  ((__xasm<int>(push((i1+152)), op(0x37))))
		__asm(push(i3==2), iftrue, target("__ZN24b2PositionSolverManifold10InitializeEP19b2ContactConstrainti__XprivateX__BB438_11_F"))
	__asm(lbl("__ZN24b2PositionSolverManifold10InitializeEP19b2ContactConstrainti__XprivateX__BB438_3_F"))
		__asm(push(i3==1), iftrue, target("__ZN24b2PositionSolverManifold10InitializeEP19b2ContactConstrainti__XprivateX__BB438_10_F"))
	__asm(lbl("__ZN24b2PositionSolverManifold10InitializeEP19b2ContactConstrainti__XprivateX__BB438_4_F"))
		__asm(push(i3!=0), iftrue, target("__ZN24b2PositionSolverManifold10InitializeEP19b2ContactConstrainti__XprivateX__BB438_12_F"))
	__asm(lbl("__ZN24b2PositionSolverManifold10InitializeEP19b2ContactConstrainti__XprivateX__BB438_5_F"))
		f0 =  (1.42109e-14)
		i2 =  ((__xasm<int>(push((i1+144)), op(0x37))))
		i3 =  ((__xasm<int>(push((i1+148)), op(0x37))))
		f1 =  ((__xasm<Number>(push((i2+20)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i1+96)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i2+24)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i3+20)), op(0x38))))
		f5 =  ((__xasm<Number>(push(i1), op(0x38))))
		f6 =  ((__xasm<Number>(push((i3+24)), op(0x38))))
		f3 =  (f3 * f2)
		f1 =  (f1 * f2)
		f2 =  (f6 * f5)
		f4 =  (f4 * f5)
		f3 =  f3/*fround*/
		f1 =  f1/*fround*/
		f2 =  f2/*fround*/
		f4 =  f4/*fround*/
		f5 =  ((__xasm<Number>(push((i2+12)), op(0x38))))
		f1 =  f1/*fextend*/
		f6 =  ((__xasm<Number>(push((i2+28)), op(0x38))))
		f7 =  ((__xasm<Number>(push((i1+100)), op(0x38))))
		f8 =  ((__xasm<Number>(push((i2+32)), op(0x38))))
		f9 =  ((__xasm<Number>(push((i2+16)), op(0x38))))
		f3 =  f3/*fextend*/
		f10 =  ((__xasm<Number>(push((i3+12)), op(0x38))))
		f4 =  f4/*fextend*/
		f11 =  ((__xasm<Number>(push((i3+28)), op(0x38))))
		f12 =  ((__xasm<Number>(push((i1+4)), op(0x38))))
		f13 =  ((__xasm<Number>(push((i3+32)), op(0x38))))
		f14 =  ((__xasm<Number>(push((i3+16)), op(0x38))))
		f2 =  f2/*fextend*/
		f1 =  (f5 + f1)
		f5 =  (f8 * f7)
		f3 =  (f9 + f3)
		f6 =  (f6 * f7)
		f4 =  (f10 + f4)
		f7 =  (f13 * f12)
		f2 =  (f14 + f2)
		f8 =  (f11 * f12)
		f1 =  f1/*fround*/
		f5 =  f5/*fround*/
		f3 =  f3/*fround*/
		f6 =  f6/*fround*/
		f4 =  f4/*fround*/
		f7 =  f7/*fround*/
		f2 =  f2/*fround*/
		f8 =  f8/*fround*/
		f6 =  f6/*fextend*/
		f1 =  f1/*fextend*/
		f5 =  f5/*fextend*/
		f3 =  f3/*fextend*/
		f8 =  f8/*fextend*/
		f4 =  f4/*fextend*/
		f7 =  f7/*fextend*/
		f2 =  f2/*fextend*/
		f1 =  (f1 + f6)
		f3 =  (f3 + f5)
		f4 =  (f4 + f8)
		f2 =  (f2 + f7)
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		f4 =  f4/*fround*/
		f2 =  f2/*fround*/
		f5 =  f4/*fextend*/
		f6 =  f1/*fextend*/
		f7 =  f2/*fextend*/
		f8 =  f3/*fextend*/
		f5 =  (f6 - f5)
		f6 =  (f8 - f7)
		f5 =  f5/*fround*/
		f6 =  f6/*fround*/
		f5 =  f5/*fextend*/
		f6 =  f6/*fextend*/
		f5 =  (f5 * f5)
		f6 =  (f6 * f6)
		f5 =  f5/*fround*/
		f6 =  f6/*fround*/
		f6 =  f6/*fextend*/
		f5 =  f5/*fextend*/
		f5 =  (f5 + f6)
		f5 =  f5/*fround*/
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f5 =  f5/*fextend*/
		__asm(push(f5<=f0), iftrue, target("__ZN24b2PositionSolverManifold10InitializeEP19b2ContactConstrainti__XprivateX__BB438_8_F"))
	__asm(lbl("__ZN24b2PositionSolverManifold10InitializeEP19b2ContactConstrainti__XprivateX__BB438_6_F"))
		f0 =  (1.19209e-07)
		f5 =  f3/*fextend*/
		f6 =  f2/*fextend*/
		f7 =  f1/*fextend*/
		f8 =  f4/*fextend*/
		f5 =  (f6 - f5)
		f6 =  (f8 - f7)
		f5 =  f5/*fround*/
		f6 =  f6/*fround*/
		f7 =  f5/*fextend*/
		f8 =  f6/*fextend*/
		f7 =  (f7 * f7)
		f8 =  (f8 * f8)
		f7 =  f7/*fround*/
		f8 =  f8/*fround*/
		f7 =  f7/*fextend*/
		f8 =  f8/*fextend*/
		f7 =  (f8 + f7)
		f7 =  f7/*fround*/
		f7 =  f7/*fextend*/
		__asm(push(f6), push(i0), op(0x3d))
		f7 =  Math.sqrt(f7)
		__asm(push(f5), push((i0+4)), op(0x3d))
		f7 =  f7/*fround*/
		i2 =  (i0 + 4)
		f0 =  f0/*fround*/
		i3 = i0
		f0 =  f0/*fextend*/
		f8 =  f7/*fextend*/
		__asm(push(f8<f0), iftrue, target("__ZN24b2PositionSolverManifold10InitializeEP19b2ContactConstrainti__XprivateX__BB438_9_F"))
	__asm(lbl("__ZN24b2PositionSolverManifold10InitializeEP19b2ContactConstrainti__XprivateX__BB438_7_F"))
		f0 =  (1)
		f0 =  f0/*fround*/
		f7 =  f7/*fextend*/
		f0 =  f0/*fextend*/
		f0 =  (f0 / f7)
		f0 =  f0/*fround*/
		f6 =  f6/*fextend*/
		f0 =  f0/*fextend*/
		f6 =  (f6 * f0)
		f5 =  f5/*fextend*/
		f0 =  (f5 * f0)
		f5 =  f6/*fround*/
		__asm(push(f5), push(i3), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push(i2), op(0x3d))
		__asm(jump, target("__ZN24b2PositionSolverManifold10InitializeEP19b2ContactConstrainti__XprivateX__BB438_9_F"))
	__asm(lbl("__ZN24b2PositionSolverManifold10InitializeEP19b2ContactConstrainti__XprivateX__BB438_8_F"))
		i2 =  (1065353216)
		__asm(push(i2), push(i0), op(0x3c))
		i2 =  (0)
		__asm(push(i2), push((i0+4)), op(0x3c))
	__asm(lbl("__ZN24b2PositionSolverManifold10InitializeEP19b2ContactConstrainti__XprivateX__BB438_9_F"))
		f0 =  (0.5)
		f1 =  f1/*fextend*/
		f4 =  f4/*fextend*/
		f5 =  (f1 + f4)
		f3 =  f3/*fextend*/
		f2 =  f2/*fextend*/
		f6 =  (f3 + f2)
		f5 =  f5/*fround*/
		f0 =  f0/*fround*/
		f6 =  f6/*fround*/
		f0 =  f0/*fextend*/
		f5 =  f5/*fextend*/
		f6 =  f6/*fextend*/
		f5 =  (f5 * f0)
		f0 =  (f6 * f0)
		f5 =  f5/*fround*/
		f2 =  (f2 - f3)
		f1 =  (f4 - f1)
		__asm(push(f5), push((i0+8)), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push((i0+12)), op(0x3d))
		f0 =  f2/*fround*/
		f1 =  f1/*fround*/
		f2 =  ((__xasm<Number>(push(i0), op(0x38))))
		f1 =  f1/*fextend*/
		f3 =  ((__xasm<Number>(push((i0+4)), op(0x38))))
		f0 =  f0/*fextend*/
		f1 =  (f1 * f2)
		f0 =  (f0 * f3)
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  (f1 + f0)
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push((i1+156)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f0 - f1)
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push((i1+160)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f0 - f1)
		f0 =  f0/*fround*/
		__asm(push(f0), push((i0+16)), op(0x3d))
		__asm(jump, target("__ZN24b2PositionSolverManifold10InitializeEP19b2ContactConstrainti__XprivateX__BB438_12_F"))
	__asm(lbl("__ZN24b2PositionSolverManifold10InitializeEP19b2ContactConstrainti__XprivateX__BB438_10_F"))
		i3 =  ((__xasm<int>(push((i1+144)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i1+88)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i3+20)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i1+92)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i3+28)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i3+24)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i3+32)), op(0x38))))
		f1 =  (f1 * f0)
		f3 =  (f3 * f2)
		f1 =  f1/*fround*/
		f2 =  (f5 * f2)
		f3 =  f3/*fround*/
		f0 =  (f4 * f0)
		f2 =  f2/*fround*/
		f0 =  f0/*fround*/
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f1 =  (f1 + f3)
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f1 =  f1/*fround*/
		f0 =  (f0 + f2)
		f0 =  f0/*fround*/
		__asm(push(f1), push(i0), op(0x3d))
		__asm(push(f0), push((i0+4)), op(0x3d))
		i2 =  (i2 * 44)
		i3 =  ((__xasm<int>(push((i1+144)), op(0x37))))
		i4 =  ((__xasm<int>(push((i1+148)), op(0x37))))
		i2 =  (i1 + i2)
		f2 =  ((__xasm<Number>(push((i3+20)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i1+96)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i3+24)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i4+20)), op(0x38))))
		f6 =  ((__xasm<Number>(push(i2), op(0x38))))
		f7 =  ((__xasm<Number>(push((i4+24)), op(0x38))))
		f4 =  (f4 * f3)
		f2 =  (f2 * f3)
		f3 =  (f7 * f6)
		f5 =  (f5 * f6)
		f4 =  f4/*fround*/
		f2 =  f2/*fround*/
		f3 =  f3/*fround*/
		f5 =  f5/*fround*/
		f6 =  ((__xasm<Number>(push((i3+12)), op(0x38))))
		f2 =  f2/*fextend*/
		f7 =  ((__xasm<Number>(push((i3+28)), op(0x38))))
		f8 =  ((__xasm<Number>(push((i1+100)), op(0x38))))
		f9 =  ((__xasm<Number>(push((i3+32)), op(0x38))))
		f10 =  ((__xasm<Number>(push((i3+16)), op(0x38))))
		f4 =  f4/*fextend*/
		f11 =  ((__xasm<Number>(push((i4+12)), op(0x38))))
		f5 =  f5/*fextend*/
		f12 =  ((__xasm<Number>(push((i4+28)), op(0x38))))
		f13 =  ((__xasm<Number>(push((i2+4)), op(0x38))))
		f14 =  ((__xasm<Number>(push((i4+32)), op(0x38))))
		f15 =  ((__xasm<Number>(push((i4+16)), op(0x38))))
		f3 =  f3/*fextend*/
		f2 =  (f6 + f2)
		f6 =  (f9 * f8)
		f4 =  (f10 + f4)
		f7 =  (f7 * f8)
		f5 =  (f11 + f5)
		f8 =  (f14 * f13)
		f3 =  (f15 + f3)
		f9 =  (f12 * f13)
		f2 =  f2/*fround*/
		f6 =  f6/*fround*/
		f4 =  f4/*fround*/
		f7 =  f7/*fround*/
		f5 =  f5/*fround*/
		f8 =  f8/*fround*/
		f3 =  f3/*fround*/
		f9 =  f9/*fround*/
		f7 =  f7/*fextend*/
		f2 =  f2/*fextend*/
		f6 =  f6/*fextend*/
		f4 =  f4/*fextend*/
		f9 =  f9/*fextend*/
		f5 =  f5/*fextend*/
		f8 =  f8/*fextend*/
		f3 =  f3/*fextend*/
		f2 =  (f2 + f7)
		f4 =  (f4 + f6)
		f5 =  (f5 + f9)
		f3 =  (f3 + f8)
		f2 =  f2/*fround*/
		f4 =  f4/*fround*/
		f5 =  f5/*fround*/
		f3 =  f3/*fround*/
		f2 =  f2/*fextend*/
		f6 =  f5/*fextend*/
		f4 =  f4/*fextend*/
		f7 =  f3/*fextend*/
		f2 =  (f6 - f2)
		f4 =  (f7 - f4)
		f2 =  f2/*fround*/
		f4 =  f4/*fround*/
		f1 =  f1/*fextend*/
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f4 =  f4/*fextend*/
		f1 =  (f2 * f1)
		f0 =  (f4 * f0)
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f1 =  f1/*fextend*/
		f0 =  (f1 + f0)
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push((i1+156)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f0 - f1)
		f0 =  f0/*fround*/
		f1 =  ((__xasm<Number>(push((i1+160)), op(0x38))))
		f0 =  f0/*fextend*/
		f0 =  (f0 - f1)
		f0 =  f0/*fround*/
		__asm(push(f0), push((i0+16)), op(0x3d))
		__asm(push(f5), push((i0+8)), op(0x3d))
		__asm(push(f3), push((i0+12)), op(0x3d))
		__asm(jump, target("__ZN24b2PositionSolverManifold10InitializeEP19b2ContactConstrainti__XprivateX__BB438_12_F"))
	__asm(lbl("__ZN24b2PositionSolverManifold10InitializeEP19b2ContactConstrainti__XprivateX__BB438_11_F"))
		i3 =  ((__xasm<int>(push((i1+148)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i1+88)), op(0x38))))
		f1 =  ((__xasm<Number>(push((i3+20)), op(0x38))))
		f2 =  ((__xasm<Number>(push((i1+92)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i3+28)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i3+24)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i3+32)), op(0x38))))
		f1 =  (f1 * f0)
		f3 =  (f3 * f2)
		f1 =  f1/*fround*/
		f2 =  (f5 * f2)
		f3 =  f3/*fround*/
		f0 =  (f4 * f0)
		f2 =  f2/*fround*/
		f0 =  f0/*fround*/
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f1 =  (f1 + f3)
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f1 =  f1/*fround*/
		f0 =  (f0 + f2)
		f0 =  f0/*fround*/
		__asm(push(f1), push(i0), op(0x3d))
		__asm(push(f0), push((i0+4)), op(0x3d))
		i2 =  (i2 * 44)
		i3 =  ((__xasm<int>(push((i1+148)), op(0x37))))
		i4 =  ((__xasm<int>(push((i1+144)), op(0x37))))
		i2 =  (i1 + i2)
		f2 =  ((__xasm<Number>(push((i3+20)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i1+96)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i3+24)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i4+20)), op(0x38))))
		f6 =  ((__xasm<Number>(push(i2), op(0x38))))
		f7 =  ((__xasm<Number>(push((i4+24)), op(0x38))))
		f4 =  (f4 * f3)
		f2 =  (f2 * f3)
		f3 =  (f7 * f6)
		f5 =  (f5 * f6)
		f4 =  f4/*fround*/
		f2 =  f2/*fround*/
		f3 =  f3/*fround*/
		f5 =  f5/*fround*/
		f6 =  ((__xasm<Number>(push((i3+12)), op(0x38))))
		f2 =  f2/*fextend*/
		f7 =  ((__xasm<Number>(push((i3+28)), op(0x38))))
		f8 =  ((__xasm<Number>(push((i1+100)), op(0x38))))
		f9 =  ((__xasm<Number>(push((i3+32)), op(0x38))))
		f10 =  ((__xasm<Number>(push((i3+16)), op(0x38))))
		f4 =  f4/*fextend*/
		f11 =  ((__xasm<Number>(push((i4+12)), op(0x38))))
		f5 =  f5/*fextend*/
		f12 =  ((__xasm<Number>(push((i4+28)), op(0x38))))
		f13 =  ((__xasm<Number>(push((i2+4)), op(0x38))))
		f14 =  ((__xasm<Number>(push((i4+32)), op(0x38))))
		f15 =  ((__xasm<Number>(push((i4+16)), op(0x38))))
		f3 =  f3/*fextend*/
		f2 =  (f6 + f2)
		f6 =  (f9 * f8)
		f4 =  (f10 + f4)
		f7 =  (f7 * f8)
		f5 =  (f11 + f5)
		f8 =  (f14 * f13)
		f3 =  (f15 + f3)
		f9 =  (f12 * f13)
		f2 =  f2/*fround*/
		f6 =  f6/*fround*/
		f4 =  f4/*fround*/
		f7 =  f7/*fround*/
		f5 =  f5/*fround*/
		f8 =  f8/*fround*/
		f3 =  f3/*fround*/
		f9 =  f9/*fround*/
		f7 =  f7/*fextend*/
		f2 =  f2/*fextend*/
		f6 =  f6/*fextend*/
		f4 =  f4/*fextend*/
		f9 =  f9/*fextend*/
		f5 =  f5/*fextend*/
		f8 =  f8/*fextend*/
		f3 =  f3/*fextend*/
		f2 =  (f2 + f7)
		f4 =  (f4 + f6)
		f5 =  (f5 + f9)
		f3 =  (f3 + f8)
		f2 =  f2/*fround*/
		f4 =  f4/*fround*/
		f5 =  f5/*fround*/
		f3 =  f3/*fround*/
		f2 =  f2/*fextend*/
		f6 =  f5/*fextend*/
		f4 =  f4/*fextend*/
		f7 =  f3/*fextend*/
		f2 =  (f6 - f2)
		f4 =  (f7 - f4)
		f2 =  f2/*fround*/
		f4 =  f4/*fround*/
		f1 =  f1/*fextend*/
		f2 =  f2/*fextend*/
		f0 =  f0/*fextend*/
		f4 =  f4/*fextend*/
		f2 =  (f2 * f1)
		f4 =  (f4 * f0)
		f2 =  f2/*fround*/
		f4 =  f4/*fround*/
		f4 =  f4/*fextend*/
		f2 =  f2/*fextend*/
		f2 =  (f2 + f4)
		f2 =  f2/*fround*/
		f4 =  ((__xasm<Number>(push((i1+156)), op(0x38))))
		f2 =  f2/*fextend*/
		f2 =  (f2 - f4)
		f2 =  f2/*fround*/
		f4 =  ((__xasm<Number>(push((i1+160)), op(0x38))))
		f2 =  f2/*fextend*/
		f2 =  (f2 - f4)
		f2 =  f2/*fround*/
		__asm(push(f2), push((i0+16)), op(0x3d))
		__asm(push(f5), push((i0+8)), op(0x3d))
		f1 =  -f1
		f0 =  -f0
		__asm(push(f3), push((i0+12)), op(0x3d))
		f1 =  f1/*fround*/
		__asm(push(f1), push(i0), op(0x3d))
		f0 =  f0/*fround*/
		__asm(push(f0), push((i0+4)), op(0x3d))
	__asm(lbl("__ZN24b2PositionSolverManifold10InitializeEP19b2ContactConstrainti__XprivateX__BB438_12_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN24b2PositionSolverManifold10InitializeEP19b2ContactConstrainti_errState"))
		throw("Invalid state in __ZN24b2PositionSolverManifold10InitializeEP19b2ContactConstrainti")
	}
}



// Async
public const __Z18TriangulatePolygonPfS_iP10b2Triangle:int = regFunc(FSM__Z18TriangulatePolygonPfS_iP10b2Triangle.start)

public final class FSM__Z18TriangulatePolygonPfS_iP10b2Triangle extends Machine {

	public static function start():void {
			var result:FSM__Z18TriangulatePolygonPfS_iP10b2Triangle = new FSM__Z18TriangulatePolygonPfS_iP10b2Triangle
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
	public var i8:int, i9:int, i10:int, i11:int, i12:int, i13:int, i14:int, i15:int
	public var i16:int, i17:int, i18:int, i19:int, i20:int, i21:int, i22:int, i23:int
	public var i24:int, i25:int, i26:int, i27:int, i28:int, i29:int, i30:int, i31:int
	public static const intRegCount:int = 32
	public var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number
	public var f8:Number, f9:Number, f10:Number, f11:Number, f12:Number, f13:Number, f14:Number

	public static const NumberRegCount:int = 15
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_entry"))
		__asm(push(state), switchjump(
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_errState",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state0",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state1",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state2",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state3",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state4",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state5",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state6",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state7",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state8",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state9",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state10",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state11",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state12",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state13",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state14",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state15",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state16",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state17",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state18",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state19",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state20",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state21",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state22",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state23",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state24",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state25",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state26",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state27",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state28",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state29",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state30",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state31",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state32",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state33",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state34",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state35",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state36",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state37",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state38",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state39",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state40",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state41",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state42",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state43",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state44",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state45",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state46",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state47",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state48",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state49",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state50",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state51",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state52",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state53",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state54",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state55",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state56",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state57",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state58",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state59",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state60",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state61",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state62",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state63",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state64",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state65",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state66",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state67",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state68",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state69",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state70",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state71",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state72",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state73",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state74",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state75",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state76",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state77",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state78",
			"__Z18TriangulatePolygonPfS_iP10b2Triangle_state79"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state0"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 156
		i0 =  ((__xasm<int>(push((mstate.ebp+16)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i2 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i3 =  ((__xasm<int>(push((mstate.ebp+20)), op(0x37))))
		__asm(push(i3), push((mstate.ebp+-99)), op(0x3c))
		__asm(push(i0>2), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_2_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_1_F"))
		i0 =  (0)
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_355_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_2_F"))
		mstate.esp -= 4
		i3 =  (i0 << 2)
		__asm(push(i3), push(mstate.esp), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state1"))
		i4 = mstate.eax
		__asm(push(i4), push((mstate.ebp+-81)), op(0x3c))
		mstate.esp += 4
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_3_F"))
		mstate.esp -= 4
		__asm(push(i3), push(mstate.esp), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state2"))
		i4 = mstate.eax
		__asm(push(i4), push((mstate.ebp+-9)), op(0x3c))
		mstate.esp += 4
		i4 =  ((__xasm<int>(push((mstate.ebp+-81)), op(0x37))))
		i5 = i4
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_4_F"))
		i6 =  ((__xasm<int>(push((mstate.ebp+-9)), op(0x37))))
		i7 = i6
		__asm(push(i0<1), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_8_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_5_F"))
		i8 =  (0)
		i9 = i8
	__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_6_F"), lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_6_B"), label, lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_6_F")); 
		i10 =  (i1 + i9)
		f0 =  ((__xasm<Number>(push(i10), op(0x38))))
		i10 =  (i4 + i9)
		__asm(push(f0), push(i10), op(0x3d))
		i10 =  (i2 + i9)
		f0 =  ((__xasm<Number>(push(i10), op(0x38))))
		i10 =  (i6 + i9)
		__asm(push(f0), push(i10), op(0x3d))
		i9 =  (i9 + 4)
		i8 =  (i8 + 1)
		__asm(push(i8>=i0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_8_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_7_F"))
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_6_B"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_8_F"))
		__asm(push(i0<3), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_10_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_9_F"))
		i8 =  (-1)
		i9 =  (0)
		i10 = i9
		i11 = i9
		i12 = i8
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_21_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_10_B"), label, lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_10_F")); 
		i4 =  (0)
		i5 = i4
		i6 = i4
		i7 = i6
		i8 = i6
		i9 = i5
		i10 = i6
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_97_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_11_B"), label)
		f0 =  (0)
		i18 =  (i4 + i8)
		f1 =  ((__xasm<Number>(push(i14), op(0x38))))
		f2 =  ((__xasm<Number>(push(i18), op(0x38))))
		f3 =  (f1 - f2)
		f1 =  (f2 - f1)
		f2 =  f3/*fround*/
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		f1 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		f2 =  f2/*fextend*/
		f0 =  ((f2<=f0) ? f1 : f2)
		f1 =  (0.001)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f1 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		__asm(push(f0<f1), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_15_F"))
	__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_12_F"), lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_12_B"), label, lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_12_F")); 
		i8 =  (i8 + 4)
		i9 =  (i9 + 1)
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_13_F"))
	__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_13_F"), lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_13_B"), label, lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_13_F")); 
		__asm(push(i9<i0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_11_B"))
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_14_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_14_F"))
		i9 = i12
		i10 = i15
		i8 = i16
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_18_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_15_F"))
		f0 =  (0)
		i18 =  (i6 + i8)
		f1 =  ((__xasm<Number>(push(i10), op(0x38))))
		f2 =  ((__xasm<Number>(push(i18), op(0x38))))
		f3 =  (f1 - f2)
		f1 =  (f2 - f1)
		f2 =  f3/*fround*/
		f1 =  f1/*fround*/
		f0 =  f0/*fround*/
		f1 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		f2 =  f2/*fextend*/
		f0 =  ((f2<=f0) ? f1 : f2)
		f1 =  (0.001)
		f0 =  f0/*fround*/
		f1 =  f1/*fround*/
		f1 =  f1/*fextend*/
		f0 =  f0/*fextend*/
		__asm(push(f0>=f1), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_12_B"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_16_F"))
		__asm(push(i17==i9), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_12_B"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_17_F"))
		i8 =  (1)
		i10 = i13
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_18_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_18_F"))
		i12 = i9
		i14 = i8
		i8 =  (i11 + 4)
		i9 =  (i13 + 1)
		i11 =  (i14 & 255)
		__asm(push(i11==0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_20_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_19_F"))
		i8 = i12
		i9 = i10
		i10 = i14
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_23_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_20_F"))
		i11 = i8
		i8 = i10
		i10 = i14
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_21_F"))
		i13 = i9
		i15 = i8
		i16 = i10
		__asm(push(i13<i0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_356_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_22_F"))
		i8 = i12
		i9 = i15
		i10 = i16
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_23_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_23_F"))
		i4 = i8
		i6 = i9
		i8 = i10
		i9 =  (i8 & 255)
		__asm(push(i9!=0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_25_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_24_F"))
		i5 =  (0)
		i11 = i5
		i4 = i8
		i7 = i5
		i8 = i5
		i9 = i11
		i10 = i5
		i6 = i5
		i5 = i11
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_97_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_25_F"))
		i9 =  (i4 - i6)
		__asm(push(i9==i0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_10_B"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_26_F"))
		mstate.esp -= 4
		i10 =  (i9 << 2)
		__asm(push(i10), push(mstate.esp), op(0x3c))
		state = 3
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state3"))
		i11 = mstate.eax
		mstate.esp += 4
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_27_F"))
		mstate.esp -= 4
		__asm(push(i10), push(mstate.esp), op(0x3c))
		state = 4
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state4"))
		i12 = mstate.eax
		mstate.esp += 4
		i13 = i11
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_28_F"))
		i14 = i12
		__asm(push(i9<1), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_37_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_29_F"))
		i15 =  (0)
		i16 = i15
	__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_30_F"), lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_30_B"), label, lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_30_F")); 
		i17 =  (i6 + i15)
		i17 =  (i17 % i0)
		__asm(push(i17<0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_33_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_31_F"))
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_35_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_32_B"), label)
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_33_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_33_F"))
		i17 =  (i0 + i17)
		__asm(push(i17<0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_32_B"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_34_F"))
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_35_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_35_F"))
		i17 =  (i17 << 2)
		i18 =  (i5 + i17)
		f0 =  ((__xasm<Number>(push(i18), op(0x38))))
		i18 =  (i13 + i16)
		__asm(push(f0), push(i18), op(0x3d))
		i17 =  (i7 + i17)
		f0 =  ((__xasm<Number>(push(i17), op(0x38))))
		i17 =  (i14 + i16)
		__asm(push(f0), push(i17), op(0x3d))
		i16 =  (i16 + 4)
		i15 =  (i15 + 1)
		__asm(push(i15==i9), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_37_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_36_F"))
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_30_B"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_37_F"))
		mstate.esp -= 4
		__asm(push(i10), push(mstate.esp), op(0x3c))
		state = 5
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state5"))
		i15 = mstate.eax
		mstate.esp += 4
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_38_F"))
		mstate.esp -= 4
		__asm(push(i10), push(mstate.esp), op(0x3c))
		state = 6
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state6"))
		i16 = mstate.eax
		mstate.esp += 4
		i17 = i15
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_39_F"))
		i18 = i16
		__asm(push(i9<1), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_43_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_40_F"))
		i19 =  (0)
		i20 = i19
	__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_41_F"), lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_41_B"), label, lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_41_F")); 
		i21 =  (i13 + i20)
		f0 =  ((__xasm<Number>(push(i21), op(0x38))))
		i21 =  (i17 + i20)
		__asm(push(f0), push(i21), op(0x3d))
		i21 =  (i14 + i20)
		f0 =  ((__xasm<Number>(push(i21), op(0x38))))
		i21 =  (i18 + i20)
		__asm(push(f0), push(i21), op(0x3d))
		i20 =  (i20 + 4)
		i19 =  (i19 + 1)
		__asm(push(i9<=i19), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_43_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_42_F"))
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_41_B"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_43_F"))
		__asm(push(i4!=i6), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_45_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_44_F"))
		i10 =  (0)
		i13 = i10
		i14 = i13
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_48_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_45_F"))
		mstate.esp -= 4
		__asm(push(i10), push(mstate.esp), op(0x3c))
		state = 7
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state7"))
		i13 = mstate.eax
		mstate.esp += 4
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_46_F"))
		mstate.esp -= 4
		__asm(push(i10), push(mstate.esp), op(0x3c))
		state = 8
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state8"))
		i10 = mstate.eax
		mstate.esp += 4
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_47_F"))
		i14 = i10
		i10 = i9
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_48_F"))
		i19 = i14
		i20 = i13
		__asm(push(i10<1), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_52_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_49_F"))
		i21 =  (0)
		i22 = i21
	__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_50_F"), lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_50_B"), label, lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_50_F")); 
		i23 =  (i17 + i22)
		f0 =  ((__xasm<Number>(push(i23), op(0x38))))
		i23 =  (i20 + i22)
		__asm(push(f0), push(i23), op(0x3d))
		i23 =  (i18 + i22)
		f0 =  ((__xasm<Number>(push(i23), op(0x38))))
		i23 =  (i19 + i22)
		__asm(push(f0), push(i23), op(0x3d))
		i22 =  (i22 + 4)
		i21 =  (i21 + 1)
		__asm(push(i10<=i21), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_52_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_51_F"))
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_50_B"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_52_F"))
		__asm(push(i11==0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_54_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_53_F"))
		i17 =  (0)
		mstate.esp -= 8
		__asm(push(i11), push(mstate.esp), op(0x3c))
		__asm(push(i17), push((mstate.esp+4)), op(0x3c))
		state = 9
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state9"))
		i11 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_54_F"))
		__asm(push(i12==0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_56_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_55_F"))
		i11 =  (0)
		mstate.esp -= 8
		__asm(push(i12), push(mstate.esp), op(0x3c))
		__asm(push(i11), push((mstate.esp+4)), op(0x3c))
		state = 10
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state10"))
		i11 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_56_F"))
		i11 =  (i0 - i9)
		mstate.esp -= 4
		i12 =  (i11 << 2)
		__asm(push(i12), push(mstate.esp), op(0x3c))
		state = 11
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state11"))
		i17 = mstate.eax
		mstate.esp += 4
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_57_F"))
		mstate.esp -= 4
		__asm(push(i12), push(mstate.esp), op(0x3c))
		state = 12
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state12"))
		i18 = mstate.eax
		mstate.esp += 4
		i19 = i17
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_58_F"))
		i20 = i18
		__asm(push(i11<1), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_68_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_59_F"))
		i21 =  (0)
		i6 =  (i6 - i4)
		i6 =  (i6 + i0)
		i22 = i21
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_65_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_60_B"), label)
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_61_F"))
	__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_61_F"), lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_61_B"), label, lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_61_F")); 
		i21 =  (i0 + i21)
		__asm(push(i21<0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_60_B"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_62_F"))
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_63_F"))
	__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_63_F"), lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_63_B"), label, lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_63_F")); 
		i21 =  (i21 << 2)
		i24 =  (i5 + i21)
		f0 =  ((__xasm<Number>(push(i24), op(0x38))))
		i24 =  (i19 + i22)
		__asm(push(f0), push(i24), op(0x3d))
		i21 =  (i7 + i21)
		f0 =  ((__xasm<Number>(push(i21), op(0x38))))
		i21 =  (i20 + i22)
		__asm(push(f0), push(i21), op(0x3d))
		i21 =  (i22 + 4)
		i23 =  (i23 + 1)
		__asm(push(i23==i6), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_68_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_64_F"))
		i22 = i21
		i21 = i23
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_65_F"))
		i23 = i21
		i21 =  (i4 + i23)
		i21 =  (i21 % i0)
		__asm(push(i21<0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_67_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_66_F"))
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_63_B"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_67_F"))
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_61_B"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_68_F"))
		mstate.esp -= 4
		__asm(push(i12), push(mstate.esp), op(0x3c))
		state = 13
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state13"))
		i4 = mstate.eax
		mstate.esp += 4
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_69_F"))
		mstate.esp -= 4
		__asm(push(i12), push(mstate.esp), op(0x3c))
		state = 14
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state14"))
		i5 = mstate.eax
		mstate.esp += 4
		i6 = i4
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_70_F"))
		i7 = i5
		__asm(push(i11<1), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_74_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_71_F"))
		i21 =  (0)
		i22 = i21
	__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_72_F"), lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_72_B"), label, lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_72_F")); 
		i23 =  (i19 + i22)
		f0 =  ((__xasm<Number>(push(i23), op(0x38))))
		i23 =  (i6 + i22)
		__asm(push(f0), push(i23), op(0x3d))
		i23 =  (i20 + i22)
		f0 =  ((__xasm<Number>(push(i23), op(0x38))))
		i23 =  (i7 + i22)
		__asm(push(f0), push(i23), op(0x3d))
		i22 =  (i22 + 4)
		i21 =  (i21 + 1)
		__asm(push(i11<=i21), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_74_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_73_F"))
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_72_B"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_74_F"))
		__asm(push(i9!=i0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_76_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_75_F"))
		i9 =  (0)
		i11 = i9
		i12 = i11
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_79_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_76_F"))
		mstate.esp -= 4
		__asm(push(i12), push(mstate.esp), op(0x3c))
		state = 15
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state15"))
		i9 = mstate.eax
		mstate.esp += 4
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_77_F"))
		mstate.esp -= 4
		__asm(push(i12), push(mstate.esp), op(0x3c))
		state = 16
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state16"))
		i12 = mstate.eax
		mstate.esp += 4
		i19 = i9
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_78_F"))
		i9 = i11
		i11 = i19
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_79_F"))
		i19 = i9
		i9 = i12
		i20 = i11
		__asm(push(i19<1), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_83_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_80_F"))
		i21 =  (0)
		i22 = i21
	__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_81_F"), lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_81_B"), label, lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_81_F")); 
		i23 =  (i6 + i22)
		f0 =  ((__xasm<Number>(push(i23), op(0x38))))
		i23 =  (i20 + i22)
		__asm(push(f0), push(i23), op(0x3d))
		i23 =  (i7 + i22)
		f0 =  ((__xasm<Number>(push(i23), op(0x38))))
		i23 =  (i9 + i22)
		__asm(push(f0), push(i23), op(0x3d))
		i22 =  (i22 + 4)
		i21 =  (i21 + 1)
		__asm(push(i19<=i21), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_83_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_82_F"))
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_81_B"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_83_F"))
		__asm(push(i17==0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_85_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_84_F"))
		i6 =  (0)
		mstate.esp -= 8
		__asm(push(i17), push(mstate.esp), op(0x3c))
		__asm(push(i6), push((mstate.esp+4)), op(0x3c))
		state = 17
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state17"))
		i6 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_85_F"))
		__asm(push(i18==0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_87_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_86_F"))
		i6 =  (0)
		mstate.esp -= 8
		__asm(push(i18), push(mstate.esp), op(0x3c))
		__asm(push(i6), push((mstate.esp+4)), op(0x3c))
		state = 18
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state18"))
		i6 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_87_F"))
		__asm(push(i4==0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_89_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_88_F"))
		i6 =  (0)
		mstate.esp -= 8
		__asm(push(i4), push(mstate.esp), op(0x3c))
		__asm(push(i6), push((mstate.esp+4)), op(0x3c))
		state = 19
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state19"))
		i4 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_89_F"))
		__asm(push(i5==0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_92_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_90_F"))
		i4 =  (0)
		mstate.esp -= 8
		__asm(push(i5), push(mstate.esp), op(0x3c))
		__asm(push(i4), push((mstate.esp+4)), op(0x3c))
		state = 20
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state20"))
		i4 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_91_F"))
		__asm(push(i15==0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_94_F"))
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_93_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_92_F"))
		__asm(push(i15==0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_94_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_93_F"))
		i4 =  (0)
		mstate.esp -= 8
		__asm(push(i15), push(mstate.esp), op(0x3c))
		__asm(push(i4), push((mstate.esp+4)), op(0x3c))
		state = 21
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state21"))
		i4 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_94_F"))
		__asm(push(i16!=0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_96_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_95_F"))
		i4 = i8
		i7 = i13
		i8 = i14
		i9 = i10
		i10 = i11
		i6 = i12
		i5 = i19
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_97_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_96_F"))
		i4 =  (0)
		mstate.esp -= 8
		__asm(push(i16), push(mstate.esp), op(0x3c))
		__asm(push(i4), push((mstate.esp+4)), op(0x3c))
		state = 22
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state22"))
		i4 = mstate.eax
		mstate.esp += 8
		i4 = i8
		i7 = i13
		i8 = i14
		i9 = i10
		i10 = i11
		i6 = i12
		i5 = i19
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_97_F"))
		__asm(push(i7), push((mstate.ebp+-45)), op(0x3c))
		i7 = i8
		__asm(push(i7), push((mstate.ebp+-18)), op(0x3c))
		i7 = i9
		i8 = i10
		__asm(push(i8), push((mstate.ebp+-54)), op(0x3c))
		__asm(push(i6), push((mstate.ebp+-27)), op(0x3c))
		i4 =  (i4 & 255)
		__asm(push(i4==0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_181_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_98_F"))
		i0 =  (i7 << 3)
		mstate.esp -= 4
		i0 =  (i0 | 4)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 23
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state23"))
		i0 = mstate.eax
		mstate.esp += 4
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_99_F"))
		__asm(push(i7), push(i0), op(0x3c))
		i1 =  (i0 + 4)
		i2 = i0
		i3 = i1
		i4 = i1
		__asm(push(i7==0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_105_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_100_F"))
		i6 =  (0)
		i8 =  (i7 + -1)
		i9 = i3
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_103_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_101_B"), label)
		__asm(push(i6), push((i9+4)), op(0x3c))
		i6 =  (i9 + 8)
		i11 =  (i10 + 1)
		__asm(push(i8==i10), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_105_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_102_F"))
		i9 = i6
		i6 = i11
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_103_F"))
		i10 = i6
		i6 =  (12)
		mstate.esp -= 4
		__asm(push(i6), push(mstate.esp), op(0x3c))
		state = 24
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state24"))
		i6 = mstate.eax
		mstate.esp += 4
		i11 = i9
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_104_F"))
		i12 =  (12)
		__asm(push(i6), push(i11), op(0x3c))
		mstate.esp -= 4
		__asm(push(i12), push(mstate.esp), op(0x3c))
		state = 25
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state25"))
		i6 = mstate.eax
		mstate.esp += 4
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_101_B"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_105_F"))
		i6 =  (i5 << 3)
		mstate.esp -= 4
		i6 =  (i6 | 4)
		__asm(push(i6), push(mstate.esp), op(0x3c))
		state = 26
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state26"))
		i6 = mstate.eax
		mstate.esp += 4
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_106_F"))
		__asm(push(i5), push(i6), op(0x3c))
		i8 =  (i6 + 4)
		i9 = i6
		i10 = i8
		i11 = i8
		__asm(push(i5==0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_112_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_107_F"))
		i12 =  (0)
		i13 =  (i5 + -1)
		i14 = i10
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_110_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_108_B"), label)
		__asm(push(i15), push((i14+4)), op(0x3c))
		i14 =  (i14 + 8)
		i15 =  (i12 + 1)
		__asm(push(i13==i12), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_112_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_109_F"))
		i12 = i15
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_110_F"))
		i15 =  (12)
		mstate.esp -= 4
		__asm(push(i15), push(mstate.esp), op(0x3c))
		state = 27
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state27"))
		i15 = mstate.eax
		mstate.esp += 4
		i16 = i14
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_111_F"))
		i17 =  (12)
		__asm(push(i15), push(i16), op(0x3c))
		mstate.esp -= 4
		__asm(push(i17), push(mstate.esp), op(0x3c))
		state = 28
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state28"))
		i15 = mstate.eax
		mstate.esp += 4
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_108_B"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_112_F"))
		mstate.esp -= 16
		i12 =  ((__xasm<int>(push((mstate.ebp+-45)), op(0x37))))
		__asm(push(i12), push(mstate.esp), op(0x3c))
		i12 =  ((__xasm<int>(push((mstate.ebp+-18)), op(0x37))))
		__asm(push(i12), push((mstate.esp+4)), op(0x3c))
		__asm(push(i7), push((mstate.esp+8)), op(0x3c))
		__asm(push(i4), push((mstate.esp+12)), op(0x3c))
		state = 29
		mstate.esp -= 4;FSM__Z18TriangulatePolygonPfS_iP10b2Triangle.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state29"))
		i7 = mstate.eax
		mstate.esp += 16
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_113_F"))
		mstate.esp -= 16
		i12 =  ((__xasm<int>(push((mstate.ebp+-54)), op(0x37))))
		__asm(push(i12), push(mstate.esp), op(0x3c))
		i12 =  ((__xasm<int>(push((mstate.ebp+-27)), op(0x37))))
		__asm(push(i12), push((mstate.esp+4)), op(0x3c))
		__asm(push(i5), push((mstate.esp+8)), op(0x3c))
		__asm(push(i11), push((mstate.esp+12)), op(0x3c))
		state = 30
		mstate.esp -= 4;FSM__Z18TriangulatePolygonPfS_iP10b2Triangle.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state30"))
		i5 = mstate.eax
		mstate.esp += 16
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_114_F"))
		__asm(push(i5==-1), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_116_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_115_F"))
		__asm(push(i7!=-1), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_145_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_116_F"))
		__asm(push(i1==0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_128_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_117_F"))
		i1 =  ((__xasm<int>(push(i2), op(0x37))))
		i1 =  (i1 << 3)
		i1 =  (i1 | 4)
		i1 =  (i0 + i1)
	__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_118_F"), lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_118_B"), label, lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_118_F")); 
		__asm(push(i4==i1), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_126_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_119_F"))
		i2 =  (0)
	__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_120_F"), lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_120_B"), label, lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_120_F")); 
		i3 =  (i2 ^ -1)
		i5 =  (i3 << 3)
		i5 =  (i1 + i5)
		i7 =  ((__xasm<int>(push(i5), op(0x37))))
		__asm(push(i7==0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_122_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_121_F"))
		i10 =  (0)
		mstate.esp -= 8
		__asm(push(i7), push(mstate.esp), op(0x3c))
		__asm(push(i10), push((mstate.esp+4)), op(0x3c))
		state = 31
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state31"))
		i7 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_122_F"))
		i3 =  (i3 << 3)
		i3 =  (i1 + i3)
		i3 =  ((__xasm<int>(push((i3+4)), op(0x37))))
		__asm(push(i3!=0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_124_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_123_F"))
		i1 = i5
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_118_B"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_124_F"))
		i7 =  (0)
		mstate.esp -= 8
		__asm(push(i3), push(mstate.esp), op(0x3c))
		__asm(push(i7), push((mstate.esp+4)), op(0x3c))
		state = 32
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state32"))
		i3 = mstate.eax
		mstate.esp += 8
		i2 =  (i2 + 1)
		__asm(push(i4==i5), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_126_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_125_F"))
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_120_B"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_126_F"))
		__asm(push(i0==0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_128_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_127_F"))
		i1 =  (0)
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 33
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state33"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_128_F"))
		__asm(push(i8!=0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_130_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_129_F"))
		i0 =  (-1)
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_339_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_130_F"))
		i0 =  ((__xasm<int>(push(i9), op(0x37))))
		i0 =  (i0 << 3)
		i0 =  (i0 | 4)
		i0 =  (i6 + i0)
	__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_131_F"), lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_131_B"), label, lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_131_F")); 
		__asm(push(i11==i0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_139_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_132_F"))
		i1 =  (0)
	__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_133_F"), lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_133_B"), label, lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_133_F")); 
		i2 =  (i1 ^ -1)
		i3 =  (i2 << 3)
		i3 =  (i0 + i3)
		i4 =  ((__xasm<int>(push(i3), op(0x37))))
		__asm(push(i4==0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_135_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_134_F"))
		i5 =  (0)
		mstate.esp -= 8
		__asm(push(i4), push(mstate.esp), op(0x3c))
		__asm(push(i5), push((mstate.esp+4)), op(0x3c))
		state = 34
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state34"))
		i4 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_135_F"))
		i2 =  (i2 << 3)
		i2 =  (i0 + i2)
		i2 =  ((__xasm<int>(push((i2+4)), op(0x37))))
		__asm(push(i2!=0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_137_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_136_F"))
		i0 = i3
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_131_B"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_137_F"))
		i4 =  (0)
		mstate.esp -= 8
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i4), push((mstate.esp+4)), op(0x3c))
		state = 35
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state35"))
		i2 = mstate.eax
		mstate.esp += 8
		i1 =  (i1 + 1)
		__asm(push(i11==i3), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_139_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_138_F"))
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_133_B"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_139_F"))
		__asm(push(i6==0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_141_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_140_F"))
		i0 =  (0)
		mstate.esp -= 8
		__asm(push(i6), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 36
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state36"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_141_F"))
		i0 =  ((__xasm<int>(push((mstate.ebp+-81)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_281_F"))
	__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_142_F"), lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_142_B"), label, lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_142_F")); 
		i0 =  (-1)
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_341_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_143_B"), label)
		i14 =  (i3 + i13)
		i15 =  ((__xasm<int>(push(i14), op(0x37))))
		i16 =  ((__xasm<int>(push((mstate.ebp+-99)), op(0x37))))
		i16 =  (i16 + i13)
		i17 =  ((__xasm<int>(push(i16), op(0x37))))
		f0 =  ((__xasm<Number>(push(i15), op(0x38))))
		__asm(push(f0), push(i17), op(0x3d))
		i15 =  ((__xasm<int>(push((i14+4)), op(0x37))))
		i17 =  ((__xasm<int>(push((i16+4)), op(0x37))))
		f0 =  ((__xasm<Number>(push(i15), op(0x38))))
		__asm(push(f0), push(i17), op(0x3d))
		i15 =  ((__xasm<int>(push(i14), op(0x37))))
		i17 =  ((__xasm<int>(push(i16), op(0x37))))
		f0 =  ((__xasm<Number>(push((i15+4)), op(0x38))))
		__asm(push(f0), push((i17+4)), op(0x3d))
		i15 =  ((__xasm<int>(push((i14+4)), op(0x37))))
		i17 =  ((__xasm<int>(push((i16+4)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i15+4)), op(0x38))))
		__asm(push(f0), push((i17+4)), op(0x3d))
		i15 =  ((__xasm<int>(push(i14), op(0x37))))
		i17 =  ((__xasm<int>(push(i16), op(0x37))))
		f0 =  ((__xasm<Number>(push((i15+8)), op(0x38))))
		__asm(push(f0), push((i17+8)), op(0x3d))
		i14 =  ((__xasm<int>(push((i14+4)), op(0x37))))
		i15 =  ((__xasm<int>(push((i16+4)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i14+8)), op(0x38))))
		__asm(push(f0), push((i15+8)), op(0x3d))
		i13 =  (i13 + 8)
		i12 =  (i12 + 1)
		__asm(push(i12==i7), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_147_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_144_F"))
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_143_B"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_145_F"))
		__asm(push(i7<1), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_147_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_146_F"))
		i12 =  (0)
		i13 = i12
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_143_B"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_147_F"))
		__asm(push(i5<1), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_151_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_148_F"))
		i3 =  (0)
		i12 =  (i7 << 3)
		i13 =  ((__xasm<int>(push((mstate.ebp+-99)), op(0x37))))
		i12 =  (i13 + i12)
		i13 = i3
	__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_149_F"), lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_149_B"), label, lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_149_F")); 
		i14 =  (i10 + i13)
		i15 =  ((__xasm<int>(push(i14), op(0x37))))
		i16 =  (i12 + i13)
		i17 =  ((__xasm<int>(push(i16), op(0x37))))
		f0 =  ((__xasm<Number>(push(i15), op(0x38))))
		__asm(push(f0), push(i17), op(0x3d))
		i15 =  ((__xasm<int>(push((i14+4)), op(0x37))))
		i17 =  ((__xasm<int>(push((i16+4)), op(0x37))))
		f0 =  ((__xasm<Number>(push(i15), op(0x38))))
		__asm(push(f0), push(i17), op(0x3d))
		i15 =  ((__xasm<int>(push(i14), op(0x37))))
		i17 =  ((__xasm<int>(push(i16), op(0x37))))
		f0 =  ((__xasm<Number>(push((i15+4)), op(0x38))))
		__asm(push(f0), push((i17+4)), op(0x3d))
		i15 =  ((__xasm<int>(push((i14+4)), op(0x37))))
		i17 =  ((__xasm<int>(push((i16+4)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i15+4)), op(0x38))))
		__asm(push(f0), push((i17+4)), op(0x3d))
		i15 =  ((__xasm<int>(push(i14), op(0x37))))
		i17 =  ((__xasm<int>(push(i16), op(0x37))))
		f0 =  ((__xasm<Number>(push((i15+8)), op(0x38))))
		__asm(push(f0), push((i17+8)), op(0x3d))
		i14 =  ((__xasm<int>(push((i14+4)), op(0x37))))
		i15 =  ((__xasm<int>(push((i16+4)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i14+8)), op(0x38))))
		__asm(push(f0), push((i15+8)), op(0x3d))
		i13 =  (i13 + 8)
		i3 =  (i3 + 1)
		__asm(push(i3==i5), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_151_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_150_F"))
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_149_B"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_151_F"))
		__asm(push(i1==0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_163_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_152_F"))
		i1 =  ((__xasm<int>(push(i2), op(0x37))))
		i1 =  (i1 << 3)
		i1 =  (i1 | 4)
		i1 =  (i0 + i1)
	__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_153_F"), lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_153_B"), label, lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_153_F")); 
		__asm(push(i4==i1), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_161_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_154_F"))
		i2 =  (0)
	__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_155_F"), lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_155_B"), label, lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_155_F")); 
		i3 =  (i2 ^ -1)
		i10 =  (i3 << 3)
		i10 =  (i1 + i10)
		i12 =  ((__xasm<int>(push(i10), op(0x37))))
		__asm(push(i12==0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_157_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_156_F"))
		i13 =  (0)
		mstate.esp -= 8
		__asm(push(i12), push(mstate.esp), op(0x3c))
		__asm(push(i13), push((mstate.esp+4)), op(0x3c))
		state = 37
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state37"))
		i12 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_157_F"))
		i3 =  (i3 << 3)
		i3 =  (i1 + i3)
		i3 =  ((__xasm<int>(push((i3+4)), op(0x37))))
		__asm(push(i3!=0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_159_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_158_F"))
		i1 = i10
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_153_B"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_159_F"))
		i12 =  (0)
		mstate.esp -= 8
		__asm(push(i3), push(mstate.esp), op(0x3c))
		__asm(push(i12), push((mstate.esp+4)), op(0x3c))
		state = 38
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state38"))
		i3 = mstate.eax
		mstate.esp += 8
		i2 =  (i2 + 1)
		__asm(push(i4==i10), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_161_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_160_F"))
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_155_B"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_161_F"))
		__asm(push(i0==0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_163_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_162_F"))
		i1 =  (0)
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 39
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state39"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_163_F"))
		__asm(push(i8==0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_178_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_164_F"))
		i0 =  ((__xasm<int>(push(i9), op(0x37))))
		i0 =  (i0 << 3)
		i0 =  (i0 | 4)
		i0 =  (i6 + i0)
	__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_165_F"), lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_165_B"), label, lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_165_F")); 
		__asm(push(i11==i0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_173_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_166_F"))
		i1 =  (0)
	__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_167_F"), lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_167_B"), label, lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_167_F")); 
		i2 =  (i1 ^ -1)
		i3 =  (i2 << 3)
		i3 =  (i0 + i3)
		i4 =  ((__xasm<int>(push(i3), op(0x37))))
		__asm(push(i4==0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_169_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_168_F"))
		i8 =  (0)
		mstate.esp -= 8
		__asm(push(i4), push(mstate.esp), op(0x3c))
		__asm(push(i8), push((mstate.esp+4)), op(0x3c))
		state = 40
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state40"))
		i4 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_169_F"))
		i2 =  (i2 << 3)
		i2 =  (i0 + i2)
		i2 =  ((__xasm<int>(push((i2+4)), op(0x37))))
		__asm(push(i2!=0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_171_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_170_F"))
		i0 = i3
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_165_B"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_171_F"))
		i4 =  (0)
		mstate.esp -= 8
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i4), push((mstate.esp+4)), op(0x3c))
		state = 41
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state41"))
		i2 = mstate.eax
		mstate.esp += 8
		i1 =  (i1 + 1)
		__asm(push(i11==i3), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_173_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_172_F"))
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_167_B"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_173_F"))
		__asm(push(i6==0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_175_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_174_F"))
		i0 =  (0)
		mstate.esp -= 8
		__asm(push(i6), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 42
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state42"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_175_F"))
		i0 =  (i5 + i7)
		i1 =  ((__xasm<int>(push((mstate.ebp+-81)), op(0x37))))
		__asm(push(i1==0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_177_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_176_F"))
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_341_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_177_F"))
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_344_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_178_F"))
		i0 =  (i5 + i7)
		i1 =  ((__xasm<int>(push((mstate.ebp+-81)), op(0x37))))
		__asm(push(i1==0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_180_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_179_F"))
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_341_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_180_F"))
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_344_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_181_F"))
		i4 =  (i0 + -2)
		__asm(push(i4), push((mstate.ebp+-63)), op(0x3c))
		i4 =  (i4 << 3)
		mstate.esp -= 4
		i4 =  (i4 | 4)
		__asm(push(i4), push(mstate.esp), op(0x3c))
		state = 43
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state43"))
		i4 = mstate.eax
		__asm(push(i4), push((mstate.ebp+-90)), op(0x3c))
		mstate.esp += 4
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_182_F"))
		i4 =  ((__xasm<int>(push((mstate.ebp+-90)), op(0x37))))
		i5 =  ((__xasm<int>(push((mstate.ebp+-63)), op(0x37))))
		__asm(push(i5), push(i4), op(0x3c))
		i4 =  (i4 + 4)
		__asm(push(i4), push((mstate.ebp+-72)), op(0x3c))
		i4 =  ((__xasm<int>(push((mstate.ebp+-90)), op(0x37))))
		__asm(push(i4), push((mstate.ebp+-36)), op(0x3c))
		i4 =  ((__xasm<int>(push((mstate.ebp+-72)), op(0x37))))
		__asm(push(i4), push((mstate.ebp+-108)), op(0x3c))
		i4 =  ((__xasm<int>(push((mstate.ebp+-72)), op(0x37))))
		__asm(push(i0==2), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_188_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_183_F"))
		i5 =  (0)
		i6 =  (i0 + -3)
		i7 =  ((__xasm<int>(push((mstate.ebp+-108)), op(0x37))))
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_186_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_184_B"), label)
		__asm(push(i5), push((i8+4)), op(0x3c))
		i5 =  (i8 + 8)
		i8 =  (i7 + 1)
		__asm(push(i6==i7), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_188_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_185_F"))
		i7 = i5
		i5 = i8
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_186_F"))
		i8 = i7
		i7 = i5
		i5 =  (12)
		mstate.esp -= 4
		__asm(push(i5), push(mstate.esp), op(0x3c))
		state = 44
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state44"))
		i5 = mstate.eax
		mstate.esp += 4
		i9 = i8
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_187_F"))
		i10 =  (12)
		__asm(push(i5), push(i9), op(0x3c))
		mstate.esp -= 4
		__asm(push(i10), push(mstate.esp), op(0x3c))
		state = 45
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state45"))
		i5 = mstate.eax
		mstate.esp += 4
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_184_B"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_188_F"))
		mstate.esp -= 4
		__asm(push(i3), push(mstate.esp), op(0x3c))
		state = 46
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state46"))
		i5 = mstate.eax
		mstate.esp += 4
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_189_F"))
		mstate.esp -= 4
		__asm(push(i3), push(mstate.esp), op(0x3c))
		state = 47
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state47"))
		i3 = mstate.eax
		mstate.esp += 4
		i6 = i5
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_190_F"))
		i7 = i3
		__asm(push(i0<1), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_302_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_191_F"))
		i8 =  (0)
		i9 = i8
	__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_192_F"), lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_192_B"), label, lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_192_F")); 
		i10 =  (i1 + i9)
		f0 =  ((__xasm<Number>(push(i10), op(0x38))))
		i10 =  (i6 + i9)
		__asm(push(f0), push(i10), op(0x3d))
		i10 =  (i2 + i9)
		f0 =  ((__xasm<Number>(push(i10), op(0x38))))
		i10 =  (i7 + i9)
		__asm(push(f0), push(i10), op(0x3d))
		i9 =  (i9 + 4)
		i8 =  (i8 + 1)
		__asm(push(i8==i0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_302_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_193_F"))
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_192_B"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_194_B"), label)
		i19 =  (i1 + -1)
		i19 =  (i19 % i13)
		__asm(push(i19<0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_196_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_195_F"))
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_199_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_196_F"))
		i20 =  (i11 + i0)
	__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_197_F"), lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_197_B"), label, lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_197_F")); 
		i19 =  (i20 + i19)
		__asm(push(i19<0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_357_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_198_F"))
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_199_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_199_F"))
		i20 =  (i1 + 1)
		i20 =  (i20 % i13)
		__asm(push(i20<0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_201_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_200_F"))
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_204_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_201_F"))
		i21 =  (i11 + i0)
	__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_202_F"), lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_202_B"), label, lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_202_F")); 
		i20 =  (i21 + i20)
		__asm(push(i20<0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_358_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_203_F"))
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_204_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_204_F"))
		f1 =  (1.19209e-07)
		i20 =  (i20 << 2)
		i21 =  (i9 + i7)
		i22 =  (i15 + i20)
		i23 =  (i5 + i7)
		i20 =  (i8 + i20)
		f2 =  ((__xasm<Number>(push(i20), op(0x38))))
		f3 =  ((__xasm<Number>(push(i23), op(0x38))))
		f4 =  ((__xasm<Number>(push(i22), op(0x38))))
		f5 =  ((__xasm<Number>(push(i21), op(0x38))))
		f6 =  (f2 - f3)
		f7 =  (f4 - f5)
		f6 =  f6/*fround*/
		f7 =  f7/*fround*/
		f8 =  f6/*fextend*/
		f9 =  f7/*fextend*/
		f8 =  (f8 * f8)
		f9 =  (f9 * f9)
		f8 =  f8/*fround*/
		f9 =  f9/*fround*/
		f8 =  f8/*fextend*/
		f9 =  f9/*fextend*/
		i19 =  (i19 << 2)
		f8 =  (f9 + f8)
		f8 =  f8/*fround*/
		i20 =  (i15 + i19)
		i19 =  (i8 + i19)
		f9 =  ((__xasm<Number>(push(i19), op(0x38))))
		f10 =  ((__xasm<Number>(push(i20), op(0x38))))
		f8 =  f8/*fextend*/
		f8 =  Math.sqrt(f8)
		f2 =  (f9 - f2)
		f3 =  (f3 - f9)
		f4 =  (f10 - f4)
		f5 =  (f5 - f10)
		f8 =  f8/*fround*/
		f2 =  f2/*fround*/
		f3 =  f3/*fround*/
		f4 =  f4/*fround*/
		f5 =  f5/*fround*/
		f1 =  f1/*fround*/
		f1 =  f1/*fextend*/
		f9 =  f8/*fextend*/
		__asm(push(f9>=f1), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_206_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_205_F"))
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_207_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_206_F"))
		f1 =  (1)
		f1 =  f1/*fround*/
		f8 =  f8/*fextend*/
		f1 =  f1/*fextend*/
		f1 =  (f1 / f8)
		f1 =  f1/*fround*/
		f7 =  f7/*fextend*/
		f1 =  f1/*fextend*/
		f6 =  f6/*fextend*/
		f7 =  (f7 * f1)
		f1 =  (f6 * f1)
		f7 =  f7/*fround*/
		f6 =  f1/*fround*/
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_207_F"))
		f1 = f6
		f6 = f7
		f7 =  (1.19209e-07)
		f8 =  f5/*fextend*/
		f9 =  f3/*fextend*/
		f8 =  (f8 * f8)
		f9 =  (f9 * f9)
		f8 =  f8/*fround*/
		f9 =  f9/*fround*/
		f9 =  f9/*fextend*/
		f8 =  f8/*fextend*/
		f8 =  (f8 + f9)
		f8 =  f8/*fround*/
		f8 =  f8/*fextend*/
		f8 =  Math.sqrt(f8)
		f8 =  f8/*fround*/
		f7 =  f7/*fround*/
		f7 =  f7/*fextend*/
		f9 =  f8/*fextend*/
		__asm(push(f9>=f7), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_209_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_208_F"))
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_210_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_209_F"))
		f7 =  (1)
		f7 =  f7/*fround*/
		f8 =  f8/*fextend*/
		f7 =  f7/*fextend*/
		f7 =  (f7 / f8)
		f7 =  f7/*fround*/
		f5 =  f5/*fextend*/
		f7 =  f7/*fextend*/
		f3 =  f3/*fextend*/
		f5 =  (f5 * f7)
		f3 =  (f3 * f7)
		f5 =  f5/*fround*/
		f3 =  f3/*fround*/
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_210_F"))
		f7 =  (1.19209e-07)
		f8 =  f4/*fextend*/
		f9 =  f2/*fextend*/
		f8 =  (f8 * f8)
		f9 =  (f9 * f9)
		f8 =  f8/*fround*/
		f9 =  f9/*fround*/
		f9 =  f9/*fextend*/
		f8 =  f8/*fextend*/
		f8 =  (f8 + f9)
		f8 =  f8/*fround*/
		f8 =  f8/*fextend*/
		f8 =  Math.sqrt(f8)
		f8 =  f8/*fround*/
		f7 =  f7/*fround*/
		f7 =  f7/*fextend*/
		f9 =  f8/*fextend*/
		__asm(push(f9>=f7), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_212_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_211_F"))
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_213_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_212_F"))
		f7 =  (1)
		f7 =  f7/*fround*/
		f8 =  f8/*fextend*/
		f7 =  f7/*fextend*/
		f7 =  (f7 / f8)
		f7 =  f7/*fround*/
		f4 =  f4/*fextend*/
		f7 =  f7/*fextend*/
		f2 =  f2/*fextend*/
		f4 =  (f4 * f7)
		f2 =  (f2 * f7)
		f4 =  f4/*fround*/
		f2 =  f2/*fround*/
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_213_F"))
		f7 =  (0)
		f6 =  f6/*fextend*/
		f3 =  f3/*fextend*/
		f4 =  f4/*fextend*/
		f1 =  f1/*fextend*/
		f2 =  f2/*fextend*/
		f5 =  f5/*fextend*/
		f8 =  (f2 * f6)
		f9 =  (f3 * f4)
		f4 =  (f4 * f1)
		f2 =  (f5 * f2)
		f8 =  f8/*fround*/
		f9 =  f9/*fround*/
		f4 =  f4/*fround*/
		f2 =  f2/*fround*/
		f4 =  f4/*fextend*/
		f8 =  f8/*fextend*/
		f2 =  f2/*fextend*/
		f9 =  f9/*fextend*/
		f3 =  (f6 * f3)
		f6 =  (f4 - f8)
		f4 =  (f8 - f4)
		f8 =  (f2 - f9)
		f2 =  (f9 - f2)
		f1 =  (f1 * f5)
		f3 =  f3/*fround*/
		f5 =  f6/*fround*/
		f4 =  f4/*fround*/
		f6 =  f8/*fround*/
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		f7 =  f7/*fround*/
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f4 =  f4/*fextend*/
		f5 =  f5/*fextend*/
		f7 =  f7/*fextend*/
		f2 =  f2/*fextend*/
		f6 =  f6/*fextend*/
		f8 =  (f3 - f1)
		f1 =  (f1 - f3)
		f3 =  ((f5<=f7) ? f4 : f5)
		f2 =  ((f6<=f7) ? f2 : f6)
		f4 =  f8/*fround*/
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		f2 =  f2/*fround*/
		f1 =  f1/*fextend*/
		f4 =  f4/*fextend*/
		f3 =  f3/*fextend*/
		f2 =  f2/*fextend*/
		f1 =  ((f4<=f7) ? f1 : f4)
		f2 =  ((f2<f3) ? f2 : f3)
		f1 =  f1/*fround*/
		f2 =  f2/*fround*/
		f2 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		f1 =  ((f1<f2) ? f1 : f2)
		f1 =  f1/*fround*/
		f2 =  f0/*fextend*/
		f3 =  f1/*fextend*/
		__asm(push(f3>f2), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_215_F"))
	__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_214_F"), lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_214_B"), label, lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_214_F")); 
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_216_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_215_F"))
		i2 = i1
		f0 = f1
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_216_F"))
		i7 =  (i7 + 4)
		i1 =  (i1 + 1)
	__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_217_F"), lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_217_B"), label, lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_217_F")); 
		__asm(push(i1>=i13), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_261_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_218_F"))
		__asm(push(i13<3), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_221_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_219_F"))
		__asm(push(i1<0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_221_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_220_F"))
		__asm(push(i1<i13), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_222_F"))
	__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_221_F"), lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_221_B"), label, lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_221_F")); 
		i19 =  (0)
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_260_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_222_F"))
		__asm(push(i1!=0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_224_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_223_F"))
		f1 =  ((__xasm<Number>(push(i15), op(0x38))))
		f2 =  ((__xasm<Number>(push(i16), op(0x38))))
		f3 =  ((__xasm<Number>(push(i8), op(0x38))))
		f4 =  ((__xasm<Number>(push(i17), op(0x38))))
		f1 =  (f1 - f2)
		f2 =  (f3 - f4)
		f1 =  f1/*fround*/
		f2 =  f2/*fround*/
		i19 =  (i1 + 1)
		i20 = i12
		i21 = i8
		i22 = i14
		i23 = i15
		i24 = i10
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_227_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_224_F"))
		i19 =  (i5 + i7)
		i20 =  (i9 + i7)
		f1 =  ((__xasm<Number>(push(i20), op(0x38))))
		f2 =  ((__xasm<Number>(push((i20+-4)), op(0x38))))
		f3 =  ((__xasm<Number>(push(i19), op(0x38))))
		f4 =  ((__xasm<Number>(push((i19+-4)), op(0x38))))
		f1 =  (f1 - f2)
		f2 =  (f3 - f4)
		f1 =  f1/*fround*/
		f2 =  f2/*fround*/
		__asm(push(i6!=i1), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_226_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_225_F"))
		i19 =  (0)
		i23 =  (i9 + i7)
		i21 =  (i5 + i7)
		i24 =  (i1 + -1)
		i20 = i8
		i22 = i15
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_227_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_226_F"))
		i19 =  (i9 + i7)
		i21 =  (i5 + i7)
		i20 =  (i3 + i7)
		i22 =  (i18 + i7)
		i24 =  (i1 + -1)
		i25 =  (i1 + 1)
		i23 = i19
		i19 = i25
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_227_F"))
		f3 =  (0)
		f4 =  ((__xasm<Number>(push(i20), op(0x38))))
		f5 =  ((__xasm<Number>(push(i21), op(0x38))))
		f6 =  ((__xasm<Number>(push(i22), op(0x38))))
		f7 =  ((__xasm<Number>(push(i23), op(0x38))))
		f4 =  (f4 - f5)
		f5 =  (f6 - f7)
		f4 =  f4/*fround*/
		f5 =  f5/*fround*/
		f4 =  f4/*fextend*/
		f1 =  f1/*fextend*/
		f2 =  f2/*fextend*/
		f5 =  f5/*fextend*/
		f1 =  (f1 * f4)
		f2 =  (f5 * f2)
		f1 =  f1/*fround*/
		f2 =  f2/*fround*/
		f2 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		f1 =  (f1 - f2)
		f1 =  f1/*fround*/
		f2 =  f3/*fround*/
		f2 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		__asm(push(f1>f2), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_221_B"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_228_F"))
		i20 =  (12)
		i21 =  (i19 << 2)
		i22 =  (i24 << 2)
		i23 =  (i9 + i7)
		i25 =  (i5 + i7)
		i26 =  (i15 + i21)
		i21 =  (i8 + i21)
		i27 =  (i15 + i22)
		i22 =  (i8 + i22)
		f1 =  ((__xasm<Number>(push(i22), op(0x38))))
		f2 =  ((__xasm<Number>(push(i27), op(0x38))))
		f3 =  ((__xasm<Number>(push(i21), op(0x38))))
		f4 =  ((__xasm<Number>(push(i26), op(0x38))))
		f5 =  ((__xasm<Number>(push(i25), op(0x38))))
		f6 =  ((__xasm<Number>(push(i23), op(0x38))))
		mstate.esp -= 4
		__asm(push(i20), push(mstate.esp), op(0x3c))
		state = 48
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state48"))
		i20 = mstate.eax
		mstate.esp += 4
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_229_F"))
		i21 =  (12)
		mstate.esp -= 4
		__asm(push(i21), push(mstate.esp), op(0x3c))
		state = 49
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state49"))
		i21 = mstate.eax
		mstate.esp += 4
		i22 = i20
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_230_F"))
		f7 =  (0)
		f8 =  f4/*fextend*/
		f9 =  f6/*fextend*/
		f10 =  f2/*fextend*/
		f11 =  f3/*fextend*/
		f12 =  f5/*fextend*/
		f13 =  f1/*fextend*/
		f8 =  (f8 - f9)
		f9 =  (f10 - f9)
		f10 =  (f11 - f12)
		f11 =  (f13 - f12)
		f8 =  f8/*fround*/
		f9 =  f9/*fround*/
		f10 =  f10/*fround*/
		f11 =  f11/*fround*/
		f11 =  f11/*fextend*/
		f8 =  f8/*fextend*/
		f10 =  f10/*fextend*/
		f9 =  f9/*fextend*/
		f8 =  (f8 * f11)
		f9 =  (f9 * f10)
		f8 =  f8/*fround*/
		f9 =  f9/*fround*/
		f9 =  f9/*fextend*/
		f8 =  f8/*fextend*/
		f8 =  (f8 - f9)
		__asm(push(f6), push(i22), op(0x3d))
		i23 =  (i22 + 4)
		f6 =  f8/*fround*/
		f7 =  f7/*fround*/
		i25 = i21
		f7 =  f7/*fextend*/
		f6 =  f6/*fextend*/
		__asm(push(f6<=f7), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_237_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_231_F"))
		__asm(push(f4), push(i23), op(0x3d))
		__asm(push(f2), push((i22+8)), op(0x3d))
		__asm(push(f5), push(i25), op(0x3d))
		__asm(push(f3), push((i25+4)), op(0x3d))
		__asm(push(f1), push((i25+8)), op(0x3d))
		__asm(push(i13>0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_238_F"))
	__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_232_F"), lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_232_B"), label, lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_232_F")); 
		i19 =  (1)
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_233_F"))
	__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_233_F"), lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_233_B"), label, lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_233_F")); 
		__asm(push(i20==0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_235_F"))
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_234_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_234_F"))
		i22 =  (0)
		mstate.esp -= 8
		__asm(push(i20), push(mstate.esp), op(0x3c))
		__asm(push(i22), push((mstate.esp+4)), op(0x3c))
		state = 50
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state50"))
		i20 = mstate.eax
		mstate.esp += 8
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_235_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_235_F"))
		__asm(push(i21!=0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_259_F"))
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_236_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_236_F"))
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_260_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_237_F"))
		__asm(push(f2), push(i23), op(0x3d))
		__asm(push(f4), push((i22+8)), op(0x3d))
		__asm(push(f5), push(i25), op(0x3d))
		__asm(push(f1), push((i25+4)), op(0x3d))
		__asm(push(f3), push((i25+8)), op(0x3d))
		__asm(push(i13<1), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_232_B"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_238_F"))
		i26 =  (0)
		i27 =  (i25 + 8)
		i25 =  (i25 + 4)
		i28 =  (i22 + 8)
		i29 = i26
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_256_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_239_B"), label)
		i30 =  (i9 + i29)
		i31 =  (i5 + i29)
		f1 =  ((__xasm<Number>(push(i30), op(0x38))))
		f2 =  ((__xasm<Number>(push(i22), op(0x38))))
		f3 =  ((__xasm<Number>(push(i31), op(0x38))))
		f4 =  f1/*fextend*/
		f6 =  f2/*fextend*/
		__asm(push(f6<=f4), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_242_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_240_F"))
		f4 =  ((__xasm<Number>(push(i23), op(0x38))))
		f6 =  f1/*fextend*/
		__asm(push(f4<=f6), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_242_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_241_F"))
		f4 =  ((__xasm<Number>(push(i28), op(0x38))))
		f6 =  f1/*fextend*/
		__asm(push(f4>f6), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_255_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_242_F"))
		f4 =  f1/*fextend*/
		f6 =  f2/*fextend*/
		__asm(push(f6>=f4), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_245_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_243_F"))
		f4 =  ((__xasm<Number>(push(i23), op(0x38))))
		f6 =  f1/*fextend*/
		__asm(push(f4>=f6), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_245_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_244_F"))
		f4 =  ((__xasm<Number>(push(i28), op(0x38))))
		f6 =  f1/*fextend*/
		__asm(push(f4<f6), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_255_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_245_F"))
		f4 =  f3/*fextend*/
		f6 =  f5/*fextend*/
		__asm(push(f6<=f4), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_248_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_246_F"))
		f4 =  ((__xasm<Number>(push(i25), op(0x38))))
		f6 =  f3/*fextend*/
		__asm(push(f4<=f6), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_248_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_247_F"))
		f4 =  ((__xasm<Number>(push(i27), op(0x38))))
		f6 =  f3/*fextend*/
		__asm(push(f4>f6), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_255_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_248_F"))
		f4 =  f3/*fextend*/
		f6 =  f5/*fextend*/
		__asm(push(f6>=f4), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_251_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_249_F"))
		f4 =  ((__xasm<Number>(push(i25), op(0x38))))
		f6 =  f3/*fextend*/
		__asm(push(f4>=f6), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_251_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_250_F"))
		f4 =  ((__xasm<Number>(push(i27), op(0x38))))
		f6 =  f3/*fextend*/
		__asm(push(f4<f6), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_255_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_251_F"))
		f4 =  (1)
		f6 =  ((__xasm<Number>(push(i23), op(0x38))))
		f2 =  f2/*fextend*/
		f7 =  ((__xasm<Number>(push(i28), op(0x38))))
		f8 =  ((__xasm<Number>(push(i25), op(0x38))))
		f9 =  ((__xasm<Number>(push(i27), op(0x38))))
		f10 =  f5/*fextend*/
		f6 =  (f6 - f2)
		f7 =  (f7 - f2)
		f8 =  (f8 - f10)
		f9 =  (f9 - f10)
		f6 =  f6/*fround*/
		f7 =  f7/*fround*/
		f8 =  f8/*fround*/
		f9 =  f9/*fround*/
		f1 =  f1/*fextend*/
		f6 =  f6/*fextend*/
		f7 =  f7/*fextend*/
		f3 =  f3/*fextend*/
		f8 =  f8/*fextend*/
		f9 =  f9/*fextend*/
		f1 =  (f1 - f2)
		f2 =  (f7 * f6)
		f11 =  (f6 * f6)
		f12 =  (f7 * f7)
		f3 =  (f3 - f10)
		f10 =  (f9 * f8)
		f13 =  (f8 * f8)
		f14 =  (f9 * f9)
		f1 =  f1/*fround*/
		f2 =  f2/*fround*/
		f11 =  f11/*fround*/
		f12 =  f12/*fround*/
		f3 =  f3/*fround*/
		f10 =  f10/*fround*/
		f13 =  f13/*fround*/
		f14 =  f14/*fround*/
		f1 =  f1/*fextend*/
		f3 =  f3/*fextend*/
		f10 =  f10/*fextend*/
		f2 =  f2/*fextend*/
		f13 =  f13/*fextend*/
		f11 =  f11/*fextend*/
		f14 =  f14/*fextend*/
		f12 =  f12/*fextend*/
		f7 =  (f7 * f1)
		f1 =  (f6 * f1)
		f2 =  (f2 + f10)
		f6 =  (f11 + f13)
		f10 =  (f12 + f14)
		f9 =  (f9 * f3)
		f3 =  (f8 * f3)
		f7 =  f7/*fround*/
		f1 =  f1/*fround*/
		f2 =  f2/*fround*/
		f6 =  f6/*fround*/
		f8 =  f10/*fround*/
		f9 =  f9/*fround*/
		f3 =  f3/*fround*/
		f2 =  f2/*fextend*/
		f9 =  f9/*fextend*/
		f7 =  f7/*fextend*/
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f6 =  f6/*fextend*/
		f8 =  f8/*fextend*/
		f7 =  (f7 + f9)
		f1 =  (f1 + f3)
		f3 =  (f2 * f2)
		f9 =  (f8 * f6)
		f7 =  f7/*fround*/
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		f9 =  f9/*fround*/
		f7 =  f7/*fextend*/
		f1 =  f1/*fextend*/
		f3 =  f3/*fextend*/
		f9 =  f9/*fextend*/
		f6 =  (f6 * f7)
		f7 =  (f2 * f7)
		f2 =  (f2 * f1)
		f1 =  (f8 * f1)
		f3 =  (f9 - f3)
		f6 =  f6/*fround*/
		f7 =  f7/*fround*/
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		f4 =  f4/*fround*/
		f2 =  f2/*fextend*/
		f6 =  f6/*fextend*/
		f7 =  f7/*fextend*/
		f1 =  f1/*fextend*/
		f3 =  f3/*fextend*/
		f4 =  f4/*fextend*/
		f2 =  (f6 - f2)
		f1 =  (f1 - f7)
		f3 =  (f4 / f3)
		f2 =  f2/*fround*/
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		f2 =  f2/*fextend*/
		f3 =  f3/*fextend*/
		f1 =  f1/*fextend*/
		f2 =  (f2 * f3)
		f1 =  (f1 * f3)
		f2 =  f2/*fround*/
		f3 =  (0)
		f1 =  f1/*fround*/
		f3 =  f3/*fround*/
		f3 =  f3/*fextend*/
		f4 =  f2/*fextend*/
		__asm(push(f4<f3), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_255_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_252_F"))
		f3 =  (0)
		f3 =  f3/*fround*/
		f3 =  f3/*fextend*/
		f4 =  f1/*fextend*/
		__asm(push(f4<f3), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_255_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_253_F"))
		f3 =  (1)
		f1 =  f1/*fextend*/
		f2 =  f2/*fextend*/
		f1 =  (f2 + f1)
		f1 =  f1/*fround*/
		f2 =  f3/*fround*/
		f2 =  f2/*fextend*/
		f1 =  f1/*fextend*/
		__asm(push(f1>f2), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_255_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_254_F"))
		i19 =  (0)
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_233_B"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_255_B"), label, lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_255_F")); 
		i29 =  (i29 + 4)
		i26 =  (i26 + 1)
		__asm(push(i26>=i13), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_232_B"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_256_F"))
		__asm(push(i26==i24), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_255_B"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_257_F"))
		__asm(push(i26==i19), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_255_B"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_258_F"))
		__asm(push(i26==i1), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_255_B"))
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_239_B"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_259_F"))
		i20 =  (0)
		mstate.esp -= 8
		__asm(push(i21), push(mstate.esp), op(0x3c))
		__asm(push(i20), push((mstate.esp+4)), op(0x3c))
		state = 51
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state51"))
		i20 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_260_F"))
		i19 =  (i19 & 255)
		__asm(push(i19==0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_214_B"))
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_194_B"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_261_F"))
		__asm(push(i2!=-1), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_282_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_262_F"))
		i0 =  ((__xasm<int>(push((mstate.ebp+-126)), op(0x37))))
		__asm(push(i0<1), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_266_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_263_F"))
		i0 =  (0)
		i2 = i0
	__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_264_F"), lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_264_B"), label, lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_264_F")); 
		i3 =  ((__xasm<int>(push((mstate.ebp+-108)), op(0x37))))
		i3 =  (i3 + i2)
		i5 =  ((__xasm<int>(push(i3), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+-99)), op(0x37))))
		i1 =  (i1 + i2)
		i6 =  ((__xasm<int>(push(i1), op(0x37))))
		f0 =  ((__xasm<Number>(push(i5), op(0x38))))
		__asm(push(f0), push(i6), op(0x3d))
		i5 =  ((__xasm<int>(push((i3+4)), op(0x37))))
		i6 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		f0 =  ((__xasm<Number>(push(i5), op(0x38))))
		__asm(push(f0), push(i6), op(0x3d))
		i5 =  ((__xasm<int>(push(i3), op(0x37))))
		i6 =  ((__xasm<int>(push(i1), op(0x37))))
		f0 =  ((__xasm<Number>(push((i5+4)), op(0x38))))
		__asm(push(f0), push((i6+4)), op(0x3d))
		i5 =  ((__xasm<int>(push((i3+4)), op(0x37))))
		i6 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i5+4)), op(0x38))))
		__asm(push(f0), push((i6+4)), op(0x3d))
		i5 =  ((__xasm<int>(push(i3), op(0x37))))
		i6 =  ((__xasm<int>(push(i1), op(0x37))))
		f0 =  ((__xasm<Number>(push((i5+8)), op(0x38))))
		__asm(push(f0), push((i6+8)), op(0x3d))
		i3 =  ((__xasm<int>(push((i3+4)), op(0x37))))
		i5 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i3+8)), op(0x38))))
		__asm(push(f0), push((i5+8)), op(0x3d))
		i2 =  (i2 + 8)
		i0 =  (i0 + 1)
		i3 =  ((__xasm<int>(push((mstate.ebp+-126)), op(0x37))))
		__asm(push(i0==i3), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_266_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_265_F"))
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_264_B"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_266_F"))
		i0 =  ((__xasm<int>(push((mstate.ebp+-72)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_278_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_267_F"))
		i0 =  ((__xasm<int>(push((mstate.ebp+-36)), op(0x37))))
		i0 =  ((__xasm<int>(push(i0), op(0x37))))
		i0 =  (i0 << 3)
		i0 =  (i0 | 4)
		i2 =  ((__xasm<int>(push((mstate.ebp+-90)), op(0x37))))
		i0 =  (i2 + i0)
	__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_268_F"), lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_268_B"), label, lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_268_F")); 
		__asm(push(i4==i0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_276_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_269_F"))
		i2 =  (0)
	__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_270_F"), lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_270_B"), label, lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_270_F")); 
		i3 =  (i2 ^ -1)
		i5 =  (i3 << 3)
		i5 =  (i0 + i5)
		i1 =  ((__xasm<int>(push(i5), op(0x37))))
		__asm(push(i1==0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_272_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_271_F"))
		i6 =  (0)
		mstate.esp -= 8
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i6), push((mstate.esp+4)), op(0x3c))
		state = 52
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state52"))
		i1 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_272_F"))
		i3 =  (i3 << 3)
		i3 =  (i0 + i3)
		i3 =  ((__xasm<int>(push((i3+4)), op(0x37))))
		__asm(push(i3!=0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_274_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_273_F"))
		i0 = i5
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_268_B"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_274_F"))
		i1 =  (0)
		mstate.esp -= 8
		__asm(push(i3), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 53
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state53"))
		i3 = mstate.eax
		mstate.esp += 8
		i2 =  (i2 + 1)
		__asm(push(i4==i5), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_276_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_275_F"))
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_270_B"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_276_F"))
		i0 =  ((__xasm<int>(push((mstate.ebp+-90)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_278_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_277_F"))
		i0 =  (0)
		mstate.esp -= 8
		i2 =  ((__xasm<int>(push((mstate.ebp+-90)), op(0x37))))
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 54
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state54"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_278_F"))
		i0 =  ((__xasm<int>(push((mstate.ebp+-126)), op(0x37))))
		__asm(push(i0<1), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_280_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_279_F"))
		i0 =  ((__xasm<int>(push((mstate.ebp+-126)), op(0x37))))
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_339_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_280_F"))
		i0 =  ((__xasm<int>(push((mstate.ebp+-81)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_281_F"))
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_142_B"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_281_F"))
		i0 =  (-1)
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_344_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_282_F"))
		mstate.esp -= 4
		i3 =  ((__xasm<int>(push((mstate.ebp+-153)), op(0x37))))
		__asm(push(i3), push(mstate.esp), op(0x3c))
		state = 55
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state55"))
		i3 = mstate.eax
		mstate.esp += 4
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_283_F"))
		mstate.esp -= 4
		i5 =  ((__xasm<int>(push((mstate.ebp+-153)), op(0x37))))
		__asm(push(i5), push(mstate.esp), op(0x3c))
		state = 56
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state56"))
		i5 = mstate.eax
		mstate.esp += 4
		i1 = i3
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_284_F"))
		i7 = i5
		__asm(push(i6<1), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_288_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_285_F"))
		i9 =  (0)
		i10 =  ((__xasm<int>(push((mstate.ebp+-117)), op(0x37))))
		i10 =  (i10 + i11)
		i12 = i9
		i13 = i9
	__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_286_F"), lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_286_B"), label, lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_286_F")); 
		i14 =  ((i9==i2) ? 1 : 0)
		i14 =  (i14 & 1)
		i9 =  (i14 + i9)
		i14 =  (i9 << 2)
		i16 =  (i15 + i14)
		f0 =  ((__xasm<Number>(push(i16), op(0x38))))
		i16 =  (i1 + i12)
		__asm(push(f0), push(i16), op(0x3d))
		i14 =  (i8 + i14)
		f0 =  ((__xasm<Number>(push(i14), op(0x38))))
		i14 =  (i7 + i12)
		__asm(push(f0), push(i14), op(0x3d))
		i12 =  (i12 + 4)
		i13 =  (i13 + 1)
		i9 =  (i9 + 1)
		__asm(push(i13==i10), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_288_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_287_F"))
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_286_B"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_288_F"))
		i1 =  (12)
		i7 =  (i2 + 1)
		i9 =  (i2 + -1)
		i9 =  ((i2==0) ? i6 : i9)
		i6 =  ((i2==i6) ? 0 : i7)
		i2 =  (i2 << 2)
		i6 =  (i6 << 2)
		i7 =  (i9 << 2)
		i9 =  (i15 + i2)
		i2 =  (i8 + i2)
		i10 =  (i15 + i6)
		i6 =  (i8 + i6)
		i12 =  (i15 + i7)
		i7 =  (i8 + i7)
		f0 =  ((__xasm<Number>(push(i7), op(0x38))))
		f1 =  ((__xasm<Number>(push(i12), op(0x38))))
		f2 =  ((__xasm<Number>(push(i6), op(0x38))))
		f3 =  ((__xasm<Number>(push(i10), op(0x38))))
		f4 =  ((__xasm<Number>(push(i2), op(0x38))))
		f5 =  ((__xasm<Number>(push(i9), op(0x38))))
		mstate.esp -= 4
		__asm(push(i1), push(mstate.esp), op(0x3c))
		state = 57
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state57"))
		i1 = mstate.eax
		mstate.esp += 4
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_289_F"))
		i2 =  (12)
		mstate.esp -= 4
		__asm(push(i2), push(mstate.esp), op(0x3c))
		state = 58
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state58"))
		i2 = mstate.eax
		mstate.esp += 4
		i6 = i1
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_290_F"))
		f6 =  (0)
		f7 =  f3/*fextend*/
		f8 =  f5/*fextend*/
		f9 =  f1/*fextend*/
		f10 =  f2/*fextend*/
		f11 =  f4/*fextend*/
		f12 =  f0/*fextend*/
		f7 =  (f7 - f8)
		f8 =  (f9 - f8)
		f9 =  (f10 - f11)
		f10 =  (f12 - f11)
		f7 =  f7/*fround*/
		f8 =  f8/*fround*/
		f9 =  f9/*fround*/
		f10 =  f10/*fround*/
		f10 =  f10/*fextend*/
		f7 =  f7/*fextend*/
		f9 =  f9/*fextend*/
		f8 =  f8/*fextend*/
		f7 =  (f7 * f10)
		f8 =  (f8 * f9)
		f7 =  f7/*fround*/
		f8 =  f8/*fround*/
		f8 =  f8/*fextend*/
		f7 =  f7/*fextend*/
		f7 =  (f7 - f8)
		__asm(push(f5), push(i6), op(0x3d))
		i7 =  (i6 + 4)
		f5 =  f7/*fround*/
		f6 =  f6/*fround*/
		i9 = i2
		f6 =  f6/*fextend*/
		f5 =  f5/*fextend*/
		__asm(push(f5<=f6), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_292_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_291_F"))
		__asm(push(f3), push(i7), op(0x3d))
		__asm(push(f1), push((i6+8)), op(0x3d))
		__asm(push(f4), push(i9), op(0x3d))
		__asm(push(f2), push((i9+4)), op(0x3d))
		__asm(push(f0), push((i9+8)), op(0x3d))
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_293_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_292_F"))
		__asm(push(f1), push(i7), op(0x3d))
		__asm(push(f3), push((i6+8)), op(0x3d))
		__asm(push(f4), push(i9), op(0x3d))
		__asm(push(f0), push((i9+4)), op(0x3d))
		__asm(push(f2), push((i9+8)), op(0x3d))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_293_F"))
		i10 =  ((__xasm<int>(push((mstate.ebp+-135)), op(0x37))))
		i10 =  ((__xasm<int>(push(i10), op(0x37))))
		f0 =  ((__xasm<Number>(push(i6), op(0x38))))
		__asm(push(f0), push(i10), op(0x3d))
		i10 =  ((__xasm<int>(push((mstate.ebp+-144)), op(0x37))))
		i10 =  ((__xasm<int>(push((i10+4)), op(0x37))))
		f0 =  ((__xasm<Number>(push(i9), op(0x38))))
		__asm(push(f0), push(i10), op(0x3d))
		i10 =  ((__xasm<int>(push((mstate.ebp+-135)), op(0x37))))
		i10 =  ((__xasm<int>(push(i10), op(0x37))))
		f0 =  ((__xasm<Number>(push(i7), op(0x38))))
		__asm(push(f0), push((i10+4)), op(0x3d))
		i7 =  ((__xasm<int>(push((mstate.ebp+-144)), op(0x37))))
		i7 =  ((__xasm<int>(push((i7+4)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i9+4)), op(0x38))))
		__asm(push(f0), push((i7+4)), op(0x3d))
		i7 =  ((__xasm<int>(push((mstate.ebp+-135)), op(0x37))))
		i7 =  ((__xasm<int>(push(i7), op(0x37))))
		f0 =  ((__xasm<Number>(push((i6+8)), op(0x38))))
		__asm(push(f0), push((i7+8)), op(0x3d))
		i6 =  ((__xasm<int>(push((mstate.ebp+-144)), op(0x37))))
		i6 =  ((__xasm<int>(push((i6+4)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i9+8)), op(0x38))))
		__asm(push(f0), push((i6+8)), op(0x3d))
		__asm(push(i15==0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_295_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_294_F"))
		i6 =  (0)
		mstate.esp -= 8
		__asm(push(i15), push(mstate.esp), op(0x3c))
		__asm(push(i6), push((mstate.esp+4)), op(0x3c))
		state = 59
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state59"))
		i6 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_295_F"))
		__asm(push(i8==0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_297_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_296_F"))
		i6 =  (0)
		mstate.esp -= 8
		__asm(push(i8), push(mstate.esp), op(0x3c))
		__asm(push(i6), push((mstate.esp+4)), op(0x3c))
		state = 60
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state60"))
		i6 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_297_F"))
		__asm(push(i1==0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_299_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_298_F"))
		i6 =  (0)
		mstate.esp -= 8
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i6), push((mstate.esp+4)), op(0x3c))
		state = 61
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state61"))
		i1 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_299_F"))
		__asm(push(i2==0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_301_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_300_F"))
		i1 =  (0)
		mstate.esp -= 8
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 62
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state62"))
		i1 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_301_F"))
		i1 =  ((__xasm<int>(push((mstate.ebp+-144)), op(0x37))))
		i1 =  (i1 + 8)
		i2 =  ((__xasm<int>(push((mstate.ebp+-153)), op(0x37))))
		i2 =  (i2 + -4)
		i6 =  (i11 + -1)
		i7 =  ((__xasm<int>(push((mstate.ebp+-126)), op(0x37))))
		i7 =  (i7 + 1)
		i8 = i5
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_303_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_302_F"))
		i7 =  (0)
		i1 =  (i0 << 2)
		i2 =  (i1 + -4)
		i1 =  (i0 + -1)
		__asm(push(i1), push((mstate.ebp+-117)), op(0x3c))
		i1 =  ((__xasm<int>(push((mstate.ebp+-108)), op(0x37))))
		i6 = i7
		i8 = i3
		i3 = i5
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_303_F"))
		__asm(push(i1), push((mstate.ebp+-144)), op(0x3c))
		i1 = i2
		__asm(push(i1), push((mstate.ebp+-153)), op(0x3c))
		i11 = i6
		i1 = i7
		__asm(push(i1), push((mstate.ebp+-126)), op(0x3c))
		i15 = i3
		i13 =  (i0 + i11)
		i5 = i8
		i9 = i15
		i1 =  ((__xasm<int>(push((mstate.ebp+-144)), op(0x37))))
		__asm(push(i1), push((mstate.ebp+-135)), op(0x3c))
		__asm(push(i13<4), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_305_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_304_F"))
		f0 =  (-10)
		f0 =  f0/*fround*/
		i2 =  (-1)
		i1 =  (0)
		i3 =  (i5 + 4)
		i18 =  (i9 + 4)
		i12 =  (i8 + 4)
		i14 =  (i15 + 4)
		i6 =  ((__xasm<int>(push((mstate.ebp+-153)), op(0x37))))
		i17 =  (i5 + i6)
		i16 =  (i9 + i6)
		i6 =  ((__xasm<int>(push((mstate.ebp+-117)), op(0x37))))
		i6 =  (i6 + i11)
		i10 = i6
		i7 = i1
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_217_B"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_305_F"))
		i0 =  (12)
		f0 =  ((__xasm<Number>(push(i8), op(0x38))))
		f1 =  ((__xasm<Number>(push(i15), op(0x38))))
		f2 =  ((__xasm<Number>(push((i8+8)), op(0x38))))
		f3 =  ((__xasm<Number>(push((i15+8)), op(0x38))))
		f4 =  ((__xasm<Number>(push((i8+4)), op(0x38))))
		f5 =  ((__xasm<Number>(push((i15+4)), op(0x38))))
		mstate.esp -= 4
		__asm(push(i0), push(mstate.esp), op(0x3c))
		state = 63
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state63"))
		i0 = mstate.eax
		mstate.esp += 4
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_306_F"))
		i1 =  (12)
		mstate.esp -= 4
		__asm(push(i1), push(mstate.esp), op(0x3c))
		state = 64
		mstate.esp -= 4;FSM__Znwm.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state64"))
		i1 = mstate.eax
		mstate.esp += 4
		i2 = i0
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_307_F"))
		f6 =  (0)
		f7 =  f3/*fextend*/
		f8 =  f5/*fextend*/
		f9 =  f1/*fextend*/
		f10 =  f2/*fextend*/
		f11 =  f4/*fextend*/
		f12 =  f0/*fextend*/
		f7 =  (f7 - f8)
		f8 =  (f9 - f8)
		f9 =  (f10 - f11)
		f10 =  (f12 - f11)
		f7 =  f7/*fround*/
		f8 =  f8/*fround*/
		f9 =  f9/*fround*/
		f10 =  f10/*fround*/
		f10 =  f10/*fextend*/
		f7 =  f7/*fextend*/
		f9 =  f9/*fextend*/
		f8 =  f8/*fextend*/
		f7 =  (f7 * f10)
		f8 =  (f8 * f9)
		f7 =  f7/*fround*/
		f8 =  f8/*fround*/
		f8 =  f8/*fextend*/
		f7 =  f7/*fextend*/
		f7 =  (f7 - f8)
		__asm(push(f5), push(i2), op(0x3d))
		i3 =  (i2 + 4)
		f5 =  f7/*fround*/
		f6 =  f6/*fround*/
		i5 = i1
		f6 =  f6/*fextend*/
		f5 =  f5/*fextend*/
		__asm(push(f5<=f6), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_309_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_308_F"))
		__asm(push(f3), push(i3), op(0x3d))
		__asm(push(f1), push((i2+8)), op(0x3d))
		__asm(push(f4), push(i5), op(0x3d))
		__asm(push(f2), push((i5+4)), op(0x3d))
		__asm(push(f0), push((i5+8)), op(0x3d))
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_310_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_309_F"))
		__asm(push(f1), push(i3), op(0x3d))
		__asm(push(f3), push((i2+8)), op(0x3d))
		__asm(push(f4), push(i5), op(0x3d))
		__asm(push(f0), push((i5+4)), op(0x3d))
		__asm(push(f2), push((i5+8)), op(0x3d))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_310_F"))
		i6 =  ((__xasm<int>(push((mstate.ebp+-126)), op(0x37))))
		i6 =  (i6 << 3)
		i6 =  (i4 + i6)
		i7 =  ((__xasm<int>(push(i6), op(0x37))))
		f0 =  ((__xasm<Number>(push(i2), op(0x38))))
		__asm(push(f0), push(i7), op(0x3d))
		i7 =  ((__xasm<int>(push((i6+4)), op(0x37))))
		f0 =  ((__xasm<Number>(push(i5), op(0x38))))
		__asm(push(f0), push(i7), op(0x3d))
		i7 =  ((__xasm<int>(push(i6), op(0x37))))
		f0 =  ((__xasm<Number>(push(i3), op(0x38))))
		__asm(push(f0), push((i7+4)), op(0x3d))
		i3 =  ((__xasm<int>(push((i6+4)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i5+4)), op(0x38))))
		__asm(push(f0), push((i3+4)), op(0x3d))
		i3 =  ((__xasm<int>(push(i6), op(0x37))))
		f0 =  ((__xasm<Number>(push((i2+8)), op(0x38))))
		__asm(push(f0), push((i3+8)), op(0x3d))
		i2 =  ((__xasm<int>(push((i6+4)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i5+8)), op(0x38))))
		__asm(push(f0), push((i2+8)), op(0x3d))
		i2 =  ((__xasm<int>(push((mstate.ebp+-126)), op(0x37))))
		i2 =  (i2 + 1)
		__asm(push(i15==0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_312_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_311_F"))
		i3 =  (0)
		mstate.esp -= 8
		__asm(push(i15), push(mstate.esp), op(0x3c))
		__asm(push(i3), push((mstate.esp+4)), op(0x3c))
		state = 65
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state65"))
		i3 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_312_F"))
		__asm(push(i8==0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_314_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_313_F"))
		i3 =  (0)
		mstate.esp -= 8
		__asm(push(i8), push(mstate.esp), op(0x3c))
		__asm(push(i3), push((mstate.esp+4)), op(0x3c))
		state = 66
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state66"))
		i3 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_314_F"))
		i3 =  ((__xasm<int>(push((mstate.ebp+-63)), op(0x37))))
		__asm(push(i3==i2), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_317_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_315_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str165336)
		i4 =  (__ZZ18TriangulatePolygonPfS_iP10b2TriangleE8__func__)
		i3 =  (__2E_str22229)
		i5 =  (762)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i4), push((mstate.esp+12)), op(0x3c))
		__asm(push(i3), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 67
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state67"))
		mstate.esp += 24
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_316_F"))
		state = 68
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state68"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_317_F"))
		__asm(push(i2<1), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_321_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_318_F"))
		i3 =  (0)
		i5 = i3
	__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_319_F"), lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_319_B"), label, lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_319_F")); 
		i6 =  ((__xasm<int>(push((mstate.ebp+-108)), op(0x37))))
		i6 =  (i6 + i5)
		i7 =  ((__xasm<int>(push(i6), op(0x37))))
		i8 =  ((__xasm<int>(push((mstate.ebp+-99)), op(0x37))))
		i8 =  (i8 + i5)
		i9 =  ((__xasm<int>(push(i8), op(0x37))))
		f0 =  ((__xasm<Number>(push(i7), op(0x38))))
		__asm(push(f0), push(i9), op(0x3d))
		i7 =  ((__xasm<int>(push((i6+4)), op(0x37))))
		i9 =  ((__xasm<int>(push((i8+4)), op(0x37))))
		f0 =  ((__xasm<Number>(push(i7), op(0x38))))
		__asm(push(f0), push(i9), op(0x3d))
		i7 =  ((__xasm<int>(push(i6), op(0x37))))
		i9 =  ((__xasm<int>(push(i8), op(0x37))))
		f0 =  ((__xasm<Number>(push((i7+4)), op(0x38))))
		__asm(push(f0), push((i9+4)), op(0x3d))
		i7 =  ((__xasm<int>(push((i6+4)), op(0x37))))
		i9 =  ((__xasm<int>(push((i8+4)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i7+4)), op(0x38))))
		__asm(push(f0), push((i9+4)), op(0x3d))
		i7 =  ((__xasm<int>(push(i6), op(0x37))))
		i9 =  ((__xasm<int>(push(i8), op(0x37))))
		f0 =  ((__xasm<Number>(push((i7+8)), op(0x38))))
		__asm(push(f0), push((i9+8)), op(0x3d))
		i6 =  ((__xasm<int>(push((i6+4)), op(0x37))))
		i7 =  ((__xasm<int>(push((i8+4)), op(0x37))))
		f0 =  ((__xasm<Number>(push((i6+8)), op(0x38))))
		__asm(push(f0), push((i7+8)), op(0x3d))
		i5 =  (i5 + 8)
		i3 =  (i3 + 1)
		__asm(push(i3==i2), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_321_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_320_F"))
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_319_B"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_321_F"))
		i3 =  ((__xasm<int>(push((mstate.ebp+-72)), op(0x37))))
		__asm(push(i3==0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_334_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_322_F"))
		i3 =  ((__xasm<int>(push((mstate.ebp+-36)), op(0x37))))
		i3 =  ((__xasm<int>(push(i3), op(0x37))))
		i3 =  (i3 << 3)
		i3 =  (i3 | 4)
		i5 =  ((__xasm<int>(push((mstate.ebp+-90)), op(0x37))))
		i3 =  (i5 + i3)
	__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_323_F"), lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_323_B"), label, lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_323_F")); 
		__asm(push(i4==i3), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_331_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_324_F"))
		i5 =  (0)
	__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_325_F"), lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_325_B"), label, lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_325_F")); 
		i6 =  (i5 ^ -1)
		i7 =  (i6 << 3)
		i7 =  (i3 + i7)
		i8 =  ((__xasm<int>(push(i7), op(0x37))))
		__asm(push(i8==0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_327_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_326_F"))
		i9 =  (0)
		mstate.esp -= 8
		__asm(push(i8), push(mstate.esp), op(0x3c))
		__asm(push(i9), push((mstate.esp+4)), op(0x3c))
		state = 69
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state69"))
		i8 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_327_F"))
		i6 =  (i6 << 3)
		i6 =  (i3 + i6)
		i6 =  ((__xasm<int>(push((i6+4)), op(0x37))))
		__asm(push(i6!=0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_329_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_328_F"))
		i3 = i7
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_323_B"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_329_F"))
		i8 =  (0)
		mstate.esp -= 8
		__asm(push(i6), push(mstate.esp), op(0x3c))
		__asm(push(i8), push((mstate.esp+4)), op(0x3c))
		state = 70
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state70"))
		i6 = mstate.eax
		mstate.esp += 8
		i5 =  (i5 + 1)
		__asm(push(i4==i7), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_331_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_330_F"))
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_325_B"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_331_F"))
		i3 =  ((__xasm<int>(push((mstate.ebp+-90)), op(0x37))))
		__asm(push(i3==0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_333_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_332_F"))
		i3 =  (0)
		mstate.esp -= 8
		i4 =  ((__xasm<int>(push((mstate.ebp+-90)), op(0x37))))
		__asm(push(i4), push(mstate.esp), op(0x3c))
		__asm(push(i3), push((mstate.esp+4)), op(0x3c))
		state = 71
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state71"))
		i3 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_333_F"))
		__asm(push(i0==0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_336_F"))
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_335_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_334_F"))
		__asm(push(i0==0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_336_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_335_F"))
		i3 =  (0)
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i3), push((mstate.esp+4)), op(0x3c))
		state = 72
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state72"))
		i0 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_336_F"))
		__asm(push(i1!=0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_338_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_337_F"))
		i0 = i2
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_339_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_338_F"))
		i0 =  (0)
		mstate.esp -= 8
		__asm(push(i1), push(mstate.esp), op(0x3c))
		__asm(push(i0), push((mstate.esp+4)), op(0x3c))
		state = 73
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state73"))
		i0 = mstate.eax
		mstate.esp += 8
		i0 = i2
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_339_F"))
		i1 =  ((__xasm<int>(push((mstate.ebp+-81)), op(0x37))))
		__asm(push(i1==0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_359_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_340_F"))
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_341_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_341_F"))
		i1 =  ((__xasm<int>(push((mstate.ebp+-81)), op(0x37))))
		__asm(push(i1!=0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_343_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_342_F"))
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_344_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_343_F"))
		i1 =  (0)
		mstate.esp -= 8
		i2 =  ((__xasm<int>(push((mstate.ebp+-81)), op(0x37))))
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 74
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state74"))
		i1 = mstate.eax
		mstate.esp += 8
	__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_344_F"), lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_344_B"), label, lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_344_F")); 
		i1 =  ((__xasm<int>(push((mstate.ebp+-9)), op(0x37))))
		__asm(push(i1==0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_346_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_345_F"))
		i1 =  (0)
		mstate.esp -= 8
		i2 =  ((__xasm<int>(push((mstate.ebp+-9)), op(0x37))))
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 75
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state75"))
		i1 = mstate.eax
		mstate.esp += 8
		i1 =  ((__xasm<int>(push((mstate.ebp+-54)), op(0x37))))
		__asm(push(i1==0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_348_F"))
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_347_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_346_F"))
		i1 =  ((__xasm<int>(push((mstate.ebp+-54)), op(0x37))))
		__asm(push(i1==0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_348_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_347_F"))
		i1 =  (0)
		mstate.esp -= 8
		i2 =  ((__xasm<int>(push((mstate.ebp+-54)), op(0x37))))
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 76
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state76"))
		i1 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_348_F"))
		i1 =  ((__xasm<int>(push((mstate.ebp+-27)), op(0x37))))
		__asm(push(i1==0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_350_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_349_F"))
		i1 =  (0)
		mstate.esp -= 8
		i2 =  ((__xasm<int>(push((mstate.ebp+-27)), op(0x37))))
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 77
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state77"))
		i1 = mstate.eax
		mstate.esp += 8
		i1 =  ((__xasm<int>(push((mstate.ebp+-45)), op(0x37))))
		__asm(push(i1==0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_352_F"))
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_351_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_350_F"))
		i1 =  ((__xasm<int>(push((mstate.ebp+-45)), op(0x37))))
		__asm(push(i1==0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_352_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_351_F"))
		i1 =  (0)
		mstate.esp -= 8
		i2 =  ((__xasm<int>(push((mstate.ebp+-45)), op(0x37))))
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 78
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state78"))
		i1 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_352_F"))
		i1 =  ((__xasm<int>(push((mstate.ebp+-18)), op(0x37))))
		__asm(push(i1!=0), iftrue, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_354_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_353_F"))
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_355_F"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_354_F"))
		i1 =  (0)
		mstate.esp -= 8
		i2 =  ((__xasm<int>(push((mstate.ebp+-18)), op(0x37))))
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		state = 79
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_state79"))
		i1 = mstate.eax
		mstate.esp += 8
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_355_F"))
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_356_F"))
		i8 =  (i11 + 4)
		i10 =  (i6 + i11)
		i14 =  (i4 + i11)
		i17 =  (i13 + 1)
		i9 = i17
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_13_B"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_357_F"))
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_197_B"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_358_F"))
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_202_B"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_359_F"))
		__asm(jump, target("__Z18TriangulatePolygonPfS_iP10b2Triangle__XprivateX__BB439_344_B"))
	__asm(lbl("__Z18TriangulatePolygonPfS_iP10b2Triangle_errState"))
		throw("Invalid state in __Z18TriangulatePolygonPfS_iP10b2Triangle")
	}
}



// Async
public const __ZN10b2PolyNode21GetRightestConnectionEPS_:int = regFunc(FSM__ZN10b2PolyNode21GetRightestConnectionEPS_.start)

public final class FSM__ZN10b2PolyNode21GetRightestConnectionEPS_ extends Machine {

	public static function start():void {
			var result:FSM__ZN10b2PolyNode21GetRightestConnectionEPS_ = new FSM__ZN10b2PolyNode21GetRightestConnectionEPS_
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int

	public static const intRegCount:int = 7
	public var f0:Number, f1:Number, f2:Number, f3:Number, f4:Number, f5:Number, f6:Number, f7:Number
	public var f8:Number, f9:Number, f10:Number, f11:Number

	public static const NumberRegCount:int = 12
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN10b2PolyNode21GetRightestConnectionEPS__entry"))
		__asm(push(state), switchjump(
			"__ZN10b2PolyNode21GetRightestConnectionEPS__errState",
			"__ZN10b2PolyNode21GetRightestConnectionEPS__state0",
			"__ZN10b2PolyNode21GetRightestConnectionEPS__state1",
			"__ZN10b2PolyNode21GetRightestConnectionEPS__state2"))
	__asm(lbl("__ZN10b2PolyNode21GetRightestConnectionEPS__state0"))
	__asm(lbl("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+136)), op(0x37))))
		i2 =  (i0 + 136)
		i3 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i4 = i0
		__asm(push(i1!=0), iftrue, target("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_2_F"))
	__asm(lbl("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_1_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i2 =  (__2E_str1670)
		i3 =  (__2E_str46253)
		i4 =  (__ZZN10b2PolyNode21GetRightestConnectionEPS_E8__func__)
		i1 =  (__2E_str22229)
		i5 =  (1514)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i2), push((mstate.esp+4)), op(0x3c))
		__asm(push(i3), push((mstate.esp+8)), op(0x3c))
		__asm(push(i4), push((mstate.esp+12)), op(0x3c))
		__asm(push(i1), push((mstate.esp+16)), op(0x3c))
		__asm(jump, target("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_16_F"))
	__asm(lbl("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_2_F"))
		i1 =  ((__xasm<int>(push(i2), op(0x37))))
		__asm(push(i1!=1), iftrue, target("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_5_F"))
	__asm(lbl("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_3_F"))
		i0 = i3
		__asm(jump, target("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_4_F"))
	__asm(jump, target("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_4_F"), lbl("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_4_B"), label, lbl("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_4_F")); 
		mstate.eax = i0
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_5_F"))
		f0 =  (1.19209e-07)
		f1 =  ((__xasm<Number>(push((i0+4)), op(0x38))))
		f2 =  ((__xasm<Number>(push(i0), op(0x38))))
		f3 =  ((__xasm<Number>(push((i3+4)), op(0x38))))
		f4 =  ((__xasm<Number>(push(i3), op(0x38))))
		f5 =  f1/*fextend*/
		f6 =  f2/*fextend*/
		f3 =  (f5 - f3)
		f4 =  (f6 - f4)
		f3 =  f3/*fround*/
		f4 =  f4/*fround*/
		f5 =  f3/*fextend*/
		f6 =  f4/*fextend*/
		f5 =  (f5 * f5)
		f6 =  (f6 * f6)
		f5 =  f5/*fround*/
		f6 =  f6/*fround*/
		f5 =  f5/*fextend*/
		f6 =  f6/*fextend*/
		f5 =  (f6 + f5)
		f5 =  f5/*fround*/
		f5 =  f5/*fextend*/
		f5 =  Math.sqrt(f5)
		f5 =  f5/*fround*/
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f6 =  f5/*fextend*/
		__asm(push(f6>=f0), iftrue, target("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_7_F"))
	__asm(lbl("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_6_F"))
		i0 =  (1)
		__asm(jump, target("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_8_F"))
	__asm(lbl("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_7_F"))
		f0 =  (1)
		f0 =  f0/*fround*/
		f0 =  f0/*fextend*/
		f5 =  f5/*fextend*/
		f0 =  (f0 / f5)
		f0 =  f0/*fround*/
		f6 =  (1.19209e-07)
		f6 =  f6/*fround*/
		f4 =  f4/*fextend*/
		f0 =  f0/*fextend*/
		f3 =  f3/*fextend*/
		f4 =  (f4 * f0)
		f0 =  (f3 * f0)
		f3 =  f6/*fextend*/
		f4 =  f4/*fround*/
		f0 =  f0/*fround*/
		i0 =  ((f5<=f3) ? 1 : 0)
		f3 = f0
	__asm(lbl("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_8_F"))
		f0 = f4
		i0 =  (i0 & 1)
		__asm(push(i0!=0), iftrue, target("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_13_F"))
	__asm(lbl("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_9_F"))
		i0 =  (0)
		i2 =  (i4 + 8)
		i4 = i0
		__asm(jump, target("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_10_F"))
	__asm(jump, target("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_10_F"), lbl("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_10_B"), label, lbl("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_10_F")); 
		i6 = i2
		i5 = i0
		i2 = i4
		i0 = i6
		__asm(push(i1>i5), iftrue, target("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_17_F"))
		__asm(jump, target("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_11_F"))
	__asm(lbl("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_11_F"))
		__asm(push(i2==0), iftrue, target("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_37_F"))
		__asm(jump, target("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_12_F"))
	__asm(lbl("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_12_F"))
		i0 = i2
		__asm(jump, target("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_4_B"))
	__asm(lbl("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_13_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str166)
		i3 =  (__ZZN10b2PolyNode21GetRightestConnectionEPS_E8__func__)
		i4 =  (__2E_str22229)
		i5 =  (1524)
	__asm(jump, target("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_14_F"), lbl("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_14_B"), label, lbl("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_14_F")); 
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
	__asm(jump, target("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_15_F"), lbl("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_15_B"), label, lbl("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_15_F")); 
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
	__asm(lbl("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_16_F"))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 1
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__ZN10b2PolyNode21GetRightestConnectionEPS__state1"))
		mstate.esp += 24
		state = 2
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZN10b2PolyNode21GetRightestConnectionEPS__state2"))
	__asm(lbl("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_17_F"))
		i0 =  ((__xasm<int>(push(i0), op(0x37))))
		__asm(push(i0!=i3), iftrue, target("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_20_F"))
	__asm(jump, target("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_18_F"), lbl("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_18_B"), label, lbl("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_18_F")); 
		i0 = i2
		__asm(jump, target("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_19_F"))
	__asm(jump, target("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_19_F"), lbl("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_19_B"), label, lbl("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_19_F")); 
		__asm(jump, target("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_34_F"))
	__asm(lbl("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_20_F"))
		f4 =  (1.19209e-07)
		f5 =  ((__xasm<Number>(push((i0+4)), op(0x38))))
		f6 =  ((__xasm<Number>(push(i0), op(0x38))))
		f7 =  f1/*fextend*/
		f8 =  f2/*fextend*/
		f5 =  (f5 - f7)
		f6 =  (f6 - f8)
		f5 =  f5/*fround*/
		f6 =  f6/*fround*/
		f7 =  f5/*fextend*/
		f8 =  f6/*fextend*/
		f7 =  (f7 * f7)
		f8 =  (f8 * f8)
		f7 =  f7/*fround*/
		f8 =  f8/*fround*/
		f7 =  f7/*fextend*/
		f8 =  f8/*fextend*/
		f7 =  (f8 + f7)
		f7 =  f7/*fround*/
		f8 =  f7/*fextend*/
		f8 =  Math.sqrt(f8)
		f8 =  f8/*fround*/
		f4 =  f4/*fround*/
		f4 =  f4/*fextend*/
		f9 =  f8/*fextend*/
		__asm(push(f9>=f4), iftrue, target("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_22_F"))
	__asm(lbl("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_21_F"))
		__asm(jump, target("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_23_F"))
	__asm(lbl("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_22_F"))
		f4 =  (1)
		f4 =  f4/*fround*/
		f8 =  f8/*fextend*/
		f4 =  f4/*fextend*/
		f4 =  (f4 / f8)
		f4 =  f4/*fround*/
		f6 =  f6/*fextend*/
		f4 =  f4/*fextend*/
		f5 =  f5/*fextend*/
		f6 =  (f6 * f4)
		f4 =  (f5 * f4)
		f5 =  f6/*fround*/
		f4 =  f4/*fround*/
		f6 = f5
		f5 = f4
	__asm(lbl("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_23_F"))
		f4 = f6
		f6 =  (1.42109e-14)
		f6 =  f6/*fround*/
		f6 =  f6/*fextend*/
		f7 =  f7/*fextend*/
		__asm(push(f7>=f6), iftrue, target("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_25_F"))
	__asm(lbl("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_24_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i2 =  (__2E_str1670)
		i1 =  (__2E_str167337)
		i3 =  (__ZZN10b2PolyNode21GetRightestConnectionEPS_E8__func__)
		i4 =  (__2E_str22229)
		i5 =  (1539)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i2), push((mstate.esp+4)), op(0x3c))
		__asm(push(i1), push((mstate.esp+8)), op(0x3c))
		__asm(jump, target("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_15_B"))
	__asm(lbl("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_25_F"))
		f6 =  f0/*fextend*/
		f4 =  f4/*fextend*/
		f5 =  f5/*fextend*/
		f7 =  f3/*fextend*/
		f8 =  (f6 * f4)
		f6 =  (f6 * f5)
		f4 =  (f7 * f4)
		f5 =  (f7 * f5)
		f7 =  f8/*fround*/
		f6 =  f6/*fround*/
		f4 =  f4/*fround*/
		f5 =  f5/*fround*/
		f5 =  f5/*fextend*/
		f7 =  f7/*fextend*/
		f4 =  f4/*fextend*/
		f6 =  f6/*fextend*/
		f5 =  (f7 + f5)
		f4 =  (f6 - f4)
		f5 =  f5/*fround*/
		f4 =  f4/*fround*/
		__asm(push(i2!=0), iftrue, target("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_27_F"))
	__asm(lbl("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_26_F"))
		__asm(jump, target("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_19_B"))
	__asm(lbl("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_27_F"))
		f6 =  (1.19209e-07)
		f7 =  ((__xasm<Number>(push((i2+4)), op(0x38))))
		f8 =  ((__xasm<Number>(push(i2), op(0x38))))
		f9 =  f1/*fextend*/
		f10 =  f2/*fextend*/
		f7 =  (f7 - f9)
		f8 =  (f8 - f10)
		f7 =  f7/*fround*/
		f8 =  f8/*fround*/
		f9 =  f7/*fextend*/
		f10 =  f8/*fextend*/
		f9 =  (f9 * f9)
		f10 =  (f10 * f10)
		f9 =  f9/*fround*/
		f10 =  f10/*fround*/
		f9 =  f9/*fextend*/
		f10 =  f10/*fextend*/
		f9 =  (f10 + f9)
		f9 =  f9/*fround*/
		f9 =  f9/*fextend*/
		f9 =  Math.sqrt(f9)
		f9 =  f9/*fround*/
		f6 =  f6/*fround*/
		f6 =  f6/*fextend*/
		f10 =  f9/*fextend*/
		__asm(push(f10>=f6), iftrue, target("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_29_F"))
	__asm(lbl("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_28_F"))
		__asm(jump, target("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_30_F"))
	__asm(lbl("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_29_F"))
		f6 =  (1)
		f6 =  f6/*fround*/
		f9 =  f9/*fextend*/
		f6 =  f6/*fextend*/
		f6 =  (f6 / f9)
		f6 =  f6/*fround*/
		f8 =  f8/*fextend*/
		f6 =  f6/*fextend*/
		f7 =  f7/*fextend*/
		f8 =  (f8 * f6)
		f6 =  (f7 * f6)
		f7 =  f8/*fround*/
		f6 =  f6/*fround*/
		f8 = f7
		f7 = f6
	__asm(lbl("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_30_F"))
		f6 = f8
		f8 =  (0)
		f9 =  f0/*fextend*/
		f6 =  f6/*fextend*/
		f7 =  f7/*fextend*/
		f10 =  f3/*fextend*/
		f11 =  (f9 * f6)
		f9 =  (f9 * f7)
		f6 =  (f10 * f6)
		f7 =  (f10 * f7)
		f10 =  f11/*fround*/
		f9 =  f9/*fround*/
		f6 =  f6/*fround*/
		f7 =  f7/*fround*/
		f7 =  f7/*fextend*/
		f10 =  f10/*fextend*/
		f6 =  f6/*fextend*/
		f9 =  f9/*fextend*/
		f7 =  (f10 + f7)
		f6 =  (f9 - f6)
		f7 =  f7/*fround*/
		f6 =  f6/*fround*/
		f8 =  f8/*fround*/
		f8 =  f8/*fextend*/
		f4 =  f4/*fextend*/
		__asm(push(f4>=f8), iftrue, target("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_35_F"))
	__asm(lbl("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_31_F"))
		f4 =  f7/*fextend*/
		f5 =  f5/*fextend*/
		__asm(push(f5<=f4), iftrue, target("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_33_F"))
	__asm(lbl("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_32_F"))
		f4 =  (0)
		f5 =  f4/*fround*/
		f4 =  f5/*fextend*/
		f5 =  f6/*fextend*/
		__asm(push(f5<=f4), iftrue, target("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_18_B"))
	__asm(jump, target("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_33_F"), lbl("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_33_B"), label, lbl("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_33_F")); 
		__asm(jump, target("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_34_F"))
	__asm(lbl("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_34_F"))
		i4 = i0
		i0 =  (i6 + 4)
		i5 =  (i5 + 1)
		i2 = i0
		i0 = i5
		__asm(jump, target("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_10_B"))
	__asm(lbl("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_35_F"))
		f4 =  f7/*fextend*/
		f5 =  f5/*fextend*/
		__asm(push(f5<=f4), iftrue, target("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_18_B"))
	__asm(lbl("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_36_F"))
		f4 =  (0)
		f4 =  f4/*fround*/
		f4 =  f4/*fextend*/
		f5 =  f6/*fextend*/
		__asm(push(f5>=f4), iftrue, target("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_33_B"))
		__asm(jump, target("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_18_B"))
	__asm(lbl("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_37_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str170)
		i3 =  (__ZZN10b2PolyNode21GetRightestConnectionEPS_E8__func__)
		i4 =  (__2E_str22229)
		i5 =  (1560)
		__asm(jump, target("__ZN10b2PolyNode21GetRightestConnectionEPS___XprivateX__BB440_14_B"))
	__asm(lbl("__ZN10b2PolyNode21GetRightestConnectionEPS__errState"))
		throw("Invalid state in __ZN10b2PolyNode21GetRightestConnectionEPS_")
	}
}



// Async
public const __ZN8b2IslandD1Ev:int = regFunc(FSM__ZN8b2IslandD1Ev.start)

public final class FSM__ZN8b2IslandD1Ev extends Machine {

	public static function start():void {
			var result:FSM__ZN8b2IslandD1Ev = new FSM__ZN8b2IslandD1Ev
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int

	public static const intRegCount:int = 7

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN8b2IslandD1Ev_entry"))
		__asm(push(state), switchjump(
			"__ZN8b2IslandD1Ev_errState",
			"__ZN8b2IslandD1Ev_state0",
			"__ZN8b2IslandD1Ev_state1",
			"__ZN8b2IslandD1Ev_state2",
			"__ZN8b2IslandD1Ev_state3",
			"__ZN8b2IslandD1Ev_state4",
			"__ZN8b2IslandD1Ev_state5",
			"__ZN8b2IslandD1Ev_state6",
			"__ZN8b2IslandD1Ev_state7"))
	__asm(lbl("__ZN8b2IslandD1Ev_state0"))
	__asm(lbl("__ZN8b2IslandD1Ev__XprivateX__BB441_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push(i0), op(0x37))))
		i2 =  ((__xasm<int>(push((i0+20)), op(0x37))))
		i3 =  ((__xasm<int>(push((i1+102796)), op(0x37))))
		i4 =  (i1 + 102796)
		i5 = i0
		__asm(push(i3>0), iftrue, target("__ZN8b2IslandD1Ev__XprivateX__BB441_2_F"))
	__asm(jump, target("__ZN8b2IslandD1Ev__XprivateX__BB441_1_F"), lbl("__ZN8b2IslandD1Ev__XprivateX__BB441_1_B"), label, lbl("__ZN8b2IslandD1Ev__XprivateX__BB441_1_F")); 
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str85292)
		i4 =  (__ZZN16b2BlockAllocator4FreeEPviE8__func__)
		i5 =  (__2E_str10217)
		i3 =  (63)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i4), push((mstate.esp+12)), op(0x3c))
		__asm(push(i5), push((mstate.esp+16)), op(0x3c))
		__asm(push(i3), push((mstate.esp+20)), op(0x3c))
		__asm(jump, target("__ZN8b2IslandD1Ev__XprivateX__BB441_5_F"))
	__asm(lbl("__ZN8b2IslandD1Ev__XprivateX__BB441_2_F"))
		i3 =  ((__xasm<int>(push(i4), op(0x37))))
		i3 =  (i3 + -1)
		i6 =  (i3 * 12)
		i6 =  (i1 + i6)
		i6 =  ((__xasm<int>(push((i6+102412)), op(0x37))))
		__asm(push(i6==i2), iftrue, target("__ZN8b2IslandD1Ev__XprivateX__BB441_6_F"))
	__asm(jump, target("__ZN8b2IslandD1Ev__XprivateX__BB441_3_F"), lbl("__ZN8b2IslandD1Ev__XprivateX__BB441_3_B"), label, lbl("__ZN8b2IslandD1Ev__XprivateX__BB441_3_F")); 
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str86293)
		i3 =  (__ZZN16b2BlockAllocator4FreeEPviE8__func__)
		i4 =  (__2E_str10217)
		i5 =  (65)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
	__asm(jump, target("__ZN8b2IslandD1Ev__XprivateX__BB441_4_F"), lbl("__ZN8b2IslandD1Ev__XprivateX__BB441_4_B"), label, lbl("__ZN8b2IslandD1Ev__XprivateX__BB441_4_F")); 
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
	__asm(lbl("__ZN8b2IslandD1Ev__XprivateX__BB441_5_F"))
		state = 1
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__ZN8b2IslandD1Ev_state1"))
		mstate.esp += 24
		state = 2
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZN8b2IslandD1Ev_state2"))
	__asm(lbl("__ZN8b2IslandD1Ev__XprivateX__BB441_6_F"))
		i6 =  (i3 * 12)
		i6 =  (i1 + i6)
		i6 =  ((__xasm<int>(push((i6+102420)), op(0x35))))
		__asm(push(i6==0), iftrue, target("__ZN8b2IslandD1Ev__XprivateX__BB441_8_F"))
	__asm(lbl("__ZN8b2IslandD1Ev__XprivateX__BB441_7_F"))
		i6 =  (0)
		mstate.esp -= 8
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i6), push((mstate.esp+4)), op(0x3c))
		state = 3
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN8b2IslandD1Ev_state3"))
		i2 = mstate.eax
		mstate.esp += 8
		__asm(jump, target("__ZN8b2IslandD1Ev__XprivateX__BB441_9_F"))
	__asm(lbl("__ZN8b2IslandD1Ev__XprivateX__BB441_8_F"))
		i2 =  (i3 * 12)
		i2 =  (i1 + i2)
		i6 =  ((__xasm<int>(push((i1+102400)), op(0x37))))
		i2 =  ((__xasm<int>(push((i2+102416)), op(0x37))))
		i2 =  (i6 - i2)
		__asm(push(i2), push((i1+102400)), op(0x3c))
	__asm(lbl("__ZN8b2IslandD1Ev__XprivateX__BB441_9_F"))
		i2 =  (i3 * 12)
		i2 =  (i1 + i2)
		i3 =  ((__xasm<int>(push((i1+102404)), op(0x37))))
		i2 =  ((__xasm<int>(push((i2+102416)), op(0x37))))
		i2 =  (i3 - i2)
		__asm(push(i2), push((i1+102404)), op(0x3c))
		i1 =  ((__xasm<int>(push(i4), op(0x37))))
		i1 =  (i1 + -1)
		__asm(push(i1), push(i4), op(0x3c))
		i1 =  ((__xasm<int>(push(i5), op(0x37))))
		i2 =  ((__xasm<int>(push((i0+24)), op(0x37))))
		i3 =  ((__xasm<int>(push((i1+102796)), op(0x37))))
		i4 =  (i1 + 102796)
		__asm(push(i3>0), iftrue, target("__ZN8b2IslandD1Ev__XprivateX__BB441_11_F"))
	__asm(jump, target("__ZN8b2IslandD1Ev__XprivateX__BB441_10_F"), lbl("__ZN8b2IslandD1Ev__XprivateX__BB441_10_B"), label, lbl("__ZN8b2IslandD1Ev__XprivateX__BB441_10_F")); 
		__asm(jump, target("__ZN8b2IslandD1Ev__XprivateX__BB441_1_B"))
	__asm(lbl("__ZN8b2IslandD1Ev__XprivateX__BB441_11_F"))
		i3 =  ((__xasm<int>(push(i4), op(0x37))))
		i3 =  (i3 + -1)
		i6 =  (i3 * 12)
		i6 =  (i1 + i6)
		i6 =  ((__xasm<int>(push((i6+102412)), op(0x37))))
		__asm(push(i6==i2), iftrue, target("__ZN8b2IslandD1Ev__XprivateX__BB441_13_F"))
	__asm(jump, target("__ZN8b2IslandD1Ev__XprivateX__BB441_12_F"), lbl("__ZN8b2IslandD1Ev__XprivateX__BB441_12_B"), label, lbl("__ZN8b2IslandD1Ev__XprivateX__BB441_12_F")); 
		__asm(jump, target("__ZN8b2IslandD1Ev__XprivateX__BB441_3_B"))
	__asm(lbl("__ZN8b2IslandD1Ev__XprivateX__BB441_13_F"))
		i6 =  (i3 * 12)
		i6 =  (i1 + i6)
		i6 =  ((__xasm<int>(push((i6+102420)), op(0x35))))
		__asm(push(i6==0), iftrue, target("__ZN8b2IslandD1Ev__XprivateX__BB441_15_F"))
	__asm(lbl("__ZN8b2IslandD1Ev__XprivateX__BB441_14_F"))
		i6 =  (0)
		mstate.esp -= 8
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i6), push((mstate.esp+4)), op(0x3c))
		state = 4
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN8b2IslandD1Ev_state4"))
		i2 = mstate.eax
		mstate.esp += 8
		__asm(jump, target("__ZN8b2IslandD1Ev__XprivateX__BB441_16_F"))
	__asm(lbl("__ZN8b2IslandD1Ev__XprivateX__BB441_15_F"))
		i2 =  (i3 * 12)
		i2 =  (i1 + i2)
		i6 =  ((__xasm<int>(push((i1+102400)), op(0x37))))
		i2 =  ((__xasm<int>(push((i2+102416)), op(0x37))))
		i2 =  (i6 - i2)
		__asm(push(i2), push((i1+102400)), op(0x3c))
	__asm(lbl("__ZN8b2IslandD1Ev__XprivateX__BB441_16_F"))
		i2 =  (i3 * 12)
		i2 =  (i1 + i2)
		i3 =  ((__xasm<int>(push((i1+102404)), op(0x37))))
		i2 =  ((__xasm<int>(push((i2+102416)), op(0x37))))
		i2 =  (i3 - i2)
		__asm(push(i2), push((i1+102404)), op(0x3c))
		i1 =  ((__xasm<int>(push(i4), op(0x37))))
		i1 =  (i1 + -1)
		__asm(push(i1), push(i4), op(0x3c))
		i1 =  ((__xasm<int>(push(i5), op(0x37))))
		i2 =  ((__xasm<int>(push((i0+16)), op(0x37))))
		i3 =  ((__xasm<int>(push((i1+102796)), op(0x37))))
		i4 =  (i1 + 102796)
		__asm(push(i3>0), iftrue, target("__ZN8b2IslandD1Ev__XprivateX__BB441_18_F"))
	__asm(lbl("__ZN8b2IslandD1Ev__XprivateX__BB441_17_F"))
		__asm(jump, target("__ZN8b2IslandD1Ev__XprivateX__BB441_24_F"))
	__asm(lbl("__ZN8b2IslandD1Ev__XprivateX__BB441_18_F"))
		i3 =  ((__xasm<int>(push(i4), op(0x37))))
		i3 =  (i3 + -1)
		i6 =  (i3 * 12)
		i6 =  (i1 + i6)
		i6 =  ((__xasm<int>(push((i6+102412)), op(0x37))))
		__asm(push(i6==i2), iftrue, target("__ZN8b2IslandD1Ev__XprivateX__BB441_20_F"))
	__asm(jump, target("__ZN8b2IslandD1Ev__XprivateX__BB441_19_F"), lbl("__ZN8b2IslandD1Ev__XprivateX__BB441_19_B"), label, lbl("__ZN8b2IslandD1Ev__XprivateX__BB441_19_F")); 
		__asm(jump, target("__ZN8b2IslandD1Ev__XprivateX__BB441_12_B"))
	__asm(lbl("__ZN8b2IslandD1Ev__XprivateX__BB441_20_F"))
		i6 =  (i3 * 12)
		i6 =  (i1 + i6)
		i6 =  ((__xasm<int>(push((i6+102420)), op(0x35))))
		__asm(push(i6==0), iftrue, target("__ZN8b2IslandD1Ev__XprivateX__BB441_22_F"))
	__asm(lbl("__ZN8b2IslandD1Ev__XprivateX__BB441_21_F"))
		i6 =  (0)
		mstate.esp -= 8
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i6), push((mstate.esp+4)), op(0x3c))
		state = 5
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN8b2IslandD1Ev_state5"))
		i2 = mstate.eax
		mstate.esp += 8
		__asm(jump, target("__ZN8b2IslandD1Ev__XprivateX__BB441_23_F"))
	__asm(lbl("__ZN8b2IslandD1Ev__XprivateX__BB441_22_F"))
		i2 =  (i3 * 12)
		i2 =  (i1 + i2)
		i6 =  ((__xasm<int>(push((i1+102400)), op(0x37))))
		i2 =  ((__xasm<int>(push((i2+102416)), op(0x37))))
		i2 =  (i6 - i2)
		__asm(push(i2), push((i1+102400)), op(0x3c))
	__asm(lbl("__ZN8b2IslandD1Ev__XprivateX__BB441_23_F"))
		i2 =  (i3 * 12)
		i2 =  (i1 + i2)
		i3 =  ((__xasm<int>(push((i1+102404)), op(0x37))))
		i2 =  ((__xasm<int>(push((i2+102416)), op(0x37))))
		i2 =  (i3 - i2)
		__asm(push(i2), push((i1+102404)), op(0x3c))
		i1 =  ((__xasm<int>(push(i4), op(0x37))))
		i1 =  (i1 + -1)
		__asm(push(i1), push(i4), op(0x3c))
		i1 =  ((__xasm<int>(push(i5), op(0x37))))
		i2 =  ((__xasm<int>(push((i0+12)), op(0x37))))
		i3 =  ((__xasm<int>(push((i1+102796)), op(0x37))))
		i4 =  (i1 + 102796)
		__asm(push(i3>0), iftrue, target("__ZN8b2IslandD1Ev__XprivateX__BB441_25_F"))
	__asm(lbl("__ZN8b2IslandD1Ev__XprivateX__BB441_24_F"))
		__asm(jump, target("__ZN8b2IslandD1Ev__XprivateX__BB441_10_B"))
	__asm(lbl("__ZN8b2IslandD1Ev__XprivateX__BB441_25_F"))
		i3 =  ((__xasm<int>(push(i4), op(0x37))))
		i3 =  (i3 + -1)
		i6 =  (i3 * 12)
		i6 =  (i1 + i6)
		i6 =  ((__xasm<int>(push((i6+102412)), op(0x37))))
		__asm(push(i6==i2), iftrue, target("__ZN8b2IslandD1Ev__XprivateX__BB441_27_F"))
	__asm(jump, target("__ZN8b2IslandD1Ev__XprivateX__BB441_26_F"), lbl("__ZN8b2IslandD1Ev__XprivateX__BB441_26_B"), label, lbl("__ZN8b2IslandD1Ev__XprivateX__BB441_26_F")); 
		__asm(jump, target("__ZN8b2IslandD1Ev__XprivateX__BB441_19_B"))
	__asm(lbl("__ZN8b2IslandD1Ev__XprivateX__BB441_27_F"))
		i6 =  (i3 * 12)
		i6 =  (i1 + i6)
		i6 =  ((__xasm<int>(push((i6+102420)), op(0x35))))
		__asm(push(i6==0), iftrue, target("__ZN8b2IslandD1Ev__XprivateX__BB441_29_F"))
	__asm(lbl("__ZN8b2IslandD1Ev__XprivateX__BB441_28_F"))
		i6 =  (0)
		mstate.esp -= 8
		__asm(push(i2), push(mstate.esp), op(0x3c))
		__asm(push(i6), push((mstate.esp+4)), op(0x3c))
		state = 6
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN8b2IslandD1Ev_state6"))
		i2 = mstate.eax
		mstate.esp += 8
		__asm(jump, target("__ZN8b2IslandD1Ev__XprivateX__BB441_30_F"))
	__asm(lbl("__ZN8b2IslandD1Ev__XprivateX__BB441_29_F"))
		i2 =  (i3 * 12)
		i2 =  (i1 + i2)
		i6 =  ((__xasm<int>(push((i1+102400)), op(0x37))))
		i2 =  ((__xasm<int>(push((i2+102416)), op(0x37))))
		i2 =  (i6 - i2)
		__asm(push(i2), push((i1+102400)), op(0x3c))
	__asm(lbl("__ZN8b2IslandD1Ev__XprivateX__BB441_30_F"))
		i2 =  (i3 * 12)
		i2 =  (i1 + i2)
		i3 =  ((__xasm<int>(push((i1+102404)), op(0x37))))
		i2 =  ((__xasm<int>(push((i2+102416)), op(0x37))))
		i2 =  (i3 - i2)
		__asm(push(i2), push((i1+102404)), op(0x3c))
		i1 =  ((__xasm<int>(push(i4), op(0x37))))
		i1 =  (i1 + -1)
		__asm(push(i1), push(i4), op(0x3c))
		i1 =  ((__xasm<int>(push(i5), op(0x37))))
		i0 =  ((__xasm<int>(push((i0+8)), op(0x37))))
		i2 =  ((__xasm<int>(push((i1+102796)), op(0x37))))
		i3 =  (i1 + 102796)
		__asm(push(i2>0), iftrue, target("__ZN8b2IslandD1Ev__XprivateX__BB441_32_F"))
	__asm(lbl("__ZN8b2IslandD1Ev__XprivateX__BB441_31_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i3 =  (__2E_str85292)
		i2 =  (__ZZN16b2BlockAllocator4FreeEPviE8__func__)
		i4 =  (__2E_str10217)
		i5 =  (63)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i3), push((mstate.esp+8)), op(0x3c))
		__asm(push(i2), push((mstate.esp+12)), op(0x3c))
		__asm(jump, target("__ZN8b2IslandD1Ev__XprivateX__BB441_4_B"))
	__asm(lbl("__ZN8b2IslandD1Ev__XprivateX__BB441_32_F"))
		i2 =  ((__xasm<int>(push(i3), op(0x37))))
		i2 =  (i2 + -1)
		i4 =  (i2 * 12)
		i4 =  (i1 + i4)
		i4 =  ((__xasm<int>(push((i4+102412)), op(0x37))))
		__asm(push(i4==i0), iftrue, target("__ZN8b2IslandD1Ev__XprivateX__BB441_34_F"))
	__asm(lbl("__ZN8b2IslandD1Ev__XprivateX__BB441_33_F"))
		__asm(jump, target("__ZN8b2IslandD1Ev__XprivateX__BB441_26_B"))
	__asm(lbl("__ZN8b2IslandD1Ev__XprivateX__BB441_34_F"))
		i4 =  (i2 * 12)
		i4 =  (i1 + i4)
		i4 =  ((__xasm<int>(push((i4+102420)), op(0x35))))
		__asm(push(i4==0), iftrue, target("__ZN8b2IslandD1Ev__XprivateX__BB441_36_F"))
	__asm(lbl("__ZN8b2IslandD1Ev__XprivateX__BB441_35_F"))
		i4 =  (0)
		mstate.esp -= 8
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i4), push((mstate.esp+4)), op(0x3c))
		state = 7
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN8b2IslandD1Ev_state7"))
		i0 = mstate.eax
		mstate.esp += 8
		__asm(jump, target("__ZN8b2IslandD1Ev__XprivateX__BB441_37_F"))
	__asm(lbl("__ZN8b2IslandD1Ev__XprivateX__BB441_36_F"))
		i0 =  (i2 * 12)
		i0 =  (i1 + i0)
		i4 =  ((__xasm<int>(push((i1+102400)), op(0x37))))
		i0 =  ((__xasm<int>(push((i0+102416)), op(0x37))))
		i0 =  (i4 - i0)
		__asm(push(i0), push((i1+102400)), op(0x3c))
	__asm(lbl("__ZN8b2IslandD1Ev__XprivateX__BB441_37_F"))
		i0 =  (i2 * 12)
		i0 =  (i1 + i0)
		i2 =  ((__xasm<int>(push((i1+102404)), op(0x37))))
		i0 =  ((__xasm<int>(push((i0+102416)), op(0x37))))
		i0 =  (i2 - i0)
		__asm(push(i0), push((i1+102404)), op(0x3c))
		i0 =  ((__xasm<int>(push(i3), op(0x37))))
		i0 =  (i0 + -1)
		__asm(push(i0), push(i3), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN8b2IslandD1Ev_errState"))
		throw("Invalid state in __ZN8b2IslandD1Ev")
	}
}



// Async
public const __ZN9b2Fixture7DestroyEP16b2BlockAllocator:int = regFunc(FSM__ZN9b2Fixture7DestroyEP16b2BlockAllocator.start)

public final class FSM__ZN9b2Fixture7DestroyEP16b2BlockAllocator extends Machine {

	public static function start():void {
			var result:FSM__ZN9b2Fixture7DestroyEP16b2BlockAllocator = new FSM__ZN9b2Fixture7DestroyEP16b2BlockAllocator
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int

	public static const intRegCount:int = 6

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN9b2Fixture7DestroyEP16b2BlockAllocator_entry"))
		__asm(push(state), switchjump(
			"__ZN9b2Fixture7DestroyEP16b2BlockAllocator_errState",
			"__ZN9b2Fixture7DestroyEP16b2BlockAllocator_state0",
			"__ZN9b2Fixture7DestroyEP16b2BlockAllocator_state1",
			"__ZN9b2Fixture7DestroyEP16b2BlockAllocator_state2",
			"__ZN9b2Fixture7DestroyEP16b2BlockAllocator_state3",
			"__ZN9b2Fixture7DestroyEP16b2BlockAllocator_state4",
			"__ZN9b2Fixture7DestroyEP16b2BlockAllocator_state5",
			"__ZN9b2Fixture7DestroyEP16b2BlockAllocator_state6",
			"__ZN9b2Fixture7DestroyEP16b2BlockAllocator_state7",
			"__ZN9b2Fixture7DestroyEP16b2BlockAllocator_state8"))
	__asm(lbl("__ZN9b2Fixture7DestroyEP16b2BlockAllocator_state0"))
	__asm(lbl("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i2 =  ((__xasm<int>(push((i0+32)), op(0x37))))
		__asm(push(i2==0), iftrue, target("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_2_F"))
	__asm(lbl("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_1_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str96303)
		i3 =  (__ZZN9b2Contact7DestroyEPS_P16b2BlockAllocatorE8__func__)
		i4 =  (__2E_str95302)
		i5 =  (79)
		__asm(jump, target("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_28_F"))
	__asm(lbl("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_2_F"))
		i2 =  ((__xasm<int>(push((i0+16)), op(0x37))))
		i3 =  ((__xasm<int>(push(i2), op(0x37))))
		i3 =  ((__xasm<int>(push((i3+12)), op(0x37))))
		mstate.esp -= 4
		__asm(push(i2), push(mstate.esp), op(0x3c))
		state = 1
		mstate.esp -= 4;(mstate.funcs[i3])()
		return
	__asm(lbl("__ZN9b2Fixture7DestroyEP16b2BlockAllocator_state1"))
		i2 = mstate.eax
		mstate.esp += 4
		i3 =  ((__xasm<int>(push((i0+28)), op(0x37))))
		i4 =  (i0 + 28)
		i2 =  (i2 * 28)
		i0 =  (i0 + 16)
		__asm(push(i2==0), iftrue, target("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_10_F"))
	__asm(lbl("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_3_F"))
		__asm(push(i2>0), iftrue, target("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_5_F"))
	__asm(lbl("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_4_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str82289)
		i3 =  (__ZZN16b2BlockAllocator4FreeEPviE8__func__)
		i4 =  (__2E_str78285)
		i5 =  (164)
		__asm(jump, target("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_28_F"))
	__asm(lbl("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_5_F"))
		__asm(push(i2<641), iftrue, target("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_7_F"))
	__asm(lbl("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_6_F"))
		i2 =  (0)
		mstate.esp -= 8
		__asm(push(i3), push(mstate.esp), op(0x3c))
		__asm(push(i2), push((mstate.esp+4)), op(0x3c))
		state = 2
		mstate.esp -= 4;FSM_pubrealloc.start()
		return
	__asm(lbl("__ZN9b2Fixture7DestroyEP16b2BlockAllocator_state2"))
		i2 = mstate.eax
		mstate.esp += 8
		__asm(jump, target("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_10_F"))
	__asm(lbl("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_7_F"))
		i5 =  (__ZN16b2BlockAllocator17s_blockSizeLookupE)
		i2 =  (i5 + i2)
		i2 =  ((__xasm<int>(push(i2), op(0x35))))
		__asm(push(uint(i2)<uint(14)), iftrue, target("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_9_F"))
	__asm(jump, target("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_8_F"), lbl("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_8_B"), label, lbl("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_8_F")); 
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str83290)
		i3 =  (__ZZN16b2BlockAllocator4FreeEPviE8__func__)
		i4 =  (__2E_str78285)
		i5 =  (173)
		__asm(jump, target("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_28_F"))
	__asm(lbl("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_9_F"))
		i2 =  (i2 & 255)
		i2 =  (i2 << 2)
		i2 =  (i1 + i2)
		i5 =  ((__xasm<int>(push((i2+12)), op(0x37))))
		__asm(push(i5), push(i3), op(0x3c))
		__asm(push(i3), push((i2+12)), op(0x3c))
	__asm(lbl("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_10_F"))
		i2 =  (0)
		__asm(push(i2), push(i4), op(0x3c))
		i2 =  ((__xasm<int>(push(i0), op(0x37))))
		i3 =  ((__xasm<int>(push((i2+4)), op(0x37))))
		__asm(push(i3>1), iftrue, target("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_15_F"))
	__asm(lbl("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_11_F"))
		__asm(push(i3==0), iftrue, target("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_19_F"))
	__asm(lbl("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_12_F"))
		__asm(push(i3==1), iftrue, target("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_13_F"))
		__asm(jump, target("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_27_F"))
	__asm(lbl("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_13_F"))
		i3 =  ((__xasm<int>(push(i2), op(0x37))))
		i3 =  ((__xasm<int>(push(i3), op(0x37))))
		mstate.esp -= 4
		__asm(push(i2), push(mstate.esp), op(0x3c))
		state = 3
		mstate.esp -= 4;(mstate.funcs[i3])()
		return
	__asm(lbl("__ZN9b2Fixture7DestroyEP16b2BlockAllocator_state3"))
		mstate.esp += 4
		i3 =  ((__xasm<int>(push((__ZN16b2BlockAllocator17s_blockSizeLookupE+52)), op(0x35))))
		__asm(push(uint(i3)<uint(14)), iftrue, target("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_21_F"))
		__asm(jump, target("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_14_F"))
	__asm(jump, target("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_14_F"), lbl("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_14_B"), label, lbl("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_14_F")); 
		__asm(jump, target("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_20_F"))
	__asm(lbl("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_15_F"))
		__asm(push(i3==2), iftrue, target("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_23_F"))
	__asm(lbl("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_16_F"))
		__asm(push(i3==3), iftrue, target("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_17_F"))
		__asm(jump, target("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_27_F"))
	__asm(lbl("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_17_F"))
		i3 =  ((__xasm<int>(push(i2), op(0x37))))
		i3 =  ((__xasm<int>(push(i3), op(0x37))))
		mstate.esp -= 4
		__asm(push(i2), push(mstate.esp), op(0x3c))
		state = 4
		mstate.esp -= 4;(mstate.funcs[i3])()
		return
	__asm(lbl("__ZN9b2Fixture7DestroyEP16b2BlockAllocator_state4"))
		mstate.esp += 4
		i3 =  ((__xasm<int>(push((__ZN16b2BlockAllocator17s_blockSizeLookupE+24)), op(0x35))))
		__asm(push(uint(i3)<uint(14)), iftrue, target("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_25_F"))
		__asm(jump, target("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_18_F"))
	__asm(lbl("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_18_F"))
		__asm(jump, target("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_24_F"))
	__asm(lbl("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_19_F"))
		i3 =  ((__xasm<int>(push(i2), op(0x37))))
		i3 =  ((__xasm<int>(push(i3), op(0x37))))
		mstate.esp -= 4
		__asm(push(i2), push(mstate.esp), op(0x3c))
		state = 5
		mstate.esp -= 4;(mstate.funcs[i3])()
		return
	__asm(lbl("__ZN9b2Fixture7DestroyEP16b2BlockAllocator_state5"))
		mstate.esp += 4
		i3 =  ((__xasm<int>(push((__ZN16b2BlockAllocator17s_blockSizeLookupE+24)), op(0x35))))
		__asm(push(uint(i3)<uint(14)), iftrue, target("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_22_F"))
	__asm(lbl("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_20_F"))
		__asm(jump, target("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_8_B"))
	__asm(lbl("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_21_B"), label, lbl("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_21_F")); 
		__asm(jump, target("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_22_F"))
	__asm(lbl("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_22_F"))
		i4 =  (0)
		i3 =  (i3 & 255)
		i3 =  (i3 << 2)
		i1 =  (i1 + i3)
		i3 =  ((__xasm<int>(push((i1+12)), op(0x37))))
		__asm(push(i3), push(i2), op(0x3c))
		__asm(push(i2), push((i1+12)), op(0x3c))
		__asm(push(i4), push(i0), op(0x3c))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_23_F"))
		i3 =  ((__xasm<int>(push(i2), op(0x37))))
		i3 =  ((__xasm<int>(push(i3), op(0x37))))
		mstate.esp -= 4
		__asm(push(i2), push(mstate.esp), op(0x3c))
		state = 6
		mstate.esp -= 4;(mstate.funcs[i3])()
		return
	__asm(lbl("__ZN9b2Fixture7DestroyEP16b2BlockAllocator_state6"))
		mstate.esp += 4
		i3 =  ((__xasm<int>(push((__ZN16b2BlockAllocator17s_blockSizeLookupE+156)), op(0x35))))
		__asm(push(uint(i3)<uint(14)), iftrue, target("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_26_F"))
	__asm(lbl("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_24_F"))
		__asm(jump, target("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_14_B"))
	__asm(lbl("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_25_F"))
		__asm(jump, target("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_26_F"))
	__asm(lbl("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_26_F"))
		__asm(jump, target("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_21_B"))
	__asm(lbl("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_27_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str46253)
		i3 =  (__ZZN9b2Contact7DestroyEPS_P16b2BlockAllocatorE8__func__)
		i4 =  (__2E_str95302)
		i5 =  (122)
	__asm(lbl("__ZN9b2Fixture7DestroyEP16b2BlockAllocator__XprivateX__BB442_28_F"))
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
		state = 7
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__ZN9b2Fixture7DestroyEP16b2BlockAllocator_state7"))
		mstate.esp += 24
		state = 8
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZN9b2Fixture7DestroyEP16b2BlockAllocator_state8"))
	__asm(lbl("__ZN9b2Fixture7DestroyEP16b2BlockAllocator_errState"))
		throw("Invalid state in __ZN9b2Fixture7DestroyEP16b2BlockAllocator")
	}
}



// Async
public const __ZN7b2World12DestroyJointEP7b2Joint:int = regFunc(FSM__ZN7b2World12DestroyJointEP7b2Joint.start)

public final class FSM__ZN7b2World12DestroyJointEP7b2Joint extends Machine {

	public static function start():void {
			var result:FSM__ZN7b2World12DestroyJointEP7b2Joint = new FSM__ZN7b2World12DestroyJointEP7b2Joint
		gstate.gworker = result
	}

	public var i0:int, i1:int, i2:int, i3:int, i4:int, i5:int, i6:int, i7:int
	public var i8:int, i9:int

	public static const intRegCount:int = 10

	public static const NumberRegCount:int = 0
	public final override function work():void {
		Alchemy::SetjmpAbuse { freezeCache = 0; }
		__asm(label, lbl("__ZN7b2World12DestroyJointEP7b2Joint_entry"))
		__asm(push(state), switchjump(
			"__ZN7b2World12DestroyJointEP7b2Joint_errState",
			"__ZN7b2World12DestroyJointEP7b2Joint_state0",
			"__ZN7b2World12DestroyJointEP7b2Joint_state1",
			"__ZN7b2World12DestroyJointEP7b2Joint_state2",
			"__ZN7b2World12DestroyJointEP7b2Joint_state3"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint_state0"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_0_F"))
		mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
		mstate.ebp = mstate.esp
		mstate.esp -= 0
		i0 =  ((__xasm<int>(push((mstate.ebp+8)), op(0x37))))
		i1 =  ((__xasm<int>(push((i0+102868)), op(0x37))))
		i2 =  (i0 + 102868)
		i3 =  ((__xasm<int>(push((mstate.ebp+12)), op(0x37))))
		i1 =  (i1 & 2)
		__asm(push(i1==0), iftrue, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_4_F"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_1_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i2 =  (__2E_str1670)
		i3 =  (__2E_str121314)
		i1 =  (__ZZN7b2World12DestroyJointEP7b2JointE8__func__)
		i4 =  (__2E_str69276)
		i5 =  (270)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i2), push((mstate.esp+4)), op(0x3c))
		__asm(push(i3), push((mstate.esp+8)), op(0x3c))
		__asm(push(i1), push((mstate.esp+12)), op(0x3c))
	__asm(jump, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_2_F"), lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_2_B"), label, lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_2_F")); 
		__asm(push(i4), push((mstate.esp+16)), op(0x3c))
		__asm(push(i5), push((mstate.esp+20)), op(0x3c))
	__asm(jump, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_3_F"), lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_3_B"), label, lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_3_F")); 
		state = 1
		mstate.esp -= 4;FSM_fprintf.start()
		return
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint_state1"))
		mstate.esp += 24
		state = 2
		mstate.esp -= 4;FSM_abort1.start()
		return
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint_state2"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_4_F"))
		i1 =  ((__xasm<int>(push(i2), op(0x37))))
		i1 =  (i1 & 2)
		__asm(push(i1!=0), iftrue, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_80_F"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_5_F"))
		i1 =  ((__xasm<int>(push((i3+57)), op(0x35))))
		i2 =  ((__xasm<int>(push((i3+8)), op(0x37))))
		i4 =  (i3 + 8)
		__asm(push(i2==0), iftrue, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_7_F"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_6_F"))
		i5 =  ((__xasm<int>(push((i3+12)), op(0x37))))
		__asm(push(i5), push((i2+12)), op(0x3c))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_7_F"))
		i2 =  ((__xasm<int>(push((i3+12)), op(0x37))))
		i5 =  (i3 + 12)
		__asm(push(i2==0), iftrue, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_9_F"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_8_F"))
		i4 =  ((__xasm<int>(push(i4), op(0x37))))
		__asm(push(i4), push((i2+8)), op(0x3c))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_9_F"))
		i2 =  ((__xasm<int>(push((i0+102956)), op(0x37))))
		i4 =  (i0 + 102956)
		__asm(push(i2!=i3), iftrue, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_11_F"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_10_F"))
		i2 =  ((__xasm<int>(push(i5), op(0x37))))
		__asm(push(i2), push(i4), op(0x3c))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_11_F"))
		i2 =  ((__xasm<int>(push((i3+48)), op(0x37))))
		i4 =  ((__xasm<int>(push((i2+4)), op(0x36))))
		i5 =  ((__xasm<int>(push((i3+52)), op(0x37))))
		i6 =  (i2 + 4)
		i7 =  (i4 & 2)
		__asm(push(i7!=0), iftrue, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_13_F"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_12_F"))
		i7 =  (0)
		i4 =  (i4 | 2)
		__asm(push(i4), push(i6), op(0x3b))
		__asm(push(i7), push((i2+148)), op(0x3c))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_13_F"))
		i4 =  ((__xasm<int>(push((i5+4)), op(0x36))))
		i6 =  (i5 + 4)
		i7 =  (i4 & 2)
		__asm(push(i7!=0), iftrue, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_15_F"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_14_F"))
		i7 =  (0)
		i4 =  (i4 | 2)
		__asm(push(i4), push(i6), op(0x3b))
		__asm(push(i7), push((i5+148)), op(0x3c))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_15_F"))
		i4 =  ((__xasm<int>(push((i3+24)), op(0x37))))
		i6 =  (i3 + 24)
		__asm(push(i4==0), iftrue, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_17_F"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_16_F"))
		i7 =  ((__xasm<int>(push((i3+28)), op(0x37))))
		__asm(push(i7), push((i4+12)), op(0x3c))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_17_F"))
		i4 =  ((__xasm<int>(push((i3+28)), op(0x37))))
		i7 =  (i3 + 28)
		__asm(push(i4==0), iftrue, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_19_F"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_18_F"))
		i8 =  ((__xasm<int>(push(i6), op(0x37))))
		__asm(push(i8), push((i4+8)), op(0x3c))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_19_F"))
		i4 =  ((__xasm<int>(push((i2+116)), op(0x37))))
		i8 =  (i2 + 116)
		i9 =  (i3 + 16)
		__asm(push(i9!=i4), iftrue, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_21_F"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_20_F"))
		i4 =  ((__xasm<int>(push(i7), op(0x37))))
		__asm(push(i4), push(i8), op(0x3c))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_21_F"))
		i4 =  (0)
		__asm(push(i4), push(i6), op(0x3c))
		__asm(push(i4), push(i7), op(0x3c))
		i4 =  ((__xasm<int>(push((i3+40)), op(0x37))))
		i6 =  (i3 + 40)
		__asm(push(i4==0), iftrue, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_23_F"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_22_F"))
		i7 =  ((__xasm<int>(push((i3+44)), op(0x37))))
		__asm(push(i7), push((i4+12)), op(0x3c))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_23_F"))
		i4 =  ((__xasm<int>(push((i3+44)), op(0x37))))
		i7 =  (i3 + 44)
		__asm(push(i4==0), iftrue, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_25_F"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_24_F"))
		i8 =  ((__xasm<int>(push(i6), op(0x37))))
		__asm(push(i8), push((i4+8)), op(0x3c))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_25_F"))
		i4 =  ((__xasm<int>(push((i5+116)), op(0x37))))
		i8 =  (i5 + 116)
		i9 =  (i3 + 32)
		__asm(push(i9!=i4), iftrue, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_27_F"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_26_F"))
		i4 =  ((__xasm<int>(push(i7), op(0x37))))
		__asm(push(i4), push(i8), op(0x3c))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_27_F"))
		i4 =  (0)
		__asm(push(i4), push(i6), op(0x3c))
		__asm(push(i4), push(i7), op(0x3c))
		i4 =  ((__xasm<int>(push(i3), op(0x37))))
		i4 =  ((__xasm<int>(push((i4+16)), op(0x37))))
		mstate.esp -= 4
		__asm(push(i3), push(mstate.esp), op(0x3c))
		state = 3
		mstate.esp -= 4;(mstate.funcs[i4])()
		return
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint_state3"))
		mstate.esp += 4
		i4 =  ((__xasm<int>(push((i3+4)), op(0x37))))
		__asm(push(i4>5), iftrue, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_38_F"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_28_F"))
		__asm(push(i4>2), iftrue, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_33_F"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_29_F"))
		__asm(push(i4==1), iftrue, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_52_F"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_30_F"))
		__asm(push(i4==2), iftrue, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_31_F"))
		__asm(jump, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_69_F"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_31_F"))
		i4 =  ((__xasm<int>(push((__ZN16b2BlockAllocator17s_blockSizeLookupE+244)), op(0x35))))
		__asm(push(uint(i4)<uint(14)), iftrue, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_51_F"))
		__asm(jump, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_32_F"))
	__asm(jump, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_32_F"), lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_32_B"), label, lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_32_F")); 
		__asm(jump, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_37_F"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_33_F"))
		__asm(push(i4==3), iftrue, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_48_F"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_34_F"))
		__asm(push(i4==4), iftrue, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_55_F"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_35_F"))
		__asm(push(i4==5), iftrue, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_36_F"))
		__asm(jump, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_69_F"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_36_F"))
		i4 =  ((__xasm<int>(push((__ZN16b2BlockAllocator17s_blockSizeLookupE+164)), op(0x35))))
		__asm(push(uint(i4)<uint(14)), iftrue, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_50_F"))
		__asm(jump, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_37_F"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_37_F"))
		__asm(jump, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_49_F"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_38_F"))
		__asm(push(i4>7), iftrue, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_43_F"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_39_F"))
		__asm(push(i4==6), iftrue, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_58_F"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_40_F"))
		__asm(push(i4==7), iftrue, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_41_F"))
		__asm(jump, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_69_F"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_41_F"))
		i4 =  ((__xasm<int>(push((__ZN16b2BlockAllocator17s_blockSizeLookupE+216)), op(0x35))))
		__asm(push(uint(i4)<uint(14)), iftrue, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_61_F"))
		__asm(jump, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_42_F"))
	__asm(jump, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_42_F"), lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_42_B"), label, lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_42_F")); 
		__asm(jump, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_59_F"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_43_F"))
		__asm(push(i4==8), iftrue, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_62_F"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_44_F"))
		__asm(push(i4==9), iftrue, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_65_F"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_45_F"))
		__asm(push(i4==10), iftrue, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_46_F"))
		__asm(jump, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_69_F"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_46_F"))
		i4 =  ((__xasm<int>(push((__ZN16b2BlockAllocator17s_blockSizeLookupE+156)), op(0x35))))
		__asm(push(uint(i4)<uint(14)), iftrue, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_68_F"))
		__asm(jump, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_47_F"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_47_F"))
		__asm(jump, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_66_F"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_48_F"))
		i4 =  ((__xasm<int>(push((__ZN16b2BlockAllocator17s_blockSizeLookupE+148)), op(0x35))))
		__asm(push(uint(i4)<uint(14)), iftrue, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_71_F"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_49_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str83290)
		i3 =  (__ZZN16b2BlockAllocator4FreeEPviE8__func__)
		i4 =  (__2E_str78285)
		i5 =  (173)
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i3), push((mstate.esp+12)), op(0x3c))
		__asm(jump, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_2_B"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_50_F"))
		i4 =  (i4 & 255)
		i4 =  (i4 << 2)
		i4 =  (i0 + i4)
		i6 =  ((__xasm<int>(push((i4+12)), op(0x37))))
		__asm(push(i6), push(i3), op(0x3c))
		__asm(push(i3), push((i4+12)), op(0x3c))
		__asm(jump, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_72_F"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_51_F"))
		i4 =  (i4 & 255)
		i4 =  (i4 << 2)
		i4 =  (i0 + i4)
		i6 =  ((__xasm<int>(push((i4+12)), op(0x37))))
		__asm(push(i6), push(i3), op(0x3c))
		__asm(push(i3), push((i4+12)), op(0x3c))
		__asm(jump, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_72_F"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_52_F"))
		i4 =  ((__xasm<int>(push((__ZN16b2BlockAllocator17s_blockSizeLookupE+200)), op(0x35))))
		__asm(push(uint(i4)<uint(14)), iftrue, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_54_F"))
	__asm(jump, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_53_F"), lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_53_B"), label, lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_53_F")); 
		__asm(jump, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_32_B"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_54_F"))
		i4 =  (i4 & 255)
		i4 =  (i4 << 2)
		i4 =  (i0 + i4)
		i6 =  ((__xasm<int>(push((i4+12)), op(0x37))))
		__asm(push(i6), push(i3), op(0x3c))
		__asm(push(i3), push((i4+12)), op(0x3c))
		__asm(jump, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_72_F"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_55_F"))
		i4 =  ((__xasm<int>(push((__ZN16b2BlockAllocator17s_blockSizeLookupE+196)), op(0x35))))
		__asm(push(uint(i4)<uint(14)), iftrue, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_57_F"))
	__asm(jump, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_56_F"), lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_56_B"), label, lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_56_F")); 
		__asm(jump, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_53_B"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_57_F"))
		i4 =  (i4 & 255)
		i4 =  (i4 << 2)
		i4 =  (i0 + i4)
		i6 =  ((__xasm<int>(push((i4+12)), op(0x37))))
		__asm(push(i6), push(i3), op(0x3c))
		__asm(push(i3), push((i4+12)), op(0x3c))
		__asm(jump, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_72_F"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_58_F"))
		i4 =  ((__xasm<int>(push((__ZN16b2BlockAllocator17s_blockSizeLookupE+192)), op(0x35))))
		__asm(push(uint(i4)<uint(14)), iftrue, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_60_F"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_59_F"))
		__asm(jump, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_56_B"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_60_F"))
		i4 =  (i4 & 255)
		i4 =  (i4 << 2)
		i4 =  (i0 + i4)
		i6 =  ((__xasm<int>(push((i4+12)), op(0x37))))
		__asm(push(i6), push(i3), op(0x3c))
		__asm(push(i3), push((i4+12)), op(0x3c))
		__asm(jump, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_72_F"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_61_F"))
		i4 =  (i4 & 255)
		i4 =  (i4 << 2)
		i4 =  (i0 + i4)
		i6 =  ((__xasm<int>(push((i4+12)), op(0x37))))
		__asm(push(i6), push(i3), op(0x3c))
		__asm(push(i3), push((i4+12)), op(0x3c))
		__asm(jump, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_72_F"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_62_F"))
		i4 =  ((__xasm<int>(push((__ZN16b2BlockAllocator17s_blockSizeLookupE+164)), op(0x35))))
		__asm(push(uint(i4)<uint(14)), iftrue, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_64_F"))
	__asm(jump, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_63_F"), lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_63_B"), label, lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_63_F")); 
		__asm(jump, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_42_B"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_64_F"))
		i4 =  (i4 & 255)
		i4 =  (i4 << 2)
		i4 =  (i0 + i4)
		i6 =  ((__xasm<int>(push((i4+12)), op(0x37))))
		__asm(push(i6), push(i3), op(0x3c))
		__asm(push(i3), push((i4+12)), op(0x3c))
		__asm(jump, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_72_F"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_65_F"))
		i4 =  ((__xasm<int>(push((__ZN16b2BlockAllocator17s_blockSizeLookupE+152)), op(0x35))))
		__asm(push(uint(i4)<uint(14)), iftrue, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_67_F"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_66_F"))
		__asm(jump, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_63_B"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_67_F"))
		i4 =  (i4 & 255)
		i4 =  (i4 << 2)
		i4 =  (i0 + i4)
		i6 =  ((__xasm<int>(push((i4+12)), op(0x37))))
		__asm(push(i6), push(i3), op(0x3c))
		__asm(push(i3), push((i4+12)), op(0x3c))
		__asm(jump, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_72_F"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_68_F"))
		i4 =  (i4 & 255)
		i4 =  (i4 << 2)
		i4 =  (i0 + i4)
		i6 =  ((__xasm<int>(push((i4+12)), op(0x37))))
		__asm(push(i6), push(i3), op(0x3c))
		__asm(push(i3), push((i4+12)), op(0x3c))
		__asm(jump, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_72_F"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_69_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str46253)
		i5 =  (__ZZN9b2Contact7DestroyEPS_P16b2BlockAllocatorE8__func__)
		i3 =  (__2E_str39246)
		i4 =  (166)
	__asm(jump, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_70_F"), lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_70_B"), label, lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_70_F")); 
		i0 =  (i0 + 176)
		__asm(push(i0), push(mstate.esp), op(0x3c))
		__asm(push(i1), push((mstate.esp+4)), op(0x3c))
		__asm(push(i2), push((mstate.esp+8)), op(0x3c))
		__asm(push(i5), push((mstate.esp+12)), op(0x3c))
		__asm(push(i3), push((mstate.esp+16)), op(0x3c))
		__asm(push(i4), push((mstate.esp+20)), op(0x3c))
		__asm(jump, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_3_B"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_71_F"))
		i4 =  (i4 & 255)
		i4 =  (i4 << 2)
		i4 =  (i0 + i4)
		i6 =  ((__xasm<int>(push((i4+12)), op(0x37))))
		__asm(push(i6), push(i3), op(0x3c))
		__asm(push(i3), push((i4+12)), op(0x3c))
		__asm(jump, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_72_F"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_72_F"))
		i3 =  ((__xasm<int>(push((i0+102964)), op(0x37))))
		i0 =  (i0 + 102964)
		__asm(push(i3>0), iftrue, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_74_F"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_73_F"))
		i0 =  (___sF)
		mstate.esp -= 24
		i1 =  (__2E_str1670)
		i2 =  (__2E_str181340)
		i5 =  (__ZZN7b2World12DestroyJointEP7b2JointE8__func__)
		i3 =  (__2E_str69276)
		i4 =  (342)
		__asm(jump, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_70_B"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_74_F"))
		i3 =  ((__xasm<int>(push(i0), op(0x37))))
		i3 =  (i3 + -1)
		__asm(push(i3), push(i0), op(0x3c))
		i0 =  (i1 & 255)
		__asm(push(i0!=0), iftrue, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_80_F"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_75_F"))
		i0 =  ((__xasm<int>(push((i5+120)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_80_F"))
	__asm(jump, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_76_F"), lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_76_B"), label, lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_76_F")); 
		i1 =  ((__xasm<int>(push(i0), op(0x37))))
		__asm(push(i1!=i2), iftrue, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_78_F"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_77_F"))
		i1 =  ((__xasm<int>(push((i0+4)), op(0x37))))
		i3 =  ((__xasm<int>(push((i1+4)), op(0x37))))
		i3 =  (i3 | 8)
		__asm(push(i3), push((i1+4)), op(0x3c))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_78_F"))
		i0 =  ((__xasm<int>(push((i0+12)), op(0x37))))
		__asm(push(i0==0), iftrue, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_80_F"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_79_F"))
		__asm(jump, target("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_76_B"))
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint__XprivateX__BB443_80_F"))
		mstate.esp = mstate.ebp
		mstate.ebp = __xasm<int>(push(mstate.esp), op(0x37)); mstate.esp += 4
		//RETL
		mstate.esp += 4
		mstate.gworker = caller
		return
	__asm(lbl("__ZN7b2World12DestroyJointEP7b2Joint_errState"))
		throw("Invalid state in __ZN7b2World12DestroyJointEP7b2Joint")
	}
}



// External functions
var __Unwind_Resume:int
var _AS3_ArrayValue:int
var _AS3_Null:int
var _AS3_Release:int
var _AS3_Ptr:int
var _AS3_CallTS:int
var _AS3_CallT:int
var _AS3_IntValue:int
var _AS3_NumberValue:int
var _AS3_Object:int
var _AS3_Function:int
var _abort:int

// Global variables
const __2E_str:int = gstaticInitter.alloc(6, 1)
const __2E_str1:int = gstaticInitter.alloc(6, 1)
const _val_2E_1440:int = gstaticInitter.alloc(4, 4)
const __2E_str8:int = gstaticInitter.alloc(8, 1)
const __2E_str19:int = gstaticInitter.alloc(7, 1)
const __2E_str210:int = gstaticInitter.alloc(10, 1)
const __2E_str37:int = gstaticInitter.alloc(5, 1)
const __2E_str138:int = gstaticInitter.alloc(14, 1)
const __2E_str340:int = gstaticInitter.alloc(12, 1)
const __2E_str643:int = gstaticInitter.alloc(10, 1)
const __2E_str251:int = gstaticInitter.alloc(12, 1)
const ___mb_cur_max_2E_b:int = gstaticInitter.alloc(1, 1)
const __2E_str876:int = gstaticInitter.alloc(10, 1)
const __2E_str977:int = gstaticInitter.alloc(7, 1)
const __2E_str13:int = gstaticInitter.alloc(14, 1)
const __2E_str96:int = gstaticInitter.alloc(23, 1)
const __2E_str197:int = gstaticInitter.alloc(14, 1)
const __2E_str399:int = gstaticInitter.alloc(14, 1)
const __2E_str5101:int = gstaticInitter.alloc(26, 1)
const __2E_str6102:int = gstaticInitter.alloc(23, 1)
const __2E_str7103:int = gstaticInitter.alloc(23, 1)
const __2E_str8104:int = gstaticInitter.alloc(23, 1)
const __2E_str9105:int = gstaticInitter.alloc(32, 1)
const __2E_str10106:int = gstaticInitter.alloc(23, 1)
const __2E_str11107:int = gstaticInitter.alloc(24, 1)
const ___progname:int = gstaticInitter.alloc(4, 4)
const _environ:int = gstaticInitter.alloc(4, 4)
const __2E_str45:int = gstaticInitter.alloc(1, 1)
const __2E_str159:int = gstaticInitter.alloc(9, 1)
const __2E_str260:int = gstaticInitter.alloc(4, 1)
const ___tens_D2A:int = gstaticInitter.alloc(184, 8)
const ___bigtens_D2A:int = gstaticInitter.alloc(40, 8)
const _freelist:int = gstaticInitter.alloc(64, 4)
const _pmem_next:int = gstaticInitter.alloc(4, 4)
const _private_mem:int = gstaticInitter.alloc(2304, 8)
const _p05_2E_3773:int = gstaticInitter.alloc(12, 4)
const _p5s:int = gstaticInitter.alloc(4, 4)
const __2E_str1670:int = gstaticInitter.alloc(56, 1)
const _initial_2E_2136:int = gstaticInitter.alloc(128, 8)
const ___mlocale_changed_2E_b:int = gstaticInitter.alloc(1, 1)
const __2E_str20159:int = gstaticInitter.alloc(2, 1)
const _numempty22:int = gstaticInitter.alloc(2, 1)
const ___nlocale_changed_2E_b:int = gstaticInitter.alloc(1, 1)
const _ret_2E_1494_2E_0:int = gstaticInitter.alloc(4, 4)
const _ret_2E_1494_2E_1:int = gstaticInitter.alloc(4, 4)
const _ret_2E_1494_2E_2:int = gstaticInitter.alloc(4, 4)
const ___sF:int = gstaticInitter.alloc(264, 8)
const ___sdidinit_2E_b:int = gstaticInitter.alloc(1, 1)
const _usual_extra:int = gstaticInitter.alloc(2516, 8)
const _usual:int = gstaticInitter.alloc(1496, 8)
const ___cleanup_2E_b:int = gstaticInitter.alloc(1, 1)
const ___sglue:int = gstaticInitter.alloc(12, 8)
const _uglue:int = gstaticInitter.alloc(12, 8)
const ___sFX:int = gstaticInitter.alloc(444, 8)
const _xdigs_lower_2E_4528:int = gstaticInitter.alloc(17, 1)
const _xdigs_upper_2E_4529:int = gstaticInitter.alloc(17, 1)
const __2E_str118283:int = gstaticInitter.alloc(4, 1)
const __2E_str219284:int = gstaticInitter.alloc(4, 1)
const __2E_str320285:int = gstaticInitter.alloc(4, 1)
const __2E_str421:int = gstaticInitter.alloc(4, 1)
const __2E_str522:int = gstaticInitter.alloc(7, 1)
const _blanks_2E_4526:int = gstaticInitter.alloc(16, 1)
const _zeroes_2E_4527:int = gstaticInitter.alloc(16, 1)
const ___atexit:int = gstaticInitter.alloc(4, 4)
const ___atexit0_2E_3021:int = gstaticInitter.alloc(520, 8)
const _free_list:int = gstaticInitter.alloc(20, 8)
const _malloc_origo:int = gstaticInitter.alloc(4, 4)
const _last_index:int = gstaticInitter.alloc(4, 4)
const _malloc_brk:int = gstaticInitter.alloc(4, 4)
const _malloc_ninfo:int = gstaticInitter.alloc(4, 4)
const _page_dir:int = gstaticInitter.alloc(4, 4)
const _malloc_junk_2E_b:int = gstaticInitter.alloc(1, 1)
const _px:int = gstaticInitter.alloc(4, 4)
const _malloc_zero_2E_b:int = gstaticInitter.alloc(1, 1)
const _malloc_hint_2E_b:int = gstaticInitter.alloc(1, 1)
const _malloc_cache:int = gstaticInitter.alloc(4, 4)
const _malloc_active_2E_3509:int = gstaticInitter.alloc(4, 4)
const _malloc_started_2E_3510_2E_b:int = gstaticInitter.alloc(1, 1)
const __2E_str113335:int = gstaticInitter.alloc(15, 1)
const _malloc_realloc_2E_b:int = gstaticInitter.alloc(1, 1)
const _malloc_sysv_2E_b:int = gstaticInitter.alloc(1, 1)
const _smodes:int = gstaticInitter.alloc(1476, 8)
const __2E_str3399:int = gstaticInitter.alloc(12, 1)
const __2E_str4400:int = gstaticInitter.alloc(20, 1)
const __2E_str5401:int = gstaticInitter.alloc(15, 1)
const __2E_str6402:int = gstaticInitter.alloc(12, 1)
const __2E_str7403:int = gstaticInitter.alloc(13, 1)
const __ZL14emergency_used:int = gstaticInitter.alloc(4, 4)
const __ZL16emergency_buffer:int = gstaticInitter.alloc(16384, 1)
const __ZTVSt9exception:int = gstaticInitter.alloc(20, 4)
const __ZTISt9exception:int = gstaticInitter.alloc(8, 8)
const __ZTVN10__cxxabiv117__class_type_infoE:int = gstaticInitter.alloc(44, 4)
const __ZTSSt9exception:int = gstaticInitter.alloc(13, 1)
const __ZTVSt13bad_exception:int = gstaticInitter.alloc(20, 4)
const __ZTISt13bad_exception:int = gstaticInitter.alloc(12, 8)
const __ZTVN10__cxxabiv120__si_class_type_infoE:int = gstaticInitter.alloc(44, 4)
const __ZTSSt13bad_exception:int = gstaticInitter.alloc(18, 1)
const __ZL14use_thread_key_2E_b:int = gstaticInitter.alloc(1, 1)
const __ZL14globals_static:int = gstaticInitter.alloc(8, 8)
const __ZTVSt9bad_alloc:int = gstaticInitter.alloc(20, 4)
const __ZTISt9bad_alloc:int = gstaticInitter.alloc(12, 8)
const __ZTSSt9bad_alloc:int = gstaticInitter.alloc(13, 1)
const __2E_str99:int = gstaticInitter.alloc(28, 1)
const __ZTVSt9type_info:int = gstaticInitter.alloc(32, 4)
const __ZTISt9type_info:int = gstaticInitter.alloc(8, 8)
const __ZTIN10__cxxabiv117__class_type_infoE:int = gstaticInitter.alloc(12, 8)
const __ZTIN10__cxxabiv120__si_class_type_infoE:int = gstaticInitter.alloc(12, 8)
const __ZTSN10__cxxabiv120__si_class_type_infoE:int = gstaticInitter.alloc(37, 1)
const __ZTSN10__cxxabiv117__class_type_infoE:int = gstaticInitter.alloc(34, 1)
const __ZTSSt9type_info:int = gstaticInitter.alloc(13, 1)
const __ZTVN10__cxxabiv121__vmi_class_type_infoE:int = gstaticInitter.alloc(44, 4)
const __ZTIN10__cxxabiv121__vmi_class_type_infoE:int = gstaticInitter.alloc(12, 8)
const __ZTSN10__cxxabiv121__vmi_class_type_infoE:int = gstaticInitter.alloc(38, 1)
const __ZZN9__gnu_cxx27__verbose_terminate_handlerEvE11terminating_2E_b:int = gstaticInitter.alloc(1, 1)
const __2E_str3100:int = gstaticInitter.alloc(30, 1)
const __2E_str1101:int = gstaticInitter.alloc(49, 1)
const __2E_str2102:int = gstaticInitter.alloc(3, 1)
const __2E_str34103:int = gstaticInitter.alloc(12, 1)
const __2E_str4104:int = gstaticInitter.alloc(46, 1)
const __2E_str18192:int = gstaticInitter.alloc(18, 1)
const __ZGVN9__gnu_cxx10__mt_allocIcE10_S_optionsE:int = gstaticInitter.alloc(8, 8)
const __ZGVN9__gnu_cxx10__mt_allocIwE10_S_optionsE:int = gstaticInitter.alloc(8, 8)
const __ZGVNSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE2idE:int = gstaticInitter.alloc(8, 8)
const __ZGVNSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE2idE:int = gstaticInitter.alloc(8, 8)
const __ZGVNSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE2idE:int = gstaticInitter.alloc(8, 8)
const __ZGVNSt7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE2idE:int = gstaticInitter.alloc(8, 8)
const __ZGVNSt8numpunctIcE2idE:int = gstaticInitter.alloc(8, 8)
const __ZGVNSt8numpunctIwE2idE:int = gstaticInitter.alloc(8, 8)
const __ZGVNSt10moneypunctIcLb0EE2idE:int = gstaticInitter.alloc(8, 8)
const __ZGVNSt10moneypunctIcLb1EE2idE:int = gstaticInitter.alloc(8, 8)
const __ZGVNSt9money_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE2idE:int = gstaticInitter.alloc(8, 8)
const __ZGVNSt9money_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE2idE:int = gstaticInitter.alloc(8, 8)
const __ZGVNSt11__timepunctIcE2idE:int = gstaticInitter.alloc(8, 8)
const __ZGVNSt8time_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE2idE:int = gstaticInitter.alloc(8, 8)
const __ZGVNSt8time_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE2idE:int = gstaticInitter.alloc(8, 8)
const __ZGVNSt8messagesIcE2idE:int = gstaticInitter.alloc(8, 8)
const __ZGVNSt7collateIcE2idE:int = gstaticInitter.alloc(8, 8)
const __ZGVNSt7collateIwE2idE:int = gstaticInitter.alloc(8, 8)
const __ZGVNSt11__timepunctIwE2idE:int = gstaticInitter.alloc(8, 8)
const __ZGVNSt8time_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE2idE:int = gstaticInitter.alloc(8, 8)
const __ZGVNSt8time_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE2idE:int = gstaticInitter.alloc(8, 8)
const __ZGVNSt9money_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE2idE:int = gstaticInitter.alloc(8, 8)
const __ZGVNSt9money_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE2idE:int = gstaticInitter.alloc(8, 8)
const __ZGVNSt10moneypunctIwLb0EE2idE:int = gstaticInitter.alloc(8, 8)
const __ZGVNSt10moneypunctIwLb1EE2idE:int = gstaticInitter.alloc(8, 8)
const __ZGVNSt8messagesIwE2idE:int = gstaticInitter.alloc(8, 8)
const __ZTI13b2CircleShape:int = gstaticInitter.alloc(12, 8)
const __ZTS13b2CircleShape:int = gstaticInitter.alloc(16, 1)
const __ZTI7b2Shape:int = gstaticInitter.alloc(8, 8)
const __ZTS7b2Shape:int = gstaticInitter.alloc(9, 1)
const __ZTI11b2EdgeShape:int = gstaticInitter.alloc(12, 8)
const __ZTS11b2EdgeShape:int = gstaticInitter.alloc(14, 1)
const __ZTI11b2LoopShape:int = gstaticInitter.alloc(12, 8)
const __ZTS11b2LoopShape:int = gstaticInitter.alloc(14, 1)
const __ZTI14b2PolygonShape:int = gstaticInitter.alloc(12, 8)
const __ZTS14b2PolygonShape:int = gstaticInitter.alloc(17, 1)
const __ZTI15b2ContactFilter:int = gstaticInitter.alloc(8, 8)
const __ZTS15b2ContactFilter:int = gstaticInitter.alloc(18, 1)
const __ZTI15b2DistanceJoint:int = gstaticInitter.alloc(12, 8)
const __ZTS15b2DistanceJoint:int = gstaticInitter.alloc(18, 1)
const __ZTI7b2Joint:int = gstaticInitter.alloc(8, 8)
const __ZTS7b2Joint:int = gstaticInitter.alloc(9, 1)
const __ZTI15b2FrictionJoint:int = gstaticInitter.alloc(12, 8)
const __ZTS15b2FrictionJoint:int = gstaticInitter.alloc(18, 1)
const __ZTI11b2GearJoint:int = gstaticInitter.alloc(12, 8)
const __ZTS11b2GearJoint:int = gstaticInitter.alloc(14, 1)
const __ZTI11b2LineJoint:int = gstaticInitter.alloc(12, 8)
const __ZTS11b2LineJoint:int = gstaticInitter.alloc(14, 1)
const __ZTI12b2MouseJoint:int = gstaticInitter.alloc(12, 8)
const __ZTS12b2MouseJoint:int = gstaticInitter.alloc(15, 1)
const __ZTI16b2PrismaticJoint:int = gstaticInitter.alloc(12, 8)
const __ZTS16b2PrismaticJoint:int = gstaticInitter.alloc(19, 1)
const __ZTI13b2PulleyJoint:int = gstaticInitter.alloc(12, 8)
const __ZTS13b2PulleyJoint:int = gstaticInitter.alloc(16, 1)
const __ZTI15b2RevoluteJoint:int = gstaticInitter.alloc(12, 8)
const __ZTS15b2RevoluteJoint:int = gstaticInitter.alloc(18, 1)
const __ZTI11b2RopeJoint:int = gstaticInitter.alloc(12, 8)
const __ZTS11b2RopeJoint:int = gstaticInitter.alloc(14, 1)
const __ZTI11b2WeldJoint:int = gstaticInitter.alloc(12, 8)
const __ZTS11b2WeldJoint:int = gstaticInitter.alloc(14, 1)
const __ZTI15b2CircleContact:int = gstaticInitter.alloc(12, 8)
const __ZTS15b2CircleContact:int = gstaticInitter.alloc(18, 1)
const __ZTI9b2Contact:int = gstaticInitter.alloc(8, 8)
const __ZTS9b2Contact:int = gstaticInitter.alloc(11, 1)
const __ZTI25b2PolygonAndCircleContact:int = gstaticInitter.alloc(12, 8)
const __ZTS25b2PolygonAndCircleContact:int = gstaticInitter.alloc(28, 1)
const __ZTI16b2PolygonContact:int = gstaticInitter.alloc(12, 8)
const __ZTS16b2PolygonContact:int = gstaticInitter.alloc(19, 1)
const __ZTI22b2EdgeAndCircleContact:int = gstaticInitter.alloc(12, 8)
const __ZTS22b2EdgeAndCircleContact:int = gstaticInitter.alloc(25, 1)
const __ZTI23b2EdgeAndPolygonContact:int = gstaticInitter.alloc(12, 8)
const __ZTS23b2EdgeAndPolygonContact:int = gstaticInitter.alloc(26, 1)
const __ZTI22b2LoopAndCircleContact:int = gstaticInitter.alloc(12, 8)
const __ZTS22b2LoopAndCircleContact:int = gstaticInitter.alloc(25, 1)
const __ZTI23b2LoopAndPolygonContact:int = gstaticInitter.alloc(12, 8)
const __ZTS23b2LoopAndPolygonContact:int = gstaticInitter.alloc(26, 1)
const __ZTV13b2CircleShape:int = gstaticInitter.alloc(40, 4)
const __ZTV14b2PolygonShape:int = gstaticInitter.alloc(40, 4)
const __ZTV11b2LoopShape:int = gstaticInitter.alloc(40, 4)
const __ZTV11b2EdgeShape:int = gstaticInitter.alloc(40, 4)
const __ZTV15b2ContactFilter:int = gstaticInitter.alloc(20, 4)
const __ZTV15b2CircleContact:int = gstaticInitter.alloc(20, 4)
const __ZTV22b2EdgeAndCircleContact:int = gstaticInitter.alloc(20, 4)
const __ZTV23b2EdgeAndPolygonContact:int = gstaticInitter.alloc(20, 4)
const __ZTV22b2LoopAndCircleContact:int = gstaticInitter.alloc(20, 4)
const __ZTV23b2LoopAndPolygonContact:int = gstaticInitter.alloc(20, 4)
const __ZTV25b2PolygonAndCircleContact:int = gstaticInitter.alloc(20, 4)
const __ZTV16b2PolygonContact:int = gstaticInitter.alloc(20, 4)
const __ZTV15b2DistanceJoint:int = gstaticInitter.alloc(44, 4)
const __ZTV11b2GearJoint:int = gstaticInitter.alloc(44, 4)
const __ZTV11b2LineJoint:int = gstaticInitter.alloc(44, 4)
const __ZTV12b2MouseJoint:int = gstaticInitter.alloc(44, 4)
const __ZTV16b2PrismaticJoint:int = gstaticInitter.alloc(44, 4)
const __ZTV13b2PulleyJoint:int = gstaticInitter.alloc(44, 4)
const __ZTV15b2RevoluteJoint:int = gstaticInitter.alloc(44, 4)
const __ZTV15b2FrictionJoint:int = gstaticInitter.alloc(44, 4)
const __ZTV11b2WeldJoint:int = gstaticInitter.alloc(44, 4)
const __ZTV11b2RopeJoint:int = gstaticInitter.alloc(44, 4)
const _as3_ptr:int = gstaticInitter.alloc(4, 4)
const __ZN9b2Contact13s_initializedE_2E_b:int = gstaticInitter.alloc(1, 1)
const __ZN9b2Contact11s_registersE:int = gstaticInitter.alloc(192, 8)
const _b2_defaultListener:int = gstaticInitter.alloc(4, 8)
const _b2_defaultFilter:int = gstaticInitter.alloc(4, 8)
const __ZN16b2BlockAllocator28s_blockSizeLookupInitializedE_2E_b:int = gstaticInitter.alloc(1, 1)
const __ZN16b2BlockAllocator17s_blockSizeLookupE:int = gstaticInitter.alloc(641, 1)
const __ZN16b2BlockAllocator12s_blockSizesE:int = gstaticInitter.alloc(56, 4)
const _b2_toiMaxRootIters:int = gstaticInitter.alloc(4, 4)
const _b2_toiRootIters:int = gstaticInitter.alloc(4, 4)
const _b2_toiMaxIters:int = gstaticInitter.alloc(4, 4)
const _b2_toiIters:int = gstaticInitter.alloc(4, 4)
const _b2_toiCalls:int = gstaticInitter.alloc(4, 4)
const _b2_gjkMaxIters:int = gstaticInitter.alloc(4, 4)
const _b2_gjkIters:int = gstaticInitter.alloc(4, 4)
const _b2_gjkCalls:int = gstaticInitter.alloc(4, 4)
const _b2_angularSleepTolerance:int = gstaticInitter.alloc(4, 4)
const _b2_linearSleepTolerance:int = gstaticInitter.alloc(4, 4)
const _b2_timeToSleep:int = gstaticInitter.alloc(4, 4)
const _b2_contactBaumgarte:int = gstaticInitter.alloc(4, 4)
const _b2_maxRotationSquared:int = gstaticInitter.alloc(4, 4)
const _b2_maxRotation:int = gstaticInitter.alloc(4, 4)
const _b2_maxTranslationSquared:int = gstaticInitter.alloc(4, 4)
const _b2_maxTranslation:int = gstaticInitter.alloc(4, 4)
const _b2_maxAngularCorrection:int = gstaticInitter.alloc(4, 4)
const _b2_maxLinearCorrection:int = gstaticInitter.alloc(4, 4)
const _b2_velocityThreshold:int = gstaticInitter.alloc(4, 4)
const _b2_maxTOIContacts:int = gstaticInitter.alloc(4, 4)
const _b2_maxSubSteps:int = gstaticInitter.alloc(4, 4)
const _b2_polygonRadius:int = gstaticInitter.alloc(4, 4)
const _b2_angularSlop:int = gstaticInitter.alloc(4, 4)
const _b2_linearSlop:int = gstaticInitter.alloc(4, 4)
const _b2_aabbMultiplier:int = gstaticInitter.alloc(4, 4)
const _b2_aabbExtension:int = gstaticInitter.alloc(4, 4)
const __ZTV17b2ContactListener:int = gstaticInitter.alloc(32, 4)
const __ZTI17b2ContactListener:int = gstaticInitter.alloc(8, 8)
const __ZTS17b2ContactListener:int = gstaticInitter.alloc(20, 1)
const __ZTV7b2Joint:int = gstaticInitter.alloc(44, 4)
const __ZTV9b2Contact:int = gstaticInitter.alloc(20, 4)
const __ZTV7b2Shape:int = gstaticInitter.alloc(40, 4)
const _b2_maxPolygonVertices:int = gstaticInitter.alloc(4, 4)
const _b2_maxManifoldPoints:int = gstaticInitter.alloc(4, 4)
const __ZTV13WorldListener:int = gstaticInitter.alloc(64, 4)
const __ZTI13WorldListener:int = gstaticInitter.alloc(32, 8)
const __ZTS13WorldListener:int = gstaticInitter.alloc(16, 1)
const __ZTI21b2DestructionListener:int = gstaticInitter.alloc(8, 8)
const __ZTS21b2DestructionListener:int = gstaticInitter.alloc(24, 1)
const __ZTV21b2DestructionListener:int = gstaticInitter.alloc(24, 4)
const __ZTV15RayCastCallback:int = gstaticInitter.alloc(20, 4)
const __ZTI15RayCastCallback:int = gstaticInitter.alloc(12, 8)
const __ZTS15RayCastCallback:int = gstaticInitter.alloc(18, 1)
const __ZTI17b2RayCastCallback:int = gstaticInitter.alloc(8, 8)
const __ZTS17b2RayCastCallback:int = gstaticInitter.alloc(20, 1)
const __ZTV17b2RayCastCallback:int = gstaticInitter.alloc(20, 4)
const __ZTV13QueryCallback:int = gstaticInitter.alloc(20, 4)
const __ZTI13QueryCallback:int = gstaticInitter.alloc(12, 8)
const __ZTS13QueryCallback:int = gstaticInitter.alloc(16, 1)
const __ZTI15b2QueryCallback:int = gstaticInitter.alloc(8, 8)
const __ZTS15b2QueryCallback:int = gstaticInitter.alloc(18, 1)
const __ZTV15b2QueryCallback:int = gstaticInitter.alloc(20, 4)
const __ZTV12b2FixtureDef:int = gstaticInitter.alloc(16, 4)
const __ZTI12b2FixtureDef:int = gstaticInitter.alloc(8, 8)
const __ZTS12b2FixtureDef:int = gstaticInitter.alloc(15, 1)
const __ZZNK11b2LoopShape9GetVertexEiE8__func__:int = gstaticInitter.alloc(10, 1)
const __2E_str207:int = gstaticInitter.alloc(40, 1)
const __2E_str1208:int = gstaticInitter.alloc(30, 1)
const __ZZNK13b2DynamicTree11GetUserDataEiE8__func__:int = gstaticInitter.alloc(12, 1)
const __2E_str2209:int = gstaticInitter.alloc(35, 1)
const __2E_str3210:int = gstaticInitter.alloc(41, 1)
const __ZZNK13b2DynamicTree10GetFatAABBEiE8__func__:int = gstaticInitter.alloc(11, 1)
const __2E_str4211:int = gstaticInitter.alloc(32, 1)
const __ZZN13b2DynamicTree8FreeNodeEiE8__func__:int = gstaticInitter.alloc(9, 1)
const __2E_str5212:int = gstaticInitter.alloc(37, 1)
const __2E_str6213:int = gstaticInitter.alloc(39, 1)
const __2E_str7214:int = gstaticInitter.alloc(16, 1)
const __ZZNK11b2LoopShape12GetChildEdgeEP11b2EdgeShapeiE8__func__:int = gstaticInitter.alloc(13, 1)
const __2E_str8215:int = gstaticInitter.alloc(42, 1)
const __2E_str9216:int = gstaticInitter.alloc(13, 1)
const __ZZN16b2StackAllocatorD4EvE8__func__:int = gstaticInitter.alloc(18, 1)
const __2E_str10217:int = gstaticInitter.alloc(37, 1)
const __2E_str11218:int = gstaticInitter.alloc(13, 1)
const __2E_str12219:int = gstaticInitter.alloc(18, 1)
const __ZZN8b2Island3AddEP6b2BodyE8__func__:int = gstaticInitter.alloc(4, 1)
const __2E_str13220:int = gstaticInitter.alloc(29, 1)
const __2E_str14221:int = gstaticInitter.alloc(29, 1)
const __2E_str15222:int = gstaticInitter.alloc(35, 1)
const __2E_str16223:int = gstaticInitter.alloc(31, 1)
const __2E_str17224:int = gstaticInitter.alloc(41, 1)
const __2E_str18225:int = gstaticInitter.alloc(59, 1)
const __2E_str19226:int = gstaticInitter.alloc(59, 1)
const __ZZN9b2Polygon18MergeParallelEdgesEfE8__func__:int = gstaticInitter.alloc(19, 1)
const __2E_str22229:int = gstaticInitter.alloc(43, 1)
const __2E_str23230:int = gstaticInitter.alloc(25, 1)
const __ZZN10b2PolyNode13AddConnectionERS_E8__func__:int = gstaticInitter.alloc(14, 1)
const __2E_str24231:int = gstaticInitter.alloc(27, 1)
const __ZZN10b2PolyNode16RemoveConnectionERS_E8__func__:int = gstaticInitter.alloc(17, 1)
const __2E_str25232:int = gstaticInitter.alloc(8, 1)
const __2E_str26233:int = gstaticInitter.alloc(8, 1)
const __2E_str27234:int = gstaticInitter.alloc(11, 1)
const __2E_str28235:int = gstaticInitter.alloc(32, 1)
const __2E_str29236:int = gstaticInitter.alloc(9, 1)
const __2E_str30237:int = gstaticInitter.alloc(41, 1)
const __2E_str31238:int = gstaticInitter.alloc(10, 1)
const __2E_str32239:int = gstaticInitter.alloc(11, 1)
const __2E_str33240:int = gstaticInitter.alloc(71, 1)
const __2E_str34241:int = gstaticInitter.alloc(17, 1)
const __2E_str35242:int = gstaticInitter.alloc(549, 1)
const __2E_str36243:int = gstaticInitter.alloc(1989, 1)
const __ZZN15b2GrowableStackIiLi256EE3PopEvE8__func__:int = gstaticInitter.alloc(4, 1)
const __2E_str37244:int = gstaticInitter.alloc(34, 1)
const __2E_str38245:int = gstaticInitter.alloc(12, 1)
const __ZZN7b2JointC4EPK10b2JointDefE8__func__:int = gstaticInitter.alloc(8, 1)
const __2E_str39246:int = gstaticInitter.alloc(37, 1)
const __2E_str40247:int = gstaticInitter.alloc(25, 1)
const __2E_str41248:int = gstaticInitter.alloc(8, 1)
var ___dso_handle:int
const __ZZN12b2EPCollider16FindIncidentEdgeEP12b2ClipVertexPK9b2EPProxyiS4_E8__func__:int = gstaticInitter.alloc(17, 1)
const __2E_str42249:int = gstaticInitter.alloc(37, 1)
const __2E_str43250:int = gstaticInitter.alloc(29, 1)
const __2E_str44251:int = gstaticInitter.alloc(56, 1)
const __ZZNK9b2Simplex16GetWitnessPointsEP6b2Vec2S1_E8__func__:int = gstaticInitter.alloc(17, 1)
const __2E_str45252:int = gstaticInitter.alloc(34, 1)
const __2E_str46253:int = gstaticInitter.alloc(6, 1)
const __ZZNK9b2Simplex15GetClosestPointEvE8__func__:int = gstaticInitter.alloc(16, 1)
const __ZZN7b2Sweep7AdvanceEfE8__func__:int = gstaticInitter.alloc(8, 1)
const __2E_str47254:int = gstaticInitter.alloc(25, 1)
const __2E_str48255:int = gstaticInitter.alloc(14, 1)
const __ZZ15ComputeCentroidPK6b2Vec2iE8__func__:int = gstaticInitter.alloc(16, 1)
const __2E_str49256:int = gstaticInitter.alloc(45, 1)
const __2E_str50257:int = gstaticInitter.alloc(11, 1)
const __2E_str51258:int = gstaticInitter.alloc(18, 1)
const __ZZN14b2PolygonShape11ComputeMassEP10b2MassDatafE8__func__:int = gstaticInitter.alloc(12, 1)
const __2E_str52259:int = gstaticInitter.alloc(19, 1)
const __ZZN6b2Body11SetMassDataEPK10b2MassDataE8__func__:int = gstaticInitter.alloc(12, 1)
const __2E_str53260:int = gstaticInitter.alloc(29, 1)
const __2E_str54261:int = gstaticInitter.alloc(29, 1)
const __2E_str55262:int = gstaticInitter.alloc(11, 1)
const __ZZ18b2FindIncidentEdgeP12b2ClipVertexPK14b2PolygonShapeRK11b2TransformiS3_S6_E8__func__:int = gstaticInitter.alloc(19, 1)
const __2E_str58265:int = gstaticInitter.alloc(40, 1)
const __ZZ16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4_E8__func__:int = gstaticInitter.alloc(17, 1)
const __ZZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2TransformiE8__func__:int = gstaticInitter.alloc(8, 1)
const __2E_str59266:int = gstaticInitter.alloc(44, 1)
const __ZZNK9b2Simplex18GetSearchDirectionEvE8__func__:int = gstaticInitter.alloc(19, 1)
const __ZZN15b2ContactSolver24SolveVelocityConstraintsEvE8__func__:int = gstaticInitter.alloc(25, 1)
const __2E_str60267:int = gstaticInitter.alloc(47, 1)
const __2E_str61268:int = gstaticInitter.alloc(41, 1)
const __2E_str62269:int = gstaticInitter.alloc(27, 1)
const __ZZNK11b2LoopShape11ComputeAABBEP6b2AABBRK11b2TransformiE8__func__:int = gstaticInitter.alloc(12, 1)
const __2E_str63270:int = gstaticInitter.alloc(21, 1)
const __2E_str67274:int = gstaticInitter.alloc(45, 1)
const __ZZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStepE8__func__:int = gstaticInitter.alloc(24, 1)
const __2E_str68275:int = gstaticInitter.alloc(39, 1)
const __2E_str69276:int = gstaticInitter.alloc(30, 1)
const __ZZN9b2Contact7DestroyEPS_P16b2BlockAllocatorE8__func__:int = gstaticInitter.alloc(8, 1)
const __2E_str71278:int = gstaticInitter.alloc(22, 1)
const __2E_str72279:int = gstaticInitter.alloc(59, 1)
const __ZZN6b2Body13ResetMassDataEvE8__func__:int = gstaticInitter.alloc(14, 1)
const __2E_str73280:int = gstaticInitter.alloc(25, 1)
const __2E_str74281:int = gstaticInitter.alloc(17, 1)
const __2E_str75282:int = gstaticInitter.alloc(13, 1)
const __ZZN11b2LoopShape6CreateEPK6b2Vec2iE8__func__:int = gstaticInitter.alloc(7, 1)
const __2E_str76283:int = gstaticInitter.alloc(32, 1)
const __2E_str77284:int = gstaticInitter.alloc(11, 1)
const __ZZN16b2BlockAllocatorC4EvE8__func__:int = gstaticInitter.alloc(17, 1)
const __2E_str78285:int = gstaticInitter.alloc(37, 1)
const __2E_str79286:int = gstaticInitter.alloc(18, 1)
const __ZZN16b2StackAllocator8AllocateEiE8__func__:int = gstaticInitter.alloc(9, 1)
const __2E_str80287:int = gstaticInitter.alloc(34, 1)
const __ZZN13b2DynamicTree12AllocateNodeEvE8__func__:int = gstaticInitter.alloc(13, 1)
const __2E_str81288:int = gstaticInitter.alloc(30, 1)
const __2E_str82289:int = gstaticInitter.alloc(9, 1)
const __2E_str83290:int = gstaticInitter.alloc(36, 1)
const __2E_str84291:int = gstaticInitter.alloc(39, 1)
const __ZZN16b2BlockAllocator4FreeEPviE8__func__:int = gstaticInitter.alloc(5, 1)
const __2E_str85292:int = gstaticInitter.alloc(17, 1)
const __2E_str86293:int = gstaticInitter.alloc(17, 1)
const __ZZN15b2DistanceProxy3SetEPK7b2ShapeiE8__func__:int = gstaticInitter.alloc(4, 1)
const __2E_str87294:int = gstaticInitter.alloc(39, 1)
const __ZZNK9b2Simplex9GetMetricEvE8__func__:int = gstaticInitter.alloc(10, 1)
const __2E_str88295:int = gstaticInitter.alloc(43, 1)
const __2E_str89296:int = gstaticInitter.alloc(26, 1)
const __2E_str90297:int = gstaticInitter.alloc(26, 1)
const __2E_str91298:int = gstaticInitter.alloc(26, 1)
const __2E_str92299:int = gstaticInitter.alloc(42, 1)
const __2E_str93300:int = gstaticInitter.alloc(29, 1)
const __ZZN16b2PulleyJointDef10InitializeEP6b2BodyS1_RK6b2Vec2S4_S4_S4_fE8__func__:int = gstaticInitter.alloc(11, 1)
const __ZZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2TransformE8__func__:int = gstaticInitter.alloc(14, 1)
const __2E_str95302:int = gstaticInitter.alloc(32, 1)
const __2E_str96303:int = gstaticInitter.alloc(18, 1)
const __ZZN6b2Body13CreateFixtureEPK12b2FixtureDefE8__func__:int = gstaticInitter.alloc(14, 1)
const __2E_str97304:int = gstaticInitter.alloc(29, 1)
const __ZZN15b2CircleContactC4EP9b2FixtureS1_E8__func__:int = gstaticInitter.alloc(16, 1)
const __2E_str98305:int = gstaticInitter.alloc(47, 1)
const __2E_str99306:int = gstaticInitter.alloc(43, 1)
const __2E_str100:int = gstaticInitter.alloc(43, 1)
const __ZZN22b2EdgeAndCircleContactC4EP9b2FixtureS1_E8__func__:int = gstaticInitter.alloc(23, 1)
const __2E_str101:int = gstaticInitter.alloc(54, 1)
const __2E_str102:int = gstaticInitter.alloc(41, 1)
const __ZZN23b2EdgeAndPolygonContactC4EP9b2FixtureS1_E8__func__:int = gstaticInitter.alloc(24, 1)
const __2E_str103:int = gstaticInitter.alloc(55, 1)
const __2E_str104:int = gstaticInitter.alloc(44, 1)
const __ZZN22b2LoopAndCircleContactC4EP9b2FixtureiS1_iE8__func__:int = gstaticInitter.alloc(23, 1)
const __2E_str105:int = gstaticInitter.alloc(54, 1)
const __2E_str106:int = gstaticInitter.alloc(41, 1)
const __ZZN23b2LoopAndPolygonContactC4EP9b2FixtureiS1_iE8__func__:int = gstaticInitter.alloc(24, 1)
const __2E_str107:int = gstaticInitter.alloc(55, 1)
const __ZZN25b2PolygonAndCircleContactC4EP9b2FixtureS1_E8__func__:int = gstaticInitter.alloc(26, 1)
const __2E_str108:int = gstaticInitter.alloc(57, 1)
const __2E_str109:int = gstaticInitter.alloc(44, 1)
const __ZZN16b2PolygonContactC4EP9b2FixtureS1_E8__func__:int = gstaticInitter.alloc(17, 1)
const __2E_str110307:int = gstaticInitter.alloc(48, 1)
const __ZZN13b2DynamicTree10RemoveLeafEiE8__func__:int = gstaticInitter.alloc(11, 1)
const __2E_str111:int = gstaticInitter.alloc(30, 1)
const __ZZN13b2DynamicTree9MoveProxyEiRK6b2AABBRK6b2Vec2E8__func__:int = gstaticInitter.alloc(10, 1)
const __2E_str112:int = gstaticInitter.alloc(26, 1)
const __ZZN13b2DynamicTree12DestroyProxyEiE8__func__:int = gstaticInitter.alloc(13, 1)
const __ZZN6b2Body9SetActiveEbE8__func__:int = gstaticInitter.alloc(10, 1)
const __2E_str113308:int = gstaticInitter.alloc(44, 1)
const __ZZN6b2BodyC4EPK9b2BodyDefP7b2WorldE8__func__:int = gstaticInitter.alloc(7, 1)
const __2E_str114309:int = gstaticInitter.alloc(23, 1)
const __2E_str115:int = gstaticInitter.alloc(29, 1)
const __2E_str116:int = gstaticInitter.alloc(21, 1)
const __2E_str117310:int = gstaticInitter.alloc(31, 1)
const __2E_str118311:int = gstaticInitter.alloc(56, 1)
const __2E_str119312:int = gstaticInitter.alloc(60, 1)
const __2E_str120313:int = gstaticInitter.alloc(58, 1)
const __ZZN7b2World10CreateBodyEPK9b2BodyDefE8__func__:int = gstaticInitter.alloc(11, 1)
const __2E_str121314:int = gstaticInitter.alloc(20, 1)
const __2E_str122315:int = gstaticInitter.alloc(41, 1)
const __ZZN9b2Simplex9ReadCacheEPK14b2SimplexCachePK15b2DistanceProxyRK11b2TransformS5_S8_E8__func__:int = gstaticInitter.alloc(10, 1)
const __2E_str125317:int = gstaticInitter.alloc(18, 1)
const __ZZN6b2Body12SetTransformERK6b2Vec2fE8__func__:int = gstaticInitter.alloc(13, 1)
const __2E_str126318:int = gstaticInitter.alloc(44, 1)
const __2E_str127319:int = gstaticInitter.alloc(68, 1)
const __ZZNK20b2SeparationFunction8EvaluateEiifE8__func__:int = gstaticInitter.alloc(9, 1)
const __2E_str129321:int = gstaticInitter.alloc(38, 1)
const __ZZNK20b2SeparationFunction17FindMinSeparationEPiS0_fE8__func__:int = gstaticInitter.alloc(18, 1)
const __ZZN11b2GearJointC4EPK14b2GearJointDefE8__func__:int = gstaticInitter.alloc(12, 1)
const __2E_str130322:int = gstaticInitter.alloc(54, 1)
const __2E_str131:int = gstaticInitter.alloc(54, 1)
const __2E_str132323:int = gstaticInitter.alloc(52, 1)
const __2E_str133324:int = gstaticInitter.alloc(52, 1)
const __ZZN12b2MouseJointC4EPK15b2MouseJointDefE8__func__:int = gstaticInitter.alloc(13, 1)
const __2E_str134:int = gstaticInitter.alloc(22, 1)
const __2E_str135:int = gstaticInitter.alloc(50, 1)
const __2E_str136325:int = gstaticInitter.alloc(56, 1)
const __2E_str137326:int = gstaticInitter.alloc(58, 1)
const __ZZN13b2PulleyJointC4EPK16b2PulleyJointDefE8__func__:int = gstaticInitter.alloc(14, 1)
const __2E_str138327:int = gstaticInitter.alloc(19, 1)
const __ZZN7b2World11CreateJointEPK10b2JointDefE8__func__:int = gstaticInitter.alloc(12, 1)
const __ZZN15b2ContactSolverC4EP18b2ContactSolverDefE8__func__:int = gstaticInitter.alloc(16, 1)
const __2E_str139328:int = gstaticInitter.alloc(25, 1)
const __ZZ22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6_E8__func__:int = gstaticInitter.alloc(23, 1)
const __2E_str140:int = gstaticInitter.alloc(11, 1)
const __ZZN15b2ContactSolver29InitializeVelocityConstraintsEvE8__func__:int = gstaticInitter.alloc(30, 1)
const __2E_str141:int = gstaticInitter.alloc(21, 1)
const __2E_str142:int = gstaticInitter.alloc(22, 1)
const __ZZ10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInputE8__func__:int = gstaticInitter.alloc(11, 1)
const __2E_str143:int = gstaticInitter.alloc(26, 1)
const __2E_str144:int = gstaticInitter.alloc(23, 1)
const __ZZ14b2TimeOfImpactP11b2TOIOutputPK10b2TOIInputE8__func__:int = gstaticInitter.alloc(15, 1)
const __2E_str145329:int = gstaticInitter.alloc(19, 1)
const __2E_str146330:int = gstaticInitter.alloc(45, 1)
const __2E_str147:int = gstaticInitter.alloc(47, 1)
const __2E_str148331:int = gstaticInitter.alloc(25, 1)
const __2E_str149:int = gstaticInitter.alloc(19, 1)
const __ZZ18TriangulatePolygonPfS_iP10b2TriangleE8__func__:int = gstaticInitter.alloc(19, 1)
const __2E_str165336:int = gstaticInitter.alloc(27, 1)
const __ZZN10b2PolyNode21GetRightestConnectionEPS_E8__func__:int = gstaticInitter.alloc(22, 1)
const __2E_str166:int = gstaticInitter.alloc(27, 1)
const __2E_str167337:int = gstaticInitter.alloc(35, 1)
const __2E_str170:int = gstaticInitter.alloc(7, 1)
const __2E_str171:int = gstaticInitter.alloc(4, 1)
const __ZZ9TraceEdgeP9b2PolygonE8__func__:int = gstaticInitter.alloc(10, 1)
const __2E_str172:int = gstaticInitter.alloc(15, 1)
const __2E_str173:int = gstaticInitter.alloc(28, 1)
const __ZZN7b2World5SolveERK10b2TimeStepE8__func__:int = gstaticInitter.alloc(6, 1)
const __2E_str174:int = gstaticInitter.alloc(22, 1)
const __2E_str175338:int = gstaticInitter.alloc(23, 1)
const __ZZN7b2World8SolveTOIERK10b2TimeStepE8__func__:int = gstaticInitter.alloc(9, 1)
const __2E_str176:int = gstaticInitter.alloc(51, 1)
const __2E_str177:int = gstaticInitter.alloc(38, 1)
const __ZZN6b2Body14DestroyFixtureEP9b2FixtureE8__func__:int = gstaticInitter.alloc(15, 1)
const __2E_str178:int = gstaticInitter.alloc(24, 1)
const __2E_str179339:int = gstaticInitter.alloc(19, 1)
const __2E_str180:int = gstaticInitter.alloc(6, 1)
const __ZZN7b2World12DestroyJointEP7b2JointE8__func__:int = gstaticInitter.alloc(13, 1)
const __2E_str181340:int = gstaticInitter.alloc(17, 1)
const __ZZN7b2World11DestroyBodyEP6b2BodyE8__func__:int = gstaticInitter.alloc(12, 1)
const __2E_str182:int = gstaticInitter.alloc(16, 1)
public const _llvm_2E_global_ctors:int = exportSym("_llvm_2E_global_ctors", gstaticInitter.alloc(104, 8))


public function modStaticInit():void {
	__Unwind_Resume = importSym("__Unwind_Resume")
	_AS3_ArrayValue = importSym("_AS3_ArrayValue")
	_AS3_Null = importSym("_AS3_Null")
	_AS3_Release = importSym("_AS3_Release")
	_AS3_Ptr = importSym("_AS3_Ptr")
	_AS3_CallTS = importSym("_AS3_CallTS")
	_AS3_CallT = importSym("_AS3_CallT")
	_AS3_IntValue = importSym("_AS3_IntValue")
	_AS3_NumberValue = importSym("_AS3_NumberValue")
	_AS3_Object = importSym("_AS3_Object")
	_AS3_Function = importSym("_AS3_Function")
	_abort = importSym("_abort")
	___dso_handle = importSym("___dso_handle")
	modPreStaticInit()
	gstaticInitter.start(__2E_str)
	gstaticInitter.asciz = "_fini"
	gstaticInitter.start(__2E_str1)
	gstaticInitter.asciz = "_init"
	gstaticInitter.start(_val_2E_1440)
	gstaticInitter.zero = 4
	gstaticInitter.start(__2E_str8)
	gstaticInitter.asciz = "madvise"
	gstaticInitter.start(__2E_str19)
	gstaticInitter.asciz = "munmap"
	gstaticInitter.start(__2E_str210)
	gstaticInitter.asciz = "mmap anon"
	gstaticInitter.start(__2E_str37)
	gstaticInitter.asciz = "kill"
	gstaticInitter.start(__2E_str138)
	gstaticInitter.asciz = "signal_glue.c"
	gstaticInitter.start(__2E_str340)
	gstaticInitter.asciz = "sigprocmask"
	gstaticInitter.start(__2E_str643)
	gstaticInitter.asciz = "sigaction"
	gstaticInitter.start(__2E_str251)
	gstaticInitter.asciz = "stat_glue.c"
	gstaticInitter.start(___mb_cur_max_2E_b)
	gstaticInitter.zero = 1
	gstaticInitter.start(__2E_str876)
	gstaticInitter.asciz = "issetugid"
	gstaticInitter.start(__2E_str977)
	gstaticInitter.asciz = "getpid"
	gstaticInitter.start(__2E_str13)
	gstaticInitter.asciz = "unistd_glue.c"
	gstaticInitter.start(__2E_str96)
	gstaticInitter.asciz = "__seterrno(%d, %s, %d)"
	gstaticInitter.start(__2E_str197)
	gstaticInitter.asciz = "_Unwind_SetIP"
	gstaticInitter.start(__2E_str399)
	gstaticInitter.asciz = "_Unwind_SetGR"
	gstaticInitter.start(__2E_str5101)
	gstaticInitter.asciz = "_Unwind_Resume_or_Rethrow"
	gstaticInitter.start(__2E_str6102)
	gstaticInitter.asciz = "_Unwind_RaiseException"
	gstaticInitter.start(__2E_str7103)
	gstaticInitter.asciz = "_Unwind_GetTextRelBase"
	gstaticInitter.start(__2E_str8104)
	gstaticInitter.asciz = "_Unwind_GetRegionStart"
	gstaticInitter.start(__2E_str9105)
	gstaticInitter.asciz = "_Unwind_GetLanguageSpecificData"
	gstaticInitter.start(__2E_str10106)
	gstaticInitter.asciz = "_Unwind_GetDataRelBase"
	gstaticInitter.start(__2E_str11107)
	gstaticInitter.asciz = "_Unwind_DeleteException"
	gstaticInitter.start(___progname)
	gstaticInitter.i32 = __2E_str45
	gstaticInitter.start(_environ)
	gstaticInitter.zero = 4
	gstaticInitter.start(__2E_str45)
	gstaticInitter.zero = 1
	gstaticInitter.start(__2E_str159)
	gstaticInitter.asciz = "Infinity"
	gstaticInitter.start(__2E_str260)
	gstaticInitter.asciz = "NaN"
	gstaticInitter.start(___tens_D2A)
	gstaticInitter.i32 = 0	// double least significant word 1
	gstaticInitter.i32 = 1072693248	// double most significant word 1
	gstaticInitter.i32 = 0	// double least significant word 10
	gstaticInitter.i32 = 1076101120	// double most significant word 10
	gstaticInitter.i32 = 0	// double least significant word 100
	gstaticInitter.i32 = 1079574528	// double most significant word 100
	gstaticInitter.i32 = 0	// double least significant word 1000
	gstaticInitter.i32 = 1083129856	// double most significant word 1000
	gstaticInitter.i32 = 0	// double least significant word 10000
	gstaticInitter.i32 = 1086556160	// double most significant word 10000
	gstaticInitter.i32 = 0	// double least significant word 100000
	gstaticInitter.i32 = 1090021888	// double most significant word 100000
	gstaticInitter.i32 = 0	// double least significant word 1e+06
	gstaticInitter.i32 = 1093567616	// double most significant word 1e+06
	gstaticInitter.i32 = 0	// double least significant word 1e+07
	gstaticInitter.i32 = 1097011920	// double most significant word 1e+07
	gstaticInitter.i32 = 0	// double least significant word 1e+08
	gstaticInitter.i32 = 1100470148	// double most significant word 1e+08
	gstaticInitter.i32 = 0	// double least significant word 1e+09
	gstaticInitter.i32 = 1104006501	// double most significant word 1e+09
	gstaticInitter.i32 = 536870912	// double least significant word 1e+10
	gstaticInitter.i32 = 1107468383	// double most significant word 1e+10
	gstaticInitter.i32 = 3892314112	// double least significant word 1e+11
	gstaticInitter.i32 = 1110919286	// double most significant word 1e+11
	gstaticInitter.i32 = 2717908992	// double least significant word 1e+12
	gstaticInitter.i32 = 1114446484	// double most significant word 1e+12
	gstaticInitter.i32 = 3846176768	// double least significant word 1e+13
	gstaticInitter.i32 = 1117925532	// double most significant word 1e+13
	gstaticInitter.i32 = 512753664	// double least significant word 1e+14
	gstaticInitter.i32 = 1121369284	// double most significant word 1e+14
	gstaticInitter.i32 = 640942080	// double least significant word 1e+15
	gstaticInitter.i32 = 1124887541	// double most significant word 1e+15
	gstaticInitter.i32 = 937459712	// double least significant word 1e+16
	gstaticInitter.i32 = 1128383353	// double most significant word 1e+16
	gstaticInitter.i32 = 2245566464	// double least significant word 1e+17
	gstaticInitter.i32 = 1131820119	// double most significant word 1e+17
	gstaticInitter.i32 = 1733216256	// double least significant word 1e+18
	gstaticInitter.i32 = 1135329645	// double most significant word 1e+18
	gstaticInitter.i32 = 1620131072	// double least significant word 1e+19
	gstaticInitter.i32 = 1138841828	// double most significant word 1e+19
	gstaticInitter.i32 = 2025163840	// double least significant word 1e+20
	gstaticInitter.i32 = 1142271773	// double most significant word 1e+20
	gstaticInitter.i32 = 3605196624	// double least significant word 1e+21
	gstaticInitter.i32 = 1145772772	// double most significant word 1e+21
	gstaticInitter.i32 = 105764242	// double least significant word 1e+22
	gstaticInitter.i32 = 1149300943	// double most significant word 1e+22
	gstaticInitter.start(___bigtens_D2A)
	gstaticInitter.i32 = 937459712	// double least significant word 1e+16
	gstaticInitter.i32 = 1128383353	// double most significant word 1e+16
	gstaticInitter.i32 = 3037031959	// double least significant word 1e+32
	gstaticInitter.i32 = 1184086197	// double most significant word 1e+32
	gstaticInitter.i32 = 3913284085	// double least significant word 1e+64
	gstaticInitter.i32 = 1295535875	// double most significant word 1e+64
	gstaticInitter.i32 = 4180679986	// double least significant word 1e+128
	gstaticInitter.i32 = 1518499656	// double most significant word 1e+128
	gstaticInitter.i32 = 2138292028	// double least significant word 1e+256
	gstaticInitter.i32 = 1964330973	// double most significant word 1e+256
	gstaticInitter.start(_freelist)
	gstaticInitter.zero = 64
	gstaticInitter.start(_pmem_next)
	gstaticInitter.i32 = _private_mem
	gstaticInitter.start(_private_mem)
	gstaticInitter.zero = 2304
	gstaticInitter.start(_p05_2E_3773)
	gstaticInitter.i32 = 5
	gstaticInitter.i32 = 25
	gstaticInitter.i32 = 125
	gstaticInitter.start(_p5s)
	gstaticInitter.zero = 4
	gstaticInitter.start(__2E_str1670)
	gstaticInitter.asciz = "Assertion failed: (%s), function %s, file %s, line %d.\n"
	gstaticInitter.start(_initial_2E_2136)
	gstaticInitter.zero = 128
	gstaticInitter.start(___mlocale_changed_2E_b)
	gstaticInitter.zero = 1
	gstaticInitter.start(__2E_str20159)
	gstaticInitter.asciz = "."
	gstaticInitter.start(_numempty22)
	gstaticInitter.asciz = "\x7f"
	gstaticInitter.start(___nlocale_changed_2E_b)
	gstaticInitter.zero = 1
	gstaticInitter.start(_ret_2E_1494_2E_0)
	gstaticInitter.zero = 4
	gstaticInitter.start(_ret_2E_1494_2E_1)
	gstaticInitter.zero = 4
	gstaticInitter.start(_ret_2E_1494_2E_2)
	gstaticInitter.zero = 4
	gstaticInitter.start(___sF)
	gstaticInitter.zero = 4
	gstaticInitter.zero = 4
	gstaticInitter.zero = 4
	gstaticInitter.i16 = 4
	gstaticInitter.zero = 2
	gstaticInitter.zero = 8
	gstaticInitter.zero = 4
	gstaticInitter.i32 = ___sF
	gstaticInitter.i32 = ___sclose
	gstaticInitter.i32 = ___sread
	gstaticInitter.i32 = ___sseek
	gstaticInitter.i32 = ___swrite
	gstaticInitter.zero = 8
	gstaticInitter.i32 = ___sFX
	gstaticInitter.zero = 4
	gstaticInitter.zero = 3
	gstaticInitter.zero = 1
	gstaticInitter.zero = 8
	gstaticInitter.zero = 4
	gstaticInitter.zero = 8
	gstaticInitter.zero = 4
	gstaticInitter.zero = 4
	gstaticInitter.zero = 4
	gstaticInitter.i16 = 8
	gstaticInitter.i16 = 1
	gstaticInitter.zero = 8
	gstaticInitter.zero = 4
	gstaticInitter.i32 = (___sF) + 88
	gstaticInitter.i32 = ___sclose
	gstaticInitter.i32 = ___sread
	gstaticInitter.i32 = ___sseek
	gstaticInitter.i32 = ___swrite
	gstaticInitter.zero = 8
	gstaticInitter.i32 = (___sFX) + 148
	gstaticInitter.zero = 4
	gstaticInitter.zero = 3
	gstaticInitter.zero = 1
	gstaticInitter.zero = 8
	gstaticInitter.zero = 4
	gstaticInitter.zero = 8
	gstaticInitter.zero = 4
	gstaticInitter.zero = 4
	gstaticInitter.zero = 4
	gstaticInitter.i16 = 10
	gstaticInitter.i16 = 2
	gstaticInitter.zero = 8
	gstaticInitter.zero = 4
	gstaticInitter.i32 = (___sF) + 176
	gstaticInitter.i32 = ___sclose
	gstaticInitter.i32 = ___sread
	gstaticInitter.i32 = ___sseek
	gstaticInitter.i32 = ___swrite
	gstaticInitter.zero = 8
	gstaticInitter.i32 = (___sFX) + 296
	gstaticInitter.zero = 4
	gstaticInitter.zero = 3
	gstaticInitter.zero = 1
	gstaticInitter.zero = 8
	gstaticInitter.zero = 4
	gstaticInitter.zero = 8
	gstaticInitter.start(___sdidinit_2E_b)
	gstaticInitter.zero = 1
	gstaticInitter.start(_usual_extra)
	gstaticInitter.zero = 2516
	gstaticInitter.start(_usual)
	gstaticInitter.zero = 1496
	gstaticInitter.start(___cleanup_2E_b)
	gstaticInitter.zero = 1
	gstaticInitter.start(___sglue)
	gstaticInitter.i32 = _uglue
	gstaticInitter.i32 = 3
	gstaticInitter.i32 = ___sF
	gstaticInitter.start(_uglue)
	gstaticInitter.zero = 4
	gstaticInitter.i32 = 17
	gstaticInitter.i32 = _usual
	gstaticInitter.start(___sFX)
	gstaticInitter.zero = 444
	gstaticInitter.start(_xdigs_lower_2E_4528)
	gstaticInitter.ascii = "0123456789abcdef?"
	gstaticInitter.start(_xdigs_upper_2E_4529)
	gstaticInitter.ascii = "0123456789ABCDEF?"
	gstaticInitter.start(__2E_str118283)
	gstaticInitter.asciz = "nan"
	gstaticInitter.start(__2E_str219284)
	gstaticInitter.asciz = "NAN"
	gstaticInitter.start(__2E_str320285)
	gstaticInitter.asciz = "inf"
	gstaticInitter.start(__2E_str421)
	gstaticInitter.asciz = "INF"
	gstaticInitter.start(__2E_str522)
	gstaticInitter.asciz = "(null)"
	gstaticInitter.start(_blanks_2E_4526)
	gstaticInitter.ascii = "                "
	gstaticInitter.start(_zeroes_2E_4527)
	gstaticInitter.ascii = "0000000000000000"
	gstaticInitter.start(___atexit)
	gstaticInitter.i32 = ___atexit0_2E_3021
	gstaticInitter.start(___atexit0_2E_3021)
	gstaticInitter.zero = 4
	gstaticInitter.i32 = 2
	gstaticInitter.i32 = 2
	gstaticInitter.i32 = ___tcf_0
	gstaticInitter.zero = 4
	gstaticInitter.i32 = ___dso_handle
	gstaticInitter.i32 = 2
	gstaticInitter.i32 = ___tcf_1
	gstaticInitter.zero = 4
	gstaticInitter.i32 = ___dso_handle
	gstaticInitter.zero = 16
	gstaticInitter.zero = 16
	gstaticInitter.zero = 16
	gstaticInitter.zero = 16
	gstaticInitter.zero = 16
	gstaticInitter.zero = 16
	gstaticInitter.zero = 16
	gstaticInitter.zero = 16
	gstaticInitter.zero = 16
	gstaticInitter.zero = 16
	gstaticInitter.zero = 16
	gstaticInitter.zero = 16
	gstaticInitter.zero = 16
	gstaticInitter.zero = 16
	gstaticInitter.zero = 16
	gstaticInitter.zero = 16
	gstaticInitter.zero = 16
	gstaticInitter.zero = 16
	gstaticInitter.zero = 16
	gstaticInitter.zero = 16
	gstaticInitter.zero = 16
	gstaticInitter.zero = 16
	gstaticInitter.zero = 16
	gstaticInitter.zero = 16
	gstaticInitter.zero = 16
	gstaticInitter.zero = 16
	gstaticInitter.zero = 16
	gstaticInitter.zero = 16
	gstaticInitter.zero = 16
	gstaticInitter.zero = 16
	gstaticInitter.start(_free_list)
	gstaticInitter.zero = 20
	gstaticInitter.start(_malloc_origo)
	gstaticInitter.zero = 4
	gstaticInitter.start(_last_index)
	gstaticInitter.zero = 4
	gstaticInitter.start(_malloc_brk)
	gstaticInitter.zero = 4
	gstaticInitter.start(_malloc_ninfo)
	gstaticInitter.zero = 4
	gstaticInitter.start(_page_dir)
	gstaticInitter.zero = 4
	gstaticInitter.start(_malloc_junk_2E_b)
	gstaticInitter.zero = 1
	gstaticInitter.start(_px)
	gstaticInitter.zero = 4
	gstaticInitter.start(_malloc_zero_2E_b)
	gstaticInitter.zero = 1
	gstaticInitter.start(_malloc_hint_2E_b)
	gstaticInitter.zero = 1
	gstaticInitter.start(_malloc_cache)
	gstaticInitter.i32 = 16
	gstaticInitter.start(_malloc_active_2E_3509)
	gstaticInitter.zero = 4
	gstaticInitter.start(_malloc_started_2E_3510_2E_b)
	gstaticInitter.zero = 1
	gstaticInitter.start(__2E_str113335)
	gstaticInitter.asciz = "MALLOC_OPTIONS"
	gstaticInitter.start(_malloc_realloc_2E_b)
	gstaticInitter.zero = 1
	gstaticInitter.start(_malloc_sysv_2E_b)
	gstaticInitter.zero = 1
	gstaticInitter.start(_smodes)
	gstaticInitter.zero = 164
	gstaticInitter.i32 = 1
	gstaticInitter.i32 = 2
	gstaticInitter.i32 = 256
	gstaticInitter.i32 = 224
	gstaticInitter.i32 = 256
	gstaticInitter.i32 = 224
	gstaticInitter.i32 = 32
	gstaticInitter.i32 = 1
	gstaticInitter.zero = 4
	gstaticInitter.zero = 4
	gstaticInitter.zero = 4
	gstaticInitter.zero = 4
	gstaticInitter.zero = 4
	gstaticInitter.i32 = 3
	gstaticInitter.i32 = 4
	gstaticInitter.i32 = 16
	gstaticInitter.i32 = 8
	gstaticInitter.zero = 4
	gstaticInitter.i32 = 24
	gstaticInitter.i32 = 8
	gstaticInitter.i32 = 8
	gstaticInitter.i32 = 8
	gstaticInitter.i32 = 8
	gstaticInitter.zero = 64
	gstaticInitter.zero = 4
	gstaticInitter.zero = 4
	gstaticInitter.i32 = 2
	gstaticInitter.i32 = 2
	gstaticInitter.i32 = 512
	gstaticInitter.i32 = 448
	gstaticInitter.i32 = 512
	gstaticInitter.i32 = 448
	gstaticInitter.i32 = 32
	gstaticInitter.i32 = 1
	gstaticInitter.zero = 4
	gstaticInitter.zero = 4
	gstaticInitter.zero = 4
	gstaticInitter.zero = 4
	gstaticInitter.zero = 4
	gstaticInitter.i32 = 3
	gstaticInitter.i32 = 4
	gstaticInitter.i32 = 16
	gstaticInitter.i32 = 8
	gstaticInitter.zero = 4
	gstaticInitter.i32 = 24
	gstaticInitter.i32 = 8
	gstaticInitter.i32 = 8
	gstaticInitter.i32 = 8
	gstaticInitter.i32 = 8
	gstaticInitter.zero = 64
	gstaticInitter.zero = 4
	gstaticInitter.zero = 4
	gstaticInitter.i32 = 3
	gstaticInitter.i32 = 2
	gstaticInitter.i32 = 640
	gstaticInitter.i32 = 480
	gstaticInitter.i32 = 640
	gstaticInitter.i32 = 480
	gstaticInitter.i32 = 32
	gstaticInitter.i32 = 1
	gstaticInitter.zero = 4
	gstaticInitter.zero = 4
	gstaticInitter.zero = 4
	gstaticInitter.zero = 4
	gstaticInitter.zero = 4
	gstaticInitter.i32 = 3
	gstaticInitter.i32 = 4
	gstaticInitter.i32 = 16
	gstaticInitter.i32 = 8
	gstaticInitter.zero = 4
	gstaticInitter.i32 = 24
	gstaticInitter.i32 = 8
	gstaticInitter.i32 = 8
	gstaticInitter.i32 = 8
	gstaticInitter.i32 = 8
	gstaticInitter.zero = 64
	gstaticInitter.zero = 4
	gstaticInitter.zero = 4
	gstaticInitter.i32 = 4
	gstaticInitter.i32 = 2
	gstaticInitter.i32 = 800
	gstaticInitter.i32 = 600
	gstaticInitter.i32 = 800
	gstaticInitter.i32 = 600
	gstaticInitter.i32 = 32
	gstaticInitter.i32 = 1
	gstaticInitter.zero = 4
	gstaticInitter.zero = 4
	gstaticInitter.zero = 4
	gstaticInitter.zero = 4
	gstaticInitter.zero = 4
	gstaticInitter.i32 = 3
	gstaticInitter.i32 = 4
	gstaticInitter.i32 = 16
	gstaticInitter.i32 = 8
	gstaticInitter.zero = 4
	gstaticInitter.i32 = 24
	gstaticInitter.i32 = 8
	gstaticInitter.i32 = 8
	gstaticInitter.i32 = 8
	gstaticInitter.i32 = 8
	gstaticInitter.zero = 64
	gstaticInitter.zero = 4
	gstaticInitter.zero = 4
	gstaticInitter.i32 = 5
	gstaticInitter.i32 = 2
	gstaticInitter.i32 = 960
	gstaticInitter.i32 = 720
	gstaticInitter.i32 = 960
	gstaticInitter.i32 = 720
	gstaticInitter.i32 = 32
	gstaticInitter.i32 = 1
	gstaticInitter.zero = 4
	gstaticInitter.zero = 4
	gstaticInitter.zero = 4
	gstaticInitter.zero = 4
	gstaticInitter.zero = 4
	gstaticInitter.i32 = 3
	gstaticInitter.i32 = 4
	gstaticInitter.i32 = 16
	gstaticInitter.i32 = 8
	gstaticInitter.zero = 4
	gstaticInitter.i32 = 24
	gstaticInitter.i32 = 8
	gstaticInitter.i32 = 8
	gstaticInitter.i32 = 8
	gstaticInitter.i32 = 8
	gstaticInitter.zero = 64
	gstaticInitter.zero = 4
	gstaticInitter.zero = 4
	gstaticInitter.i32 = 6
	gstaticInitter.i32 = 2
	gstaticInitter.i32 = 1024
	gstaticInitter.i32 = 768
	gstaticInitter.i32 = 1024
	gstaticInitter.i32 = 768
	gstaticInitter.i32 = 32
	gstaticInitter.i32 = 1
	gstaticInitter.zero = 4
	gstaticInitter.zero = 4
	gstaticInitter.zero = 4
	gstaticInitter.zero = 4
	gstaticInitter.zero = 4
	gstaticInitter.i32 = 3
	gstaticInitter.i32 = 4
	gstaticInitter.i32 = 16
	gstaticInitter.i32 = 8
	gstaticInitter.zero = 4
	gstaticInitter.i32 = 24
	gstaticInitter.i32 = 8
	gstaticInitter.i32 = 8
	gstaticInitter.i32 = 8
	gstaticInitter.i32 = 8
	gstaticInitter.zero = 64
	gstaticInitter.zero = 4
	gstaticInitter.zero = 4
	gstaticInitter.i32 = 7
	gstaticInitter.i32 = 2
	gstaticInitter.i32 = 1152
	gstaticInitter.i32 = 864
	gstaticInitter.i32 = 1152
	gstaticInitter.i32 = 864
	gstaticInitter.i32 = 32
	gstaticInitter.i32 = 1
	gstaticInitter.zero = 4
	gstaticInitter.zero = 4
	gstaticInitter.zero = 4
	gstaticInitter.zero = 4
	gstaticInitter.zero = 4
	gstaticInitter.i32 = 3
	gstaticInitter.i32 = 4
	gstaticInitter.i32 = 16
	gstaticInitter.i32 = 8
	gstaticInitter.zero = 4
	gstaticInitter.i32 = 24
	gstaticInitter.i32 = 8
	gstaticInitter.i32 = 8
	gstaticInitter.i32 = 8
	gstaticInitter.i32 = 8
	gstaticInitter.zero = 64
	gstaticInitter.zero = 4
	gstaticInitter.zero = 4
	gstaticInitter.i32 = 8
	gstaticInitter.i32 = 2
	gstaticInitter.i32 = 1280
	gstaticInitter.i32 = 1024
	gstaticInitter.i32 = 1280
	gstaticInitter.i32 = 1024
	gstaticInitter.i32 = 32
	gstaticInitter.i32 = 1
	gstaticInitter.zero = 4
	gstaticInitter.zero = 4
	gstaticInitter.zero = 4
	gstaticInitter.zero = 4
	gstaticInitter.zero = 4
	gstaticInitter.i32 = 3
	gstaticInitter.i32 = 4
	gstaticInitter.i32 = 16
	gstaticInitter.i32 = 8
	gstaticInitter.zero = 4
	gstaticInitter.i32 = 24
	gstaticInitter.i32 = 8
	gstaticInitter.i32 = 8
	gstaticInitter.i32 = 8
	gstaticInitter.i32 = 8
	gstaticInitter.zero = 64
	gstaticInitter.zero = 4
	gstaticInitter.zero = 4
	gstaticInitter.start(__2E_str3399)
	gstaticInitter.asciz = "GIO_KEYMAP\n"
	gstaticInitter.start(__2E_str4400)
	gstaticInitter.asciz = "  (%d) w: %d h: %d\n"
	gstaticInitter.start(__2E_str5401)
	gstaticInitter.asciz = "CONS_MOUSECTL\n"
	gstaticInitter.start(__2E_str6402)
	gstaticInitter.asciz = "VT_GETMODE\n"
	gstaticInitter.start(__2E_str7403)
	gstaticInitter.asciz = "VGLIOCTL %d\n"
	gstaticInitter.start(__ZL14emergency_used)
	gstaticInitter.zero = 4
	gstaticInitter.start(__ZL16emergency_buffer)
	gstaticInitter.zero = 16384
	gstaticInitter.start(__ZTVSt9exception)
	gstaticInitter.zero = 4
	gstaticInitter.i32 = __ZTISt9exception
	gstaticInitter.i32 = __ZNSt9exceptionD1Ev
	gstaticInitter.i32 = __ZNSt9exceptionD0Ev
	gstaticInitter.i32 = __ZNKSt9exception4whatEv
	gstaticInitter.start(__ZTISt9exception)
	gstaticInitter.i32 = (__ZTVN10__cxxabiv117__class_type_infoE) + (8)
	gstaticInitter.i32 = __ZTSSt9exception
	gstaticInitter.start(__ZTVN10__cxxabiv117__class_type_infoE)
	gstaticInitter.zero = 4
	gstaticInitter.i32 = __ZTIN10__cxxabiv117__class_type_infoE
	gstaticInitter.i32 = __ZN10__cxxabiv117__class_type_infoD1Ev
	gstaticInitter.i32 = __ZN10__cxxabiv117__class_type_infoD0Ev
	gstaticInitter.i32 = __ZNKSt9type_info14__is_pointer_pEv
	gstaticInitter.i32 = __ZNKSt9type_info15__is_function_pEv
	gstaticInitter.i32 = __ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
	gstaticInitter.i32 = __ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
	gstaticInitter.i32 = __ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
	gstaticInitter.i32 = __ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
	gstaticInitter.i32 = __ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_
	gstaticInitter.start(__ZTSSt9exception)
	gstaticInitter.asciz = "St9exception"
	gstaticInitter.start(__ZTVSt13bad_exception)
	gstaticInitter.zero = 4
	gstaticInitter.i32 = __ZTISt13bad_exception
	gstaticInitter.i32 = __ZNSt13bad_exceptionD1Ev
	gstaticInitter.i32 = __ZNSt13bad_exceptionD0Ev
	gstaticInitter.i32 = __ZNKSt9exception4whatEv
	gstaticInitter.start(__ZTISt13bad_exception)
	gstaticInitter.i32 = (__ZTVN10__cxxabiv120__si_class_type_infoE) + (8)
	gstaticInitter.i32 = __ZTSSt13bad_exception
	gstaticInitter.i32 = __ZTISt9exception
	gstaticInitter.start(__ZTVN10__cxxabiv120__si_class_type_infoE)
	gstaticInitter.zero = 4
	gstaticInitter.i32 = __ZTIN10__cxxabiv120__si_class_type_infoE
	gstaticInitter.i32 = __ZN10__cxxabiv120__si_class_type_infoD1Ev
	gstaticInitter.i32 = __ZN10__cxxabiv120__si_class_type_infoD0Ev
	gstaticInitter.i32 = __ZNKSt9type_info14__is_pointer_pEv
	gstaticInitter.i32 = __ZNKSt9type_info15__is_function_pEv
	gstaticInitter.i32 = __ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
	gstaticInitter.i32 = __ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
	gstaticInitter.i32 = __ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
	gstaticInitter.i32 = __ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
	gstaticInitter.i32 = __ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
	gstaticInitter.start(__ZTSSt13bad_exception)
	gstaticInitter.asciz = "St13bad_exception"
	gstaticInitter.start(__ZL14use_thread_key_2E_b)
	gstaticInitter.zero = 1
	gstaticInitter.start(__ZL14globals_static)
	gstaticInitter.zero = 8
	gstaticInitter.start(__ZTVSt9bad_alloc)
	gstaticInitter.zero = 4
	gstaticInitter.i32 = __ZTISt9bad_alloc
	gstaticInitter.i32 = __ZNSt9bad_allocD1Ev
	gstaticInitter.i32 = __ZNSt9bad_allocD0Ev
	gstaticInitter.i32 = __ZNKSt9exception4whatEv
	gstaticInitter.start(__ZTISt9bad_alloc)
	gstaticInitter.i32 = (__ZTVN10__cxxabiv120__si_class_type_infoE) + (8)
	gstaticInitter.i32 = __ZTSSt9bad_alloc
	gstaticInitter.i32 = __ZTISt9exception
	gstaticInitter.start(__ZTSSt9bad_alloc)
	gstaticInitter.asciz = "St9bad_alloc"
	gstaticInitter.start(__2E_str99)
	gstaticInitter.asciz = "pure virtual method called\n"
	gstaticInitter.start(__ZTVSt9type_info)
	gstaticInitter.zero = 4
	gstaticInitter.i32 = __ZTISt9type_info
	gstaticInitter.i32 = __ZNSt9type_infoD1Ev
	gstaticInitter.i32 = __ZNSt9type_infoD0Ev
	gstaticInitter.i32 = __ZNKSt9type_info14__is_pointer_pEv
	gstaticInitter.i32 = __ZNKSt9type_info15__is_function_pEv
	gstaticInitter.i32 = __ZNKSt9type_info10__do_catchEPKS_PPvj
	gstaticInitter.i32 = __ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
	gstaticInitter.start(__ZTISt9type_info)
	gstaticInitter.i32 = (__ZTVN10__cxxabiv117__class_type_infoE) + (8)
	gstaticInitter.i32 = __ZTSSt9type_info
	gstaticInitter.start(__ZTIN10__cxxabiv117__class_type_infoE)
	gstaticInitter.i32 = (__ZTVN10__cxxabiv120__si_class_type_infoE) + (8)
	gstaticInitter.i32 = __ZTSN10__cxxabiv117__class_type_infoE
	gstaticInitter.i32 = __ZTISt9type_info
	gstaticInitter.start(__ZTIN10__cxxabiv120__si_class_type_infoE)
	gstaticInitter.i32 = (__ZTVN10__cxxabiv120__si_class_type_infoE) + (8)
	gstaticInitter.i32 = __ZTSN10__cxxabiv120__si_class_type_infoE
	gstaticInitter.i32 = __ZTIN10__cxxabiv117__class_type_infoE
	gstaticInitter.start(__ZTSN10__cxxabiv120__si_class_type_infoE)
	gstaticInitter.asciz = "N10__cxxabiv120__si_class_type_infoE"
	gstaticInitter.start(__ZTSN10__cxxabiv117__class_type_infoE)
	gstaticInitter.asciz = "N10__cxxabiv117__class_type_infoE"
	gstaticInitter.start(__ZTSSt9type_info)
	gstaticInitter.asciz = "St9type_info"
	gstaticInitter.start(__ZTVN10__cxxabiv121__vmi_class_type_infoE)
	gstaticInitter.zero = 4
	gstaticInitter.i32 = __ZTIN10__cxxabiv121__vmi_class_type_infoE
	gstaticInitter.i32 = __ZN10__cxxabiv121__vmi_class_type_infoD1Ev
	gstaticInitter.i32 = __ZN10__cxxabiv121__vmi_class_type_infoD0Ev
	gstaticInitter.i32 = __ZNKSt9type_info14__is_pointer_pEv
	gstaticInitter.i32 = __ZNKSt9type_info15__is_function_pEv
	gstaticInitter.i32 = __ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
	gstaticInitter.i32 = __ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
	gstaticInitter.i32 = __ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
	gstaticInitter.i32 = __ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
	gstaticInitter.i32 = __ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
	gstaticInitter.start(__ZTIN10__cxxabiv121__vmi_class_type_infoE)
	gstaticInitter.i32 = (__ZTVN10__cxxabiv120__si_class_type_infoE) + (8)
	gstaticInitter.i32 = __ZTSN10__cxxabiv121__vmi_class_type_infoE
	gstaticInitter.i32 = __ZTIN10__cxxabiv117__class_type_infoE
	gstaticInitter.start(__ZTSN10__cxxabiv121__vmi_class_type_infoE)
	gstaticInitter.asciz = "N10__cxxabiv121__vmi_class_type_infoE"
	gstaticInitter.start(__ZZN9__gnu_cxx27__verbose_terminate_handlerEvE11terminating_2E_b)
	gstaticInitter.zero = 1
	gstaticInitter.start(__2E_str3100)
	gstaticInitter.asciz = "terminate called recursively\n"
	gstaticInitter.start(__2E_str1101)
	gstaticInitter.asciz = "terminate called after throwing an instance of '"
	gstaticInitter.start(__2E_str2102)
	gstaticInitter.asciz = "'\n"
	gstaticInitter.start(__2E_str34103)
	gstaticInitter.asciz = "  what():  "
	gstaticInitter.start(__2E_str4104)
	gstaticInitter.asciz = "terminate called without an active exception\n"
	gstaticInitter.start(__2E_str18192)
	gstaticInitter.asciz = "GLIBCXX_FORCE_NEW"
	gstaticInitter.start(__ZGVN9__gnu_cxx10__mt_allocIcE10_S_optionsE)
	gstaticInitter.zero = 8
	gstaticInitter.start(__ZGVN9__gnu_cxx10__mt_allocIwE10_S_optionsE)
	gstaticInitter.zero = 8
	gstaticInitter.start(__ZGVNSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE2idE)
	gstaticInitter.zero = 8
	gstaticInitter.start(__ZGVNSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE2idE)
	gstaticInitter.zero = 8
	gstaticInitter.start(__ZGVNSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE2idE)
	gstaticInitter.zero = 8
	gstaticInitter.start(__ZGVNSt7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE2idE)
	gstaticInitter.zero = 8
	gstaticInitter.start(__ZGVNSt8numpunctIcE2idE)
	gstaticInitter.zero = 8
	gstaticInitter.start(__ZGVNSt8numpunctIwE2idE)
	gstaticInitter.zero = 8
	gstaticInitter.start(__ZGVNSt10moneypunctIcLb0EE2idE)
	gstaticInitter.zero = 8
	gstaticInitter.start(__ZGVNSt10moneypunctIcLb1EE2idE)
	gstaticInitter.zero = 8
	gstaticInitter.start(__ZGVNSt9money_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE2idE)
	gstaticInitter.zero = 8
	gstaticInitter.start(__ZGVNSt9money_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE2idE)
	gstaticInitter.zero = 8
	gstaticInitter.start(__ZGVNSt11__timepunctIcE2idE)
	gstaticInitter.zero = 8
	gstaticInitter.start(__ZGVNSt8time_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE2idE)
	gstaticInitter.zero = 8
	gstaticInitter.start(__ZGVNSt8time_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE2idE)
	gstaticInitter.zero = 8
	gstaticInitter.start(__ZGVNSt8messagesIcE2idE)
	gstaticInitter.zero = 8
	gstaticInitter.start(__ZGVNSt7collateIcE2idE)
	gstaticInitter.zero = 8
	gstaticInitter.start(__ZGVNSt7collateIwE2idE)
	gstaticInitter.zero = 8
	gstaticInitter.start(__ZGVNSt11__timepunctIwE2idE)
	gstaticInitter.zero = 8
	gstaticInitter.start(__ZGVNSt8time_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE2idE)
	gstaticInitter.zero = 8
	gstaticInitter.start(__ZGVNSt8time_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE2idE)
	gstaticInitter.zero = 8
	gstaticInitter.start(__ZGVNSt9money_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE2idE)
	gstaticInitter.zero = 8
	gstaticInitter.start(__ZGVNSt9money_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE2idE)
	gstaticInitter.zero = 8
	gstaticInitter.start(__ZGVNSt10moneypunctIwLb0EE2idE)
	gstaticInitter.zero = 8
	gstaticInitter.start(__ZGVNSt10moneypunctIwLb1EE2idE)
	gstaticInitter.zero = 8
	gstaticInitter.start(__ZGVNSt8messagesIwE2idE)
	gstaticInitter.zero = 8
	gstaticInitter.start(__ZTI13b2CircleShape)
	gstaticInitter.i32 = (__ZTVN10__cxxabiv120__si_class_type_infoE) + (8)
	gstaticInitter.i32 = __ZTS13b2CircleShape
	gstaticInitter.i32 = __ZTI7b2Shape
	gstaticInitter.start(__ZTS13b2CircleShape)
	gstaticInitter.asciz = "13b2CircleShape"
	gstaticInitter.start(__ZTI7b2Shape)
	gstaticInitter.i32 = (__ZTVN10__cxxabiv117__class_type_infoE) + (8)
	gstaticInitter.i32 = __ZTS7b2Shape
	gstaticInitter.start(__ZTS7b2Shape)
	gstaticInitter.asciz = "7b2Shape"
	gstaticInitter.start(__ZTI11b2EdgeShape)
	gstaticInitter.i32 = (__ZTVN10__cxxabiv120__si_class_type_infoE) + (8)
	gstaticInitter.i32 = __ZTS11b2EdgeShape
	gstaticInitter.i32 = __ZTI7b2Shape
	gstaticInitter.start(__ZTS11b2EdgeShape)
	gstaticInitter.asciz = "11b2EdgeShape"
	gstaticInitter.start(__ZTI11b2LoopShape)
	gstaticInitter.i32 = (__ZTVN10__cxxabiv120__si_class_type_infoE) + (8)
	gstaticInitter.i32 = __ZTS11b2LoopShape
	gstaticInitter.i32 = __ZTI7b2Shape
	gstaticInitter.start(__ZTS11b2LoopShape)
	gstaticInitter.asciz = "11b2LoopShape"
	gstaticInitter.start(__ZTI14b2PolygonShape)
	gstaticInitter.i32 = (__ZTVN10__cxxabiv120__si_class_type_infoE) + (8)
	gstaticInitter.i32 = __ZTS14b2PolygonShape
	gstaticInitter.i32 = __ZTI7b2Shape
	gstaticInitter.start(__ZTS14b2PolygonShape)
	gstaticInitter.asciz = "14b2PolygonShape"
	gstaticInitter.start(__ZTI15b2ContactFilter)
	gstaticInitter.i32 = (__ZTVN10__cxxabiv117__class_type_infoE) + (8)
	gstaticInitter.i32 = __ZTS15b2ContactFilter
	gstaticInitter.start(__ZTS15b2ContactFilter)
	gstaticInitter.asciz = "15b2ContactFilter"
	gstaticInitter.start(__ZTI15b2DistanceJoint)
	gstaticInitter.i32 = (__ZTVN10__cxxabiv120__si_class_type_infoE) + (8)
	gstaticInitter.i32 = __ZTS15b2DistanceJoint
	gstaticInitter.i32 = __ZTI7b2Joint
	gstaticInitter.start(__ZTS15b2DistanceJoint)
	gstaticInitter.asciz = "15b2DistanceJoint"
	gstaticInitter.start(__ZTI7b2Joint)
	gstaticInitter.i32 = (__ZTVN10__cxxabiv117__class_type_infoE) + (8)
	gstaticInitter.i32 = __ZTS7b2Joint
	gstaticInitter.start(__ZTS7b2Joint)
	gstaticInitter.asciz = "7b2Joint"
	gstaticInitter.start(__ZTI15b2FrictionJoint)
	gstaticInitter.i32 = (__ZTVN10__cxxabiv120__si_class_type_infoE) + (8)
	gstaticInitter.i32 = __ZTS15b2FrictionJoint
	gstaticInitter.i32 = __ZTI7b2Joint
	gstaticInitter.start(__ZTS15b2FrictionJoint)
	gstaticInitter.asciz = "15b2FrictionJoint"
	gstaticInitter.start(__ZTI11b2GearJoint)
	gstaticInitter.i32 = (__ZTVN10__cxxabiv120__si_class_type_infoE) + (8)
	gstaticInitter.i32 = __ZTS11b2GearJoint
	gstaticInitter.i32 = __ZTI7b2Joint
	gstaticInitter.start(__ZTS11b2GearJoint)
	gstaticInitter.asciz = "11b2GearJoint"
	gstaticInitter.start(__ZTI11b2LineJoint)
	gstaticInitter.i32 = (__ZTVN10__cxxabiv120__si_class_type_infoE) + (8)
	gstaticInitter.i32 = __ZTS11b2LineJoint
	gstaticInitter.i32 = __ZTI7b2Joint
	gstaticInitter.start(__ZTS11b2LineJoint)
	gstaticInitter.asciz = "11b2LineJoint"
	gstaticInitter.start(__ZTI12b2MouseJoint)
	gstaticInitter.i32 = (__ZTVN10__cxxabiv120__si_class_type_infoE) + (8)
	gstaticInitter.i32 = __ZTS12b2MouseJoint
	gstaticInitter.i32 = __ZTI7b2Joint
	gstaticInitter.start(__ZTS12b2MouseJoint)
	gstaticInitter.asciz = "12b2MouseJoint"
	gstaticInitter.start(__ZTI16b2PrismaticJoint)
	gstaticInitter.i32 = (__ZTVN10__cxxabiv120__si_class_type_infoE) + (8)
	gstaticInitter.i32 = __ZTS16b2PrismaticJoint
	gstaticInitter.i32 = __ZTI7b2Joint
	gstaticInitter.start(__ZTS16b2PrismaticJoint)
	gstaticInitter.asciz = "16b2PrismaticJoint"
	gstaticInitter.start(__ZTI13b2PulleyJoint)
	gstaticInitter.i32 = (__ZTVN10__cxxabiv120__si_class_type_infoE) + (8)
	gstaticInitter.i32 = __ZTS13b2PulleyJoint
	gstaticInitter.i32 = __ZTI7b2Joint
	gstaticInitter.start(__ZTS13b2PulleyJoint)
	gstaticInitter.asciz = "13b2PulleyJoint"
	gstaticInitter.start(__ZTI15b2RevoluteJoint)
	gstaticInitter.i32 = (__ZTVN10__cxxabiv120__si_class_type_infoE) + (8)
	gstaticInitter.i32 = __ZTS15b2RevoluteJoint
	gstaticInitter.i32 = __ZTI7b2Joint
	gstaticInitter.start(__ZTS15b2RevoluteJoint)
	gstaticInitter.asciz = "15b2RevoluteJoint"
	gstaticInitter.start(__ZTI11b2RopeJoint)
	gstaticInitter.i32 = (__ZTVN10__cxxabiv120__si_class_type_infoE) + (8)
	gstaticInitter.i32 = __ZTS11b2RopeJoint
	gstaticInitter.i32 = __ZTI7b2Joint
	gstaticInitter.start(__ZTS11b2RopeJoint)
	gstaticInitter.asciz = "11b2RopeJoint"
	gstaticInitter.start(__ZTI11b2WeldJoint)
	gstaticInitter.i32 = (__ZTVN10__cxxabiv120__si_class_type_infoE) + (8)
	gstaticInitter.i32 = __ZTS11b2WeldJoint
	gstaticInitter.i32 = __ZTI7b2Joint
	gstaticInitter.start(__ZTS11b2WeldJoint)
	gstaticInitter.asciz = "11b2WeldJoint"
	gstaticInitter.start(__ZTI15b2CircleContact)
	gstaticInitter.i32 = (__ZTVN10__cxxabiv120__si_class_type_infoE) + (8)
	gstaticInitter.i32 = __ZTS15b2CircleContact
	gstaticInitter.i32 = __ZTI9b2Contact
	gstaticInitter.start(__ZTS15b2CircleContact)
	gstaticInitter.asciz = "15b2CircleContact"
	gstaticInitter.start(__ZTI9b2Contact)
	gstaticInitter.i32 = (__ZTVN10__cxxabiv117__class_type_infoE) + (8)
	gstaticInitter.i32 = __ZTS9b2Contact
	gstaticInitter.start(__ZTS9b2Contact)
	gstaticInitter.asciz = "9b2Contact"
	gstaticInitter.start(__ZTI25b2PolygonAndCircleContact)
	gstaticInitter.i32 = (__ZTVN10__cxxabiv120__si_class_type_infoE) + (8)
	gstaticInitter.i32 = __ZTS25b2PolygonAndCircleContact
	gstaticInitter.i32 = __ZTI9b2Contact
	gstaticInitter.start(__ZTS25b2PolygonAndCircleContact)
	gstaticInitter.asciz = "25b2PolygonAndCircleContact"
	gstaticInitter.start(__ZTI16b2PolygonContact)
	gstaticInitter.i32 = (__ZTVN10__cxxabiv120__si_class_type_infoE) + (8)
	gstaticInitter.i32 = __ZTS16b2PolygonContact
	gstaticInitter.i32 = __ZTI9b2Contact
	gstaticInitter.start(__ZTS16b2PolygonContact)
	gstaticInitter.asciz = "16b2PolygonContact"
	gstaticInitter.start(__ZTI22b2EdgeAndCircleContact)
	gstaticInitter.i32 = (__ZTVN10__cxxabiv120__si_class_type_infoE) + (8)
	gstaticInitter.i32 = __ZTS22b2EdgeAndCircleContact
	gstaticInitter.i32 = __ZTI9b2Contact
	gstaticInitter.start(__ZTS22b2EdgeAndCircleContact)
	gstaticInitter.asciz = "22b2EdgeAndCircleContact"
	gstaticInitter.start(__ZTI23b2EdgeAndPolygonContact)
	gstaticInitter.i32 = (__ZTVN10__cxxabiv120__si_class_type_infoE) + (8)
	gstaticInitter.i32 = __ZTS23b2EdgeAndPolygonContact
	gstaticInitter.i32 = __ZTI9b2Contact
	gstaticInitter.start(__ZTS23b2EdgeAndPolygonContact)
	gstaticInitter.asciz = "23b2EdgeAndPolygonContact"
	gstaticInitter.start(__ZTI22b2LoopAndCircleContact)
	gstaticInitter.i32 = (__ZTVN10__cxxabiv120__si_class_type_infoE) + (8)
	gstaticInitter.i32 = __ZTS22b2LoopAndCircleContact
	gstaticInitter.i32 = __ZTI9b2Contact
	gstaticInitter.start(__ZTS22b2LoopAndCircleContact)
	gstaticInitter.asciz = "22b2LoopAndCircleContact"
	gstaticInitter.start(__ZTI23b2LoopAndPolygonContact)
	gstaticInitter.i32 = (__ZTVN10__cxxabiv120__si_class_type_infoE) + (8)
	gstaticInitter.i32 = __ZTS23b2LoopAndPolygonContact
	gstaticInitter.i32 = __ZTI9b2Contact
	gstaticInitter.start(__ZTS23b2LoopAndPolygonContact)
	gstaticInitter.asciz = "23b2LoopAndPolygonContact"
	gstaticInitter.start(__ZTV13b2CircleShape)
	gstaticInitter.zero = 4
	gstaticInitter.i32 = __ZTI13b2CircleShape
	gstaticInitter.i32 = __ZN13b2CircleShapeD1Ev
	gstaticInitter.i32 = __ZN13b2CircleShapeD0Ev
	gstaticInitter.i32 = __ZNK13b2CircleShape5CloneEP16b2BlockAllocator
	gstaticInitter.i32 = __ZNK13b2CircleShape13GetChildCountEv
	gstaticInitter.i32 = __ZNK13b2CircleShape9TestPointERK11b2TransformRK6b2Vec2
	gstaticInitter.i32 = __ZNK13b2CircleShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi
	gstaticInitter.i32 = __ZNK13b2CircleShape11ComputeAABBEP6b2AABBRK11b2Transformi
	gstaticInitter.i32 = __ZN13b2CircleShape11ComputeMassEP10b2MassDataf
	gstaticInitter.start(__ZTV14b2PolygonShape)
	gstaticInitter.zero = 4
	gstaticInitter.i32 = __ZTI14b2PolygonShape
	gstaticInitter.i32 = __ZN14b2PolygonShapeD1Ev
	gstaticInitter.i32 = __ZN14b2PolygonShapeD0Ev
	gstaticInitter.i32 = __ZNK14b2PolygonShape5CloneEP16b2BlockAllocator
	gstaticInitter.i32 = __ZNK14b2PolygonShape13GetChildCountEv
	gstaticInitter.i32 = __ZNK14b2PolygonShape9TestPointERK11b2TransformRK6b2Vec2
	gstaticInitter.i32 = __ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi
	gstaticInitter.i32 = __ZNK14b2PolygonShape11ComputeAABBEP6b2AABBRK11b2Transformi
	gstaticInitter.i32 = __ZN14b2PolygonShape11ComputeMassEP10b2MassDataf
	gstaticInitter.start(__ZTV11b2LoopShape)
	gstaticInitter.zero = 4
	gstaticInitter.i32 = __ZTI11b2LoopShape
	gstaticInitter.i32 = __ZN11b2LoopShapeD1Ev
	gstaticInitter.i32 = __ZN11b2LoopShapeD0Ev
	gstaticInitter.i32 = __ZNK11b2LoopShape5CloneEP16b2BlockAllocator
	gstaticInitter.i32 = __ZNK11b2LoopShape13GetChildCountEv
	gstaticInitter.i32 = __ZNK11b2LoopShape9TestPointERK11b2TransformRK6b2Vec2
	gstaticInitter.i32 = __ZNK11b2LoopShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi
	gstaticInitter.i32 = __ZNK11b2LoopShape11ComputeAABBEP6b2AABBRK11b2Transformi
	gstaticInitter.i32 = __ZN11b2LoopShape11ComputeMassEP10b2MassDataf
	gstaticInitter.start(__ZTV11b2EdgeShape)
	gstaticInitter.zero = 4
	gstaticInitter.i32 = __ZTI11b2EdgeShape
	gstaticInitter.i32 = __ZN11b2EdgeShapeD1Ev
	gstaticInitter.i32 = __ZN11b2EdgeShapeD0Ev
	gstaticInitter.i32 = __ZNK11b2EdgeShape5CloneEP16b2BlockAllocator
	gstaticInitter.i32 = __ZNK11b2EdgeShape13GetChildCountEv
	gstaticInitter.i32 = __ZNK11b2EdgeShape9TestPointERK11b2TransformRK6b2Vec2
	gstaticInitter.i32 = __ZNK11b2EdgeShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi
	gstaticInitter.i32 = __ZNK11b2EdgeShape11ComputeAABBEP6b2AABBRK11b2Transformi
	gstaticInitter.i32 = __ZN11b2EdgeShape11ComputeMassEP10b2MassDataf
	gstaticInitter.start(__ZTV15b2ContactFilter)
	gstaticInitter.zero = 4
	gstaticInitter.i32 = __ZTI15b2ContactFilter
	gstaticInitter.i32 = __ZN15b2ContactFilterD1Ev
	gstaticInitter.i32 = __ZN15b2ContactFilterD0Ev
	gstaticInitter.i32 = __ZN15b2ContactFilter13ShouldCollideEP9b2FixtureS1_
	gstaticInitter.start(__ZTV15b2CircleContact)
	gstaticInitter.zero = 4
	gstaticInitter.i32 = __ZTI15b2CircleContact
	gstaticInitter.i32 = __ZN15b2CircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_
	gstaticInitter.i32 = __ZN15b2CircleContactD1Ev
	gstaticInitter.i32 = __ZN15b2CircleContactD0Ev
	gstaticInitter.start(__ZTV22b2EdgeAndCircleContact)
	gstaticInitter.zero = 4
	gstaticInitter.i32 = __ZTI22b2EdgeAndCircleContact
	gstaticInitter.i32 = __ZN22b2EdgeAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_
	gstaticInitter.i32 = __ZN22b2EdgeAndCircleContactD1Ev
	gstaticInitter.i32 = __ZN22b2EdgeAndCircleContactD0Ev
	gstaticInitter.start(__ZTV23b2EdgeAndPolygonContact)
	gstaticInitter.zero = 4
	gstaticInitter.i32 = __ZTI23b2EdgeAndPolygonContact
	gstaticInitter.i32 = __ZN23b2EdgeAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_
	gstaticInitter.i32 = __ZN23b2EdgeAndPolygonContactD1Ev
	gstaticInitter.i32 = __ZN23b2EdgeAndPolygonContactD0Ev
	gstaticInitter.start(__ZTV22b2LoopAndCircleContact)
	gstaticInitter.zero = 4
	gstaticInitter.i32 = __ZTI22b2LoopAndCircleContact
	gstaticInitter.i32 = __ZN22b2LoopAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_
	gstaticInitter.i32 = __ZN22b2LoopAndCircleContactD1Ev
	gstaticInitter.i32 = __ZN22b2LoopAndCircleContactD0Ev
	gstaticInitter.start(__ZTV23b2LoopAndPolygonContact)
	gstaticInitter.zero = 4
	gstaticInitter.i32 = __ZTI23b2LoopAndPolygonContact
	gstaticInitter.i32 = __ZN23b2LoopAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_
	gstaticInitter.i32 = __ZN23b2LoopAndPolygonContactD1Ev
	gstaticInitter.i32 = __ZN23b2LoopAndPolygonContactD0Ev
	gstaticInitter.start(__ZTV25b2PolygonAndCircleContact)
	gstaticInitter.zero = 4
	gstaticInitter.i32 = __ZTI25b2PolygonAndCircleContact
	gstaticInitter.i32 = __ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_
	gstaticInitter.i32 = __ZN25b2PolygonAndCircleContactD1Ev
	gstaticInitter.i32 = __ZN25b2PolygonAndCircleContactD0Ev
	gstaticInitter.start(__ZTV16b2PolygonContact)
	gstaticInitter.zero = 4
	gstaticInitter.i32 = __ZTI16b2PolygonContact
	gstaticInitter.i32 = __ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_
	gstaticInitter.i32 = __ZN16b2PolygonContactD1Ev
	gstaticInitter.i32 = __ZN16b2PolygonContactD0Ev
	gstaticInitter.start(__ZTV15b2DistanceJoint)
	gstaticInitter.zero = 4
	gstaticInitter.i32 = __ZTI15b2DistanceJoint
	gstaticInitter.i32 = __ZNK15b2DistanceJoint10GetAnchorAEv
	gstaticInitter.i32 = __ZNK15b2DistanceJoint10GetAnchorBEv
	gstaticInitter.i32 = __ZNK15b2DistanceJoint16GetReactionForceEf
	gstaticInitter.i32 = __ZNK15b2DistanceJoint17GetReactionTorqueEf
	gstaticInitter.i32 = __ZN15b2DistanceJointD1Ev
	gstaticInitter.i32 = __ZN15b2DistanceJointD0Ev
	gstaticInitter.i32 = __ZN15b2DistanceJoint23InitVelocityConstraintsERK10b2TimeStep
	gstaticInitter.i32 = __ZN15b2DistanceJoint24SolveVelocityConstraintsERK10b2TimeStep
	gstaticInitter.i32 = __ZN15b2DistanceJoint24SolvePositionConstraintsEf
	gstaticInitter.start(__ZTV11b2GearJoint)
	gstaticInitter.zero = 4
	gstaticInitter.i32 = __ZTI11b2GearJoint
	gstaticInitter.i32 = __ZNK11b2GearJoint10GetAnchorAEv
	gstaticInitter.i32 = __ZNK11b2GearJoint10GetAnchorBEv
	gstaticInitter.i32 = __ZNK11b2GearJoint16GetReactionForceEf
	gstaticInitter.i32 = __ZNK11b2GearJoint17GetReactionTorqueEf
	gstaticInitter.i32 = __ZN11b2GearJointD1Ev
	gstaticInitter.i32 = __ZN11b2GearJointD0Ev
	gstaticInitter.i32 = __ZN11b2GearJoint23InitVelocityConstraintsERK10b2TimeStep
	gstaticInitter.i32 = __ZN11b2GearJoint24SolveVelocityConstraintsERK10b2TimeStep
	gstaticInitter.i32 = __ZN11b2GearJoint24SolvePositionConstraintsEf
	gstaticInitter.start(__ZTV11b2LineJoint)
	gstaticInitter.zero = 4
	gstaticInitter.i32 = __ZTI11b2LineJoint
	gstaticInitter.i32 = __ZNK11b2LineJoint10GetAnchorAEv
	gstaticInitter.i32 = __ZNK11b2LineJoint10GetAnchorBEv
	gstaticInitter.i32 = __ZNK11b2LineJoint16GetReactionForceEf
	gstaticInitter.i32 = __ZNK11b2LineJoint17GetReactionTorqueEf
	gstaticInitter.i32 = __ZN11b2LineJointD1Ev
	gstaticInitter.i32 = __ZN11b2LineJointD0Ev
	gstaticInitter.i32 = __ZN11b2LineJoint23InitVelocityConstraintsERK10b2TimeStep
	gstaticInitter.i32 = __ZN11b2LineJoint24SolveVelocityConstraintsERK10b2TimeStep
	gstaticInitter.i32 = __ZN11b2LineJoint24SolvePositionConstraintsEf
	gstaticInitter.start(__ZTV12b2MouseJoint)
	gstaticInitter.zero = 4
	gstaticInitter.i32 = __ZTI12b2MouseJoint
	gstaticInitter.i32 = __ZNK12b2MouseJoint10GetAnchorAEv
	gstaticInitter.i32 = __ZNK12b2MouseJoint10GetAnchorBEv
	gstaticInitter.i32 = __ZNK12b2MouseJoint16GetReactionForceEf
	gstaticInitter.i32 = __ZNK12b2MouseJoint17GetReactionTorqueEf
	gstaticInitter.i32 = __ZN12b2MouseJointD1Ev
	gstaticInitter.i32 = __ZN12b2MouseJointD0Ev
	gstaticInitter.i32 = __ZN12b2MouseJoint23InitVelocityConstraintsERK10b2TimeStep
	gstaticInitter.i32 = __ZN12b2MouseJoint24SolveVelocityConstraintsERK10b2TimeStep
	gstaticInitter.i32 = __ZN12b2MouseJoint24SolvePositionConstraintsEf
	gstaticInitter.start(__ZTV16b2PrismaticJoint)
	gstaticInitter.zero = 4
	gstaticInitter.i32 = __ZTI16b2PrismaticJoint
	gstaticInitter.i32 = __ZNK16b2PrismaticJoint10GetAnchorAEv
	gstaticInitter.i32 = __ZNK16b2PrismaticJoint10GetAnchorBEv
	gstaticInitter.i32 = __ZNK16b2PrismaticJoint16GetReactionForceEf
	gstaticInitter.i32 = __ZNK16b2PrismaticJoint17GetReactionTorqueEf
	gstaticInitter.i32 = __ZN16b2PrismaticJointD1Ev
	gstaticInitter.i32 = __ZN16b2PrismaticJointD0Ev
	gstaticInitter.i32 = __ZN16b2PrismaticJoint23InitVelocityConstraintsERK10b2TimeStep
	gstaticInitter.i32 = __ZN16b2PrismaticJoint24SolveVelocityConstraintsERK10b2TimeStep
	gstaticInitter.i32 = __ZN16b2PrismaticJoint24SolvePositionConstraintsEf
	gstaticInitter.start(__ZTV13b2PulleyJoint)
	gstaticInitter.zero = 4
	gstaticInitter.i32 = __ZTI13b2PulleyJoint
	gstaticInitter.i32 = __ZNK13b2PulleyJoint10GetAnchorAEv
	gstaticInitter.i32 = __ZNK13b2PulleyJoint10GetAnchorBEv
	gstaticInitter.i32 = __ZNK13b2PulleyJoint16GetReactionForceEf
	gstaticInitter.i32 = __ZNK13b2PulleyJoint17GetReactionTorqueEf
	gstaticInitter.i32 = __ZN13b2PulleyJointD1Ev
	gstaticInitter.i32 = __ZN13b2PulleyJointD0Ev
	gstaticInitter.i32 = __ZN13b2PulleyJoint23InitVelocityConstraintsERK10b2TimeStep
	gstaticInitter.i32 = __ZN13b2PulleyJoint24SolveVelocityConstraintsERK10b2TimeStep
	gstaticInitter.i32 = __ZN13b2PulleyJoint24SolvePositionConstraintsEf
	gstaticInitter.start(__ZTV15b2RevoluteJoint)
	gstaticInitter.zero = 4
	gstaticInitter.i32 = __ZTI15b2RevoluteJoint
	gstaticInitter.i32 = __ZNK15b2RevoluteJoint10GetAnchorAEv
	gstaticInitter.i32 = __ZNK15b2RevoluteJoint10GetAnchorBEv
	gstaticInitter.i32 = __ZNK15b2RevoluteJoint16GetReactionForceEf
	gstaticInitter.i32 = __ZNK15b2RevoluteJoint17GetReactionTorqueEf
	gstaticInitter.i32 = __ZN15b2RevoluteJointD1Ev
	gstaticInitter.i32 = __ZN15b2RevoluteJointD0Ev
	gstaticInitter.i32 = __ZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStep
	gstaticInitter.i32 = __ZN15b2RevoluteJoint24SolveVelocityConstraintsERK10b2TimeStep
	gstaticInitter.i32 = __ZN15b2RevoluteJoint24SolvePositionConstraintsEf
	gstaticInitter.start(__ZTV15b2FrictionJoint)
	gstaticInitter.zero = 4
	gstaticInitter.i32 = __ZTI15b2FrictionJoint
	gstaticInitter.i32 = __ZNK15b2FrictionJoint10GetAnchorAEv
	gstaticInitter.i32 = __ZNK15b2FrictionJoint10GetAnchorBEv
	gstaticInitter.i32 = __ZNK15b2FrictionJoint16GetReactionForceEf
	gstaticInitter.i32 = __ZNK15b2FrictionJoint17GetReactionTorqueEf
	gstaticInitter.i32 = __ZN15b2FrictionJointD1Ev
	gstaticInitter.i32 = __ZN15b2FrictionJointD0Ev
	gstaticInitter.i32 = __ZN15b2FrictionJoint23InitVelocityConstraintsERK10b2TimeStep
	gstaticInitter.i32 = __ZN15b2FrictionJoint24SolveVelocityConstraintsERK10b2TimeStep
	gstaticInitter.i32 = __ZN15b2FrictionJoint24SolvePositionConstraintsEf
	gstaticInitter.start(__ZTV11b2WeldJoint)
	gstaticInitter.zero = 4
	gstaticInitter.i32 = __ZTI11b2WeldJoint
	gstaticInitter.i32 = __ZNK11b2WeldJoint10GetAnchorAEv
	gstaticInitter.i32 = __ZNK11b2WeldJoint10GetAnchorBEv
	gstaticInitter.i32 = __ZNK11b2WeldJoint16GetReactionForceEf
	gstaticInitter.i32 = __ZNK11b2WeldJoint17GetReactionTorqueEf
	gstaticInitter.i32 = __ZN11b2WeldJointD1Ev
	gstaticInitter.i32 = __ZN11b2WeldJointD0Ev
	gstaticInitter.i32 = __ZN11b2WeldJoint23InitVelocityConstraintsERK10b2TimeStep
	gstaticInitter.i32 = __ZN11b2WeldJoint24SolveVelocityConstraintsERK10b2TimeStep
	gstaticInitter.i32 = __ZN11b2WeldJoint24SolvePositionConstraintsEf
	gstaticInitter.start(__ZTV11b2RopeJoint)
	gstaticInitter.zero = 4
	gstaticInitter.i32 = __ZTI11b2RopeJoint
	gstaticInitter.i32 = __ZNK11b2RopeJoint10GetAnchorAEv
	gstaticInitter.i32 = __ZNK11b2RopeJoint10GetAnchorBEv
	gstaticInitter.i32 = __ZNK11b2RopeJoint16GetReactionForceEf
	gstaticInitter.i32 = __ZNK11b2RopeJoint17GetReactionTorqueEf
	gstaticInitter.i32 = __ZN11b2RopeJointD1Ev
	gstaticInitter.i32 = __ZN11b2RopeJointD0Ev
	gstaticInitter.i32 = __ZN11b2RopeJoint23InitVelocityConstraintsERK10b2TimeStep
	gstaticInitter.i32 = __ZN11b2RopeJoint24SolveVelocityConstraintsERK10b2TimeStep
	gstaticInitter.i32 = __ZN11b2RopeJoint24SolvePositionConstraintsEf
	gstaticInitter.start(_as3_ptr)
	gstaticInitter.zero = 4
	gstaticInitter.start(__ZN9b2Contact13s_initializedE_2E_b)
	gstaticInitter.zero = 1
	gstaticInitter.start(__ZN9b2Contact11s_registersE)
	gstaticInitter.zero = 192
	gstaticInitter.start(_b2_defaultListener)
	gstaticInitter.i32 = (__ZTV17b2ContactListener) + 8
	gstaticInitter.start(_b2_defaultFilter)
	gstaticInitter.i32 = (__ZTV15b2ContactFilter) + 8
	gstaticInitter.start(__ZN16b2BlockAllocator28s_blockSizeLookupInitializedE_2E_b)
	gstaticInitter.zero = 1
	gstaticInitter.start(__ZN16b2BlockAllocator17s_blockSizeLookupE)
	gstaticInitter.zero = 641
	gstaticInitter.start(__ZN16b2BlockAllocator12s_blockSizesE)
	gstaticInitter.i32 = 16
	gstaticInitter.i32 = 32
	gstaticInitter.i32 = 64
	gstaticInitter.i32 = 96
	gstaticInitter.i32 = 128
	gstaticInitter.i32 = 160
	gstaticInitter.i32 = 192
	gstaticInitter.i32 = 224
	gstaticInitter.i32 = 256
	gstaticInitter.i32 = 320
	gstaticInitter.i32 = 384
	gstaticInitter.i32 = 448
	gstaticInitter.i32 = 512
	gstaticInitter.i32 = 640
	gstaticInitter.start(_b2_toiMaxRootIters)
	gstaticInitter.zero = 4
	gstaticInitter.start(_b2_toiRootIters)
	gstaticInitter.zero = 4
	gstaticInitter.start(_b2_toiMaxIters)
	gstaticInitter.zero = 4
	gstaticInitter.start(_b2_toiIters)
	gstaticInitter.zero = 4
	gstaticInitter.start(_b2_toiCalls)
	gstaticInitter.zero = 4
	gstaticInitter.start(_b2_gjkMaxIters)
	gstaticInitter.zero = 4
	gstaticInitter.start(_b2_gjkIters)
	gstaticInitter.zero = 4
	gstaticInitter.start(_b2_gjkCalls)
	gstaticInitter.zero = 4
	gstaticInitter.start(_b2_angularSleepTolerance)
	gstaticInitter.i32 = 1024391734	// float 0.0349066
	gstaticInitter.start(_b2_linearSleepTolerance)
	gstaticInitter.i32 = 1008981770	// float 0.01
	gstaticInitter.start(_b2_timeToSleep)
	gstaticInitter.i32 = 1056964608	// float 0.5
	gstaticInitter.start(_b2_contactBaumgarte)
	gstaticInitter.i32 = 1045220557	// float 0.2
	gstaticInitter.start(_b2_maxRotationSquared)
	gstaticInitter.i32 = 1075702247	// float 2.4674
	gstaticInitter.start(_b2_maxRotation)
	gstaticInitter.i32 = 1070141403	// float 1.5708
	gstaticInitter.start(_b2_maxTranslationSquared)
	gstaticInitter.i32 = 1082130432	// float 4
	gstaticInitter.start(_b2_maxTranslation)
	gstaticInitter.i32 = 1073741824	// float 2
	gstaticInitter.start(_b2_maxAngularCorrection)
	gstaticInitter.i32 = 1041168950	// float 0.139626
	gstaticInitter.start(_b2_maxLinearCorrection)
	gstaticInitter.i32 = 1045220557	// float 0.2
	gstaticInitter.start(_b2_velocityThreshold)
	gstaticInitter.i32 = 1065353216	// float 1
	gstaticInitter.start(_b2_maxTOIContacts)
	gstaticInitter.i32 = 32
	gstaticInitter.start(_b2_maxSubSteps)
	gstaticInitter.i32 = 8
	gstaticInitter.start(_b2_polygonRadius)
	gstaticInitter.i32 = 1008981770	// float 0.01
	gstaticInitter.start(_b2_angularSlop)
	gstaticInitter.i32 = 1024391734	// float 0.0349066
	gstaticInitter.start(_b2_linearSlop)
	gstaticInitter.i32 = 1000593162	// float 0.005
	gstaticInitter.start(_b2_aabbMultiplier)
	gstaticInitter.i32 = 1073741824	// float 2
	gstaticInitter.start(_b2_aabbExtension)
	gstaticInitter.i32 = 1036831949	// float 0.1
	gstaticInitter.start(__ZTV17b2ContactListener)
	gstaticInitter.zero = 4
	gstaticInitter.i32 = __ZTI17b2ContactListener
	gstaticInitter.i32 = __ZN17b2ContactListenerD1Ev
	gstaticInitter.i32 = __ZN17b2ContactListenerD0Ev
	gstaticInitter.i32 = __ZN17b2ContactListener12BeginContactEP9b2Contact
	gstaticInitter.i32 = __ZN17b2ContactListener10EndContactEP9b2Contact
	gstaticInitter.i32 = __ZN17b2ContactListener8PreSolveEP9b2ContactPK10b2Manifold
	gstaticInitter.i32 = __ZN17b2ContactListener9PostSolveEP9b2ContactPK16b2ContactImpulse
	gstaticInitter.start(__ZTI17b2ContactListener)
	gstaticInitter.i32 = (__ZTVN10__cxxabiv117__class_type_infoE) + (8)
	gstaticInitter.i32 = __ZTS17b2ContactListener
	gstaticInitter.start(__ZTS17b2ContactListener)
	gstaticInitter.asciz = "17b2ContactListener"
	gstaticInitter.start(__ZTV7b2Joint)
	gstaticInitter.zero = 4
	gstaticInitter.i32 = __ZTI7b2Joint
	gstaticInitter.i32 = ___cxa_pure_virtual
	gstaticInitter.i32 = ___cxa_pure_virtual
	gstaticInitter.i32 = ___cxa_pure_virtual
	gstaticInitter.i32 = ___cxa_pure_virtual
	gstaticInitter.i32 = __ZN7b2JointD1Ev
	gstaticInitter.i32 = __ZN7b2JointD0Ev
	gstaticInitter.i32 = ___cxa_pure_virtual
	gstaticInitter.i32 = ___cxa_pure_virtual
	gstaticInitter.i32 = ___cxa_pure_virtual
	gstaticInitter.start(__ZTV9b2Contact)
	gstaticInitter.zero = 4
	gstaticInitter.i32 = __ZTI9b2Contact
	gstaticInitter.i32 = ___cxa_pure_virtual
	gstaticInitter.i32 = __ZN9b2ContactD1Ev
	gstaticInitter.i32 = __ZN9b2ContactD0Ev
	gstaticInitter.start(__ZTV7b2Shape)
	gstaticInitter.zero = 4
	gstaticInitter.i32 = __ZTI7b2Shape
	gstaticInitter.i32 = __ZN7b2ShapeD1Ev
	gstaticInitter.i32 = __ZN7b2ShapeD0Ev
	gstaticInitter.i32 = ___cxa_pure_virtual
	gstaticInitter.i32 = ___cxa_pure_virtual
	gstaticInitter.i32 = ___cxa_pure_virtual
	gstaticInitter.i32 = ___cxa_pure_virtual
	gstaticInitter.i32 = ___cxa_pure_virtual
	gstaticInitter.i32 = ___cxa_pure_virtual
	gstaticInitter.start(_b2_maxPolygonVertices)
	gstaticInitter.i32 = 8
	gstaticInitter.start(_b2_maxManifoldPoints)
	gstaticInitter.i32 = 2
	gstaticInitter.start(__ZTV13WorldListener)
	gstaticInitter.zero = 4
	gstaticInitter.i32 = __ZTI13WorldListener
	gstaticInitter.i32 = __ZN13WorldListenerD1Ev
	gstaticInitter.i32 = __ZN13WorldListenerD0Ev
	gstaticInitter.i32 = __ZN13WorldListener12BeginContactEP9b2Contact
	gstaticInitter.i32 = __ZN13WorldListener10EndContactEP9b2Contact
	gstaticInitter.i32 = __ZN13WorldListener8PreSolveEP9b2ContactPK10b2Manifold
	gstaticInitter.i32 = __ZN13WorldListener9PostSolveEP9b2ContactPK16b2ContactImpulse
	gstaticInitter.i32 = __ZN13WorldListener10SayGoodbyeEP7b2Joint
	gstaticInitter.i32 = __ZN13WorldListener10SayGoodbyeEP9b2Fixture
	gstaticInitter.i32 = 4294967292
	gstaticInitter.i32 = __ZTI13WorldListener
	gstaticInitter.i32 = __ZThn4_N13WorldListenerD1Ev
	gstaticInitter.i32 = __ZThn4_N13WorldListenerD0Ev
	gstaticInitter.i32 = __ZThn4_N13WorldListener10SayGoodbyeEP7b2Joint
	gstaticInitter.i32 = __ZThn4_N13WorldListener10SayGoodbyeEP9b2Fixture
	gstaticInitter.start(__ZTI13WorldListener)
	gstaticInitter.i32 = (__ZTVN10__cxxabiv121__vmi_class_type_infoE) + (8)
	gstaticInitter.i32 = __ZTS13WorldListener
	gstaticInitter.zero = 4
	gstaticInitter.i32 = 2
	gstaticInitter.i32 = __ZTI17b2ContactListener
	gstaticInitter.i32 = 2
	gstaticInitter.i32 = __ZTI21b2DestructionListener
	gstaticInitter.i32 = 1026
	gstaticInitter.start(__ZTS13WorldListener)
	gstaticInitter.asciz = "13WorldListener"
	gstaticInitter.start(__ZTI21b2DestructionListener)
	gstaticInitter.i32 = (__ZTVN10__cxxabiv117__class_type_infoE) + (8)
	gstaticInitter.i32 = __ZTS21b2DestructionListener
	gstaticInitter.start(__ZTS21b2DestructionListener)
	gstaticInitter.asciz = "21b2DestructionListener"
	gstaticInitter.start(__ZTV21b2DestructionListener)
	gstaticInitter.zero = 4
	gstaticInitter.i32 = __ZTI21b2DestructionListener
	gstaticInitter.i32 = __ZN21b2DestructionListenerD1Ev
	gstaticInitter.i32 = __ZN21b2DestructionListenerD0Ev
	gstaticInitter.i32 = ___cxa_pure_virtual
	gstaticInitter.i32 = ___cxa_pure_virtual
	gstaticInitter.start(__ZTV15RayCastCallback)
	gstaticInitter.zero = 4
	gstaticInitter.i32 = __ZTI15RayCastCallback
	gstaticInitter.i32 = __ZN15RayCastCallbackD1Ev
	gstaticInitter.i32 = __ZN15RayCastCallbackD0Ev
	gstaticInitter.i32 = __ZN15RayCastCallback13ReportFixtureEP9b2FixtureRK6b2Vec2S4_f
	gstaticInitter.start(__ZTI15RayCastCallback)
	gstaticInitter.i32 = (__ZTVN10__cxxabiv120__si_class_type_infoE) + (8)
	gstaticInitter.i32 = __ZTS15RayCastCallback
	gstaticInitter.i32 = __ZTI17b2RayCastCallback
	gstaticInitter.start(__ZTS15RayCastCallback)
	gstaticInitter.asciz = "15RayCastCallback"
	gstaticInitter.start(__ZTI17b2RayCastCallback)
	gstaticInitter.i32 = (__ZTVN10__cxxabiv117__class_type_infoE) + (8)
	gstaticInitter.i32 = __ZTS17b2RayCastCallback
	gstaticInitter.start(__ZTS17b2RayCastCallback)
	gstaticInitter.asciz = "17b2RayCastCallback"
	gstaticInitter.start(__ZTV17b2RayCastCallback)
	gstaticInitter.zero = 4
	gstaticInitter.i32 = __ZTI17b2RayCastCallback
	gstaticInitter.i32 = __ZN17b2RayCastCallbackD1Ev
	gstaticInitter.i32 = __ZN17b2RayCastCallbackD0Ev
	gstaticInitter.i32 = ___cxa_pure_virtual
	gstaticInitter.start(__ZTV13QueryCallback)
	gstaticInitter.zero = 4
	gstaticInitter.i32 = __ZTI13QueryCallback
	gstaticInitter.i32 = __ZN13QueryCallbackD1Ev
	gstaticInitter.i32 = __ZN13QueryCallbackD0Ev
	gstaticInitter.i32 = __ZN13QueryCallback13ReportFixtureEP9b2Fixture
	gstaticInitter.start(__ZTI13QueryCallback)
	gstaticInitter.i32 = (__ZTVN10__cxxabiv120__si_class_type_infoE) + (8)
	gstaticInitter.i32 = __ZTS13QueryCallback
	gstaticInitter.i32 = __ZTI15b2QueryCallback
	gstaticInitter.start(__ZTS13QueryCallback)
	gstaticInitter.asciz = "13QueryCallback"
	gstaticInitter.start(__ZTI15b2QueryCallback)
	gstaticInitter.i32 = (__ZTVN10__cxxabiv117__class_type_infoE) + (8)
	gstaticInitter.i32 = __ZTS15b2QueryCallback
	gstaticInitter.start(__ZTS15b2QueryCallback)
	gstaticInitter.asciz = "15b2QueryCallback"
	gstaticInitter.start(__ZTV15b2QueryCallback)
	gstaticInitter.zero = 4
	gstaticInitter.i32 = __ZTI15b2QueryCallback
	gstaticInitter.i32 = __ZN15b2QueryCallbackD1Ev
	gstaticInitter.i32 = __ZN15b2QueryCallbackD0Ev
	gstaticInitter.i32 = ___cxa_pure_virtual
	gstaticInitter.start(__ZTV12b2FixtureDef)
	gstaticInitter.zero = 4
	gstaticInitter.i32 = __ZTI12b2FixtureDef
	gstaticInitter.i32 = __ZN12b2FixtureDefD1Ev
	gstaticInitter.i32 = __ZN12b2FixtureDefD0Ev
	gstaticInitter.start(__ZTI12b2FixtureDef)
	gstaticInitter.i32 = (__ZTVN10__cxxabiv117__class_type_infoE) + (8)
	gstaticInitter.i32 = __ZTS12b2FixtureDef
	gstaticInitter.start(__ZTS12b2FixtureDef)
	gstaticInitter.asciz = "12b2FixtureDef"
	gstaticInitter.start(__ZZNK11b2LoopShape9GetVertexEiE8__func__)
	gstaticInitter.asciz = "GetVertex"
	gstaticInitter.start(__2E_str207)
	gstaticInitter.asciz = "../Box2D/Collision/Shapes/b2LoopShape.h"
	gstaticInitter.start(__2E_str1208)
	gstaticInitter.asciz = "0 <= index && index < m_count"
	gstaticInitter.start(__ZZNK13b2DynamicTree11GetUserDataEiE8__func__)
	gstaticInitter.asciz = "GetUserData"
	gstaticInitter.start(__2E_str2209)
	gstaticInitter.asciz = "../Box2D/Collision/b2DynamicTree.h"
	gstaticInitter.start(__2E_str3210)
	gstaticInitter.asciz = "0 <= proxyId && proxyId < m_nodeCapacity"
	gstaticInitter.start(__ZZNK13b2DynamicTree10GetFatAABBEiE8__func__)
	gstaticInitter.asciz = "GetFatAABB"
	gstaticInitter.start(__2E_str4211)
	gstaticInitter.asciz = "../Box2D/Collision/b2Distance.h"
	gstaticInitter.start(__ZZN13b2DynamicTree8FreeNodeEiE8__func__)
	gstaticInitter.asciz = "FreeNode"
	gstaticInitter.start(__2E_str5212)
	gstaticInitter.asciz = "../Box2D/Collision/b2DynamicTree.cpp"
	gstaticInitter.start(__2E_str6213)
	gstaticInitter.asciz = "0 <= nodeId && nodeId < m_nodeCapacity"
	gstaticInitter.start(__2E_str7214)
	gstaticInitter.asciz = "0 < m_nodeCount"
	gstaticInitter.start(__ZZNK11b2LoopShape12GetChildEdgeEP11b2EdgeShapeiE8__func__)
	gstaticInitter.asciz = "GetChildEdge"
	gstaticInitter.start(__2E_str8215)
	gstaticInitter.asciz = "../Box2D/Collision/Shapes/b2LoopShape.cpp"
	gstaticInitter.start(__2E_str9216)
	gstaticInitter.asciz = "2 <= m_count"
	gstaticInitter.start(__ZZN16b2StackAllocatorD4EvE8__func__)
	gstaticInitter.asciz = "~b2StackAllocator"
	gstaticInitter.start(__2E_str10217)
	gstaticInitter.asciz = "../Box2D/Common/b2StackAllocator.cpp"
	gstaticInitter.start(__2E_str11218)
	gstaticInitter.asciz = "m_index == 0"
	gstaticInitter.start(__2E_str12219)
	gstaticInitter.asciz = "m_entryCount == 0"
	gstaticInitter.start(__ZZN8b2Island3AddEP6b2BodyE8__func__)
	gstaticInitter.asciz = "Add"
	gstaticInitter.start(__2E_str13220)
	gstaticInitter.asciz = "../Box2D/Dynamics/b2Island.h"
	gstaticInitter.start(__2E_str14221)
	gstaticInitter.asciz = "m_bodyCount < m_bodyCapacity"
	gstaticInitter.start(__2E_str15222)
	gstaticInitter.asciz = "m_contactCount < m_contactCapacity"
	gstaticInitter.start(__2E_str16223)
	gstaticInitter.asciz = "m_jointCount < m_jointCapacity"
	gstaticInitter.start(__2E_str17224)
	gstaticInitter.asciz = "../Box2D/Dynamics/Contacts/b2Contact.cpp"
	gstaticInitter.start(__2E_str18225)
	gstaticInitter.asciz = "b2Shape::e_unknown < type1 && type1 < b2Shape::e_typeCount"
	gstaticInitter.start(__2E_str19226)
	gstaticInitter.asciz = "b2Shape::e_unknown < type2 && type2 < b2Shape::e_typeCount"
	gstaticInitter.start(__ZZN9b2Polygon18MergeParallelEdgesEfE8__func__)
	gstaticInitter.asciz = "MergeParallelEdges"
	gstaticInitter.start(__2E_str22229)
	gstaticInitter.asciz = "../Box2D/ConvexDecomposition/b2Polygon.cpp"
	gstaticInitter.start(__2E_str23230)
	gstaticInitter.asciz = "currIndex < newNVertices"
	gstaticInitter.start(__ZZN10b2PolyNode13AddConnectionERS_E8__func__)
	gstaticInitter.asciz = "AddConnection"
	gstaticInitter.start(__2E_str24231)
	gstaticInitter.asciz = "nConnected < MAX_CONNECTED"
	gstaticInitter.start(__ZZN10b2PolyNode16RemoveConnectionERS_E8__func__)
	gstaticInitter.asciz = "RemoveConnection"
	gstaticInitter.start(__2E_str25232)
	gstaticInitter.asciz = "isFound"
	gstaticInitter.start(__2E_str26233)
	gstaticInitter.asciz = "PtrType"
	gstaticInitter.start(__2E_str27234)
	gstaticInitter.asciz = "EndContact"
	gstaticInitter.start(__2E_str28235)
	gstaticInitter.asciz = "PtrType, AS3ValType, AS3ValType"
	gstaticInitter.start(__2E_str29236)
	gstaticInitter.asciz = "PreSolve"
	gstaticInitter.start(__2E_str30237)
	gstaticInitter.asciz = "PtrType, AS3ValType, AS3ValType, PtrType"
	gstaticInitter.start(__2E_str31238)
	gstaticInitter.asciz = "PostSolve"
	gstaticInitter.start(__2E_str32239)
	gstaticInitter.asciz = "AS3ValType"
	gstaticInitter.start(__2E_str33240)
	gstaticInitter.asciz = "AS3ValType, DoubleType, DoubleType, DoubleType, DoubleType, DoubleType"
	gstaticInitter.start(__2E_str34241)
	gstaticInitter.asciz = "PtrType, PtrType"
	gstaticInitter.start(__2E_str35242)
	gstaticInitter.asciz = "b2_maxManifoldPoints:PtrType,b2_maxPolygonVertices:PtrType,b2_aabbExtension:PtrType,b2_aabbMultiplier:PtrType,b2_linearSlop:PtrType,b2_angularSlop:PtrType,b2_polygonRadius:PtrType,b2_maxSubSteps:PtrType,b2_maxTOIContacts:PtrType,b2_velocityThreshold:PtrType,b2_maxLinearCorrection:PtrType,b2_maxAngularCorrection:PtrType,b2_maxTranslation:PtrType,b2_maxTranslationSquared:PtrType,b2_maxRotation:PtrType,b2_maxRotationSquared:PtrType,b2_contactBaumgarte:PtrType,b2_timeToSleep:PtrType,b2_linearSleepTolerance:PtrType,b2_angularSleepTolerance:PtrType"
	gstaticInitter.start(__2E_str36243)
	gstaticInitter.asciz = "b2World_new:AS3ValType,b2World_Step:AS3ValType,b2World_CreateBody:AS3ValType,b2World_DestroyBody:AS3ValType,b2World_CreateJoint:AS3ValType,b2World_DestroyJoint:AS3ValType,b2World_delete:AS3ValType,b2World_QueryAABB:AS3ValType,b2World_RayCast:AS3ValType,b2Body_CreateFixture:AS3ValType,b2Body_DestroyFixture:AS3ValType,b2Body_SetTransform:AS3ValType,b2Body_ResetMassData:AS3ValType,b2Body_GetMassData:AS3ValType,b2Body_SetMassData:AS3ValType,b2Body_SetActive:AS3ValType,b2Body_SetType:AS3ValType,b2Body_ApplyForce:AS3ValType,b2BodyDef_new:AS3ValType,b2BodyDef_delete:AS3ValType,b2CircleShape_new:AS3ValType,b2CircleShape_delete:AS3ValType,b2PolygonShape_new:AS3ValType,b2PolygonShape_delete:AS3ValType,b2FixtureDef_new:AS3ValType,b2FixtureDef_delete:AS3ValType,b2DistanceJointDef_new:AS3ValType,b2DistanceJointDef_delete:AS3ValType,b2GearJointDef_new:AS3ValType,b2GearJointDef_delete:AS3ValType,b2LineJointDef_new:AS3ValType,b2LineJointDef_delete:AS3ValType,b2MouseJointDef_new:AS3ValType,b2MouseJointDef_delete:AS3ValType,b2PrismaticJointDef_new:AS3ValType,b2PrismaticJointDef_delete:AS3ValType,b2PulleyJointDef_new:AS3ValType,b2PulleyJointDef_delete:AS3ValType,b2RevoluteJointDef_new:AS3ValType,b2RevoluteJointDef_delete:AS3ValType,b2WeldJointDef_new:AS3ValType,b2WeldJointDef_delete:AS3ValType,b2FrictionJointDef_new:AS3ValType,b2FrictionJointDef_delete:AS3ValType,b2RopeJointDef_new:AS3ValType,b2RopeJointDef_delete:AS3ValType,b2MassData_new:AS3ValType,b2MassData_delete:AS3ValType,b2Contact_Update:AS3ValType,b2Contact_Evaluate:AS3ValType,b2PolygonShape_Decompose:AS3ValType,b2DistanceInput_new:AS3ValType,b2DistanceInput_delete:AS3ValType,b2DistanceOutput_new:AS3ValType,b2DistanceOutput_delete:AS3ValType,b2SimplexCache_new:AS3ValType,b2SimplexCache_delete:AS3ValType,b2Distance:AS3ValType,b2EdgeShape_new:AS3ValType,b2EdgeShape_delete:AS3ValType,b2LoopShape_new:AS3ValType,b2LoopShape_delete:AS3ValType,b2Vec2Array_new:AS3ValType,b2Vec2Array_delete:AS3ValType,b2Settings:AS3ValType"
	gstaticInitter.start(__ZZN15b2GrowableStackIiLi256EE3PopEvE8__func__)
	gstaticInitter.asciz = "Pop"
	gstaticInitter.start(__2E_str37244)
	gstaticInitter.asciz = "../Box2D/Common/b2GrowableStack.h"
	gstaticInitter.start(__2E_str38245)
	gstaticInitter.asciz = "m_count > 0"
	gstaticInitter.start(__ZZN7b2JointC4EPK10b2JointDefE8__func__)
	gstaticInitter.asciz = "b2Joint"
	gstaticInitter.start(__2E_str39246)
	gstaticInitter.asciz = "../Box2D/Dynamics/Joints/b2Joint.cpp"
	gstaticInitter.start(__2E_str40247)
	gstaticInitter.asciz = "def->bodyA != def->bodyB"
	gstaticInitter.start(__2E_str41248)
	gstaticInitter.asciz = "IntType"
	gstaticInitter.start(__ZZN12b2EPCollider16FindIncidentEdgeEP12b2ClipVertexPK9b2EPProxyiS4_E8__func__)
	gstaticInitter.asciz = "FindIncidentEdge"
	gstaticInitter.start(__2E_str42249)
	gstaticInitter.asciz = "../Box2D/Collision/b2CollideEdge.cpp"
	gstaticInitter.start(__2E_str43250)
	gstaticInitter.asciz = "0 <= edge1 && edge1 < count1"
	gstaticInitter.start(__2E_str44251)
	gstaticInitter.asciz = "PtrType, DoubleType, DoubleType, DoubleType, DoubleType"
	gstaticInitter.start(__ZZNK9b2Simplex16GetWitnessPointsEP6b2Vec2S1_E8__func__)
	gstaticInitter.asciz = "GetWitnessPoints"
	gstaticInitter.start(__2E_str45252)
	gstaticInitter.asciz = "../Box2D/Collision/b2Distance.cpp"
	gstaticInitter.start(__2E_str46253)
	gstaticInitter.asciz = "false"
	gstaticInitter.start(__ZZNK9b2Simplex15GetClosestPointEvE8__func__)
	gstaticInitter.asciz = "GetClosestPoint"
	gstaticInitter.start(__ZZN7b2Sweep7AdvanceEfE8__func__)
	gstaticInitter.asciz = "Advance"
	gstaticInitter.start(__2E_str47254)
	gstaticInitter.asciz = "../Box2D/Common/b2Math.h"
	gstaticInitter.start(__2E_str48255)
	gstaticInitter.asciz = "alpha0 < 1.0f"
	gstaticInitter.start(__ZZ15ComputeCentroidPK6b2Vec2iE8__func__)
	gstaticInitter.asciz = "ComputeCentroid"
	gstaticInitter.start(__2E_str49256)
	gstaticInitter.asciz = "../Box2D/Collision/Shapes/b2PolygonShape.cpp"
	gstaticInitter.start(__2E_str50257)
	gstaticInitter.asciz = "count >= 3"
	gstaticInitter.start(__2E_str51258)
	gstaticInitter.asciz = "area > b2_epsilon"
	gstaticInitter.start(__ZZN14b2PolygonShape11ComputeMassEP10b2MassDatafE8__func__)
	gstaticInitter.asciz = "ComputeMass"
	gstaticInitter.start(__2E_str52259)
	gstaticInitter.asciz = "m_vertexCount >= 3"
	gstaticInitter.start(__ZZN6b2Body11SetMassDataEPK10b2MassDataE8__func__)
	gstaticInitter.asciz = "SetMassData"
	gstaticInitter.start(__2E_str53260)
	gstaticInitter.asciz = "../Box2D/Dynamics/b2Body.cpp"
	gstaticInitter.start(__2E_str54261)
	gstaticInitter.asciz = "m_world->IsLocked() == false"
	gstaticInitter.start(__2E_str55262)
	gstaticInitter.asciz = "m_I > 0.0f"
	gstaticInitter.start(__ZZ18b2FindIncidentEdgeP12b2ClipVertexPK14b2PolygonShapeRK11b2TransformiS3_S6_E8__func__)
	gstaticInitter.asciz = "b2FindIncidentEdge"
	gstaticInitter.start(__2E_str58265)
	gstaticInitter.asciz = "../Box2D/Collision/b2CollidePolygon.cpp"
	gstaticInitter.start(__ZZ16b2EdgeSeparationPK14b2PolygonShapeRK11b2TransformiS1_S4_E8__func__)
	gstaticInitter.asciz = "b2EdgeSeparation"
	gstaticInitter.start(__ZZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2TransformiE8__func__)
	gstaticInitter.asciz = "RayCast"
	gstaticInitter.start(__2E_str59266)
	gstaticInitter.asciz = "0.0f <= lower && lower <= input.maxFraction"
	gstaticInitter.start(__ZZNK9b2Simplex18GetSearchDirectionEvE8__func__)
	gstaticInitter.asciz = "GetSearchDirection"
	gstaticInitter.start(__ZZN15b2ContactSolver24SolveVelocityConstraintsEvE8__func__)
	gstaticInitter.asciz = "SolveVelocityConstraints"
	gstaticInitter.start(__2E_str60267)
	gstaticInitter.asciz = "../Box2D/Dynamics/Contacts/b2ContactSolver.cpp"
	gstaticInitter.start(__2E_str61268)
	gstaticInitter.asciz = "c->pointCount == 1 || c->pointCount == 2"
	gstaticInitter.start(__2E_str62269)
	gstaticInitter.asciz = "a.x >= 0.0f && a.y >= 0.0f"
	gstaticInitter.start(__ZZNK11b2LoopShape11ComputeAABBEP6b2AABBRK11b2TransformiE8__func__)
	gstaticInitter.asciz = "ComputeAABB"
	gstaticInitter.start(__2E_str63270)
	gstaticInitter.asciz = "childIndex < m_count"
	gstaticInitter.start(__2E_str67274)
	gstaticInitter.asciz = "../Box2D/Dynamics/Joints/b2RevoluteJoint.cpp"
	gstaticInitter.start(__ZZN15b2RevoluteJoint23InitVelocityConstraintsERK10b2TimeStepE8__func__)
	gstaticInitter.asciz = "InitVelocityConstraints"
	gstaticInitter.start(__2E_str68275)
	gstaticInitter.asciz = "b1->m_invI > 0.0f || b2->m_invI > 0.0f"
	gstaticInitter.start(__2E_str69276)
	gstaticInitter.asciz = "../Box2D/Dynamics/b2World.cpp"
	gstaticInitter.start(__ZZN9b2Contact7DestroyEPS_P16b2BlockAllocatorE8__func__)
	gstaticInitter.asciz = "Destroy"
	gstaticInitter.start(__2E_str71278)
	gstaticInitter.asciz = "s_initialized == true"
	gstaticInitter.start(__2E_str72279)
	gstaticInitter.asciz = "b2Shape::e_unknown < typeA && typeB < b2Shape::e_typeCount"
	gstaticInitter.start(__ZZN6b2Body13ResetMassDataEvE8__func__)
	gstaticInitter.asciz = "ResetMassData"
	gstaticInitter.start(__2E_str73280)
	gstaticInitter.asciz = "m_type == b2_dynamicBody"
	gstaticInitter.start(__2E_str74281)
	gstaticInitter.asciz = "PtrType, IntType"
	gstaticInitter.start(__2E_str75282)
	gstaticInitter.asciz = "BeginContact"
	gstaticInitter.start(__ZZN11b2LoopShape6CreateEPK6b2Vec2iE8__func__)
	gstaticInitter.asciz = "Create"
	gstaticInitter.start(__2E_str76283)
	gstaticInitter.asciz = "m_vertices == 0 && m_count == 0"
	gstaticInitter.start(__2E_str77284)
	gstaticInitter.asciz = "count >= 2"
	gstaticInitter.start(__ZZN16b2BlockAllocatorC4EvE8__func__)
	gstaticInitter.asciz = "b2BlockAllocator"
	gstaticInitter.start(__2E_str78285)
	gstaticInitter.asciz = "../Box2D/Common/b2BlockAllocator.cpp"
	gstaticInitter.start(__2E_str79286)
	gstaticInitter.asciz = "j < b2_blockSizes"
	gstaticInitter.start(__ZZN16b2StackAllocator8AllocateEiE8__func__)
	gstaticInitter.asciz = "Allocate"
	gstaticInitter.start(__2E_str80287)
	gstaticInitter.asciz = "m_entryCount < b2_maxStackEntries"
	gstaticInitter.start(__ZZN13b2DynamicTree12AllocateNodeEvE8__func__)
	gstaticInitter.asciz = "AllocateNode"
	gstaticInitter.start(__2E_str81288)
	gstaticInitter.asciz = "m_nodeCount == m_nodeCapacity"
	gstaticInitter.start(__2E_str82289)
	gstaticInitter.asciz = "0 < size"
	gstaticInitter.start(__2E_str83290)
	gstaticInitter.asciz = "0 <= index && index < b2_blockSizes"
	gstaticInitter.start(__2E_str84291)
	gstaticInitter.asciz = "blockCount * blockSize <= b2_chunkSize"
	gstaticInitter.start(__ZZN16b2BlockAllocator4FreeEPviE8__func__)
	gstaticInitter.asciz = "Free"
	gstaticInitter.start(__2E_str85292)
	gstaticInitter.asciz = "m_entryCount > 0"
	gstaticInitter.start(__2E_str86293)
	gstaticInitter.asciz = "p == entry->data"
	gstaticInitter.start(__ZZN15b2DistanceProxy3SetEPK7b2ShapeiE8__func__)
	gstaticInitter.asciz = "Set"
	gstaticInitter.start(__2E_str87294)
	gstaticInitter.asciz = "0 <= index && index < loop->GetCount()"
	gstaticInitter.start(__ZZNK9b2Simplex9GetMetricEvE8__func__)
	gstaticInitter.asciz = "GetMetric"
	gstaticInitter.start(__2E_str88295)
	gstaticInitter.asciz = "../Box2D/Dynamics/Joints/b2PulleyJoint.cpp"
	gstaticInitter.start(__2E_str89296)
	gstaticInitter.asciz = "m_limitMass1 > b2_epsilon"
	gstaticInitter.start(__2E_str90297)
	gstaticInitter.asciz = "m_limitMass2 > b2_epsilon"
	gstaticInitter.start(__2E_str91298)
	gstaticInitter.asciz = "m_pulleyMass > b2_epsilon"
	gstaticInitter.start(__2E_str92299)
	gstaticInitter.asciz = "../Box2D/Dynamics/Joints/b2MouseJoint.cpp"
	gstaticInitter.start(__2E_str93300)
	gstaticInitter.asciz = "d + step.dt * k > b2_epsilon"
	gstaticInitter.start(__ZZN16b2PulleyJointDef10InitializeEP6b2BodyS1_RK6b2Vec2S4_S4_S4_fE8__func__)
	gstaticInitter.asciz = "Initialize"
	gstaticInitter.start(__ZZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2TransformE8__func__)
	gstaticInitter.asciz = "CreateProxies"
	gstaticInitter.start(__2E_str95302)
	gstaticInitter.asciz = "../Box2D/Dynamics/b2Fixture.cpp"
	gstaticInitter.start(__2E_str96303)
	gstaticInitter.asciz = "m_proxyCount == 0"
	gstaticInitter.start(__ZZN6b2Body13CreateFixtureEPK12b2FixtureDefE8__func__)
	gstaticInitter.asciz = "CreateFixture"
	gstaticInitter.start(__2E_str97304)
	gstaticInitter.asciz = "AS3ValType, PtrType, PtrType"
	gstaticInitter.start(__ZZN15b2CircleContactC4EP9b2FixtureS1_E8__func__)
	gstaticInitter.asciz = "b2CircleContact"
	gstaticInitter.start(__2E_str98305)
	gstaticInitter.asciz = "../Box2D/Dynamics/Contacts/b2CircleContact.cpp"
	gstaticInitter.start(__2E_str99306)
	gstaticInitter.asciz = "m_fixtureA->GetType() == b2Shape::e_circle"
	gstaticInitter.start(__2E_str100)
	gstaticInitter.asciz = "m_fixtureB->GetType() == b2Shape::e_circle"
	gstaticInitter.start(__ZZN22b2EdgeAndCircleContactC4EP9b2FixtureS1_E8__func__)
	gstaticInitter.asciz = "b2EdgeAndCircleContact"
	gstaticInitter.start(__2E_str101)
	gstaticInitter.asciz = "../Box2D/Dynamics/Contacts/b2EdgeAndCircleContact.cpp"
	gstaticInitter.start(__2E_str102)
	gstaticInitter.asciz = "m_fixtureA->GetType() == b2Shape::e_edge"
	gstaticInitter.start(__ZZN23b2EdgeAndPolygonContactC4EP9b2FixtureS1_E8__func__)
	gstaticInitter.asciz = "b2EdgeAndPolygonContact"
	gstaticInitter.start(__2E_str103)
	gstaticInitter.asciz = "../Box2D/Dynamics/Contacts/b2EdgeAndPolygonContact.cpp"
	gstaticInitter.start(__2E_str104)
	gstaticInitter.asciz = "m_fixtureB->GetType() == b2Shape::e_polygon"
	gstaticInitter.start(__ZZN22b2LoopAndCircleContactC4EP9b2FixtureiS1_iE8__func__)
	gstaticInitter.asciz = "b2LoopAndCircleContact"
	gstaticInitter.start(__2E_str105)
	gstaticInitter.asciz = "../Box2D/Dynamics/Contacts/b2LoopAndCircleContact.cpp"
	gstaticInitter.start(__2E_str106)
	gstaticInitter.asciz = "m_fixtureA->GetType() == b2Shape::e_loop"
	gstaticInitter.start(__ZZN23b2LoopAndPolygonContactC4EP9b2FixtureiS1_iE8__func__)
	gstaticInitter.asciz = "b2LoopAndPolygonContact"
	gstaticInitter.start(__2E_str107)
	gstaticInitter.asciz = "../Box2D/Dynamics/Contacts/b2LoopAndPolygonContact.cpp"
	gstaticInitter.start(__ZZN25b2PolygonAndCircleContactC4EP9b2FixtureS1_E8__func__)
	gstaticInitter.asciz = "b2PolygonAndCircleContact"
	gstaticInitter.start(__2E_str108)
	gstaticInitter.asciz = "../Box2D/Dynamics/Contacts/b2PolygonAndCircleContact.cpp"
	gstaticInitter.start(__2E_str109)
	gstaticInitter.asciz = "m_fixtureA->GetType() == b2Shape::e_polygon"
	gstaticInitter.start(__ZZN16b2PolygonContactC4EP9b2FixtureS1_E8__func__)
	gstaticInitter.asciz = "b2PolygonContact"
	gstaticInitter.start(__2E_str110307)
	gstaticInitter.asciz = "../Box2D/Dynamics/Contacts/b2PolygonContact.cpp"
	gstaticInitter.start(__ZZN13b2DynamicTree10RemoveLeafEiE8__func__)
	gstaticInitter.asciz = "RemoveLeaf"
	gstaticInitter.start(__2E_str111)
	gstaticInitter.asciz = "m_nodes[parent].leafCount > 0"
	gstaticInitter.start(__ZZN13b2DynamicTree9MoveProxyEiRK6b2AABBRK6b2Vec2E8__func__)
	gstaticInitter.asciz = "MoveProxy"
	gstaticInitter.start(__2E_str112)
	gstaticInitter.asciz = "m_nodes[proxyId].IsLeaf()"
	gstaticInitter.start(__ZZN13b2DynamicTree12DestroyProxyEiE8__func__)
	gstaticInitter.asciz = "DestroyProxy"
	gstaticInitter.start(__ZZN6b2Body9SetActiveEbE8__func__)
	gstaticInitter.asciz = "SetActive"
	gstaticInitter.start(__2E_str113308)
	gstaticInitter.asciz = "AS3ValType, DoubleType, DoubleType, IntType"
	gstaticInitter.start(__ZZN6b2BodyC4EPK9b2BodyDefP7b2WorldE8__func__)
	gstaticInitter.asciz = "b2Body"
	gstaticInitter.start(__2E_str114309)
	gstaticInitter.asciz = "bd->position.IsValid()"
	gstaticInitter.start(__2E_str115)
	gstaticInitter.asciz = "bd->linearVelocity.IsValid()"
	gstaticInitter.start(__2E_str116)
	gstaticInitter.asciz = "b2IsValid(bd->angle)"
	gstaticInitter.start(__2E_str117310)
	gstaticInitter.asciz = "b2IsValid(bd->angularVelocity)"
	gstaticInitter.start(__2E_str118311)
	gstaticInitter.asciz = "b2IsValid(bd->inertiaScale) && bd->inertiaScale >= 0.0f"
	gstaticInitter.start(__2E_str119312)
	gstaticInitter.asciz = "b2IsValid(bd->angularDamping) && bd->angularDamping >= 0.0f"
	gstaticInitter.start(__2E_str120313)
	gstaticInitter.asciz = "b2IsValid(bd->linearDamping) && bd->linearDamping >= 0.0f"
	gstaticInitter.start(__ZZN7b2World10CreateBodyEPK9b2BodyDefE8__func__)
	gstaticInitter.asciz = "CreateBody"
	gstaticInitter.start(__2E_str121314)
	gstaticInitter.asciz = "IsLocked() == false"
	gstaticInitter.start(__2E_str122315)
	gstaticInitter.asciz = "../Box2D/Dynamics/Joints/b2GearJoint.cpp"
	gstaticInitter.start(__ZZN9b2Simplex9ReadCacheEPK14b2SimplexCachePK15b2DistanceProxyRK11b2TransformS5_S8_E8__func__)
	gstaticInitter.asciz = "ReadCache"
	gstaticInitter.start(__2E_str125317)
	gstaticInitter.asciz = "cache->count <= 3"
	gstaticInitter.start(__ZZN6b2Body12SetTransformERK6b2Vec2fE8__func__)
	gstaticInitter.asciz = "SetTransform"
	gstaticInitter.start(__2E_str126318)
	gstaticInitter.asciz = "PtrType, DoubleType, DoubleType, DoubleType"
	gstaticInitter.start(__2E_str127319)
	gstaticInitter.asciz = "PtrType, AS3ValType, DoubleType, DoubleType, DoubleType, DoubleType"
	gstaticInitter.start(__ZZNK20b2SeparationFunction8EvaluateEiifE8__func__)
	gstaticInitter.asciz = "Evaluate"
	gstaticInitter.start(__2E_str129321)
	gstaticInitter.asciz = "../Box2D/Collision/b2TimeOfImpact.cpp"
	gstaticInitter.start(__ZZNK20b2SeparationFunction17FindMinSeparationEPiS0_fE8__func__)
	gstaticInitter.asciz = "FindMinSeparation"
	gstaticInitter.start(__ZZN11b2GearJointC4EPK14b2GearJointDefE8__func__)
	gstaticInitter.asciz = "b2GearJoint"
	gstaticInitter.start(__2E_str130322)
	gstaticInitter.asciz = "type1 == e_revoluteJoint || type1 == e_prismaticJoint"
	gstaticInitter.start(__2E_str131)
	gstaticInitter.asciz = "type2 == e_revoluteJoint || type2 == e_prismaticJoint"
	gstaticInitter.start(__2E_str132323)
	gstaticInitter.asciz = "def->joint1->GetBodyA()->GetType() == b2_staticBody"
	gstaticInitter.start(__2E_str133324)
	gstaticInitter.asciz = "def->joint2->GetBodyA()->GetType() == b2_staticBody"
	gstaticInitter.start(__ZZN12b2MouseJointC4EPK15b2MouseJointDefE8__func__)
	gstaticInitter.asciz = "b2MouseJoint"
	gstaticInitter.start(__2E_str134)
	gstaticInitter.asciz = "def->target.IsValid()"
	gstaticInitter.start(__2E_str135)
	gstaticInitter.asciz = "b2IsValid(def->maxForce) && def->maxForce >= 0.0f"
	gstaticInitter.start(__2E_str136325)
	gstaticInitter.asciz = "b2IsValid(def->frequencyHz) && def->frequencyHz >= 0.0f"
	gstaticInitter.start(__2E_str137326)
	gstaticInitter.asciz = "b2IsValid(def->dampingRatio) && def->dampingRatio >= 0.0f"
	gstaticInitter.start(__ZZN13b2PulleyJointC4EPK16b2PulleyJointDefE8__func__)
	gstaticInitter.asciz = "b2PulleyJoint"
	gstaticInitter.start(__2E_str138327)
	gstaticInitter.asciz = "def->ratio != 0.0f"
	gstaticInitter.start(__ZZN7b2World11CreateJointEPK10b2JointDefE8__func__)
	gstaticInitter.asciz = "CreateJoint"
	gstaticInitter.start(__ZZN15b2ContactSolverC4EP18b2ContactSolverDefE8__func__)
	gstaticInitter.asciz = "b2ContactSolver"
	gstaticInitter.start(__2E_str139328)
	gstaticInitter.asciz = "manifold->pointCount > 0"
	gstaticInitter.start(__ZZ22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6_E8__func__)
	gstaticInitter.asciz = "b2CollideEdgeAndCircle"
	gstaticInitter.start(__2E_str140)
	gstaticInitter.asciz = "den > 0.0f"
	gstaticInitter.start(__ZZN15b2ContactSolver29InitializeVelocityConstraintsEvE8__func__)
	gstaticInitter.asciz = "InitializeVelocityConstraints"
	gstaticInitter.start(__2E_str141)
	gstaticInitter.asciz = "kNormal > b2_epsilon"
	gstaticInitter.start(__2E_str142)
	gstaticInitter.asciz = "kTangent > b2_epsilon"
	gstaticInitter.start(__ZZ10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInputE8__func__)
	gstaticInitter.asciz = "b2Distance"
	gstaticInitter.start(__2E_str143)
	gstaticInitter.asciz = "PtrType, PtrType, PtrType"
	gstaticInitter.start(__2E_str144)
	gstaticInitter.asciz = "0 < count && count < 3"
	gstaticInitter.start(__ZZ14b2TimeOfImpactP11b2TOIOutputPK10b2TOIInputE8__func__)
	gstaticInitter.asciz = "b2TimeOfImpact"
	gstaticInitter.start(__2E_str145329)
	gstaticInitter.asciz = "target > tolerance"
	gstaticInitter.start(__2E_str146330)
	gstaticInitter.asciz = "3 <= count && count <= b2_maxPolygonVertices"
	gstaticInitter.start(__2E_str147)
	gstaticInitter.asciz = "edge.LengthSquared() > b2_epsilon * b2_epsilon"
	gstaticInitter.start(__2E_str148331)
	gstaticInitter.asciz = "r.LengthSquared() > 0.0f"
	gstaticInitter.start(__2E_str149)
	gstaticInitter.asciz = "cc->pointCount > 0"
	gstaticInitter.start(__ZZ18TriangulatePolygonPfS_iP10b2TriangleE8__func__)
	gstaticInitter.asciz = "TriangulatePolygon"
	gstaticInitter.start(__2E_str165336)
	gstaticInitter.asciz = "bufferSize == xremLength-2"
	gstaticInitter.start(__ZZN10b2PolyNode21GetRightestConnectionEPS_E8__func__)
	gstaticInitter.asciz = "GetRightestConnection"
	gstaticInitter.start(__2E_str166)
	gstaticInitter.asciz = "inLength > 1.19209290E-07F"
	gstaticInitter.start(__2E_str167337)
	gstaticInitter.asciz = "testLengthSqr >= COLLAPSE_DIST_SQR"
	gstaticInitter.start(__2E_str170)
	gstaticInitter.asciz = "result"
	gstaticInitter.start(__2E_str171)
	gstaticInitter.asciz = "res"
	gstaticInitter.start(__ZZ9TraceEdgeP9b2PolygonE8__func__)
	gstaticInitter.asciz = "TraceEdge"
	gstaticInitter.start(__2E_str172)
	gstaticInitter.asciz = "knode != jnode"
	gstaticInitter.start(__2E_str173)
	gstaticInitter.asciz = "currentNode->nConnected > 0"
	gstaticInitter.start(__ZZN7b2World5SolveERK10b2TimeStepE8__func__)
	gstaticInitter.asciz = "Solve"
	gstaticInitter.start(__2E_str174)
	gstaticInitter.asciz = "b->IsActive() == true"
	gstaticInitter.start(__2E_str175338)
	gstaticInitter.asciz = "stackCount < stackSize"
	gstaticInitter.start(__ZZN7b2World8SolveTOIERK10b2TimeStepE8__func__)
	gstaticInitter.asciz = "SolveTOI"
	gstaticInitter.start(__2E_str176)
	gstaticInitter.asciz = "typeA == b2_dynamicBody || typeB == b2_dynamicBody"
	gstaticInitter.start(__2E_str177)
	gstaticInitter.asciz = "PtrType, DoubleType, IntType, IntType"
	gstaticInitter.start(__ZZN6b2Body14DestroyFixtureEP9b2FixtureE8__func__)
	gstaticInitter.asciz = "DestroyFixture"
	gstaticInitter.start(__2E_str178)
	gstaticInitter.asciz = "fixture->m_body == this"
	gstaticInitter.start(__2E_str179339)
	gstaticInitter.asciz = "m_fixtureCount > 0"
	gstaticInitter.start(__2E_str180)
	gstaticInitter.asciz = "found"
	gstaticInitter.start(__ZZN7b2World12DestroyJointEP7b2JointE8__func__)
	gstaticInitter.asciz = "DestroyJoint"
	gstaticInitter.start(__2E_str181340)
	gstaticInitter.asciz = "m_jointCount > 0"
	gstaticInitter.start(__ZZN7b2World11DestroyBodyEP6b2BodyE8__func__)
	gstaticInitter.asciz = "DestroyBody"
	gstaticInitter.start(__2E_str182)
	gstaticInitter.asciz = "m_bodyCount > 0"
	gstaticInitter.start(_llvm_2E_global_ctors)
	gstaticInitter.i32 = 65535
	gstaticInitter.i32 = __GLOBAL__I__ZN9__gnu_cxx10__mt_allocIcE7_S_onceE
	gstaticInitter.i32 = 65535
	gstaticInitter.i32 = __GLOBAL__I__ZStrsIfcSt11char_traitsIcEERSt13basic_istreamIT0_T1_ES6_RSt7complexIT_E
	gstaticInitter.i32 = 65535
	gstaticInitter.i32 = __GLOBAL__I__ZNSt13basic_filebufIcSt11char_traitsIcEE15_M_create_pbackEv
	gstaticInitter.i32 = 65535
	gstaticInitter.i32 = __GLOBAL__I__ZNKSt9basic_iosIcSt11char_traitsIcEEcvPvEv
	gstaticInitter.i32 = 65535
	gstaticInitter.i32 = __GLOBAL__I__ZNSt8ios_base4InitC2Ev
	gstaticInitter.i32 = 65535
	gstaticInitter.i32 = __GLOBAL__I__ZNSiC2EPSt15basic_streambufIcSt11char_traitsIcEE
	gstaticInitter.i32 = 65535
	gstaticInitter.i32 = __GLOBAL__I__ZNSt10moneypunctIcLb0EE4intlE
	gstaticInitter.i32 = 65535
	gstaticInitter.i32 = __GLOBAL__I__ZN14__gnu_internal12locale_mutexE
	gstaticInitter.i32 = 65535
	gstaticInitter.i32 = __GLOBAL__I__ZNSt6localeC2EPKc
	gstaticInitter.i32 = 65535
	gstaticInitter.i32 = __GLOBAL__I__ZNSoC2EPSt15basic_streambufIcSt11char_traitsIcEE
	gstaticInitter.i32 = 65535
	gstaticInitter.i32 = __GLOBAL__I__ZNSt15basic_stringbufIcSt11char_traitsIcESaIcEEC2ESt13_Ios_Openmode
	gstaticInitter.i32 = 65535
	gstaticInitter.i32 = __GLOBAL__I__ZNSt12strstreambufC2Ei
	gstaticInitter.i32 = 65535
	gstaticInitter.i32 = __GLOBAL__I__ZNSt10moneypunctIwLb0EE4intlE
	modPostStaticInit()
}
modEnd()
}


