package extras {		import Box2DAS.*;	import Box2DAS.Collision.*;	import Box2DAS.Collision.Shapes.*;	import Box2DAS.Common.*;	import Box2DAS.Dynamics.*;	import Box2DAS.Dynamics.Contacts.*;	import Box2DAS.Dynamics.Joints.*;	import cmodule.Box2D.*;	import wck.*;	import misc.*;	import flash.utils.*;	import flash.events.*;	import flash.display.*;	import flash.text.*;	import flash.geom.*;	import flash.ui.*;		public class CrayonSolid extends Crayon {				public var confirm:Boolean = true;				public override function create():void {			source = new XYSource();			listenOnceWhileVisible(stage, Input.MOUSE_UP_OR_LOST, function() {				tracer.finish();							});			super.create();			tracer.loop = true;		}				public override function onFinished(e:Event):void {			isSensor = true;			super.onFinished(e);			if(tracer.points.length < 3) {				remove();				return;			}			if(tracer.circle) {				circle(tracer.circleRadius, V2.fromP(tracer.center));			}			else {				var coords:Vector.<Number> = new Vector.<Number>;				for(var i:int = 0; i < tracer.points.length; ++i) {					coords.push(tracer.points[i].x);					coords.push(tracer.points[i].y);				}				decomposedPoly(coords);				if(b2fixtures.length == 0) {					Util.remove(this);					return;				}			}			var p:Point = tracer.points[0];			graphics.clear();			for(i = 0; i < b2fixtures.length; ++i) {				graphics.lineStyle(1, 0xffffff);				graphics.beginFill(0x5b9ef4);								b2fixtures[i].Draw(graphics, new XF(new V2(), M22.identity()), world.scale);				graphics.endFill();				b2fixtures[i].m_reportBeginContact = true;			}			listenWhileVisible(this, ContactEvent.BEGIN_CONTACT, detectContact);			listenOnceWhileVisible(world, StepEvent.STEP, confirmShape, false, -1);		}				public function detectContact(e:Event):void {			e.preventDefault();			confirm = false;		}				public function confirmShape(e:Event):void {			stopListening(this, ContactEvent.BEGIN_CONTACT, detectContact);			if(confirm) {				b2body.SetType(b2Body.b2_dynamicBody);				for(var i:int = 0; i < b2fixtures.length; ++i) {					b2fixtures[i].SetSensor(false);				}			}			else {				remove();			}		}	}}