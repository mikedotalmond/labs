package extras {		import Box2DAS.*;	import Box2DAS.Collision.*;	import Box2DAS.Collision.Shapes.*;	import Box2DAS.Common.*;	import Box2DAS.Dynamics.*;	import Box2DAS.Dynamics.Contacts.*;	import Box2DAS.Dynamics.Joints.*;	import cmodule.Box2D.*;	import wck.*;	import misc.*;	import flash.utils.*;	import flash.events.*;	import flash.display.*;	import flash.text.*;	import flash.geom.*;	import flash.ui.*;		public class CrayonLine extends Crayon {					public var tempShape:b2Fixture = null;				[Inspectable(defaultValue='')]		public var tipName:String = '';				public var tip:BodyShape;				public override function create():void {			var s:XYSourceDisplayObject = new XYSourceDisplayObject();			source = s;			super.create();			if(!tip && tipName != '') {				tip = Util.getDisplayObjectByPath(this.parent, tipName, world) as BodyShape;			}			if(!tip) { /// Assume this was added as a result of mouse down.				tip = new CrayonTip();				tip.reportBeginContact = true;				Util.addChildAtPosOf(world, tip, this);			}			listenWhileVisible(tip, ContactEvent.BEGIN_CONTACT, handleTipContact)			listenWhileVisible(tip, Event.REMOVED_FROM_STAGE, handleTipRemoved);			s.obj = tip;		}				public function handleTipRemoved(e:Event):void {			tracer.finish();		}				public function handleTipContact(e:ContactEvent):void {			if(e.other.m_userData == this) {				//e.contact.SetSensor(true);				e.contact.SetEnabled(false);			}		}						public override function onTempPoint(e:Event):void {			super.onTempPoint(e);			createTempShape();		}				public override function onPermPoint(e:Event):void {			super.onPermPoint(e);			createTempShape();			var f:b2Fixture = addShapeForPoints(tracer.points[tracer.points.length - 2], tracer.points[tracer.points.length - 1]);		}				public override function onFinished(e:Event):void {			super.onFinished(e);			destroyTempShape();			b2body.SetType(b2Body.b2_dynamicBody);					}				public function createTempShape():void {			destroyTempShape();			if(tracer.tempPoints.length > 0) {				tempShape = addShapeForPoints(tracer.points[tracer.points.length - 1], tracer.tempPoints[tracer.tempPoints.length - 1]);			}		}				public function destroyTempShape():void {			if(tempShape) {				tempShape.destroy();				b2fixtures.pop();				tempShape = null;			}		}								public function addShapeForPoints(point1:Point, point2:Point):b2Fixture {			var p1:V2 = V2.fromP(point1);			var p2:V2 = V2.fromP(point2);			var dif:V2 = V2.subtract(p2, p1).divideN(2);			var pos:V2 = V2.add(p1, dif);			initFixtureDef();			var b:b2Fixture = box(dif.length() * 2, lineThickness, pos, dif.angle() * Util.R2D);			return b;		}	}}