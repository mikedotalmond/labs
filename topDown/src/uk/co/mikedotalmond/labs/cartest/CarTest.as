/*Copyright (c) 2011 Mike Almond - @mikedotalmondPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE.*/package uk.co.mikedotalmond.labs.cartest {		import apparat.math.FastMath;	import com.adobe.images.PNGEncoder;	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.BlendMode;	import flash.display.PixelSnapping;	import flash.display.Shape;	import flash.display.StageAlign;	import flash.display.StageDisplayState;	import flash.display.StageQuality;	import flash.display.StageScaleMode;	import flash.events.Event;	import flash.events.KeyboardEvent;	import flash.events.MouseEvent;	import flash.geom.Matrix;	import flash.geom.Rectangle;	import flash.net.FileReference;	import flash.text.TextField;	import uk.co.mikedotalmond.labs.cartest.ui.Controls;	import wck.*;		public final class CarTest extends WCK {				private var ui 			:Controls;				public var carWorld		:CarTestWorld;		private var _fr			:FileReference;				private var _skids		:Shape;		private var _canvas		:Bitmap;				public static const CANVAS_WIDTH	:uint = 1280;		public static const CANVAS_HEIGHT	:uint = 640;		public static const WORLD_WIDTH		:uint = 3072;		public static const WORLD_HEIGHT	:uint = 1024;				private static const SKIDS_BD		:BitmapData = new BitmapData(WORLD_WIDTH, WORLD_HEIGHT, true, 0x00000000);				public function CarTest() {			super();			stop();			_fr = new FileReference();			_fr.addEventListener(Event.COMPLETE, onSave, false, 0, true);			_fr.addEventListener(Event.CANCEL, onSave, false, 0, true);					}				public override function create():void {			super.create();						stage.quality 	= StageQuality.HIGH;			stage.scaleMode = StageScaleMode.NO_SCALE;			stage.align 	= StageAlign.TOP_LEFT;			stage.showDefaultContextMenu = false;						wck.World.dragJointClass = Joint;						ui = new Controls(this, 0, 0);			ui.addEventListener("blendModeSelect", onUI, false, 0, true);			ui.addEventListener("bgColourSelect", onUI, false, 0, true);			ui.addEventListener("skidColourSelect", onUI, false, 0, true);			ui.addEventListener("save", onUI, false, 0, true);			ui.addEventListener("clear", onUI, false, 0, true);						setupBitmaps();						stage.addEventListener(KeyboardEvent.KEY_DOWN, onKey, false, 0, true);			carWorld.addEventListener("initWorld", startWorld, false, 0, true);		}				private function setupBitmaps():void {						_canvas 			= new Bitmap(new BitmapData(CarTest.CANVAS_WIDTH, CarTest.CANVAS_HEIGHT, false, 0x333333), PixelSnapping.AUTO, true);						_skids 				= new Shape();			_skids.blendMode  	= BlendMode.MULTIPLY;						addChildAt(_canvas, 0);		}				private function startWorld(e:Event):void {			carWorld.removeEventListener("initWorld", startWorld);						addObjects();						carWorld.car0.prepare(_skids.graphics);						stage.addEventListener(Event.RESIZE, onResize);			stage.addEventListener(Event.ENTER_FRAME, step);						onResize(null);			step(null);		}				private function addObjects():void {			var n:int = 192;			var body:Circle20;			while (--n) {				body = new Circle20()				body.x = WORLD_WIDTH  * Math.random();				body.y = WORLD_HEIGHT * Math.random();				carWorld.addChild(body);			}		}				private function onResize(e:Event):void {			x = stage.stageWidth / 2 - CANVAS_WIDTH / 2;			y = stage.stageHeight / 2 - CANVAS_HEIGHT / 2;		}				private function step(e:Event):void {			carWorld.step();						const clipRect:Rectangle = new Rectangle(x, y, CANVAS_WIDTH, CANVAS_HEIGHT);						const tx		:Matrix 	= new Matrix(1, 0, 0, 1, carWorld.x, carWorld.y);			const b			:BitmapData = _canvas.bitmapData;			const skidRect	:Rectangle  = _skids.getBounds(_skids);						if (!skidRect.isEmpty()) {				SKIDS_BD.draw(_skids, null, null, _skids.blendMode, skidRect, true);				_skids.graphics.clear();			}						b.lock();			b.fillRect(clipRect, 0xFFaa3333);						if (carWorld.x > 0) {				clipRect.width -= carWorld.x;				clipRect.x += carWorld.x;			} else if (carWorld.x + WORLD_WIDTH < CANVAS_WIDTH) {				clipRect.width = carWorld.x + WORLD_WIDTH;			}			if (carWorld.y > 0) {				clipRect.height -= carWorld.y;				clipRect.y += carWorld.y;			} else if (carWorld.y + WORLD_HEIGHT < CANVAS_HEIGHT) {				clipRect.height = carWorld.y + WORLD_HEIGHT;			}						b.fillRect(clipRect, 0xFF443333);						//b.draw(CarTest.BACKGROUND_BD, tx, null, null, clipRect, true);			//SKIDS_BD.getColorBoundsRect(0xFFFFFFFF, 0x00000000, false)			b.draw(SKIDS_BD, tx, null, null, clipRect, true);			b.draw(carWorld, tx, null, null, clipRect, true);						// debug draw - skid rect			/*if (!skidRect.isEmpty()) {				skidRect.x += carWorld.x;				skidRect.y += carWorld.y;				// use skidrect to position/size a particle emitter				b.fillRect(skidRect, 0xFF338833);			} */						b.unlock();		}				private function onKey(e:KeyboardEvent):void {			if (e.charCode == String("f").charCodeAt(0)) {				stage.fullScreenSourceRect 	= new Rectangle(x, y, CANVAS_WIDTH, CANVAS_HEIGHT);				stage.displayState 			= StageDisplayState.FULL_SCREEN_INTERACTIVE;			}		}				private function onUI(e:Event):void {			switch (e.type){				case "skidColourSelect": {					carWorld.car0.skidColour = ui.skidColour;					break;				}				case "save": {					stage.frameRate  = 5;					// encode and save .png					_fr.save(PNGEncoder.encode(SKIDS_BD), "skids.png");					break;				}				case "clear": {					SKIDS_BD.fillRect(SKIDS_BD.rect, 0x00000000);					break;				}			}		}				private function onSave(e:Event):void {			stage.frameRate = 60;		}	}}